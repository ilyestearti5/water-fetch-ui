{
  // Place your CSM workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "hoverReactEvent": {
    "scope": "javascript,typescript,javascript,typescriptreact",
    "prefix": "hoverReactEvent",
    "body": [
      "onMouseEnter={() => {",
      "  $1.set(true)",
      "}}",
      "onMouseLeave={() => {",
      "  $1.set(false)",
      "}}",
    ],
    "description": "React Hover Event",
  },
  "focusReactEvent": {
    "scope": "javascript,typescript,javascript,typescriptreact",
    "prefix": "focusReactEvent",
    "body": [
      "onFocus={() => {",
      "  $1.set(true)",
      "}}",
      "onBlur={() => {",
      "  $1.set(false)",
      "}}",
    ],
    "description": "React Focus Event",
  },
  "activeReactEvent": {
    "scope": "javascript,typescript,javascript,typescriptreact",
    "prefix": "activeReactEvent",
    "body": [
      "onMouseDown={() => {",
      "  $1.set(true)",
      "}}",
      "onMouseUp={() => {",
      "  $1.set(false)",
      "}}",
    ],
    "description": "React Active Event",
  },
  "colorMerge": {
    "scope": "javascript,typescript,javascript,typescriptreact",
    "prefix": "color",
    "body": "const colorMerge = useColorMerge()",
  },
  "srg": {
    "scope": "javascript,typescript,javascript,typescriptreact",
    "prefix": "srg",
    "body": "const $1 = useCopyState<$2>($3)",
  },
  "sr": {
    "scope": "javascript,typescript,javascript,typescriptreact",
    "prefix": "sr",
    "body": "const $1 = useCopyState($2)",
  },
}

var Ww = Object.defineProperty;
var Qw = (t, e, n) => e in t ? Ww(t, e, { enumerable: !0, configurable: !0, writable: !0, value: n }) : t[e] = n;
var En = (t, e, n) => Qw(t, typeof e != "symbol" ? e + "" : e, n);
import * as co from "react";
import ne, { useContext as Yw, useRef as Jw, useCallback as Xw, useDebugValue as Zw } from "react";
import { as as Mm, D as ya, A as tr, r as eE, J as rn, at as va, a2 as Vm, i as Ph, S as tE, aq as nE, ar as rE, h as ps, au as Fm, a8 as jn, E as iE } from "./index-CxQCU1i7.mjs";
import { unstable_batchedUpdates as sE } from "react-dom";
function _a(t) {
  return t && t.__esModule && Object.prototype.hasOwnProperty.call(t, "default") ? t.default : t;
}
function oE(t) {
  if (t.__esModule) return t;
  var e = t.default;
  if (typeof e == "function") {
    var n = function r() {
      return this instanceof r ? Reflect.construct(e, arguments, this.constructor) : e.apply(this, arguments);
    };
    n.prototype = e.prototype;
  } else n = {};
  return Object.defineProperty(n, "__esModule", { value: !0 }), Object.keys(t).forEach(function(r) {
    var i = Object.getOwnPropertyDescriptor(t, r);
    Object.defineProperty(n, r, i.get ? i : {
      enumerable: !0,
      get: function() {
        return t[r];
      }
    });
  }), n;
}
var Um = {}, kh = globalThis.MutationObserver || globalThis.WebKitMutationObserver, Qi;
if (kh) {
  var Oh = 0, aE = new kh(uo), Dh = globalThis.document.createTextNode("");
  aE.observe(Dh, {
    characterData: !0
  }), Qi = function() {
    Dh.data = Oh = ++Oh % 2;
  };
} else if (!globalThis.setImmediate && typeof globalThis.MessageChannel < "u") {
  var Nh = new globalThis.MessageChannel();
  Nh.port1.onmessage = uo, Qi = function() {
    Nh.port2.postMessage(0);
  };
} else "document" in globalThis && "onreadystatechange" in globalThis.document.createElement("script") ? Qi = function() {
  var t = globalThis.document.createElement("script");
  t.onreadystatechange = function() {
    uo(), t.onreadystatechange = null, t.parentNode.removeChild(t), t = null;
  }, globalThis.document.documentElement.appendChild(t);
} : Qi = function() {
  setTimeout(uo, 0);
};
var ru, Yi = [];
function uo() {
  ru = !0;
  for (var t, e, n = Yi.length; n; ) {
    for (e = Yi, Yi = [], t = -1; ++t < n; )
      e[t]();
    n = Yi.length;
  }
  ru = !1;
}
var cE = uE;
function uE(t) {
  Yi.push(t) === 1 && !ru && Qi();
}
var lE = cE;
function Ti() {
}
var wt = {}, jm = ["REJECTED"], iu = ["FULFILLED"], $m = ["PENDING"], fE = Vr;
function Vr(t) {
  if (typeof t != "function")
    throw new TypeError("resolver must be a function");
  this.state = $m, this.queue = [], this.outcome = void 0, t !== Ti && Bm(this, t);
}
Vr.prototype.catch = function(t) {
  return this.then(null, t);
};
Vr.prototype.then = function(t, e) {
  if (typeof t != "function" && this.state === iu || typeof e != "function" && this.state === jm)
    return this;
  var n = new this.constructor(Ti);
  if (this.state !== $m) {
    var r = this.state === iu ? t : e;
    ol(n, r, this.outcome);
  } else
    this.queue.push(new ks(n, t, e));
  return n;
};
function ks(t, e, n) {
  this.promise = t, typeof e == "function" && (this.onFulfilled = e, this.callFulfilled = this.otherCallFulfilled), typeof n == "function" && (this.onRejected = n, this.callRejected = this.otherCallRejected);
}
ks.prototype.callFulfilled = function(t) {
  wt.resolve(this.promise, t);
};
ks.prototype.otherCallFulfilled = function(t) {
  ol(this.promise, this.onFulfilled, t);
};
ks.prototype.callRejected = function(t) {
  wt.reject(this.promise, t);
};
ks.prototype.otherCallRejected = function(t) {
  ol(this.promise, this.onRejected, t);
};
function ol(t, e, n) {
  lE(function() {
    var r;
    try {
      r = e(n);
    } catch (i) {
      return wt.reject(t, i);
    }
    r === t ? wt.reject(t, new TypeError("Cannot resolve promise with itself")) : wt.resolve(t, r);
  });
}
wt.resolve = function(t, e) {
  var n = qm(hE, e);
  if (n.status === "error")
    return wt.reject(t, n.value);
  var r = n.value;
  if (r)
    Bm(t, r);
  else {
    t.state = iu, t.outcome = e;
    for (var i = -1, s = t.queue.length; ++i < s; )
      t.queue[i].callFulfilled(e);
  }
  return t;
};
wt.reject = function(t, e) {
  t.state = jm, t.outcome = e;
  for (var n = -1, r = t.queue.length; ++n < r; )
    t.queue[n].callRejected(e);
  return t;
};
function hE(t) {
  var e = t && t.then;
  if (t && (typeof t == "object" || typeof t == "function") && typeof e == "function")
    return function() {
      e.apply(t, arguments);
    };
}
function Bm(t, e) {
  var n = !1;
  function r(a) {
    n || (n = !0, wt.reject(t, a));
  }
  function i(a) {
    n || (n = !0, wt.resolve(t, a));
  }
  function s() {
    e(i, r);
  }
  var o = qm(s);
  o.status === "error" && r(o.value);
}
function qm(t, e) {
  var n = {};
  try {
    n.value = t(e), n.status = "success";
  } catch (r) {
    n.status = "error", n.value = r;
  }
  return n;
}
Vr.resolve = dE;
function dE(t) {
  return t instanceof this ? t : wt.resolve(new this(Ti), t);
}
Vr.reject = pE;
function pE(t) {
  var e = new this(Ti);
  return wt.reject(e, t);
}
Vr.all = mE;
function mE(t) {
  var e = this;
  if (Object.prototype.toString.call(t) !== "[object Array]")
    return this.reject(new TypeError("must be an array"));
  var n = t.length, r = !1;
  if (!n)
    return this.resolve([]);
  for (var i = new Array(n), s = 0, o = -1, a = new this(Ti); ++o < n; )
    u(t[o], o);
  return a;
  function u(l, h) {
    e.resolve(l).then(f, function(y) {
      r || (r = !0, wt.reject(a, y));
    });
    function f(y) {
      i[h] = y, ++s === n && !r && (r = !0, wt.resolve(a, i));
    }
  }
}
Vr.race = gE;
function gE(t) {
  var e = this;
  if (Object.prototype.toString.call(t) !== "[object Array]")
    return this.reject(new TypeError("must be an array"));
  var n = t.length, r = !1;
  if (!n)
    return this.resolve([]);
  for (var i = -1, s = new this(Ti); ++i < n; )
    o(t[i]);
  return s;
  function o(a) {
    e.resolve(a).then(function(u) {
      r || (r = !0, wt.resolve(s, u));
    }, function(u) {
      r || (r = !0, wt.reject(s, u));
    });
  }
}
const yE = /* @__PURE__ */ _a(fE);
var vE = typeof Promise == "function" ? Promise : yE;
const _E = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: vE
}, Symbol.toStringTag, { value: "Module" })), wE = /* @__PURE__ */ oE(_E);
(function(t) {
  var e = wE;
  function n(i, s, o) {
    return typeof s != "string" ? e.reject(new Error("doc id is required")) : i.get(s).catch(function(a) {
      if (a.status !== 404)
        throw a;
      return {};
    }).then(function(a) {
      var u = a._rev, l = o(a);
      return l ? (l._id = s, l._rev = u, r(i, l, o)) : { updated: !1, rev: u, id: s };
    });
  }
  function r(i, s, o) {
    return i.put(s).then(function(a) {
      return {
        updated: !0,
        rev: a.rev,
        id: s._id
      };
    }, function(a) {
      if (a.status !== 409)
        throw a;
      return n(i, s._id, o);
    });
  }
  t.upsert = function(s, o, a) {
    var u = this, l = n(u, s, o);
    if (typeof a != "function")
      return l;
    l.then(function(h) {
      a(null, h);
    }, a);
  }, t.putIfNotExists = function(s, o, a) {
    var u = this;
    typeof s != "string" && (a = o, o = s, s = o._id);
    var l = function(f) {
      return f._rev ? !1 : o;
    }, h = n(u, s, l);
    if (typeof a != "function")
      return h;
    h.then(function(f) {
      a(null, f);
    }, a);
  }, typeof window < "u" && window.PouchDB && window.PouchDB.plugin(t);
})(Um);
const EE = /* @__PURE__ */ _a(Um);
var zm = { exports: {} };
(function(t, e) {
  (function(n) {
    t.exports = n();
  })(function(n) {
    var r = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
    function i(v, E) {
      var p = v[0], g = v[1], w = v[2], I = v[3];
      p += (g & w | ~g & I) + E[0] - 680876936 | 0, p = (p << 7 | p >>> 25) + g | 0, I += (p & g | ~p & w) + E[1] - 389564586 | 0, I = (I << 12 | I >>> 20) + p | 0, w += (I & p | ~I & g) + E[2] + 606105819 | 0, w = (w << 17 | w >>> 15) + I | 0, g += (w & I | ~w & p) + E[3] - 1044525330 | 0, g = (g << 22 | g >>> 10) + w | 0, p += (g & w | ~g & I) + E[4] - 176418897 | 0, p = (p << 7 | p >>> 25) + g | 0, I += (p & g | ~p & w) + E[5] + 1200080426 | 0, I = (I << 12 | I >>> 20) + p | 0, w += (I & p | ~I & g) + E[6] - 1473231341 | 0, w = (w << 17 | w >>> 15) + I | 0, g += (w & I | ~w & p) + E[7] - 45705983 | 0, g = (g << 22 | g >>> 10) + w | 0, p += (g & w | ~g & I) + E[8] + 1770035416 | 0, p = (p << 7 | p >>> 25) + g | 0, I += (p & g | ~p & w) + E[9] - 1958414417 | 0, I = (I << 12 | I >>> 20) + p | 0, w += (I & p | ~I & g) + E[10] - 42063 | 0, w = (w << 17 | w >>> 15) + I | 0, g += (w & I | ~w & p) + E[11] - 1990404162 | 0, g = (g << 22 | g >>> 10) + w | 0, p += (g & w | ~g & I) + E[12] + 1804603682 | 0, p = (p << 7 | p >>> 25) + g | 0, I += (p & g | ~p & w) + E[13] - 40341101 | 0, I = (I << 12 | I >>> 20) + p | 0, w += (I & p | ~I & g) + E[14] - 1502002290 | 0, w = (w << 17 | w >>> 15) + I | 0, g += (w & I | ~w & p) + E[15] + 1236535329 | 0, g = (g << 22 | g >>> 10) + w | 0, p += (g & I | w & ~I) + E[1] - 165796510 | 0, p = (p << 5 | p >>> 27) + g | 0, I += (p & w | g & ~w) + E[6] - 1069501632 | 0, I = (I << 9 | I >>> 23) + p | 0, w += (I & g | p & ~g) + E[11] + 643717713 | 0, w = (w << 14 | w >>> 18) + I | 0, g += (w & p | I & ~p) + E[0] - 373897302 | 0, g = (g << 20 | g >>> 12) + w | 0, p += (g & I | w & ~I) + E[5] - 701558691 | 0, p = (p << 5 | p >>> 27) + g | 0, I += (p & w | g & ~w) + E[10] + 38016083 | 0, I = (I << 9 | I >>> 23) + p | 0, w += (I & g | p & ~g) + E[15] - 660478335 | 0, w = (w << 14 | w >>> 18) + I | 0, g += (w & p | I & ~p) + E[4] - 405537848 | 0, g = (g << 20 | g >>> 12) + w | 0, p += (g & I | w & ~I) + E[9] + 568446438 | 0, p = (p << 5 | p >>> 27) + g | 0, I += (p & w | g & ~w) + E[14] - 1019803690 | 0, I = (I << 9 | I >>> 23) + p | 0, w += (I & g | p & ~g) + E[3] - 187363961 | 0, w = (w << 14 | w >>> 18) + I | 0, g += (w & p | I & ~p) + E[8] + 1163531501 | 0, g = (g << 20 | g >>> 12) + w | 0, p += (g & I | w & ~I) + E[13] - 1444681467 | 0, p = (p << 5 | p >>> 27) + g | 0, I += (p & w | g & ~w) + E[2] - 51403784 | 0, I = (I << 9 | I >>> 23) + p | 0, w += (I & g | p & ~g) + E[7] + 1735328473 | 0, w = (w << 14 | w >>> 18) + I | 0, g += (w & p | I & ~p) + E[12] - 1926607734 | 0, g = (g << 20 | g >>> 12) + w | 0, p += (g ^ w ^ I) + E[5] - 378558 | 0, p = (p << 4 | p >>> 28) + g | 0, I += (p ^ g ^ w) + E[8] - 2022574463 | 0, I = (I << 11 | I >>> 21) + p | 0, w += (I ^ p ^ g) + E[11] + 1839030562 | 0, w = (w << 16 | w >>> 16) + I | 0, g += (w ^ I ^ p) + E[14] - 35309556 | 0, g = (g << 23 | g >>> 9) + w | 0, p += (g ^ w ^ I) + E[1] - 1530992060 | 0, p = (p << 4 | p >>> 28) + g | 0, I += (p ^ g ^ w) + E[4] + 1272893353 | 0, I = (I << 11 | I >>> 21) + p | 0, w += (I ^ p ^ g) + E[7] - 155497632 | 0, w = (w << 16 | w >>> 16) + I | 0, g += (w ^ I ^ p) + E[10] - 1094730640 | 0, g = (g << 23 | g >>> 9) + w | 0, p += (g ^ w ^ I) + E[13] + 681279174 | 0, p = (p << 4 | p >>> 28) + g | 0, I += (p ^ g ^ w) + E[0] - 358537222 | 0, I = (I << 11 | I >>> 21) + p | 0, w += (I ^ p ^ g) + E[3] - 722521979 | 0, w = (w << 16 | w >>> 16) + I | 0, g += (w ^ I ^ p) + E[6] + 76029189 | 0, g = (g << 23 | g >>> 9) + w | 0, p += (g ^ w ^ I) + E[9] - 640364487 | 0, p = (p << 4 | p >>> 28) + g | 0, I += (p ^ g ^ w) + E[12] - 421815835 | 0, I = (I << 11 | I >>> 21) + p | 0, w += (I ^ p ^ g) + E[15] + 530742520 | 0, w = (w << 16 | w >>> 16) + I | 0, g += (w ^ I ^ p) + E[2] - 995338651 | 0, g = (g << 23 | g >>> 9) + w | 0, p += (w ^ (g | ~I)) + E[0] - 198630844 | 0, p = (p << 6 | p >>> 26) + g | 0, I += (g ^ (p | ~w)) + E[7] + 1126891415 | 0, I = (I << 10 | I >>> 22) + p | 0, w += (p ^ (I | ~g)) + E[14] - 1416354905 | 0, w = (w << 15 | w >>> 17) + I | 0, g += (I ^ (w | ~p)) + E[5] - 57434055 | 0, g = (g << 21 | g >>> 11) + w | 0, p += (w ^ (g | ~I)) + E[12] + 1700485571 | 0, p = (p << 6 | p >>> 26) + g | 0, I += (g ^ (p | ~w)) + E[3] - 1894986606 | 0, I = (I << 10 | I >>> 22) + p | 0, w += (p ^ (I | ~g)) + E[10] - 1051523 | 0, w = (w << 15 | w >>> 17) + I | 0, g += (I ^ (w | ~p)) + E[1] - 2054922799 | 0, g = (g << 21 | g >>> 11) + w | 0, p += (w ^ (g | ~I)) + E[8] + 1873313359 | 0, p = (p << 6 | p >>> 26) + g | 0, I += (g ^ (p | ~w)) + E[15] - 30611744 | 0, I = (I << 10 | I >>> 22) + p | 0, w += (p ^ (I | ~g)) + E[6] - 1560198380 | 0, w = (w << 15 | w >>> 17) + I | 0, g += (I ^ (w | ~p)) + E[13] + 1309151649 | 0, g = (g << 21 | g >>> 11) + w | 0, p += (w ^ (g | ~I)) + E[4] - 145523070 | 0, p = (p << 6 | p >>> 26) + g | 0, I += (g ^ (p | ~w)) + E[11] - 1120210379 | 0, I = (I << 10 | I >>> 22) + p | 0, w += (p ^ (I | ~g)) + E[2] + 718787259 | 0, w = (w << 15 | w >>> 17) + I | 0, g += (I ^ (w | ~p)) + E[9] - 343485551 | 0, g = (g << 21 | g >>> 11) + w | 0, v[0] = p + v[0] | 0, v[1] = g + v[1] | 0, v[2] = w + v[2] | 0, v[3] = I + v[3] | 0;
    }
    function s(v) {
      var E = [], p;
      for (p = 0; p < 64; p += 4)
        E[p >> 2] = v.charCodeAt(p) + (v.charCodeAt(p + 1) << 8) + (v.charCodeAt(p + 2) << 16) + (v.charCodeAt(p + 3) << 24);
      return E;
    }
    function o(v) {
      var E = [], p;
      for (p = 0; p < 64; p += 4)
        E[p >> 2] = v[p] + (v[p + 1] << 8) + (v[p + 2] << 16) + (v[p + 3] << 24);
      return E;
    }
    function a(v) {
      var E = v.length, p = [1732584193, -271733879, -1732584194, 271733878], g, w, I, R, T, A;
      for (g = 64; g <= E; g += 64)
        i(p, s(v.substring(g - 64, g)));
      for (v = v.substring(g - 64), w = v.length, I = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], g = 0; g < w; g += 1)
        I[g >> 2] |= v.charCodeAt(g) << (g % 4 << 3);
      if (I[g >> 2] |= 128 << (g % 4 << 3), g > 55)
        for (i(p, I), g = 0; g < 16; g += 1)
          I[g] = 0;
      return R = E * 8, R = R.toString(16).match(/(.*?)(.{0,8})$/), T = parseInt(R[2], 16), A = parseInt(R[1], 16) || 0, I[14] = T, I[15] = A, i(p, I), p;
    }
    function u(v) {
      var E = v.length, p = [1732584193, -271733879, -1732584194, 271733878], g, w, I, R, T, A;
      for (g = 64; g <= E; g += 64)
        i(p, o(v.subarray(g - 64, g)));
      for (v = g - 64 < E ? v.subarray(g - 64) : new Uint8Array(0), w = v.length, I = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], g = 0; g < w; g += 1)
        I[g >> 2] |= v[g] << (g % 4 << 3);
      if (I[g >> 2] |= 128 << (g % 4 << 3), g > 55)
        for (i(p, I), g = 0; g < 16; g += 1)
          I[g] = 0;
      return R = E * 8, R = R.toString(16).match(/(.*?)(.{0,8})$/), T = parseInt(R[2], 16), A = parseInt(R[1], 16) || 0, I[14] = T, I[15] = A, i(p, I), p;
    }
    function l(v) {
      var E = "", p;
      for (p = 0; p < 4; p += 1)
        E += r[v >> p * 8 + 4 & 15] + r[v >> p * 8 & 15];
      return E;
    }
    function h(v) {
      var E;
      for (E = 0; E < v.length; E += 1)
        v[E] = l(v[E]);
      return v.join("");
    }
    h(a("hello")), typeof ArrayBuffer < "u" && !ArrayBuffer.prototype.slice && function() {
      function v(E, p) {
        return E = E | 0 || 0, E < 0 ? Math.max(E + p, 0) : Math.min(E, p);
      }
      ArrayBuffer.prototype.slice = function(E, p) {
        var g = this.byteLength, w = v(E, g), I = g, R, T, A, O;
        return p !== n && (I = v(p, g)), w > I ? new ArrayBuffer(0) : (R = I - w, T = new ArrayBuffer(R), A = new Uint8Array(T), O = new Uint8Array(this, w, R), A.set(O), T);
      };
    }();
    function f(v) {
      return /[\u0080-\uFFFF]/.test(v) && (v = unescape(encodeURIComponent(v))), v;
    }
    function y(v, E) {
      var p = v.length, g = new ArrayBuffer(p), w = new Uint8Array(g), I;
      for (I = 0; I < p; I += 1)
        w[I] = v.charCodeAt(I);
      return E ? w : g;
    }
    function b(v) {
      return String.fromCharCode.apply(null, new Uint8Array(v));
    }
    function S(v, E, p) {
      var g = new Uint8Array(v.byteLength + E.byteLength);
      return g.set(new Uint8Array(v)), g.set(new Uint8Array(E), v.byteLength), g;
    }
    function C(v) {
      var E = [], p = v.length, g;
      for (g = 0; g < p - 1; g += 2)
        E.push(parseInt(v.substr(g, 2), 16));
      return String.fromCharCode.apply(String, E);
    }
    function m() {
      this.reset();
    }
    return m.prototype.append = function(v) {
      return this.appendBinary(f(v)), this;
    }, m.prototype.appendBinary = function(v) {
      this._buff += v, this._length += v.length;
      var E = this._buff.length, p;
      for (p = 64; p <= E; p += 64)
        i(this._hash, s(this._buff.substring(p - 64, p)));
      return this._buff = this._buff.substring(p - 64), this;
    }, m.prototype.end = function(v) {
      var E = this._buff, p = E.length, g, w = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], I;
      for (g = 0; g < p; g += 1)
        w[g >> 2] |= E.charCodeAt(g) << (g % 4 << 3);
      return this._finish(w, p), I = h(this._hash), v && (I = C(I)), this.reset(), I;
    }, m.prototype.reset = function() {
      return this._buff = "", this._length = 0, this._hash = [1732584193, -271733879, -1732584194, 271733878], this;
    }, m.prototype.getState = function() {
      return {
        buff: this._buff,
        length: this._length,
        hash: this._hash.slice()
      };
    }, m.prototype.setState = function(v) {
      return this._buff = v.buff, this._length = v.length, this._hash = v.hash, this;
    }, m.prototype.destroy = function() {
      delete this._hash, delete this._buff, delete this._length;
    }, m.prototype._finish = function(v, E) {
      var p = E, g, w, I;
      if (v[p >> 2] |= 128 << (p % 4 << 3), p > 55)
        for (i(this._hash, v), p = 0; p < 16; p += 1)
          v[p] = 0;
      g = this._length * 8, g = g.toString(16).match(/(.*?)(.{0,8})$/), w = parseInt(g[2], 16), I = parseInt(g[1], 16) || 0, v[14] = w, v[15] = I, i(this._hash, v);
    }, m.hash = function(v, E) {
      return m.hashBinary(f(v), E);
    }, m.hashBinary = function(v, E) {
      var p = a(v), g = h(p);
      return E ? C(g) : g;
    }, m.ArrayBuffer = function() {
      this.reset();
    }, m.ArrayBuffer.prototype.append = function(v) {
      var E = S(this._buff.buffer, v), p = E.length, g;
      for (this._length += v.byteLength, g = 64; g <= p; g += 64)
        i(this._hash, o(E.subarray(g - 64, g)));
      return this._buff = g - 64 < p ? new Uint8Array(E.buffer.slice(g - 64)) : new Uint8Array(0), this;
    }, m.ArrayBuffer.prototype.end = function(v) {
      var E = this._buff, p = E.length, g = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], w, I;
      for (w = 0; w < p; w += 1)
        g[w >> 2] |= E[w] << (w % 4 << 3);
      return this._finish(g, p), I = h(this._hash), v && (I = C(I)), this.reset(), I;
    }, m.ArrayBuffer.prototype.reset = function() {
      return this._buff = new Uint8Array(0), this._length = 0, this._hash = [1732584193, -271733879, -1732584194, 271733878], this;
    }, m.ArrayBuffer.prototype.getState = function() {
      var v = m.prototype.getState.call(this);
      return v.buff = b(v.buff), v;
    }, m.ArrayBuffer.prototype.setState = function(v) {
      return v.buff = y(v.buff, !0), m.prototype.setState.call(this, v);
    }, m.ArrayBuffer.prototype.destroy = m.prototype.destroy, m.ArrayBuffer.prototype._finish = m.prototype._finish, m.ArrayBuffer.hash = function(v, E) {
      var p = u(new Uint8Array(v)), g = h(p);
      return E ? C(g) : g;
    }, m;
  });
})(zm);
var bE = zm.exports;
const su = /* @__PURE__ */ _a(bE);
var lo, TE = new Uint8Array(16);
function IE() {
  if (!lo && (lo = typeof crypto < "u" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto < "u" && typeof msCrypto.getRandomValues == "function" && msCrypto.getRandomValues.bind(msCrypto), !lo))
    throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
  return lo(TE);
}
const SE = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
function AE(t) {
  return typeof t == "string" && SE.test(t);
}
var it = [];
for (var vc = 0; vc < 256; ++vc)
  it.push((vc + 256).toString(16).substr(1));
function RE(t) {
  var e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, n = (it[t[e + 0]] + it[t[e + 1]] + it[t[e + 2]] + it[t[e + 3]] + "-" + it[t[e + 4]] + it[t[e + 5]] + "-" + it[t[e + 6]] + it[t[e + 7]] + "-" + it[t[e + 8]] + it[t[e + 9]] + "-" + it[t[e + 10]] + it[t[e + 11]] + it[t[e + 12]] + it[t[e + 13]] + it[t[e + 14]] + it[t[e + 15]]).toLowerCase();
  if (!AE(n))
    throw TypeError("Stringified UUID is invalid");
  return n;
}
function al(t, e, n) {
  t = t || {};
  var r = t.random || (t.rng || IE)();
  if (r[6] = r[6] & 15 | 64, r[8] = r[8] & 63 | 128, e) {
    n = n || 0;
    for (var i = 0; i < 16; ++i)
      e[n + i] = r[i];
    return e;
  }
  return RE(r);
}
var wa = {};
wa.stringify = function(e) {
  var n = [];
  n.push({ obj: e });
  for (var r = "", i, s, o, a, u, l, h, f, y, b, S; i = n.pop(); )
    if (s = i.obj, o = i.prefix || "", a = i.val || "", r += o, a)
      r += a;
    else if (typeof s != "object")
      r += typeof s > "u" ? null : JSON.stringify(s);
    else if (s === null)
      r += "null";
    else if (Array.isArray(s)) {
      for (n.push({ val: "]" }), u = s.length - 1; u >= 0; u--)
        l = u === 0 ? "" : ",", n.push({ obj: s[u], prefix: l });
      n.push({ val: "[" });
    } else {
      h = [];
      for (f in s)
        s.hasOwnProperty(f) && h.push(f);
      for (n.push({ val: "}" }), u = h.length - 1; u >= 0; u--)
        y = h[u], b = s[y], S = u > 0 ? "," : "", S += JSON.stringify(y) + ":", n.push({ obj: b, prefix: S });
      n.push({ val: "{" });
    }
  return r;
};
function Gr(t, e, n) {
  var r = n[n.length - 1];
  t === r.element && (n.pop(), r = n[n.length - 1]);
  var i = r.element, s = r.index;
  if (Array.isArray(i))
    i.push(t);
  else if (s === e.length - 2) {
    var o = e.pop();
    i[o] = t;
  } else
    e.push(t);
}
wa.parse = function(t) {
  for (var e = [], n = [], r = 0, i, s, o, a, u, l, h, f, y; ; ) {
    if (i = t[r++], i === "}" || i === "]" || typeof i > "u") {
      if (e.length === 1)
        return e.pop();
      Gr(e.pop(), e, n);
      continue;
    }
    switch (i) {
      case " ":
      case "	":
      case `
`:
      case ":":
      case ",":
        break;
      case "n":
        r += 3, Gr(null, e, n);
        break;
      case "t":
        r += 3, Gr(!0, e, n);
        break;
      case "f":
        r += 4, Gr(!1, e, n);
        break;
      case "0":
      case "1":
      case "2":
      case "3":
      case "4":
      case "5":
      case "6":
      case "7":
      case "8":
      case "9":
      case "-":
        for (s = "", r--; ; )
          if (o = t[r++], /[\d\.\-e\+]/.test(o))
            s += o;
          else {
            r--;
            break;
          }
        Gr(parseFloat(s), e, n);
        break;
      case '"':
        for (a = "", u = void 0, l = 0; h = t[r++], h !== '"' || u === "\\" && l % 2 === 1; )
          a += h, u = h, u === "\\" ? l++ : l = 0;
        Gr(JSON.parse('"' + a + '"'), e, n);
        break;
      case "[":
        f = { element: [], index: e.length }, e.push(f.element), n.push(f);
        break;
      case "{":
        y = { element: {}, index: e.length }, e.push(y.element), n.push(y);
        break;
      default:
        throw new Error(
          "unexpectedly reached end of input: " + i
        );
    }
  }
};
var cl = { exports: {} }, ti = typeof Reflect == "object" ? Reflect : null, xh = ti && typeof ti.apply == "function" ? ti.apply : function(e, n, r) {
  return Function.prototype.apply.call(e, n, r);
}, Ro;
ti && typeof ti.ownKeys == "function" ? Ro = ti.ownKeys : Object.getOwnPropertySymbols ? Ro = function(e) {
  return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e));
} : Ro = function(e) {
  return Object.getOwnPropertyNames(e);
};
function CE(t) {
  console && console.warn && console.warn(t);
}
var Km = Number.isNaN || function(e) {
  return e !== e;
};
function ke() {
  ke.init.call(this);
}
cl.exports = ke;
cl.exports.once = DE;
ke.EventEmitter = ke;
ke.prototype._events = void 0;
ke.prototype._eventsCount = 0;
ke.prototype._maxListeners = void 0;
var Lh = 10;
function Ea(t) {
  if (typeof t != "function")
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof t);
}
Object.defineProperty(ke, "defaultMaxListeners", {
  enumerable: !0,
  get: function() {
    return Lh;
  },
  set: function(t) {
    if (typeof t != "number" || t < 0 || Km(t))
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + t + ".");
    Lh = t;
  }
});
ke.init = function() {
  (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) && (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
};
ke.prototype.setMaxListeners = function(e) {
  if (typeof e != "number" || e < 0 || Km(e))
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e + ".");
  return this._maxListeners = e, this;
};
function Hm(t) {
  return t._maxListeners === void 0 ? ke.defaultMaxListeners : t._maxListeners;
}
ke.prototype.getMaxListeners = function() {
  return Hm(this);
};
ke.prototype.emit = function(e) {
  for (var n = [], r = 1; r < arguments.length; r++) n.push(arguments[r]);
  var i = e === "error", s = this._events;
  if (s !== void 0)
    i = i && s.error === void 0;
  else if (!i)
    return !1;
  if (i) {
    var o;
    if (n.length > 0 && (o = n[0]), o instanceof Error)
      throw o;
    var a = new Error("Unhandled error." + (o ? " (" + o.message + ")" : ""));
    throw a.context = o, a;
  }
  var u = s[e];
  if (u === void 0)
    return !1;
  if (typeof u == "function")
    xh(u, this, n);
  else
    for (var l = u.length, h = Jm(u, l), r = 0; r < l; ++r)
      xh(h[r], this, n);
  return !0;
};
function Gm(t, e, n, r) {
  var i, s, o;
  if (Ea(n), s = t._events, s === void 0 ? (s = t._events = /* @__PURE__ */ Object.create(null), t._eventsCount = 0) : (s.newListener !== void 0 && (t.emit(
    "newListener",
    e,
    n.listener ? n.listener : n
  ), s = t._events), o = s[e]), o === void 0)
    o = s[e] = n, ++t._eventsCount;
  else if (typeof o == "function" ? o = s[e] = r ? [n, o] : [o, n] : r ? o.unshift(n) : o.push(n), i = Hm(t), i > 0 && o.length > i && !o.warned) {
    o.warned = !0;
    var a = new Error("Possible EventEmitter memory leak detected. " + o.length + " " + String(e) + " listeners added. Use emitter.setMaxListeners() to increase limit");
    a.name = "MaxListenersExceededWarning", a.emitter = t, a.type = e, a.count = o.length, CE(a);
  }
  return t;
}
ke.prototype.addListener = function(e, n) {
  return Gm(this, e, n, !1);
};
ke.prototype.on = ke.prototype.addListener;
ke.prototype.prependListener = function(e, n) {
  return Gm(this, e, n, !0);
};
function PE() {
  if (!this.fired)
    return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
}
function Wm(t, e, n) {
  var r = { fired: !1, wrapFn: void 0, target: t, type: e, listener: n }, i = PE.bind(r);
  return i.listener = n, r.wrapFn = i, i;
}
ke.prototype.once = function(e, n) {
  return Ea(n), this.on(e, Wm(this, e, n)), this;
};
ke.prototype.prependOnceListener = function(e, n) {
  return Ea(n), this.prependListener(e, Wm(this, e, n)), this;
};
ke.prototype.removeListener = function(e, n) {
  var r, i, s, o, a;
  if (Ea(n), i = this._events, i === void 0)
    return this;
  if (r = i[e], r === void 0)
    return this;
  if (r === n || r.listener === n)
    --this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : (delete i[e], i.removeListener && this.emit("removeListener", e, r.listener || n));
  else if (typeof r != "function") {
    for (s = -1, o = r.length - 1; o >= 0; o--)
      if (r[o] === n || r[o].listener === n) {
        a = r[o].listener, s = o;
        break;
      }
    if (s < 0)
      return this;
    s === 0 ? r.shift() : kE(r, s), r.length === 1 && (i[e] = r[0]), i.removeListener !== void 0 && this.emit("removeListener", e, a || n);
  }
  return this;
};
ke.prototype.off = ke.prototype.removeListener;
ke.prototype.removeAllListeners = function(e) {
  var n, r, i;
  if (r = this._events, r === void 0)
    return this;
  if (r.removeListener === void 0)
    return arguments.length === 0 ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : r[e] !== void 0 && (--this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : delete r[e]), this;
  if (arguments.length === 0) {
    var s = Object.keys(r), o;
    for (i = 0; i < s.length; ++i)
      o = s[i], o !== "removeListener" && this.removeAllListeners(o);
    return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
  }
  if (n = r[e], typeof n == "function")
    this.removeListener(e, n);
  else if (n !== void 0)
    for (i = n.length - 1; i >= 0; i--)
      this.removeListener(e, n[i]);
  return this;
};
function Qm(t, e, n) {
  var r = t._events;
  if (r === void 0)
    return [];
  var i = r[e];
  return i === void 0 ? [] : typeof i == "function" ? n ? [i.listener || i] : [i] : n ? OE(i) : Jm(i, i.length);
}
ke.prototype.listeners = function(e) {
  return Qm(this, e, !0);
};
ke.prototype.rawListeners = function(e) {
  return Qm(this, e, !1);
};
ke.listenerCount = function(t, e) {
  return typeof t.listenerCount == "function" ? t.listenerCount(e) : Ym.call(t, e);
};
ke.prototype.listenerCount = Ym;
function Ym(t) {
  var e = this._events;
  if (e !== void 0) {
    var n = e[t];
    if (typeof n == "function")
      return 1;
    if (n !== void 0)
      return n.length;
  }
  return 0;
}
ke.prototype.eventNames = function() {
  return this._eventsCount > 0 ? Ro(this._events) : [];
};
function Jm(t, e) {
  for (var n = new Array(e), r = 0; r < e; ++r)
    n[r] = t[r];
  return n;
}
function kE(t, e) {
  for (; e + 1 < t.length; e++)
    t[e] = t[e + 1];
  t.pop();
}
function OE(t) {
  for (var e = new Array(t.length), n = 0; n < e.length; ++n)
    e[n] = t[n].listener || t[n];
  return e;
}
function DE(t, e) {
  return new Promise(function(n, r) {
    function i(o) {
      t.removeListener(e, s), r(o);
    }
    function s() {
      typeof t.removeListener == "function" && t.removeListener("error", i), n([].slice.call(arguments));
    }
    Xm(t, e, s, { once: !0 }), e !== "error" && NE(t, i, { once: !0 });
  });
}
function NE(t, e, n) {
  typeof t.on == "function" && Xm(t, "error", e, n);
}
function Xm(t, e, n, r) {
  if (typeof t.on == "function")
    r.once ? t.once(e, n) : t.on(e, n);
  else if (typeof t.addEventListener == "function")
    t.addEventListener(e, function i(s) {
      r.once && t.removeEventListener(e, i), n(s);
    });
  else
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof t);
}
var xE = cl.exports;
const Cn = /* @__PURE__ */ _a(xE);
function LE(t) {
  return typeof ArrayBuffer < "u" && t instanceof ArrayBuffer || typeof Blob < "u" && t instanceof Blob;
}
function ME(t) {
  return t instanceof ArrayBuffer ? t.slice(0) : t.slice(0, t.size, t.type);
}
var Zm = Function.prototype.toString, VE = Zm.call(Object);
function FE(t) {
  var e = Object.getPrototypeOf(t);
  if (e === null)
    return !0;
  var n = e.constructor;
  return typeof n == "function" && n instanceof n && Zm.call(n) == VE;
}
function Xe(t) {
  var e, n, r;
  if (!t || typeof t != "object")
    return t;
  if (Array.isArray(t)) {
    for (e = [], n = 0, r = t.length; n < r; n++)
      e[n] = Xe(t[n]);
    return e;
  }
  if (t instanceof Date && isFinite(t))
    return t.toISOString();
  if (LE(t))
    return ME(t);
  if (!FE(t))
    return t;
  e = {};
  for (n in t)
    if (Object.prototype.hasOwnProperty.call(t, n)) {
      var i = Xe(t[n]);
      typeof i < "u" && (e[n] = i);
    }
  return e;
}
function eg(t) {
  var e = !1;
  return function(...n) {
    if (e)
      throw new Error("once called more than once");
    e = !0, t.apply(this, n);
  };
}
function tg(t) {
  return function(...e) {
    e = Xe(e);
    var n = this, r = typeof e[e.length - 1] == "function" ? e.pop() : !1, i = new Promise(function(s, o) {
      var a;
      try {
        var u = eg(function(l, h) {
          l ? o(l) : s(h);
        });
        e.push(u), a = t.apply(n, e), a && typeof a.then == "function" && s(a);
      } catch (l) {
        o(l);
      }
    });
    return r && i.then(function(s) {
      r(null, s);
    }, r), i;
  };
}
function UE(t, e, n) {
  if (t.constructor.listeners("debug").length) {
    for (var r = ["api", t.name, e], i = 0; i < n.length - 1; i++)
      r.push(n[i]);
    t.constructor.emit("debug", r);
    var s = n[n.length - 1];
    n[n.length - 1] = function(o, a) {
      var u = ["api", t.name, e];
      u = u.concat(
        o ? ["error", o] : ["success", a]
      ), t.constructor.emit("debug", u), s(o, a);
    };
  }
}
function ze(t, e) {
  return tg(function(...n) {
    if (this._closed)
      return Promise.reject(new Error("database is closed"));
    if (this._destroyed)
      return Promise.reject(new Error("database is destroyed"));
    var r = this;
    return UE(r, t, n), this.taskqueue.isReady ? e.apply(this, n) : new Promise(function(i, s) {
      r.taskqueue.addTask(function(o) {
        o ? s(o) : i(r[t].apply(r, n));
      });
    });
  });
}
function Os(t, e) {
  for (var n = {}, r = 0, i = e.length; r < i; r++) {
    var s = e[r];
    s in t && (n[s] = t[s]);
  }
  return n;
}
var jE = 6;
function Mh(t) {
  return t;
}
function $E(t) {
  return [{
    ok: t
  }];
}
function ng(t, e, n) {
  var r = e.docs, i = /* @__PURE__ */ new Map();
  r.forEach(function(C) {
    i.has(C.id) ? i.get(C.id).push(C) : i.set(C.id, [C]);
  });
  var s = i.size, o = 0, a = new Array(s);
  function u() {
    var C = [];
    a.forEach(function(m) {
      m.docs.forEach(function(v) {
        C.push({
          id: m.id,
          docs: [v]
        });
      });
    }), n(null, { results: C });
  }
  function l() {
    ++o === s && u();
  }
  function h(C, m, v) {
    a[C] = { id: m, docs: v }, l();
  }
  var f = [];
  i.forEach(function(C, m) {
    f.push(m);
  });
  var y = 0;
  function b() {
    if (!(y >= f.length)) {
      var C = Math.min(y + jE, f.length), m = f.slice(y, C);
      S(m, y), y += m.length;
    }
  }
  function S(C, m) {
    C.forEach(function(v, E) {
      var p = m + E, g = i.get(v), w = Os(g[0], ["atts_since", "attachments"]);
      w.open_revs = g.map(function(R) {
        return R.rev;
      }), w.open_revs = w.open_revs.filter(Mh);
      var I = Mh;
      w.open_revs.length === 0 && (delete w.open_revs, I = $E), ["revs", "attachments", "binary", "ajax", "latest"].forEach(function(R) {
        R in e && (w[R] = e[R]);
      }), t.get(v, w, function(R, T) {
        var A;
        R ? A = [{ error: R }] : A = I(T), h(p, v, A), b();
      });
    });
  }
  b();
}
var ou;
try {
  localStorage.setItem("_pouch_check_localstorage", 1), ou = !!localStorage.getItem("_pouch_check_localstorage");
} catch {
  ou = !1;
}
function $o() {
  return ou;
}
const hn = typeof queueMicrotask == "function" ? queueMicrotask : function(e) {
  Promise.resolve().then(e);
};
class BE extends Cn {
  constructor() {
    super(), this._listeners = {}, $o() && addEventListener("storage", (e) => {
      this.emit(e.key);
    });
  }
  addListener(e, n, r, i) {
    if (this._listeners[n])
      return;
    var s = !1, o = this;
    function a() {
      if (!o._listeners[n])
        return;
      if (s) {
        s = "waiting";
        return;
      }
      s = !0;
      var u = Os(i, [
        "style",
        "include_docs",
        "attachments",
        "conflicts",
        "filter",
        "doc_ids",
        "view",
        "since",
        "query_params",
        "binary",
        "return_docs"
      ]);
      function l() {
        s = !1;
      }
      r.changes(u).on("change", function(h) {
        h.seq > i.since && !i.cancelled && (i.since = h.seq, i.onChange(h));
      }).on("complete", function() {
        s === "waiting" && hn(a), s = !1;
      }).on("error", l);
    }
    this._listeners[n] = a, this.on(e, a);
  }
  removeListener(e, n) {
    n in this._listeners && (super.removeListener(e, this._listeners[n]), delete this._listeners[n]);
  }
  notifyLocalWindows(e) {
    $o() && (localStorage[e] = localStorage[e] === "a" ? "b" : "a");
  }
  notify(e) {
    this.emit(e), this.notifyLocalWindows(e);
  }
}
function qt(t) {
  if (typeof console < "u" && typeof console[t] == "function") {
    var e = Array.prototype.slice.call(arguments, 1);
    console[t].apply(console, e);
  }
}
function qE(t, e) {
  var n = 6e5;
  t = parseInt(t, 10) || 0, e = parseInt(e, 10), e !== e || e <= t ? e = (t || 1) << 1 : e = e + 1, e > n && (t = n >> 1, e = n);
  var r = Math.random(), i = e - t;
  return ~~(i * r + t);
}
function zE(t) {
  var e = 0;
  return t || (e = 2e3), qE(t, e);
}
function au(t, e) {
  qt("info", "The above " + t + " is totally normal. " + e);
}
class xe extends Error {
  constructor(e, n, r) {
    super(), this.status = e, this.name = n, this.message = r, this.error = !0;
  }
  toString() {
    return JSON.stringify({
      status: this.status,
      name: this.name,
      message: this.message,
      reason: this.reason
    });
  }
}
new xe(401, "unauthorized", "Name or password is incorrect.");
var KE = new xe(400, "bad_request", "Missing JSON list of 'docs'"), Ft = new xe(404, "not_found", "missing"), ci = new xe(409, "conflict", "Document update conflict"), rg = new xe(400, "bad_request", "_id field must contain a string"), HE = new xe(412, "missing_id", "_id is required for puts"), GE = new xe(400, "bad_request", "Only reserved document ids may start with underscore.");
new xe(412, "precondition_failed", "Database not open");
var ul = new xe(500, "unknown_error", "Database encountered an unknown error"), ig = new xe(500, "badarg", "Some query argument is invalid");
new xe(400, "invalid_request", "Request was invalid");
var WE = new xe(400, "query_parse_error", "Some query parameter is invalid"), Vh = new xe(500, "doc_validation", "Bad special document member"), ba = new xe(400, "bad_request", "Something wrong with the request"), _c = new xe(400, "bad_request", "Document must be a JSON object");
new xe(404, "not_found", "Database not found");
var ll = new xe(500, "indexed_db_went_bad", "unknown");
new xe(500, "web_sql_went_bad", "unknown");
new xe(500, "levelDB_went_went_bad", "unknown");
new xe(403, "forbidden", "Forbidden by design doc validate_doc_update function");
var Co = new xe(400, "bad_request", "Invalid rev format");
new xe(412, "file_exists", "The database could not be created, the file already exists.");
var QE = new xe(412, "missing_stub", "A pre-existing attachment stub wasn't found");
new xe(413, "invalid_url", "Provided URL is invalid");
function le(t, e) {
  function n(r) {
    for (var i = Object.getOwnPropertyNames(t), s = 0, o = i.length; s < o; s++)
      typeof t[i[s]] != "function" && (this[i[s]] = t[i[s]]);
    this.stack === void 0 && (this.stack = new Error().stack), r !== void 0 && (this.reason = r);
  }
  return n.prototype = xe.prototype, new n(e);
}
function ui(t) {
  if (typeof t != "object") {
    var e = t;
    t = ul, t.data = e;
  }
  return "error" in t && t.error === "conflict" && (t.name = "conflict", t.status = 409), "name" in t || (t.name = t.error || "unknown"), "status" in t || (t.status = 500), "message" in t || (t.message = t.message || t.reason), "stack" in t || (t.stack = new Error().stack), t;
}
function YE(t, e, n) {
  try {
    return !t(e, n);
  } catch (i) {
    var r = "Filter function threw: " + i.toString();
    return le(ba, r);
  }
}
function fl(t) {
  var e = {}, n = t.filter && typeof t.filter == "function";
  return e.query = t.query_params, function(i) {
    i.doc || (i.doc = {});
    var s = n && YE(t.filter, i.doc, e);
    if (typeof s == "object")
      return s;
    if (s)
      return !1;
    if (!t.include_docs)
      delete i.doc;
    else if (!t.attachments)
      for (var o in i.doc._attachments)
        Object.prototype.hasOwnProperty.call(i.doc._attachments, o) && (i.doc._attachments[o].stub = !0);
    return !0;
  };
}
function sg(t) {
  var e;
  if (t ? typeof t != "string" ? e = le(rg) : /^_/.test(t) && !/^_(design|local)/.test(t) && (e = le(GE)) : e = le(HE), e)
    throw e;
}
function on(t) {
  return typeof t._remote == "boolean" ? t._remote : typeof t.type == "function" ? (qt(
    "warn",
    "db.type() is deprecated and will be removed in a future version of PouchDB"
  ), t.type() === "http") : !1;
}
function JE(t, e) {
  return "listenerCount" in t ? t.listenerCount(e) : Cn.listenerCount(t, e);
}
function cu(t) {
  if (!t)
    return null;
  var e = t.split("/");
  return e.length === 2 ? e : e.length === 1 ? [t, t] : null;
}
function Fh(t) {
  var e = cu(t);
  return e ? e.join("/") : null;
}
var Uh = [
  "source",
  "protocol",
  "authority",
  "userInfo",
  "user",
  "password",
  "host",
  "port",
  "relative",
  "path",
  "directory",
  "file",
  "query",
  "anchor"
], jh = "queryKey", XE = /(?:^|&)([^&=]*)=?([^&]*)/g, ZE = /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
function og(t) {
  for (var e = ZE.exec(t), n = {}, r = 14; r--; ) {
    var i = Uh[r], s = e[r] || "", o = ["user", "password"].indexOf(i) !== -1;
    n[i] = o ? decodeURIComponent(s) : s;
  }
  return n[jh] = {}, n[Uh[12]].replace(XE, function(a, u, l) {
    u && (n[jh][u] = l);
  }), n;
}
function hl(t, e) {
  var n = [], r = [];
  for (var i in e)
    Object.prototype.hasOwnProperty.call(e, i) && (n.push(i), r.push(e[i]));
  return n.push(t), Function.apply(null, n).apply(null, r);
}
function Bo(t, e, n) {
  return t.get(e).catch(function(r) {
    if (r.status !== 404)
      throw r;
    return {};
  }).then(function(r) {
    var i = r._rev, s = n(r);
    return s ? (s._id = e, s._rev = i, eb(t, s, n)) : { updated: !1, rev: i };
  });
}
function eb(t, e, n) {
  return t.put(e).then(function(r) {
    return {
      updated: !0,
      rev: r.rev
    };
  }, function(r) {
    if (r.status !== 409)
      throw r;
    return Bo(t, e._id, n);
  });
}
var dl = function(t) {
  return atob(t);
}, Ds = function(t) {
  return btoa(t);
};
function pl(t, e) {
  t = t || [], e = e || {};
  try {
    return new Blob(t, e);
  } catch (s) {
    if (s.name !== "TypeError")
      throw s;
    for (var n = typeof BlobBuilder < "u" ? BlobBuilder : typeof MSBlobBuilder < "u" ? MSBlobBuilder : typeof MozBlobBuilder < "u" ? MozBlobBuilder : WebKitBlobBuilder, r = new n(), i = 0; i < t.length; i += 1)
      r.append(t[i]);
    return r.getBlob(e.type);
  }
}
function tb(t) {
  for (var e = t.length, n = new ArrayBuffer(e), r = new Uint8Array(n), i = 0; i < e; i++)
    r[i] = t.charCodeAt(i);
  return n;
}
function ml(t, e) {
  return pl([tb(t)], { type: e });
}
function gl(t, e) {
  return ml(dl(t), e);
}
function nb(t) {
  for (var e = "", n = new Uint8Array(t), r = n.byteLength, i = 0; i < r; i++)
    e += String.fromCharCode(n[i]);
  return e;
}
function ag(t, e) {
  var n = new FileReader(), r = typeof n.readAsBinaryString == "function";
  n.onloadend = function(i) {
    var s = i.target.result || "";
    if (r)
      return e(s);
    e(nb(s));
  }, r ? n.readAsBinaryString(t) : n.readAsArrayBuffer(t);
}
function cg(t, e) {
  ag(t, function(n) {
    e(n);
  });
}
function yl(t, e) {
  cg(t, function(n) {
    e(Ds(n));
  });
}
function rb(t, e) {
  var n = new FileReader();
  n.onloadend = function(r) {
    var i = r.target.result || new ArrayBuffer(0);
    e(i);
  }, n.readAsArrayBuffer(t);
}
var ib = self.setImmediate || self.setTimeout, sb = 32768;
function ob(t) {
  return Ds(t);
}
function ab(t, e, n, r, i) {
  (n > 0 || r < e.size) && (e = e.slice(n, r)), rb(e, function(s) {
    t.append(s), i();
  });
}
function cb(t, e, n, r, i) {
  (n > 0 || r < e.length) && (e = e.substring(n, r)), t.appendBinary(e), i();
}
function vl(t, e) {
  var n = typeof t == "string", r = n ? t.length : t.size, i = Math.min(sb, r), s = Math.ceil(r / i), o = 0, a = n ? new su() : new su.ArrayBuffer(), u = n ? cb : ab;
  function l() {
    ib(f);
  }
  function h() {
    var y = a.end(!0), b = ob(y);
    e(b), a.destroy();
  }
  function f() {
    var y = o * i, b = y + i;
    o++, o < s ? u(a, t, y, b, l) : u(a, t, y, b, h);
  }
  f();
}
function ug(t) {
  return su.hash(t);
}
function lg(t, e) {
  if (!e)
    return al().replace(/-/g, "").toLowerCase();
  var n = Object.assign({}, t);
  return delete n._rev_tree, ug(JSON.stringify(n));
}
var Ta = al;
function Tr(t) {
  for (var e, n, r, i = t.rev_tree.slice(), s; s = i.pop(); ) {
    var o = s.ids, a = o[2], u = s.pos;
    if (a.length) {
      for (var l = 0, h = a.length; l < h; l++)
        i.push({ pos: u + 1, ids: a[l] });
      continue;
    }
    var f = !!o[1].deleted, y = o[0];
    (!e || (r !== f ? r : n !== u ? n < u : e < y)) && (e = y, n = u, r = f);
  }
  return n + "-" + e;
}
function Ir(t, e) {
  for (var n = t.slice(), r; r = n.pop(); )
    for (var i = r.pos, s = r.ids, o = s[2], a = e(o.length === 0, i, s[0], r.ctx, s[1]), u = 0, l = o.length; u < l; u++)
      n.push({ pos: i + 1, ids: o[u], ctx: a });
}
function ub(t, e) {
  return t.pos - e.pos;
}
function _l(t) {
  var e = [];
  Ir(t, function(i, s, o, a, u) {
    i && e.push({ rev: s + "-" + o, pos: s, opts: u });
  }), e.sort(ub).reverse();
  for (var n = 0, r = e.length; n < r; n++)
    delete e[n].pos;
  return e;
}
function wl(t) {
  for (var e = Tr(t), n = _l(t.rev_tree), r = [], i = 0, s = n.length; i < s; i++) {
    var o = n[i];
    o.rev !== e && !o.opts.deleted && r.push(o.rev);
  }
  return r;
}
function lb(t) {
  var e = [];
  return Ir(t.rev_tree, function(n, r, i, s, o) {
    o.status === "available" && !n && (e.push(r + "-" + i), o.status = "missing");
  }), e;
}
function fb(t, e) {
  let n = [];
  const r = t.slice();
  let i;
  for (; i = r.pop(); ) {
    const { pos: s, ids: o } = i, a = `${s}-${o[0]}`, u = o[2];
    if (n.push(a), a === e) {
      if (u.length !== 0)
        throw new Error("The requested revision is not a leaf");
      return n.reverse();
    }
    (u.length === 0 || u.length > 1) && (n = []);
    for (let l = 0, h = u.length; l < h; l++)
      r.push({ pos: s + 1, ids: u[l] });
  }
  if (n.length === 0)
    throw new Error("The requested revision does not exist");
  return n.reverse();
}
function fg(t) {
  for (var e = [], n = t.slice(), r; r = n.pop(); ) {
    var i = r.pos, s = r.ids, o = s[0], a = s[1], u = s[2], l = u.length === 0, h = r.history ? r.history.slice() : [];
    h.push({ id: o, opts: a }), l && e.push({ pos: i + 1 - h.length, ids: h });
    for (var f = 0, y = u.length; f < y; f++)
      n.push({ pos: i + 1, ids: u[f], history: h });
  }
  return e.reverse();
}
function hb(t, e) {
  return t.pos - e.pos;
}
function db(t, e, n) {
  for (var r = 0, i = t.length, s; r < i; )
    s = r + i >>> 1, n(t[s], e) < 0 ? r = s + 1 : i = s;
  return r;
}
function pb(t, e, n) {
  var r = db(t, e, n);
  t.splice(r, 0, e);
}
function $h(t, e) {
  for (var n, r, i = e, s = t.length; i < s; i++) {
    var o = t[i], a = [o.id, o.opts, []];
    r ? (r[2].push(a), r = a) : n = r = a;
  }
  return n;
}
function mb(t, e) {
  return t[0] < e[0] ? -1 : 1;
}
function Bh(t, e) {
  for (var n = [{ tree1: t, tree2: e }], r = !1; n.length > 0; ) {
    var i = n.pop(), s = i.tree1, o = i.tree2;
    (s[1].status || o[1].status) && (s[1].status = s[1].status === "available" || o[1].status === "available" ? "available" : "missing");
    for (var a = 0; a < o[2].length; a++) {
      if (!s[2][0]) {
        r = "new_leaf", s[2][0] = o[2][a];
        continue;
      }
      for (var u = !1, l = 0; l < s[2].length; l++)
        s[2][l][0] === o[2][a][0] && (n.push({ tree1: s[2][l], tree2: o[2][a] }), u = !0);
      u || (r = "new_branch", pb(s[2], o[2][a], mb));
    }
  }
  return { conflicts: r, tree: t };
}
function hg(t, e, n) {
  var r = [], i = !1, s = !1, o;
  if (!t.length)
    return { tree: [e], conflicts: "new_leaf" };
  for (var a = 0, u = t.length; a < u; a++) {
    var l = t[a];
    if (l.pos === e.pos && l.ids[0] === e.ids[0])
      o = Bh(l.ids, e.ids), r.push({ pos: l.pos, ids: o.tree }), i = i || o.conflicts, s = !0;
    else if (n !== !0) {
      var h = l.pos < e.pos ? l : e, f = l.pos < e.pos ? e : l, y = f.pos - h.pos, b = [], S = [];
      for (S.push({ ids: h.ids, diff: y, parent: null, parentIdx: null }); S.length > 0; ) {
        var C = S.pop();
        if (C.diff === 0) {
          C.ids[0] === f.ids[0] && b.push(C);
          continue;
        }
        for (var m = C.ids[2], v = 0, E = m.length; v < E; v++)
          S.push({
            ids: m[v],
            diff: C.diff - 1,
            parent: C.ids,
            parentIdx: v
          });
      }
      var p = b[0];
      p ? (o = Bh(p.ids, f.ids), p.parent[2][p.parentIdx] = o.tree, r.push({ pos: h.pos, ids: h.ids }), i = i || o.conflicts, s = !0) : r.push(l);
    } else
      r.push(l);
  }
  return s || r.push(e), r.sort(hb), {
    tree: r,
    conflicts: i || "internal_node"
  };
}
function gb(t, e) {
  for (var n = fg(t), r, i, s = 0, o = n.length; s < o; s++) {
    var a = n[s], u = a.ids, l;
    if (u.length > e) {
      r || (r = {});
      var h = u.length - e;
      l = {
        pos: a.pos + h,
        ids: $h(u, h)
      };
      for (var f = 0; f < h; f++) {
        var y = a.pos + f + "-" + u[f].id;
        r[y] = !0;
      }
    } else
      l = {
        pos: a.pos,
        ids: $h(u, 0)
      };
    i ? i = hg(i, l, !0).tree : i = [l];
  }
  return r && Ir(i, function(b, S, C) {
    delete r[S + "-" + C];
  }), {
    tree: i,
    revs: r ? Object.keys(r) : []
  };
}
function dg(t, e, n) {
  var r = hg(t, e), i = gb(r.tree, n);
  return {
    tree: i.tree,
    stemmedRevs: i.revs,
    conflicts: r.conflicts
  };
}
function yb(t, e) {
  for (var n = t.slice(), r = e.split("-"), i = parseInt(r[0], 10), s = r[1], o; o = n.pop(); ) {
    if (o.pos === i && o.ids[0] === s)
      return !0;
    for (var a = o.ids[2], u = 0, l = a.length; u < l; u++)
      n.push({ pos: o.pos + 1, ids: a[u] });
  }
  return !1;
}
function vb(t) {
  return t.ids;
}
function bn(t, e) {
  e || (e = Tr(t));
  for (var n = e.substring(e.indexOf("-") + 1), r = t.rev_tree.map(vb), i; i = r.pop(); ) {
    if (i[0] === n)
      return !!i[1].deleted;
    r = r.concat(i[2]);
  }
}
function vr(t) {
  return typeof t == "string" && t.startsWith("_local/");
}
function _b(t, e) {
  for (var n = e.rev_tree.slice(), r; r = n.pop(); ) {
    var i = r.pos, s = r.ids, o = s[0], a = s[1], u = s[2], l = u.length === 0, h = r.history ? r.history.slice() : [];
    if (h.push({ id: o, pos: i, opts: a }), l)
      for (var f = 0, y = h.length; f < y; f++) {
        var b = h[f], S = b.pos + "-" + b.id;
        if (S === t)
          return i + "-" + o;
      }
    for (var C = 0, m = u.length; C < m; C++)
      n.push({ pos: i + 1, ids: u[C], history: h });
  }
  throw new Error("Unable to resolve latest revision for id " + e.id + ", rev " + t);
}
function wb(t, e, n, r) {
  try {
    t.emit("change", e, n, r);
  } catch (i) {
    qt("error", 'Error in .on("change", function):', i);
  }
}
function Eb(t, e, n) {
  var r = [{ rev: t._rev }];
  n.style === "all_docs" && (r = _l(e.rev_tree).map(function(s) {
    return { rev: s.rev };
  }));
  var i = {
    id: e.id,
    changes: r,
    doc: t
  };
  return bn(e, t._rev) && (i.deleted = !0), n.conflicts && (i.doc._conflicts = wl(e), i.doc._conflicts.length || delete i.doc._conflicts), i;
}
class bb extends Cn {
  constructor(e, n, r) {
    super(), this.db = e, n = n ? Xe(n) : {};
    var i = n.complete = eg((a, u) => {
      a ? JE(this, "error") > 0 && this.emit("error", a) : this.emit("complete", u), this.removeAllListeners(), e.removeListener("destroyed", s);
    });
    r && (this.on("complete", function(a) {
      r(null, a);
    }), this.on("error", r));
    const s = () => {
      this.cancel();
    };
    e.once("destroyed", s), n.onChange = (a, u, l) => {
      this.isCancelled || wb(this, a, u, l);
    };
    var o = new Promise(function(a, u) {
      n.complete = function(l, h) {
        l ? u(l) : a(h);
      };
    });
    this.once("cancel", function() {
      e.removeListener("destroyed", s), n.complete(null, { status: "cancelled" });
    }), this.then = o.then.bind(o), this.catch = o.catch.bind(o), this.then(function(a) {
      i(null, a);
    }, i), e.taskqueue.isReady ? this.validateChanges(n) : e.taskqueue.addTask((a) => {
      a ? n.complete(a) : this.isCancelled ? this.emit("cancel") : this.validateChanges(n);
    });
  }
  cancel() {
    this.isCancelled = !0, this.db.taskqueue.isReady && this.emit("cancel");
  }
  validateChanges(e) {
    var n = e.complete;
    pe._changesFilterPlugin ? pe._changesFilterPlugin.validate(e, (r) => {
      if (r)
        return n(r);
      this.doChanges(e);
    }) : this.doChanges(e);
  }
  doChanges(e) {
    var n = e.complete;
    if (e = Xe(e), "live" in e && !("continuous" in e) && (e.continuous = e.live), e.processChange = Eb, e.since === "latest" && (e.since = "now"), e.since || (e.since = 0), e.since === "now") {
      this.db.info().then((i) => {
        if (this.isCancelled) {
          n(null, { status: "cancelled" });
          return;
        }
        e.since = i.update_seq, this.doChanges(e);
      }, n);
      return;
    }
    if (pe._changesFilterPlugin) {
      if (pe._changesFilterPlugin.normalize(e), pe._changesFilterPlugin.shouldFilter(this, e))
        return pe._changesFilterPlugin.filter(this, e);
    } else
      ["doc_ids", "filter", "selector", "view"].forEach(function(i) {
        i in e && qt(
          "warn",
          'The "' + i + '" option was passed in to changes/replicate, but pouchdb-changes-filter plugin is not installed, so it was ignored. Please install the plugin to enable filtering.'
        );
      });
    "descending" in e || (e.descending = !1), e.limit = e.limit === 0 ? 1 : e.limit, e.complete = n;
    var r = this.db._changes(e);
    if (r && typeof r.cancel == "function") {
      const i = this.cancel;
      this.cancel = (...s) => {
        r.cancel(), i.apply(this, s);
      };
    }
  }
}
function wc(t, e) {
  return function(n, r) {
    n || r[0] && r[0].error ? (n = n || r[0], n.docId = e, t(n)) : t(null, r.length ? r[0] : r);
  };
}
function Tb(t) {
  for (var e = 0; e < t.length; e++) {
    var n = t[e];
    if (n._deleted)
      delete n._attachments;
    else if (n._attachments)
      for (var r = Object.keys(n._attachments), i = 0; i < r.length; i++) {
        var s = r[i];
        n._attachments[s] = Os(
          n._attachments[s],
          ["data", "digest", "content_type", "length", "revpos", "stub"]
        );
      }
  }
}
function Ib(t, e) {
  if (t._id === e._id) {
    const n = t._revisions ? t._revisions.start : 0, r = e._revisions ? e._revisions.start : 0;
    return n - r;
  }
  return t._id < e._id ? -1 : 1;
}
function Sb(t) {
  var e = {}, n = [];
  return Ir(t, function(r, i, s, o) {
    var a = i + "-" + s;
    return r && (e[a] = 0), o !== void 0 && n.push({ from: o, to: a }), a;
  }), n.reverse(), n.forEach(function(r) {
    e[r.from] === void 0 ? e[r.from] = 1 + e[r.to] : e[r.from] = Math.min(e[r.from], 1 + e[r.to]);
  }), e;
}
function Ab(t) {
  var e = "limit" in t ? t.keys.slice(t.skip, t.limit + t.skip) : t.skip > 0 ? t.keys.slice(t.skip) : t.keys;
  t.keys = e, t.skip = 0, delete t.limit, t.descending && (e.reverse(), t.descending = !1);
}
function pg(t) {
  var e = t._compactionQueue[0], n = e.opts, r = e.callback;
  t.get("_local/compaction").catch(function() {
    return !1;
  }).then(function(i) {
    i && i.last_seq && (n.last_seq = i.last_seq), t._compact(n, function(s, o) {
      s ? r(s) : r(null, o), hn(function() {
        t._compactionQueue.shift(), t._compactionQueue.length && pg(t);
      });
    });
  });
}
function Rb(t, e, n) {
  return t.get("_local/purges").then(function(r) {
    const i = r.purgeSeq + 1;
    return r.purges.push({
      docId: e,
      rev: n,
      purgeSeq: i
    }), r.purges.length > self.purged_infos_limit && r.purges.splice(0, r.purges.length - self.purged_infos_limit), r.purgeSeq = i, r;
  }).catch(function(r) {
    if (r.status !== 404)
      throw r;
    return {
      _id: "_local/purges",
      purges: [{
        docId: e,
        rev: n,
        purgeSeq: 0
      }],
      purgeSeq: 0
    };
  }).then(function(r) {
    return t.put(r);
  });
}
function Cb(t) {
  return t.charAt(0) === "_" ? t + " is not a valid attachment name, attachment names cannot start with '_'" : !1;
}
function Ec(t) {
  return t === null || typeof t != "object" || Array.isArray(t);
}
const Pb = /^\d+-[^-]*$/;
function bc(t) {
  return typeof t == "string" && Pb.test(t);
}
class mg extends Cn {
  _setup() {
    this.post = ze("post", function(e, n, r) {
      if (typeof n == "function" && (r = n, n = {}), Ec(e))
        return r(le(_c));
      this.bulkDocs({ docs: [e] }, n, wc(r, e._id));
    }).bind(this), this.put = ze("put", function(e, n, r) {
      if (typeof n == "function" && (r = n, n = {}), Ec(e))
        return r(le(_c));
      if (sg(e._id), "_rev" in e && !bc(e._rev))
        return r(le(Co));
      if (vr(e._id) && typeof this._putLocal == "function")
        return e._deleted ? this._removeLocal(e, r) : this._putLocal(e, r);
      const i = (o) => {
        typeof this._put == "function" && n.new_edits !== !1 ? this._put(e, n, o) : this.bulkDocs({ docs: [e] }, n, wc(o, e._id));
      };
      n.force && e._rev ? (s(), i(function(o) {
        var a = o ? null : { ok: !0, id: e._id, rev: e._rev };
        r(o, a);
      })) : i(r);
      function s() {
        var o = e._rev.split("-"), a = o[1], u = parseInt(o[0], 10), l = u + 1, h = lg();
        e._revisions = {
          start: l,
          ids: [h, a]
        }, e._rev = l + "-" + h, n.new_edits = !1;
      }
    }).bind(this), this.putAttachment = ze("putAttachment", function(e, n, r, i, s) {
      var o = this;
      typeof s == "function" && (s = i, i = r, r = null), typeof s > "u" && (s = i, i = r, r = null), s || qt("warn", "Attachment", n, "on document", e, "is missing content_type");
      function a(u) {
        var l = "_rev" in u ? parseInt(u._rev, 10) : 0;
        return u._attachments = u._attachments || {}, u._attachments[n] = {
          content_type: s,
          data: i,
          revpos: ++l
        }, o.put(u);
      }
      return o.get(e).then(function(u) {
        if (u._rev !== r)
          throw le(ci);
        return a(u);
      }, function(u) {
        if (u.reason === Ft.message)
          return a({ _id: e });
        throw u;
      });
    }).bind(this), this.removeAttachment = ze("removeAttachment", function(e, n, r, i) {
      this.get(e, (s, o) => {
        if (s) {
          i(s);
          return;
        }
        if (o._rev !== r) {
          i(le(ci));
          return;
        }
        if (!o._attachments)
          return i();
        delete o._attachments[n], Object.keys(o._attachments).length === 0 && delete o._attachments, this.put(o, i);
      });
    }).bind(this), this.remove = ze("remove", function(e, n, r, i) {
      var s;
      typeof n == "string" ? (s = {
        _id: e,
        _rev: n
      }, typeof r == "function" && (i = r, r = {})) : (s = e, typeof n == "function" ? (i = n, r = {}) : (i = r, r = n)), r = r || {}, r.was_delete = !0;
      var o = { _id: s._id, _rev: s._rev || r.rev };
      if (o._deleted = !0, vr(o._id) && typeof this._removeLocal == "function")
        return this._removeLocal(s, i);
      this.bulkDocs({ docs: [o] }, r, wc(i, o._id));
    }).bind(this), this.revsDiff = ze("revsDiff", function(e, n, r) {
      typeof n == "function" && (r = n, n = {});
      var i = Object.keys(e);
      if (!i.length)
        return r(null, {});
      var s = 0, o = /* @__PURE__ */ new Map();
      function a(l, h) {
        o.has(l) || o.set(l, { missing: [] }), o.get(l).missing.push(h);
      }
      function u(l, h) {
        var f = e[l].slice(0);
        Ir(h, function(y, b, S, C, m) {
          var v = b + "-" + S, E = f.indexOf(v);
          E !== -1 && (f.splice(E, 1), m.status !== "available" && a(l, v));
        }), f.forEach(function(y) {
          a(l, y);
        });
      }
      i.forEach(function(l) {
        this._getRevisionTree(l, function(h, f) {
          if (h && h.status === 404 && h.message === "missing")
            o.set(l, { missing: e[l] });
          else {
            if (h)
              return r(h);
            u(l, f);
          }
          if (++s === i.length) {
            var y = {};
            return o.forEach(function(b, S) {
              y[S] = b;
            }), r(null, y);
          }
        });
      }, this);
    }).bind(this), this.bulkGet = ze("bulkGet", function(e, n) {
      ng(this, e, n);
    }).bind(this), this.compactDocument = ze("compactDocument", function(e, n, r) {
      this._getRevisionTree(e, (i, s) => {
        if (i)
          return r(i);
        var o = Sb(s), a = [], u = [];
        Object.keys(o).forEach(function(l) {
          o[l] > n && a.push(l);
        }), Ir(s, function(l, h, f, y, b) {
          var S = h + "-" + f;
          b.status === "available" && a.indexOf(S) !== -1 && u.push(S);
        }), this._doCompaction(e, u, r);
      });
    }).bind(this), this.compact = ze("compact", function(e, n) {
      typeof e == "function" && (n = e, e = {}), e = e || {}, this._compactionQueue = this._compactionQueue || [], this._compactionQueue.push({ opts: e, callback: n }), this._compactionQueue.length === 1 && pg(this);
    }).bind(this), this.get = ze("get", function(e, n, r) {
      if (typeof n == "function" && (r = n, n = {}), n = n || {}, typeof e != "string")
        return r(le(rg));
      if (vr(e) && typeof this._getLocal == "function")
        return this._getLocal(e, r);
      var i = [];
      const s = () => {
        var u = [], l = i.length;
        if (!l)
          return r(null, u);
        i.forEach((h) => {
          this.get(e, {
            rev: h,
            revs: n.revs,
            latest: n.latest,
            attachments: n.attachments,
            binary: n.binary
          }, function(f, y) {
            if (f)
              u.push({ missing: h });
            else {
              for (var b, S = 0, C = u.length; S < C; S++)
                if (u[S].ok && u[S].ok._rev === y._rev) {
                  b = !0;
                  break;
                }
              b || u.push({ ok: y });
            }
            l--, l || r(null, u);
          });
        });
      };
      if (n.open_revs) {
        if (n.open_revs === "all")
          this._getRevisionTree(e, function(u, l) {
            if (u)
              return r(u);
            i = _l(l).map(function(h) {
              return h.rev;
            }), s();
          });
        else if (Array.isArray(n.open_revs)) {
          i = n.open_revs;
          for (var o = 0; o < i.length; o++) {
            var a = i[o];
            if (!bc(a))
              return r(le(Co));
          }
          s();
        } else
          return r(le(ul, "function_clause"));
        return;
      }
      return this._get(e, n, (u, l) => {
        if (u)
          return u.docId = e, r(u);
        var h = l.doc, f = l.metadata, y = l.ctx;
        if (n.conflicts) {
          var b = wl(f);
          b.length && (h._conflicts = b);
        }
        if (bn(f, h._rev) && (h._deleted = !0), n.revs || n.revs_info) {
          for (var S = h._rev.split("-"), C = parseInt(S[0], 10), m = S[1], v = fg(f.rev_tree), E = null, p = 0; p < v.length; p++) {
            var g = v[p];
            const k = g.ids.findIndex((Y) => Y.id === m);
            var w = k === C - 1;
            (w || !E && k !== -1) && (E = g);
          }
          if (!E)
            return u = new Error("invalid rev tree"), u.docId = e, r(u);
          const D = h._rev.split("-")[1], N = E.ids.findIndex((k) => k.id === D) + 1;
          var I = E.ids.length - N;
          if (E.ids.splice(N, I), E.ids.reverse(), n.revs && (h._revisions = {
            start: E.pos + E.ids.length - 1,
            ids: E.ids.map(function(k) {
              return k.id;
            })
          }), n.revs_info) {
            var R = E.pos + E.ids.length;
            h._revs_info = E.ids.map(function(k) {
              return R--, {
                rev: R + "-" + k.id,
                status: k.opts.status
              };
            });
          }
        }
        if (n.attachments && h._attachments) {
          var T = h._attachments, A = Object.keys(T).length;
          if (A === 0)
            return r(null, h);
          Object.keys(T).forEach((D) => {
            this._getAttachment(h._id, D, T[D], {
              binary: n.binary,
              metadata: f,
              ctx: y
            }, function(N, k) {
              var Y = h._attachments[D];
              Y.data = k, delete Y.stub, delete Y.length, --A || r(null, h);
            });
          });
        } else {
          if (h._attachments)
            for (var O in h._attachments)
              Object.prototype.hasOwnProperty.call(h._attachments, O) && (h._attachments[O].stub = !0);
          r(null, h);
        }
      });
    }).bind(this), this.getAttachment = ze("getAttachment", function(e, n, r, i) {
      r instanceof Function && (i = r, r = {}), this._get(e, r, (s, o) => {
        if (s)
          return i(s);
        if (o.doc._attachments && o.doc._attachments[n])
          r.ctx = o.ctx, r.binary = !0, r.metadata = o.metadata, this._getAttachment(
            e,
            n,
            o.doc._attachments[n],
            r,
            i
          );
        else
          return i(le(Ft));
      });
    }).bind(this), this.allDocs = ze("allDocs", function(e, n) {
      if (typeof e == "function" && (n = e, e = {}), e.skip = typeof e.skip < "u" ? e.skip : 0, e.start_key && (e.startkey = e.start_key), e.end_key && (e.endkey = e.end_key), "keys" in e) {
        if (!Array.isArray(e.keys))
          return n(new TypeError("options.keys must be an array"));
        var r = ["startkey", "endkey", "key"].filter(function(i) {
          return i in e;
        })[0];
        if (r) {
          n(le(
            WE,
            "Query parameter `" + r + "` is not compatible with multi-get"
          ));
          return;
        }
        if (!on(this) && (Ab(e), e.keys.length === 0))
          return this._allDocs({ limit: 0 }, n);
      }
      return this._allDocs(e, n);
    }).bind(this), this.close = ze("close", function(e) {
      return this._closed = !0, this.emit("closed"), this._close(e);
    }).bind(this), this.info = ze("info", function(e) {
      this._info((n, r) => {
        if (n)
          return e(n);
        r.db_name = r.db_name || this.name, r.auto_compaction = !!(this.auto_compaction && !on(this)), r.adapter = this.adapter, e(null, r);
      });
    }).bind(this), this.id = ze("id", function(e) {
      return this._id(e);
    }).bind(this), this.bulkDocs = ze("bulkDocs", function(e, n, r) {
      if (typeof n == "function" && (r = n, n = {}), n = n || {}, Array.isArray(e) && (e = {
        docs: e
      }), !e || !e.docs || !Array.isArray(e.docs))
        return r(le(KE));
      for (var i = 0; i < e.docs.length; ++i) {
        const u = e.docs[i];
        if (Ec(u))
          return r(le(_c));
        if ("_rev" in u && !bc(u._rev))
          return r(le(Co));
      }
      var s;
      if (e.docs.forEach(function(u) {
        u._attachments && Object.keys(u._attachments).forEach(function(l) {
          s = s || Cb(l), u._attachments[l].content_type || qt("warn", "Attachment", l, "on document", u._id, "is missing content_type");
        });
      }), s)
        return r(le(ba, s));
      "new_edits" in n || ("new_edits" in e ? n.new_edits = e.new_edits : n.new_edits = !0);
      var o = this;
      !n.new_edits && !on(o) && e.docs.sort(Ib), Tb(e.docs);
      var a = e.docs.map(function(u) {
        return u._id;
      });
      this._bulkDocs(e, n, function(u, l) {
        if (u)
          return r(u);
        if (n.new_edits || (l = l.filter(function(y) {
          return y.error;
        })), !on(o))
          for (var h = 0, f = l.length; h < f; h++)
            l[h].id = l[h].id || a[h];
        r(null, l);
      });
    }).bind(this), this.registerDependentDatabase = ze("registerDependentDatabase", function(e, n) {
      var r = Xe(this.__opts);
      this.__opts.view_adapter && (r.adapter = this.__opts.view_adapter);
      var i = new this.constructor(e, r);
      function s(o) {
        return o.dependentDbs = o.dependentDbs || {}, o.dependentDbs[e] ? !1 : (o.dependentDbs[e] = !0, o);
      }
      Bo(this, "_local/_pouch_dependentDbs", s).then(function() {
        n(null, { db: i });
      }).catch(n);
    }).bind(this), this.destroy = ze("destroy", function(e, n) {
      typeof e == "function" && (n = e, e = {});
      var r = "use_prefix" in this ? this.use_prefix : !0;
      const i = () => {
        this._destroy(e, (s, o) => {
          if (s)
            return n(s);
          this._destroyed = !0, this.emit("destroyed"), n(null, o || { ok: !0 });
        });
      };
      if (on(this))
        return i();
      this.get("_local/_pouch_dependentDbs", (s, o) => {
        if (s)
          return s.status !== 404 ? n(s) : i();
        var a = o.dependentDbs, u = this.constructor, l = Object.keys(a).map((h) => {
          var f = r ? h.replace(new RegExp("^" + u.prefix), "") : h;
          return new u(f, this.__opts).destroy();
        });
        Promise.all(l).then(i, n);
      });
    }).bind(this);
  }
  _compact(e, n) {
    var r = {
      return_docs: !1,
      last_seq: e.last_seq || 0,
      since: e.last_seq || 0
    }, i = [], s, o = 0;
    const a = (h) => {
      this.activeTasks.update(s, {
        completed_items: ++o
      }), i.push(this.compactDocument(h.id, 0));
    }, u = (h) => {
      this.activeTasks.remove(s, h), n(h);
    }, l = (h) => {
      var f = h.last_seq;
      Promise.all(i).then(() => Bo(this, "_local/compaction", (y) => !y.last_seq || y.last_seq < f ? (y.last_seq = f, y) : !1)).then(() => {
        this.activeTasks.remove(s), n(null, { ok: !0 });
      }).catch(u);
    };
    this.info().then((h) => {
      s = this.activeTasks.add({
        name: "database_compaction",
        total_items: h.update_seq - r.last_seq
      }), this.changes(r).on("change", a).on("complete", l).on("error", u);
    });
  }
  changes(e, n) {
    return typeof e == "function" && (n = e, e = {}), e = e || {}, e.return_docs = "return_docs" in e ? e.return_docs : !e.live, new bb(this, e, n);
  }
  type() {
    return typeof this._type == "function" ? this._type() : this.adapter;
  }
}
mg.prototype.purge = ze("_purge", function(t, e, n) {
  if (typeof this._purge > "u")
    return n(le(ul, "Purge is not implemented in the " + this.adapter + " adapter."));
  var r = this;
  r._getRevisionTree(t, (i, s) => {
    if (i)
      return n(i);
    if (!s)
      return n(le(Ft));
    let o;
    try {
      o = fb(s, e);
    } catch (a) {
      return n(a.message || a);
    }
    r._purge(t, o, (a, u) => {
      if (a)
        return n(a);
      Rb(r, t, e).then(function() {
        return n(null, u);
      });
    });
  });
});
class kb {
  constructor() {
    this.isReady = !1, this.failed = !1, this.queue = [];
  }
  execute() {
    var e;
    if (this.failed)
      for (; e = this.queue.shift(); )
        e(this.failed);
    else
      for (; e = this.queue.shift(); )
        e();
  }
  fail(e) {
    this.failed = e, this.execute();
  }
  ready(e) {
    this.isReady = !0, this.db = e, this.execute();
  }
  addTask(e) {
    this.queue.push(e), this.failed && this.execute();
  }
}
function Ob(t, e) {
  var n = t.match(/([a-z-]*):\/\/(.*)/);
  if (n)
    return {
      name: /https?/.test(n[1]) ? n[1] + "://" + n[2] : n[2],
      adapter: n[1]
    };
  var r = pe.adapters, i = pe.preferredAdapters, s = pe.prefix, o = e.adapter;
  if (!o)
    for (var a = 0; a < i.length; ++a) {
      if (o = i[a], o === "idb" && "websql" in r && $o() && localStorage["_pouch__websqldb_" + s + t]) {
        qt("log", 'PouchDB is downgrading "' + t + '" to WebSQL to avoid data loss, because it was already opened with WebSQL.');
        continue;
      }
      break;
    }
  var u = r[o], l = u && "use_prefix" in u ? u.use_prefix : !0;
  return {
    name: l ? s + t : t,
    adapter: o
  };
}
function Db(t, e) {
  t.prototype = Object.create(e.prototype, {
    constructor: { value: t }
  });
}
function gg(t, e) {
  let n = function(...r) {
    if (!(this instanceof n))
      return new n(...r);
    e.apply(this, r);
  };
  return Db(n, t), n;
}
function Nb(t) {
  function e(r) {
    t.removeListener("closed", n), r || t.constructor.emit("destroyed", t.name);
  }
  function n() {
    t.removeListener("destroyed", e), t.constructor.emit("unref", t);
  }
  t.once("destroyed", e), t.once("closed", n), t.constructor.emit("ref", t);
}
class qh extends mg {
  constructor(e, n) {
    super(), this._setup(e, n);
  }
  _setup(e, n) {
    if (super._setup(), n = n || {}, e && typeof e == "object" && (n = e, e = n.name, delete n.name), n.deterministic_revs === void 0 && (n.deterministic_revs = !0), this.__opts = n = Xe(n), this.auto_compaction = n.auto_compaction, this.purged_infos_limit = n.purged_infos_limit || 1e3, this.prefix = pe.prefix, typeof e != "string")
      throw new Error("Missing/invalid DB name");
    var r = (n.prefix || "") + e, i = Ob(r, n);
    if (n.name = i.name, n.adapter = n.adapter || i.adapter, this.name = e, this._adapter = n.adapter, pe.emit("debug", ["adapter", "Picked adapter: ", n.adapter]), !pe.adapters[n.adapter] || !pe.adapters[n.adapter].valid())
      throw new Error("Invalid Adapter: " + n.adapter);
    if (n.view_adapter && (!pe.adapters[n.view_adapter] || !pe.adapters[n.view_adapter].valid()))
      throw new Error("Invalid View Adapter: " + n.view_adapter);
    this.taskqueue = new kb(), this.adapter = n.adapter, pe.adapters[n.adapter].call(this, n, (s) => {
      if (s)
        return this.taskqueue.fail(s);
      Nb(this), this.emit("created", this), pe.emit("created", this.name), this.taskqueue.ready(this);
    });
  }
}
const pe = gg(qh, function(t, e) {
  qh.prototype._setup.call(this, t, e);
});
var yg = fetch, ni = Headers;
class xb {
  constructor() {
    this.tasks = {};
  }
  list() {
    return Object.values(this.tasks);
  }
  add(e) {
    const n = al();
    return this.tasks[n] = {
      id: n,
      name: e.name,
      total_items: e.total_items,
      created_at: (/* @__PURE__ */ new Date()).toJSON()
    }, n;
  }
  get(e) {
    return this.tasks[e];
  }
  /* eslint-disable no-unused-vars */
  remove(e, n) {
    return delete this.tasks[e], this.tasks;
  }
  update(e, n) {
    const r = this.tasks[e];
    if (typeof r < "u") {
      const i = {
        id: r.id,
        name: r.name,
        created_at: r.created_at,
        total_items: n.total_items || r.total_items,
        completed_items: n.completed_items || r.completed_items,
        updated_at: (/* @__PURE__ */ new Date()).toJSON()
      };
      this.tasks[e] = i;
    }
    return this.tasks;
  }
}
pe.adapters = {};
pe.preferredAdapters = [];
pe.prefix = "_pouch_";
var zh = new Cn();
function Lb(t) {
  Object.keys(Cn.prototype).forEach(function(n) {
    typeof Cn.prototype[n] == "function" && (t[n] = zh[n].bind(zh));
  });
  var e = t._destructionListeners = /* @__PURE__ */ new Map();
  t.on("ref", function(r) {
    e.has(r.name) || e.set(r.name, []), e.get(r.name).push(r);
  }), t.on("unref", function(r) {
    if (e.has(r.name)) {
      var i = e.get(r.name), s = i.indexOf(r);
      s < 0 || (i.splice(s, 1), i.length > 1 ? e.set(r.name, i) : e.delete(r.name));
    }
  }), t.on("destroyed", function(r) {
    if (e.has(r)) {
      var i = e.get(r);
      e.delete(r), i.forEach(function(s) {
        s.emit("destroyed", !0);
      });
    }
  });
}
Lb(pe);
pe.adapter = function(t, e, n) {
  e.valid() && (pe.adapters[t] = e, n && pe.preferredAdapters.push(t));
};
pe.plugin = function(t) {
  if (typeof t == "function")
    t(pe);
  else {
    if (typeof t != "object" || Object.keys(t).length === 0)
      throw new Error('Invalid plugin: got "' + t + '", expected an object or a function');
    Object.keys(t).forEach(function(e) {
      pe.prototype[e] = t[e];
    });
  }
  return this.__defaults && (pe.__defaults = Object.assign({}, this.__defaults)), pe;
};
pe.defaults = function(t) {
  let e = gg(pe, function(n, r) {
    r = r || {}, n && typeof n == "object" && (r = n, n = r.name, delete r.name), r = Object.assign({}, e.__defaults, r), pe.call(this, n, r);
  });
  return e.preferredAdapters = pe.preferredAdapters.slice(), Object.keys(pe).forEach(function(n) {
    n in e || (e[n] = pe[n]);
  }), e.__defaults = Object.assign({}, this.__defaults, t), e;
};
pe.fetch = function(t, e) {
  return yg(t, e);
};
pe.prototype.activeTasks = pe.activeTasks = new xb();
var Mb = "9.0.0";
function El(t, e) {
  for (var n = t, r = 0, i = e.length; r < i; r++) {
    var s = e[r];
    if (n = n[s], !n)
      break;
  }
  return n;
}
function Vb(t, e) {
  return t < e ? -1 : t > e ? 1 : 0;
}
function bl(t) {
  for (var e = [], n = "", r = 0, i = t.length; r < i; r++) {
    var s = t[r];
    r > 0 && t[r - 1] === "\\" && (s === "$" || s === ".") ? n = n.substring(0, n.length - 1) + s : s === "." ? (e.push(n), n = "") : n += s;
  }
  return e.push(n), e;
}
var Fb = ["$or", "$nor", "$not"];
function vg(t) {
  return Fb.indexOf(t) > -1;
}
function _g(t) {
  return Object.keys(t)[0];
}
function Ub(t) {
  return t[_g(t)];
}
function ms(t) {
  var e = {}, n = { $or: !0, $nor: !0 };
  return t.forEach(function(r) {
    Object.keys(r).forEach(function(i) {
      var s = r[i];
      if (typeof s != "object" && (s = { $eq: s }), vg(i))
        if (s instanceof Array) {
          if (n[i]) {
            n[i] = !1, e[i] = s;
            return;
          }
          var o = [];
          e[i].forEach(function(u) {
            Object.keys(s).forEach(function(l) {
              var h = s[l], f = Math.max(Object.keys(u).length, Object.keys(h).length), y = ms([u, h]);
              Object.keys(y).length <= f || o.push(y);
            });
          }), e[i] = o;
        } else
          e[i] = ms([s]);
      else {
        var a = e[i] = e[i] || {};
        Object.keys(s).forEach(function(u) {
          var l = s[u];
          if (u === "$gt" || u === "$gte")
            return jb(u, l, a);
          if (u === "$lt" || u === "$lte")
            return $b(u, l, a);
          if (u === "$ne")
            return Bb(l, a);
          if (u === "$eq")
            return qb(l, a);
          if (u === "$regex")
            return zb(l, a);
          a[u] = l;
        });
      }
    });
  }), e;
}
function jb(t, e, n) {
  typeof n.$eq < "u" || (typeof n.$gte < "u" ? t === "$gte" ? e > n.$gte && (n.$gte = e) : e >= n.$gte && (delete n.$gte, n.$gt = e) : typeof n.$gt < "u" ? t === "$gte" ? e > n.$gt && (delete n.$gt, n.$gte = e) : e > n.$gt && (n.$gt = e) : n[t] = e);
}
function $b(t, e, n) {
  typeof n.$eq < "u" || (typeof n.$lte < "u" ? t === "$lte" ? e < n.$lte && (n.$lte = e) : e <= n.$lte && (delete n.$lte, n.$lt = e) : typeof n.$lt < "u" ? t === "$lte" ? e < n.$lt && (delete n.$lt, n.$lte = e) : e < n.$lt && (n.$lt = e) : n[t] = e);
}
function Bb(t, e) {
  "$ne" in e ? e.$ne.push(t) : e.$ne = [t];
}
function qb(t, e) {
  delete e.$gt, delete e.$gte, delete e.$lt, delete e.$lte, delete e.$ne, e.$eq = t;
}
function zb(t, e) {
  "$regex" in e ? e.$regex.push(t) : e.$regex = [t];
}
function wg(t) {
  for (var e in t) {
    if (Array.isArray(t))
      for (var n in t)
        t[n].$and && (t[n] = ms(t[n].$and));
    var r = t[e];
    typeof r == "object" && wg(r);
  }
  return t;
}
function Eg(t, e) {
  for (var n in t) {
    n === "$and" && (e = !0);
    var r = t[n];
    typeof r == "object" && (e = Eg(r, e));
  }
  return e;
}
function Kb(t) {
  var e = Xe(t);
  Eg(e, !1) && (e = wg(e), "$and" in e && (e = ms(e.$and))), ["$or", "$nor"].forEach(function(o) {
    o in e && e[o].forEach(function(a) {
      for (var u = Object.keys(a), l = 0; l < u.length; l++) {
        var h = u[l], f = a[h];
        (typeof f != "object" || f === null) && (a[h] = { $eq: f });
      }
    });
  }), "$not" in e && (e.$not = ms([e.$not]));
  for (var n = Object.keys(e), r = 0; r < n.length; r++) {
    var i = n[r], s = e[i];
    (typeof s != "object" || s === null) && (s = { $eq: s }), e[i] = s;
  }
  return uu(e), e;
}
function uu(t) {
  Object.keys(t).forEach(function(e) {
    var n = t[e];
    Array.isArray(n) ? n.forEach(function(r) {
      r && typeof r == "object" && uu(r);
    }) : e === "$ne" ? t.$ne = [n] : e === "$regex" ? t.$regex = [n] : n && typeof n == "object" && uu(n);
  });
}
function Hb(t, e, n) {
  for (var r = "", i = n - t.length; r.length < i; )
    r += e;
  return r;
}
function Gb(t, e, n) {
  var r = Hb(t, e, n);
  return r + t;
}
var bg = -324, lu = 3, fu = "";
function He(t, e) {
  if (t === e)
    return 0;
  t = Sr(t), e = Sr(e);
  var n = hu(t), r = hu(e);
  if (n - r !== 0)
    return n - r;
  switch (typeof t) {
    case "number":
      return t - e;
    case "boolean":
      return t < e ? -1 : 1;
    case "string":
      return Zb(t, e);
  }
  return Array.isArray(t) ? Xb(t, e) : eT(t, e);
}
function Sr(t) {
  switch (typeof t) {
    case "undefined":
      return null;
    case "number":
      return t === 1 / 0 || t === -1 / 0 || isNaN(t) ? null : t;
    case "object":
      var e = t;
      if (Array.isArray(t)) {
        var n = t.length;
        t = new Array(n);
        for (var r = 0; r < n; r++)
          t[r] = Sr(e[r]);
      } else {
        if (t instanceof Date)
          return t.toJSON();
        if (t !== null) {
          t = {};
          for (var i in e)
            if (Object.prototype.hasOwnProperty.call(e, i)) {
              var s = e[i];
              typeof s < "u" && (t[i] = Sr(s));
            }
        }
      }
  }
  return t;
}
function Wb(t) {
  if (t !== null)
    switch (typeof t) {
      case "boolean":
        return t ? 1 : 0;
      case "number":
        return tT(t);
      case "string":
        return t.replace(/\u0002/g, "").replace(/\u0001/g, "").replace(/\u0000/g, "");
      case "object":
        var e = Array.isArray(t), n = e ? t : Object.keys(t), r = -1, i = n.length, s = "";
        if (e)
          for (; ++r < i; )
            s += Yt(n[r]);
        else
          for (; ++r < i; ) {
            var o = n[r];
            s += Yt(o) + Yt(t[o]);
          }
        return s;
    }
  return "";
}
function Yt(t) {
  var e = "\0";
  return t = Sr(t), hu(t) + fu + Wb(t) + e;
}
function Qb(t, e) {
  var n = e, r, i = t[e] === "1";
  if (i)
    r = 0, e++;
  else {
    var s = t[e] === "0";
    e++;
    var o = "", a = t.substring(e, e + lu), u = parseInt(a, 10) + bg;
    for (s && (u = -u), e += lu; ; ) {
      var l = t[e];
      if (l === "\0")
        break;
      o += l, e++;
    }
    o = o.split("."), o.length === 1 ? r = parseInt(o, 10) : r = parseFloat(o[0] + "." + o[1]), s && (r = r - 10), u !== 0 && (r = parseFloat(r + "e" + u));
  }
  return { num: r, length: e - n };
}
function Yb(t, e) {
  var n = t.pop();
  if (e.length) {
    var r = e[e.length - 1];
    n === r.element && (e.pop(), r = e[e.length - 1]);
    var i = r.element, s = r.index;
    if (Array.isArray(i))
      i.push(n);
    else if (s === t.length - 2) {
      var o = t.pop();
      i[o] = n;
    } else
      t.push(n);
  }
}
function Jb(t) {
  for (var e = [], n = [], r = 0; ; ) {
    var i = t[r++];
    if (i === "\0") {
      if (e.length === 1)
        return e.pop();
      Yb(e, n);
      continue;
    }
    switch (i) {
      case "1":
        e.push(null);
        break;
      case "2":
        e.push(t[r] === "1"), r++;
        break;
      case "3":
        var s = Qb(t, r);
        e.push(s.num), r += s.length;
        break;
      case "4":
        for (var o = ""; ; ) {
          var a = t[r];
          if (a === "\0")
            break;
          o += a, r++;
        }
        o = o.replace(/\u0001\u0001/g, "\0").replace(/\u0001\u0002/g, "").replace(/\u0002\u0002/g, ""), e.push(o);
        break;
      case "5":
        var u = { element: [], index: e.length };
        e.push(u.element), n.push(u);
        break;
      case "6":
        var l = { element: {}, index: e.length };
        e.push(l.element), n.push(l);
        break;
      default:
        throw new Error(
          "bad collationIndex or unexpectedly reached end of input: " + i
        );
    }
  }
}
function Xb(t, e) {
  for (var n = Math.min(t.length, e.length), r = 0; r < n; r++) {
    var i = He(t[r], e[r]);
    if (i !== 0)
      return i;
  }
  return t.length === e.length ? 0 : t.length > e.length ? 1 : -1;
}
function Zb(t, e) {
  return t === e ? 0 : t > e ? 1 : -1;
}
function eT(t, e) {
  for (var n = Object.keys(t), r = Object.keys(e), i = Math.min(n.length, r.length), s = 0; s < i; s++) {
    var o = He(n[s], r[s]);
    if (o !== 0 || (o = He(t[n[s]], e[r[s]]), o !== 0))
      return o;
  }
  return n.length === r.length ? 0 : n.length > r.length ? 1 : -1;
}
function hu(t) {
  var e = ["boolean", "number", "string", "object"], n = e.indexOf(typeof t);
  if (~n)
    return t === null ? 1 : Array.isArray(t) ? 5 : n < 3 ? n + 2 : n + 3;
  if (Array.isArray(t))
    return 5;
}
function tT(t) {
  if (t === 0)
    return "1";
  var e = t.toExponential().split(/e\+?/), n = parseInt(e[1], 10), r = t < 0, i = r ? "0" : "2", s = (r ? -n : n) - bg, o = Gb(s.toString(), "0", lu);
  i += fu + o;
  var a = Math.abs(parseFloat(e[0]));
  r && (a = 10 - a);
  var u = a.toFixed(20);
  return u = u.replace(/\.?0+$/, ""), i += fu + u, i;
}
function nT(t) {
  function e(n) {
    return t.map(function(r) {
      var i = _g(r), s = bl(i), o = El(n, s);
      return o;
    });
  }
  return function(n, r) {
    var i = e(n.doc), s = e(r.doc), o = He(i, s);
    return o !== 0 ? o : Vb(n.doc._id, r.doc._id);
  };
}
function rT(t, e, n) {
  if (t = t.filter(function(o) {
    return ri(o.doc, e.selector, n);
  }), e.sort) {
    var r = nT(e.sort);
    t = t.sort(r), typeof e.sort[0] != "string" && Ub(e.sort[0]) === "desc" && (t = t.reverse());
  }
  if ("limit" in e || "skip" in e) {
    var i = e.skip || 0, s = ("limit" in e ? e.limit : t.length) + i;
    t = t.slice(i, s);
  }
  return t;
}
function ri(t, e, n) {
  return n.every(function(r) {
    var i = e[r], s = bl(r), o = El(t, s);
    return vg(r) ? iT(r, i, t) : qo(i, t, s, o);
  });
}
function qo(t, e, n, r) {
  return t ? typeof t == "object" ? Object.keys(t).every(function(i) {
    var s = t[i];
    if (i.indexOf("$") === 0)
      return Kh(i, e, s, n, r);
    var o = bl(i);
    if (r === void 0 && typeof s != "object" && o.length > 0)
      return !1;
    var a = El(r, o);
    return typeof s == "object" ? qo(s, e, n, a) : Kh("$eq", e, s, o, a);
  }) : t === r : !0;
}
function iT(t, e, n) {
  return t === "$or" ? e.some(function(r) {
    return ri(n, r, Object.keys(r));
  }) : t === "$not" ? !ri(n, e, Object.keys(e)) : !e.find(function(r) {
    return ri(n, r, Object.keys(r));
  });
}
function Kh(t, e, n, r, i) {
  if (!Gh[t])
    throw new Error('unknown operator "' + t + '" - should be one of $eq, $lte, $lt, $gt, $gte, $exists, $ne, $in, $nin, $size, $mod, $regex, $elemMatch, $type, $allMatch or $all');
  return Gh[t](e, n, r, i);
}
function Hi(t) {
  return typeof t < "u" && t !== null;
}
function ar(t) {
  return typeof t < "u";
}
function sT(t, e) {
  if (typeof t != "number" || parseInt(t, 10) !== t)
    return !1;
  var n = e[0], r = e[1];
  return t % n === r;
}
function Hh(t, e) {
  return e.some(function(n) {
    return t instanceof Array ? t.some(function(r) {
      return He(n, r) === 0;
    }) : He(n, t) === 0;
  });
}
function oT(t, e) {
  return e.every(function(n) {
    return t.some(function(r) {
      return He(n, r) === 0;
    });
  });
}
function aT(t, e) {
  return t.length === e;
}
function cT(t, e) {
  var n = new RegExp(e);
  return n.test(t);
}
function uT(t, e) {
  switch (e) {
    case "null":
      return t === null;
    case "boolean":
      return typeof t == "boolean";
    case "number":
      return typeof t == "number";
    case "string":
      return typeof t == "string";
    case "array":
      return t instanceof Array;
    case "object":
      return {}.toString.call(t) === "[object Object]";
  }
}
var Gh = {
  $elemMatch: function(t, e, n, r) {
    return !Array.isArray(r) || r.length === 0 ? !1 : typeof r[0] == "object" && r[0] !== null ? r.some(function(i) {
      return ri(i, e, Object.keys(e));
    }) : r.some(function(i) {
      return qo(e, t, n, i);
    });
  },
  $allMatch: function(t, e, n, r) {
    return !Array.isArray(r) || r.length === 0 ? !1 : typeof r[0] == "object" && r[0] !== null ? r.every(function(i) {
      return ri(i, e, Object.keys(e));
    }) : r.every(function(i) {
      return qo(e, t, n, i);
    });
  },
  $eq: function(t, e, n, r) {
    return ar(r) && He(r, e) === 0;
  },
  $gte: function(t, e, n, r) {
    return ar(r) && He(r, e) >= 0;
  },
  $gt: function(t, e, n, r) {
    return ar(r) && He(r, e) > 0;
  },
  $lte: function(t, e, n, r) {
    return ar(r) && He(r, e) <= 0;
  },
  $lt: function(t, e, n, r) {
    return ar(r) && He(r, e) < 0;
  },
  $exists: function(t, e, n, r) {
    return e ? ar(r) : !ar(r);
  },
  $mod: function(t, e, n, r) {
    return Hi(r) && sT(r, e);
  },
  $ne: function(t, e, n, r) {
    return e.every(function(i) {
      return He(r, i) !== 0;
    });
  },
  $in: function(t, e, n, r) {
    return Hi(r) && Hh(r, e);
  },
  $nin: function(t, e, n, r) {
    return Hi(r) && !Hh(r, e);
  },
  $size: function(t, e, n, r) {
    return Hi(r) && Array.isArray(r) && aT(r, e);
  },
  $all: function(t, e, n, r) {
    return Array.isArray(r) && oT(r, e);
  },
  $regex: function(t, e, n, r) {
    return Hi(r) && typeof r == "string" && e.every(function(i) {
      return cT(r, i);
    });
  },
  $type: function(t, e, n, r) {
    return uT(r, e);
  }
};
function lT(t, e) {
  if (typeof e != "object")
    throw new Error("Selector error: expected a JSON object");
  e = Kb(e);
  var n = {
    doc: t
  }, r = rT([n], { selector: e }, Object.keys(e));
  return r && r.length === 1;
}
function fT(t) {
  return hl(`"use strict";
return ` + t + ";", {});
}
function hT(t) {
  var e = [
    "return function(doc) {",
    '  "use strict";',
    "  var emitted = false;",
    "  var emit = function (a, b) {",
    "    emitted = true;",
    "  };",
    "  var view = " + t + ";",
    "  view(doc);",
    "  if (emitted) {",
    "    return true;",
    "  }",
    "};"
  ].join(`
`);
  return hl(e, {});
}
function dT(t, e) {
  if (t.selector && t.filter && t.filter !== "_selector") {
    var n = typeof t.filter == "string" ? t.filter : "function";
    return e(new Error('selector invalid for filter "' + n + '"'));
  }
  e();
}
function pT(t) {
  t.view && !t.filter && (t.filter = "_view"), t.selector && !t.filter && (t.filter = "_selector"), t.filter && typeof t.filter == "string" && (t.filter === "_view" ? t.view = Fh(t.view) : t.filter = Fh(t.filter));
}
function mT(t, e) {
  return e.filter && typeof e.filter == "string" && !e.doc_ids && !on(t.db);
}
function gT(t, e) {
  var n = e.complete;
  if (e.filter === "_view") {
    if (!e.view || typeof e.view != "string") {
      var r = le(
        ba,
        "`view` filter parameter not found or invalid."
      );
      return n(r);
    }
    var i = cu(e.view);
    t.db.get("_design/" + i[0], function(o, a) {
      if (t.isCancelled)
        return n(null, { status: "cancelled" });
      if (o)
        return n(ui(o));
      var u = a && a.views && a.views[i[1]] && a.views[i[1]].map;
      if (!u)
        return n(le(
          Ft,
          a.views ? "missing json key: " + i[1] : "missing json key: views"
        ));
      e.filter = hT(u), t.doChanges(e);
    });
  } else if (e.selector)
    e.filter = function(o) {
      return lT(o, e.selector);
    }, t.doChanges(e);
  else {
    var s = cu(e.filter);
    t.db.get("_design/" + s[0], function(o, a) {
      if (t.isCancelled)
        return n(null, { status: "cancelled" });
      if (o)
        return n(ui(o));
      var u = a && a.filters && a.filters[s[1]];
      if (!u)
        return n(le(
          Ft,
          a && a.filters ? "missing json key: " + s[1] : "missing json key: filters"
        ));
      e.filter = fT(u), t.doChanges(e);
    });
  }
}
function yT(t) {
  t._changesFilterPlugin = {
    validate: dT,
    normalize: pT,
    shouldFilter: mT,
    filter: gT
  };
}
pe.plugin(yT);
pe.version = Mb;
function vT(t, e, n) {
  return new Promise(function(r) {
    var i = pl([""]);
    let s;
    {
      const o = n;
      s = t.objectStore(e).put(i, o);
    }
    s.onsuccess = function() {
      var o = navigator.userAgent.match(/Chrome\/(\d+)/), a = navigator.userAgent.match(/Edge\//);
      r(a || !o || parseInt(o[1], 10) >= 43);
    }, s.onerror = t.onabort = function(o) {
      o.preventDefault(), o.stopPropagation(), r(!1);
    };
  }).catch(function() {
    return !1;
  });
}
function Tg(t) {
  return t.reduce(function(e, n) {
    return e[n] = !0, e;
  }, {});
}
var _T = Tg([
  "_id",
  "_rev",
  "_access",
  "_attachments",
  "_deleted",
  "_revisions",
  "_revs_info",
  "_conflicts",
  "_deleted_conflicts",
  "_local_seq",
  "_rev_tree",
  // replication documents
  "_replication_id",
  "_replication_state",
  "_replication_state_time",
  "_replication_state_reason",
  "_replication_stats",
  // Specific to Couchbase Sync Gateway
  "_removed"
]), wT = Tg([
  "_access",
  "_attachments",
  // replication documents
  "_replication_id",
  "_replication_state",
  "_replication_state_time",
  "_replication_state_reason",
  "_replication_stats"
]);
function Wh(t) {
  if (!/^\d+-/.test(t))
    return le(Co);
  var e = t.indexOf("-"), n = t.substring(0, e), r = t.substring(e + 1);
  return {
    prefix: parseInt(n, 10),
    id: r
  };
}
function ET(t, e) {
  for (var n = t.start - t.ids.length + 1, r = t.ids, i = [r[0], e, []], s = 1, o = r.length; s < o; s++)
    i = [r[s], { status: "missing" }, [i]];
  return [{
    pos: n,
    ids: i
  }];
}
function Ig(t, e, n) {
  n || (n = {
    deterministic_revs: !0
  });
  var r, i, s, o = { status: "available" };
  if (t._deleted && (o.deleted = !0), e)
    if (t._id || (t._id = Ta()), i = lg(t, n.deterministic_revs), t._rev) {
      if (s = Wh(t._rev), s.error)
        return s;
      t._rev_tree = [{
        pos: s.prefix,
        ids: [s.id, { status: "missing" }, [[i, o, []]]]
      }], r = s.prefix + 1;
    } else
      t._rev_tree = [{
        pos: 1,
        ids: [i, o, []]
      }], r = 1;
  else if (t._revisions && (t._rev_tree = ET(t._revisions, o), r = t._revisions.start, i = t._revisions.ids[0]), !t._rev_tree) {
    if (s = Wh(t._rev), s.error)
      return s;
    r = s.prefix, i = s.id, t._rev_tree = [{
      pos: r,
      ids: [i, o, []]
    }];
  }
  sg(t._id), t._rev = r + "-" + i;
  var a = { metadata: {}, data: {} };
  for (var u in t)
    if (Object.prototype.hasOwnProperty.call(t, u)) {
      var l = u[0] === "_";
      if (l && !_T[u]) {
        var h = le(Vh, u);
        throw h.message = Vh.message + ": " + u, h;
      } else l && !wT[u] ? a.metadata[u.slice(1)] = t[u] : a.data[u] = t[u];
    }
  return a;
}
function bT(t) {
  try {
    return dl(t);
  } catch {
    var e = le(
      ig,
      "Attachment is not a valid base64 string"
    );
    return { error: e };
  }
}
function TT(t, e, n) {
  var r = bT(t.data);
  if (r.error)
    return n(r.error);
  t.length = r.length, e === "blob" ? t.data = ml(r, t.content_type) : e === "base64" ? t.data = Ds(r) : t.data = r, vl(r, function(i) {
    t.digest = "md5-" + i, n();
  });
}
function IT(t, e, n) {
  vl(t.data, function(r) {
    t.digest = "md5-" + r, t.length = t.data.size || t.data.length || 0, e === "binary" ? cg(t.data, function(i) {
      t.data = i, n();
    }) : e === "base64" ? yl(t.data, function(i) {
      t.data = i, n();
    }) : n();
  });
}
function ST(t, e, n) {
  if (t.stub)
    return n();
  typeof t.data == "string" ? TT(t, e, n) : IT(t, e, n);
}
function AT(t, e, n) {
  if (!t.length)
    return n();
  var r = 0, i;
  t.forEach(function(o) {
    var a = o.data && o.data._attachments ? Object.keys(o.data._attachments) : [], u = 0;
    if (!a.length)
      return s();
    function l(f) {
      i = f, u++, u === a.length && s();
    }
    for (var h in o.data._attachments)
      Object.prototype.hasOwnProperty.call(o.data._attachments, h) && ST(
        o.data._attachments[h],
        e,
        l
      );
  });
  function s() {
    r++, t.length === r && (i ? n(i) : n());
  }
}
function RT(t, e, n, r, i, s, o, a) {
  if (yb(e.rev_tree, n.metadata.rev) && !a)
    return r[i] = n, s();
  var u = e.winningRev || Tr(e), l = "deleted" in e ? e.deleted : bn(e, u), h = "deleted" in n.metadata ? n.metadata.deleted : bn(n.metadata), f = /^1-/.test(n.metadata.rev);
  if (l && !h && a && f) {
    var y = n.data;
    y._rev = u, y._id = n.metadata.id, n = Ig(y, a);
  }
  var b = dg(e.rev_tree, n.metadata.rev_tree[0], t), S = a && (l && h && b.conflicts !== "new_leaf" || !l && b.conflicts !== "new_leaf" || l && !h && b.conflicts === "new_branch");
  if (S) {
    var C = le(ci);
    return r[i] = C, s();
  }
  var m = n.metadata.rev;
  n.metadata.rev_tree = b.tree, n.stemmedRevs = b.stemmedRevs || [], e.rev_map && (n.metadata.rev_map = e.rev_map);
  var v = Tr(n.metadata), E = bn(n.metadata, v), p = l === E ? 0 : l < E ? -1 : 1, g;
  m === v ? g = E : g = bn(n.metadata, m), o(
    n,
    v,
    E,
    g,
    !0,
    p,
    i,
    s
  );
}
function CT(t) {
  return t.metadata.rev_tree[0].ids[1].status === "missing";
}
function PT(t, e, n, r, i, s, o, a, u) {
  t = t || 1e3;
  function l(C, m, v) {
    var E = Tr(C.metadata), p = bn(C.metadata, E);
    if ("was_delete" in a && p)
      return s[m] = le(Ft, "deleted"), v();
    var g = h && CT(C);
    if (g) {
      var w = le(ci);
      return s[m] = w, v();
    }
    var I = p ? 0 : 1;
    o(
      C,
      E,
      p,
      p,
      !1,
      I,
      m,
      v
    );
  }
  var h = a.new_edits, f = /* @__PURE__ */ new Map(), y = 0, b = e.length;
  function S() {
    ++y === b && u && u();
  }
  e.forEach(function(C, m) {
    if (C._id && vr(C._id)) {
      var v = C._deleted ? "_removeLocal" : "_putLocal";
      n[v](C, { ctx: i }, function(p, g) {
        s[m] = p || g, S();
      });
      return;
    }
    var E = C.metadata.id;
    f.has(E) ? (b--, f.get(E).push([C, m])) : f.set(E, [[C, m]]);
  }), f.forEach(function(C, m) {
    var v = 0;
    function E() {
      ++v < C.length ? p() : S();
    }
    function p() {
      var g = C[v], w = g[0], I = g[1];
      if (r.has(m))
        RT(
          t,
          r.get(m),
          w,
          s,
          I,
          E,
          o,
          h
        );
      else {
        var R = dg([], w.metadata.rev_tree[0], t);
        w.metadata.rev_tree = R.tree, w.stemmedRevs = R.stemmedRevs || [], l(w, I, E);
      }
    }
    p();
  });
}
var kT = 5, We = "document-store", ot = "by-sequence", Ut = "attach-store", dr = "attach-seq-store", St = "meta-store", tn = "local-store", Tc = "detect-blob-support";
function OT(t) {
  try {
    return JSON.parse(t);
  } catch {
    return wa.parse(t);
  }
}
function DT(t) {
  try {
    return JSON.stringify(t);
  } catch {
    return wa.stringify(t);
  }
}
function sn(t) {
  return function(e) {
    var n = "unknown_error";
    e.target && e.target.error && (n = e.target.error.name || e.target.error.message), t(le(ll, n, e.type));
  };
}
function du(t, e, n) {
  return {
    data: DT(t),
    winningRev: e,
    deletedOrLocal: n ? "1" : "0",
    seq: t.seq,
    // highest seq for this doc
    id: t.id
  };
}
function pr(t) {
  if (!t)
    return null;
  var e = OT(t.data);
  return e.winningRev = t.winningRev, e.deleted = t.deletedOrLocal === "1", e.seq = t.seq, e;
}
function zo(t) {
  if (!t)
    return t;
  var e = t._doc_id_rev.lastIndexOf(":");
  return t._id = t._doc_id_rev.substring(0, e - 1), t._rev = t._doc_id_rev.substring(e + 1), delete t._doc_id_rev, t;
}
function Sg(t, e, n, r) {
  n ? r(t ? typeof t != "string" ? t : gl(t, e) : pl([""], { type: e })) : t ? typeof t != "string" ? ag(t, function(i) {
    r(Ds(i));
  }) : r(t) : r("");
}
function Ag(t, e, n, r) {
  var i = Object.keys(t._attachments || {});
  if (!i.length)
    return r && r();
  var s = 0;
  function o() {
    ++s === i.length && r && r();
  }
  function a(u, l) {
    var h = u._attachments[l], f = h.digest, y = n.objectStore(Ut).get(f);
    y.onsuccess = function(b) {
      h.body = b.target.result.body, o();
    };
  }
  i.forEach(function(u) {
    e.attachments && e.include_docs ? a(t, u) : (t._attachments[u].stub = !0, o());
  });
}
function pu(t, e) {
  return Promise.all(t.map(function(n) {
    if (n.doc && n.doc._attachments) {
      var r = Object.keys(n.doc._attachments);
      return Promise.all(r.map(function(i) {
        var s = n.doc._attachments[i];
        if ("body" in s) {
          var o = s.body, a = s.content_type;
          return new Promise(function(u) {
            Sg(o, a, e, function(l) {
              n.doc._attachments[i] = Object.assign(
                Os(s, ["digest", "content_type"]),
                { data: l }
              ), u();
            });
          });
        }
      }));
    }
  }));
}
function Rg(t, e, n) {
  var r = [], i = n.objectStore(ot), s = n.objectStore(Ut), o = n.objectStore(dr), a = t.length;
  function u() {
    a--, a || l();
  }
  function l() {
    r.length && r.forEach(function(h) {
      var f = o.index("digestSeq").count(
        IDBKeyRange.bound(
          h + "::",
          h + "::￿",
          !1,
          !1
        )
      );
      f.onsuccess = function(y) {
        var b = y.target.result;
        b || s.delete(h);
      };
    });
  }
  t.forEach(function(h) {
    var f = i.index("_doc_id_rev"), y = e + "::" + h;
    f.getKey(y).onsuccess = function(b) {
      var S = b.target.result;
      if (typeof S != "number")
        return u();
      i.delete(S);
      var C = o.index("seq").openCursor(IDBKeyRange.only(S));
      C.onsuccess = function(m) {
        var v = m.target.result;
        if (v) {
          var E = v.value.digestSeq.split("::")[0];
          r.push(E), o.delete(v.primaryKey), v.continue();
        } else
          u();
      };
    };
  });
}
function Jt(t, e, n) {
  try {
    return {
      txn: t.transaction(e, n)
    };
  } catch (r) {
    return {
      error: r
    };
  }
}
var is = new BE();
function NT(t, e, n, r, i, s) {
  for (var o = e.docs, a, u, l, h, f, y, b, S, C = 0, m = o.length; C < m; C++) {
    var v = o[C];
    v._id && vr(v._id) || (v = o[C] = Ig(v, n.new_edits, t), v.error && !b && (b = v));
  }
  if (b)
    return s(b);
  var E = !1, p = 0, g = new Array(o.length), w = /* @__PURE__ */ new Map(), I = !1, R = r._meta.blobSupport ? "blob" : "base64";
  AT(o, R, function(U) {
    if (U)
      return s(U);
    T();
  });
  function T() {
    var U = [
      We,
      ot,
      Ut,
      tn,
      dr,
      St
    ], B = Jt(i, U, "readwrite");
    if (B.error)
      return s(B.error);
    a = B.txn, a.onabort = sn(s), a.ontimeout = sn(s), a.oncomplete = k, u = a.objectStore(We), l = a.objectStore(ot), h = a.objectStore(Ut), f = a.objectStore(dr), y = a.objectStore(St), y.get(St).onsuccess = function(H) {
      S = H.target.result, D();
    }, oe(function(H) {
      if (H)
        return I = !0, s(H);
      N();
    });
  }
  function A() {
    E = !0, D();
  }
  function O() {
    PT(
      t.revs_limit,
      o,
      r,
      w,
      a,
      g,
      ue,
      n,
      A
    );
  }
  function D() {
    !S || !E || (S.docCount += p, y.put(S));
  }
  function N() {
    if (!o.length)
      return;
    var U = 0;
    function B() {
      ++U === o.length && O();
    }
    function H(Q) {
      var X = pr(Q.target.result);
      X && w.set(X.id, X), B();
    }
    for (var ie = 0, K = o.length; ie < K; ie++) {
      var V = o[ie];
      if (V._id && vr(V._id)) {
        B();
        continue;
      }
      var j = u.get(V.metadata.id);
      j.onsuccess = H;
    }
  }
  function k() {
    I || (is.notify(r._meta.name), s(null, g));
  }
  function Y(U, B) {
    var H = h.get(U);
    H.onsuccess = function(ie) {
      if (ie.target.result)
        B();
      else {
        var K = le(
          QE,
          "unknown stub attachment with digest " + U
        );
        K.status = 412, B(K);
      }
    };
  }
  function oe(U) {
    var B = [];
    if (o.forEach(function(V) {
      V.data && V.data._attachments && Object.keys(V.data._attachments).forEach(function(j) {
        var Q = V.data._attachments[j];
        Q.stub && B.push(Q.digest);
      });
    }), !B.length)
      return U();
    var H = 0, ie;
    function K() {
      ++H === B.length && U(ie);
    }
    B.forEach(function(V) {
      Y(V, function(j) {
        j && !ie && (ie = j), K();
      });
    });
  }
  function ue(U, B, H, ie, K, V, j, Q) {
    U.metadata.winningRev = B, U.metadata.deleted = H;
    var X = U.data;
    X._id = U.metadata.id, X._rev = U.metadata.rev, ie && (X._deleted = !0);
    var ee = X._attachments && Object.keys(X._attachments).length;
    if (ee)
      return x(
        U,
        B,
        H,
        K,
        j,
        Q
      );
    p += V, D(), ae(
      U,
      B,
      H,
      K,
      j,
      Q
    );
  }
  function ae(U, B, H, ie, K, V) {
    var j = U.data, Q = U.metadata;
    j._doc_id_rev = Q.id + "::" + Q.rev, delete j._id, delete j._rev;
    function X(Te) {
      var J = U.stemmedRevs || [];
      ie && r.auto_compaction && (J = J.concat(lb(U.metadata))), J && J.length && Rg(J, U.metadata.id, a), Q.seq = Te.target.result;
      var Be = du(
        Q,
        B,
        H
      ), me = u.put(Be);
      me.onsuccess = ge;
    }
    function ee(Te) {
      Te.preventDefault(), Te.stopPropagation();
      var J = l.index("_doc_id_rev"), Be = J.getKey(j._doc_id_rev);
      Be.onsuccess = function(me) {
        var ye = l.put(j, me.target.result);
        ye.onsuccess = X;
      };
    }
    function ge() {
      g[K] = {
        ok: !0,
        id: Q.id,
        rev: Q.rev
      }, w.set(U.metadata.id, U.metadata), L(U, Q.seq, V);
    }
    var G = l.put(j);
    G.onsuccess = X, G.onerror = ee;
  }
  function x(U, B, H, ie, K, V) {
    var j = U.data, Q = 0, X = Object.keys(j._attachments);
    function ee() {
      Q === X.length && ae(
        U,
        B,
        H,
        ie,
        K,
        V
      );
    }
    function ge() {
      Q++, ee();
    }
    X.forEach(function(G) {
      var Te = U.data._attachments[G];
      if (Te.stub)
        Q++, ee();
      else {
        var J = Te.data;
        delete Te.data, Te.revpos = parseInt(B, 10);
        var Be = Te.digest;
        $(Be, J, ge);
      }
    });
  }
  function L(U, B, H) {
    var ie = 0, K = Object.keys(U.data._attachments || {});
    if (!K.length)
      return H();
    function V() {
      ++ie === K.length && H();
    }
    function j(X) {
      var ee = U.data._attachments[X].digest, ge = f.put({
        seq: B,
        digestSeq: ee + "::" + B
      });
      ge.onsuccess = V, ge.onerror = function(G) {
        G.preventDefault(), G.stopPropagation(), V();
      };
    }
    for (var Q = 0; Q < K.length; Q++)
      j(K[Q]);
  }
  function $(U, B, H) {
    var ie = h.count(U);
    ie.onsuccess = function(K) {
      var V = K.target.result;
      if (V)
        return H();
      var j = {
        digest: U,
        body: B
      }, Q = h.put(j);
      Q.onsuccess = H;
    };
  }
}
function Cg(t, e, n, r, i) {
  r === -1 && (r = 1e3);
  var s = typeof t.getAll == "function" && typeof t.getAllKeys == "function" && r > 1 && !n, o, a, u;
  function l(b) {
    a = b.target.result, o && i(o, a, u);
  }
  function h(b) {
    o = b.target.result, a && i(o, a, u);
  }
  function f() {
    if (!o.length)
      return i();
    var b = o[o.length - 1], S;
    if (e && e.upper)
      try {
        S = IDBKeyRange.bound(
          b,
          e.upper,
          !0,
          e.upperOpen
        );
      } catch (C) {
        if (C.name === "DataError" && C.code === 0)
          return i();
      }
    else
      S = IDBKeyRange.lowerBound(b, !0);
    e = S, o = null, a = null, t.getAll(e, r).onsuccess = l, t.getAllKeys(e, r).onsuccess = h;
  }
  function y(b) {
    var S = b.target.result;
    if (!S)
      return i();
    i([S.key], [S.value], S);
  }
  s ? (u = { continue: f }, t.getAll(e, r).onsuccess = l, t.getAllKeys(e, r).onsuccess = h) : n ? t.openCursor(e, "prev").onsuccess = y : t.openCursor(e).onsuccess = y;
}
function xT(t, e, n) {
  if (typeof t.getAll == "function") {
    t.getAll(e).onsuccess = n;
    return;
  }
  var r = [];
  function i(s) {
    var o = s.target.result;
    o ? (r.push(o.value), o.continue()) : n({
      target: {
        result: r
      }
    });
  }
  t.openCursor(e).onsuccess = i;
}
function LT(t, e, n) {
  var r = new Array(t.length), i = 0;
  t.forEach(function(s, o) {
    e.get(s).onsuccess = function(a) {
      a.target.result ? r[o] = a.target.result : r[o] = { key: s, error: "not_found" }, i++, i === t.length && n(t, r, {});
    };
  });
}
function MT(t, e, n, r, i) {
  try {
    if (t && e)
      return i ? IDBKeyRange.bound(e, t, !n, !1) : IDBKeyRange.bound(t, e, !1, !n);
    if (t)
      return i ? IDBKeyRange.upperBound(t) : IDBKeyRange.lowerBound(t);
    if (e)
      return i ? IDBKeyRange.lowerBound(e, !n) : IDBKeyRange.upperBound(e, !n);
    if (r)
      return IDBKeyRange.only(r);
  } catch (s) {
    return { error: s };
  }
  return null;
}
function VT(t, e, n) {
  var r = "startkey" in t ? t.startkey : !1, i = "endkey" in t ? t.endkey : !1, s = "key" in t ? t.key : !1, o = "keys" in t ? t.keys : !1, a = t.skip || 0, u = typeof t.limit == "number" ? t.limit : -1, l = t.inclusive_end !== !1, h, f;
  if (!o && (h = MT(r, i, l, s, t.descending), f = h && h.error, f && !(f.name === "DataError" && f.code === 0)))
    return n(le(
      ll,
      f.name,
      f.message
    ));
  var y = [We, ot, St];
  t.attachments && y.push(Ut);
  var b = Jt(e, y, "readonly");
  if (b.error)
    return n(b.error);
  var S = b.txn;
  S.oncomplete = N, S.onabort = sn(n);
  var C = S.objectStore(We), m = S.objectStore(ot), v = S.objectStore(St), E = m.index("_doc_id_rev"), p = [], g, w;
  v.get(St).onsuccess = function(k) {
    g = k.target.result.docCount;
  }, t.update_seq && (m.openKeyCursor(null, "prev").onsuccess = (k) => {
    var Y = k.target.result;
    Y && Y.key && (w = Y.key);
  });
  function I(k, Y, oe) {
    var ue = k.id + "::" + oe;
    E.get(ue).onsuccess = function(x) {
      if (Y.doc = zo(x.target.result) || {}, t.conflicts) {
        var L = wl(k);
        L.length && (Y.doc._conflicts = L);
      }
      Ag(Y.doc, t, S);
    };
  }
  function R(k, Y) {
    var oe = {
      id: Y.id,
      key: Y.id,
      value: {
        rev: k
      }
    }, ue = Y.deleted;
    ue ? o && (p.push(oe), oe.value.deleted = !0, oe.doc = null) : a-- <= 0 && (p.push(oe), t.include_docs && I(Y, oe, k));
  }
  function T(k) {
    for (var Y = 0, oe = k.length; Y < oe && p.length !== u; Y++) {
      var ue = k[Y];
      if (ue.error && o) {
        p.push(ue);
        continue;
      }
      var ae = pr(ue), x = ae.winningRev;
      R(x, ae);
    }
  }
  function A(k, Y, oe) {
    oe && (T(Y), p.length < u && oe.continue());
  }
  function O(k) {
    var Y = k.target.result;
    t.descending && (Y = Y.reverse()), T(Y);
  }
  function D() {
    var k = {
      total_rows: g,
      offset: t.skip,
      rows: p
    };
    t.update_seq && w !== void 0 && (k.update_seq = w), n(null, k);
  }
  function N() {
    t.attachments ? pu(p, t.binary).then(D) : D();
  }
  if (!(f || u === 0)) {
    if (o)
      return LT(o, C, A);
    if (u === -1)
      return xT(C, h, O);
    Cg(C, h, t.descending, u + a, A);
  }
}
function FT(t, e) {
  var n = t.objectStore(We).index("deletedOrLocal");
  n.count(IDBKeyRange.only("0")).onsuccess = function(r) {
    e(r.target.result);
  };
}
var mu = !1, gu = [];
function UT(t, e, n, r) {
  try {
    t(e, n);
  } catch (i) {
    r.emit("error", i);
  }
}
function Qh() {
  mu || !gu.length || (mu = !0, gu.shift()());
}
function jT(t, e, n) {
  gu.push(function() {
    t(function(s, o) {
      UT(e, s, o, n), mu = !1, hn(function() {
        Qh();
      });
    });
  }), Qh();
}
function $T(t, e, n, r) {
  if (t = Xe(t), t.continuous) {
    var i = n + ":" + Ta();
    return is.addListener(n, i, e, t), is.notify(n), {
      cancel: function() {
        is.removeListener(n, i);
      }
    };
  }
  var s = t.doc_ids && new Set(t.doc_ids);
  t.since = t.since || 0;
  var o = t.since, a = "limit" in t ? t.limit : -1;
  a === 0 && (a = 1);
  var u = [], l = 0, h = fl(t), f = /* @__PURE__ */ new Map(), y, b, S, C;
  function m(T, A, O) {
    if (!O || !T.length)
      return;
    var D = new Array(T.length), N = new Array(T.length);
    function k(ue, ae) {
      var x = t.processChange(ae, ue, t);
      o = x.seq = ue.seq;
      var L = h(x);
      return typeof L == "object" ? Promise.reject(L) : L ? (l++, t.return_docs && u.push(x), t.attachments && t.include_docs ? new Promise(function($) {
        Ag(ae, t, y, function() {
          pu([x], t.binary).then(function() {
            $(x);
          });
        });
      }) : Promise.resolve(x)) : Promise.resolve();
    }
    function Y() {
      for (var ue = [], ae = 0, x = D.length; ae < x && l !== a; ae++) {
        var L = D[ae];
        if (L) {
          var $ = N[ae];
          ue.push(k($, L));
        }
      }
      Promise.all(ue).then(function(U) {
        for (var B = 0, H = U.length; B < H; B++)
          U[B] && t.onChange(U[B]);
      }).catch(t.complete), l !== a && O.continue();
    }
    var oe = 0;
    A.forEach(function(ue, ae) {
      var x = zo(ue), L = T[ae];
      E(x, L, function($, U) {
        N[ae] = $, D[ae] = U, ++oe === T.length && Y();
      });
    });
  }
  function v(T, A, O, D) {
    if (O.seq !== A)
      return D();
    if (O.winningRev === T._rev)
      return D(O, T);
    var N = T._id + "::" + O.winningRev, k = C.get(N);
    k.onsuccess = function(Y) {
      D(O, zo(Y.target.result));
    };
  }
  function E(T, A, O) {
    if (s && !s.has(T._id))
      return O();
    var D = f.get(T._id);
    if (D)
      return v(T, A, D, O);
    S.get(T._id).onsuccess = function(N) {
      D = pr(N.target.result), f.set(T._id, D), v(T, A, D, O);
    };
  }
  function p() {
    t.complete(null, {
      results: u,
      last_seq: o
    });
  }
  function g() {
    !t.continuous && t.attachments ? pu(u).then(p) : p();
  }
  var w = [We, ot];
  t.attachments && w.push(Ut);
  var I = Jt(r, w, "readonly");
  if (I.error)
    return t.complete(I.error);
  y = I.txn, y.onabort = sn(t.complete), y.oncomplete = g, b = y.objectStore(ot), S = y.objectStore(We), C = b.index("_doc_id_rev");
  var R = t.since && !t.descending ? IDBKeyRange.lowerBound(t.since, !0) : null;
  Cg(b, R, t.descending, a, m);
}
var Wr = /* @__PURE__ */ new Map(), Ic, Sc = /* @__PURE__ */ new Map();
function Pg(t, e) {
  var n = this;
  jT(function(r) {
    BT(n, t, r);
  }, e, n.constructor);
}
function BT(t, e, n) {
  var r = e.name, i = null, s = null;
  t._meta = null;
  function o(m) {
    return function(v, E) {
      v && v instanceof Error && !v.reason && s && (v.reason = s), m(v, E);
    };
  }
  function a(m) {
    var v = m.createObjectStore(We, { keyPath: "id" });
    m.createObjectStore(ot, { autoIncrement: !0 }).createIndex("_doc_id_rev", "_doc_id_rev", { unique: !0 }), m.createObjectStore(Ut, { keyPath: "digest" }), m.createObjectStore(St, { keyPath: "id", autoIncrement: !1 }), m.createObjectStore(Tc), v.createIndex("deletedOrLocal", "deletedOrLocal", { unique: !1 }), m.createObjectStore(tn, { keyPath: "_id" });
    var E = m.createObjectStore(
      dr,
      { autoIncrement: !0 }
    );
    E.createIndex("seq", "seq"), E.createIndex("digestSeq", "digestSeq", { unique: !0 });
  }
  function u(m, v) {
    var E = m.objectStore(We);
    E.createIndex("deletedOrLocal", "deletedOrLocal", { unique: !1 }), E.openCursor().onsuccess = function(p) {
      var g = p.target.result;
      if (g) {
        var w = g.value, I = bn(w);
        w.deletedOrLocal = I ? "1" : "0", E.put(w), g.continue();
      } else
        v();
    };
  }
  function l(m) {
    m.createObjectStore(tn, { keyPath: "_id" }).createIndex("_doc_id_rev", "_doc_id_rev", { unique: !0 });
  }
  function h(m, v) {
    var E = m.objectStore(tn), p = m.objectStore(We), g = m.objectStore(ot), w = p.openCursor();
    w.onsuccess = function(I) {
      var R = I.target.result;
      if (R) {
        var T = R.value, A = T.id, O = vr(A), D = Tr(T);
        if (O) {
          var N = A + "::" + D, k = A + "::", Y = A + "::~", oe = g.index("_doc_id_rev"), ue = IDBKeyRange.bound(k, Y, !1, !1), ae = oe.openCursor(ue);
          ae.onsuccess = function(x) {
            if (ae = x.target.result, !ae)
              p.delete(R.primaryKey), R.continue();
            else {
              var L = ae.value;
              L._doc_id_rev === N && E.put(L), g.delete(ae.primaryKey), ae.continue();
            }
          };
        } else
          R.continue();
      } else v && v();
    };
  }
  function f(m) {
    var v = m.createObjectStore(
      dr,
      { autoIncrement: !0 }
    );
    v.createIndex("seq", "seq"), v.createIndex("digestSeq", "digestSeq", { unique: !0 });
  }
  function y(m, v) {
    var E = m.objectStore(ot), p = m.objectStore(Ut), g = m.objectStore(dr), w = p.count();
    w.onsuccess = function(I) {
      var R = I.target.result;
      if (!R)
        return v();
      E.openCursor().onsuccess = function(T) {
        var A = T.target.result;
        if (!A)
          return v();
        for (var O = A.value, D = A.primaryKey, N = Object.keys(O._attachments || {}), k = {}, Y = 0; Y < N.length; Y++) {
          var oe = O._attachments[N[Y]];
          k[oe.digest] = !0;
        }
        var ue = Object.keys(k);
        for (Y = 0; Y < ue.length; Y++) {
          var ae = ue[Y];
          g.put({
            seq: D,
            digestSeq: ae + "::" + D
          });
        }
        A.continue();
      };
    };
  }
  function b(m) {
    function v(w) {
      return w.data ? pr(w) : (w.deleted = w.deletedOrLocal === "1", w);
    }
    var E = m.objectStore(ot), p = m.objectStore(We), g = p.openCursor();
    g.onsuccess = function(w) {
      var I = w.target.result;
      if (!I)
        return;
      var R = v(I.value);
      R.winningRev = R.winningRev || Tr(R);
      function T() {
        var O = R.id + "::", D = R.id + "::￿", N = E.index("_doc_id_rev").openCursor(
          IDBKeyRange.bound(O, D)
        ), k = 0;
        N.onsuccess = function(Y) {
          var oe = Y.target.result;
          if (!oe)
            return R.seq = k, A();
          var ue = oe.primaryKey;
          ue > k && (k = ue), oe.continue();
        };
      }
      function A() {
        var O = du(
          R,
          R.winningRev,
          R.deleted
        ), D = p.put(O);
        D.onsuccess = function() {
          I.continue();
        };
      }
      if (R.seq)
        return A();
      T();
    };
  }
  t._remote = !1, t.type = function() {
    return "idb";
  }, t._id = tg(function(m) {
    m(null, t._meta.instanceId);
  }), t._bulkDocs = function(v, E, p) {
    NT(e, v, E, t, i, o(p));
  }, t._get = function(v, E, p) {
    var g, w, I, R = E.ctx;
    if (!R) {
      var T = Jt(
        i,
        [We, ot, Ut],
        "readonly"
      );
      if (T.error)
        return p(T.error);
      R = T.txn;
    }
    function A() {
      p(I, { doc: g, metadata: w, ctx: R });
    }
    R.objectStore(We).get(v).onsuccess = function(O) {
      if (w = pr(O.target.result), !w)
        return I = le(Ft, "missing"), A();
      var D;
      if (E.rev)
        D = E.latest ? _b(E.rev, w) : E.rev;
      else {
        D = w.winningRev;
        var N = bn(w);
        if (N)
          return I = le(Ft, "deleted"), A();
      }
      var k = R.objectStore(ot), Y = w.id + "::" + D;
      k.index("_doc_id_rev").get(Y).onsuccess = function(oe) {
        if (g = oe.target.result, g && (g = zo(g)), !g)
          return I = le(Ft, "missing"), A();
        A();
      };
    };
  }, t._getAttachment = function(m, v, E, p, g) {
    var w;
    if (p.ctx)
      w = p.ctx;
    else {
      var I = Jt(
        i,
        [We, ot, Ut],
        "readonly"
      );
      if (I.error)
        return g(I.error);
      w = I.txn;
    }
    var R = E.digest, T = E.content_type;
    w.objectStore(Ut).get(R).onsuccess = function(A) {
      var O = A.target.result.body;
      Sg(O, T, p.binary, function(D) {
        g(null, D);
      });
    };
  }, t._info = function(v) {
    var E, p, g = Jt(i, [St, ot], "readonly");
    if (g.error)
      return v(g.error);
    var w = g.txn;
    w.objectStore(St).get(St).onsuccess = function(I) {
      p = I.target.result.docCount;
    }, w.objectStore(ot).openKeyCursor(null, "prev").onsuccess = function(I) {
      var R = I.target.result;
      E = R ? R.key : 0;
    }, w.oncomplete = function() {
      v(null, {
        doc_count: p,
        update_seq: E,
        // for debugging
        idb_attachment_format: t._meta.blobSupport ? "binary" : "base64"
      });
    };
  }, t._allDocs = function(v, E) {
    VT(v, i, o(E));
  }, t._changes = function(v) {
    return $T(v, t, r, i);
  }, t._close = function(m) {
    i.close(), Wr.delete(r), m();
  }, t._getRevisionTree = function(m, v) {
    var E = Jt(i, [We], "readonly");
    if (E.error)
      return v(E.error);
    var p = E.txn, g = p.objectStore(We).get(m);
    g.onsuccess = function(w) {
      var I = pr(w.target.result);
      I ? v(null, I.rev_tree) : v(le(Ft));
    };
  }, t._doCompaction = function(m, v, E) {
    var p = [
      We,
      ot,
      Ut,
      dr
    ], g = Jt(i, p, "readwrite");
    if (g.error)
      return E(g.error);
    var w = g.txn, I = w.objectStore(We);
    I.get(m).onsuccess = function(R) {
      var T = pr(R.target.result);
      Ir(T.rev_tree, function(D, N, k, Y, oe) {
        var ue = N + "-" + k;
        v.indexOf(ue) !== -1 && (oe.status = "missing");
      }), Rg(v, m, w);
      var A = T.winningRev, O = T.deleted;
      w.objectStore(We).put(
        du(T, A, O)
      );
    }, w.onabort = sn(E), w.oncomplete = function() {
      E();
    };
  }, t._getLocal = function(m, v) {
    var E = Jt(i, [tn], "readonly");
    if (E.error)
      return v(E.error);
    var p = E.txn, g = p.objectStore(tn).get(m);
    g.onerror = sn(v), g.onsuccess = function(w) {
      var I = w.target.result;
      I ? (delete I._doc_id_rev, v(null, I)) : v(le(Ft));
    };
  }, t._putLocal = function(m, v, E) {
    typeof v == "function" && (E = v, v = {}), delete m._revisions;
    var p = m._rev, g = m._id;
    p ? m._rev = "0-" + (parseInt(p.split("-")[1], 10) + 1) : m._rev = "0-1";
    var w = v.ctx, I;
    if (!w) {
      var R = Jt(i, [tn], "readwrite");
      if (R.error)
        return E(R.error);
      w = R.txn, w.onerror = sn(E), w.oncomplete = function() {
        I && E(null, I);
      };
    }
    var T = w.objectStore(tn), A;
    p ? (A = T.get(g), A.onsuccess = function(O) {
      var D = O.target.result;
      if (!D || D._rev !== p)
        E(le(ci));
      else {
        var N = T.put(m);
        N.onsuccess = function() {
          I = { ok: !0, id: m._id, rev: m._rev }, v.ctx && E(null, I);
        };
      }
    }) : (A = T.add(m), A.onerror = function(O) {
      E(le(ci)), O.preventDefault(), O.stopPropagation();
    }, A.onsuccess = function() {
      I = { ok: !0, id: m._id, rev: m._rev }, v.ctx && E(null, I);
    });
  }, t._removeLocal = function(m, v, E) {
    typeof v == "function" && (E = v, v = {});
    var p = v.ctx;
    if (!p) {
      var g = Jt(i, [tn], "readwrite");
      if (g.error)
        return E(g.error);
      p = g.txn, p.oncomplete = function() {
        w && E(null, w);
      };
    }
    var w, I = m._id, R = p.objectStore(tn), T = R.get(I);
    T.onerror = sn(E), T.onsuccess = function(A) {
      var O = A.target.result;
      !O || O._rev !== m._rev ? E(le(Ft)) : (R.delete(I), w = { ok: !0, id: I, rev: "0-0" }, v.ctx && E(null, w));
    };
  }, t._destroy = function(m, v) {
    is.removeAllListeners(r);
    var E = Sc.get(r);
    E && E.result && (E.result.close(), Wr.delete(r));
    var p = indexedDB.deleteDatabase(r);
    p.onsuccess = function() {
      Sc.delete(r), $o() && r in localStorage && delete localStorage[r], v(null, { ok: !0 });
    }, p.onerror = sn(v);
  };
  var S = Wr.get(r);
  if (S)
    return i = S.idb, t._meta = S.global, hn(function() {
      n(null, t);
    });
  var C = indexedDB.open(r, kT);
  Sc.set(r, C), C.onupgradeneeded = function(m) {
    var v = m.target.result;
    if (m.oldVersion < 1)
      return a(v);
    var E = m.currentTarget.transaction;
    m.oldVersion < 3 && l(v), m.oldVersion < 4 && f(v);
    var p = [
      u,
      // v1 -> v2
      h,
      // v2 -> v3
      y,
      // v3 -> v4
      b
      // v4 -> v5
    ], g = m.oldVersion;
    function w() {
      var I = p[g - 1];
      g++, I && I(E, w);
    }
    w();
  }, C.onsuccess = function(m) {
    i = m.target.result, i.onversionchange = function() {
      i.close(), Wr.delete(r);
    }, i.onabort = function(A) {
      qt("error", "Database has a global failure", A.target.error), s = A.target.error, i.close(), Wr.delete(r);
    };
    var v = i.transaction([
      St,
      Tc,
      We
    ], "readwrite"), E = !1, p, g, w, I;
    function R() {
      typeof w > "u" || !E || (t._meta = {
        name: r,
        instanceId: I,
        blobSupport: w
      }, Wr.set(r, {
        idb: i,
        global: t._meta
      }), n(null, t));
    }
    function T() {
      if (!(typeof g > "u" || typeof p > "u")) {
        var A = r + "_id";
        A in p ? I = p[A] : p[A] = I = Ta(), p.docCount = g, v.objectStore(St).put(p);
      }
    }
    v.objectStore(St).get(St).onsuccess = function(A) {
      p = A.target.result || { id: St }, T();
    }, FT(v, function(A) {
      g = A, T();
    }), Ic || (Ic = vT(v, Tc, "key")), Ic.then(function(A) {
      w = A, R();
    }), v.oncomplete = function() {
      E = !0, R();
    }, v.onabort = sn(n);
  }, C.onerror = function(m) {
    var v = m.target.error && m.target.error.message;
    v ? v.indexOf("stored database is a higher version") !== -1 && (v = new Error('This DB was created with the newer "indexeddb" adapter, but you are trying to open it with the older "idb" adapter')) : v = "Failed to open indexedDB, are you in private browsing mode?", qt("error", v), n(le(ll, v));
  };
}
Pg.valid = function() {
  try {
    return typeof indexedDB < "u" && typeof IDBKeyRange < "u";
  } catch {
    return !1;
  }
};
function qT(t) {
  t.adapter("idb", Pg, !0);
}
function zT(t, e) {
  return new Promise(function(n, r) {
    var i = 0, s = 0, o = 0, a = t.length, u;
    function l() {
      i++, t[s++]().then(f, y);
    }
    function h() {
      ++o === a ? u ? r(u) : n() : b();
    }
    function f() {
      i--, h();
    }
    function y(S) {
      i--, u = u || S, h();
    }
    function b() {
      for (; i < e && s < a; )
        l();
    }
    b();
  });
}
const KT = 25, HT = 50, fo = 5e3, GT = 1e4, Ac = {};
function Rc(t) {
  const e = t.doc || t.ok, n = e && e._attachments;
  n && Object.keys(n).forEach(function(r) {
    const i = n[r];
    i.data = gl(i.data, i.content_type);
  });
}
function cr(t) {
  return /^_design/.test(t) ? "_design/" + encodeURIComponent(t.slice(8)) : t.startsWith("_local/") ? "_local/" + encodeURIComponent(t.slice(7)) : encodeURIComponent(t);
}
function Yh(t) {
  return !t._attachments || !Object.keys(t._attachments) ? Promise.resolve() : Promise.all(Object.keys(t._attachments).map(function(e) {
    const n = t._attachments[e];
    if (n.data && typeof n.data != "string")
      return new Promise(function(r) {
        yl(n.data, r);
      }).then(function(r) {
        n.data = r;
      });
  }));
}
function WT(t) {
  if (!t.prefix)
    return !1;
  const e = og(t.prefix).protocol;
  return e === "http" || e === "https";
}
function QT(t, e) {
  if (WT(e)) {
    const i = e.name.substr(e.prefix.length);
    t = e.prefix.replace(/\/?$/, "/") + encodeURIComponent(i);
  }
  const n = og(t);
  (n.user || n.password) && (n.auth = { username: n.user, password: n.password });
  const r = n.path.replace(/(^\/|\/$)/g, "").split("/");
  return n.db = r.pop(), n.db.indexOf("%") === -1 && (n.db = encodeURIComponent(n.db)), n.path = r.join("/"), n;
}
function Je(t, e) {
  return Po(t, t.db + "/" + e);
}
function Po(t, e) {
  const n = t.path ? "/" : "";
  return t.protocol + "://" + t.host + (t.port ? ":" + t.port : "") + "/" + t.path + n + e;
}
function ho(t) {
  const e = Object.keys(t);
  return e.length === 0 ? "" : "?" + e.map((n) => n + "=" + encodeURIComponent(t[n])).join("&");
}
function YT(t) {
  const e = typeof navigator < "u" && navigator.userAgent ? navigator.userAgent.toLowerCase() : "", n = e.indexOf("msie") !== -1, r = e.indexOf("trident") !== -1, i = e.indexOf("edge") !== -1, s = !("method" in t) || t.method === "GET";
  return (n || r || i) && s;
}
function yu(t, e) {
  const n = this, r = QT(t.name, t), i = Je(r, "");
  t = Xe(t);
  const s = async function(f, y) {
    if (y = y || {}, y.headers = y.headers || new ni(), y.credentials = "include", t.auth || r.auth) {
      const C = t.auth || r.auth, m = C.username + ":" + C.password, v = Ds(unescape(encodeURIComponent(m)));
      y.headers.set("Authorization", "Basic " + v);
    }
    const b = t.headers || {};
    return Object.keys(b).forEach(function(C) {
      y.headers.append(C, b[C]);
    }), YT(y) && (f += (f.indexOf("?") === -1 ? "?" : "&") + "_nonce=" + Date.now()), await (t.fetch || yg)(f, y);
  };
  function o(f, y) {
    return ze(f, function(...b) {
      l().then(function() {
        return y.apply(this, b);
      }).catch(function(S) {
        b.pop()(S);
      });
    }).bind(n);
  }
  async function a(f, y) {
    const b = {};
    y = y || {}, y.headers = y.headers || new ni(), y.headers.get("Content-Type") || y.headers.set("Content-Type", "application/json"), y.headers.get("Accept") || y.headers.set("Accept", "application/json");
    const S = await s(f, y);
    b.ok = S.ok, b.status = S.status;
    const C = await S.json();
    if (b.data = C, !b.ok)
      throw b.data.status = b.status, ui(b.data);
    return Array.isArray(b.data) && (b.data = b.data.map(function(m) {
      return m.error || m.missing ? ui(m) : m;
    })), b;
  }
  let u;
  async function l() {
    return t.skip_setup ? Promise.resolve() : u || (u = a(i).catch(function(f) {
      return f && f.status && f.status === 404 ? (au(404, "PouchDB is just detecting if the remote exists."), a(i, { method: "PUT" })) : Promise.reject(f);
    }).catch(function(f) {
      return f && f.status && f.status === 412 ? !0 : Promise.reject(f);
    }), u.catch(function() {
      u = null;
    }), u);
  }
  hn(function() {
    e(null, n);
  }), n._remote = !0, n.type = function() {
    return "http";
  }, n.id = o("id", async function(f) {
    let y;
    try {
      y = await (await s(Po(r, ""))).json();
    } catch {
      y = {};
    }
    const b = y && y.uuid ? y.uuid + r.db : Je(r, "");
    f(null, b);
  }), n.compact = o("compact", async function(f, y) {
    typeof f == "function" && (y = f, f = {}), f = Xe(f), await a(Je(r, "_compact"), { method: "POST" });
    function b() {
      n.info(function(S, C) {
        C && !C.compact_running ? y(null, { ok: !0 }) : setTimeout(b, f.interval || 200);
      });
    }
    b();
  }), n.bulkGet = ze("bulkGet", function(f, y) {
    const b = this;
    async function S(E) {
      const p = {};
      f.revs && (p.revs = !0), f.attachments && (p.attachments = !0), f.latest && (p.latest = !0);
      try {
        const g = await a(Je(r, "_bulk_get" + ho(p)), {
          method: "POST",
          body: JSON.stringify({ docs: f.docs })
        });
        f.attachments && f.binary && g.data.results.forEach(function(w) {
          w.docs.forEach(Rc);
        }), E(null, g.data);
      } catch (g) {
        E(g);
      }
    }
    function C() {
      const E = HT, p = Math.ceil(f.docs.length / E);
      let g = 0;
      const w = new Array(p);
      function I(R) {
        return function(T, A) {
          w[R] = A.results, ++g === p && y(null, { results: w.flat() });
        };
      }
      for (let R = 0; R < p; R++) {
        const T = Os(f, ["revs", "attachments", "binary", "latest"]);
        T.docs = f.docs.slice(
          R * E,
          Math.min(f.docs.length, (R + 1) * E)
        ), ng(b, T, I(R));
      }
    }
    const m = Po(r, ""), v = Ac[m];
    typeof v != "boolean" ? S(function(E, p) {
      E ? (Ac[m] = !1, au(
        E.status,
        "PouchDB is just detecting if the remote supports the _bulk_get API."
      ), C()) : (Ac[m] = !0, y(null, p));
    }) : v ? S(y) : C();
  }), n._info = async function(f) {
    try {
      await l();
      const b = await (await s(Je(r, ""))).json();
      b.host = Je(r, ""), f(null, b);
    } catch (y) {
      f(y);
    }
  }, n.fetch = async function(f, y) {
    await l();
    const b = f.substring(0, 1) === "/" ? Po(r, f.substring(1)) : Je(r, f);
    return s(b, y);
  }, n.get = o("get", async function(f, y, b) {
    typeof y == "function" && (b = y, y = {}), y = Xe(y);
    const S = {};
    y.revs && (S.revs = !0), y.revs_info && (S.revs_info = !0), y.latest && (S.latest = !0), y.open_revs && (y.open_revs !== "all" && (y.open_revs = JSON.stringify(y.open_revs)), S.open_revs = y.open_revs), y.rev && (S.rev = y.rev), y.conflicts && (S.conflicts = y.conflicts), y.update_seq && (S.update_seq = y.update_seq), f = cr(f);
    function C(E) {
      const p = E._attachments, g = p && Object.keys(p);
      if (!p || !g.length)
        return;
      async function w(R) {
        const T = p[R], A = cr(E._id) + "/" + h(R) + "?rev=" + E._rev, O = await s(Je(r, A));
        let D;
        "buffer" in O ? D = await O.buffer() : D = await O.blob();
        let N;
        if (y.binary) {
          const k = Object.getOwnPropertyDescriptor(D.__proto__, "type");
          (!k || k.set) && (D.type = T.content_type), N = D;
        } else
          N = await new Promise(function(k) {
            yl(D, k);
          });
        delete T.stub, delete T.length, T.data = N;
      }
      const I = g.map(function(R) {
        return function() {
          return w(R);
        };
      });
      return zT(I, 5);
    }
    function m(E) {
      return Array.isArray(E) ? Promise.all(E.map(function(p) {
        if (p.ok)
          return C(p.ok);
      })) : C(E);
    }
    const v = Je(r, f + ho(S));
    try {
      const E = await a(v);
      y.attachments && await m(E.data), b(null, E.data);
    } catch (E) {
      E.docId = f, b(E);
    }
  }), n.remove = o("remove", async function(f, y, b, S) {
    let C;
    typeof y == "string" ? (C = {
      _id: f,
      _rev: y
    }, typeof b == "function" && (S = b, b = {})) : (C = f, typeof y == "function" ? (S = y, b = {}) : (S = b, b = y));
    const m = C._rev || b.rev, v = Je(r, cr(C._id)) + "?rev=" + m;
    try {
      const E = await a(v, { method: "DELETE" });
      S(null, E.data);
    } catch (E) {
      S(E);
    }
  });
  function h(f) {
    return f.split("/").map(encodeURIComponent).join("/");
  }
  n.getAttachment = o("getAttachment", async function(f, y, b, S) {
    typeof b == "function" && (S = b, b = {});
    const C = b.rev ? "?rev=" + b.rev : "", m = Je(r, cr(f)) + "/" + h(y) + C;
    let v;
    try {
      const E = await s(m, { method: "GET" });
      if (!E.ok)
        throw E;
      v = E.headers.get("content-type");
      let p;
      if (typeof process < "u" && !process.browser && typeof E.buffer == "function" ? p = await E.buffer() : p = await E.blob(), typeof process < "u" && !process.browser) {
        const g = Object.getOwnPropertyDescriptor(p.__proto__, "type");
        (!g || g.set) && (p.type = v);
      }
      S(null, p);
    } catch (E) {
      S(E);
    }
  }), n.removeAttachment = o("removeAttachment", async function(f, y, b, S) {
    const C = Je(r, cr(f) + "/" + h(y)) + "?rev=" + b;
    try {
      const m = await a(C, { method: "DELETE" });
      S(null, m.data);
    } catch (m) {
      S(m);
    }
  }), n.putAttachment = o("putAttachment", async function(f, y, b, S, C, m) {
    typeof C == "function" && (m = C, C = S, S = b, b = null);
    const v = cr(f) + "/" + h(y);
    let E = Je(r, v);
    if (b && (E += "?rev=" + b), typeof S == "string") {
      let p;
      try {
        p = dl(S);
      } catch {
        return m(le(
          ig,
          "Attachment is not a valid base64 string"
        ));
      }
      S = p ? ml(p, C) : "";
    }
    try {
      const p = await a(E, {
        headers: new ni({ "Content-Type": C }),
        method: "PUT",
        body: S
      });
      m(null, p.data);
    } catch (p) {
      m(p);
    }
  }), n._bulkDocs = async function(f, y, b) {
    f.new_edits = y.new_edits;
    try {
      await l(), await Promise.all(f.docs.map(Yh));
      const S = await a(Je(r, "_bulk_docs"), {
        method: "POST",
        body: JSON.stringify(f)
      });
      b(null, S.data);
    } catch (S) {
      b(S);
    }
  }, n._put = async function(f, y, b) {
    try {
      await l(), await Yh(f);
      const S = await a(Je(r, cr(f._id)), {
        method: "PUT",
        body: JSON.stringify(f)
      });
      b(null, S.data);
    } catch (S) {
      S.docId = f && f._id, b(S);
    }
  }, n.allDocs = o("allDocs", async function(f, y) {
    typeof f == "function" && (y = f, f = {}), f = Xe(f);
    const b = {};
    let S, C = "GET";
    f.conflicts && (b.conflicts = !0), f.update_seq && (b.update_seq = !0), f.descending && (b.descending = !0), f.include_docs && (b.include_docs = !0), f.attachments && (b.attachments = !0), f.key && (b.key = JSON.stringify(f.key)), f.start_key && (f.startkey = f.start_key), f.startkey && (b.startkey = JSON.stringify(f.startkey)), f.end_key && (f.endkey = f.end_key), f.endkey && (b.endkey = JSON.stringify(f.endkey)), typeof f.inclusive_end < "u" && (b.inclusive_end = !!f.inclusive_end), typeof f.limit < "u" && (b.limit = f.limit), typeof f.skip < "u" && (b.skip = f.skip);
    const m = ho(b);
    typeof f.keys < "u" && (C = "POST", S = { keys: f.keys });
    try {
      const v = await a(Je(r, "_all_docs" + m), {
        method: C,
        body: JSON.stringify(S)
      });
      f.include_docs && f.attachments && f.binary && v.data.rows.forEach(Rc), y(null, v.data);
    } catch (v) {
      y(v);
    }
  }), n._changes = function(f) {
    const y = "batch_size" in f ? f.batch_size : KT;
    f = Xe(f), f.continuous && !("heartbeat" in f) && (f.heartbeat = GT);
    let b = "timeout" in f ? f.timeout : 30 * 1e3;
    "timeout" in f && f.timeout && b - f.timeout < fo && (b = f.timeout + fo), "heartbeat" in f && f.heartbeat && b - f.heartbeat < fo && (b = f.heartbeat + fo);
    const S = {};
    "timeout" in f && f.timeout && (S.timeout = f.timeout);
    const C = typeof f.limit < "u" ? f.limit : !1;
    let m = C;
    if (f.style && (S.style = f.style), (f.include_docs || f.filter && typeof f.filter == "function") && (S.include_docs = !0), f.attachments && (S.attachments = !0), f.continuous && (S.feed = "longpoll"), f.seq_interval && (S.seq_interval = f.seq_interval), f.conflicts && (S.conflicts = !0), f.descending && (S.descending = !0), f.update_seq && (S.update_seq = !0), "heartbeat" in f && f.heartbeat && (S.heartbeat = f.heartbeat), f.filter && typeof f.filter == "string" && (S.filter = f.filter), f.view && typeof f.view == "string" && (S.filter = "_view", S.view = f.view), f.query_params && typeof f.query_params == "object")
      for (const T in f.query_params)
        Object.prototype.hasOwnProperty.call(f.query_params, T) && (S[T] = f.query_params[T]);
    let v = "GET", E;
    f.doc_ids ? (S.filter = "_doc_ids", v = "POST", E = { doc_ids: f.doc_ids }) : f.selector && (S.filter = "_selector", v = "POST", E = { selector: f.selector });
    const p = new AbortController();
    let g;
    const w = async function(T, A) {
      if (f.aborted)
        return;
      S.since = T, typeof S.since == "object" && (S.since = JSON.stringify(S.since)), f.descending ? C && (S.limit = m) : S.limit = !C || m > y ? y : m;
      const O = Je(r, "_changes" + ho(S)), D = {
        signal: p.signal,
        method: v,
        body: JSON.stringify(E)
      };
      if (g = T, !f.aborted)
        try {
          await l();
          const N = await a(O, D);
          A(null, N.data);
        } catch (N) {
          A(N);
        }
    }, I = { results: [] }, R = function(T, A) {
      if (f.aborted)
        return;
      let O = 0;
      if (A && A.results) {
        O = A.results.length, I.last_seq = A.last_seq;
        let N = null, k = null;
        typeof A.pending == "number" && (N = A.pending), (typeof I.last_seq == "string" || typeof I.last_seq == "number") && (k = I.last_seq), f.query_params, A.results = A.results.filter(function(Y) {
          m--;
          const oe = fl(f)(Y);
          return oe && (f.include_docs && f.attachments && f.binary && Rc(Y), f.return_docs && I.results.push(Y), f.onChange(Y, N, k)), oe;
        });
      } else if (T) {
        f.aborted = !0, f.complete(T);
        return;
      }
      A && A.last_seq && (g = A.last_seq);
      const D = C && m <= 0 || A && O < y || f.descending;
      f.continuous && !(C && m <= 0) || !D ? hn(function() {
        w(g, R);
      }) : f.complete(null, I);
    };
    return w(f.since || 0, R), {
      cancel: function() {
        f.aborted = !0, p.abort();
      }
    };
  }, n.revsDiff = o("revsDiff", async function(f, y, b) {
    typeof y == "function" && (b = y, y = {});
    try {
      const S = await a(Je(r, "_revs_diff"), {
        method: "POST",
        body: JSON.stringify(f)
      });
      b(null, S.data);
    } catch (S) {
      b(S);
    }
  }), n._close = function(f) {
    f();
  }, n._destroy = async function(f, y) {
    try {
      const b = await a(Je(r, ""), { method: "DELETE" });
      y(null, b);
    } catch (b) {
      b.status === 404 ? y(null, { ok: !0 }) : y(b);
    }
  };
}
yu.valid = function() {
  return !0;
};
function JT(t) {
  t.adapter("http", yu, !1), t.adapter("https", yu, !1);
}
class fr extends Error {
  constructor(e) {
    super(), this.status = 400, this.name = "query_parse_error", this.message = e, this.error = !0;
    try {
      Error.captureStackTrace(this, fr);
    } catch {
    }
  }
}
class Ia extends Error {
  constructor(e) {
    super(), this.status = 404, this.name = "not_found", this.message = e, this.error = !0;
    try {
      Error.captureStackTrace(this, Ia);
    } catch {
    }
  }
}
class Sa extends Error {
  constructor(e) {
    super(), this.status = 500, this.name = "invalid_value", this.message = e, this.error = !0;
    try {
      Error.captureStackTrace(this, Sa);
    } catch {
    }
  }
}
function kg(t, e) {
  return e && t.then(function(n) {
    hn(function() {
      e(null, n);
    });
  }, function(n) {
    hn(function() {
      e(n);
    });
  }), t;
}
function XT(t) {
  return function(...e) {
    var n = e.pop(), r = t.apply(this, e);
    return typeof n == "function" && kg(r, n), r;
  };
}
function ZT(t, e) {
  return t.then(function(n) {
    return e().then(function() {
      return n;
    });
  }, function(n) {
    return e().then(function() {
      throw n;
    });
  });
}
function Cc(t, e) {
  return function() {
    var n = arguments, r = this;
    return t.add(function() {
      return e.apply(r, n);
    });
  };
}
function Jh(t) {
  var e = new Set(t), n = new Array(e.size), r = -1;
  return e.forEach(function(i) {
    n[++r] = i;
  }), n;
}
function Pc(t) {
  var e = new Array(t.size), n = -1;
  return t.forEach(function(r, i) {
    e[++n] = i;
  }), e;
}
function Xh(t) {
  var e = "builtin " + t + " function requires map values to be numbers or number arrays";
  return new Sa(e);
}
function vu(t) {
  for (var e = 0, n = 0, r = t.length; n < r; n++) {
    var i = t[n];
    if (typeof i != "number")
      if (Array.isArray(i)) {
        e = typeof e == "number" ? [e] : e;
        for (var s = 0, o = i.length; s < o; s++) {
          var a = i[s];
          if (typeof a != "number")
            throw Xh("_sum");
          typeof e[s] > "u" ? e.push(a) : e[s] += a;
        }
      } else
        throw Xh("_sum");
    else typeof e == "number" ? e += i : e[0] += i;
  }
  return e;
}
var eI = qt.bind(null, "log"), tI = Array.isArray, nI = JSON.parse;
function Og(t, e) {
  return hl(
    "return (" + t.replace(/;\s*$/, "") + ");",
    {
      emit: e,
      sum: vu,
      log: eI,
      isArray: tI,
      toJSON: nI
    }
  );
}
class _u {
  constructor() {
    this.promise = Promise.resolve();
  }
  add(e) {
    return this.promise = this.promise.catch(() => {
    }).then(() => e()), this.promise;
  }
  finish() {
    return this.promise;
  }
}
function Zh(t) {
  if (!t)
    return "undefined";
  switch (typeof t) {
    case "function":
      return t.toString();
    case "string":
      return t.toString();
    default:
      return JSON.stringify(t);
  }
}
function rI(t, e) {
  return Zh(t) + Zh(e) + "undefined";
}
async function ed(t, e, n, r, i, s) {
  const o = rI(n, r);
  let a;
  if (!i && (a = t._cachedViews = t._cachedViews || {}, a[o]))
    return a[o];
  const u = t.info().then(async function(l) {
    const h = l.db_name + "-mrview-" + (i ? "temp" : ug(o));
    function f(m) {
      m.views = m.views || {};
      let v = e;
      v.indexOf("/") === -1 && (v = e + "/" + e);
      const E = m.views[v] = m.views[v] || {};
      if (!E[h])
        return E[h] = !0, m;
    }
    await Bo(t, "_local/" + s, f);
    const b = (await t.registerDependentDatabase(h)).db;
    b.auto_compaction = !0;
    const S = {
      name: h,
      db: b,
      sourceDB: t,
      adapter: t.adapter,
      mapFun: n,
      reduceFun: r
    };
    let C;
    try {
      C = await S.db.get("_local/lastSeq");
    } catch (m) {
      if (m.status !== 404)
        throw m;
    }
    return S.seq = C ? C.seq : 0, a && S.db.once("destroyed", function() {
      delete a[o];
    }), S;
  });
  return a && (a[o] = u), u;
}
const td = {}, nd = new _u(), iI = 50;
function kc(t) {
  return t.indexOf("/") === -1 ? [t, t] : t.split("/");
}
function sI(t) {
  return t.length === 1 && /^1-/.test(t[0].rev);
}
function rd(t, e, n) {
  try {
    t.emit("error", e);
  } catch {
    qt(
      "error",
      `The user's map/reduce function threw an uncaught error.
You can debug this error by doing:
myDatabase.on('error', function (err) { debugger; });
Please double-check your map/reduce function.`
    ), qt("error", e, n);
  }
}
function oI(t, e, n, r) {
  function i(x, L, $) {
    try {
      L($);
    } catch (U) {
      rd(x, U, { fun: L, doc: $ });
    }
  }
  function s(x, L, $, U, B) {
    try {
      return { output: L($, U, B) };
    } catch (H) {
      return rd(x, H, { fun: L, keys: $, values: U, rereduce: B }), { error: H };
    }
  }
  function o(x, L) {
    const $ = He(x.key, L.key);
    return $ !== 0 ? $ : He(x.value, L.value);
  }
  function a(x, L, $) {
    return $ = $ || 0, typeof L == "number" ? x.slice($, L + $) : $ > 0 ? x.slice($) : x;
  }
  function u(x) {
    const L = x.value;
    return L && typeof L == "object" && L._id || x.id;
  }
  function l(x) {
    for (const L of x.rows) {
      const $ = L.doc && L.doc._attachments;
      if ($)
        for (const U of Object.keys($)) {
          const B = $[U];
          $[U].data = gl(B.data, B.content_type);
        }
    }
  }
  function h(x) {
    return function(L) {
      return x.include_docs && x.attachments && x.binary && l(L), L;
    };
  }
  function f(x, L, $, U) {
    let B = L[x];
    typeof B < "u" && (U && (B = encodeURIComponent(JSON.stringify(B))), $.push(x + "=" + B));
  }
  function y(x) {
    if (typeof x < "u") {
      const L = Number(x);
      return !isNaN(L) && L === parseInt(x, 10) ? L : x;
    }
  }
  function b(x) {
    return x.group_level = y(x.group_level), x.limit = y(x.limit), x.skip = y(x.skip), x;
  }
  function S(x) {
    if (x) {
      if (typeof x != "number")
        return new fr(`Invalid value for integer: "${x}"`);
      if (x < 0)
        return new fr(`Invalid value for positive integer: "${x}"`);
    }
  }
  function C(x, L) {
    const $ = x.descending ? "endkey" : "startkey", U = x.descending ? "startkey" : "endkey";
    if (typeof x[$] < "u" && typeof x[U] < "u" && He(x[$], x[U]) > 0)
      throw new fr("No rows can match your key range, reverse your start_key and end_key or set {descending : true}");
    if (L.reduce && x.reduce !== !1) {
      if (x.include_docs)
        throw new fr("{include_docs:true} is invalid for reduce");
      if (x.keys && x.keys.length > 1 && !x.group && !x.group_level)
        throw new fr("Multi-key fetches for reduce views must use {group: true}");
    }
    for (const B of ["group_level", "limit", "skip"]) {
      const H = S(x[B]);
      if (H)
        throw H;
    }
  }
  async function m(x, L, $) {
    let U = [], B, H = "GET", ie;
    if (f("reduce", $, U), f("include_docs", $, U), f("attachments", $, U), f("limit", $, U), f("descending", $, U), f("group", $, U), f("group_level", $, U), f("skip", $, U), f("stale", $, U), f("conflicts", $, U), f("startkey", $, U, !0), f("start_key", $, U, !0), f("endkey", $, U, !0), f("end_key", $, U, !0), f("inclusive_end", $, U), f("key", $, U, !0), f("update_seq", $, U), U = U.join("&"), U = U === "" ? "" : "?" + U, typeof $.keys < "u") {
      const Q = `keys=${encodeURIComponent(JSON.stringify($.keys))}`;
      Q.length + U.length + 1 <= 2e3 ? U += (U[0] === "?" ? "&" : "?") + Q : (H = "POST", typeof L == "string" ? B = { keys: $.keys } : L.keys = $.keys);
    }
    if (typeof L == "string") {
      const j = kc(L), Q = await x.fetch("_design/" + j[0] + "/_view/" + j[1] + U, {
        headers: new ni({ "Content-Type": "application/json" }),
        method: H,
        body: JSON.stringify(B)
      });
      ie = Q.ok;
      const X = await Q.json();
      if (!ie)
        throw X.status = Q.status, ui(X);
      for (const ee of X.rows)
        if (ee.value && ee.value.error && ee.value.error === "builtin_reduce_error")
          throw new Error(ee.reason);
      return new Promise(function(ee) {
        ee(X);
      }).then(h($));
    }
    B = B || {};
    for (const j of Object.keys(L))
      Array.isArray(L[j]) ? B[j] = L[j] : B[j] = L[j].toString();
    const K = await x.fetch("_temp_view" + U, {
      headers: new ni({ "Content-Type": "application/json" }),
      method: "POST",
      body: JSON.stringify(B)
    });
    ie = K.ok;
    const V = await K.json();
    if (!ie)
      throw V.status = K.status, ui(V);
    return new Promise(function(j) {
      j(V);
    }).then(h($));
  }
  function v(x, L, $) {
    return new Promise(function(U, B) {
      x._query(L, $, function(H, ie) {
        if (H)
          return B(H);
        U(ie);
      });
    });
  }
  function E(x) {
    return new Promise(function(L, $) {
      x._viewCleanup(function(U, B) {
        if (U)
          return $(U);
        L(B);
      });
    });
  }
  function p(x) {
    return function(L) {
      if (L.status === 404)
        return x;
      throw L;
    };
  }
  async function g(x, L, $) {
    const U = "_local/doc_" + x, B = { _id: U, keys: [] }, H = $.get(x), ie = H[0], K = H[1];
    function V() {
      return sI(K) ? Promise.resolve(B) : L.db.get(U).catch(p(B));
    }
    function j(ge) {
      return ge.keys.length ? L.db.allDocs({
        keys: ge.keys,
        include_docs: !0
      }) : Promise.resolve({ rows: [] });
    }
    function Q(ge, G) {
      const Te = [], J = /* @__PURE__ */ new Set();
      for (const me of G.rows) {
        const ye = me.doc;
        if (ye && (Te.push(ye), J.add(ye._id), ye._deleted = !ie.has(ye._id), !ye._deleted)) {
          const Ie = ie.get(ye._id);
          "value" in Ie && (ye.value = Ie.value);
        }
      }
      const Be = Pc(ie);
      for (const me of Be)
        if (!J.has(me)) {
          const ye = {
            _id: me
          }, Ie = ie.get(me);
          "value" in Ie && (ye.value = Ie.value), Te.push(ye);
        }
      return ge.keys = Jh(Be.concat(ge.keys)), Te.push(ge), Te;
    }
    const X = await V(), ee = await j(X);
    return Q(X, ee);
  }
  function w(x) {
    return x.sourceDB.get("_local/purges").then(function(L) {
      const $ = L.purgeSeq;
      return x.db.get("_local/purgeSeq").then(function(U) {
        return U._rev;
      }).catch(p(void 0)).then(function(U) {
        return x.db.put({
          _id: "_local/purgeSeq",
          _rev: U,
          purgeSeq: $
        });
      });
    }).catch(function(L) {
      if (L.status !== 404)
        throw L;
    });
  }
  function I(x, L, $) {
    var U = "_local/lastSeq";
    return x.db.get(U).catch(p({ _id: U, seq: 0 })).then(function(B) {
      var H = Pc(L);
      return Promise.all(H.map(function(ie) {
        return g(ie, x, L);
      })).then(function(ie) {
        var K = ie.flat();
        return B.seq = $, K.push(B), x.db.bulkDocs({ docs: K });
      }).then(() => w(x));
    });
  }
  function R(x) {
    const L = typeof x == "string" ? x : x.name;
    let $ = td[L];
    return $ || ($ = td[L] = new _u()), $;
  }
  async function T(x, L) {
    return Cc(R(x), function() {
      return A(x, L);
    })();
  }
  async function A(x, L) {
    let $, U, B;
    function H(me, ye) {
      const Ie = { id: U._id, key: Sr(me) };
      typeof ye < "u" && ye !== null && (Ie.value = Sr(ye)), $.push(Ie);
    }
    const ie = e(x.mapFun, H);
    let K = x.seq || 0;
    function V() {
      return x.sourceDB.info().then(function(me) {
        B = x.sourceDB.activeTasks.add({
          name: "view_indexing",
          total_items: me.update_seq - K
        });
      });
    }
    function j(me, ye) {
      return function() {
        return I(x, me, ye);
      };
    }
    let Q = 0;
    const X = {
      view: x.name,
      indexed_docs: Q
    };
    x.sourceDB.emit("indexing", X);
    const ee = new _u();
    async function ge() {
      const me = await x.sourceDB.changes({
        return_docs: !0,
        conflicts: !0,
        include_docs: !0,
        style: "all_docs",
        since: K,
        limit: L.changes_batch_size
      }), ye = await G();
      return Te(me, ye);
    }
    function G() {
      return x.db.get("_local/purgeSeq").then(function(me) {
        return me.purgeSeq;
      }).catch(p(-1)).then(function(me) {
        return x.sourceDB.get("_local/purges").then(function(ye) {
          const Ie = ye.purges.filter(function(ht, qe) {
            return qe > me;
          }).map((ht) => ht.docId), Rt = Ie.filter(function(ht, qe) {
            return Ie.indexOf(ht) === qe;
          });
          return Promise.all(Rt.map(function(ht) {
            return x.sourceDB.get(ht).then(function(qe) {
              return { docId: ht, doc: qe };
            }).catch(p({ docId: ht }));
          }));
        }).catch(p([]));
      });
    }
    function Te(me, ye) {
      const Ie = me.results;
      if (!Ie.length && !ye.length)
        return;
      for (const qe of ye)
        if (Ie.findIndex(function(vn) {
          return vn.id === qe.docId;
        }) < 0) {
          const vn = {
            _id: qe.docId,
            doc: {
              _id: qe.docId,
              _deleted: 1
            },
            changes: []
          };
          qe.doc && (vn.doc = qe.doc, vn.changes.push({ rev: qe.doc._rev })), Ie.push(vn);
        }
      const Rt = J(Ie);
      ee.add(j(Rt, K)), Q = Q + Ie.length;
      const ht = {
        view: x.name,
        last_seq: me.last_seq,
        results_count: Ie.length,
        indexed_docs: Q
      };
      if (x.sourceDB.emit("indexing", ht), x.sourceDB.activeTasks.update(B, { completed_items: Q }), !(Ie.length < L.changes_batch_size))
        return ge();
    }
    function J(me) {
      const ye = /* @__PURE__ */ new Map();
      for (const Ie of me) {
        if (Ie.doc._id[0] !== "_") {
          $ = [], U = Ie.doc, U._deleted || i(x.sourceDB, ie, U), $.sort(o);
          const Rt = Be($);
          ye.set(Ie.doc._id, [
            Rt,
            Ie.changes
          ]);
        }
        K = Ie.seq;
      }
      return ye;
    }
    function Be(me) {
      const ye = /* @__PURE__ */ new Map();
      let Ie;
      for (let Rt = 0, ht = me.length; Rt < ht; Rt++) {
        const qe = me[Rt], Oi = [qe.key, qe.id];
        Rt > 0 && He(qe.key, Ie) === 0 && Oi.push(Rt), ye.set(Yt(Oi), qe), Ie = qe.key;
      }
      return ye;
    }
    try {
      await V(), await ge(), await ee.finish(), x.seq = K, x.sourceDB.activeTasks.remove(B);
    } catch (me) {
      x.sourceDB.activeTasks.remove(B, me);
    }
  }
  function O(x, L, $) {
    $.group_level === 0 && delete $.group_level;
    const U = $.group || $.group_level, B = n(x.reduceFun), H = [], ie = isNaN($.group_level) ? Number.POSITIVE_INFINITY : $.group_level;
    for (const K of L) {
      const V = H[H.length - 1];
      let j = U ? K.key : null;
      if (U && Array.isArray(j) && (j = j.slice(0, ie)), V && He(V.groupKey, j) === 0) {
        V.keys.push([K.key, K.id]), V.values.push(K.value);
        continue;
      }
      H.push({
        keys: [[K.key, K.id]],
        values: [K.value],
        groupKey: j
      });
    }
    L = [];
    for (const K of H) {
      const V = s(x.sourceDB, B, K.keys, K.values, !1);
      if (V.error && V.error instanceof Sa)
        throw V.error;
      L.push({
        // CouchDB just sets the value to null if a non-built-in errors out
        value: V.error ? null : V.output,
        key: K.groupKey
      });
    }
    return { rows: a(L, $.limit, $.skip) };
  }
  function D(x, L) {
    return Cc(R(x), function() {
      return N(x, L);
    })();
  }
  async function N(x, L) {
    let $;
    const U = x.reduceFun && L.reduce !== !1, B = L.skip || 0;
    typeof L.keys < "u" && !L.keys.length && (L.limit = 0, delete L.keys);
    async function H(K) {
      K.include_docs = !0;
      const V = await x.db.allDocs(K);
      return $ = V.total_rows, V.rows.map(function(j) {
        if ("value" in j.doc && typeof j.doc.value == "object" && j.doc.value !== null) {
          const X = Object.keys(j.doc.value).sort(), ee = ["id", "key", "value"];
          if (!(X < ee || X > ee))
            return j.doc.value;
        }
        const Q = Jb(j.doc._id);
        return {
          key: Q[0],
          id: Q[1],
          value: "value" in j.doc ? j.doc.value : null
        };
      });
    }
    async function ie(K) {
      let V;
      if (U ? V = O(x, K, L) : typeof L.keys > "u" ? V = {
        total_rows: $,
        offset: B,
        rows: K
      } : V = {
        total_rows: $,
        offset: B,
        rows: a(K, L.limit, L.skip)
      }, L.update_seq && (V.update_seq = x.seq), L.include_docs) {
        const j = Jh(K.map(u)), Q = await x.sourceDB.allDocs({
          keys: j,
          include_docs: !0,
          conflicts: L.conflicts,
          attachments: L.attachments,
          binary: L.binary
        }), X = /* @__PURE__ */ new Map();
        for (const ee of Q.rows)
          X.set(ee.id, ee.doc);
        for (const ee of K) {
          const ge = u(ee), G = X.get(ge);
          G && (ee.doc = G);
        }
      }
      return V;
    }
    if (typeof L.keys < "u") {
      const V = L.keys.map(function(X) {
        const ee = {
          startkey: Yt([X]),
          endkey: Yt([X, {}])
        };
        return L.update_seq && (ee.update_seq = !0), H(ee);
      }), Q = (await Promise.all(V)).flat();
      return ie(Q);
    } else {
      const K = {
        descending: L.descending
      };
      L.update_seq && (K.update_seq = !0);
      let V, j;
      if ("start_key" in L && (V = L.start_key), "startkey" in L && (V = L.startkey), "end_key" in L && (j = L.end_key), "endkey" in L && (j = L.endkey), typeof V < "u" && (K.startkey = L.descending ? Yt([V, {}]) : Yt([V])), typeof j < "u") {
        let X = L.inclusive_end !== !1;
        L.descending && (X = !X), K.endkey = Yt(
          X ? [j, {}] : [j]
        );
      }
      if (typeof L.key < "u") {
        const X = Yt([L.key]), ee = Yt([L.key, {}]);
        K.descending ? (K.endkey = X, K.startkey = ee) : (K.startkey = X, K.endkey = ee);
      }
      U || (typeof L.limit == "number" && (K.limit = L.limit), K.skip = B);
      const Q = await H(K);
      return ie(Q);
    }
  }
  async function k(x) {
    return (await x.fetch("_view_cleanup", {
      headers: new ni({ "Content-Type": "application/json" }),
      method: "POST"
    })).json();
  }
  async function Y(x) {
    try {
      const L = await x.get("_local/" + t), $ = /* @__PURE__ */ new Map();
      for (const V of Object.keys(L.views)) {
        const j = kc(V), Q = "_design/" + j[0], X = j[1];
        let ee = $.get(Q);
        ee || (ee = /* @__PURE__ */ new Set(), $.set(Q, ee)), ee.add(X);
      }
      const U = {
        keys: Pc($),
        include_docs: !0
      }, B = await x.allDocs(U), H = {};
      for (const V of B.rows) {
        const j = V.key.substring(8);
        for (const Q of $.get(V.key)) {
          let X = j + "/" + Q;
          L.views[X] || (X = Q);
          const ee = Object.keys(L.views[X]), ge = V.doc && V.doc.views && V.doc.views[Q];
          for (const G of ee)
            H[G] = H[G] || ge;
        }
      }
      const K = Object.keys(H).filter(function(V) {
        return !H[V];
      }).map(function(V) {
        return Cc(R(V), function() {
          return new x.constructor(V, x.__opts).destroy();
        })();
      });
      return Promise.all(K).then(function() {
        return { ok: !0 };
      });
    } catch (L) {
      if (L.status === 404)
        return { ok: !0 };
      throw L;
    }
  }
  async function oe(x, L, $) {
    if (typeof x._query == "function")
      return v(x, L, $);
    if (on(x))
      return m(x, L, $);
    const U = {
      changes_batch_size: x.__opts.view_update_changes_batch_size || iI
    };
    if (typeof L != "string")
      return C($, L), nd.add(async function() {
        const B = await ed(
          /* sourceDB */
          x,
          /* viewName */
          "temp_view/temp_view",
          /* mapFun */
          L.map,
          /* reduceFun */
          L.reduce,
          /* temporary */
          !0,
          /* localDocName */
          t
        );
        return ZT(
          T(B, U).then(
            function() {
              return D(B, $);
            }
          ),
          function() {
            return B.db.destroy();
          }
        );
      }), nd.finish();
    {
      const B = L, H = kc(B), ie = H[0], K = H[1], V = await x.get("_design/" + ie);
      if (L = V.views && V.views[K], !L)
        throw new Ia(`ddoc ${V._id} has no view named ${K}`);
      r(V, K), C($, L);
      const j = await ed(
        /* sourceDB */
        x,
        /* viewName */
        B,
        /* mapFun */
        L.map,
        /* reduceFun */
        L.reduce,
        /* temporary */
        !1,
        /* localDocName */
        t
      );
      return $.stale === "ok" || $.stale === "update_after" ? ($.stale === "update_after" && hn(function() {
        T(j, U);
      }), D(j, $)) : (await T(j, U), D(j, $));
    }
  }
  function ue(x, L, $) {
    const U = this;
    typeof L == "function" && ($ = L, L = {}), L = L ? b(L) : {}, typeof x == "function" && (x = { map: x });
    const B = Promise.resolve().then(function() {
      return oe(U, x, L);
    });
    return kg(B, $), B;
  }
  const ae = XT(function() {
    const x = this;
    return typeof x._viewCleanup == "function" ? E(x) : on(x) ? k(x) : Y(x);
  });
  return {
    query: ue,
    viewCleanup: ae
  };
}
var Oc = {
  _sum: function(t, e) {
    return vu(e);
  },
  _count: function(t, e) {
    return e.length;
  },
  _stats: function(t, e) {
    function n(r) {
      for (var i = 0, s = 0, o = r.length; s < o; s++) {
        var a = r[s];
        i += a * a;
      }
      return i;
    }
    return {
      sum: vu(e),
      min: Math.min.apply(null, e),
      max: Math.max.apply(null, e),
      count: e.length,
      sumsqr: n(e)
    };
  }
};
function aI(t) {
  if (/^_sum/.test(t))
    return Oc._sum;
  if (/^_count/.test(t))
    return Oc._count;
  if (/^_stats/.test(t))
    return Oc._stats;
  if (/^_/.test(t))
    throw new Error(t + " is not a supported reduce function.");
}
function cI(t, e) {
  if (typeof t == "function" && t.length === 2) {
    var n = t;
    return function(r) {
      return n(r, e);
    };
  } else
    return Og(t.toString(), e);
}
function uI(t) {
  var e = t.toString(), n = aI(e);
  return n || Og(e);
}
function lI(t, e) {
  var n = t.views && t.views[e];
  if (typeof n.map != "string")
    throw new Ia("ddoc " + t._id + " has no string view named " + e + ", instead found object of type: " + typeof n.map);
}
var fI = "mrviews", Dg = oI(fI, cI, uI, lI);
function hI(t, e, n) {
  return Dg.query.call(this, t, e, n);
}
function dI(t) {
  return Dg.viewCleanup.call(this, t);
}
var pI = {
  query: hI,
  viewCleanup: dI
};
function mI(t, e, n) {
  return !t._attachments || !t._attachments[n] || t._attachments[n].digest !== e._attachments[n].digest;
}
function id(t, e) {
  var n = Object.keys(e._attachments);
  return Promise.all(n.map(function(r) {
    return t.getAttachment(e._id, r, { rev: e._rev });
  }));
}
function gI(t, e, n) {
  var r = on(e) && !on(t), i = Object.keys(n._attachments);
  return r ? t.get(n._id).then(function(s) {
    return Promise.all(i.map(function(o) {
      return mI(s, n, o) ? e.getAttachment(n._id, o) : t.getAttachment(s._id, o);
    }));
  }).catch(function(s) {
    if (s.status !== 404)
      throw s;
    return id(e, n);
  }) : id(e, n);
}
function yI(t) {
  var e = [];
  return Object.keys(t).forEach(function(n) {
    var r = t[n].missing;
    r.forEach(function(i) {
      e.push({
        id: n,
        rev: i
      });
    });
  }), {
    docs: e,
    revs: !0,
    latest: !0
  };
}
function vI(t, e, n, r) {
  n = Xe(n);
  var i = [], s = !0;
  function o() {
    var u = yI(n);
    if (u.docs.length)
      return t.bulkGet(u).then(function(l) {
        if (r.cancelled)
          throw new Error("cancelled");
        return Promise.all(l.results.map(function(h) {
          return Promise.all(h.docs.map(function(f) {
            var y = f.ok;
            return f.error && (s = !1), !y || !y._attachments ? y : gI(e, t, y).then((b) => {
              var S = Object.keys(y._attachments);
              return b.forEach(function(C, m) {
                var v = y._attachments[S[m]];
                delete v.stub, delete v.length, v.data = C;
              }), y;
            });
          }));
        })).then(function(h) {
          i = i.concat(h.flat().filter(Boolean));
        });
      });
  }
  function a() {
    return { ok: s, docs: i };
  }
  return Promise.resolve().then(o).then(a);
}
var sd = 1, od = "pouchdb", _I = 5, Qt = 0;
function wu(t, e, n, r, i) {
  return t.get(e).catch(function(s) {
    if (s.status === 404)
      return (t.adapter === "http" || t.adapter === "https") && au(
        404,
        "PouchDB is just checking if a remote checkpoint exists."
      ), {
        session_id: r,
        _id: e,
        history: [],
        replicator: od,
        version: sd
      };
    throw s;
  }).then(function(s) {
    if (!i.cancelled && s.last_seq !== n)
      return s.history = (s.history || []).filter(function(o) {
        return o.session_id !== r;
      }), s.history.unshift({
        last_seq: n,
        session_id: r
      }), s.history = s.history.slice(0, _I), s.version = sd, s.replicator = od, s.session_id = r, s.last_seq = n, t.put(s).catch(function(o) {
        if (o.status === 409)
          return wu(t, e, n, r, i);
        throw o;
      });
  });
}
class ad {
  constructor(e, n, r, i, s = {
    writeSourceCheckpoint: !0,
    writeTargetCheckpoint: !0
  }) {
    this.src = e, this.target = n, this.id = r, this.returnValue = i, this.opts = s, typeof s.writeSourceCheckpoint > "u" && (s.writeSourceCheckpoint = !0), typeof s.writeTargetCheckpoint > "u" && (s.writeTargetCheckpoint = !0);
  }
  writeCheckpoint(e, n) {
    var r = this;
    return this.updateTarget(e, n).then(function() {
      return r.updateSource(e, n);
    });
  }
  updateTarget(e, n) {
    return this.opts.writeTargetCheckpoint ? wu(
      this.target,
      this.id,
      e,
      n,
      this.returnValue
    ) : Promise.resolve(!0);
  }
  updateSource(e, n) {
    if (this.opts.writeSourceCheckpoint) {
      var r = this;
      return wu(
        this.src,
        this.id,
        e,
        n,
        this.returnValue
      ).catch(function(i) {
        if (ud(i))
          return r.opts.writeSourceCheckpoint = !1, !0;
        throw i;
      });
    } else
      return Promise.resolve(!0);
  }
  getCheckpoint() {
    var e = this;
    return !e.opts.writeSourceCheckpoint && !e.opts.writeTargetCheckpoint ? Promise.resolve(Qt) : e.opts && e.opts.writeSourceCheckpoint && !e.opts.writeTargetCheckpoint ? e.src.get(e.id).then(function(n) {
      return n.last_seq || Qt;
    }).catch(function(n) {
      if (n.status !== 404)
        throw n;
      return Qt;
    }) : e.target.get(e.id).then(function(n) {
      return e.opts && e.opts.writeTargetCheckpoint && !e.opts.writeSourceCheckpoint ? n.last_seq || Qt : e.src.get(e.id).then(function(r) {
        if (n.version !== r.version)
          return Qt;
        var i;
        return n.version ? i = n.version.toString() : i = "undefined", i in cd ? cd[i](n, r) : Qt;
      }, function(r) {
        if (r.status === 404 && n.last_seq)
          return e.src.put({
            _id: e.id,
            last_seq: Qt
          }).then(function() {
            return Qt;
          }, function(i) {
            return ud(i) ? (e.opts.writeSourceCheckpoint = !1, n.last_seq) : Qt;
          });
        throw r;
      });
    }).catch(function(n) {
      if (n.status !== 404)
        throw n;
      return Qt;
    });
  }
}
var cd = {
  undefined: function(t, e) {
    return He(t.last_seq, e.last_seq) === 0 ? e.last_seq : 0;
  },
  1: function(t, e) {
    return wI(e, t).last_seq;
  }
};
function wI(t, e) {
  return t.session_id === e.session_id ? {
    last_seq: t.last_seq,
    history: t.history
  } : Ng(t.history, e.history);
}
function Ng(t, e) {
  var n = t[0], r = t.slice(1), i = e[0], s = e.slice(1);
  if (!n || e.length === 0)
    return {
      last_seq: Qt,
      history: []
    };
  var o = n.session_id;
  if (Eu(o, e))
    return {
      last_seq: n.last_seq,
      history: t
    };
  var a = i.session_id;
  return Eu(a, r) ? {
    last_seq: i.last_seq,
    history: s
  } : Ng(r, s);
}
function Eu(t, e) {
  var n = e[0], r = e.slice(1);
  return !t || e.length === 0 ? !1 : t === n.session_id ? !0 : Eu(t, r);
}
function ud(t) {
  return typeof t.status == "number" && Math.floor(t.status / 100) === 4;
}
function xg(t, e, n, r, i) {
  return this instanceof ad ? xg : new ad(t, e, n, r, i);
}
var ld = 0;
function EI(t, e, n, r) {
  if (t.retry === !1) {
    e.emit("error", n), e.removeAllListeners();
    return;
  }
  if (typeof t.back_off_function != "function" && (t.back_off_function = zE), e.emit("requestError", n), e.state === "active" || e.state === "pending") {
    e.emit("paused", n), e.state = "stopped";
    var i = function() {
      t.current_back_off = ld;
    }, s = function() {
      e.removeListener("active", i);
    };
    e.once("paused", s), e.once("active", i);
  }
  t.current_back_off = t.current_back_off || ld, t.current_back_off = t.back_off_function(t.current_back_off), setTimeout(r, t.current_back_off);
}
function bI(t) {
  return Object.keys(t).sort(He).reduce(function(e, n) {
    return e[n] = t[n], e;
  }, {});
}
function TI(t, e, n) {
  var r = n.doc_ids ? n.doc_ids.sort(He) : "", i = n.filter ? n.filter.toString() : "", s = "", o = "", a = "";
  return n.selector && (a = JSON.stringify(n.selector)), n.filter && n.query_params && (s = JSON.stringify(bI(n.query_params))), n.filter && n.filter === "_view" && (o = n.view.toString()), Promise.all([t.id(), e.id()]).then(function(u) {
    var l = u[0] + u[1] + i + o + s + r + a;
    return new Promise(function(h) {
      vl(l, h);
    });
  }).then(function(u) {
    return u = u.replace(/\//g, ".").replace(/\+/g, "_"), "_local/" + u;
  });
}
function Lg(t, e, n, r, i) {
  var s = [], o, a = {
    seq: 0,
    changes: [],
    docs: []
  }, u = !1, l = !1, h = !1, f = 0, y = 0, b = n.continuous || n.live || !1, S = n.batch_size || 100, C = n.batches_limit || 10, m = n.style || "all_docs", v = !1, E = n.doc_ids, p = n.selector, g, w, I = [], R = Ta(), T;
  i = i || {
    ok: !0,
    start_time: (/* @__PURE__ */ new Date()).toISOString(),
    docs_read: 0,
    docs_written: 0,
    doc_write_failures: 0,
    errors: []
  };
  var A = {};
  r.ready(t, e);
  function O() {
    return w ? Promise.resolve() : TI(t, e, n).then(function(V) {
      g = V;
      var j = {};
      n.checkpoint === !1 ? j = { writeSourceCheckpoint: !1, writeTargetCheckpoint: !1 } : n.checkpoint === "source" ? j = { writeSourceCheckpoint: !0, writeTargetCheckpoint: !1 } : n.checkpoint === "target" ? j = { writeSourceCheckpoint: !1, writeTargetCheckpoint: !0 } : j = { writeSourceCheckpoint: !0, writeTargetCheckpoint: !0 }, w = new xg(t, e, g, r, j);
    });
  }
  function D() {
    if (I = [], o.docs.length !== 0) {
      var V = o.docs, j = { timeout: n.timeout };
      return e.bulkDocs({ docs: V, new_edits: !1 }, j).then(function(Q) {
        if (r.cancelled)
          throw x(), new Error("cancelled");
        var X = /* @__PURE__ */ Object.create(null);
        Q.forEach(function(ge) {
          ge.error && (X[ge.id] = ge);
        });
        var ee = Object.keys(X).length;
        i.doc_write_failures += ee, i.docs_written += V.length - ee, V.forEach(function(ge) {
          var G = X[ge._id];
          if (G) {
            i.errors.push(G);
            var Te = (G.name || "").toLowerCase();
            if (Te === "unauthorized" || Te === "forbidden")
              r.emit("denied", Xe(G));
            else
              throw G;
          } else
            I.push(ge);
        });
      }, function(Q) {
        throw i.doc_write_failures += V.length, Q;
      });
    }
  }
  function N() {
    if (o.error)
      throw new Error("There was a problem getting docs.");
    i.last_seq = y = o.seq;
    var V = Xe(i);
    return I.length && (V.docs = I, typeof o.pending == "number" && (V.pending = o.pending, delete o.pending), r.emit("change", V)), u = !0, t.info().then(function(j) {
      var Q = t.activeTasks.get(T);
      if (!(!o || !Q)) {
        var X = Q.completed_items || 0, ee = parseInt(j.update_seq, 10) - parseInt(f, 10);
        t.activeTasks.update(T, {
          completed_items: X + o.changes.length,
          total_items: ee
        });
      }
    }), w.writeCheckpoint(
      o.seq,
      R
    ).then(function() {
      if (r.emit("checkpoint", { checkpoint: o.seq }), u = !1, r.cancelled)
        throw x(), new Error("cancelled");
      o = void 0, B();
    }).catch(function(j) {
      throw K(j), j;
    });
  }
  function k() {
    var V = {};
    return o.changes.forEach(function(j) {
      r.emit("checkpoint", { revs_diff: j }), j.id !== "_user/" && (V[j.id] = j.changes.map(function(Q) {
        return Q.rev;
      }));
    }), e.revsDiff(V).then(function(j) {
      if (r.cancelled)
        throw x(), new Error("cancelled");
      o.diffs = j;
    });
  }
  function Y() {
    return vI(t, e, o.diffs, r).then(function(V) {
      o.error = !V.ok, V.docs.forEach(function(j) {
        delete o.diffs[j._id], i.docs_read++, o.docs.push(j);
      });
    });
  }
  function oe() {
    if (!(r.cancelled || o)) {
      if (s.length === 0) {
        ue(!0);
        return;
      }
      o = s.shift(), r.emit("checkpoint", { start_next_batch: o.seq }), k().then(Y).then(D).then(N).then(oe).catch(function(V) {
        ae("batch processing terminated with error", V);
      });
    }
  }
  function ue(V) {
    if (a.changes.length === 0) {
      s.length === 0 && !o && ((b && A.live || l) && (r.state = "pending", r.emit("paused")), l && x());
      return;
    }
    (V || l || a.changes.length >= S) && (s.push(a), a = {
      seq: 0,
      changes: [],
      docs: []
    }, (r.state === "pending" || r.state === "stopped") && (r.state = "active", r.emit("active")), oe());
  }
  function ae(V, j) {
    h || (j.message || (j.message = V), i.ok = !1, i.status = "aborting", s = [], a = {
      seq: 0,
      changes: [],
      docs: []
    }, x(j));
  }
  function x(V) {
    if (!h && !(r.cancelled && (i.status = "cancelled", u)))
      if (i.status = i.status || "complete", i.end_time = (/* @__PURE__ */ new Date()).toISOString(), i.last_seq = y, h = !0, t.activeTasks.remove(T, V), V) {
        V = le(V), V.result = i;
        var j = (V.name || "").toLowerCase();
        j === "unauthorized" || j === "forbidden" ? (r.emit("error", V), r.removeAllListeners()) : EI(n, r, V, function() {
          Lg(t, e, n, r);
        });
      } else
        r.emit("complete", i), r.removeAllListeners();
  }
  function L(V, j, Q) {
    if (r.cancelled)
      return x();
    typeof j == "number" && (a.pending = j);
    var X = fl(n)(V);
    if (!X) {
      var ee = t.activeTasks.get(T);
      if (ee) {
        var ge = ee.completed_items || 0;
        t.activeTasks.update(T, { completed_items: ++ge });
      }
      return;
    }
    a.seq = V.seq || Q, a.changes.push(V), r.emit("checkpoint", { pending_batch: a.seq }), hn(function() {
      ue(s.length === 0 && A.live);
    });
  }
  function $(V) {
    if (v = !1, r.cancelled)
      return x();
    if (V.results.length > 0)
      A.since = V.results[V.results.length - 1].seq, B(), ue(!0);
    else {
      var j = function() {
        b ? (A.live = !0, B()) : l = !0, ue(!0);
      };
      !o && V.results.length === 0 ? (u = !0, w.writeCheckpoint(
        V.last_seq,
        R
      ).then(function() {
        if (u = !1, i.last_seq = y = V.last_seq, r.cancelled)
          throw x(), new Error("cancelled");
        j();
      }).catch(K)) : j();
    }
  }
  function U(V) {
    if (v = !1, r.cancelled)
      return x();
    ae("changes rejected", V);
  }
  function B() {
    if (!(!v && !l && s.length < C))
      return;
    v = !0;
    function V() {
      Q.cancel();
    }
    function j() {
      r.removeListener("cancel", V);
    }
    r._changes && (r.removeListener("cancel", r._abortChanges), r._changes.cancel()), r.once("cancel", V);
    var Q = t.changes(A).on("change", L);
    Q.then(j, j), Q.then($).catch(U), n.retry && (r._changes = Q, r._abortChanges = V);
  }
  function H(V) {
    return t.info().then(function(j) {
      var Q = typeof n.since > "u" ? parseInt(j.update_seq, 10) - parseInt(V, 10) : parseInt(j.update_seq, 10);
      return T = t.activeTasks.add({
        name: `${b ? "continuous " : ""}replication from ${j.db_name}`,
        total_items: Q
      }), V;
    });
  }
  function ie() {
    O().then(function() {
      if (r.cancelled) {
        x();
        return;
      }
      return w.getCheckpoint().then(H).then(function(V) {
        y = V, f = V, A = {
          since: y,
          limit: S,
          batch_size: S,
          style: m,
          doc_ids: E,
          selector: p,
          return_docs: !0
          // required so we know when we're done
        }, n.filter && (typeof n.filter != "string" ? A.include_docs = !0 : A.filter = n.filter), "heartbeat" in n && (A.heartbeat = n.heartbeat), "timeout" in n && (A.timeout = n.timeout), n.query_params && (A.query_params = n.query_params), n.view && (A.view = n.view), B();
      });
    }).catch(function(V) {
      ae("getCheckpoint rejected with ", V);
    });
  }
  function K(V) {
    u = !1, ae("writeCheckpoint completed with error", V);
  }
  if (r.cancelled) {
    x();
    return;
  }
  r._addedListeners || (r.once("cancel", x), typeof n.complete == "function" && (r.once("error", n.complete), r.once("complete", function(V) {
    n.complete(null, V);
  })), r._addedListeners = !0), typeof n.since > "u" ? ie() : O().then(function() {
    return u = !0, w.writeCheckpoint(n.since, R);
  }).then(function() {
    if (u = !1, r.cancelled) {
      x();
      return;
    }
    y = n.since, ie();
  }).catch(K);
}
class II extends Cn {
  constructor() {
    super(), this.cancelled = !1, this.state = "pending";
    const e = new Promise((n, r) => {
      this.once("complete", n), this.once("error", r);
    });
    this.then = function(n, r) {
      return e.then(n, r);
    }, this.catch = function(n) {
      return e.catch(n);
    }, this.catch(function() {
    });
  }
  cancel() {
    this.cancelled = !0, this.state = "cancelled", this.emit("cancel");
  }
  ready(e, n) {
    if (this._readyCalled)
      return;
    this._readyCalled = !0;
    const r = () => {
      this.cancel();
    };
    e.once("destroyed", r), n.once("destroyed", r);
    function i() {
      e.removeListener("destroyed", r), n.removeListener("destroyed", r);
    }
    this.once("complete", i), this.once("error", i);
  }
}
function Ko(t, e) {
  var n = e.PouchConstructor;
  return typeof t == "string" ? new n(t, e) : t;
}
function bu(t, e, n, r) {
  if (typeof n == "function" && (r = n, n = {}), typeof n > "u" && (n = {}), n.doc_ids && !Array.isArray(n.doc_ids))
    throw le(
      ba,
      "`doc_ids` filter parameter is not a list."
    );
  n.complete = r, n = Xe(n), n.continuous = n.continuous || n.live, n.retry = "retry" in n ? n.retry : !1, n.PouchConstructor = n.PouchConstructor || this;
  var i = new II(n), s = Ko(t, n), o = Ko(e, n);
  return Lg(s, o, n, i), i;
}
function SI(t, e, n, r) {
  return typeof n == "function" && (r = n, n = {}), typeof n > "u" && (n = {}), n = Xe(n), n.PouchConstructor = n.PouchConstructor || this, t = Ko(t, n), e = Ko(e, n), new AI(t, e, n, r);
}
class AI extends Cn {
  constructor(e, n, r, i) {
    super(), this.canceled = !1;
    const s = r.push ? Object.assign({}, r, r.push) : r, o = r.pull ? Object.assign({}, r, r.pull) : r;
    this.push = bu(e, n, s), this.pull = bu(n, e, o), this.pushPaused = !0, this.pullPaused = !0;
    const a = (p) => {
      this.emit("change", {
        direction: "pull",
        change: p
      });
    }, u = (p) => {
      this.emit("change", {
        direction: "push",
        change: p
      });
    }, l = (p) => {
      this.emit("denied", {
        direction: "push",
        doc: p
      });
    }, h = (p) => {
      this.emit("denied", {
        direction: "pull",
        doc: p
      });
    }, f = () => {
      this.pushPaused = !0, this.pullPaused && this.emit("paused");
    }, y = () => {
      this.pullPaused = !0, this.pushPaused && this.emit("paused");
    }, b = () => {
      this.pushPaused = !1, this.pullPaused && this.emit("active", {
        direction: "push"
      });
    }, S = () => {
      this.pullPaused = !1, this.pushPaused && this.emit("active", {
        direction: "pull"
      });
    };
    let C = {};
    const m = (p) => (g, w) => {
      (g === "change" && (w === a || w === u) || g === "denied" && (w === h || w === l) || g === "paused" && (w === y || w === f) || g === "active" && (w === S || w === b)) && (g in C || (C[g] = {}), C[g][p] = !0, Object.keys(C[g]).length === 2 && this.removeAllListeners(g));
    };
    r.live && (this.push.on("complete", this.pull.cancel.bind(this.pull)), this.pull.on("complete", this.push.cancel.bind(this.push)));
    function v(p, g, w) {
      p.listeners(g).indexOf(w) == -1 && p.on(g, w);
    }
    this.on("newListener", function(p) {
      p === "change" ? (v(this.pull, "change", a), v(this.push, "change", u)) : p === "denied" ? (v(this.pull, "denied", h), v(this.push, "denied", l)) : p === "active" ? (v(this.pull, "active", S), v(this.push, "active", b)) : p === "paused" && (v(this.pull, "paused", y), v(this.push, "paused", f));
    }), this.on("removeListener", function(p) {
      p === "change" ? (this.pull.removeListener("change", a), this.push.removeListener("change", u)) : p === "denied" ? (this.pull.removeListener("denied", h), this.push.removeListener("denied", l)) : p === "active" ? (this.pull.removeListener("active", S), this.push.removeListener("active", b)) : p === "paused" && (this.pull.removeListener("paused", y), this.push.removeListener("paused", f));
    }), this.pull.on("removeListener", m("pull")), this.push.on("removeListener", m("push"));
    const E = Promise.all([
      this.push,
      this.pull
    ]).then((p) => {
      const g = {
        push: p[0],
        pull: p[1]
      };
      return this.emit("complete", g), i && i(null, g), this.removeAllListeners(), g;
    }, (p) => {
      if (this.cancel(), i ? i(p) : this.emit("error", p), this.removeAllListeners(), i)
        throw p;
    });
    this.then = function(p, g) {
      return E.then(p, g);
    }, this.catch = function(p) {
      return E.catch(p);
    };
  }
  cancel() {
    this.canceled || (this.canceled = !0, this.push.cancel(), this.pull.cancel());
  }
}
function RI(t) {
  t.replicate = bu, t.sync = SI, Object.defineProperty(t.prototype, "replicate", {
    get: function() {
      var e = this;
      return typeof this.replicateMethods > "u" && (this.replicateMethods = {
        from: function(n, r, i) {
          return e.constructor.replicate(n, e, r, i);
        },
        to: function(n, r, i) {
          return e.constructor.replicate(e, n, r, i);
        }
      }), this.replicateMethods;
    }
  }), t.prototype.sync = function(e, n, r) {
    return this.constructor.sync(this, e, n, r);
  };
}
pe.plugin(qT).plugin(JT).plugin(pI).plugin(RI);
function st(t) {
  return `Minified Redux error #${t}; visit https://redux.js.org/Errors?code=${t} for the full message or use the non-minified dev environment for full errors. `;
}
var CI = typeof Symbol == "function" && Symbol.observable || "@@observable", fd = CI, Dc = () => Math.random().toString(36).substring(7).split("").join("."), PI = {
  INIT: `@@redux/INIT${/* @__PURE__ */ Dc()}`,
  REPLACE: `@@redux/REPLACE${/* @__PURE__ */ Dc()}`,
  PROBE_UNKNOWN_ACTION: () => `@@redux/PROBE_UNKNOWN_ACTION${Dc()}`
}, _r = PI;
function Ns(t) {
  if (typeof t != "object" || t === null)
    return !1;
  let e = t;
  for (; Object.getPrototypeOf(e) !== null; )
    e = Object.getPrototypeOf(e);
  return Object.getPrototypeOf(t) === e || Object.getPrototypeOf(t) === null;
}
function kI(t) {
  if (t === void 0)
    return "undefined";
  if (t === null)
    return "null";
  const e = typeof t;
  switch (e) {
    case "boolean":
    case "string":
    case "number":
    case "symbol":
    case "function":
      return e;
  }
  if (Array.isArray(t))
    return "array";
  if (NI(t))
    return "date";
  if (DI(t))
    return "error";
  const n = OI(t);
  switch (n) {
    case "Symbol":
    case "Promise":
    case "WeakMap":
    case "WeakSet":
    case "Map":
    case "Set":
      return n;
  }
  return Object.prototype.toString.call(t).slice(8, -1).toLowerCase().replace(/\s/g, "");
}
function OI(t) {
  return typeof t.constructor == "function" ? t.constructor.name : null;
}
function DI(t) {
  return t instanceof Error || typeof t.message == "string" && t.constructor && typeof t.constructor.stackTraceLimit == "number";
}
function NI(t) {
  return t instanceof Date ? !0 : typeof t.toDateString == "function" && typeof t.getDate == "function" && typeof t.setDate == "function";
}
function Un(t) {
  let e = typeof t;
  return process.env.NODE_ENV !== "production" && (e = kI(t)), e;
}
function Mg(t, e, n) {
  if (typeof t != "function")
    throw new Error(process.env.NODE_ENV === "production" ? st(2) : `Expected the root reducer to be a function. Instead, received: '${Un(t)}'`);
  if (typeof e == "function" && typeof n == "function" || typeof n == "function" && typeof arguments[3] == "function")
    throw new Error(process.env.NODE_ENV === "production" ? st(0) : "It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
  if (typeof e == "function" && typeof n > "u" && (n = e, e = void 0), typeof n < "u") {
    if (typeof n != "function")
      throw new Error(process.env.NODE_ENV === "production" ? st(1) : `Expected the enhancer to be a function. Instead, received: '${Un(n)}'`);
    return n(Mg)(t, e);
  }
  let r = t, i = e, s = /* @__PURE__ */ new Map(), o = s, a = 0, u = !1;
  function l() {
    o === s && (o = /* @__PURE__ */ new Map(), s.forEach((m, v) => {
      o.set(v, m);
    }));
  }
  function h() {
    if (u)
      throw new Error(process.env.NODE_ENV === "production" ? st(3) : "You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
    return i;
  }
  function f(m) {
    if (typeof m != "function")
      throw new Error(process.env.NODE_ENV === "production" ? st(4) : `Expected the listener to be a function. Instead, received: '${Un(m)}'`);
    if (u)
      throw new Error(process.env.NODE_ENV === "production" ? st(5) : "You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.");
    let v = !0;
    l();
    const E = a++;
    return o.set(E, m), function() {
      if (v) {
        if (u)
          throw new Error(process.env.NODE_ENV === "production" ? st(6) : "You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.");
        v = !1, l(), o.delete(E), s = null;
      }
    };
  }
  function y(m) {
    if (!Ns(m))
      throw new Error(process.env.NODE_ENV === "production" ? st(7) : `Actions must be plain objects. Instead, the actual type was: '${Un(m)}'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`);
    if (typeof m.type > "u")
      throw new Error(process.env.NODE_ENV === "production" ? st(8) : 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
    if (typeof m.type != "string")
      throw new Error(process.env.NODE_ENV === "production" ? st(17) : `Action "type" property must be a string. Instead, the actual type was: '${Un(m.type)}'. Value was: '${m.type}' (stringified)`);
    if (u)
      throw new Error(process.env.NODE_ENV === "production" ? st(9) : "Reducers may not dispatch actions.");
    try {
      u = !0, i = r(i, m);
    } finally {
      u = !1;
    }
    return (s = o).forEach((E) => {
      E();
    }), m;
  }
  function b(m) {
    if (typeof m != "function")
      throw new Error(process.env.NODE_ENV === "production" ? st(10) : `Expected the nextReducer to be a function. Instead, received: '${Un(m)}`);
    r = m, y({
      type: _r.REPLACE
    });
  }
  function S() {
    const m = f;
    return {
      /**
       * The minimal observable subscription method.
       * @param observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
      subscribe(v) {
        if (typeof v != "object" || v === null)
          throw new Error(process.env.NODE_ENV === "production" ? st(11) : `Expected the observer to be an object. Instead, received: '${Un(v)}'`);
        function E() {
          const g = v;
          g.next && g.next(h());
        }
        return E(), {
          unsubscribe: m(E)
        };
      },
      [fd]() {
        return this;
      }
    };
  }
  return y({
    type: _r.INIT
  }), {
    dispatch: y,
    subscribe: f,
    getState: h,
    replaceReducer: b,
    [fd]: S
  };
}
function hd(t) {
  typeof console < "u" && typeof console.error == "function" && console.error(t);
  try {
    throw new Error(t);
  } catch {
  }
}
function xI(t, e, n, r) {
  const i = Object.keys(e), s = n && n.type === _r.INIT ? "preloadedState argument passed to createStore" : "previous state received by the reducer";
  if (i.length === 0)
    return "Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.";
  if (!Ns(t))
    return `The ${s} has unexpected type of "${Un(t)}". Expected argument to be an object with the following keys: "${i.join('", "')}"`;
  const o = Object.keys(t).filter((a) => !e.hasOwnProperty(a) && !r[a]);
  if (o.forEach((a) => {
    r[a] = !0;
  }), !(n && n.type === _r.REPLACE) && o.length > 0)
    return `Unexpected ${o.length > 1 ? "keys" : "key"} "${o.join('", "')}" found in ${s}. Expected to find one of the known reducer keys instead: "${i.join('", "')}". Unexpected keys will be ignored.`;
}
function LI(t) {
  Object.keys(t).forEach((e) => {
    const n = t[e];
    if (typeof n(void 0, {
      type: _r.INIT
    }) > "u")
      throw new Error(process.env.NODE_ENV === "production" ? st(12) : `The slice reducer for key "${e}" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.`);
    if (typeof n(void 0, {
      type: _r.PROBE_UNKNOWN_ACTION()
    }) > "u")
      throw new Error(process.env.NODE_ENV === "production" ? st(13) : `The slice reducer for key "${e}" returned undefined when probed with a random type. Don't try to handle '${_r.INIT}' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.`);
  });
}
function MI(t) {
  const e = Object.keys(t), n = {};
  for (let o = 0; o < e.length; o++) {
    const a = e[o];
    process.env.NODE_ENV !== "production" && typeof t[a] > "u" && hd(`No reducer provided for key "${a}"`), typeof t[a] == "function" && (n[a] = t[a]);
  }
  const r = Object.keys(n);
  let i;
  process.env.NODE_ENV !== "production" && (i = {});
  let s;
  try {
    LI(n);
  } catch (o) {
    s = o;
  }
  return function(a = {}, u) {
    if (s)
      throw s;
    if (process.env.NODE_ENV !== "production") {
      const f = xI(a, n, u, i);
      f && hd(f);
    }
    let l = !1;
    const h = {};
    for (let f = 0; f < r.length; f++) {
      const y = r[f], b = n[y], S = a[y], C = b(S, u);
      if (typeof C > "u") {
        const m = u && u.type;
        throw new Error(process.env.NODE_ENV === "production" ? st(14) : `When called with an action of type ${m ? `"${String(m)}"` : "(unknown type)"}, the slice reducer for key "${y}" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.`);
      }
      h[y] = C, l = l || C !== S;
    }
    return l = l || r.length !== Object.keys(a).length, l ? h : a;
  };
}
function Ho(...t) {
  return t.length === 0 ? (e) => e : t.length === 1 ? t[0] : t.reduce((e, n) => (...r) => e(n(...r)));
}
function VI(...t) {
  return (e) => (n, r) => {
    const i = e(n, r);
    let s = () => {
      throw new Error(process.env.NODE_ENV === "production" ? st(15) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
    };
    const o = {
      getState: i.getState,
      dispatch: (u, ...l) => s(u, ...l)
    }, a = t.map((u) => u(o));
    return s = Ho(...a)(i.dispatch), {
      ...i,
      dispatch: s
    };
  };
}
function Tl(t) {
  return Ns(t) && "type" in t && typeof t.type == "string";
}
var Vg = Symbol.for("immer-nothing"), dd = Symbol.for("immer-draftable"), Mt = Symbol.for("immer-state"), FI = process.env.NODE_ENV !== "production" ? [
  // All error codes, starting by 0:
  function(t) {
    return `The plugin for '${t}' has not been loaded into Immer. To enable the plugin, import and call \`enable${t}()\` when initializing your application.`;
  },
  function(t) {
    return `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${t}'`;
  },
  "This object has been frozen and should not be mutated",
  function(t) {
    return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + t;
  },
  "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.",
  "Immer forbids circular references",
  "The first or second argument to `produce` must be a function",
  "The third argument to `produce` must be a function or undefined",
  "First argument to `createDraft` must be a plain object, an array, or an immerable object",
  "First argument to `finishDraft` must be a draft returned by `createDraft`",
  function(t) {
    return `'current' expects a draft, got: ${t}`;
  },
  "Object.defineProperty() cannot be used on an Immer draft",
  "Object.setPrototypeOf() cannot be used on an Immer draft",
  "Immer only supports deleting array indices",
  "Immer only supports setting array indices and the 'length' property",
  function(t) {
    return `'original' expects a draft, got: ${t}`;
  }
  // Note: if more errors are added, the errorOffset in Patches.ts should be increased
  // See Patches.ts for additional errors
] : [];
function Ct(t, ...e) {
  if (process.env.NODE_ENV !== "production") {
    const n = FI[t], r = typeof n == "function" ? n.apply(null, e) : n;
    throw new Error(`[Immer] ${r}`);
  }
  throw new Error(
    `[Immer] minified error nr: ${t}. Full error at: https://bit.ly/3cXEKWf`
  );
}
var li = Object.getPrototypeOf;
function dn(t) {
  return !!t && !!t[Mt];
}
function Pn(t) {
  var e;
  return t ? Fg(t) || Array.isArray(t) || !!t[dd] || !!((e = t.constructor) != null && e[dd]) || Ra(t) || Ca(t) : !1;
}
var UI = Object.prototype.constructor.toString();
function Fg(t) {
  if (!t || typeof t != "object")
    return !1;
  const e = li(t);
  if (e === null)
    return !0;
  const n = Object.hasOwnProperty.call(e, "constructor") && e.constructor;
  return n === Object ? !0 : typeof n == "function" && Function.toString.call(n) === UI;
}
function Go(t, e) {
  Aa(t) === 0 ? Reflect.ownKeys(t).forEach((n) => {
    e(n, t[n], t);
  }) : t.forEach((n, r) => e(r, n, t));
}
function Aa(t) {
  const e = t[Mt];
  return e ? e.type_ : Array.isArray(t) ? 1 : Ra(t) ? 2 : Ca(t) ? 3 : 0;
}
function Tu(t, e) {
  return Aa(t) === 2 ? t.has(e) : Object.prototype.hasOwnProperty.call(t, e);
}
function Ug(t, e, n) {
  const r = Aa(t);
  r === 2 ? t.set(e, n) : r === 3 ? t.add(n) : t[e] = n;
}
function jI(t, e) {
  return t === e ? t !== 0 || 1 / t === 1 / e : t !== t && e !== e;
}
function Ra(t) {
  return t instanceof Map;
}
function Ca(t) {
  return t instanceof Set;
}
function ur(t) {
  return t.copy_ || t.base_;
}
function Iu(t, e) {
  if (Ra(t))
    return new Map(t);
  if (Ca(t))
    return new Set(t);
  if (Array.isArray(t))
    return Array.prototype.slice.call(t);
  const n = Fg(t);
  if (e === !0 || e === "class_only" && !n) {
    const r = Object.getOwnPropertyDescriptors(t);
    delete r[Mt];
    let i = Reflect.ownKeys(r);
    for (let s = 0; s < i.length; s++) {
      const o = i[s], a = r[o];
      a.writable === !1 && (a.writable = !0, a.configurable = !0), (a.get || a.set) && (r[o] = {
        configurable: !0,
        writable: !0,
        // could live with !!desc.set as well here...
        enumerable: a.enumerable,
        value: t[o]
      });
    }
    return Object.create(li(t), r);
  } else {
    const r = li(t);
    if (r !== null && n)
      return { ...t };
    const i = Object.create(r);
    return Object.assign(i, t);
  }
}
function Il(t, e = !1) {
  return Pa(t) || dn(t) || !Pn(t) || (Aa(t) > 1 && (t.set = t.add = t.clear = t.delete = $I), Object.freeze(t), e && Object.entries(t).forEach(([n, r]) => Il(r, !0))), t;
}
function $I() {
  Ct(2);
}
function Pa(t) {
  return Object.isFrozen(t);
}
var BI = {};
function Ar(t) {
  const e = BI[t];
  return e || Ct(0, t), e;
}
var gs;
function jg() {
  return gs;
}
function qI(t, e) {
  return {
    drafts_: [],
    parent_: t,
    immer_: e,
    // Whenever the modified draft contains a draft from another scope, we
    // need to prevent auto-freezing so the unowned draft can be finalized.
    canAutoFreeze_: !0,
    unfinalizedDrafts_: 0
  };
}
function pd(t, e) {
  e && (Ar("Patches"), t.patches_ = [], t.inversePatches_ = [], t.patchListener_ = e);
}
function Su(t) {
  Au(t), t.drafts_.forEach(zI), t.drafts_ = null;
}
function Au(t) {
  t === gs && (gs = t.parent_);
}
function md(t) {
  return gs = qI(gs, t);
}
function zI(t) {
  const e = t[Mt];
  e.type_ === 0 || e.type_ === 1 ? e.revoke_() : e.revoked_ = !0;
}
function gd(t, e) {
  e.unfinalizedDrafts_ = e.drafts_.length;
  const n = e.drafts_[0];
  return t !== void 0 && t !== n ? (n[Mt].modified_ && (Su(e), Ct(4)), Pn(t) && (t = Wo(e, t), e.parent_ || Qo(e, t)), e.patches_ && Ar("Patches").generateReplacementPatches_(
    n[Mt].base_,
    t,
    e.patches_,
    e.inversePatches_
  )) : t = Wo(e, n, []), Su(e), e.patches_ && e.patchListener_(e.patches_, e.inversePatches_), t !== Vg ? t : void 0;
}
function Wo(t, e, n) {
  if (Pa(e))
    return e;
  const r = e[Mt];
  if (!r)
    return Go(
      e,
      (i, s) => yd(t, r, e, i, s, n)
    ), e;
  if (r.scope_ !== t)
    return e;
  if (!r.modified_)
    return Qo(t, r.base_, !0), r.base_;
  if (!r.finalized_) {
    r.finalized_ = !0, r.scope_.unfinalizedDrafts_--;
    const i = r.copy_;
    let s = i, o = !1;
    r.type_ === 3 && (s = new Set(i), i.clear(), o = !0), Go(
      s,
      (a, u) => yd(t, r, i, a, u, n, o)
    ), Qo(t, i, !1), n && t.patches_ && Ar("Patches").generatePatches_(
      r,
      n,
      t.patches_,
      t.inversePatches_
    );
  }
  return r.copy_;
}
function yd(t, e, n, r, i, s, o) {
  if (process.env.NODE_ENV !== "production" && i === n && Ct(5), dn(i)) {
    const a = s && e && e.type_ !== 3 && // Set objects are atomic since they have no keys.
    !Tu(e.assigned_, r) ? s.concat(r) : void 0, u = Wo(t, i, a);
    if (Ug(n, r, u), dn(u))
      t.canAutoFreeze_ = !1;
    else
      return;
  } else o && n.add(i);
  if (Pn(i) && !Pa(i)) {
    if (!t.immer_.autoFreeze_ && t.unfinalizedDrafts_ < 1)
      return;
    Wo(t, i), (!e || !e.scope_.parent_) && typeof r != "symbol" && Object.prototype.propertyIsEnumerable.call(n, r) && Qo(t, i);
  }
}
function Qo(t, e, n = !1) {
  !t.parent_ && t.immer_.autoFreeze_ && t.canAutoFreeze_ && Il(e, n);
}
function KI(t, e) {
  const n = Array.isArray(t), r = {
    type_: n ? 1 : 0,
    // Track which produce call this is associated with.
    scope_: e ? e.scope_ : jg(),
    // True for both shallow and deep changes.
    modified_: !1,
    // Used during finalization.
    finalized_: !1,
    // Track which properties have been assigned (true) or deleted (false).
    assigned_: {},
    // The parent draft state.
    parent_: e,
    // The base state.
    base_: t,
    // The base proxy.
    draft_: null,
    // set below
    // The base copy with any updated values.
    copy_: null,
    // Called by the `produce` function.
    revoke_: null,
    isManual_: !1
  };
  let i = r, s = Sl;
  n && (i = [r], s = ys);
  const { revoke: o, proxy: a } = Proxy.revocable(i, s);
  return r.draft_ = a, r.revoke_ = o, a;
}
var Sl = {
  get(t, e) {
    if (e === Mt)
      return t;
    const n = ur(t);
    if (!Tu(n, e))
      return HI(t, n, e);
    const r = n[e];
    return t.finalized_ || !Pn(r) ? r : r === Nc(t.base_, e) ? (xc(t), t.copy_[e] = Cu(r, t)) : r;
  },
  has(t, e) {
    return e in ur(t);
  },
  ownKeys(t) {
    return Reflect.ownKeys(ur(t));
  },
  set(t, e, n) {
    const r = $g(ur(t), e);
    if (r != null && r.set)
      return r.set.call(t.draft_, n), !0;
    if (!t.modified_) {
      const i = Nc(ur(t), e), s = i == null ? void 0 : i[Mt];
      if (s && s.base_ === n)
        return t.copy_[e] = n, t.assigned_[e] = !1, !0;
      if (jI(n, i) && (n !== void 0 || Tu(t.base_, e)))
        return !0;
      xc(t), Ru(t);
    }
    return t.copy_[e] === n && // special case: handle new props with value 'undefined'
    (n !== void 0 || e in t.copy_) || // special case: NaN
    Number.isNaN(n) && Number.isNaN(t.copy_[e]) || (t.copy_[e] = n, t.assigned_[e] = !0), !0;
  },
  deleteProperty(t, e) {
    return Nc(t.base_, e) !== void 0 || e in t.base_ ? (t.assigned_[e] = !1, xc(t), Ru(t)) : delete t.assigned_[e], t.copy_ && delete t.copy_[e], !0;
  },
  // Note: We never coerce `desc.value` into an Immer draft, because we can't make
  // the same guarantee in ES5 mode.
  getOwnPropertyDescriptor(t, e) {
    const n = ur(t), r = Reflect.getOwnPropertyDescriptor(n, e);
    return r && {
      writable: !0,
      configurable: t.type_ !== 1 || e !== "length",
      enumerable: r.enumerable,
      value: n[e]
    };
  },
  defineProperty() {
    Ct(11);
  },
  getPrototypeOf(t) {
    return li(t.base_);
  },
  setPrototypeOf() {
    Ct(12);
  }
}, ys = {};
Go(Sl, (t, e) => {
  ys[t] = function() {
    return arguments[0] = arguments[0][0], e.apply(this, arguments);
  };
});
ys.deleteProperty = function(t, e) {
  return process.env.NODE_ENV !== "production" && isNaN(parseInt(e)) && Ct(13), ys.set.call(this, t, e, void 0);
};
ys.set = function(t, e, n) {
  return process.env.NODE_ENV !== "production" && e !== "length" && isNaN(parseInt(e)) && Ct(14), Sl.set.call(this, t[0], e, n, t[0]);
};
function Nc(t, e) {
  const n = t[Mt];
  return (n ? ur(n) : t)[e];
}
function HI(t, e, n) {
  var i;
  const r = $g(e, n);
  return r ? "value" in r ? r.value : (
    // This is a very special case, if the prop is a getter defined by the
    // prototype, we should invoke it with the draft as context!
    (i = r.get) == null ? void 0 : i.call(t.draft_)
  ) : void 0;
}
function $g(t, e) {
  if (!(e in t))
    return;
  let n = li(t);
  for (; n; ) {
    const r = Object.getOwnPropertyDescriptor(n, e);
    if (r)
      return r;
    n = li(n);
  }
}
function Ru(t) {
  t.modified_ || (t.modified_ = !0, t.parent_ && Ru(t.parent_));
}
function xc(t) {
  t.copy_ || (t.copy_ = Iu(
    t.base_,
    t.scope_.immer_.useStrictShallowCopy_
  ));
}
var GI = class {
  constructor(t) {
    this.autoFreeze_ = !0, this.useStrictShallowCopy_ = !1, this.produce = (e, n, r) => {
      if (typeof e == "function" && typeof n != "function") {
        const s = n;
        n = e;
        const o = this;
        return function(u = s, ...l) {
          return o.produce(u, (h) => n.call(this, h, ...l));
        };
      }
      typeof n != "function" && Ct(6), r !== void 0 && typeof r != "function" && Ct(7);
      let i;
      if (Pn(e)) {
        const s = md(this), o = Cu(e, void 0);
        let a = !0;
        try {
          i = n(o), a = !1;
        } finally {
          a ? Su(s) : Au(s);
        }
        return pd(s, r), gd(i, s);
      } else if (!e || typeof e != "object") {
        if (i = n(e), i === void 0 && (i = e), i === Vg && (i = void 0), this.autoFreeze_ && Il(i, !0), r) {
          const s = [], o = [];
          Ar("Patches").generateReplacementPatches_(e, i, s, o), r(s, o);
        }
        return i;
      } else
        Ct(1, e);
    }, this.produceWithPatches = (e, n) => {
      if (typeof e == "function")
        return (o, ...a) => this.produceWithPatches(o, (u) => e(u, ...a));
      let r, i;
      return [this.produce(e, n, (o, a) => {
        r = o, i = a;
      }), r, i];
    }, typeof (t == null ? void 0 : t.autoFreeze) == "boolean" && this.setAutoFreeze(t.autoFreeze), typeof (t == null ? void 0 : t.useStrictShallowCopy) == "boolean" && this.setUseStrictShallowCopy(t.useStrictShallowCopy);
  }
  createDraft(t) {
    Pn(t) || Ct(8), dn(t) && (t = ka(t));
    const e = md(this), n = Cu(t, void 0);
    return n[Mt].isManual_ = !0, Au(e), n;
  }
  finishDraft(t, e) {
    const n = t && t[Mt];
    (!n || !n.isManual_) && Ct(9);
    const { scope_: r } = n;
    return pd(r, e), gd(void 0, r);
  }
  /**
   * Pass true to automatically freeze all copies created by Immer.
   *
   * By default, auto-freezing is enabled.
   */
  setAutoFreeze(t) {
    this.autoFreeze_ = t;
  }
  /**
   * Pass true to enable strict shallow copy.
   *
   * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.
   */
  setUseStrictShallowCopy(t) {
    this.useStrictShallowCopy_ = t;
  }
  applyPatches(t, e) {
    let n;
    for (n = e.length - 1; n >= 0; n--) {
      const i = e[n];
      if (i.path.length === 0 && i.op === "replace") {
        t = i.value;
        break;
      }
    }
    n > -1 && (e = e.slice(n + 1));
    const r = Ar("Patches").applyPatches_;
    return dn(t) ? r(t, e) : this.produce(
      t,
      (i) => r(i, e)
    );
  }
};
function Cu(t, e) {
  const n = Ra(t) ? Ar("MapSet").proxyMap_(t, e) : Ca(t) ? Ar("MapSet").proxySet_(t, e) : KI(t, e);
  return (e ? e.scope_ : jg()).drafts_.push(n), n;
}
function ka(t) {
  return dn(t) || Ct(10, t), Bg(t);
}
function Bg(t) {
  if (!Pn(t) || Pa(t))
    return t;
  const e = t[Mt];
  let n;
  if (e) {
    if (!e.modified_)
      return e.base_;
    e.finalized_ = !0, n = Iu(t, e.scope_.immer_.useStrictShallowCopy_);
  } else
    n = Iu(t, !0);
  return Go(n, (r, i) => {
    Ug(n, r, Bg(i));
  }), e && (e.finalized_ = !1), n;
}
var Vt = new GI(), Al = Vt.produce;
Vt.produceWithPatches.bind(
  Vt
);
Vt.setAutoFreeze.bind(Vt);
Vt.setUseStrictShallowCopy.bind(Vt);
Vt.applyPatches.bind(Vt);
Vt.createDraft.bind(Vt);
Vt.finishDraft.bind(Vt);
var WI = (t, e, n) => {
  if (e.length === 1 && e[0] === n) {
    let r = !1;
    try {
      const i = {};
      t(i) === i && (r = !0);
    } catch {
    }
    if (r) {
      let i;
      try {
        throw new Error();
      } catch (s) {
        ({ stack: i } = s);
      }
      console.warn(
        `The result function returned its own inputs without modification. e.g
\`createSelector([state => state.todos], todos => todos)\`
This could lead to inefficient memoization and unnecessary re-renders.
Ensure transformation logic is in the result function, and extraction logic is in the input selectors.`,
        { stack: i }
      );
    }
  }
}, QI = (t, e, n) => {
  const { memoize: r, memoizeOptions: i } = e, { inputSelectorResults: s, inputSelectorResultsCopy: o } = t, a = r(() => ({}), ...i);
  if (!(a.apply(null, s) === a.apply(null, o))) {
    let l;
    try {
      throw new Error();
    } catch (h) {
      ({ stack: l } = h);
    }
    console.warn(
      `An input selector returned a different result when passed same arguments.
This means your output selector will likely run more frequently than intended.
Avoid returning a new reference inside your input selector, e.g.
\`createSelector([state => state.todos.map(todo => todo.id)], todoIds => todoIds.length)\``,
      {
        arguments: n,
        firstInputs: s,
        secondInputs: o,
        stack: l
      }
    );
  }
}, YI = {
  inputStabilityCheck: "once",
  identityFunctionCheck: "once"
};
function JI(t, e = `expected a function, instead received ${typeof t}`) {
  if (typeof t != "function")
    throw new TypeError(e);
}
function XI(t, e = `expected an object, instead received ${typeof t}`) {
  if (typeof t != "object")
    throw new TypeError(e);
}
function ZI(t, e = "expected all items to be functions, instead received the following types: ") {
  if (!t.every((n) => typeof n == "function")) {
    const n = t.map(
      (r) => typeof r == "function" ? `function ${r.name || "unnamed"}()` : typeof r
    ).join(", ");
    throw new TypeError(`${e}[${n}]`);
  }
}
var vd = (t) => Array.isArray(t) ? t : [t];
function e0(t) {
  const e = Array.isArray(t[0]) ? t[0] : t;
  return ZI(
    e,
    "createSelector expects all input-selectors to be functions, but received the following types: "
  ), e;
}
function _d(t, e) {
  const n = [], { length: r } = t;
  for (let i = 0; i < r; i++)
    n.push(t[i].apply(null, e));
  return n;
}
var t0 = (t, e) => {
  const { identityFunctionCheck: n, inputStabilityCheck: r } = {
    ...YI,
    ...e
  };
  return {
    identityFunctionCheck: {
      shouldRun: n === "always" || n === "once" && t,
      run: WI
    },
    inputStabilityCheck: {
      shouldRun: r === "always" || r === "once" && t,
      run: QI
    }
  };
}, n0 = class {
  constructor(t) {
    this.value = t;
  }
  deref() {
    return this.value;
  }
}, r0 = typeof WeakRef < "u" ? WeakRef : n0, i0 = 0, wd = 1;
function po() {
  return {
    s: i0,
    v: void 0,
    o: null,
    p: null
  };
}
function Rl(t, e = {}) {
  let n = po();
  const { resultEqualityCheck: r } = e;
  let i, s = 0;
  function o() {
    var f;
    let a = n;
    const { length: u } = arguments;
    for (let y = 0, b = u; y < b; y++) {
      const S = arguments[y];
      if (typeof S == "function" || typeof S == "object" && S !== null) {
        let C = a.o;
        C === null && (a.o = C = /* @__PURE__ */ new WeakMap());
        const m = C.get(S);
        m === void 0 ? (a = po(), C.set(S, a)) : a = m;
      } else {
        let C = a.p;
        C === null && (a.p = C = /* @__PURE__ */ new Map());
        const m = C.get(S);
        m === void 0 ? (a = po(), C.set(S, a)) : a = m;
      }
    }
    const l = a;
    let h;
    if (a.s === wd ? h = a.v : (h = t.apply(null, arguments), s++), l.s = wd, r) {
      const y = ((f = i == null ? void 0 : i.deref) == null ? void 0 : f.call(i)) ?? i;
      y != null && r(y, h) && (h = y, s !== 0 && s--), i = typeof h == "object" && h !== null || typeof h == "function" ? new r0(h) : h;
    }
    return l.v = h, h;
  }
  return o.clearCache = () => {
    n = po(), o.resetResultsCount();
  }, o.resultsCount = () => s, o.resetResultsCount = () => {
    s = 0;
  }, o;
}
function qg(t, ...e) {
  const n = typeof t == "function" ? {
    memoize: t,
    memoizeOptions: e
  } : t, r = (...i) => {
    let s = 0, o = 0, a, u = {}, l = i.pop();
    typeof l == "object" && (u = l, l = i.pop()), JI(
      l,
      `createSelector expects an output function after the inputs, but received: [${typeof l}]`
    );
    const h = {
      ...n,
      ...u
    }, {
      memoize: f,
      memoizeOptions: y = [],
      argsMemoize: b = Rl,
      argsMemoizeOptions: S = [],
      devModeChecks: C = {}
    } = h, m = vd(y), v = vd(S), E = e0(i), p = f(function() {
      return s++, l.apply(
        null,
        arguments
      );
    }, ...m);
    let g = !0;
    const w = b(function() {
      o++;
      const R = _d(
        E,
        arguments
      );
      if (a = p.apply(null, R), process.env.NODE_ENV !== "production") {
        const { identityFunctionCheck: T, inputStabilityCheck: A } = t0(g, C);
        if (T.shouldRun && T.run(
          l,
          R,
          a
        ), A.shouldRun) {
          const O = _d(
            E,
            arguments
          );
          A.run(
            { inputSelectorResults: R, inputSelectorResultsCopy: O },
            { memoize: f, memoizeOptions: m },
            arguments
          );
        }
        g && (g = !1);
      }
      return a;
    }, ...v);
    return Object.assign(w, {
      resultFunc: l,
      memoizedResultFunc: p,
      dependencies: E,
      dependencyRecomputations: () => o,
      resetDependencyRecomputations: () => {
        o = 0;
      },
      lastResult: () => a,
      recomputations: () => s,
      resetRecomputations: () => {
        s = 0;
      },
      memoize: f,
      argsMemoize: b
    });
  };
  return Object.assign(r, {
    withTypes: () => r
  }), r;
}
var s0 = /* @__PURE__ */ qg(Rl), o0 = Object.assign(
  (t, e = s0) => {
    XI(
      t,
      `createStructuredSelector expects first argument to be an object where each property is a selector, instead received a ${typeof t}`
    );
    const n = Object.keys(t), r = n.map(
      (s) => t[s]
    );
    return e(
      r,
      (...s) => s.reduce((o, a, u) => (o[n[u]] = a, o), {})
    );
  },
  { withTypes: () => o0 }
);
function zg(t) {
  return ({ dispatch: n, getState: r }) => (i) => (s) => typeof s == "function" ? s(n, r, t) : i(s);
}
var a0 = zg(), c0 = zg, u0 = (...t) => {
  const e = qg(...t), n = Object.assign((...r) => {
    const i = e(...r), s = (o, ...a) => i(dn(o) ? ka(o) : o, ...a);
    return Object.assign(s, i), s;
  }, {
    withTypes: () => n
  });
  return n;
}, l0 = u0(Rl), f0 = typeof window < "u" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function() {
  if (arguments.length !== 0)
    return typeof arguments[0] == "object" ? Ho : Ho.apply(null, arguments);
}, h0 = (t) => t && typeof t.match == "function";
function fi(t, e) {
  function n(...r) {
    if (e) {
      let i = e(...r);
      if (!i)
        throw new Error(process.env.NODE_ENV === "production" ? Pe(0) : "prepareAction did not return an object");
      return {
        type: t,
        payload: i.payload,
        ..."meta" in i && {
          meta: i.meta
        },
        ..."error" in i && {
          error: i.error
        }
      };
    }
    return {
      type: t,
      payload: r[0]
    };
  }
  return n.toString = () => `${t}`, n.type = t, n.match = (r) => Tl(r) && r.type === t, n;
}
function d0(t) {
  return typeof t == "function" && "type" in t && // hasMatchFunction only wants Matchers but I don't see the point in rewriting it
  h0(t);
}
function p0(t) {
  return Tl(t) && Object.keys(t).every(m0);
}
function m0(t) {
  return ["type", "payload", "error", "meta"].indexOf(t) > -1;
}
function g0(t) {
  const e = t ? `${t}`.split("/") : [], n = e[e.length - 1] || "actionCreator";
  return `Detected an action creator with type "${t || "unknown"}" being dispatched. 
Make sure you're calling the action creator before dispatching, i.e. \`dispatch(${n}())\` instead of \`dispatch(${n})\`. This is necessary even if the action has no payload.`;
}
function y0(t = {}) {
  if (process.env.NODE_ENV === "production")
    return () => (n) => (r) => n(r);
  const {
    isActionCreator: e = d0
  } = t;
  return () => (n) => (r) => (e(r) && console.warn(g0(r.type)), n(r));
}
function Kg(t, e) {
  let n = 0;
  return {
    measureTime(r) {
      const i = Date.now();
      try {
        return r();
      } finally {
        const s = Date.now();
        n += s - i;
      }
    },
    warnIfExceeded() {
      n > t && console.warn(`${e} took ${n}ms, which is more than the warning threshold of ${t}ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.`);
    }
  };
}
var Hg = class Ji extends Array {
  constructor(...e) {
    super(...e), Object.setPrototypeOf(this, Ji.prototype);
  }
  static get [Symbol.species]() {
    return Ji;
  }
  concat(...e) {
    return super.concat.apply(this, e);
  }
  prepend(...e) {
    return e.length === 1 && Array.isArray(e[0]) ? new Ji(...e[0].concat(this)) : new Ji(...e.concat(this));
  }
};
function Ed(t) {
  return Pn(t) ? Al(t, () => {
  }) : t;
}
function bd(t, e, n) {
  if (t.has(e)) {
    let i = t.get(e);
    return n.update && (i = n.update(i, e, t), t.set(e, i)), i;
  }
  if (!n.insert)
    throw new Error(process.env.NODE_ENV === "production" ? Pe(10) : "No insert provided for key not already in map");
  const r = n.insert(e, t);
  return t.set(e, r), r;
}
function v0(t) {
  return typeof t != "object" || t == null || Object.isFrozen(t);
}
function _0(t, e, n) {
  const r = Gg(t, e, n);
  return {
    detectMutations() {
      return Wg(t, e, r, n);
    }
  };
}
function Gg(t, e = [], n, r = "", i = /* @__PURE__ */ new Set()) {
  const s = {
    value: n
  };
  if (!t(n) && !i.has(n)) {
    i.add(n), s.children = {};
    for (const o in n) {
      const a = r ? r + "." + o : o;
      e.length && e.indexOf(a) !== -1 || (s.children[o] = Gg(t, e, n[o], a));
    }
  }
  return s;
}
function Wg(t, e = [], n, r, i = !1, s = "") {
  const o = n ? n.value : void 0, a = o === r;
  if (i && !a && !Number.isNaN(r))
    return {
      wasMutated: !0,
      path: s
    };
  if (t(o) || t(r))
    return {
      wasMutated: !1
    };
  const u = {};
  for (let h in n.children)
    u[h] = !0;
  for (let h in r)
    u[h] = !0;
  const l = e.length > 0;
  for (let h in u) {
    const f = s ? s + "." + h : h;
    if (l && e.some((S) => S instanceof RegExp ? S.test(f) : f === S))
      continue;
    const y = Wg(t, e, n.children[h], r[h], a, f);
    if (y.wasMutated)
      return y;
  }
  return {
    wasMutated: !1
  };
}
function w0(t = {}) {
  if (process.env.NODE_ENV === "production")
    return () => (e) => (n) => e(n);
  {
    let e = function(a, u, l, h) {
      return JSON.stringify(a, n(u, h), l);
    }, n = function(a, u) {
      let l = [], h = [];
      return u || (u = function(f, y) {
        return l[0] === y ? "[Circular ~]" : "[Circular ~." + h.slice(0, l.indexOf(y)).join(".") + "]";
      }), function(f, y) {
        if (l.length > 0) {
          var b = l.indexOf(this);
          ~b ? l.splice(b + 1) : l.push(this), ~b ? h.splice(b, 1 / 0, f) : h.push(f), ~l.indexOf(y) && (y = u.call(this, f, y));
        } else
          l.push(y);
        return a == null ? y : a.call(this, f, y);
      };
    }, {
      isImmutable: r = v0,
      ignoredPaths: i,
      warnAfter: s = 32
    } = t;
    const o = _0.bind(null, r, i);
    return ({
      getState: a
    }) => {
      let u = a(), l = o(u), h;
      return (f) => (y) => {
        const b = Kg(s, "ImmutableStateInvariantMiddleware");
        b.measureTime(() => {
          if (u = a(), h = l.detectMutations(), l = o(u), h.wasMutated)
            throw new Error(process.env.NODE_ENV === "production" ? Pe(19) : `A state mutation was detected between dispatches, in the path '${h.path || ""}'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`);
        });
        const S = f(y);
        return b.measureTime(() => {
          if (u = a(), h = l.detectMutations(), l = o(u), h.wasMutated)
            throw new Error(process.env.NODE_ENV === "production" ? Pe(20) : `A state mutation was detected inside a dispatch, in the path: ${h.path || ""}. Take a look at the reducer(s) handling the action ${e(y)}. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`);
        }), b.warnIfExceeded(), S;
      };
    };
  }
}
function Qg(t) {
  const e = typeof t;
  return t == null || e === "string" || e === "boolean" || e === "number" || Array.isArray(t) || Ns(t);
}
function Pu(t, e = "", n = Qg, r, i = [], s) {
  let o;
  if (!n(t))
    return {
      keyPath: e || "<root>",
      value: t
    };
  if (typeof t != "object" || t === null || s != null && s.has(t))
    return !1;
  const a = r != null ? r(t) : Object.entries(t), u = i.length > 0;
  for (const [l, h] of a) {
    const f = e ? e + "." + l : l;
    if (!(u && i.some((b) => b instanceof RegExp ? b.test(f) : f === b))) {
      if (!n(h))
        return {
          keyPath: f,
          value: h
        };
      if (typeof h == "object" && (o = Pu(h, f, n, r, i, s), o))
        return o;
    }
  }
  return s && Yg(t) && s.add(t), !1;
}
function Yg(t) {
  if (!Object.isFrozen(t))
    return !1;
  for (const e of Object.values(t))
    if (!(typeof e != "object" || e === null) && !Yg(e))
      return !1;
  return !0;
}
function E0(t = {}) {
  if (process.env.NODE_ENV === "production")
    return () => (e) => (n) => e(n);
  {
    const {
      isSerializable: e = Qg,
      getEntries: n,
      ignoredActions: r = [],
      ignoredActionPaths: i = ["meta.arg", "meta.baseQueryMeta"],
      ignoredPaths: s = [],
      warnAfter: o = 32,
      ignoreState: a = !1,
      ignoreActions: u = !1,
      disableCache: l = !1
    } = t, h = !l && WeakSet ? /* @__PURE__ */ new WeakSet() : void 0;
    return (f) => (y) => (b) => {
      if (!Tl(b))
        return y(b);
      const S = y(b), C = Kg(o, "SerializableStateInvariantMiddleware");
      return !u && !(r.length && r.indexOf(b.type) !== -1) && C.measureTime(() => {
        const m = Pu(b, "", e, n, i, h);
        if (m) {
          const {
            keyPath: v,
            value: E
          } = m;
          console.error(`A non-serializable value was detected in an action, in the path: \`${v}\`. Value:`, E, `
Take a look at the logic that dispatched this action: `, b, `
(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)`, `
(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)`);
        }
      }), a || (C.measureTime(() => {
        const m = f.getState(), v = Pu(m, "", e, n, s, h);
        if (v) {
          const {
            keyPath: E,
            value: p
          } = v;
          console.error(`A non-serializable value was detected in the state, in the path: \`${E}\`. Value:`, p, `
Take a look at the reducer(s) handling this action type: ${b.type}.
(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)`);
        }
      }), C.warnIfExceeded()), S;
    };
  }
}
function mo(t) {
  return typeof t == "boolean";
}
var b0 = () => function(e) {
  const {
    thunk: n = !0,
    immutableCheck: r = !0,
    serializableCheck: i = !0,
    actionCreatorCheck: s = !0
  } = e ?? {};
  let o = new Hg();
  if (n && (mo(n) ? o.push(a0) : o.push(c0(n.extraArgument))), process.env.NODE_ENV !== "production") {
    if (r) {
      let a = {};
      mo(r) || (a = r), o.unshift(w0(a));
    }
    if (i) {
      let a = {};
      mo(i) || (a = i), o.push(E0(a));
    }
    if (s) {
      let a = {};
      mo(s) || (a = s), o.unshift(y0(a));
    }
  }
  return o;
}, T0 = "RTK_autoBatch", Jg = (t) => (e) => {
  setTimeout(e, t);
}, I0 = typeof window < "u" && window.requestAnimationFrame ? window.requestAnimationFrame : Jg(10), S0 = (t = {
  type: "raf"
}) => (e) => (...n) => {
  const r = e(...n);
  let i = !0, s = !1, o = !1;
  const a = /* @__PURE__ */ new Set(), u = t.type === "tick" ? queueMicrotask : t.type === "raf" ? I0 : t.type === "callback" ? t.queueNotification : Jg(t.timeout), l = () => {
    o = !1, s && (s = !1, a.forEach((h) => h()));
  };
  return Object.assign({}, r, {
    // Override the base `store.subscribe` method to keep original listeners
    // from running if we're delaying notifications
    subscribe(h) {
      const f = () => i && h(), y = r.subscribe(f);
      return a.add(h), () => {
        y(), a.delete(h);
      };
    },
    // Override the base `store.dispatch` method so that we can check actions
    // for the `shouldAutoBatch` flag and determine if batching is active
    dispatch(h) {
      var f;
      try {
        return i = !((f = h == null ? void 0 : h.meta) != null && f[T0]), s = !i, s && (o || (o = !0, u(l))), r.dispatch(h);
      } finally {
        i = !0;
      }
    }
  });
}, A0 = (t) => function(n) {
  const {
    autoBatch: r = !0
  } = n ?? {};
  let i = new Hg(t);
  return r && i.push(S0(typeof r == "object" ? r : void 0)), i;
}, Vn = process.env.NODE_ENV === "production";
function R0(t) {
  const e = b0(), {
    reducer: n = void 0,
    middleware: r,
    devTools: i = !0,
    preloadedState: s = void 0,
    enhancers: o = void 0
  } = t || {};
  let a;
  if (typeof n == "function")
    a = n;
  else if (Ns(n))
    a = MI(n);
  else
    throw new Error(process.env.NODE_ENV === "production" ? Pe(1) : "`reducer` is a required argument, and must be a function or an object of functions that can be passed to combineReducers");
  if (!Vn && r && typeof r != "function")
    throw new Error(process.env.NODE_ENV === "production" ? Pe(2) : "`middleware` field must be a callback");
  let u;
  if (typeof r == "function") {
    if (u = r(e), !Vn && !Array.isArray(u))
      throw new Error(process.env.NODE_ENV === "production" ? Pe(3) : "when using a middleware builder function, an array of middleware must be returned");
  } else
    u = e();
  if (!Vn && u.some((S) => typeof S != "function"))
    throw new Error(process.env.NODE_ENV === "production" ? Pe(4) : "each middleware provided to configureStore must be a function");
  let l = Ho;
  i && (l = f0({
    // Enable capture of stack traces for dispatched Redux actions
    trace: !Vn,
    ...typeof i == "object" && i
  }));
  const h = VI(...u), f = A0(h);
  if (!Vn && o && typeof o != "function")
    throw new Error(process.env.NODE_ENV === "production" ? Pe(5) : "`enhancers` field must be a callback");
  let y = typeof o == "function" ? o(f) : f();
  if (!Vn && !Array.isArray(y))
    throw new Error(process.env.NODE_ENV === "production" ? Pe(6) : "`enhancers` callback must return an array");
  if (!Vn && y.some((S) => typeof S != "function"))
    throw new Error(process.env.NODE_ENV === "production" ? Pe(7) : "each enhancer provided to configureStore must be a function");
  !Vn && u.length && !y.includes(h) && console.error("middlewares were provided, but middleware enhancer was not included in final enhancers - make sure to call `getDefaultEnhancers`");
  const b = l(...y);
  return Mg(a, s, b);
}
function Xg(t) {
  const e = {}, n = [];
  let r;
  const i = {
    addCase(s, o) {
      if (process.env.NODE_ENV !== "production") {
        if (n.length > 0)
          throw new Error(process.env.NODE_ENV === "production" ? Pe(26) : "`builder.addCase` should only be called before calling `builder.addMatcher`");
        if (r)
          throw new Error(process.env.NODE_ENV === "production" ? Pe(27) : "`builder.addCase` should only be called before calling `builder.addDefaultCase`");
      }
      const a = typeof s == "string" ? s : s.type;
      if (!a)
        throw new Error(process.env.NODE_ENV === "production" ? Pe(28) : "`builder.addCase` cannot be called with an empty action type");
      if (a in e)
        throw new Error(process.env.NODE_ENV === "production" ? Pe(29) : `\`builder.addCase\` cannot be called with two reducers for the same action type '${a}'`);
      return e[a] = o, i;
    },
    addMatcher(s, o) {
      if (process.env.NODE_ENV !== "production" && r)
        throw new Error(process.env.NODE_ENV === "production" ? Pe(30) : "`builder.addMatcher` should only be called before calling `builder.addDefaultCase`");
      return n.push({
        matcher: s,
        reducer: o
      }), i;
    },
    addDefaultCase(s) {
      if (process.env.NODE_ENV !== "production" && r)
        throw new Error(process.env.NODE_ENV === "production" ? Pe(31) : "`builder.addDefaultCase` can only be called once");
      return r = s, i;
    }
  };
  return t(i), [e, n, r];
}
function C0(t) {
  return typeof t == "function";
}
function P0(t, e) {
  if (process.env.NODE_ENV !== "production" && typeof e == "object")
    throw new Error(process.env.NODE_ENV === "production" ? Pe(8) : "The object notation for `createReducer` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createReducer");
  let [n, r, i] = Xg(e), s;
  if (C0(t))
    s = () => Ed(t());
  else {
    const a = Ed(t);
    s = () => a;
  }
  function o(a = s(), u) {
    let l = [n[u.type], ...r.filter(({
      matcher: h
    }) => h(u)).map(({
      reducer: h
    }) => h)];
    return l.filter((h) => !!h).length === 0 && (l = [i]), l.reduce((h, f) => {
      if (f)
        if (dn(h)) {
          const b = f(h, u);
          return b === void 0 ? h : b;
        } else {
          if (Pn(h))
            return Al(h, (y) => f(y, u));
          {
            const y = f(h, u);
            if (y === void 0) {
              if (h === null)
                return h;
              throw new Error(process.env.NODE_ENV === "production" ? Pe(9) : "A case reducer on a non-draftable value must not return undefined");
            }
            return y;
          }
        }
      return h;
    }, a);
  }
  return o.getInitialState = s, o;
}
var k0 = "ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW", Et = (t = 21) => {
  let e = "", n = t;
  for (; n--; )
    e += k0[Math.random() * 64 | 0];
  return e;
}, O0 = /* @__PURE__ */ Symbol.for("rtk-slice-createasyncthunk");
function D0(t, e) {
  return `${t}/${e}`;
}
function N0({
  creators: t
} = {}) {
  var n;
  const e = (n = t == null ? void 0 : t.asyncThunk) == null ? void 0 : n[O0];
  return function(i) {
    const {
      name: s,
      reducerPath: o = s
    } = i;
    if (!s)
      throw new Error(process.env.NODE_ENV === "production" ? Pe(11) : "`name` is a required option for createSlice");
    typeof process < "u" && process.env.NODE_ENV === "development" && i.initialState === void 0 && console.error("You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`");
    const a = (typeof i.reducers == "function" ? i.reducers(L0()) : i.reducers) || {}, u = Object.keys(a), l = {
      sliceCaseReducersByName: {},
      sliceCaseReducersByType: {},
      actionCreators: {},
      sliceMatchers: []
    }, h = {
      addCase(p, g) {
        const w = typeof p == "string" ? p : p.type;
        if (!w)
          throw new Error(process.env.NODE_ENV === "production" ? Pe(12) : "`context.addCase` cannot be called with an empty action type");
        if (w in l.sliceCaseReducersByType)
          throw new Error(process.env.NODE_ENV === "production" ? Pe(13) : "`context.addCase` cannot be called with two reducers for the same action type: " + w);
        return l.sliceCaseReducersByType[w] = g, h;
      },
      addMatcher(p, g) {
        return l.sliceMatchers.push({
          matcher: p,
          reducer: g
        }), h;
      },
      exposeAction(p, g) {
        return l.actionCreators[p] = g, h;
      },
      exposeCaseReducer(p, g) {
        return l.sliceCaseReducersByName[p] = g, h;
      }
    };
    u.forEach((p) => {
      const g = a[p], w = {
        reducerName: p,
        type: D0(s, p),
        createNotation: typeof i.reducers == "function"
      };
      V0(g) ? U0(w, g, h, e) : M0(w, g, h);
    });
    function f() {
      if (process.env.NODE_ENV !== "production" && typeof i.extraReducers == "object")
        throw new Error(process.env.NODE_ENV === "production" ? Pe(14) : "The object notation for `createSlice.extraReducers` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createSlice");
      const [p = {}, g = [], w = void 0] = typeof i.extraReducers == "function" ? Xg(i.extraReducers) : [i.extraReducers], I = {
        ...p,
        ...l.sliceCaseReducersByType
      };
      return P0(i.initialState, (R) => {
        for (let T in I)
          R.addCase(T, I[T]);
        for (let T of l.sliceMatchers)
          R.addMatcher(T.matcher, T.reducer);
        for (let T of g)
          R.addMatcher(T.matcher, T.reducer);
        w && R.addDefaultCase(w);
      });
    }
    const y = (p) => p, b = /* @__PURE__ */ new Map();
    let S;
    function C(p, g) {
      return S || (S = f()), S(p, g);
    }
    function m() {
      return S || (S = f()), S.getInitialState();
    }
    function v(p, g = !1) {
      function w(R) {
        let T = R[p];
        if (typeof T > "u") {
          if (g)
            T = m();
          else if (process.env.NODE_ENV !== "production")
            throw new Error(process.env.NODE_ENV === "production" ? Pe(15) : "selectSlice returned undefined for an uninjected slice reducer");
        }
        return T;
      }
      function I(R = y) {
        const T = bd(b, g, {
          insert: () => /* @__PURE__ */ new WeakMap()
        });
        return bd(T, R, {
          insert: () => {
            const A = {};
            for (const [O, D] of Object.entries(i.selectors ?? {}))
              A[O] = x0(D, R, m, g);
            return A;
          }
        });
      }
      return {
        reducerPath: p,
        getSelectors: I,
        get selectors() {
          return I(w);
        },
        selectSlice: w
      };
    }
    const E = {
      name: s,
      reducer: C,
      actions: l.actionCreators,
      caseReducers: l.sliceCaseReducersByName,
      getInitialState: m,
      ...v(o),
      injectInto(p, {
        reducerPath: g,
        ...w
      } = {}) {
        const I = g ?? o;
        return p.inject({
          reducerPath: I,
          reducer: C
        }, w), {
          ...E,
          ...v(I, !0)
        };
      }
    };
    return E;
  };
}
function x0(t, e, n, r) {
  function i(s, ...o) {
    let a = e(s);
    if (typeof a > "u") {
      if (r)
        a = n();
      else if (process.env.NODE_ENV !== "production")
        throw new Error(process.env.NODE_ENV === "production" ? Pe(16) : "selectState returned undefined for an uninjected slice reducer");
    }
    return t(a, ...o);
  }
  return i.unwrapped = t, i;
}
var Oa = /* @__PURE__ */ N0();
function L0() {
  function t(e, n) {
    return {
      _reducerDefinitionType: "asyncThunk",
      payloadCreator: e,
      ...n
    };
  }
  return t.withTypes = () => t, {
    reducer(e) {
      return Object.assign({
        // hack so the wrapping function has the same name as the original
        // we need to create a wrapper so the `reducerDefinitionType` is not assigned to the original
        [e.name](...n) {
          return e(...n);
        }
      }[e.name], {
        _reducerDefinitionType: "reducer"
        /* reducer */
      });
    },
    preparedReducer(e, n) {
      return {
        _reducerDefinitionType: "reducerWithPrepare",
        prepare: e,
        reducer: n
      };
    },
    asyncThunk: t
  };
}
function M0({
  type: t,
  reducerName: e,
  createNotation: n
}, r, i) {
  let s, o;
  if ("reducer" in r) {
    if (n && !F0(r))
      throw new Error(process.env.NODE_ENV === "production" ? Pe(17) : "Please use the `create.preparedReducer` notation for prepared action creators with the `create` notation.");
    s = r.reducer, o = r.prepare;
  } else
    s = r;
  i.addCase(t, s).exposeCaseReducer(e, s).exposeAction(e, o ? fi(t, o) : fi(t));
}
function V0(t) {
  return t._reducerDefinitionType === "asyncThunk";
}
function F0(t) {
  return t._reducerDefinitionType === "reducerWithPrepare";
}
function U0({
  type: t,
  reducerName: e
}, n, r, i) {
  if (!i)
    throw new Error(process.env.NODE_ENV === "production" ? Pe(18) : "Cannot use `create.asyncThunk` in the built-in `createSlice`. Use `buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })` to create a customised version of `createSlice`.");
  const {
    payloadCreator: s,
    fulfilled: o,
    pending: a,
    rejected: u,
    settled: l,
    options: h
  } = n, f = i(t, s, h);
  r.exposeAction(e, f), o && r.addCase(f.fulfilled, o), a && r.addCase(f.pending, a), u && r.addCase(f.rejected, u), l && r.addMatcher(f.settled, l), r.exposeCaseReducer(e, {
    fulfilled: o || go,
    pending: a || go,
    rejected: u || go,
    settled: l || go
  });
}
function go() {
}
function j0() {
  return {
    ids: [],
    entities: {}
  };
}
function $0(t) {
  function e(n = {}, r) {
    const i = Object.assign(j0(), n);
    return r ? t.setAll(i, r) : i;
  }
  return {
    getInitialState: e
  };
}
function B0() {
  function t(e, n = {}) {
    const {
      createSelector: r = l0
    } = n, i = (f) => f.ids, s = (f) => f.entities, o = r(i, s, (f, y) => f.map((b) => y[b])), a = (f, y) => y, u = (f, y) => f[y], l = r(i, (f) => f.length);
    if (!e)
      return {
        selectIds: i,
        selectEntities: s,
        selectAll: o,
        selectTotal: l,
        selectById: r(s, a, u)
      };
    const h = r(e, s);
    return {
      selectIds: r(e, i),
      selectEntities: h,
      selectAll: r(e, o),
      selectTotal: r(e, l),
      selectById: r(h, a, u)
    };
  }
  return {
    getSelectors: t
  };
}
var q0 = dn;
function z0(t) {
  const e = Ke((n, r) => t(r));
  return function(r) {
    return e(r, void 0);
  };
}
function Ke(t) {
  return function(n, r) {
    function i(o) {
      return p0(o);
    }
    const s = (o) => {
      i(r) ? t(r.payload, o) : t(r, o);
    };
    return q0(n) ? (s(n), n) : Al(n, s);
  };
}
function Zr(t, e) {
  const n = e(t);
  return process.env.NODE_ENV !== "production" && n === void 0 && console.warn("The entity passed to the `selectId` implementation returned undefined.", "You should probably provide your own `selectId` implementation.", "The entity that was passed:", t, "The `selectId` implementation:", e.toString()), n;
}
function wr(t) {
  return Array.isArray(t) || (t = Object.values(t)), t;
}
function ku(t) {
  return dn(t) ? ka(t) : t;
}
function Zg(t, e, n) {
  t = wr(t);
  const r = ku(n.ids), i = new Set(r), s = [], o = [];
  for (const a of t) {
    const u = Zr(a, e);
    i.has(u) ? o.push({
      id: u,
      changes: a
    }) : s.push(a);
  }
  return [s, o, r];
}
function ey(t) {
  function e(S, C) {
    const m = Zr(S, t);
    m in C.entities || (C.ids.push(m), C.entities[m] = S);
  }
  function n(S, C) {
    S = wr(S);
    for (const m of S)
      e(m, C);
  }
  function r(S, C) {
    const m = Zr(S, t);
    m in C.entities || C.ids.push(m), C.entities[m] = S;
  }
  function i(S, C) {
    S = wr(S);
    for (const m of S)
      r(m, C);
  }
  function s(S, C) {
    S = wr(S), C.ids = [], C.entities = {}, n(S, C);
  }
  function o(S, C) {
    return a([S], C);
  }
  function a(S, C) {
    let m = !1;
    S.forEach((v) => {
      v in C.entities && (delete C.entities[v], m = !0);
    }), m && (C.ids = C.ids.filter((v) => v in C.entities));
  }
  function u(S) {
    Object.assign(S, {
      ids: [],
      entities: {}
    });
  }
  function l(S, C, m) {
    const v = m.entities[C.id];
    if (v === void 0)
      return !1;
    const E = Object.assign({}, v, C.changes), p = Zr(E, t), g = p !== C.id;
    return g && (S[C.id] = p, delete m.entities[C.id]), m.entities[p] = E, g;
  }
  function h(S, C) {
    return f([S], C);
  }
  function f(S, C) {
    const m = {}, v = {};
    S.forEach((p) => {
      p.id in C.entities && (v[p.id] = {
        id: p.id,
        // Spreads ignore falsy values, so this works even if there isn't
        // an existing update already at this key
        changes: {
          ...v[p.id] ? v[p.id].changes : null,
          ...p.changes
        }
      });
    }), S = Object.values(v), S.length > 0 && S.filter((g) => l(m, g, C)).length > 0 && (C.ids = Object.values(C.entities).map((g) => Zr(g, t)));
  }
  function y(S, C) {
    return b([S], C);
  }
  function b(S, C) {
    const [m, v] = Zg(S, t, C);
    f(v, C), n(m, C);
  }
  return {
    removeAll: z0(u),
    addOne: Ke(e),
    addMany: Ke(n),
    setOne: Ke(r),
    setMany: Ke(i),
    setAll: Ke(s),
    updateOne: Ke(h),
    updateMany: Ke(f),
    upsertOne: Ke(y),
    upsertMany: Ke(b),
    removeOne: Ke(o),
    removeMany: Ke(a)
  };
}
function K0(t, e, n) {
  let r = 0, i = t.length;
  for (; r < i; ) {
    let s = r + i >>> 1;
    const o = t[s];
    n(e, o) >= 0 ? r = s + 1 : i = s;
  }
  return r;
}
function H0(t, e, n) {
  const r = K0(t, e, n);
  return t.splice(r, 0, e), t;
}
function G0(t, e) {
  const {
    removeOne: n,
    removeMany: r,
    removeAll: i
  } = ey(t);
  function s(v, E) {
    return o([v], E);
  }
  function o(v, E, p) {
    v = wr(v);
    const g = new Set(p ?? ka(E.ids)), w = v.filter((I) => !g.has(Zr(I, t)));
    w.length !== 0 && m(E, w);
  }
  function a(v, E) {
    return u([v], E);
  }
  function u(v, E) {
    if (v = wr(v), v.length !== 0) {
      for (const p of v)
        delete E.entities[t(p)];
      m(E, v);
    }
  }
  function l(v, E) {
    v = wr(v), E.entities = {}, E.ids = [], o(v, E, []);
  }
  function h(v, E) {
    return f([v], E);
  }
  function f(v, E) {
    let p = !1, g = !1;
    for (let w of v) {
      const I = E.entities[w.id];
      if (!I)
        continue;
      p = !0, Object.assign(I, w.changes);
      const R = t(I);
      if (w.id !== R) {
        g = !0, delete E.entities[w.id];
        const T = E.ids.indexOf(w.id);
        E.ids[T] = R, E.entities[R] = I;
      }
    }
    p && m(E, [], p, g);
  }
  function y(v, E) {
    return b([v], E);
  }
  function b(v, E) {
    const [p, g, w] = Zg(v, t, E);
    g.length && f(g, E), p.length && o(p, E, w);
  }
  function S(v, E) {
    if (v.length !== E.length)
      return !1;
    for (let p = 0; p < v.length && p < E.length; p++)
      if (v[p] !== E[p])
        return !1;
    return !0;
  }
  const m = (v, E, p, g) => {
    const w = ku(v.entities), I = ku(v.ids), R = v.entities;
    let T = I;
    g && (T = Array.from(new Set(I)));
    let A = [];
    for (const N of T) {
      const k = w[N];
      k && A.push(k);
    }
    const O = A.length === 0;
    for (const N of E)
      R[t(N)] = N, O || H0(A, N, e);
    O ? A = E.slice().sort(e) : p && A.sort(e);
    const D = A.map(t);
    S(I, D) || (v.ids = D);
  };
  return {
    removeOne: n,
    removeMany: r,
    removeAll: i,
    addOne: Ke(s),
    updateOne: Ke(h),
    upsertOne: Ke(y),
    setOne: Ke(a),
    setMany: Ke(u),
    setAll: Ke(l),
    addMany: Ke(o),
    updateMany: Ke(f),
    upsertMany: Ke(b)
  };
}
function W0(t = {}) {
  const {
    selectId: e,
    sortComparer: n
  } = {
    sortComparer: !1,
    selectId: (o) => o.id,
    ...t
  }, r = n ? G0(e, n) : ey(e), i = $0(r), s = B0();
  return {
    selectId: e,
    sortComparer: n,
    ...i,
    ...s,
    ...r
  };
}
var Q0 = (t, e) => {
  if (typeof t != "function")
    throw new Error(process.env.NODE_ENV === "production" ? Pe(32) : `${e} is not a function`);
}, Cl = "listenerMiddleware", Y0 = (t) => {
  let {
    type: e,
    actionCreator: n,
    matcher: r,
    predicate: i,
    effect: s
  } = t;
  if (e)
    i = fi(e).match;
  else if (n)
    e = n.type, i = n.match;
  else if (r)
    i = r;
  else if (!i) throw new Error(process.env.NODE_ENV === "production" ? Pe(21) : "Creating or removing a listener requires one of the known fields for matching an action");
  return Q0(s, "options.listener"), {
    predicate: i,
    type: e,
    effect: s
  };
}, J0 = Object.assign((t) => {
  const {
    type: e,
    predicate: n,
    effect: r
  } = Y0(t);
  return {
    id: Et(),
    effect: r,
    type: e,
    predicate: n,
    pending: /* @__PURE__ */ new Set(),
    unsubscribe: () => {
      throw new Error(process.env.NODE_ENV === "production" ? Pe(22) : "Unsubscribe not initialized");
    }
  };
}, {
  withTypes: () => J0
}), X0 = Object.assign(fi(`${Cl}/add`), {
  withTypes: () => X0
});
fi(`${Cl}/removeAll`);
var Z0 = Object.assign(fi(`${Cl}/remove`), {
  withTypes: () => Z0
});
function Pe(t) {
  return `Minified Redux Toolkit error #${t}; visit https://redux-toolkit.js.org/Errors?code=${t} for the full message or use the non-minified dev environment for full errors. `;
}
var Ou = { exports: {} }, Lc = {};
/**
 * @license React
 * use-sync-external-store-shim.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Td;
function eS() {
  if (Td) return Lc;
  Td = 1;
  var t = ne;
  function e(f, y) {
    return f === y && (f !== 0 || 1 / f === 1 / y) || f !== f && y !== y;
  }
  var n = typeof Object.is == "function" ? Object.is : e, r = t.useState, i = t.useEffect, s = t.useLayoutEffect, o = t.useDebugValue;
  function a(f, y) {
    var b = y(), S = r({ inst: { value: b, getSnapshot: y } }), C = S[0].inst, m = S[1];
    return s(function() {
      C.value = b, C.getSnapshot = y, u(C) && m({ inst: C });
    }, [f, b, y]), i(function() {
      return u(C) && m({ inst: C }), f(function() {
        u(C) && m({ inst: C });
      });
    }, [f]), o(b), b;
  }
  function u(f) {
    var y = f.getSnapshot;
    f = f.value;
    try {
      var b = y();
      return !n(f, b);
    } catch {
      return !0;
    }
  }
  function l(f, y) {
    return y();
  }
  var h = typeof window > "u" || typeof window.document > "u" || typeof window.document.createElement > "u" ? l : a;
  return Lc.useSyncExternalStore = t.useSyncExternalStore !== void 0 ? t.useSyncExternalStore : h, Lc;
}
var Mc = {}, Id;
function tS() {
  if (Id) return Mc;
  Id = 1;
  /**
   * @license React
   * use-sync-external-store-shim.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  return process.env.NODE_ENV !== "production" && function() {
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var t = ne, e = t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function n(p) {
      {
        for (var g = arguments.length, w = new Array(g > 1 ? g - 1 : 0), I = 1; I < g; I++)
          w[I - 1] = arguments[I];
        r("error", p, w);
      }
    }
    function r(p, g, w) {
      {
        var I = e.ReactDebugCurrentFrame, R = I.getStackAddendum();
        R !== "" && (g += "%s", w = w.concat([R]));
        var T = w.map(function(A) {
          return String(A);
        });
        T.unshift("Warning: " + g), Function.prototype.apply.call(console[p], console, T);
      }
    }
    function i(p, g) {
      return p === g && (p !== 0 || 1 / p === 1 / g) || p !== p && g !== g;
    }
    var s = typeof Object.is == "function" ? Object.is : i, o = t.useState, a = t.useEffect, u = t.useLayoutEffect, l = t.useDebugValue, h = !1, f = !1;
    function y(p, g, w) {
      h || t.startTransition !== void 0 && (h = !0, n("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release."));
      var I = g();
      if (!f) {
        var R = g();
        s(I, R) || (n("The result of getSnapshot should be cached to avoid an infinite loop"), f = !0);
      }
      var T = o({
        inst: {
          value: I,
          getSnapshot: g
        }
      }), A = T[0].inst, O = T[1];
      return u(function() {
        A.value = I, A.getSnapshot = g, b(A) && O({
          inst: A
        });
      }, [p, I, g]), a(function() {
        b(A) && O({
          inst: A
        });
        var D = function() {
          b(A) && O({
            inst: A
          });
        };
        return p(D);
      }, [p]), l(I), I;
    }
    function b(p) {
      var g = p.getSnapshot, w = p.value;
      try {
        var I = g();
        return !s(w, I);
      } catch {
        return !0;
      }
    }
    function S(p, g, w) {
      return g();
    }
    var C = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u", m = !C, v = m ? S : y, E = t.useSyncExternalStore !== void 0 ? t.useSyncExternalStore : v;
    Mc.useSyncExternalStore = E, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
  }(), Mc;
}
process.env.NODE_ENV === "production" ? Ou.exports = eS() : Ou.exports = tS();
var ty = Ou.exports, Du = { exports: {} }, Vc = {};
/**
 * @license React
 * use-sync-external-store-shim/with-selector.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Sd;
function nS() {
  if (Sd) return Vc;
  Sd = 1;
  var t = ne, e = ty;
  function n(l, h) {
    return l === h && (l !== 0 || 1 / l === 1 / h) || l !== l && h !== h;
  }
  var r = typeof Object.is == "function" ? Object.is : n, i = e.useSyncExternalStore, s = t.useRef, o = t.useEffect, a = t.useMemo, u = t.useDebugValue;
  return Vc.useSyncExternalStoreWithSelector = function(l, h, f, y, b) {
    var S = s(null);
    if (S.current === null) {
      var C = { hasValue: !1, value: null };
      S.current = C;
    } else C = S.current;
    S = a(function() {
      function v(I) {
        if (!E) {
          if (E = !0, p = I, I = y(I), b !== void 0 && C.hasValue) {
            var R = C.value;
            if (b(R, I)) return g = R;
          }
          return g = I;
        }
        if (R = g, r(p, I)) return R;
        var T = y(I);
        return b !== void 0 && b(R, T) ? R : (p = I, g = T);
      }
      var E = !1, p, g, w = f === void 0 ? null : f;
      return [function() {
        return v(h());
      }, w === null ? void 0 : function() {
        return v(w());
      }];
    }, [h, f, y, b]);
    var m = i(l, S[0], S[1]);
    return o(function() {
      C.hasValue = !0, C.value = m;
    }, [m]), u(m), m;
  }, Vc;
}
var Fc = {}, Ad;
function rS() {
  if (Ad) return Fc;
  Ad = 1;
  /**
   * @license React
   * use-sync-external-store-shim/with-selector.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  return process.env.NODE_ENV !== "production" && function() {
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var t = ne, e = ty;
    function n(h, f) {
      return h === f && (h !== 0 || 1 / h === 1 / f) || h !== h && f !== f;
    }
    var r = typeof Object.is == "function" ? Object.is : n, i = e.useSyncExternalStore, s = t.useRef, o = t.useEffect, a = t.useMemo, u = t.useDebugValue;
    function l(h, f, y, b, S) {
      var C = s(null), m;
      C.current === null ? (m = {
        hasValue: !1,
        value: null
      }, C.current = m) : m = C.current;
      var v = a(function() {
        var w = !1, I, R, T = function(N) {
          if (!w) {
            w = !0, I = N;
            var k = b(N);
            if (S !== void 0 && m.hasValue) {
              var Y = m.value;
              if (S(Y, k))
                return R = Y, Y;
            }
            return R = k, k;
          }
          var oe = I, ue = R;
          if (r(oe, N))
            return ue;
          var ae = b(N);
          return S !== void 0 && S(ue, ae) ? ue : (I = N, R = ae, ae);
        }, A = y === void 0 ? null : y, O = function() {
          return T(f());
        }, D = A === null ? void 0 : function() {
          return T(A());
        };
        return [O, D];
      }, [f, y, b, S]), E = v[0], p = v[1], g = i(h, E, p);
      return o(function() {
        m.hasValue = !0, m.value = g;
      }, [g]), u(g), g;
    }
    Fc.useSyncExternalStoreWithSelector = l, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
  }(), Fc;
}
process.env.NODE_ENV === "production" ? Du.exports = nS() : Du.exports = rS();
var iS = Du.exports;
function sS(t) {
  t();
}
let ny = sS;
const oS = (t) => ny = t, UL = () => ny, Rd = Symbol.for("react-redux-context"), Cd = typeof globalThis < "u" ? globalThis : (
  /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */
  {}
);
function aS() {
  var t;
  if (!co.createContext) return {};
  const e = (t = Cd[Rd]) != null ? t : Cd[Rd] = /* @__PURE__ */ new Map();
  let n = e.get(co.createContext);
  return n || (n = co.createContext(null), process.env.NODE_ENV !== "production" && (n.displayName = "ReactRedux"), e.set(co.createContext, n)), n;
}
const Nu = /* @__PURE__ */ aS();
function ry(t = Nu) {
  return function() {
    const n = Yw(t);
    if (process.env.NODE_ENV !== "production" && !n)
      throw new Error("could not find react-redux context value; please ensure the component is wrapped in a <Provider>");
    return n;
  };
}
const cS = /* @__PURE__ */ ry(), uS = () => {
  throw new Error("uSES not initialized!");
};
let iy = uS;
const lS = (t) => {
  iy = t;
}, fS = (t, e) => t === e;
function hS(t = Nu) {
  const e = t === Nu ? cS : ry(t);
  return function(r, i = {}) {
    const {
      equalityFn: s = fS,
      stabilityCheck: o = void 0,
      noopCheck: a = void 0
    } = typeof i == "function" ? {
      equalityFn: i
    } : i;
    if (process.env.NODE_ENV !== "production") {
      if (!r)
        throw new Error("You must pass a selector to useSelector");
      if (typeof r != "function")
        throw new Error("You must pass a function as a selector to useSelector");
      if (typeof s != "function")
        throw new Error("You must pass a function as an equality function to useSelector");
    }
    const {
      store: u,
      subscription: l,
      getServerState: h,
      stabilityCheck: f,
      noopCheck: y
    } = e(), b = Jw(!0), S = Xw({
      [r.name](m) {
        const v = r(m);
        if (process.env.NODE_ENV !== "production") {
          const E = typeof o > "u" ? f : o;
          if (E === "always" || E === "once" && b.current) {
            const g = r(m);
            if (!s(v, g)) {
              let w;
              try {
                throw new Error();
              } catch (I) {
                ({
                  stack: w
                } = I);
              }
              console.warn("Selector " + (r.name || "unknown") + ` returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization`, {
                state: m,
                selected: v,
                selected2: g,
                stack: w
              });
            }
          }
          const p = typeof a > "u" ? y : a;
          if ((p === "always" || p === "once" && b.current) && v === m) {
            let g;
            try {
              throw new Error();
            } catch (w) {
              ({
                stack: g
              } = w);
            }
            console.warn("Selector " + (r.name || "unknown") + ` returned the root state when called. This can lead to unnecessary rerenders.
Selectors that return the entire state are almost certainly a mistake, as they will cause a rerender whenever *anything* in state changes.`, {
              stack: g
            });
          }
          b.current && (b.current = !1);
        }
        return v;
      }
    }[r.name], [r, f, o]), C = iy(l.addNestedSub, u.getState, h || u.getState, S, s);
    return Zw(C), C;
  };
}
const Fe = /* @__PURE__ */ hS();
var yo = { exports: {} }, Se = {};
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Pd;
function dS() {
  if (Pd) return Se;
  Pd = 1;
  var t = typeof Symbol == "function" && Symbol.for, e = t ? Symbol.for("react.element") : 60103, n = t ? Symbol.for("react.portal") : 60106, r = t ? Symbol.for("react.fragment") : 60107, i = t ? Symbol.for("react.strict_mode") : 60108, s = t ? Symbol.for("react.profiler") : 60114, o = t ? Symbol.for("react.provider") : 60109, a = t ? Symbol.for("react.context") : 60110, u = t ? Symbol.for("react.async_mode") : 60111, l = t ? Symbol.for("react.concurrent_mode") : 60111, h = t ? Symbol.for("react.forward_ref") : 60112, f = t ? Symbol.for("react.suspense") : 60113, y = t ? Symbol.for("react.suspense_list") : 60120, b = t ? Symbol.for("react.memo") : 60115, S = t ? Symbol.for("react.lazy") : 60116, C = t ? Symbol.for("react.block") : 60121, m = t ? Symbol.for("react.fundamental") : 60117, v = t ? Symbol.for("react.responder") : 60118, E = t ? Symbol.for("react.scope") : 60119;
  function p(w) {
    if (typeof w == "object" && w !== null) {
      var I = w.$$typeof;
      switch (I) {
        case e:
          switch (w = w.type, w) {
            case u:
            case l:
            case r:
            case s:
            case i:
            case f:
              return w;
            default:
              switch (w = w && w.$$typeof, w) {
                case a:
                case h:
                case S:
                case b:
                case o:
                  return w;
                default:
                  return I;
              }
          }
        case n:
          return I;
      }
    }
  }
  function g(w) {
    return p(w) === l;
  }
  return Se.AsyncMode = u, Se.ConcurrentMode = l, Se.ContextConsumer = a, Se.ContextProvider = o, Se.Element = e, Se.ForwardRef = h, Se.Fragment = r, Se.Lazy = S, Se.Memo = b, Se.Portal = n, Se.Profiler = s, Se.StrictMode = i, Se.Suspense = f, Se.isAsyncMode = function(w) {
    return g(w) || p(w) === u;
  }, Se.isConcurrentMode = g, Se.isContextConsumer = function(w) {
    return p(w) === a;
  }, Se.isContextProvider = function(w) {
    return p(w) === o;
  }, Se.isElement = function(w) {
    return typeof w == "object" && w !== null && w.$$typeof === e;
  }, Se.isForwardRef = function(w) {
    return p(w) === h;
  }, Se.isFragment = function(w) {
    return p(w) === r;
  }, Se.isLazy = function(w) {
    return p(w) === S;
  }, Se.isMemo = function(w) {
    return p(w) === b;
  }, Se.isPortal = function(w) {
    return p(w) === n;
  }, Se.isProfiler = function(w) {
    return p(w) === s;
  }, Se.isStrictMode = function(w) {
    return p(w) === i;
  }, Se.isSuspense = function(w) {
    return p(w) === f;
  }, Se.isValidElementType = function(w) {
    return typeof w == "string" || typeof w == "function" || w === r || w === l || w === s || w === i || w === f || w === y || typeof w == "object" && w !== null && (w.$$typeof === S || w.$$typeof === b || w.$$typeof === o || w.$$typeof === a || w.$$typeof === h || w.$$typeof === m || w.$$typeof === v || w.$$typeof === E || w.$$typeof === C);
  }, Se.typeOf = p, Se;
}
var Ae = {};
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var kd;
function pS() {
  return kd || (kd = 1, process.env.NODE_ENV !== "production" && function() {
    var t = typeof Symbol == "function" && Symbol.for, e = t ? Symbol.for("react.element") : 60103, n = t ? Symbol.for("react.portal") : 60106, r = t ? Symbol.for("react.fragment") : 60107, i = t ? Symbol.for("react.strict_mode") : 60108, s = t ? Symbol.for("react.profiler") : 60114, o = t ? Symbol.for("react.provider") : 60109, a = t ? Symbol.for("react.context") : 60110, u = t ? Symbol.for("react.async_mode") : 60111, l = t ? Symbol.for("react.concurrent_mode") : 60111, h = t ? Symbol.for("react.forward_ref") : 60112, f = t ? Symbol.for("react.suspense") : 60113, y = t ? Symbol.for("react.suspense_list") : 60120, b = t ? Symbol.for("react.memo") : 60115, S = t ? Symbol.for("react.lazy") : 60116, C = t ? Symbol.for("react.block") : 60121, m = t ? Symbol.for("react.fundamental") : 60117, v = t ? Symbol.for("react.responder") : 60118, E = t ? Symbol.for("react.scope") : 60119;
    function p(G) {
      return typeof G == "string" || typeof G == "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      G === r || G === l || G === s || G === i || G === f || G === y || typeof G == "object" && G !== null && (G.$$typeof === S || G.$$typeof === b || G.$$typeof === o || G.$$typeof === a || G.$$typeof === h || G.$$typeof === m || G.$$typeof === v || G.$$typeof === E || G.$$typeof === C);
    }
    function g(G) {
      if (typeof G == "object" && G !== null) {
        var Te = G.$$typeof;
        switch (Te) {
          case e:
            var J = G.type;
            switch (J) {
              case u:
              case l:
              case r:
              case s:
              case i:
              case f:
                return J;
              default:
                var Be = J && J.$$typeof;
                switch (Be) {
                  case a:
                  case h:
                  case S:
                  case b:
                  case o:
                    return Be;
                  default:
                    return Te;
                }
            }
          case n:
            return Te;
        }
      }
    }
    var w = u, I = l, R = a, T = o, A = e, O = h, D = r, N = S, k = b, Y = n, oe = s, ue = i, ae = f, x = !1;
    function L(G) {
      return x || (x = !0, console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.")), $(G) || g(G) === u;
    }
    function $(G) {
      return g(G) === l;
    }
    function U(G) {
      return g(G) === a;
    }
    function B(G) {
      return g(G) === o;
    }
    function H(G) {
      return typeof G == "object" && G !== null && G.$$typeof === e;
    }
    function ie(G) {
      return g(G) === h;
    }
    function K(G) {
      return g(G) === r;
    }
    function V(G) {
      return g(G) === S;
    }
    function j(G) {
      return g(G) === b;
    }
    function Q(G) {
      return g(G) === n;
    }
    function X(G) {
      return g(G) === s;
    }
    function ee(G) {
      return g(G) === i;
    }
    function ge(G) {
      return g(G) === f;
    }
    Ae.AsyncMode = w, Ae.ConcurrentMode = I, Ae.ContextConsumer = R, Ae.ContextProvider = T, Ae.Element = A, Ae.ForwardRef = O, Ae.Fragment = D, Ae.Lazy = N, Ae.Memo = k, Ae.Portal = Y, Ae.Profiler = oe, Ae.StrictMode = ue, Ae.Suspense = ae, Ae.isAsyncMode = L, Ae.isConcurrentMode = $, Ae.isContextConsumer = U, Ae.isContextProvider = B, Ae.isElement = H, Ae.isForwardRef = ie, Ae.isFragment = K, Ae.isLazy = V, Ae.isMemo = j, Ae.isPortal = Q, Ae.isProfiler = X, Ae.isStrictMode = ee, Ae.isSuspense = ge, Ae.isValidElementType = p, Ae.typeOf = g;
  }()), Ae;
}
var Od;
function mS() {
  return Od || (Od = 1, process.env.NODE_ENV === "production" ? yo.exports = dS() : yo.exports = pS()), yo.exports;
}
var sy = mS(), gS = {
  $$typeof: !0,
  render: !0,
  defaultProps: !0,
  displayName: !0,
  propTypes: !0
}, yS = {
  $$typeof: !0,
  compare: !0,
  defaultProps: !0,
  displayName: !0,
  propTypes: !0,
  type: !0
}, oy = {};
oy[sy.ForwardRef] = gS;
oy[sy.Memo] = yS;
var Re = {};
/**
 * @license React
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Dd;
function vS() {
  if (Dd) return Re;
  Dd = 1;
  var t = Symbol.for("react.element"), e = Symbol.for("react.portal"), n = Symbol.for("react.fragment"), r = Symbol.for("react.strict_mode"), i = Symbol.for("react.profiler"), s = Symbol.for("react.provider"), o = Symbol.for("react.context"), a = Symbol.for("react.server_context"), u = Symbol.for("react.forward_ref"), l = Symbol.for("react.suspense"), h = Symbol.for("react.suspense_list"), f = Symbol.for("react.memo"), y = Symbol.for("react.lazy"), b = Symbol.for("react.offscreen"), S;
  S = Symbol.for("react.module.reference");
  function C(m) {
    if (typeof m == "object" && m !== null) {
      var v = m.$$typeof;
      switch (v) {
        case t:
          switch (m = m.type, m) {
            case n:
            case i:
            case r:
            case l:
            case h:
              return m;
            default:
              switch (m = m && m.$$typeof, m) {
                case a:
                case o:
                case u:
                case y:
                case f:
                case s:
                  return m;
                default:
                  return v;
              }
          }
        case e:
          return v;
      }
    }
  }
  return Re.ContextConsumer = o, Re.ContextProvider = s, Re.Element = t, Re.ForwardRef = u, Re.Fragment = n, Re.Lazy = y, Re.Memo = f, Re.Portal = e, Re.Profiler = i, Re.StrictMode = r, Re.Suspense = l, Re.SuspenseList = h, Re.isAsyncMode = function() {
    return !1;
  }, Re.isConcurrentMode = function() {
    return !1;
  }, Re.isContextConsumer = function(m) {
    return C(m) === o;
  }, Re.isContextProvider = function(m) {
    return C(m) === s;
  }, Re.isElement = function(m) {
    return typeof m == "object" && m !== null && m.$$typeof === t;
  }, Re.isForwardRef = function(m) {
    return C(m) === u;
  }, Re.isFragment = function(m) {
    return C(m) === n;
  }, Re.isLazy = function(m) {
    return C(m) === y;
  }, Re.isMemo = function(m) {
    return C(m) === f;
  }, Re.isPortal = function(m) {
    return C(m) === e;
  }, Re.isProfiler = function(m) {
    return C(m) === i;
  }, Re.isStrictMode = function(m) {
    return C(m) === r;
  }, Re.isSuspense = function(m) {
    return C(m) === l;
  }, Re.isSuspenseList = function(m) {
    return C(m) === h;
  }, Re.isValidElementType = function(m) {
    return typeof m == "string" || typeof m == "function" || m === n || m === i || m === r || m === l || m === h || m === b || typeof m == "object" && m !== null && (m.$$typeof === y || m.$$typeof === f || m.$$typeof === s || m.$$typeof === o || m.$$typeof === u || m.$$typeof === S || m.getModuleId !== void 0);
  }, Re.typeOf = C, Re;
}
var Ce = {};
/**
 * @license React
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Nd;
function _S() {
  return Nd || (Nd = 1, process.env.NODE_ENV !== "production" && function() {
    var t = Symbol.for("react.element"), e = Symbol.for("react.portal"), n = Symbol.for("react.fragment"), r = Symbol.for("react.strict_mode"), i = Symbol.for("react.profiler"), s = Symbol.for("react.provider"), o = Symbol.for("react.context"), a = Symbol.for("react.server_context"), u = Symbol.for("react.forward_ref"), l = Symbol.for("react.suspense"), h = Symbol.for("react.suspense_list"), f = Symbol.for("react.memo"), y = Symbol.for("react.lazy"), b = Symbol.for("react.offscreen"), S = !1, C = !1, m = !1, v = !1, E = !1, p;
    p = Symbol.for("react.module.reference");
    function g(J) {
      return !!(typeof J == "string" || typeof J == "function" || J === n || J === i || E || J === r || J === l || J === h || v || J === b || S || C || m || typeof J == "object" && J !== null && (J.$$typeof === y || J.$$typeof === f || J.$$typeof === s || J.$$typeof === o || J.$$typeof === u || // This needs to include all possible module reference object
      // types supported by any Flight configuration anywhere since
      // we don't know which Flight build this will end up being used
      // with.
      J.$$typeof === p || J.getModuleId !== void 0));
    }
    function w(J) {
      if (typeof J == "object" && J !== null) {
        var Be = J.$$typeof;
        switch (Be) {
          case t:
            var me = J.type;
            switch (me) {
              case n:
              case i:
              case r:
              case l:
              case h:
                return me;
              default:
                var ye = me && me.$$typeof;
                switch (ye) {
                  case a:
                  case o:
                  case u:
                  case y:
                  case f:
                  case s:
                    return ye;
                  default:
                    return Be;
                }
            }
          case e:
            return Be;
        }
      }
    }
    var I = o, R = s, T = t, A = u, O = n, D = y, N = f, k = e, Y = i, oe = r, ue = l, ae = h, x = !1, L = !1;
    function $(J) {
      return x || (x = !0, console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.")), !1;
    }
    function U(J) {
      return L || (L = !0, console.warn("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.")), !1;
    }
    function B(J) {
      return w(J) === o;
    }
    function H(J) {
      return w(J) === s;
    }
    function ie(J) {
      return typeof J == "object" && J !== null && J.$$typeof === t;
    }
    function K(J) {
      return w(J) === u;
    }
    function V(J) {
      return w(J) === n;
    }
    function j(J) {
      return w(J) === y;
    }
    function Q(J) {
      return w(J) === f;
    }
    function X(J) {
      return w(J) === e;
    }
    function ee(J) {
      return w(J) === i;
    }
    function ge(J) {
      return w(J) === r;
    }
    function G(J) {
      return w(J) === l;
    }
    function Te(J) {
      return w(J) === h;
    }
    Ce.ContextConsumer = I, Ce.ContextProvider = R, Ce.Element = T, Ce.ForwardRef = A, Ce.Fragment = O, Ce.Lazy = D, Ce.Memo = N, Ce.Portal = k, Ce.Profiler = Y, Ce.StrictMode = oe, Ce.Suspense = ue, Ce.SuspenseList = ae, Ce.isAsyncMode = $, Ce.isConcurrentMode = U, Ce.isContextConsumer = B, Ce.isContextProvider = H, Ce.isElement = ie, Ce.isForwardRef = K, Ce.isFragment = V, Ce.isLazy = j, Ce.isMemo = Q, Ce.isPortal = X, Ce.isProfiler = ee, Ce.isStrictMode = ge, Ce.isSuspense = G, Ce.isSuspenseList = Te, Ce.isValidElementType = g, Ce.typeOf = w;
  }()), Ce;
}
process.env.NODE_ENV === "production" ? vS() : _S();
lS(iS.useSyncExternalStoreWithSelector);
oS(sE);
function At(t) {
  const { name: e, default: n, id: r, actions: i, uniques: s = [], onSave: o, onRead: a } = t, u = W0({
    selectId: (m) => m[r]
  }), l = u.getSelectors(), h = u.getInitialState({
    saved: !0,
    status: "idle",
    writeStatus: "ready",
    id: r,
    name: e,
    loadingTime: 600,
    changed: !1
  });
  function f(m, v) {
    const E = Object.values(v), p = Object.values(m).map((w) => {
      const I = typeof n == "function" ? n(v, w) : n;
      return Mm(w, I || {});
    });
    if (!s.length)
      return p;
    const g = [...E, ...p.filter(Boolean)];
    return p.filter((w, I) => !g.slice(0, I).find((A) => s.some((O) => Array.isArray(O) ? O.every((D) => (A == null ? void 0 : A[D]) == (w == null ? void 0 : w[D])) : (A == null ? void 0 : A[O]) == w[O])));
  }
  const y = Oa({
    name: e,
    initialState: h,
    reducers: {
      set(m, { payload: v = [] }) {
        u.setAll(m, f(v, m));
      },
      add(m, { payload: v = [] }) {
        const E = f(v, m);
        u.addMany(m, E), E.length && (m.changed = !0);
      },
      remove(m, { payload: v = [] }) {
        v.some((p) => m.ids.includes(p)) && (m.changed = !0), u.removeMany(m, v);
      },
      update(m, { payload: v = [] }) {
        v.map(({ id: g }) => g).some((g) => m.ids.includes(g)) && (m.changed = !0), u.updateMany(m, v);
      },
      reset(m) {
        m.ids.length || (m.changed = !0), u.removeAll(m);
      },
      upsert(m, { payload: v = [] }) {
        u.upsertMany(m, v), m.changed = !0;
      },
      changeStatus(m, { payload: v }) {
        m.status = v;
      },
      setLoadingTime(m, { payload: v }) {
        m.loadingTime = v;
      },
      setChanged(m, { payload: v }) {
        m.changed = v;
      },
      changeWriteStatus(m, { payload: v }) {
        m.writeStatus = v;
      },
      ...i
    }
  }), b = {
    getFull() {
      return Fe((v) => v[e]);
    },
    getIds() {
      return Fe((v) => l.selectIds(v[e]));
    },
    getId() {
      return Fe((v) => v[e].id);
    },
    remove(m) {
      de.dispatch(y.actions.remove(m));
    },
    add(m) {
      de.dispatch(y.actions.add(m));
    },
    upsert(m) {
      de.dispatch(y.actions.upsert(m));
    },
    getOne(m) {
      return Fe((v) => {
        const E = l.selectById(v[e], m);
        return typeof E > "u" ? void 0 : E;
      });
    },
    setOne(m, v) {
      de.dispatch(
        y.actions.update([
          {
            id: m,
            changes: v
          }
        ])
      );
    },
    setWriteStatus(m = "ready") {
      de.dispatch(y.actions.changeWriteStatus(m));
    },
    useOne(m) {
      const v = b.getOne(m);
      return Lm(
        v,
        (E) => E !== void 0 && b.setOne(m, E),
        (E) => E ?? void 0
      );
    },
    getOneFeild(m, v) {
      return Fe((p) => {
        var w;
        const g = (w = l.selectById(p[e], m)) == null ? void 0 : w[v];
        return typeof g > "u" ? void 0 : g;
      });
    },
    setOneFeild(m, v, E) {
      de.dispatch(
        y.actions.update([
          {
            id: m,
            changes: {
              [v]: E
            }
          }
        ])
      );
    },
    useOneFeild(m, v) {
      const E = b.getOneFeild(m, v);
      return Lm(
        E,
        (g) => {
          g != null && b.setOneFeild(m, v, g);
        },
        (g) => g
      );
    },
    getOneFeilds(m, v) {
      return Fe((p) => {
        const g = l.selectById(p[e], m);
        if (!g)
          return;
        const w = {};
        return v.forEach((I) => {
          w[I] = g[I];
        }), w;
      });
    },
    getAll() {
      return Fe((v) => l.selectAll(v[e]));
    },
    setAll(m) {
      de.dispatch(y.actions.set(m));
    },
    useAll() {
      const m = b.getAll(), v = _t(m);
      return ne.useEffect(() => {
        b.setAll(v.get);
      }, [v.get]), ne.useEffect(() => {
        v.set(m);
      }, [m]), v;
    },
    getWriteStatus() {
      return Fe((v) => v[e].writeStatus);
    },
    useWriteStatus() {
      const m = b.getWriteStatus(), v = _t(m);
      return ne.useEffect(() => {
        b.setWriteStatus(v.get);
      }, [v.get]), ne.useEffect(() => {
        v.set(m);
      }, [m]), v;
    },
    getStatus() {
      return Fe((v) => v[e].status);
    },
    setStatus(m) {
      de.dispatch(y.actions.changeStatus(m));
    },
    useStatus() {
      const m = b.getStatus(), v = _t(m);
      return ne.useEffect(() => {
        b.setStatus(v.get);
      }, [v.get]), ne.useEffect(() => {
        v.set(m);
      }, [m]), v;
    },
    getEntity() {
      return Fe((v) => l.selectEntities(v[e]));
    },
    getLoadingTime() {
      return Fe((v) => v[e].loadingTime);
    },
    setLoadingTime(m) {
      de.dispatch(y.actions.setLoadingTime(m));
    },
    useLoadingTime() {
      const m = b.getLoadingTime(), v = _t(m);
      ne.useEffect(() => {
        b.setLoadingTime(v.get);
      }, [v.get]), ne.useEffect(() => {
        v.set(m);
      }, [m]);
    },
    getChanged() {
      return Fe((v) => v[e].changed);
    },
    setChanged(m) {
      de.dispatch(y.actions.setChanged(m));
    },
    useChanged() {
      const m = b.getChanged(), v = _t(m);
      ne.useEffect(() => {
        b.setChanged(v.get);
      }, [v.get]), ne.useEffect(() => {
        v.set(m);
      }, [m]);
    }
  };
  function S() {
    const m = b.getStatus(), v = b.getId(), E = b.getWriteStatus(), p = b.getLoadingTime();
    return bi(async () => {
      if (m == "idle") {
        const g = new ya();
        g.clear(), b.setStatus("loading"), await g.start(p);
        try {
          if (!a)
            return;
          let w = a();
          w instanceof Promise && (w = await w), b.setChanged(!1), b.setStatus("success"), b.setAll(w);
        } catch {
          b.setAll([]), b.setStatus("error");
        }
      }
    }, [m]), bi(async () => {
      if (E == "idle") {
        b.setWriteStatus("loading");
        const g = {};
        try {
          const w = de.getState(), { [e]: I } = w;
          Object.values(I.entities).forEach((T) => {
            if (!T)
              return;
            const { [v]: A, ...O } = T;
            g[A] = O;
          });
          const R = o == null ? void 0 : o(g, t, w);
          R instanceof Promise && await R, b.setWriteStatus("success"), b.setWriteStatus("ready");
        } catch {
          b.setWriteStatus("error");
        }
      }
    }, [E]), ne.useEffect(() => {
      const g = Object.entries(t.data || {}).map(([w, I]) => ({
        [v]: w,
        ...I
      }));
      b.setAll(g);
    }, []), { id: v, saved: E, status: m, timeLoading: p };
  }
  return {
    slice: y,
    entity: u,
    hooks: b,
    entitySelect: l,
    initialState: h,
    init: S,
    select: (m) => m[e]
  };
}
const wS = {
  data: {
    settings: {
      focused: "user",
      label: "settings controler",
      tabs: {
        user: {
          icon: {
            value: "faTools"
          }
        },
        keyboardShortcuts: {
          icon: {
            value: "faKeyboard"
          },
          news: {
            value: "faKeyboard"
          }
        },
        icons: {
          icon: { value: "faIcons" }
        },
        colors: {
          icon: {
            value: "faPenRuler",
            type: "solid"
          }
        }
      }
    },
    "settings.viewType": {
      focused: "list",
      label: "settings layout",
      tab: {
        list: {},
        tree: {}
      }
    }
  }
}, { data: ES } = wS, bS = {
  name: "views",
  id: "viewId",
  default(t, e) {
    const n = e.tabs || {};
    for (const r in n)
      n[r].label || (n[r].label = r);
    return {
      viewId: Et(),
      focused: null,
      tabs: n
    };
  },
  data: ES
}, { hooks: ay, slice: xd, init: jL, select: $L } = At(bS);
function BL(t) {
  const e = ay.getOne(t);
  return ne.useMemo(() => {
    var n;
    return typeof (e == null ? void 0 : e.focused) == "number" ? (n = e == null ? void 0 : e.tabs) == null ? void 0 : n[e.focused] : null;
  }, [e]);
}
const TS = {
  id: "treeId",
  name: "tree",
  default: {
    expanded: {},
    separator: "/"
  },
  actions: {
    next(t, { payload: e }) {
      t.entities[e];
    },
    back(t, { payload: e }) {
      t.entities[e];
    },
    toggleExpand(t, { payload: e }) {
      var r;
      const n = t.entities[e];
      n && n.focused && (n.expanded = {
        ...n.expanded || {},
        [n.focused]: !((r = n.expanded) != null && r[n.focused])
      });
    },
    expandMore(t, { payload: e }) {
      const n = t.entities[e];
      n && n.focused && (n.expanded = {
        ...n.expanded || {},
        [n.focused]: !0
      });
    },
    expandLess(t, { payload: e }) {
      const n = t.entities[e];
      n && n.focused && (n.expanded = {
        ...n.expanded || {},
        [n.focused]: !1
      });
    },
    focusParent(t, { payload: e }) {
      const n = t.entities[e];
      if (n && n.focused && n.separator) {
        const r = n.focused.split(n.separator).slice(0, -1).join(n.separator);
        n.focused = r || null;
      }
    },
    focusLeft(t, { payload: e }) {
      var r;
      const n = t.entities[e];
      if (n && n.focused && n.separator)
        if ((r = n.expanded) == null ? void 0 : r[n.focused])
          n.expanded = {
            ...n.expanded || {},
            [n.focused]: !1
          };
        else {
          const s = n.focused.split(n.separator).slice(0, -1).join(n.separator);
          n.focused = s || null;
        }
    },
    focusRight(t, { payload: e }) {
      var r;
      const n = t.entities[e];
      if (n && n.focused && n.separator)
        if (!((r = n.expanded) == null ? void 0 : r[n.focused]))
          n.expanded = {
            ...n.expanded || {},
            [n.focused]: !0
          };
        else {
          const s = [...n.focused.split(n.separator), "0"].join(n.separator);
          n.focused = s;
        }
    }
  },
  data: {}
}, { init: qL, hooks: Ld, slice: Md } = At(TS);
function zL(t) {
  const e = Ld.getOne(t);
  ne.useEffect(() => {
    e || Ld.add([
      {
        treeId: t,
        ends: []
      }
    ]);
  }, [e]);
}
const IS = {
  content: null,
  position: null,
  x: "left",
  y: "bottom"
}, hi = Oa({
  initialState: IS,
  name: "title",
  reducers: {
    // actions
    setContent(t, { payload: e }) {
      t.content = e;
    },
    setPosition(t, { payload: e }) {
      t.position = e;
    },
    setX(t, { payload: e }) {
      t.x = e;
    },
    setY(t, { payload: e }) {
      t.y = e;
    }
  }
});
function KL(t) {
  de.dispatch(hi.actions.setContent(t));
}
function HL() {
  return Fe((e) => e.title.content, tr);
}
function GL(t) {
  de.dispatch(hi.actions.setPosition(t));
}
function WL() {
  return Fe((e) => e.title.position, tr);
}
function QL(t = "left") {
  de.dispatch(hi.actions.setX(t));
}
function YL() {
  return Fe((e) => e.title.x, tr);
}
function JL(t = "bottom") {
  de.dispatch(hi.actions.setY(t));
}
function XL() {
  return Fe((e) => e.title.y, tr);
}
const SS = {
  id: "id",
  name: "toasts",
  default: () => ({
    id: Et(),
    type: "info"
  })
}, { hooks: AS, init: ZL, select: eM, slice: Vd, entity: tM } = At(SS), Fr = {
  id: "slotId",
  name: "slot",
  default: {
    slotId: Et(14),
    focused: null,
    submited: null,
    selected: {},
    skiped: {},
    length: 0,
    direction: null,
    redirect: !0
  },
  actions: {
    changeSelectIndexs(t, {
      payload: { name: e, items: n = {} }
    }) {
      const r = t.entities[e];
      r && (r.selected = { ...n });
    },
    removeSelection(t, { payload: e }) {
      t.entities[e] && RS.updateOne(t, {
        id: e,
        changes: {
          ...t.entities[e],
          selected: {}
        }
      });
    },
    next(t, { payload: e }) {
      var i;
      const n = t.entities[e];
      if (!n || !n.length) {
        n && (n.focused = null);
        return;
      }
      const { redirect: r = !0 } = n;
      n.direction = "forward", typeof n.focused != "number" && (n.focused = -1);
      do
        n.focused++, r ? n.focused = Math.abs(n.focused) % n.length : n.focused >= n.length && n.focused--;
      while ((i = n.skiped) != null && i[n.focused]);
    },
    back(t, { payload: e }) {
      var i;
      const n = t.entities[e];
      if (!n || !n.length) {
        n && (n.focused = null);
        return;
      }
      const { redirect: r = !0 } = n;
      n.direction = "backward", typeof n.focused != "number" && (n.focused = n.length);
      do
        n.focused--, n.focused < 0 && r ? n.focused = n.length - 1 : n.focused < 0 && (n.focused = 0);
      while ((i = n.skiped) != null && i[n.focused]);
    },
    submit(t, { payload: e }) {
      const n = t.entities[e];
      n && (n.submited = n.focused);
    },
    submitNext(t, { payload: e }) {
      var i;
      const n = t.entities[e];
      if (!n || !n.length) {
        n && (n.submited = null);
        return;
      }
      const { redirect: r = !0 } = n;
      n.direction = "forward", typeof n.submited != "number" && (n.submited = -1);
      do
        n.submited++, r && (n.submited = n.submited % n.length);
      while ((i = n.skiped) != null && i[n.submited]);
    },
    submitBack(t, { payload: e }) {
      var i;
      const n = t.entities[e];
      if (!n || !n.length) {
        n && (n.submited = null);
        return;
      }
      const { redirect: r = !0 } = n;
      n.direction = "backward", typeof n.submited != "number" && (n.submited = n.length);
      do
        n.submited--, r && (n.submited = n.submited % n.length), n.submited < 0 && (n.submited = n.length - 1);
      while ((i = n.skiped) != null && i[n.submited]);
    },
    submitForce(t, { payload: { name: e, index: n = null } }) {
      const r = t.entities[e];
      r && (r.focused = n, r.submited = n);
    },
    escape(t, { payload: e }) {
      const n = t.entities[e];
      n && (n.selected = {}, n.focused = null, n.direction = null, n.submited = null);
    },
    selectAll(t, { payload: e }) {
      const n = t.entities[e];
      if (!n)
        return;
      const r = {};
      eE(0, Number(n.length) - 1, 1).forEach((i) => {
        r[i] = !0;
      }), n.selected = r, n.direction = null;
    }
  }
}, { hooks: ko, slice: Fd, entity: RS, init: nM } = At(Fr);
function rM(t) {
  de.dispatch({
    type: `${Fr.name}/next`,
    payload: t
  });
}
function iM(t) {
  return de.dispatch({
    type: `${Fr.name}/back`,
    payload: t
  });
}
function sM(t) {
  return de.dispatch({
    type: `${Fr.name}/escape`,
    payload: t
  });
}
function oM(t) {
  de.dispatch({ type: `${Fr.name}/submit`, payload: t });
}
function aM(t) {
  de.dispatch({ type: `${Fr.name}/submitNext`, payload: t });
}
function cM(t) {
  de.dispatch({ type: `${Fr.name}/submitBack`, payload: t });
}
function uM(t, e) {
  const n = ko.getOne(t);
  ne.useEffect(() => {
    n || ko.upsert([
      {
        slotId: t,
        length: e.length
      }
    ]);
  }, [n, e]), ne.useEffect(() => {
    ko.setOneFeild(t, "length", e.length);
  }, [e]);
}
function lM(t, e, n = "submited") {
  const r = ko.getOneFeild(e, n);
  return ne.useMemo(() => typeof r != "number" ? null : t[r] || null, [r, t]);
}
const CS = {
  data: {
    "preferences/animation.boolean": {
      def: !0,
      desc: "animation in the preferences",
      name: "animation in preferences"
    },
    "preferences/fastScrollKey.enum": {
      config: {
        list: [
          {
            value: "alt"
          },
          {
            value: "control"
          },
          {
            value: "shift"
          }
        ]
      },
      def: "alt",
      desc: "is one between this keys ${state.settings.entities['preferences/fastScrollKey.enum']?.config.list.map(({ value })=> '**' + value + '**').join(' , ')} and when press one of them the scrolling gona be faster",
      name: "speed scrolling meta key"
    },
    "preferences/font.enum": {
      config: {
        list: [
          {
            content: "Outfit",
            value: "Outfit"
          },
          {
            content: "Karla",
            value: "Karla"
          },
          {
            content: "arial",
            value: "arial"
          },
          {
            content: "times new roman",
            value: "times new roman"
          },
          {
            content: "verdana",
            value: "verdana"
          },
          {
            content: "tahoma",
            value: "tahoma"
          },
          {
            content: "georgia",
            value: "georgia"
          },
          {
            content: "courier new",
            value: "courier new"
          },
          {
            content: "lucida console",
            value: "lucida console"
          },
          {
            content: "impact",
            value: "impact"
          },
          {
            content: "comic sans ms",
            value: "comic sans ms"
          },
          {
            content: "system ui",
            value: "system-ui"
          }
        ]
      },
      def: "Outfit",
      desc: "change one between this fonts ${state.settings.entities['preferences/font.enum']?.config.list.map(({ content })=> '`' + content + '`').join(' , ')}",
      name: "change font of app"
    },
    "preferences/toastTime.number": {
      config: {
        max: 10,
        min: 1
      },
      def: 6,
      desc: "is in `second`",
      name: "time of toast done"
    },
    "settings/findBy.enum": {
      config: {
        list: [
          {
            content: "setting id",
            value: "settingId"
          },
          {
            value: "setting"
          },
          {
            value: "name"
          }
        ]
      },
      def: "name",
      desc: "the method of how to find \\`setting\\` using one of this:\n${state.settings.entities['settings/findBy.enum']?.config?.list?.map((item)=> '**' + item + '**' ).join(' or ')}",
      name: "find settings using ?"
    },
    "toast/position.enum": {
      config: {
        list: [
          {
            content: "top",
            value: "top"
          },
          {
            content: "bottom",
            value: "bottom"
          }
        ]
      },
      def: "top",
      desc: "the position of the toast is one between ${state.settings.entities['toast/position.enum']?.config.list.map(({ content })=> '`' + content + '`').join(' , ')}",
      name: "toast position"
    },
    "visibility/configurations.boolean": {
      def: !1,
      desc: "hide or visible the configurations view",
      name: "visibility of configurations view",
      private: !0
    },
    "visibility/header.boolean": {
      def: !0,
      name: "header view visibility"
    },
    "visibility/headerNotifays.boolean": {
      def: !1,
      name: "header panel notifications visibility",
      private: !0
    },
    "visibility/keyPanding/form.boolean": {
      def: !1,
      private: !0
    },
    "visibility/leftSide.boolean": {
      def: !1,
      desc: "viibility of **left side**  component",
      name: "left side visibility"
    },
    "visibility/notifays.boolean": {
      def: !1,
      desc: "visibility of **notification** view",
      name: "notification visibility",
      private: !0
    },
    "visibility/notifays/nots.boolean": {
      def: !1,
      private: !0
    },
    "visibility/rightSide.boolean": {
      def: !1,
      desc: "visibility of **right side** component",
      name: "right side visibility"
    },
    "window/dark.boolean": {
      config: {
        style: "checkbox"
      },
      def: !1,
      desc: "change the theme of the app to dark mode",
      name: "dark mode"
    },
    "window/lang.enum": {
      config: {
        list: [
          {
            content: "arabic",
            value: "ar"
          },
          {
            content: "france",
            value: "fr"
          },
          {
            content: "englich",
            value: "en"
          },
          {
            content: "espaniche",
            value: "es"
          },
          {
            content: "india",
            value: "hi"
          },
          {
            content: "japanese",
            value: "ja"
          },
          {
            content: "russian",
            value: "ru"
          }
        ]
      },
      def: "en",
      desc: "change one between this langs ${state.settings.entities['window/lang.enum']?.config.list.map(({ content })=> '`' + content + '`').join(' , ')}",
      name: "change lang of app"
    },
    "preferences/scrollAnimation.boolean.boolean": {
      def: !1,
      desc: "scrolling with animation",
      name: "scroll animation"
    },
    "visibility/keyboard.boolean": {
      name: "Keyboard Visibility",
      desc: "The Visibility Of Keyboard Screen",
      def: !1
    },
    "notification/clearAllConfirmation.boolean": {
      name: "clear all notifications",
      desc: "ask before clearing all notifications",
      def: !0
    }
  }
}, { data: PS } = CS, kS = {
  name: "settings",
  id: "settingId",
  default(t, { def: e }) {
    return {
      private: !1,
      deperacted: !1,
      config: {},
      value: e
    };
  },
  actions: {
    toggle(t, { payload: e }) {
      const n = t.entities[e];
      n && (n.value = !n.value);
    }
  },
  data: PS
}, { hooks: Zt, slice: Ud, init: fM, entitySelect: hM } = At(kS), OS = {
  name: "positions",
  id: "positionId",
  default: {
    bottom: 0,
    left: 0,
    right: 0,
    top: 0,
    x: 0,
    y: 0,
    width: 0,
    height: 0
  }
}, { entity: dM, slice: jd, hooks: pM, entitySelect: mM, init: gM } = At(OS), DS = "object", NS = {
  data: {},
  settings: {
    saved: !0,
    status: "idle",
    reloaded: !0,
    watch: !0,
    ignoreAccess: []
  }
}, Rr = Oa({
  initialState: NS,
  name: DS,
  reducers: {
    setValue(t, { payload: e }) {
      const n = t.settings.ignoreAccess.find(({ dir: o }) => e.direction == o);
      if (n && n.pass != e.pass) {
        rn.warn(`Cannot Access Direction ${e.direction}`);
        return;
      }
      const r = e.direction.split(".").filter(Boolean);
      if (!r.length) {
        t.data = e.value;
        return;
      }
      let i = t.data;
      r.slice(0, -1).forEach((o) => {
        let a = i[o];
        a == null && e.force && (i[o] = {}, a = i[o]), i = a;
      });
      const s = r.at(-1);
      i[s] = e.value;
    },
    save(t, { payload: e = !1 }) {
      t.settings.saved = e;
    },
    reload(t, { payload: e = !1 }) {
      t.settings.reloaded = e;
    },
    addIgnoreAccess(t, { payload: e }) {
      e.forEach(({ dir: n, pass: r }) => {
        t.settings.ignoreAccess.find((s) => s.dir == n && r == s.pass) || t.settings.ignoreAccess.push({
          dir: n,
          pass: r
        });
      });
    },
    removeIgnoreAccess(t, { payload: e }) {
      e.forEach(({ dir: n, pass: r }) => {
        const i = t.settings.ignoreAccess.findIndex((s) => s.dir == n && r == s.pass);
        i >= 0 && t.settings.ignoreAccess.splice(i, 1);
      });
    }
  }
}), yM = () => Fe((e) => e.object.settings.saved), vM = () => Fe((e) => e.object.settings.watch), _M = () => Fe((e) => e.object.settings.reloaded), wM = () => Fe((e) => e.object.settings.status), EM = () => {
  de.dispatch(Rr.actions.reload(!1));
}, bM = () => {
  de.dispatch(Rr.actions.reload(!0));
}, TM = () => {
  de.dispatch(Rr.actions.save(!1));
}, IM = () => {
  de.dispatch(Rr.actions.save(!0));
};
function Da(t) {
  return Fe((n) => {
    const { isValide: r, value: i } = va(n.object.data, t);
    return r ? i : null;
  }, tr);
}
function Gn(t, e) {
  de.dispatch(
    Rr.actions.setValue({
      value: e,
      direction: t,
      force: !0
    })
  );
}
function xS(t) {
  const e = Da(t), n = _t(e);
  return ne.useEffect(() => {
    Gn(t, n.get);
  }, [n.get]), ne.useEffect(() => {
    n.set(e);
  }, [e]), n;
}
function LS(t, e) {
  const n = (e || de.getState()).object.data, { isValide: r, value: i } = va(n, t);
  return r ? i : null;
}
const MS = {
  data: {}
}, { data: VS } = MS, FS = {
  id: "id",
  name: "notifications",
  default: () => ({
    id: Et(),
    desc: void 0,
    removable: !0,
    status: "idle",
    showDesc: !1,
    type: "info",
    buttons: []
  }),
  data: VS
}, { hooks: vs, init: SM, select: AM, slice: $d, entity: RM } = At(FS);
function cy() {
  Zt.setOneFeild("visibility/notifays.boolean", "value", !0), Zt.setOneFeild("visibility/notifays/nots.boolean", "value", !0);
}
function uy() {
  Zt.setOneFeild("visibility/notifays.boolean", "value", !1), Zt.setOneFeild("visibility/notifays/nots.boolean", "value", !1);
}
async function CM(t, e = {}) {
  const n = Mm(e, {
    open: !0,
    close: !0,
    time: 2e3
  });
  n != null && n.open && cy();
  const r = {
    id: Et(),
    title: " - ",
    ...t
  };
  vs.upsert([r]), await Vm(n.time), vs.remove([r.id]), n != null && n.close && uy();
}
async function PM(t, e) {
  const n = e();
  return n instanceof Promise ? new Promise(async (r, i) => {
    cy(), vs.upsert([t]), n.then(r).catch(i).finally(() => {
      vs.remove([t.id]), uy();
    });
  }) : n;
}
const US = {
  id: "logId",
  name: "logs",
  data: {},
  default: () => ({
    logId: Et(10),
    desc: "",
    type: "INFO",
    category: "window",
    showDesc: !1,
    createdAt: (/* @__PURE__ */ new Date()).toISOString()
  })
}, { entity: kM, slice: Bd, init: OM, hooks: DM } = At(US), jS = {
  data: {
    "ar->add": {
      value: "إضافة"
    },
    "ar->calculate-zakat": {
      value: "احسب الزكاة"
    },
    "ar->change": {
      value: "التغيير"
    },
    "ar->Choise-Image": {
      value: "اختيار الصورة"
    },
    "ar->clear": {
      value: "واضح"
    },
    "ar->clear-all": {
      value: "امسح الكل"
    },
    "ar->close-session": {
      value: "إغلاق الجلسة"
    },
    "ar->codes": {
      value: "رموز"
    },
    "ar->colors": {
      value: "الوان"
    },
    "ar->commands": {
      value: "الأوامر"
    },
    "ar->count": {
      value: "عد"
    },
    "ar->create-at": {
      value: "أنشئ في"
    },
    "ar->created-at": {
      value: "أنشئ في"
    },
    "ar->Data-Base": {
      value: "قاعدة بيانات"
    },
    "ar->desc": {
      value: "الوصف"
    },
    "ar->description": {
      value: "الوصف"
    },
    "ar->deshboard": {
      value: "لوحة القيادة"
    },
    "ar->done": {
      value: "تم"
    },
    "ar->done-at": {
      value: "تمت في"
    },
    "ar->email": {
      value: "البريد الإلكتروني"
    },
    "ar->facebook-not-defined": {
      value: "facebook غير معرفة"
    },
    "ar->feedbacks-and-about": {
      value: "ردود الفعل وحول"
    },
    "ar->for-create-one": {
      value: "لطلب واحدة"
    },
    "ar->found": {
      value: "مُستَخرَج"
    },
    "ar->fuateurs": {
      value: "المتابعون"
    },
    "ar->full-name": {
      value: "الاسم الكامل"
    },
    "ar->get-start": {
      value: "ابدأ"
    },
    "ar->home": {
      value: "الصفحة الرئيسية"
    },
    "ar->i'm-give-the-author": {
      value: "أنا أعطي المؤلف"
    },
    "ar->icons": {
      value: "الأيقونات"
    },
    "ar->id": {
      value: "هوية"
    },
    "ar->keyboard-shortcuts": {
      value: "اختصارات لوحة المفاتيح"
    },
    "ar->keyboardShortcuts": {
      value: "اختصارات لوحة المفاتيح"
    },
    "ar->load-extra-files": {
      value: "تحميل ملفات إضافية"
    },
    "ar->loading": {
      value: "تحميل"
    },
    "ar->log-out": {
      value: "تسجيل الخروج"
    },
    "ar->name": {
      value: "الاسم"
    },
    "ar->no-base-url-choised": {
      value: "لا يوجد اختيارات لقاعدة URL"
    },
    "ar->no-image": {
      value: "لا توجد صورة"
    },
    "ar->no-markdown-content": {
      value: "لا يوجد محتوى تخفيض"
    },
    "ar->no-name-defined": {
      value: "لم يُحدد أي اسم"
    },
    "ar->no-result": {
      value: "لا يوجد نتيجة"
    },
    "ar->no-suggestions": {
      value: "لا يوجد اقتراحات"
    },
    "ar->notifications": {
      value: "الإشعارات"
    },
    "ar->open-exsiting-store": {
      value: "فتح متجر موجود"
    },
    "ar->open-new-store": {
      value: "فتح مخزن جديد"
    },
    "ar->open-notifications-view": {
      value: "عرض إشعارات مفتوحة"
    },
    "ar->or-press": {
      value: "أو اضغط"
    },
    "ar->pannel-save-view": {
      value: "حفظ عرض لوحة"
    },
    "ar->partage-store": {
      value: "مخزن المشاركة"
    },
    "ar->pay": {
      value: "ادفع"
    },
    "ar->payment": {
      value: "دفع"
    },
    "ar->payment-": {
      value: "الدفع"
    },
    "ar->payments": {
      value: "المدفوعات"
    },
    "ar->press-?-for-help": {
      value: "اضغط؟ للمساعدة"
    },
    "ar->print": {
      value: "طباعة"
    },
    "ar->privacy": {
      value: "الخصوصية"
    },
    "ar->private": {
      value: "خاص"
    },
    "ar->public": {
      value: "عام"
    },
    "ar->reload-window": {
      value: "إعادة تحميل النافذة"
    },
    "ar->reset": {
      value: "تعيين القيم الافتراضية"
    },
    "ar->reset-base-url": {
      value: "إعادة تعيين عنوان URL الأساسي"
    },
    "ar->save-changes": {
      value: "حفظ التغييرات"
    },
    "ar->save-pannel": {
      value: "حفظ اللوحة"
    },
    "ar->search-user-in-list": {
      value: "البحث عن المستخدم في القائمة"
    },
    "ar->see-your-store": {
      value: "انظر إلى متجرك"
    },
    "ar->sigin": {
      value: "تسجيل الدخول"
    },
    "ar->static": {
      value: "ساكن"
    },
    "ar->status": {
      value: "الحالة"
    },
    "ar->submit": {
      value: "إرسال"
    },
    "ar->system Configurations": {
      value: "تكوينات النظام"
    },
    "ar->System-Configurations": {
      value: "تكوينات النظام"
    },
    "ar->test": {
      value: "اختبار"
    },
    "ar->the-return": {
      value: "العودة"
    },
    "ar->toggle-camera": {
      value: "تنقل الكاميرا"
    },
    "ar->toggle-fullscreen": {
      value: "التبديل إلى ملء الشاشة"
    },
    "ar->toggle-to-dark": {
      value: "الانتقال إلى الوضع الداكن"
    },
    "ar->toggle-to-light": {
      value: "التبديل إلى الإضاءة"
    },
    "ar->un-payments": {
      value: "مدفوعات الأمم المتحدة"
    },
    "ar->update": {
      value: "تحديث"
    },
    "ar->upload": {
      value: "تحميل"
    },
    "ar->user": {
      value: "مستخدم"
    },
    "ar->view-profile": {
      value: "عرض الملف الشخصي"
    },
    "ar->view-settings": {
      value: "إعدادات العرض"
    },
    "ar->visited": {
      value: "تمت الزيارة"
    },
    "ar->welcome": {
      value: "مرحباً"
    },
    "ar->win-detection": {
      value: "كشف الانتصار"
    },
    "ar->write-code-and-start-your-app": {
      value: "اكتب رمز وابدأ تطبيقك"
    },
    "ar->your-starts": {
      value: "تقييم"
    },
    "ar->مستخدم": {
      value: "مستعمل"
    },
    "fr->add": {
      value: "ajouter"
    },
    "fr->calculate-zakat": {
      value: "calculer la zakat"
    },
    "fr->clear": {
      value: "clair"
    },
    "fr->clear-all": {
      value: "tout effacer"
    },
    "fr->close-session": {
      value: "fermer la session"
    },
    "fr->codes": {
      value: "codes"
    },
    "fr->colors": {
      value: "couleurs"
    },
    "fr->count": {
      value: "compter"
    },
    "fr->create-at": {
      value: "créer à"
    },
    "fr->created-at": {
      value: "créé à"
    },
    "fr->ctrl": {
      value: "ctrl"
    },
    "fr->desc": {
      value: "desc"
    },
    "fr->deshboard": {
      value: "Tableau de bord"
    },
    "fr->done-at": {
      value: "fait à"
    },
    "fr->email": {
      value: "courriel"
    },
    "fr->facebook-not-defined": {
      value: "facebook non défini"
    },
    "fr->feedbacks-and-about": {
      value: "retours et à propos"
    },
    "fr->for-create-one": {
      value: "pour en créer une"
    },
    "fr->found": {
      value: "trouvé"
    },
    "fr->fuateurs": {
      value: "followers"
    },
    "fr->full-name": {
      value: "Nom complet"
    },
    "fr->get-start": {
      value: "Commencer"
    },
    "fr->home": {
      value: "Accueil"
    },
    "fr->i'm-give-the-author": {
      value: "Je donne à l'auteur"
    },
    "fr->icons": {
      value: "icônes"
    },
    "fr->id": {
      value: "idientifiant"
    },
    "fr->keyboard-shortcuts": {
      value: "raccourcis clavier"
    },
    "fr->keyboardShortcuts": {
      value: "raccourcis clavier"
    },
    "fr->load-extra-files": {
      value: "charger des fichiers supplémentaires"
    },
    "fr->loading": {
      value: "Chargement"
    },
    "fr->log-out": {
      value: "se déconnecter"
    },
    "fr->name": {
      value: "Nom"
    },
    "fr->no-base-url-choised": {
      value: "aucune URL de base choisie"
    },
    "fr->no-image": {
      value: "pas d’image"
    },
    "fr->no-image-selected": {
      value: "Aucune image sélectionnée"
    },
    "fr->no-markdown-content": {
      value: "pas de contenu markdown"
    },
    "fr->no-name-defined": {
      value: "aucun nom défini"
    },
    "fr->no-result": {
      value: "aucun résultat"
    },
    "fr->no-suggestions": {
      value: "pas de suggestions"
    },
    "fr->notifications": {
      value: "notifications"
    },
    "fr->open-exsiting-store": {
      value: "Ouvrir un magasin existant"
    },
    "fr->open-new-store": {
      value: "ouvrir un nouveau magasin"
    },
    "fr->open-notifications-view": {
      value: "ouvrir l'affichage des notifications"
    },
    "fr->or-press": {
      value: "ou appuyez"
    },
    "fr->pannel-save-view": {
      value: "vue Enreg. tableau"
    },
    "fr->partage-store": {
      value: "partage de magasin"
    },
    "fr->pay": {
      value: "paiement"
    },
    "fr->payment": {
      value: "paiement"
    },
    "fr->payment-": {
      value: "paiement"
    },
    "fr->payments": {
      value: "paiements"
    },
    "fr->permession-for-access-the Cash Stock Management (capabilitéToAccessAllStoreForAuthor)": {
      value: "demande d'accès au module Gestion de Stocks en caisse (capacité à accéder à tous les magasins pour l'auteur)"
    },
    "fr->permession-for-access-the-Cash-Stock-Management-(capabilité-to-access-all-store-for-author)": {
      value: "autorisation d'accès à la Gestion des stocks de trésorerie (capacité d'accès à tous les magasins pour l'auteur)"
    },
    "fr->press-?-for-help": {
      value: "appuyez sur ? pour obtenir de l'aide"
    },
    "fr->privacy": {
      value: "confidentialité"
    },
    "fr->private": {
      value: "privé"
    },
    "fr->public": {
      value: "publique"
    },
    "fr->reload-window": {
      value: "recharger la fenêtre"
    },
    "fr->reset": {
      value: "réinitialiser"
    },
    "fr->reset-base-url": {
      value: "réinitialiser l'URL de base"
    },
    "fr->save-changes": {
      value: "enregistrer les modifications"
    },
    "fr->search-keyboard-shortcuts-in-list": {
      value: "rechercher des raccourcis clavier dans la liste"
    },
    "fr->search-user-in-list": {
      value: "recherche utilisateur dans la liste"
    },
    "fr->see-your-store": {
      value: "voir votre boutique"
    },
    "fr->shift": {
      value: "Maj"
    },
    "fr->static": {
      value: "statique"
    },
    "fr->status": {
      value: "statut"
    },
    "fr->submit": {
      value: "envoyer"
    },
    "fr->test": {
      value: "test"
    },
    "fr->the-return": {
      value: "le retour"
    },
    "fr->toggle-fullscreen": {
      value: "passer en plein écran"
    },
    "fr->toggle-to-dark": {
      value: "basculer vers noir"
    },
    "fr->toggle-to-light": {
      value: "passer en clair"
    },
    "fr->un-payments": {
      value: "paiements en un"
    },
    "fr->update": {
      value: "mettre à jour"
    },
    "fr->user": {
      value: "utilisateur"
    },
    "fr->utilisateur": {
      value: "utilisateur"
    },
    "fr->view-settings": {
      value: "Afficher les paramètres"
    },
    "fr->visited": {
      value: "visité"
    },
    "fr->welcome": {
      value: "bienvenue"
    },
    "fr->win-detection": {
      value: "détection de la victoire"
    },
    "fr->write-code-and-start-your-app": {
      value: "écrivez le code pour lancer votre application"
    },
    "fr->your-starts": {
      value: "vos débuts"
    }
  }
}, { data: $S } = jS, BS = {
  id: "langId",
  name: "langs",
  data: $S
}, NM = () => qS.setWriteStatus("idle"), { init: xM, hooks: qS, entity: LM, slice: qd } = At(BS), zS = {
  data: {
    "camera-take": {
      commands: [
        {
          payload: ["camera-take"],
          type: "actions/exec"
        }
      ]
    },
    "colors-list-back": {
      commands: [
        {
          payload: "colors-list",
          type: "slot/back"
        }
      ]
    },
    "colors-list-next": {
      commands: [
        {
          payload: "colors-list",
          type: "slot/next"
        }
      ]
    },
    "colors-list-submit": {
      commands: [
        {
          payload: "colors-list",
          type: "slot/submit"
        }
      ]
    },
    "commands.back": {
      commands: [
        {
          payload: "cmds/list",
          type: "slot/back"
        }
      ],
      label: "commands : back"
    },
    "commands.close": {
      commands: [
        {
          payload: {
            direction: "commandId",
            force: !0,
            value: null
          },
          type: "object/setValue"
        }
      ],
      label: "view : close commands"
    },
    "commands.next": {
      commands: [
        {
          payload: "cmds/list",
          type: "slot/next"
        }
      ],
      label: "commands : next"
    },
    "commands.open": {
      commands: [
        {
          payload: {
            direction: "commandId",
            force: !0,
            value: "commands"
          },
          type: "object/setValue"
        }
      ],
      label: "view : open commands"
    },
    "commands.submit": {
      commands: [
        {
          payload: "cmds/list",
          type: "slot/submit"
        }
      ],
      label: "commands : run"
    },
    "configurations.back": {
      commands: [
        {
          payload: "configurations",
          type: "slot/back"
        }
      ],
      label: "settings : back"
    },
    "configurations.next": {
      commands: [
        {
          payload: "configurations",
          type: "slot/next"
        }
      ],
      label: "settings : next"
    },
    "configurations.settings.layout.submit": {
      commands: [
        {
          payload: "settings.layout.tools",
          type: "slot/submit"
        }
      ],
      label: "settings layout : change"
    },
    "configurations.settings.layouts.next": {
      commands: [
        {
          payload: "settings.layout.tools",
          type: "slot/next"
        }
      ],
      label: "settings layout : next"
    },
    "configurations.settings.layouts.previous": {
      commands: [
        {
          payload: "settings.layout.tools",
          type: "slot/back"
        }
      ],
      label: "settings layout : previous"
    },
    "configurations.submit": {
      commands: [
        {
          payload: "configurations",
          type: "slot/submit"
        }
      ],
      label: "settings : submit"
    },
    "defaultCommand.ignore": {
      commands: [],
      private: !0
    },
    "dialog.clickOnButton": {
      commands: [
        {
          payload: "dialog-list",
          type: "slot/submit"
        }
      ],
      label: "Dialog : Click And Submit"
    },
    "dialog.escape": {
      commands: [
        {
          payload: ["dialog.cancel"],
          type: "actions/exec"
        }
      ],
      label: "Dialog : Escape"
    },
    "dialog.goToNextButton": {
      commands: [
        {
          payload: "dialog-list",
          type: "slot/next"
        }
      ],
      label: "Dialog : Next Button"
    },
    "dialog.goToPreviousButton": {
      commands: [
        {
          payload: "dialog-list",
          type: "slot/back"
        }
      ],
      label: "Dialog : Previous Button"
    },
    "feedback/add": {
      commands: [
        {
          payload: ["feedback/add"],
          type: "actions/exec"
        }
      ],
      label: "help : add new feedback"
    },
    "header.toggle": {
      commands: [
        {
          payload: "visibility/header.boolean",
          type: "settings/toggle"
        }
      ],
      label: "view : toggle header"
    },
    "headerNotifays.toggleExpand": {
      commands: [
        {
          payload: "visibility/headerNotifays.boolean",
          type: "settings/toggle"
        }
      ],
      label: "view : toggle header notifications"
    },
    "input.addLineBellow": {
      commands: [
        {
          payload: ["input.addLineBellow"],
          type: "actions/exec"
        }
      ],
      label: "input : add line bellow"
    },
    "input.completeWord": {
      commands: [
        {
          payload: ["input.completeWord"],
          type: "actions/exec"
        }
      ],
      label: "input : complete word"
    },
    "input.selectLine": {
      commands: [
        {
          payload: ["input.selectLine"],
          type: "actions/exec"
        }
      ],
      label: "input : select line"
    },
    "input.tab": {
      commands: [
        {
          payload: ["input.tab"],
          type: "actions/exec"
        }
      ],
      label: "input : tab space"
    },
    "keyboard/update": {
      commands: [
        {
          payload: ["keyboard/update"],
          type: "actions/exec"
        }
      ]
    },
    "keyboardShortcuts.focusNextKeyPanding": {
      commands: [
        {
          payload: "keyboardShortcuts",
          type: "slot/next"
        }
      ],
      label: "keyboard shortcuts : focus next"
    },
    "keyboardShortcuts.focusPreviousKeyPanding": {
      commands: [
        {
          payload: "keyboardShortcuts",
          type: "slot/back"
        }
      ],
      label: "keyboard shortcuts : focus previous"
    },
    "keyboardShortcuts.submitCurrentKeyPanding": {
      commands: [
        {
          payload: "keyboardShortcuts",
          type: "slot/submit"
        }
      ],
      label: "keyboard shortcuts : submit current"
    },
    "menu.back": {
      commands: [
        {
          payload: "menu-list",
          type: "slot/back"
        }
      ]
    },
    "menu.escape": {
      commands: [
        {
          payload: {
            direction: "menu.id",
            force: !0,
            value: null
          },
          type: "object/setValue"
        }
      ]
    },
    "menu.next": {
      commands: [
        {
          payload: "menu-list",
          type: "slot/next"
        }
      ]
    },
    "menu.submit": {
      commands: [
        {
          payload: "menu-list",
          type: "slot/submit"
        }
      ]
    },
    "notifays.toggleExpandNotifay": {
      commands: [
        {
          payload: ["toggleExpandNotifay", null],
          type: "actions/exec"
        }
      ],
      label: "notifications : toggle expand notifications"
    },
    "notification.close": {
      commands: [
        {
          payload: [
            {
              changes: {
                value: !1
              },
              id: "visibility/notifays.boolean"
            }
          ],
          type: "settings/update"
        }
      ],
      label: "view : close notifications"
    },
    "notification.closeAndExpandLess": {
      commands: [
        "notification.close",
        {
          payload: [
            {
              changes: {
                value: !1
              },
              id: "visibility/notifays/notes.boolean"
            }
          ],
          type: "settings/update"
        }
      ],
      label: "view : close notifications and expand less"
    },
    "notification.deleteFocus": {
      commands: [
        {
          payload: ["notification.deleteFocus"],
          type: "actions/exec"
        }
      ],
      label: "notifications : delete the focused notification"
    },
    "notification.focusNext": {
      commands: [
        {
          payload: "notification",
          type: "slot/next"
        }
      ],
      label: "notifications : go next"
    },
    "notification.focusPrevious": {
      commands: [
        {
          payload: "notification",
          type: "slot/back"
        }
      ],
      label: "notifications: go back"
    },
    "notification.open": {
      commands: [
        {
          payload: [
            {
              changes: {
                value: !0
              },
              id: "visibility/notifays.boolean"
            }
          ],
          type: "settings/update"
        }
      ],
      label: "notifications : open"
    },
    "notification.openAndExpandMoreAndFocus": {
      commands: [
        "notification.open",
        {
          payload: [
            {
              changes: {
                value: !0
              },
              id: "visibility/notifays/notes.boolean"
            }
          ],
          type: "settings/update"
        },
        {
          payload: ["focus", "notifications"],
          type: "actions/exec"
        }
      ],
      label: "notifications : open and expand more and focus"
    },
    "notification.submitCurrent": {
      commands: [
        {
          payload: "notification",
          type: "slot/submit"
        }
      ],
      label: "notifications : submit current"
    },
    "notification.toggle": {
      commands: [
        {
          payload: "visibility/notifays.boolean",
          type: "settings/toggle"
        }
      ],
      label: "view : toggle notifications"
    },
    "search.history.clear": {
      commands: [
        {
          payload: ["search.history.clear"],
          type: "actions/exec"
        }
      ],
      label: "search : clear history"
    },
    "settings.colors.show": {
      commands: [
        {
          payload: [
            {
              changes: {
                focused: "colors"
              },
              id: "settings"
            }
          ],
          type: "views/update"
        }
      ]
    },
    "settings.focusNext": {
      commands: [
        {
          payload: "settings",
          type: "slot/next"
        }
      ]
    },
    "settings.focusPrevious": {
      commands: [
        {
          payload: "settings",
          type: "slot/back"
        }
      ]
    },
    "settings.icons.back": {
      commands: [
        {
          payload: "icons-list",
          type: "slot/back"
        }
      ]
    },
    "settings.icons.next": {
      commands: [
        {
          payload: "icons-list",
          type: "slot/next"
        }
      ]
    },
    "settings.icons.show": {
      commands: [
        {
          payload: [
            {
              changes: {
                focused: "icons"
              },
              id: "settings"
            }
          ],
          type: "views/update"
        }
      ]
    },
    "settings.icons.submit": {
      commands: [
        {
          payload: "icons-list",
          type: "slot/submit"
        }
      ]
    },
    "settings.keyboardShortcuts.show": {
      commands: [
        {
          payload: [
            {
              changes: {
                focused: "keyboardShortcuts"
              },
              id: "settings"
            }
          ],
          type: "views/update"
        }
      ]
    },
    "settings.tree.expandLess": {
      commands: [
        {
          payload: "setting-tree-layout",
          type: "tree/expandLess"
        }
      ]
    },
    "settings.tree.expandMore": {
      commands: [
        {
          payload: "setting-tree-layout",
          type: "tree/expandMore"
        }
      ]
    },
    "settings.tree.toggleExpand": {
      commands: [
        {
          payload: "setting-tree-layout",
          type: "tree/toggleExpand"
        }
      ]
    },
    "settings.user.show": {
      commands: [
        {
          payload: [
            {
              changes: {
                focused: "user"
              },
              id: "settings"
            }
          ],
          type: "views/update"
        }
      ]
    },
    "show.submit.setting": {
      commands: [
        {
          payload: ["showSubmitSetting", null],
          type: "actions/exec"
        }
      ]
    },
    "string.cancel": {
      commands: [
        {
          payload: ["string.cancel"],
          type: "actions/exec"
        }
      ],
      private: !0
    },
    "string.change": {
      commands: [
        {
          payload: ["string.change"],
          type: "actions/exec"
        }
      ],
      private: !0
    },
    "tools.tip.click": {
      commands: [
        {
          payload: ["tip.click"],
          type: "actions/exec"
        }
      ]
    },
    "view.leftSide.close": {
      commands: [
        {
          payload: [
            {
              changes: {
                value: !1
              },
              id: "visibility/leftSide.boolean"
            }
          ],
          type: "settings/update"
        }
      ],
      label: "leftSide : close"
    },
    "view.leftSide.open": {
      commands: [
        {
          payload: [
            {
              changes: {
                value: !0
              },
              id: "visibility/leftSide.boolean"
            }
          ],
          type: "settings/update"
        }
      ]
    },
    "view.leftSide.toggle": {
      commands: [
        {
          payload: "visibility/leftSide.boolean",
          type: "settings/toggle"
        }
      ]
    },
    "view.rightSide.close": {
      commands: [
        {
          payload: [
            {
              changes: {
                value: !1
              },
              id: "visibility/rightSide.boolean"
            }
          ],
          type: "settings/update"
        }
      ]
    },
    "view.rightSide.open": {
      commands: [
        {
          payload: [
            {
              changes: {
                value: !0
              },
              id: "visibility/rightSide.boolean"
            }
          ],
          type: "settings/update"
        }
      ]
    },
    "view.rightSide.toggle": {
      commands: [
        {
          payload: "visibility/rightSide.boolean",
          type: "settings/toggle"
        }
      ]
    },
    "view.settings.hide": {
      commands: [
        {
          payload: [
            {
              changes: {
                value: !1
              },
              id: "visibility/configurations.boolean"
            }
          ],
          type: "settings/update"
        }
      ],
      label: "view : hide settings view"
    },
    "view.settings.show": {
      commands: [
        {
          payload: [
            {
              changes: {
                value: !0
              },
              id: "visibility/configurations.boolean"
            }
          ],
          type: "settings/update"
        },
        {
          payload: [
            {
              changes: {
                value: ""
              },
              id: "findConfigurations-local"
            }
          ],
          type: "fields/update"
        },
        {
          payload: ["focus", "findConfigurations-local"],
          type: "actions/exec"
        }
      ],
      label: "view : show settings view"
    },
    "view.settings.update.hide": {
      commands: [
        {
          payload: {
            direction: "view.settings",
            force: !0,
            value: null
          },
          type: "object/setValue"
        },
        {
          payload: ["focus", "findConfigurations-local"],
          type: "actions/exec"
        }
      ],
      label: "view : hide settings update view"
    },
    "window.toggleMode": {
      commands: [
        {
          payload: "window/dark.boolean",
          type: "settings/toggle"
        }
      ],
      label: "window : toggle between (light/dark) mode"
    },
    "enum/next": {
      commands: [
        {
          type: "slot/next",
          payload: "enum-list"
        }
      ],
      label: "enum : go to next"
    },
    "enum/back": {
      commands: [
        {
          type: "slot/back",
          payload: "enum-list"
        }
      ],
      label: "enum : go to back"
    },
    "enum/submit": {
      commands: [
        {
          type: "slot/submit",
          payload: "enum-list"
        }
      ],
      label: "enum : select"
    },
    "enum/escape": {
      commands: [
        {
          payload: {
            direction: "enum.id",
            force: !0,
            value: null
          },
          type: "object/setValue"
        }
      ],
      label: "enum : escape"
    }
  }
}, { data: KS } = zS, HS = "commands";
function ly(t, e = de.getState()) {
  const { [HS]: n } = e, r = [], i = n.entities[t], s = i == null ? void 0 : i.commands;
  return i != null && i.blocked ? [] : (s == null || s.forEach((o) => {
    typeof o == "string" ? r.push(...ly(o)) : typeof o != "number" && r.push(o);
  }), r);
}
function GS(t, e = de.getState()) {
  return !!(e != null && e.commands.entities[t]);
}
async function WS(t, e = de.getState()) {
  const n = t.toString();
  rn.inf("start invoke command : ", n), e = e || de.getState();
  const r = ly(t, e), i = new ya();
  for (let s = 0; s < r.length; s++) {
    const o = r[s];
    typeof o == "number" ? await i.start(o) : de.dispatch(o);
  }
  rn.succ("end invoking command : ", n);
}
const QS = {
  id: "commandId",
  name: "commands",
  data: KS,
  default: (t, e) => {
    if (!e.commandId)
      return {};
    const [n = "", ...r] = e.commandId.split(".");
    return {
      label: `${Ph(n, "camel", "normal")} : ${r.map((s) => Ph(s, void 0, "normal")).join(" ")}`
    };
  }
}, { hooks: YS, slice: zd, entitySelect: MM, init: VM } = At(QS), JS = {
  data: [
    {
      command: "dialog.goToNextButton",
      value: "arrowdown",
      when: "state.object.data.dialog.id"
    },
    {
      command: "dialog.goToNextButton",
      value: "arrowright",
      when: "state.object.data.dialog.id"
    },
    {
      command: "dialog.goToPreviousButton",
      value: "arrowleft",
      when: "state.object.data.dialog.id"
    },
    {
      command: "dialog.goToPreviousButton",
      value: "arrowup",
      when: "state.object.data.dialog.id"
    },
    {
      command: "dialog.escape",
      value: "escape",
      when: "state.object.data.dialog.id"
    },
    {
      command: "dialog.clickOnButton",
      value: "enter",
      when: "state.object.data.dialog.id"
    },
    {
      command: "dialog.clickOnButton",
      value: "space",
      when: "state.object.data.dialog.id"
    },
    {
      command: "settings.colors.show",
      value: "control+shift+c",
      when: "state.views.entities.settings.focused == 'colors'"
    },
    {
      command: "menu.next",
      when: "state.object.data.menu.id",
      value: "arrowdown"
    },
    {
      command: "menu.back",
      when: "state.object.data.menu.id",
      value: "arrowup"
    },
    {
      command: "menu.submit",
      when: "state.object.data.menu.id",
      value: "enter"
    },
    {
      command: "menu.escape",
      when: "state.object.data.menu.id",
      value: "escape"
    },
    {
      value: "tab",
      command: "input.completeWord",
      when: "state.object.data.input.focusedHasProposition",
      type: "up"
    },
    {
      value: "tab",
      command: "defaultCommand.ignore",
      when: "state.object.data.input.focusedHasProposition"
    },
    {
      value: "tab",
      command: "input.tab",
      when: "state.object.data.input.supportTab"
    },
    {
      value: "control+l",
      command: "input.selectLine",
      when: "focused"
    },
    {
      value: "shift+alt+arrowdown",
      command: "input.addLineBellow",
      when: "focused"
    },
    {
      command: "string.change",
      when: "focused && state.fields.ids.includes(focused + ':input')",
      value: "enter"
    },
    {
      command: "string.cancel",
      when: "focused && state.fields.ids.includes(focused + ':input')",
      value: "escape"
    },
    {
      when: "focused == 'feedback' && state.fields.entities['feedback']?.value",
      command: "feedback/add",
      value: "control+enter",
      private: !0
    },
    {
      command: "commands.next",
      when: "focused == 'cmds/list' || focused == 'findCommand'",
      value: "arrowdown"
    },
    {
      command: "commands.back",
      when: "focused == 'cmds/list' || focused == 'findCommand'",
      value: "arrowup"
    },
    {
      command: "commands.submit",
      when: "focused == 'cmds/list' || focused == 'findCommand'",
      value: "enter"
    },
    {
      repeation: !1,
      command: "activity.focus",
      value: "alt",
      when: "focused != 'activity'"
    },
    {
      command: "activity.views.back",
      value: "arrowup",
      when: "focused == 'activity'"
    },
    {
      command: "activity.views.back",
      value: "arrowleft",
      when: "focused == 'activity'"
    },
    {
      command: "activity.views.next",
      value: "arrowdown",
      when: "focused == 'activity'"
    },
    {
      command: "activity.views.next",
      value: "arrowright",
      when: "focused == 'activity'"
    },
    {
      repeation: !1,
      command: "activity.views.submit",
      value: "enter",
      when: "focused == 'activity'"
    },
    {
      command: "commands.open",
      when: "focused != 'findCommand' || !state.object.data.commandId",
      value: "control+shift+p"
    },
    {
      repeation: !1,
      command: "notification.openAndExpandMoreAndFocus",
      when: "focused != 'notifications'",
      value: "shift+alt+n"
    },
    {
      command: "view.activity.toggle",
      value: "control+alt+a"
    },
    {
      command: "view.leftSide.toggle",
      value: "control+b"
    },
    {
      command: "view.rightSide.toggle",
      value: "control+alt+b"
    },
    {
      command: "view.settings.show",
      when: "focused != 'findConfigurations-local' || !state.settings.entities['visibility/configurations.boolean']?.value",
      value: "control+,"
    },
    {
      repeation: !1,
      command: "settings.keyboardShortcuts.show",
      when: "state.settings.entities['visibility/configurations.boolean']?.value",
      value: "control+k"
    },
    {
      repeation: !1,
      command: "settings.user.show",
      when: "state.settings.entities['visibility/configurations.boolean']?.value",
      value: "control+u"
    },
    {
      repeation: !1,
      command: "settings.icons.show",
      when: "state.settings.entities['visibility/configurations.boolean']?.value",
      value: "control+i"
    },
    {
      command: "layout.zoom.in",
      value: "control+="
    },
    {
      command: "layout.zoom.in",
      value: "control+plus"
    },
    {
      command: "layout.zoom.out",
      value: "control+-"
    },
    {
      command: "layout.zoom.reset",
      value: "control+0"
    },
    {
      repeation: !1,
      command: "keyboardShortcuts.submitCurrentKeyPanding",
      value: "enter",
      when: "['findConfigurations-local','keyboardShortcuts'].includes(focused) && state.views.entities.settings.focused == 'keyboardShortcuts'"
    },
    {
      command: "keyboard/update",
      value: "f2",
      when: "['findConfigurations-local','keyboardShortcuts'].includes(focused) && state.views.entities.settings.focused == 'keyboardShortcuts'"
    },
    {
      command: "keyboardShortcuts.focusNextKeyPanding",
      value: "arrowdown",
      when: "['findConfigurations-local','keyboardShortcuts'].includes(focused) && state.views.entities.settings.focused == 'keyboardShortcuts'"
    },
    {
      command: "keyboardShortcuts.focusPreviousKeyPanding",
      value: "arrowup",
      when: "['findConfigurations-local','keyboardShortcuts'].includes(focused) && state.views.entities.settings.focused == 'keyboardShortcuts'"
    },
    {
      value: "arrowdown",
      command: "colors-list-next",
      when: "['findConfigurations-local','color-list'].includes(focused) && state.views.entities.settings.focused == 'colors'"
    },
    {
      value: "arrowup",
      command: "colors-list-back",
      when: "['findConfigurations-local','color-list'].includes(focused) && state.views.entities.settings.focused == 'colors'"
    },
    {
      value: "enter",
      command: "colors-list-submit",
      when: "['findConfigurations-local','color-list'].includes(focused) && state.views.entities.settings.focused == 'colors'"
    },
    {
      command: "savePanel.open",
      value: "control+s",
      when: "focused != 'savePanelView'"
    },
    {
      command: "savePanel.next",
      value: "arrowdown",
      when: "focused == 'savePanelView'"
    },
    {
      command: "savePanel.back",
      value: "arrowup",
      when: "focused == 'savePanelView'"
    },
    {
      command: "savePanel.close",
      value: "backspace",
      when: "state.settings.entities['visibility/savePanel.boolean']?.value"
    },
    {
      command: "savePanel.toggleCheckedSubmit",
      value: "space",
      when: "focused == 'savePanelView'"
    },
    {
      command: "savePanel.toggleCheckedSubmit",
      value: "enter",
      when: "focused == 'savePanelView'"
    },
    {
      command: "configurations.next",
      value: "arrowdown",
      when: "focused == 'findConfigurations-local' && state.views.entities.settings.focused == 'user'"
    },
    {
      command: "configurations.back",
      value: "arrowup",
      when: "focused == 'findConfigurations-local' && state.views.entities.settings.focused == 'user'"
    },
    {
      repeation: !1,
      command: "configurations.submit",
      value: "enter",
      when: "focused == 'findConfigurations-local' && state.views.entities.settings.focused == 'user'"
    },
    {
      command: "setup.nextPage",
      when: "!state.object.data.setup.user.inited && (!focused || ['setup-controller','setup.btn.previous','setup.btn.next'].includes(focused))",
      value: "arrowright"
    },
    {
      command: "setup.previousPage",
      when: "!state.object.data.setup.user.inited && (!focused || ['setup-controller','setup.btn.previous','setup.btn.next'].includes(focused))",
      value: "arrowleft"
    },
    {
      command: "savePanel.save",
      when: "state.settings.entities['visibility/savePanel.boolean']?.value",
      value: "control+enter"
    },
    {
      command: "notification.submitCurrent",
      when: "focused == 'notifications'",
      value: "enter"
    },
    {
      command: "notification.focusNext",
      when: "focused == 'notifications'",
      value: "arrowdown"
    },
    {
      command: "notification.focusPrevious",
      when: "focused == 'notifications'",
      value: "arrowup"
    },
    {
      command: "notification.deleteFocus",
      when: "focused == 'notifications'",
      value: "delete"
    },
    {
      command: "notifays.toggleExpandNotifay",
      when: "focused == 'notifications'",
      value: "space"
    },
    {
      command: "enum/next",
      value: "arrowdown",
      when: "state.object.data.enum.id"
    },
    {
      command: "enum/next",
      value: "arrowright",
      when: "state.object.data.enum.id"
    },
    {
      command: "enum/back",
      value: "arrowleft",
      when: "state.object.data.enum.id"
    },
    {
      command: "enum/back",
      value: "arrowup",
      when: "state.object.data.enum.id"
    },
    {
      repeation: !1,
      command: "enum/submit",
      value: "space",
      when: "state.object.data.enum.id"
    },
    {
      repeation: !1,
      command: "enum/submit",
      value: "enter",
      when: "state.object.data.enum.id"
    },
    {
      repeation: !1,
      command: "enum/escape",
      value: "escape",
      when: "state.object.data.enum.id"
    },
    {
      repeation: !1,
      command: "show.submit.setting",
      value: "f2",
      when: "focused == 'findConfigurations-local'"
    },
    {
      command: "commands.close",
      when: "state.object.data.commandId",
      value: "escape"
    },
    {
      repeation: !1,
      command: "activity.escape",
      value: "escape",
      when: "focused == 'activity'"
    },
    {
      command: "savePanel.close",
      value: "escape",
      repeation: !1,
      when: "state.settings.entities['visibility/savePanel.boolean']?.value"
    },
    {
      command: "userProfile.hide",
      value: "escape",
      repeation: !1,
      when: "state.settings.entities['visibility/profile.boolean']?.value"
    },
    {
      command: "view.settings.update.hide",
      when: "state.object.data.view.settings",
      value: "escape"
    },
    {
      command: "view.settings.hide",
      when: "state.settings.entities['visibility/configurations.boolean']?.value",
      value: "escape"
    },
    {
      repeation: !1,
      command: "creditBox.close",
      when: "state.object.data.visibility.credit",
      value: "escape"
    },
    {
      repeation: !1,
      command: "notification.closeAndExpandLess",
      when: "state.settings.entities['visibility/notifays.boolean']?.value",
      value: "escape"
    },
    {
      command: "configurations.settings.layouts.next",
      when: "focused == 'settings.layouts'",
      value: "arrowright"
    },
    {
      command: "configurations.settings.layouts.previous",
      when: "focused == 'settings.layouts'",
      value: "arrowleft"
    },
    {
      command: "configurations.settings.layout.submit",
      when: "focused == 'settings.layouts'",
      value: "enter"
    },
    {
      when: "focused == 'settings.tree.view'",
      value: "space",
      command: "settings.tree.toggleExpand"
    },
    {
      when: "focused == 'settings.tree.view'",
      value: "arrowright",
      command: "settings.tree.expandMore"
    },
    {
      when: "focused == 'settings.tree.view'",
      value: "arrowleft",
      command: "settings.tree.expandLess"
    },
    {
      command: "header.toggle",
      value: "control+h"
    },
    {
      command: "settings.icons.next",
      when: "['findConfigurations-local','icons-list'].includes(focused) && state.views.entities.settings.focused == 'icons'",
      value: "arrowdown"
    },
    {
      command: "settings.icons.back",
      when: "['findConfigurations-local','icons-list'].includes(focused) && state.views.entities.settings.focused == 'icons'",
      value: "arrowup"
    },
    {
      command: "settings.icons.submit",
      when: "['findConfigurations-local','icons-list'].includes(focused) && state.views.entities.settings.focused == 'icons'",
      value: "enter"
    },
    {
      command: "camera-take",
      value: "enter",
      when: "state.object.data?.camera?.id"
    },
    {
      command: "window.toggleMode",
      value: "control+d"
    }
  ]
}, { data: XS } = JS, ZS = {
  name: "keys",
  id: "keyId",
  data: Object.entries(XS).map(([t, e]) => ({
    keyId: t,
    ...e
  })),
  default: () => ({
    repeation: !0,
    type: "down",
    only: !0,
    preventDefault: !0,
    keyId: `key_${Et()}`
  })
}, { init: eA, hooks: Pl, slice: Kd } = At(ZS), vo = "_" + Et().replaceAll(/[^0-9A-Za-z$_]+/gi, "_");
function tA(t) {
  return Function(`
    return ({ state , focused })=> {
      ${vo}_window = window;
      window = null;
      let ${vo} = ${t};
      window = ${vo}_window;
      return ${vo}
    }
  `)();
}
function FM() {
  eA();
  const t = Pl.getAll(), e = Da("commands.isBlocked"), n = ne.useMemo(() => e ? [] : t.filter(({ value: r, command: i }) => r && i).map((r) => {
    const { value: i = "", when: s, repeation: o = !0, type: a = "down", only: u = !0, preventDefault: l = !0 } = r, h = new tE(i);
    return {
      fn: async (y) => {
        if (!o && y.repeat || !h.test(y))
          return;
        const b = de.getState();
        if (s) {
          const S = nE(), C = tA(s);
          try {
            if (!C({ state: b, focused: S }))
              return;
          } catch {
            return;
          }
        }
        u && y.stopImmediatePropagation(), l && y.preventDefault(), rn.inf(`KEYID       = ${r.keyId}`), rn.inf(`RUN         = ${r.command || "no command run"}`), rn.inf(`COMB        = (${r.value})`), rn.inf(`WHEN        = ${r.when || "no provide"}`), r.command && GS(r.command, b) ? rn.succ("EXISTS") : rn.warn("COMMAND NOT FOUND"), WS(r.command, b);
      },
      type: a
    };
  }), [t, e]);
  IL(
    () => (n.forEach(({ fn: r, type: i }) => {
      document.addEventListener(`key${i}`, r);
    }), () => {
      n.forEach(({ fn: r, type: i }) => {
        document.removeEventListener(`key${i}`, r);
      });
    }),
    [n],
    1e3
  );
}
const fy = "keyboard", nA = {
  Shift: !1,
  Alt: !1,
  Control: !1,
  SymbolLock: !1,
  AltGraph: !1,
  CapsLock: !1,
  Fn: !1,
  FnLock: !1,
  Hyper: !1,
  Meta: !1,
  NumLock: !1,
  Super: !1,
  ScrollLock: !1,
  Symbol: !1,
  Key: void 0
}, rA = (t) => t[fy], Hd = Oa({
  name: fy,
  initialState: nA,
  reducers: {
    // actions
    setModifier(t, { payload: e }) {
      try {
        t[e.modifierName] = e.value;
      } catch {
      }
    }
  }
});
function UM(t) {
  return Fe(rA, (n, r) => tr(n[t], r[t]))[t];
}
const iA = {
  data: {
    appPassword: {},
    colorDarkValue: {},
    colorDefaultValue: {},
    colorLightValue: {},
    colorName: {},
    findCommand: {},
    "findConfigurations-local": {},
    number: {},
    "password/def": {},
    "setting/number": {},
    updateConfigSetting: {},
    "window/password": {}
  }
}, { data: sA } = iA, oA = {
  name: "fields",
  id: "fieldId",
  default: () => ({
    selection: {
      direction: "forward",
      end: 0,
      start: 0
    },
    value: ""
  }),
  data: sA
}, { entity: jM, slice: Gd, hooks: zt, entitySelect: $M, init: BM } = At(oA), aA = {
  data: {
    autoCompleteInput: {
      default: "#888A"
    },
    "bg.selection": {
      dark: "#fff",
      light: "#000"
    },
    "black.opacity": {
      dark: "#0006",
      light: "#0003"
    },
    borders: {
      dark: "#333",
      light: "#bebebe"
    },
    "checkbox.background": {
      default: "#8884"
    },
    "checkbox.false": {
      default: "#F33"
    },
    "checkbox.true": {
      default: "#393"
    },
    error: {
      default: "#F33"
    },
    "error.border": {
      default: "#733"
    },
    "error.content": {
      default: "white"
    },
    "error.text": {
      default: "#F33"
    },
    "facebook-icon": {
      default: "#014DE4"
    },
    "field.background": {
      default: "rgba(160 160 160 / 0.2)"
    },
    "focus.text": {
      default: "#F33"
    },
    "google-icon": {
      default: "#E53"
    },
    "gray.opacity": {
      default: "#8884"
    },
    "gray.opacity.2": {
      default: "#8887"
    },
    "gray.opacity.toLight": {
      default: "#eee4"
    },
    htmlContentHover: {
      default: "#27F5"
    },
    "info.text": {
      default: "#37F"
    },
    locationIconSetup: {
      default: "yellow"
    },
    "log.error.color": {
      default: "#F33"
    },
    "log.info.color": {
      default: "#27F"
    },
    "log.secuess.color": {
      default: "#393"
    },
    "log.warning.color": {
      default: "rgb(227 138 32)"
    },
    "microsoft-icon": {
      default: "#F25022"
    },
    "notifay.error": {
      default: "#e61a1a"
    },
    "notifay.info": {
      default: "#2e7aec"
    },
    "notifay.success": {
      default: "#2b8817"
    },
    "notifay.warning": {
      default: "#e7a428"
    },
    primary: {
      dark: "#0078d4",
      light: "#46A"
    },
    "primary.background": {
      dark: "#111",
      light: "#ececec"
    },
    "primary.content": {
      dark: "#fff",
      light: "#fff"
    },
    "primary.hover.background": {
      dark: "#222",
      light: "#e1e1e1"
    },
    "qrCode.detection.secuess": {
      dark: "#0F4",
      light: "#0A3"
    },
    "qrCode.detection.secuess.content": {
      default: "white"
    },
    secondry: {
      dark: "#043853",
      light: "#0d8c9c"
    },
    "secondry.background": {
      dark: "#171717",
      light: "#e1e1e1"
    },
    "secondry.content": {
      default: "#fff"
    },
    selectedTextBackgroundBlured: {
      default: "#8885"
    },
    selectedTextBackgroundFocused: {
      default: "#26F6"
    },
    selectedTextColorBlur: {
      default: "#222"
    },
    selectedTextColorFocused: {
      default: "#fff"
    },
    "shadow.background.from": {
      default: "transparent"
    },
    "shadow.background.to": {
      dark: "#000",
      light: "#999"
    },
    "shadow.color": {
      dark: "#0008",
      light: "#4444"
    },
    "starts.color": {
      dark: "#FA0",
      light: "#E90"
    },
    "status.content": {
      default: "white"
    },
    "submit.background": {
      default: "#9994"
    },
    "success.text": {
      default: "#14B85B"
    },
    "text.color": {
      dark: "#ccc",
      light: "#333"
    },
    "text.selection": {
      dark: "#000",
      light: "#fff"
    },
    "toast.background": {
      dark: "#333",
      light: "#eee"
    },
    transparent: {
      default: "transparent"
    },
    userIconSetup: {
      default: "#27C"
    },
    "warning.text": {
      default: "rgb(227 138 32)"
    },
    wifiIconSetup: {
      default: "#2C6F"
    },
    "window.inWindows.close": {
      default: "red"
    },
    opacity: {
      dark: "#fff2",
      light: "#0002"
    }
  }
}, { data: cA } = aA, uA = {
  id: "colorId",
  name: "color",
  data: cA
}, { hooks: lA, slice: Wd, init: qM, select: zM, entity: KM, entitySelect: HM } = At(uA), fA = {
  data: {}
}, { data: hA } = fA, dA = {
  id: "linkId",
  name: "cahser",
  data: hA,
  default() {
    return {
      status: "idle"
    };
  }
}, { init: GM, hooks: WM, slice: Qd } = At(dA), Oo = {
  name: "actions",
  id: "actionId",
  data: {},
  default() {
    return {
      status: "ready",
      args: null
    };
  },
  actions: {
    exec(t, { payload: e }) {
      const [n, r] = e, i = t.entities[n];
      i && (i.args = r, i.status = "idle");
    }
  }
}, { entity: QM, slice: Yd, hooks: nn, entitySelect: YM } = At(Oo);
function pA(t) {
  const e = nn.getOne(t);
  ne.useEffect(() => {
    e || nn.upsert([
      {
        actionId: t,
        status: "ready",
        args: null
      }
    ]);
  }, [e]);
}
function JM(t, e, n = [], r = () => {
}) {
  ne.useEffect(() => () => {
    nn.remove([t]);
  }, []), pA(t);
  const i = nn.getOne(t);
  return bi(async () => {
    if (!i)
      return;
    const { status: s } = i;
    if (s == "idle") {
      const { args: o } = i;
      nn.setOneFeild(t, "status", "loading");
      try {
        let a = null, u = null;
        a = e(o), a instanceof Promise ? u = await a : u = a, nn.setOneFeild(t, "output", u), nn.setOneFeild(t, "status", "success"), u && r(u);
      } catch {
        nn.setOneFeild(t, "output", null), nn.setOneFeild(t, "status", "error");
      }
      nn.setOneFeild(t, "args", null);
    }
  }, [i, ...n]), i;
}
function XM(t, e) {
  return new Promise((n, r) => {
    de.dispatch({ type: "actions/exec", payload: [t, e] });
    const i = sl(`${Oo.name}.entities.` + t + ".status", "success", (o) => {
      s(), n({
        output: o[Oo.name].entities[t].output,
        state: o
      });
    }), s = sl(`${Oo.name}.entities.` + t + ".status", "error", (o) => {
      i(), r(o);
    });
  });
}
const de = R0({
  reducer: {
    // normal reducers
    [Hd.name]: Hd.reducer,
    [Rr.name]: Rr.reducer,
    [hi.name]: hi.reducer,
    // system space
    [zd.name]: zd.reducer,
    [Kd.name]: Kd.reducer,
    [$d.name]: $d.reducer,
    [xd.name]: xd.reducer,
    [jd.name]: jd.reducer,
    [Fd.name]: Fd.reducer,
    [Ud.name]: Ud.reducer,
    [Gd.name]: Gd.reducer,
    [Yd.name]: Yd.reducer,
    [Wd.name]: Wd.reducer,
    [Md.name]: Md.reducer,
    [Bd.name]: Bd.reducer,
    [qd.name]: qd.reducer,
    [Qd.name]: Qd.reducer,
    [Vd.name]: Vd.reducer
    /* main database */
  }
}), ei = class ei {
  constructor(e, n = null) {
    if (this.name = e, this.parent = n, this.name.includes(".") || ei.allTemps[this.name])
      throw `temp name ${this.name} exists before`;
    ei.allTemps[this.name] = this;
  }
  getTemp(e) {
    return Da([this.name, e].join("."));
  }
  getTempFromStore(e, n) {
    return LS([this.name, e].join("."), n);
  }
  setTemp(e, n) {
    Gn([this.name, e].join("."), n);
  }
  useTemp(e) {
    return xS([this.name, e].join("."));
  }
  get childsTemps() {
    return Object.values(ei.allTemps).filter(({ parent: e }) => e == this);
  }
};
En(ei, "allTemps", {});
let tt = ei;
const ZM = new tt("path"), eV = new tt("window"), Na = new tt("view"), tV = new tt("toast"), Jd = new tt("dialog"), nV = new tt("loading"), Xd = new tt("progress"), rV = new tt("password"), Qr = new tt("menu"), iV = new tt("news"), sV = new tt("visibility"), oV = new tt("ipinfo"), aV = new tt("submited"), hr = new tt("camera"), mA = new tt("recaptcha"), Yo = new tt("iframe"), cV = new tt("enum");
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const hy = function(t) {
  const e = [];
  let n = 0;
  for (let r = 0; r < t.length; r++) {
    let i = t.charCodeAt(r);
    i < 128 ? e[n++] = i : i < 2048 ? (e[n++] = i >> 6 | 192, e[n++] = i & 63 | 128) : (i & 64512) === 55296 && r + 1 < t.length && (t.charCodeAt(r + 1) & 64512) === 56320 ? (i = 65536 + ((i & 1023) << 10) + (t.charCodeAt(++r) & 1023), e[n++] = i >> 18 | 240, e[n++] = i >> 12 & 63 | 128, e[n++] = i >> 6 & 63 | 128, e[n++] = i & 63 | 128) : (e[n++] = i >> 12 | 224, e[n++] = i >> 6 & 63 | 128, e[n++] = i & 63 | 128);
  }
  return e;
}, gA = function(t) {
  const e = [];
  let n = 0, r = 0;
  for (; n < t.length; ) {
    const i = t[n++];
    if (i < 128)
      e[r++] = String.fromCharCode(i);
    else if (i > 191 && i < 224) {
      const s = t[n++];
      e[r++] = String.fromCharCode((i & 31) << 6 | s & 63);
    } else if (i > 239 && i < 365) {
      const s = t[n++], o = t[n++], a = t[n++], u = ((i & 7) << 18 | (s & 63) << 12 | (o & 63) << 6 | a & 63) - 65536;
      e[r++] = String.fromCharCode(55296 + (u >> 10)), e[r++] = String.fromCharCode(56320 + (u & 1023));
    } else {
      const s = t[n++], o = t[n++];
      e[r++] = String.fromCharCode((i & 15) << 12 | (s & 63) << 6 | o & 63);
    }
  }
  return e.join("");
}, dy = {
  /**
   * Maps bytes to characters.
   */
  byteToCharMap_: null,
  /**
   * Maps characters to bytes.
   */
  charToByteMap_: null,
  /**
   * Maps bytes to websafe characters.
   * @private
   */
  byteToCharMapWebSafe_: null,
  /**
   * Maps websafe characters to bytes.
   * @private
   */
  charToByteMapWebSafe_: null,
  /**
   * Our default alphabet, shared between
   * ENCODED_VALS and ENCODED_VALS_WEBSAFE
   */
  ENCODED_VALS_BASE: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
  /**
   * Our default alphabet. Value 64 (=) is special; it means "nothing."
   */
  get ENCODED_VALS() {
    return this.ENCODED_VALS_BASE + "+/=";
  },
  /**
   * Our websafe alphabet.
   */
  get ENCODED_VALS_WEBSAFE() {
    return this.ENCODED_VALS_BASE + "-_.";
  },
  /**
   * Whether this browser supports the atob and btoa functions. This extension
   * started at Mozilla but is now implemented by many browsers. We use the
   * ASSUME_* variables to avoid pulling in the full useragent detection library
   * but still allowing the standard per-browser compilations.
   *
   */
  HAS_NATIVE_SUPPORT: typeof atob == "function",
  /**
   * Base64-encode an array of bytes.
   *
   * @param input An array of bytes (numbers with
   *     value in [0, 255]) to encode.
   * @param webSafe Boolean indicating we should use the
   *     alternative alphabet.
   * @return The base64 encoded string.
   */
  encodeByteArray(t, e) {
    if (!Array.isArray(t))
      throw Error("encodeByteArray takes an array as a parameter");
    this.init_();
    const n = e ? this.byteToCharMapWebSafe_ : this.byteToCharMap_, r = [];
    for (let i = 0; i < t.length; i += 3) {
      const s = t[i], o = i + 1 < t.length, a = o ? t[i + 1] : 0, u = i + 2 < t.length, l = u ? t[i + 2] : 0, h = s >> 2, f = (s & 3) << 4 | a >> 4;
      let y = (a & 15) << 2 | l >> 6, b = l & 63;
      u || (b = 64, o || (y = 64)), r.push(n[h], n[f], n[y], n[b]);
    }
    return r.join("");
  },
  /**
   * Base64-encode a string.
   *
   * @param input A string to encode.
   * @param webSafe If true, we should use the
   *     alternative alphabet.
   * @return The base64 encoded string.
   */
  encodeString(t, e) {
    return this.HAS_NATIVE_SUPPORT && !e ? btoa(t) : this.encodeByteArray(hy(t), e);
  },
  /**
   * Base64-decode a string.
   *
   * @param input to decode.
   * @param webSafe True if we should use the
   *     alternative alphabet.
   * @return string representing the decoded value.
   */
  decodeString(t, e) {
    return this.HAS_NATIVE_SUPPORT && !e ? atob(t) : gA(this.decodeStringToByteArray(t, e));
  },
  /**
   * Base64-decode a string.
   *
   * In base-64 decoding, groups of four characters are converted into three
   * bytes.  If the encoder did not apply padding, the input length may not
   * be a multiple of 4.
   *
   * In this case, the last group will have fewer than 4 characters, and
   * padding will be inferred.  If the group has one or two characters, it decodes
   * to one byte.  If the group has three characters, it decodes to two bytes.
   *
   * @param input Input to decode.
   * @param webSafe True if we should use the web-safe alphabet.
   * @return bytes representing the decoded value.
   */
  decodeStringToByteArray(t, e) {
    this.init_();
    const n = e ? this.charToByteMapWebSafe_ : this.charToByteMap_, r = [];
    for (let i = 0; i < t.length; ) {
      const s = n[t.charAt(i++)], a = i < t.length ? n[t.charAt(i)] : 0;
      ++i;
      const l = i < t.length ? n[t.charAt(i)] : 64;
      ++i;
      const f = i < t.length ? n[t.charAt(i)] : 64;
      if (++i, s == null || a == null || l == null || f == null)
        throw new yA();
      const y = s << 2 | a >> 4;
      if (r.push(y), l !== 64) {
        const b = a << 4 & 240 | l >> 2;
        if (r.push(b), f !== 64) {
          const S = l << 6 & 192 | f;
          r.push(S);
        }
      }
    }
    return r;
  },
  /**
   * Lazy static initialization function. Called before
   * accessing any of the static map variables.
   * @private
   */
  init_() {
    if (!this.byteToCharMap_) {
      this.byteToCharMap_ = {}, this.charToByteMap_ = {}, this.byteToCharMapWebSafe_ = {}, this.charToByteMapWebSafe_ = {};
      for (let t = 0; t < this.ENCODED_VALS.length; t++)
        this.byteToCharMap_[t] = this.ENCODED_VALS.charAt(t), this.charToByteMap_[this.byteToCharMap_[t]] = t, this.byteToCharMapWebSafe_[t] = this.ENCODED_VALS_WEBSAFE.charAt(t), this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[t]] = t, t >= this.ENCODED_VALS_BASE.length && (this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(t)] = t, this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(t)] = t);
    }
  }
};
class yA extends Error {
  constructor() {
    super(...arguments), this.name = "DecodeBase64StringError";
  }
}
const vA = function(t) {
  const e = hy(t);
  return dy.encodeByteArray(e, !0);
}, Jo = function(t) {
  return vA(t).replace(/\./g, "");
}, py = function(t) {
  try {
    return dy.decodeString(t, !0);
  } catch (e) {
    console.error("base64Decode failed: ", e);
  }
  return null;
};
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _A() {
  if (typeof self < "u")
    return self;
  if (typeof window < "u")
    return window;
  if (typeof globalThis < "u")
    return globalThis;
  throw new Error("Unable to locate global object.");
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const wA = () => _A().__FIREBASE_DEFAULTS__, EA = () => {
  if (typeof process > "u" || typeof process.env > "u")
    return;
  const t = process.env.__FIREBASE_DEFAULTS__;
  if (t)
    return JSON.parse(t);
}, bA = () => {
  if (typeof document > "u")
    return;
  let t;
  try {
    t = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);
  } catch {
    return;
  }
  const e = t && py(t[1]);
  return e && JSON.parse(e);
}, xa = () => {
  try {
    return wA() || EA() || bA();
  } catch (t) {
    console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${t}`);
    return;
  }
}, my = (t) => {
  var e, n;
  return (n = (e = xa()) === null || e === void 0 ? void 0 : e.emulatorHosts) === null || n === void 0 ? void 0 : n[t];
}, gy = (t) => {
  const e = my(t);
  if (!e)
    return;
  const n = e.lastIndexOf(":");
  if (n <= 0 || n + 1 === e.length)
    throw new Error(`Invalid host ${e} with no separate hostname and port!`);
  const r = parseInt(e.substring(n + 1), 10);
  return e[0] === "[" ? [e.substring(1, n - 1), r] : [e.substring(0, n), r];
}, yy = () => {
  var t;
  return (t = xa()) === null || t === void 0 ? void 0 : t.config;
}, vy = (t) => {
  var e;
  return (e = xa()) === null || e === void 0 ? void 0 : e[`_${t}`];
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class TA {
  constructor() {
    this.reject = () => {
    }, this.resolve = () => {
    }, this.promise = new Promise((e, n) => {
      this.resolve = e, this.reject = n;
    });
  }
  /**
   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
   * and returns a node-style callback which will resolve or reject the Deferred's promise.
   */
  wrapCallback(e) {
    return (n, r) => {
      n ? this.reject(n) : this.resolve(r), typeof e == "function" && (this.promise.catch(() => {
      }), e.length === 1 ? e(n) : e(n, r));
    };
  }
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _y(t, e) {
  if (t.uid)
    throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');
  const n = {
    alg: "none",
    type: "JWT"
  }, r = e || "demo-project", i = t.iat || 0, s = t.sub || t.user_id;
  if (!s)
    throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");
  const o = Object.assign({
    // Set all required fields to decent defaults
    iss: `https://securetoken.google.com/${r}`,
    aud: r,
    iat: i,
    exp: i + 3600,
    auth_time: i,
    sub: s,
    user_id: s,
    firebase: {
      sign_in_provider: "custom",
      identities: {}
    }
  }, t);
  return [
    Jo(JSON.stringify(n)),
    Jo(JSON.stringify(o)),
    ""
  ].join(".");
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function lt() {
  return typeof navigator < "u" && typeof navigator.userAgent == "string" ? navigator.userAgent : "";
}
function IA() {
  return typeof window < "u" && // @ts-ignore Setting up an broadly applicable index signature for Window
  // just to deal with this case would probably be a bad idea.
  !!(window.cordova || window.phonegap || window.PhoneGap) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(lt());
}
function SA() {
  var t;
  const e = (t = xa()) === null || t === void 0 ? void 0 : t.forceEnvironment;
  if (e === "node")
    return !0;
  if (e === "browser")
    return !1;
  try {
    return Object.prototype.toString.call(globalThis.process) === "[object process]";
  } catch {
    return !1;
  }
}
function wy() {
  const t = typeof chrome == "object" ? chrome.runtime : typeof browser == "object" ? browser.runtime : void 0;
  return typeof t == "object" && t.id !== void 0;
}
function AA() {
  return typeof navigator == "object" && navigator.product === "ReactNative";
}
function RA() {
  const t = lt();
  return t.indexOf("MSIE ") >= 0 || t.indexOf("Trident/") >= 0;
}
function CA() {
  return !SA() && !!navigator.userAgent && navigator.userAgent.includes("Safari") && !navigator.userAgent.includes("Chrome");
}
function Ey() {
  try {
    return typeof indexedDB == "object";
  } catch {
    return !1;
  }
}
function by() {
  return new Promise((t, e) => {
    try {
      let n = !0;
      const r = "validate-browser-context-for-indexeddb-analytics-module", i = self.indexedDB.open(r);
      i.onsuccess = () => {
        i.result.close(), n || self.indexedDB.deleteDatabase(r), t(!0);
      }, i.onupgradeneeded = () => {
        n = !1;
      }, i.onerror = () => {
        var s;
        e(((s = i.error) === null || s === void 0 ? void 0 : s.message) || "");
      };
    } catch (n) {
      e(n);
    }
  });
}
function PA() {
  return !(typeof navigator > "u" || !navigator.cookieEnabled);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const kA = "FirebaseError";
class Gt extends Error {
  constructor(e, n, r) {
    super(n), this.code = e, this.customData = r, this.name = kA, Object.setPrototypeOf(this, Gt.prototype), Error.captureStackTrace && Error.captureStackTrace(this, Ur.prototype.create);
  }
}
class Ur {
  constructor(e, n, r) {
    this.service = e, this.serviceName = n, this.errors = r;
  }
  create(e, ...n) {
    const r = n[0] || {}, i = `${this.service}/${e}`, s = this.errors[e], o = s ? OA(s, r) : "Error", a = `${this.serviceName}: ${o} (${i}).`;
    return new Gt(i, a, r);
  }
}
function OA(t, e) {
  return t.replace(DA, (n, r) => {
    const i = e[r];
    return i != null ? String(i) : `<${r}?>`;
  });
}
const DA = /\{\$([^}]+)}/g;
function NA(t) {
  for (const e in t)
    if (Object.prototype.hasOwnProperty.call(t, e))
      return !1;
  return !0;
}
function _s(t, e) {
  if (t === e)
    return !0;
  const n = Object.keys(t), r = Object.keys(e);
  for (const i of n) {
    if (!r.includes(i))
      return !1;
    const s = t[i], o = e[i];
    if (Zd(s) && Zd(o)) {
      if (!_s(s, o))
        return !1;
    } else if (s !== o)
      return !1;
  }
  for (const i of r)
    if (!n.includes(i))
      return !1;
  return !0;
}
function Zd(t) {
  return t !== null && typeof t == "object";
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Ii(t) {
  const e = [];
  for (const [n, r] of Object.entries(t))
    Array.isArray(r) ? r.forEach((i) => {
      e.push(encodeURIComponent(n) + "=" + encodeURIComponent(i));
    }) : e.push(encodeURIComponent(n) + "=" + encodeURIComponent(r));
  return e.length ? "&" + e.join("&") : "";
}
function Xi(t) {
  const e = {};
  return t.replace(/^\?/, "").split("&").forEach((r) => {
    if (r) {
      const [i, s] = r.split("=");
      e[decodeURIComponent(i)] = decodeURIComponent(s);
    }
  }), e;
}
function Zi(t) {
  const e = t.indexOf("?");
  if (!e)
    return "";
  const n = t.indexOf("#", e);
  return t.substring(e, n > 0 ? n : void 0);
}
function xA(t, e) {
  const n = new LA(t, e);
  return n.subscribe.bind(n);
}
class LA {
  /**
   * @param executor Function which can make calls to a single Observer
   *     as a proxy.
   * @param onNoObservers Callback when count of Observers goes to zero.
   */
  constructor(e, n) {
    this.observers = [], this.unsubscribes = [], this.observerCount = 0, this.task = Promise.resolve(), this.finalized = !1, this.onNoObservers = n, this.task.then(() => {
      e(this);
    }).catch((r) => {
      this.error(r);
    });
  }
  next(e) {
    this.forEachObserver((n) => {
      n.next(e);
    });
  }
  error(e) {
    this.forEachObserver((n) => {
      n.error(e);
    }), this.close(e);
  }
  complete() {
    this.forEachObserver((e) => {
      e.complete();
    }), this.close();
  }
  /**
   * Subscribe function that can be used to add an Observer to the fan-out list.
   *
   * - We require that no event is sent to a subscriber sychronously to their
   *   call to subscribe().
   */
  subscribe(e, n, r) {
    let i;
    if (e === void 0 && n === void 0 && r === void 0)
      throw new Error("Missing Observer.");
    MA(e, [
      "next",
      "error",
      "complete"
    ]) ? i = e : i = {
      next: e,
      error: n,
      complete: r
    }, i.next === void 0 && (i.next = Uc), i.error === void 0 && (i.error = Uc), i.complete === void 0 && (i.complete = Uc);
    const s = this.unsubscribeOne.bind(this, this.observers.length);
    return this.finalized && this.task.then(() => {
      try {
        this.finalError ? i.error(this.finalError) : i.complete();
      } catch {
      }
    }), this.observers.push(i), s;
  }
  // Unsubscribe is synchronous - we guarantee that no events are sent to
  // any unsubscribed Observer.
  unsubscribeOne(e) {
    this.observers === void 0 || this.observers[e] === void 0 || (delete this.observers[e], this.observerCount -= 1, this.observerCount === 0 && this.onNoObservers !== void 0 && this.onNoObservers(this));
  }
  forEachObserver(e) {
    if (!this.finalized)
      for (let n = 0; n < this.observers.length; n++)
        this.sendOne(n, e);
  }
  // Call the Observer via one of it's callback function. We are careful to
  // confirm that the observe has not been unsubscribed since this asynchronous
  // function had been queued.
  sendOne(e, n) {
    this.task.then(() => {
      if (this.observers !== void 0 && this.observers[e] !== void 0)
        try {
          n(this.observers[e]);
        } catch (r) {
          typeof console < "u" && console.error && console.error(r);
        }
    });
  }
  close(e) {
    this.finalized || (this.finalized = !0, e !== void 0 && (this.finalError = e), this.task.then(() => {
      this.observers = void 0, this.onNoObservers = void 0;
    }));
  }
}
function MA(t, e) {
  if (typeof t != "object" || t === null)
    return !1;
  for (const n of e)
    if (n in t && typeof t[n] == "function")
      return !0;
  return !1;
}
function Uc() {
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const VA = 1e3, FA = 2, UA = 4 * 60 * 60 * 1e3, jA = 0.5;
function ep(t, e = VA, n = FA) {
  const r = e * Math.pow(n, t), i = Math.round(
    // A fraction of the backoff value to add/subtract.
    // Deviation: changes multiplication order to improve readability.
    jA * r * // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines
    // if we add or subtract.
    (Math.random() - 0.5) * 2
  );
  return Math.min(UA, r + i);
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Ue(t) {
  return t && t._delegate ? t._delegate : t;
}
class Kt {
  /**
   *
   * @param name The public service name, e.g. app, auth, firestore, database
   * @param instanceFactory Service factory responsible for creating the public interface
   * @param type whether the service provided by the component is public or private
   */
  constructor(e, n, r) {
    this.name = e, this.instanceFactory = n, this.type = r, this.multipleInstances = !1, this.serviceProps = {}, this.instantiationMode = "LAZY", this.onInstanceCreated = null;
  }
  setInstantiationMode(e) {
    return this.instantiationMode = e, this;
  }
  setMultipleInstances(e) {
    return this.multipleInstances = e, this;
  }
  setServiceProps(e) {
    return this.serviceProps = e, this;
  }
  setInstanceCreatedCallback(e) {
    return this.onInstanceCreated = e, this;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const lr = "[DEFAULT]";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class $A {
  constructor(e, n) {
    this.name = e, this.container = n, this.component = null, this.instances = /* @__PURE__ */ new Map(), this.instancesDeferred = /* @__PURE__ */ new Map(), this.instancesOptions = /* @__PURE__ */ new Map(), this.onInitCallbacks = /* @__PURE__ */ new Map();
  }
  /**
   * @param identifier A provider can provide mulitple instances of a service
   * if this.component.multipleInstances is true.
   */
  get(e) {
    const n = this.normalizeInstanceIdentifier(e);
    if (!this.instancesDeferred.has(n)) {
      const r = new TA();
      if (this.instancesDeferred.set(n, r), this.isInitialized(n) || this.shouldAutoInitialize())
        try {
          const i = this.getOrInitializeService({
            instanceIdentifier: n
          });
          i && r.resolve(i);
        } catch {
        }
    }
    return this.instancesDeferred.get(n).promise;
  }
  getImmediate(e) {
    var n;
    const r = this.normalizeInstanceIdentifier(e == null ? void 0 : e.identifier), i = (n = e == null ? void 0 : e.optional) !== null && n !== void 0 ? n : !1;
    if (this.isInitialized(r) || this.shouldAutoInitialize())
      try {
        return this.getOrInitializeService({
          instanceIdentifier: r
        });
      } catch (s) {
        if (i)
          return null;
        throw s;
      }
    else {
      if (i)
        return null;
      throw Error(`Service ${this.name} is not available`);
    }
  }
  getComponent() {
    return this.component;
  }
  setComponent(e) {
    if (e.name !== this.name)
      throw Error(`Mismatching Component ${e.name} for Provider ${this.name}.`);
    if (this.component)
      throw Error(`Component for ${this.name} has already been provided`);
    if (this.component = e, !!this.shouldAutoInitialize()) {
      if (qA(e))
        try {
          this.getOrInitializeService({ instanceIdentifier: lr });
        } catch {
        }
      for (const [n, r] of this.instancesDeferred.entries()) {
        const i = this.normalizeInstanceIdentifier(n);
        try {
          const s = this.getOrInitializeService({
            instanceIdentifier: i
          });
          r.resolve(s);
        } catch {
        }
      }
    }
  }
  clearInstance(e = lr) {
    this.instancesDeferred.delete(e), this.instancesOptions.delete(e), this.instances.delete(e);
  }
  // app.delete() will call this method on every provider to delete the services
  // TODO: should we mark the provider as deleted?
  async delete() {
    const e = Array.from(this.instances.values());
    await Promise.all([
      ...e.filter((n) => "INTERNAL" in n).map((n) => n.INTERNAL.delete()),
      ...e.filter((n) => "_delete" in n).map((n) => n._delete())
    ]);
  }
  isComponentSet() {
    return this.component != null;
  }
  isInitialized(e = lr) {
    return this.instances.has(e);
  }
  getOptions(e = lr) {
    return this.instancesOptions.get(e) || {};
  }
  initialize(e = {}) {
    const { options: n = {} } = e, r = this.normalizeInstanceIdentifier(e.instanceIdentifier);
    if (this.isInitialized(r))
      throw Error(`${this.name}(${r}) has already been initialized`);
    if (!this.isComponentSet())
      throw Error(`Component ${this.name} has not been registered yet`);
    const i = this.getOrInitializeService({
      instanceIdentifier: r,
      options: n
    });
    for (const [s, o] of this.instancesDeferred.entries()) {
      const a = this.normalizeInstanceIdentifier(s);
      r === a && o.resolve(i);
    }
    return i;
  }
  /**
   *
   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().
   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.
   *
   * @param identifier An optional instance identifier
   * @returns a function to unregister the callback
   */
  onInit(e, n) {
    var r;
    const i = this.normalizeInstanceIdentifier(n), s = (r = this.onInitCallbacks.get(i)) !== null && r !== void 0 ? r : /* @__PURE__ */ new Set();
    s.add(e), this.onInitCallbacks.set(i, s);
    const o = this.instances.get(i);
    return o && e(o, i), () => {
      s.delete(e);
    };
  }
  /**
   * Invoke onInit callbacks synchronously
   * @param instance the service instance`
   */
  invokeOnInitCallbacks(e, n) {
    const r = this.onInitCallbacks.get(n);
    if (r)
      for (const i of r)
        try {
          i(e, n);
        } catch {
        }
  }
  getOrInitializeService({ instanceIdentifier: e, options: n = {} }) {
    let r = this.instances.get(e);
    if (!r && this.component && (r = this.component.instanceFactory(this.container, {
      instanceIdentifier: BA(e),
      options: n
    }), this.instances.set(e, r), this.instancesOptions.set(e, n), this.invokeOnInitCallbacks(r, e), this.component.onInstanceCreated))
      try {
        this.component.onInstanceCreated(this.container, e, r);
      } catch {
      }
    return r || null;
  }
  normalizeInstanceIdentifier(e = lr) {
    return this.component ? this.component.multipleInstances ? e : lr : e;
  }
  shouldAutoInitialize() {
    return !!this.component && this.component.instantiationMode !== "EXPLICIT";
  }
}
function BA(t) {
  return t === lr ? void 0 : t;
}
function qA(t) {
  return t.instantiationMode === "EAGER";
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class zA {
  constructor(e) {
    this.name = e, this.providers = /* @__PURE__ */ new Map();
  }
  /**
   *
   * @param component Component being added
   * @param overwrite When a component with the same name has already been registered,
   * if overwrite is true: overwrite the existing component with the new component and create a new
   * provider with the new component. It can be useful in tests where you want to use different mocks
   * for different tests.
   * if overwrite is false: throw an exception
   */
  addComponent(e) {
    const n = this.getProvider(e.name);
    if (n.isComponentSet())
      throw new Error(`Component ${e.name} has already been registered with ${this.name}`);
    n.setComponent(e);
  }
  addOrOverwriteComponent(e) {
    this.getProvider(e.name).isComponentSet() && this.providers.delete(e.name), this.addComponent(e);
  }
  /**
   * getProvider provides a type safe interface where it can only be called with a field name
   * present in NameServiceMapping interface.
   *
   * Firebase SDKs providing services should extend NameServiceMapping interface to register
   * themselves.
   */
  getProvider(e) {
    if (this.providers.has(e))
      return this.providers.get(e);
    const n = new $A(e, this);
    return this.providers.set(e, n), n;
  }
  getProviders() {
    return Array.from(this.providers.values());
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _e;
(function(t) {
  t[t.DEBUG = 0] = "DEBUG", t[t.VERBOSE = 1] = "VERBOSE", t[t.INFO = 2] = "INFO", t[t.WARN = 3] = "WARN", t[t.ERROR = 4] = "ERROR", t[t.SILENT = 5] = "SILENT";
})(_e || (_e = {}));
const KA = {
  debug: _e.DEBUG,
  verbose: _e.VERBOSE,
  info: _e.INFO,
  warn: _e.WARN,
  error: _e.ERROR,
  silent: _e.SILENT
}, HA = _e.INFO, GA = {
  [_e.DEBUG]: "log",
  [_e.VERBOSE]: "log",
  [_e.INFO]: "info",
  [_e.WARN]: "warn",
  [_e.ERROR]: "error"
}, WA = (t, e, ...n) => {
  if (e < t.logLevel)
    return;
  const r = (/* @__PURE__ */ new Date()).toISOString(), i = GA[e];
  if (i)
    console[i](`[${r}]  ${t.name}:`, ...n);
  else
    throw new Error(`Attempted to log a message with an invalid logType (value: ${e})`);
};
class La {
  /**
   * Gives you an instance of a Logger to capture messages according to
   * Firebase's logging scheme.
   *
   * @param name The name that the logs will be associated with
   */
  constructor(e) {
    this.name = e, this._logLevel = HA, this._logHandler = WA, this._userLogHandler = null;
  }
  get logLevel() {
    return this._logLevel;
  }
  set logLevel(e) {
    if (!(e in _e))
      throw new TypeError(`Invalid value "${e}" assigned to \`logLevel\``);
    this._logLevel = e;
  }
  // Workaround for setter/getter having to be the same type.
  setLogLevel(e) {
    this._logLevel = typeof e == "string" ? KA[e] : e;
  }
  get logHandler() {
    return this._logHandler;
  }
  set logHandler(e) {
    if (typeof e != "function")
      throw new TypeError("Value assigned to `logHandler` must be a function");
    this._logHandler = e;
  }
  get userLogHandler() {
    return this._userLogHandler;
  }
  set userLogHandler(e) {
    this._userLogHandler = e;
  }
  /**
   * The functions below are all based on the `console` interface
   */
  debug(...e) {
    this._userLogHandler && this._userLogHandler(this, _e.DEBUG, ...e), this._logHandler(this, _e.DEBUG, ...e);
  }
  log(...e) {
    this._userLogHandler && this._userLogHandler(this, _e.VERBOSE, ...e), this._logHandler(this, _e.VERBOSE, ...e);
  }
  info(...e) {
    this._userLogHandler && this._userLogHandler(this, _e.INFO, ...e), this._logHandler(this, _e.INFO, ...e);
  }
  warn(...e) {
    this._userLogHandler && this._userLogHandler(this, _e.WARN, ...e), this._logHandler(this, _e.WARN, ...e);
  }
  error(...e) {
    this._userLogHandler && this._userLogHandler(this, _e.ERROR, ...e), this._logHandler(this, _e.ERROR, ...e);
  }
}
const QA = (t, e) => e.some((n) => t instanceof n);
let tp, np;
function YA() {
  return tp || (tp = [
    IDBDatabase,
    IDBObjectStore,
    IDBIndex,
    IDBCursor,
    IDBTransaction
  ]);
}
function JA() {
  return np || (np = [
    IDBCursor.prototype.advance,
    IDBCursor.prototype.continue,
    IDBCursor.prototype.continuePrimaryKey
  ]);
}
const Ty = /* @__PURE__ */ new WeakMap(), xu = /* @__PURE__ */ new WeakMap(), Iy = /* @__PURE__ */ new WeakMap(), jc = /* @__PURE__ */ new WeakMap(), kl = /* @__PURE__ */ new WeakMap();
function XA(t) {
  const e = new Promise((n, r) => {
    const i = () => {
      t.removeEventListener("success", s), t.removeEventListener("error", o);
    }, s = () => {
      n(Wn(t.result)), i();
    }, o = () => {
      r(t.error), i();
    };
    t.addEventListener("success", s), t.addEventListener("error", o);
  });
  return e.then((n) => {
    n instanceof IDBCursor && Ty.set(n, t);
  }).catch(() => {
  }), kl.set(e, t), e;
}
function ZA(t) {
  if (xu.has(t))
    return;
  const e = new Promise((n, r) => {
    const i = () => {
      t.removeEventListener("complete", s), t.removeEventListener("error", o), t.removeEventListener("abort", o);
    }, s = () => {
      n(), i();
    }, o = () => {
      r(t.error || new DOMException("AbortError", "AbortError")), i();
    };
    t.addEventListener("complete", s), t.addEventListener("error", o), t.addEventListener("abort", o);
  });
  xu.set(t, e);
}
let Lu = {
  get(t, e, n) {
    if (t instanceof IDBTransaction) {
      if (e === "done")
        return xu.get(t);
      if (e === "objectStoreNames")
        return t.objectStoreNames || Iy.get(t);
      if (e === "store")
        return n.objectStoreNames[1] ? void 0 : n.objectStore(n.objectStoreNames[0]);
    }
    return Wn(t[e]);
  },
  set(t, e, n) {
    return t[e] = n, !0;
  },
  has(t, e) {
    return t instanceof IDBTransaction && (e === "done" || e === "store") ? !0 : e in t;
  }
};
function eR(t) {
  Lu = t(Lu);
}
function tR(t) {
  return t === IDBDatabase.prototype.transaction && !("objectStoreNames" in IDBTransaction.prototype) ? function(e, ...n) {
    const r = t.call($c(this), e, ...n);
    return Iy.set(r, e.sort ? e.sort() : [e]), Wn(r);
  } : JA().includes(t) ? function(...e) {
    return t.apply($c(this), e), Wn(Ty.get(this));
  } : function(...e) {
    return Wn(t.apply($c(this), e));
  };
}
function nR(t) {
  return typeof t == "function" ? tR(t) : (t instanceof IDBTransaction && ZA(t), QA(t, YA()) ? new Proxy(t, Lu) : t);
}
function Wn(t) {
  if (t instanceof IDBRequest)
    return XA(t);
  if (jc.has(t))
    return jc.get(t);
  const e = nR(t);
  return e !== t && (jc.set(t, e), kl.set(e, t)), e;
}
const $c = (t) => kl.get(t);
function Sy(t, e, { blocked: n, upgrade: r, blocking: i, terminated: s } = {}) {
  const o = indexedDB.open(t, e), a = Wn(o);
  return r && o.addEventListener("upgradeneeded", (u) => {
    r(Wn(o.result), u.oldVersion, u.newVersion, Wn(o.transaction), u);
  }), n && o.addEventListener("blocked", (u) => n(
    // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
    u.oldVersion,
    u.newVersion,
    u
  )), a.then((u) => {
    s && u.addEventListener("close", () => s()), i && u.addEventListener("versionchange", (l) => i(l.oldVersion, l.newVersion, l));
  }).catch(() => {
  }), a;
}
const rR = ["get", "getKey", "getAll", "getAllKeys", "count"], iR = ["put", "add", "delete", "clear"], Bc = /* @__PURE__ */ new Map();
function rp(t, e) {
  if (!(t instanceof IDBDatabase && !(e in t) && typeof e == "string"))
    return;
  if (Bc.get(e))
    return Bc.get(e);
  const n = e.replace(/FromIndex$/, ""), r = e !== n, i = iR.includes(n);
  if (
    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
    !(n in (r ? IDBIndex : IDBObjectStore).prototype) || !(i || rR.includes(n))
  )
    return;
  const s = async function(o, ...a) {
    const u = this.transaction(o, i ? "readwrite" : "readonly");
    let l = u.store;
    return r && (l = l.index(a.shift())), (await Promise.all([
      l[n](...a),
      i && u.done
    ]))[0];
  };
  return Bc.set(e, s), s;
}
eR((t) => ({
  ...t,
  get: (e, n, r) => rp(e, n) || t.get(e, n, r),
  has: (e, n) => !!rp(e, n) || t.has(e, n)
}));
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class sR {
  constructor(e) {
    this.container = e;
  }
  // In initial implementation, this will be called by installations on
  // auth token refresh, and installations will send this string.
  getPlatformInfoString() {
    return this.container.getProviders().map((n) => {
      if (oR(n)) {
        const r = n.getImmediate();
        return `${r.library}/${r.version}`;
      } else
        return null;
    }).filter((n) => n).join(" ");
  }
}
function oR(t) {
  const e = t.getComponent();
  return (e == null ? void 0 : e.type) === "VERSION";
}
const Mu = "@firebase/app", ip = "0.10.8";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Cr = new La("@firebase/app"), aR = "@firebase/app-compat", cR = "@firebase/analytics-compat", uR = "@firebase/analytics", lR = "@firebase/app-check-compat", fR = "@firebase/app-check", hR = "@firebase/auth", dR = "@firebase/auth-compat", pR = "@firebase/database", mR = "@firebase/database-compat", gR = "@firebase/functions", yR = "@firebase/functions-compat", vR = "@firebase/installations", _R = "@firebase/installations-compat", wR = "@firebase/messaging", ER = "@firebase/messaging-compat", bR = "@firebase/performance", TR = "@firebase/performance-compat", IR = "@firebase/remote-config", SR = "@firebase/remote-config-compat", AR = "@firebase/storage", RR = "@firebase/storage-compat", CR = "@firebase/firestore", PR = "@firebase/vertexai-preview", kR = "@firebase/firestore-compat", OR = "firebase", DR = "10.12.5";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Vu = "[DEFAULT]", NR = {
  [Mu]: "fire-core",
  [aR]: "fire-core-compat",
  [uR]: "fire-analytics",
  [cR]: "fire-analytics-compat",
  [fR]: "fire-app-check",
  [lR]: "fire-app-check-compat",
  [hR]: "fire-auth",
  [dR]: "fire-auth-compat",
  [pR]: "fire-rtdb",
  [mR]: "fire-rtdb-compat",
  [gR]: "fire-fn",
  [yR]: "fire-fn-compat",
  [vR]: "fire-iid",
  [_R]: "fire-iid-compat",
  [wR]: "fire-fcm",
  [ER]: "fire-fcm-compat",
  [bR]: "fire-perf",
  [TR]: "fire-perf-compat",
  [IR]: "fire-rc",
  [SR]: "fire-rc-compat",
  [AR]: "fire-gcs",
  [RR]: "fire-gcs-compat",
  [CR]: "fire-fst",
  [kR]: "fire-fst-compat",
  [PR]: "fire-vertex",
  "fire-js": "fire-js",
  [OR]: "fire-js-all"
};
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Xo = /* @__PURE__ */ new Map(), xR = /* @__PURE__ */ new Map(), Fu = /* @__PURE__ */ new Map();
function sp(t, e) {
  try {
    t.container.addComponent(e);
  } catch (n) {
    Cr.debug(`Component ${e.name} failed to register with FirebaseApp ${t.name}`, n);
  }
}
function en(t) {
  const e = t.name;
  if (Fu.has(e))
    return Cr.debug(`There were multiple attempts to register component ${e}.`), !1;
  Fu.set(e, t);
  for (const n of Xo.values())
    sp(n, t);
  for (const n of xR.values())
    sp(n, t);
  return !0;
}
function nr(t, e) {
  const n = t.container.getProvider("heartbeat").getImmediate({ optional: !0 });
  return n && n.triggerHeartbeat(), t.container.getProvider(e);
}
function Bt(t) {
  return t.settings !== void 0;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const LR = {
  "no-app": "No Firebase App '{$appName}' has been created - call initializeApp() first",
  "bad-app-name": "Illegal App name: '{$appName}'",
  "duplicate-app": "Firebase App named '{$appName}' already exists with different options or config",
  "app-deleted": "Firebase App named '{$appName}' already deleted",
  "server-app-deleted": "Firebase Server App has been deleted",
  "no-options": "Need to provide options, when not being deployed to hosting via source.",
  "invalid-app-argument": "firebase.{$appName}() takes either no argument or a Firebase App instance.",
  "invalid-log-argument": "First argument to `onLog` must be null or a function.",
  "idb-open": "Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.",
  "idb-get": "Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.",
  "idb-set": "Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.",
  "idb-delete": "Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.",
  "finalization-registry-not-supported": "FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.",
  "invalid-server-app-environment": "FirebaseServerApp is not for use in browser environments."
}, Qn = new Ur("app", "Firebase", LR);
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class MR {
  constructor(e, n, r) {
    this._isDeleted = !1, this._options = Object.assign({}, e), this._config = Object.assign({}, n), this._name = n.name, this._automaticDataCollectionEnabled = n.automaticDataCollectionEnabled, this._container = r, this.container.addComponent(new Kt(
      "app",
      () => this,
      "PUBLIC"
      /* ComponentType.PUBLIC */
    ));
  }
  get automaticDataCollectionEnabled() {
    return this.checkDestroyed(), this._automaticDataCollectionEnabled;
  }
  set automaticDataCollectionEnabled(e) {
    this.checkDestroyed(), this._automaticDataCollectionEnabled = e;
  }
  get name() {
    return this.checkDestroyed(), this._name;
  }
  get options() {
    return this.checkDestroyed(), this._options;
  }
  get config() {
    return this.checkDestroyed(), this._config;
  }
  get container() {
    return this._container;
  }
  get isDeleted() {
    return this._isDeleted;
  }
  set isDeleted(e) {
    this._isDeleted = e;
  }
  /**
   * This function will throw an Error if the App has already been deleted -
   * use before performing API actions on the App.
   */
  checkDestroyed() {
    if (this.isDeleted)
      throw Qn.create("app-deleted", { appName: this._name });
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const jr = DR;
function Ay(t, e = {}) {
  let n = t;
  typeof e != "object" && (e = { name: e });
  const r = Object.assign({ name: Vu, automaticDataCollectionEnabled: !1 }, e), i = r.name;
  if (typeof i != "string" || !i)
    throw Qn.create("bad-app-name", {
      appName: String(i)
    });
  if (n || (n = yy()), !n)
    throw Qn.create(
      "no-options"
      /* AppError.NO_OPTIONS */
    );
  const s = Xo.get(i);
  if (s) {
    if (_s(n, s.options) && _s(r, s.config))
      return s;
    throw Qn.create("duplicate-app", { appName: i });
  }
  const o = new zA(i);
  for (const u of Fu.values())
    o.addComponent(u);
  const a = new MR(n, r, o);
  return Xo.set(i, a), a;
}
function Ma(t = Vu) {
  const e = Xo.get(t);
  if (!e && t === Vu && yy())
    return Ay();
  if (!e)
    throw Qn.create("no-app", { appName: t });
  return e;
}
function Pt(t, e, n) {
  var r;
  let i = (r = NR[t]) !== null && r !== void 0 ? r : t;
  n && (i += `-${n}`);
  const s = i.match(/\s|\//), o = e.match(/\s|\//);
  if (s || o) {
    const a = [
      `Unable to register library "${i}" with version "${e}":`
    ];
    s && a.push(`library name "${i}" contains illegal characters (whitespace or "/")`), s && o && a.push("and"), o && a.push(`version name "${e}" contains illegal characters (whitespace or "/")`), Cr.warn(a.join(" "));
    return;
  }
  en(new Kt(
    `${i}-version`,
    () => ({ library: i, version: e }),
    "VERSION"
    /* ComponentType.VERSION */
  ));
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const VR = "firebase-heartbeat-database", FR = 1, ws = "firebase-heartbeat-store";
let qc = null;
function Ry() {
  return qc || (qc = Sy(VR, FR, {
    upgrade: (t, e) => {
      switch (e) {
        case 0:
          try {
            t.createObjectStore(ws);
          } catch (n) {
            console.warn(n);
          }
      }
    }
  }).catch((t) => {
    throw Qn.create("idb-open", {
      originalErrorMessage: t.message
    });
  })), qc;
}
async function UR(t) {
  try {
    const n = (await Ry()).transaction(ws), r = await n.objectStore(ws).get(Cy(t));
    return await n.done, r;
  } catch (e) {
    if (e instanceof Gt)
      Cr.warn(e.message);
    else {
      const n = Qn.create("idb-get", {
        originalErrorMessage: e == null ? void 0 : e.message
      });
      Cr.warn(n.message);
    }
  }
}
async function op(t, e) {
  try {
    const r = (await Ry()).transaction(ws, "readwrite");
    await r.objectStore(ws).put(e, Cy(t)), await r.done;
  } catch (n) {
    if (n instanceof Gt)
      Cr.warn(n.message);
    else {
      const r = Qn.create("idb-set", {
        originalErrorMessage: n == null ? void 0 : n.message
      });
      Cr.warn(r.message);
    }
  }
}
function Cy(t) {
  return `${t.name}!${t.options.appId}`;
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const jR = 1024, $R = 30 * 24 * 60 * 60 * 1e3;
class BR {
  constructor(e) {
    this.container = e, this._heartbeatsCache = null;
    const n = this.container.getProvider("app").getImmediate();
    this._storage = new zR(n), this._heartbeatsCachePromise = this._storage.read().then((r) => (this._heartbeatsCache = r, r));
  }
  /**
   * Called to report a heartbeat. The function will generate
   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it
   * to IndexedDB.
   * Note that we only store one heartbeat per day. So if a heartbeat for today is
   * already logged, subsequent calls to this function in the same day will be ignored.
   */
  async triggerHeartbeat() {
    var e, n;
    const i = this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(), s = ap();
    if (!(((e = this._heartbeatsCache) === null || e === void 0 ? void 0 : e.heartbeats) == null && (this._heartbeatsCache = await this._heartbeatsCachePromise, ((n = this._heartbeatsCache) === null || n === void 0 ? void 0 : n.heartbeats) == null)) && !(this._heartbeatsCache.lastSentHeartbeatDate === s || this._heartbeatsCache.heartbeats.some((o) => o.date === s)))
      return this._heartbeatsCache.heartbeats.push({ date: s, agent: i }), this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter((o) => {
        const a = new Date(o.date).valueOf();
        return Date.now() - a <= $R;
      }), this._storage.overwrite(this._heartbeatsCache);
  }
  /**
   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.
   * It also clears all heartbeats from memory as well as in IndexedDB.
   *
   * NOTE: Consuming product SDKs should not send the header if this method
   * returns an empty string.
   */
  async getHeartbeatsHeader() {
    var e;
    if (this._heartbeatsCache === null && await this._heartbeatsCachePromise, ((e = this._heartbeatsCache) === null || e === void 0 ? void 0 : e.heartbeats) == null || this._heartbeatsCache.heartbeats.length === 0)
      return "";
    const n = ap(), { heartbeatsToSend: r, unsentEntries: i } = qR(this._heartbeatsCache.heartbeats), s = Jo(JSON.stringify({ version: 2, heartbeats: r }));
    return this._heartbeatsCache.lastSentHeartbeatDate = n, i.length > 0 ? (this._heartbeatsCache.heartbeats = i, await this._storage.overwrite(this._heartbeatsCache)) : (this._heartbeatsCache.heartbeats = [], this._storage.overwrite(this._heartbeatsCache)), s;
  }
}
function ap() {
  return (/* @__PURE__ */ new Date()).toISOString().substring(0, 10);
}
function qR(t, e = jR) {
  const n = [];
  let r = t.slice();
  for (const i of t) {
    const s = n.find((o) => o.agent === i.agent);
    if (s) {
      if (s.dates.push(i.date), cp(n) > e) {
        s.dates.pop();
        break;
      }
    } else if (n.push({
      agent: i.agent,
      dates: [i.date]
    }), cp(n) > e) {
      n.pop();
      break;
    }
    r = r.slice(1);
  }
  return {
    heartbeatsToSend: n,
    unsentEntries: r
  };
}
class zR {
  constructor(e) {
    this.app = e, this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();
  }
  async runIndexedDBEnvironmentCheck() {
    return Ey() ? by().then(() => !0).catch(() => !1) : !1;
  }
  /**
   * Read all heartbeats.
   */
  async read() {
    if (await this._canUseIndexedDBPromise) {
      const n = await UR(this.app);
      return n != null && n.heartbeats ? n : { heartbeats: [] };
    } else
      return { heartbeats: [] };
  }
  // overwrite the storage with the provided heartbeats
  async overwrite(e) {
    var n;
    if (await this._canUseIndexedDBPromise) {
      const i = await this.read();
      return op(this.app, {
        lastSentHeartbeatDate: (n = e.lastSentHeartbeatDate) !== null && n !== void 0 ? n : i.lastSentHeartbeatDate,
        heartbeats: e.heartbeats
      });
    } else
      return;
  }
  // add heartbeats
  async add(e) {
    var n;
    if (await this._canUseIndexedDBPromise) {
      const i = await this.read();
      return op(this.app, {
        lastSentHeartbeatDate: (n = e.lastSentHeartbeatDate) !== null && n !== void 0 ? n : i.lastSentHeartbeatDate,
        heartbeats: [
          ...i.heartbeats,
          ...e.heartbeats
        ]
      });
    } else
      return;
  }
}
function cp(t) {
  return Jo(
    // heartbeatsCache wrapper properties
    JSON.stringify({ version: 2, heartbeats: t })
  ).length;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function KR(t) {
  en(new Kt(
    "platform-logger",
    (e) => new sR(e),
    "PRIVATE"
    /* ComponentType.PRIVATE */
  )), en(new Kt(
    "heartbeat",
    (e) => new BR(e),
    "PRIVATE"
    /* ComponentType.PRIVATE */
  )), Pt(Mu, ip, t), Pt(Mu, ip, "esm2017"), Pt("fire-js", "");
}
KR("");
var HR = "firebase", GR = "10.12.5";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Pt(HR, GR, "app");
function Ol(t, e) {
  var n = {};
  for (var r in t) Object.prototype.hasOwnProperty.call(t, r) && e.indexOf(r) < 0 && (n[r] = t[r]);
  if (t != null && typeof Object.getOwnPropertySymbols == "function")
    for (var i = 0, r = Object.getOwnPropertySymbols(t); i < r.length; i++)
      e.indexOf(r[i]) < 0 && Object.prototype.propertyIsEnumerable.call(t, r[i]) && (n[r[i]] = t[r[i]]);
  return n;
}
function Py() {
  return {
    "dependent-sdk-initialized-before-auth": "Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."
  };
}
const WR = Py, ky = new Ur("auth", "Firebase", Py());
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Zo = new La("@firebase/auth");
function QR(t, ...e) {
  Zo.logLevel <= _e.WARN && Zo.warn(`Auth (${jr}): ${t}`, ...e);
}
function Do(t, ...e) {
  Zo.logLevel <= _e.ERROR && Zo.error(`Auth (${jr}): ${t}`, ...e);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Ht(t, ...e) {
  throw Nl(t, ...e);
}
function kt(t, ...e) {
  return Nl(t, ...e);
}
function Dl(t, e, n) {
  const r = Object.assign(Object.assign({}, WR()), { [e]: n });
  return new Ur("auth", "Firebase", r).create(e, {
    appName: t.name
  });
}
function cn(t) {
  return Dl(t, "operation-not-supported-in-this-environment", "Operations that alter the current user are not supported in conjunction with FirebaseServerApp");
}
function YR(t, e, n) {
  const r = n;
  if (!(e instanceof r))
    throw r.name !== e.constructor.name && Ht(
      t,
      "argument-error"
      /* AuthErrorCode.ARGUMENT_ERROR */
    ), Dl(t, "argument-error", `Type of ${e.constructor.name} does not match expected instance.Did you pass a reference from a different Auth SDK?`);
}
function Nl(t, ...e) {
  if (typeof t != "string") {
    const n = e[0], r = [...e.slice(1)];
    return r[0] && (r[0].appName = t.name), t._errorFactory.create(n, ...r);
  }
  return ky.create(t, ...e);
}
function te(t, e, ...n) {
  if (!t)
    throw Nl(e, ...n);
}
function Tn(t) {
  const e = "INTERNAL ASSERTION FAILED: " + t;
  throw Do(e), new Error(e);
}
function kn(t, e) {
  t || Tn(e);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Uu() {
  var t;
  return typeof self < "u" && ((t = self.location) === null || t === void 0 ? void 0 : t.href) || "";
}
function Oy() {
  return up() === "http:" || up() === "https:";
}
function up() {
  var t;
  return typeof self < "u" && ((t = self.location) === null || t === void 0 ? void 0 : t.protocol) || null;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function JR() {
  return typeof navigator < "u" && navigator && "onLine" in navigator && typeof navigator.onLine == "boolean" && // Apply only for traditional web apps and Chrome extensions.
  // This is especially true for Cordova apps which have unreliable
  // navigator.onLine behavior unless cordova-plugin-network-information is
  // installed which overwrites the native navigator.onLine value and
  // defines navigator.connection.
  (Oy() || wy() || "connection" in navigator) ? navigator.onLine : !0;
}
function XR() {
  if (typeof navigator > "u")
    return null;
  const t = navigator;
  return (
    // Most reliable, but only supported in Chrome/Firefox.
    t.languages && t.languages[0] || // Supported in most browsers, but returns the language of the browser
    // UI, not the language set in browser settings.
    t.language || // Couldn't determine language.
    null
  );
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class xs {
  constructor(e, n) {
    this.shortDelay = e, this.longDelay = n, kn(n > e, "Short delay should be less than long delay!"), this.isMobile = IA() || AA();
  }
  get() {
    return JR() ? this.isMobile ? this.longDelay : this.shortDelay : Math.min(5e3, this.shortDelay);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function xl(t, e) {
  kn(t.emulator, "Emulator should always be set here");
  const { url: n } = t.emulator;
  return e ? `${n}${e.startsWith("/") ? e.slice(1) : e}` : n;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Dy {
  static initialize(e, n, r) {
    this.fetchImpl = e, n && (this.headersImpl = n), r && (this.responseImpl = r);
  }
  static fetch() {
    if (this.fetchImpl)
      return this.fetchImpl;
    if (typeof self < "u" && "fetch" in self)
      return self.fetch;
    if (typeof globalThis < "u" && globalThis.fetch)
      return globalThis.fetch;
    if (typeof fetch < "u")
      return fetch;
    Tn("Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
  }
  static headers() {
    if (this.headersImpl)
      return this.headersImpl;
    if (typeof self < "u" && "Headers" in self)
      return self.Headers;
    if (typeof globalThis < "u" && globalThis.Headers)
      return globalThis.Headers;
    if (typeof Headers < "u")
      return Headers;
    Tn("Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
  }
  static response() {
    if (this.responseImpl)
      return this.responseImpl;
    if (typeof self < "u" && "Response" in self)
      return self.Response;
    if (typeof globalThis < "u" && globalThis.Response)
      return globalThis.Response;
    if (typeof Response < "u")
      return Response;
    Tn("Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const ZR = {
  // Custom token errors.
  CREDENTIAL_MISMATCH: "custom-token-mismatch",
  // This can only happen if the SDK sends a bad request.
  MISSING_CUSTOM_TOKEN: "internal-error",
  // Create Auth URI errors.
  INVALID_IDENTIFIER: "invalid-email",
  // This can only happen if the SDK sends a bad request.
  MISSING_CONTINUE_URI: "internal-error",
  // Sign in with email and password errors (some apply to sign up too).
  INVALID_PASSWORD: "wrong-password",
  // This can only happen if the SDK sends a bad request.
  MISSING_PASSWORD: "missing-password",
  // Thrown if Email Enumeration Protection is enabled in the project and the email or password is
  // invalid.
  INVALID_LOGIN_CREDENTIALS: "invalid-credential",
  // Sign up with email and password errors.
  EMAIL_EXISTS: "email-already-in-use",
  PASSWORD_LOGIN_DISABLED: "operation-not-allowed",
  // Verify assertion for sign in with credential errors:
  INVALID_IDP_RESPONSE: "invalid-credential",
  INVALID_PENDING_TOKEN: "invalid-credential",
  FEDERATED_USER_ID_ALREADY_LINKED: "credential-already-in-use",
  // This can only happen if the SDK sends a bad request.
  MISSING_REQ_TYPE: "internal-error",
  // Send Password reset email errors:
  EMAIL_NOT_FOUND: "user-not-found",
  RESET_PASSWORD_EXCEED_LIMIT: "too-many-requests",
  EXPIRED_OOB_CODE: "expired-action-code",
  INVALID_OOB_CODE: "invalid-action-code",
  // This can only happen if the SDK sends a bad request.
  MISSING_OOB_CODE: "internal-error",
  // Operations that require ID token in request:
  CREDENTIAL_TOO_OLD_LOGIN_AGAIN: "requires-recent-login",
  INVALID_ID_TOKEN: "invalid-user-token",
  TOKEN_EXPIRED: "user-token-expired",
  USER_NOT_FOUND: "user-token-expired",
  // Other errors.
  TOO_MANY_ATTEMPTS_TRY_LATER: "too-many-requests",
  PASSWORD_DOES_NOT_MEET_REQUIREMENTS: "password-does-not-meet-requirements",
  // Phone Auth related errors.
  INVALID_CODE: "invalid-verification-code",
  INVALID_SESSION_INFO: "invalid-verification-id",
  INVALID_TEMPORARY_PROOF: "invalid-credential",
  MISSING_SESSION_INFO: "missing-verification-id",
  SESSION_EXPIRED: "code-expired",
  // Other action code errors when additional settings passed.
  // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.
  // This is OK as this error will be caught by client side validation.
  MISSING_ANDROID_PACKAGE_NAME: "missing-android-pkg-name",
  UNAUTHORIZED_DOMAIN: "unauthorized-continue-uri",
  // getProjectConfig errors when clientId is passed.
  INVALID_OAUTH_CLIENT_ID: "invalid-oauth-client-id",
  // User actions (sign-up or deletion) disabled errors.
  ADMIN_ONLY_OPERATION: "admin-restricted-operation",
  // Multi factor related errors.
  INVALID_MFA_PENDING_CREDENTIAL: "invalid-multi-factor-session",
  MFA_ENROLLMENT_NOT_FOUND: "multi-factor-info-not-found",
  MISSING_MFA_ENROLLMENT_ID: "missing-multi-factor-info",
  MISSING_MFA_PENDING_CREDENTIAL: "missing-multi-factor-session",
  SECOND_FACTOR_EXISTS: "second-factor-already-in-use",
  SECOND_FACTOR_LIMIT_EXCEEDED: "maximum-second-factor-count-exceeded",
  // Blocking functions related errors.
  BLOCKING_FUNCTION_ERROR_RESPONSE: "internal-error",
  // Recaptcha related errors.
  RECAPTCHA_NOT_ENABLED: "recaptcha-not-enabled",
  MISSING_RECAPTCHA_TOKEN: "missing-recaptcha-token",
  INVALID_RECAPTCHA_TOKEN: "invalid-recaptcha-token",
  INVALID_RECAPTCHA_ACTION: "invalid-recaptcha-action",
  MISSING_CLIENT_TYPE: "missing-client-type",
  MISSING_RECAPTCHA_VERSION: "missing-recaptcha-version",
  INVALID_RECAPTCHA_VERSION: "invalid-recaptcha-version",
  INVALID_REQ_TYPE: "invalid-req-type"
  /* AuthErrorCode.INVALID_REQ_TYPE */
};
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const eC = new xs(3e4, 6e4);
function Nn(t, e) {
  return t.tenantId && !e.tenantId ? Object.assign(Object.assign({}, e), { tenantId: t.tenantId }) : e;
}
async function gn(t, e, n, r, i = {}) {
  return Ny(t, i, async () => {
    let s = {}, o = {};
    r && (e === "GET" ? o = r : s = {
      body: JSON.stringify(r)
    });
    const a = Ii(Object.assign({ key: t.config.apiKey }, o)).slice(1), u = await t._getAdditionalHeaders();
    return u[
      "Content-Type"
      /* HttpHeader.CONTENT_TYPE */
    ] = "application/json", t.languageCode && (u[
      "X-Firebase-Locale"
      /* HttpHeader.X_FIREBASE_LOCALE */
    ] = t.languageCode), Dy.fetch()(xy(t, t.config.apiHost, n, a), Object.assign({
      method: e,
      headers: u,
      referrerPolicy: "no-referrer"
    }, s));
  });
}
async function Ny(t, e, n) {
  t._canInitEmulator = !1;
  const r = Object.assign(Object.assign({}, ZR), e);
  try {
    const i = new nC(t), s = await Promise.race([
      n(),
      i.promise
    ]);
    i.clearNetworkTimeout();
    const o = await s.json();
    if ("needConfirmation" in o)
      throw _o(t, "account-exists-with-different-credential", o);
    if (s.ok && !("errorMessage" in o))
      return o;
    {
      const a = s.ok ? o.errorMessage : o.error.message, [u, l] = a.split(" : ");
      if (u === "FEDERATED_USER_ID_ALREADY_LINKED")
        throw _o(t, "credential-already-in-use", o);
      if (u === "EMAIL_EXISTS")
        throw _o(t, "email-already-in-use", o);
      if (u === "USER_DISABLED")
        throw _o(t, "user-disabled", o);
      const h = r[u] || u.toLowerCase().replace(/[_\s]+/g, "-");
      if (l)
        throw Dl(t, h, l);
      Ht(t, h);
    }
  } catch (i) {
    if (i instanceof Gt)
      throw i;
    Ht(t, "network-request-failed", { message: String(i) });
  }
}
async function Si(t, e, n, r, i = {}) {
  const s = await gn(t, e, n, r, i);
  return "mfaPendingCredential" in s && Ht(t, "multi-factor-auth-required", {
    _serverResponse: s
  }), s;
}
function xy(t, e, n, r) {
  const i = `${e}${n}?${r}`;
  return t.config.emulator ? xl(t.config, i) : `${t.config.apiScheme}://${i}`;
}
function tC(t) {
  switch (t) {
    case "ENFORCE":
      return "ENFORCE";
    case "AUDIT":
      return "AUDIT";
    case "OFF":
      return "OFF";
    default:
      return "ENFORCEMENT_STATE_UNSPECIFIED";
  }
}
class nC {
  constructor(e) {
    this.auth = e, this.timer = null, this.promise = new Promise((n, r) => {
      this.timer = setTimeout(() => r(kt(
        this.auth,
        "network-request-failed"
        /* AuthErrorCode.NETWORK_REQUEST_FAILED */
      )), eC.get());
    });
  }
  clearNetworkTimeout() {
    clearTimeout(this.timer);
  }
}
function _o(t, e, n) {
  const r = {
    appName: t.name
  };
  n.email && (r.email = n.email), n.phoneNumber && (r.phoneNumber = n.phoneNumber);
  const i = kt(t, e, r);
  return i.customData._tokenResponse = n, i;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function lp(t) {
  return t !== void 0 && t.getResponse !== void 0;
}
function fp(t) {
  return t !== void 0 && t.enterprise !== void 0;
}
class rC {
  constructor(e) {
    if (this.siteKey = "", this.recaptchaEnforcementState = [], e.recaptchaKey === void 0)
      throw new Error("recaptchaKey undefined");
    this.siteKey = e.recaptchaKey.split("/")[3], this.recaptchaEnforcementState = e.recaptchaEnforcementState;
  }
  /**
   * Returns the reCAPTCHA Enterprise enforcement state for the given provider.
   *
   * @param providerStr - The provider whose enforcement state is to be returned.
   * @returns The reCAPTCHA Enterprise enforcement state for the given provider.
   */
  getProviderEnforcementState(e) {
    if (!this.recaptchaEnforcementState || this.recaptchaEnforcementState.length === 0)
      return null;
    for (const n of this.recaptchaEnforcementState)
      if (n.provider && n.provider === e)
        return tC(n.enforcementState);
    return null;
  }
  /**
   * Returns true if the reCAPTCHA Enterprise enforcement state for the provider is set to ENFORCE or AUDIT.
   *
   * @param providerStr - The provider whose enablement state is to be returned.
   * @returns Whether or not reCAPTCHA Enterprise protection is enabled for the given provider.
   */
  isProviderEnabled(e) {
    return this.getProviderEnforcementState(e) === "ENFORCE" || this.getProviderEnforcementState(e) === "AUDIT";
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function iC(t) {
  return (await gn(
    t,
    "GET",
    "/v1/recaptchaParams"
    /* Endpoint.GET_RECAPTCHA_PARAM */
  )).recaptchaSiteKey || "";
}
async function sC(t, e) {
  return gn(t, "GET", "/v2/recaptchaConfig", Nn(t, e));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function oC(t, e) {
  return gn(t, "POST", "/v1/accounts:delete", e);
}
async function Ly(t, e) {
  return gn(t, "POST", "/v1/accounts:lookup", e);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function ss(t) {
  if (t)
    try {
      const e = new Date(Number(t));
      if (!isNaN(e.getTime()))
        return e.toUTCString();
    } catch {
    }
}
async function aC(t, e = !1) {
  const n = Ue(t), r = await n.getIdToken(e), i = Ll(r);
  te(
    i && i.exp && i.auth_time && i.iat,
    n.auth,
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  );
  const s = typeof i.firebase == "object" ? i.firebase : void 0, o = s == null ? void 0 : s.sign_in_provider;
  return {
    claims: i,
    token: r,
    authTime: ss(zc(i.auth_time)),
    issuedAtTime: ss(zc(i.iat)),
    expirationTime: ss(zc(i.exp)),
    signInProvider: o || null,
    signInSecondFactor: (s == null ? void 0 : s.sign_in_second_factor) || null
  };
}
function zc(t) {
  return Number(t) * 1e3;
}
function Ll(t) {
  const [e, n, r] = t.split(".");
  if (e === void 0 || n === void 0 || r === void 0)
    return Do("JWT malformed, contained fewer than 3 sections"), null;
  try {
    const i = py(n);
    return i ? JSON.parse(i) : (Do("Failed to decode base64 JWT payload"), null);
  } catch (i) {
    return Do("Caught error parsing JWT payload as JSON", i == null ? void 0 : i.toString()), null;
  }
}
function hp(t) {
  const e = Ll(t);
  return te(
    e,
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  ), te(
    typeof e.exp < "u",
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  ), te(
    typeof e.iat < "u",
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  ), Number(e.exp) - Number(e.iat);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function di(t, e, n = !1) {
  if (n)
    return e;
  try {
    return await e;
  } catch (r) {
    throw r instanceof Gt && cC(r) && t.auth.currentUser === t && await t.auth.signOut(), r;
  }
}
function cC({ code: t }) {
  return t === "auth/user-disabled" || t === "auth/user-token-expired";
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class uC {
  constructor(e) {
    this.user = e, this.isRunning = !1, this.timerId = null, this.errorBackoff = 3e4;
  }
  _start() {
    this.isRunning || (this.isRunning = !0, this.schedule());
  }
  _stop() {
    this.isRunning && (this.isRunning = !1, this.timerId !== null && clearTimeout(this.timerId));
  }
  getInterval(e) {
    var n;
    if (e) {
      const r = this.errorBackoff;
      return this.errorBackoff = Math.min(
        this.errorBackoff * 2,
        96e4
        /* Duration.RETRY_BACKOFF_MAX */
      ), r;
    } else {
      this.errorBackoff = 3e4;
      const i = ((n = this.user.stsTokenManager.expirationTime) !== null && n !== void 0 ? n : 0) - Date.now() - 3e5;
      return Math.max(0, i);
    }
  }
  schedule(e = !1) {
    if (!this.isRunning)
      return;
    const n = this.getInterval(e);
    this.timerId = setTimeout(async () => {
      await this.iteration();
    }, n);
  }
  async iteration() {
    try {
      await this.user.getIdToken(!0);
    } catch (e) {
      (e == null ? void 0 : e.code) === "auth/network-request-failed" && this.schedule(
        /* wasError */
        !0
      );
      return;
    }
    this.schedule();
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ju {
  constructor(e, n) {
    this.createdAt = e, this.lastLoginAt = n, this._initializeTime();
  }
  _initializeTime() {
    this.lastSignInTime = ss(this.lastLoginAt), this.creationTime = ss(this.createdAt);
  }
  _copy(e) {
    this.createdAt = e.createdAt, this.lastLoginAt = e.lastLoginAt, this._initializeTime();
  }
  toJSON() {
    return {
      createdAt: this.createdAt,
      lastLoginAt: this.lastLoginAt
    };
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function ea(t) {
  var e;
  const n = t.auth, r = await t.getIdToken(), i = await di(t, Ly(n, { idToken: r }));
  te(
    i == null ? void 0 : i.users.length,
    n,
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  );
  const s = i.users[0];
  t._notifyReloadListener(s);
  const o = !((e = s.providerUserInfo) === null || e === void 0) && e.length ? My(s.providerUserInfo) : [], a = fC(t.providerData, o), u = t.isAnonymous, l = !(t.email && s.passwordHash) && !(a != null && a.length), h = u ? l : !1, f = {
    uid: s.localId,
    displayName: s.displayName || null,
    photoURL: s.photoUrl || null,
    email: s.email || null,
    emailVerified: s.emailVerified || !1,
    phoneNumber: s.phoneNumber || null,
    tenantId: s.tenantId || null,
    providerData: a,
    metadata: new ju(s.createdAt, s.lastLoginAt),
    isAnonymous: h
  };
  Object.assign(t, f);
}
async function lC(t) {
  const e = Ue(t);
  await ea(e), await e.auth._persistUserIfCurrent(e), e.auth._notifyListenersIfCurrent(e);
}
function fC(t, e) {
  return [...t.filter((r) => !e.some((i) => i.providerId === r.providerId)), ...e];
}
function My(t) {
  return t.map((e) => {
    var { providerId: n } = e, r = Ol(e, ["providerId"]);
    return {
      providerId: n,
      uid: r.rawId || "",
      displayName: r.displayName || null,
      email: r.email || null,
      phoneNumber: r.phoneNumber || null,
      photoURL: r.photoUrl || null
    };
  });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function hC(t, e) {
  const n = await Ny(t, {}, async () => {
    const r = Ii({
      grant_type: "refresh_token",
      refresh_token: e
    }).slice(1), { tokenApiHost: i, apiKey: s } = t.config, o = xy(t, i, "/v1/token", `key=${s}`), a = await t._getAdditionalHeaders();
    return a[
      "Content-Type"
      /* HttpHeader.CONTENT_TYPE */
    ] = "application/x-www-form-urlencoded", Dy.fetch()(o, {
      method: "POST",
      headers: a,
      body: r
    });
  });
  return {
    accessToken: n.access_token,
    expiresIn: n.expires_in,
    refreshToken: n.refresh_token
  };
}
async function dC(t, e) {
  return gn(t, "POST", "/v2/accounts:revokeToken", Nn(t, e));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ii {
  constructor() {
    this.refreshToken = null, this.accessToken = null, this.expirationTime = null;
  }
  get isExpired() {
    return !this.expirationTime || Date.now() > this.expirationTime - 3e4;
  }
  updateFromServerResponse(e) {
    te(
      e.idToken,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), te(
      typeof e.idToken < "u",
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), te(
      typeof e.refreshToken < "u",
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    );
    const n = "expiresIn" in e && typeof e.expiresIn < "u" ? Number(e.expiresIn) : hp(e.idToken);
    this.updateTokensAndExpiration(e.idToken, e.refreshToken, n);
  }
  updateFromIdToken(e) {
    te(
      e.length !== 0,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    );
    const n = hp(e);
    this.updateTokensAndExpiration(e, null, n);
  }
  async getToken(e, n = !1) {
    return !n && this.accessToken && !this.isExpired ? this.accessToken : (te(
      this.refreshToken,
      e,
      "user-token-expired"
      /* AuthErrorCode.TOKEN_EXPIRED */
    ), this.refreshToken ? (await this.refresh(e, this.refreshToken), this.accessToken) : null);
  }
  clearRefreshToken() {
    this.refreshToken = null;
  }
  async refresh(e, n) {
    const { accessToken: r, refreshToken: i, expiresIn: s } = await hC(e, n);
    this.updateTokensAndExpiration(r, i, Number(s));
  }
  updateTokensAndExpiration(e, n, r) {
    this.refreshToken = n || null, this.accessToken = e || null, this.expirationTime = Date.now() + r * 1e3;
  }
  static fromJSON(e, n) {
    const { refreshToken: r, accessToken: i, expirationTime: s } = n, o = new ii();
    return r && (te(typeof r == "string", "internal-error", {
      appName: e
    }), o.refreshToken = r), i && (te(typeof i == "string", "internal-error", {
      appName: e
    }), o.accessToken = i), s && (te(typeof s == "number", "internal-error", {
      appName: e
    }), o.expirationTime = s), o;
  }
  toJSON() {
    return {
      refreshToken: this.refreshToken,
      accessToken: this.accessToken,
      expirationTime: this.expirationTime
    };
  }
  _assign(e) {
    this.accessToken = e.accessToken, this.refreshToken = e.refreshToken, this.expirationTime = e.expirationTime;
  }
  _clone() {
    return Object.assign(new ii(), this.toJSON());
  }
  _performRefresh() {
    return Tn("not implemented");
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Fn(t, e) {
  te(typeof t == "string" || typeof t > "u", "internal-error", { appName: e });
}
class In {
  constructor(e) {
    var { uid: n, auth: r, stsTokenManager: i } = e, s = Ol(e, ["uid", "auth", "stsTokenManager"]);
    this.providerId = "firebase", this.proactiveRefresh = new uC(this), this.reloadUserInfo = null, this.reloadListener = null, this.uid = n, this.auth = r, this.stsTokenManager = i, this.accessToken = i.accessToken, this.displayName = s.displayName || null, this.email = s.email || null, this.emailVerified = s.emailVerified || !1, this.phoneNumber = s.phoneNumber || null, this.photoURL = s.photoURL || null, this.isAnonymous = s.isAnonymous || !1, this.tenantId = s.tenantId || null, this.providerData = s.providerData ? [...s.providerData] : [], this.metadata = new ju(s.createdAt || void 0, s.lastLoginAt || void 0);
  }
  async getIdToken(e) {
    const n = await di(this, this.stsTokenManager.getToken(this.auth, e));
    return te(
      n,
      this.auth,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), this.accessToken !== n && (this.accessToken = n, await this.auth._persistUserIfCurrent(this), this.auth._notifyListenersIfCurrent(this)), n;
  }
  getIdTokenResult(e) {
    return aC(this, e);
  }
  reload() {
    return lC(this);
  }
  _assign(e) {
    this !== e && (te(
      this.uid === e.uid,
      this.auth,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), this.displayName = e.displayName, this.photoURL = e.photoURL, this.email = e.email, this.emailVerified = e.emailVerified, this.phoneNumber = e.phoneNumber, this.isAnonymous = e.isAnonymous, this.tenantId = e.tenantId, this.providerData = e.providerData.map((n) => Object.assign({}, n)), this.metadata._copy(e.metadata), this.stsTokenManager._assign(e.stsTokenManager));
  }
  _clone(e) {
    const n = new In(Object.assign(Object.assign({}, this), { auth: e, stsTokenManager: this.stsTokenManager._clone() }));
    return n.metadata._copy(this.metadata), n;
  }
  _onReload(e) {
    te(
      !this.reloadListener,
      this.auth,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), this.reloadListener = e, this.reloadUserInfo && (this._notifyReloadListener(this.reloadUserInfo), this.reloadUserInfo = null);
  }
  _notifyReloadListener(e) {
    this.reloadListener ? this.reloadListener(e) : this.reloadUserInfo = e;
  }
  _startProactiveRefresh() {
    this.proactiveRefresh._start();
  }
  _stopProactiveRefresh() {
    this.proactiveRefresh._stop();
  }
  async _updateTokensIfNecessary(e, n = !1) {
    let r = !1;
    e.idToken && e.idToken !== this.stsTokenManager.accessToken && (this.stsTokenManager.updateFromServerResponse(e), r = !0), n && await ea(this), await this.auth._persistUserIfCurrent(this), r && this.auth._notifyListenersIfCurrent(this);
  }
  async delete() {
    if (Bt(this.auth.app))
      return Promise.reject(cn(this.auth));
    const e = await this.getIdToken();
    return await di(this, oC(this.auth, { idToken: e })), this.stsTokenManager.clearRefreshToken(), this.auth.signOut();
  }
  toJSON() {
    return Object.assign(Object.assign({
      uid: this.uid,
      email: this.email || void 0,
      emailVerified: this.emailVerified,
      displayName: this.displayName || void 0,
      isAnonymous: this.isAnonymous,
      photoURL: this.photoURL || void 0,
      phoneNumber: this.phoneNumber || void 0,
      tenantId: this.tenantId || void 0,
      providerData: this.providerData.map((e) => Object.assign({}, e)),
      stsTokenManager: this.stsTokenManager.toJSON(),
      // Redirect event ID must be maintained in case there is a pending
      // redirect event.
      _redirectEventId: this._redirectEventId
    }, this.metadata.toJSON()), {
      // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):
      apiKey: this.auth.config.apiKey,
      appName: this.auth.name
    });
  }
  get refreshToken() {
    return this.stsTokenManager.refreshToken || "";
  }
  static _fromJSON(e, n) {
    var r, i, s, o, a, u, l, h;
    const f = (r = n.displayName) !== null && r !== void 0 ? r : void 0, y = (i = n.email) !== null && i !== void 0 ? i : void 0, b = (s = n.phoneNumber) !== null && s !== void 0 ? s : void 0, S = (o = n.photoURL) !== null && o !== void 0 ? o : void 0, C = (a = n.tenantId) !== null && a !== void 0 ? a : void 0, m = (u = n._redirectEventId) !== null && u !== void 0 ? u : void 0, v = (l = n.createdAt) !== null && l !== void 0 ? l : void 0, E = (h = n.lastLoginAt) !== null && h !== void 0 ? h : void 0, { uid: p, emailVerified: g, isAnonymous: w, providerData: I, stsTokenManager: R } = n;
    te(
      p && R,
      e,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    );
    const T = ii.fromJSON(this.name, R);
    te(
      typeof p == "string",
      e,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), Fn(f, e.name), Fn(y, e.name), te(
      typeof g == "boolean",
      e,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), te(
      typeof w == "boolean",
      e,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), Fn(b, e.name), Fn(S, e.name), Fn(C, e.name), Fn(m, e.name), Fn(v, e.name), Fn(E, e.name);
    const A = new In({
      uid: p,
      auth: e,
      email: y,
      emailVerified: g,
      displayName: f,
      isAnonymous: w,
      photoURL: S,
      phoneNumber: b,
      tenantId: C,
      stsTokenManager: T,
      createdAt: v,
      lastLoginAt: E
    });
    return I && Array.isArray(I) && (A.providerData = I.map((O) => Object.assign({}, O))), m && (A._redirectEventId = m), A;
  }
  /**
   * Initialize a User from an idToken server response
   * @param auth
   * @param idTokenResponse
   */
  static async _fromIdTokenResponse(e, n, r = !1) {
    const i = new ii();
    i.updateFromServerResponse(n);
    const s = new In({
      uid: n.localId,
      auth: e,
      stsTokenManager: i,
      isAnonymous: r
    });
    return await ea(s), s;
  }
  /**
   * Initialize a User from an idToken server response
   * @param auth
   * @param idTokenResponse
   */
  static async _fromGetAccountInfoResponse(e, n, r) {
    const i = n.users[0];
    te(
      i.localId !== void 0,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    );
    const s = i.providerUserInfo !== void 0 ? My(i.providerUserInfo) : [], o = !(i.email && i.passwordHash) && !(s != null && s.length), a = new ii();
    a.updateFromIdToken(r);
    const u = new In({
      uid: i.localId,
      auth: e,
      stsTokenManager: a,
      isAnonymous: o
    }), l = {
      uid: i.localId,
      displayName: i.displayName || null,
      photoURL: i.photoUrl || null,
      email: i.email || null,
      emailVerified: i.emailVerified || !1,
      phoneNumber: i.phoneNumber || null,
      tenantId: i.tenantId || null,
      providerData: s,
      metadata: new ju(i.createdAt, i.lastLoginAt),
      isAnonymous: !(i.email && i.passwordHash) && !(s != null && s.length)
    };
    return Object.assign(u, l), u;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const dp = /* @__PURE__ */ new Map();
function Sn(t) {
  kn(t instanceof Function, "Expected a class definition");
  let e = dp.get(t);
  return e ? (kn(e instanceof t, "Instance stored in cache mismatched with class"), e) : (e = new t(), dp.set(t, e), e);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Vy {
  constructor() {
    this.type = "NONE", this.storage = {};
  }
  async _isAvailable() {
    return !0;
  }
  async _set(e, n) {
    this.storage[e] = n;
  }
  async _get(e) {
    const n = this.storage[e];
    return n === void 0 ? null : n;
  }
  async _remove(e) {
    delete this.storage[e];
  }
  _addListener(e, n) {
  }
  _removeListener(e, n) {
  }
}
Vy.type = "NONE";
const pp = Vy;
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function No(t, e, n) {
  return `firebase:${t}:${e}:${n}`;
}
class si {
  constructor(e, n, r) {
    this.persistence = e, this.auth = n, this.userKey = r;
    const { config: i, name: s } = this.auth;
    this.fullUserKey = No(this.userKey, i.apiKey, s), this.fullPersistenceKey = No("persistence", i.apiKey, s), this.boundEventHandler = n._onStorageEvent.bind(n), this.persistence._addListener(this.fullUserKey, this.boundEventHandler);
  }
  setCurrentUser(e) {
    return this.persistence._set(this.fullUserKey, e.toJSON());
  }
  async getCurrentUser() {
    const e = await this.persistence._get(this.fullUserKey);
    return e ? In._fromJSON(this.auth, e) : null;
  }
  removeCurrentUser() {
    return this.persistence._remove(this.fullUserKey);
  }
  savePersistenceForRedirect() {
    return this.persistence._set(this.fullPersistenceKey, this.persistence.type);
  }
  async setPersistence(e) {
    if (this.persistence === e)
      return;
    const n = await this.getCurrentUser();
    if (await this.removeCurrentUser(), this.persistence = e, n)
      return this.setCurrentUser(n);
  }
  delete() {
    this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);
  }
  static async create(e, n, r = "authUser") {
    if (!n.length)
      return new si(Sn(pp), e, r);
    const i = (await Promise.all(n.map(async (l) => {
      if (await l._isAvailable())
        return l;
    }))).filter((l) => l);
    let s = i[0] || Sn(pp);
    const o = No(r, e.config.apiKey, e.name);
    let a = null;
    for (const l of n)
      try {
        const h = await l._get(o);
        if (h) {
          const f = In._fromJSON(e, h);
          l !== s && (a = f), s = l;
          break;
        }
      } catch {
      }
    const u = i.filter((l) => l._shouldAllowMigration);
    return !s._shouldAllowMigration || !u.length ? new si(s, e, r) : (s = u[0], a && await s._set(o, a.toJSON()), await Promise.all(n.map(async (l) => {
      if (l !== s)
        try {
          await l._remove(o);
        } catch {
        }
    })), new si(s, e, r));
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function mp(t) {
  const e = t.toLowerCase();
  if (e.includes("opera/") || e.includes("opr/") || e.includes("opios/"))
    return "Opera";
  if (jy(e))
    return "IEMobile";
  if (e.includes("msie") || e.includes("trident/"))
    return "IE";
  if (e.includes("edge/"))
    return "Edge";
  if (Fy(e))
    return "Firefox";
  if (e.includes("silk/"))
    return "Silk";
  if (By(e))
    return "Blackberry";
  if (qy(e))
    return "Webos";
  if (Ml(e))
    return "Safari";
  if ((e.includes("chrome/") || Uy(e)) && !e.includes("edge/"))
    return "Chrome";
  if ($y(e))
    return "Android";
  {
    const n = /([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/, r = t.match(n);
    if ((r == null ? void 0 : r.length) === 2)
      return r[1];
  }
  return "Other";
}
function Fy(t = lt()) {
  return /firefox\//i.test(t);
}
function Ml(t = lt()) {
  const e = t.toLowerCase();
  return e.includes("safari/") && !e.includes("chrome/") && !e.includes("crios/") && !e.includes("android");
}
function Uy(t = lt()) {
  return /crios\//i.test(t);
}
function jy(t = lt()) {
  return /iemobile/i.test(t);
}
function $y(t = lt()) {
  return /android/i.test(t);
}
function By(t = lt()) {
  return /blackberry/i.test(t);
}
function qy(t = lt()) {
  return /webos/i.test(t);
}
function Va(t = lt()) {
  return /iphone|ipad|ipod/i.test(t) || /macintosh/i.test(t) && /mobile/i.test(t);
}
function pC(t = lt()) {
  var e;
  return Va(t) && !!(!((e = window.navigator) === null || e === void 0) && e.standalone);
}
function mC() {
  return RA() && document.documentMode === 10;
}
function zy(t = lt()) {
  return Va(t) || $y(t) || qy(t) || By(t) || /windows phone/i.test(t) || jy(t);
}
function gC() {
  try {
    return !!(window && window !== window.top);
  } catch {
    return !1;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Ky(t, e = []) {
  let n;
  switch (t) {
    case "Browser":
      n = mp(lt());
      break;
    case "Worker":
      n = `${mp(lt())}-${t}`;
      break;
    default:
      n = t;
  }
  const r = e.length ? e.join(",") : "FirebaseCore-web";
  return `${n}/JsCore/${jr}/${r}`;
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class yC {
  constructor(e) {
    this.auth = e, this.queue = [];
  }
  pushCallback(e, n) {
    const r = (s) => new Promise((o, a) => {
      try {
        const u = e(s);
        o(u);
      } catch (u) {
        a(u);
      }
    });
    r.onAbort = n, this.queue.push(r);
    const i = this.queue.length - 1;
    return () => {
      this.queue[i] = () => Promise.resolve();
    };
  }
  async runMiddleware(e) {
    if (this.auth.currentUser === e)
      return;
    const n = [];
    try {
      for (const r of this.queue)
        await r(e), r.onAbort && n.push(r.onAbort);
    } catch (r) {
      n.reverse();
      for (const i of n)
        try {
          i();
        } catch {
        }
      throw this.auth._errorFactory.create("login-blocked", {
        originalMessage: r == null ? void 0 : r.message
      });
    }
  }
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function vC(t, e = {}) {
  return gn(t, "GET", "/v2/passwordPolicy", Nn(t, e));
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const _C = 6;
class wC {
  constructor(e) {
    var n, r, i, s;
    const o = e.customStrengthOptions;
    this.customStrengthOptions = {}, this.customStrengthOptions.minPasswordLength = (n = o.minPasswordLength) !== null && n !== void 0 ? n : _C, o.maxPasswordLength && (this.customStrengthOptions.maxPasswordLength = o.maxPasswordLength), o.containsLowercaseCharacter !== void 0 && (this.customStrengthOptions.containsLowercaseLetter = o.containsLowercaseCharacter), o.containsUppercaseCharacter !== void 0 && (this.customStrengthOptions.containsUppercaseLetter = o.containsUppercaseCharacter), o.containsNumericCharacter !== void 0 && (this.customStrengthOptions.containsNumericCharacter = o.containsNumericCharacter), o.containsNonAlphanumericCharacter !== void 0 && (this.customStrengthOptions.containsNonAlphanumericCharacter = o.containsNonAlphanumericCharacter), this.enforcementState = e.enforcementState, this.enforcementState === "ENFORCEMENT_STATE_UNSPECIFIED" && (this.enforcementState = "OFF"), this.allowedNonAlphanumericCharacters = (i = (r = e.allowedNonAlphanumericCharacters) === null || r === void 0 ? void 0 : r.join("")) !== null && i !== void 0 ? i : "", this.forceUpgradeOnSignin = (s = e.forceUpgradeOnSignin) !== null && s !== void 0 ? s : !1, this.schemaVersion = e.schemaVersion;
  }
  validatePassword(e) {
    var n, r, i, s, o, a;
    const u = {
      isValid: !0,
      passwordPolicy: this
    };
    return this.validatePasswordLengthOptions(e, u), this.validatePasswordCharacterOptions(e, u), u.isValid && (u.isValid = (n = u.meetsMinPasswordLength) !== null && n !== void 0 ? n : !0), u.isValid && (u.isValid = (r = u.meetsMaxPasswordLength) !== null && r !== void 0 ? r : !0), u.isValid && (u.isValid = (i = u.containsLowercaseLetter) !== null && i !== void 0 ? i : !0), u.isValid && (u.isValid = (s = u.containsUppercaseLetter) !== null && s !== void 0 ? s : !0), u.isValid && (u.isValid = (o = u.containsNumericCharacter) !== null && o !== void 0 ? o : !0), u.isValid && (u.isValid = (a = u.containsNonAlphanumericCharacter) !== null && a !== void 0 ? a : !0), u;
  }
  /**
   * Validates that the password meets the length options for the policy.
   *
   * @param password Password to validate.
   * @param status Validation status.
   */
  validatePasswordLengthOptions(e, n) {
    const r = this.customStrengthOptions.minPasswordLength, i = this.customStrengthOptions.maxPasswordLength;
    r && (n.meetsMinPasswordLength = e.length >= r), i && (n.meetsMaxPasswordLength = e.length <= i);
  }
  /**
   * Validates that the password meets the character options for the policy.
   *
   * @param password Password to validate.
   * @param status Validation status.
   */
  validatePasswordCharacterOptions(e, n) {
    this.updatePasswordCharacterOptionsStatuses(
      n,
      /* containsLowercaseCharacter= */
      !1,
      /* containsUppercaseCharacter= */
      !1,
      /* containsNumericCharacter= */
      !1,
      /* containsNonAlphanumericCharacter= */
      !1
    );
    let r;
    for (let i = 0; i < e.length; i++)
      r = e.charAt(i), this.updatePasswordCharacterOptionsStatuses(
        n,
        /* containsLowercaseCharacter= */
        r >= "a" && r <= "z",
        /* containsUppercaseCharacter= */
        r >= "A" && r <= "Z",
        /* containsNumericCharacter= */
        r >= "0" && r <= "9",
        /* containsNonAlphanumericCharacter= */
        this.allowedNonAlphanumericCharacters.includes(r)
      );
  }
  /**
   * Updates the running validation status with the statuses for the character options.
   * Expected to be called each time a character is processed to update each option status
   * based on the current character.
   *
   * @param status Validation status.
   * @param containsLowercaseCharacter Whether the character is a lowercase letter.
   * @param containsUppercaseCharacter Whether the character is an uppercase letter.
   * @param containsNumericCharacter Whether the character is a numeric character.
   * @param containsNonAlphanumericCharacter Whether the character is a non-alphanumeric character.
   */
  updatePasswordCharacterOptionsStatuses(e, n, r, i, s) {
    this.customStrengthOptions.containsLowercaseLetter && (e.containsLowercaseLetter || (e.containsLowercaseLetter = n)), this.customStrengthOptions.containsUppercaseLetter && (e.containsUppercaseLetter || (e.containsUppercaseLetter = r)), this.customStrengthOptions.containsNumericCharacter && (e.containsNumericCharacter || (e.containsNumericCharacter = i)), this.customStrengthOptions.containsNonAlphanumericCharacter && (e.containsNonAlphanumericCharacter || (e.containsNonAlphanumericCharacter = s));
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class EC {
  constructor(e, n, r, i) {
    this.app = e, this.heartbeatServiceProvider = n, this.appCheckServiceProvider = r, this.config = i, this.currentUser = null, this.emulatorConfig = null, this.operations = Promise.resolve(), this.authStateSubscription = new gp(this), this.idTokenSubscription = new gp(this), this.beforeStateQueue = new yC(this), this.redirectUser = null, this.isProactiveRefreshEnabled = !1, this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION = 1, this._canInitEmulator = !0, this._isInitialized = !1, this._deleted = !1, this._initializationPromise = null, this._popupRedirectResolver = null, this._errorFactory = ky, this._agentRecaptchaConfig = null, this._tenantRecaptchaConfigs = {}, this._projectPasswordPolicy = null, this._tenantPasswordPolicies = {}, this.lastNotifiedUid = void 0, this.languageCode = null, this.tenantId = null, this.settings = { appVerificationDisabledForTesting: !1 }, this.frameworks = [], this.name = e.name, this.clientVersion = i.sdkClientVersion;
  }
  _initializeWithPersistence(e, n) {
    return n && (this._popupRedirectResolver = Sn(n)), this._initializationPromise = this.queue(async () => {
      var r, i;
      if (!this._deleted && (this.persistenceManager = await si.create(this, e), !this._deleted)) {
        if (!((r = this._popupRedirectResolver) === null || r === void 0) && r._shouldInitProactively)
          try {
            await this._popupRedirectResolver._initialize(this);
          } catch {
          }
        await this.initializeCurrentUser(n), this.lastNotifiedUid = ((i = this.currentUser) === null || i === void 0 ? void 0 : i.uid) || null, !this._deleted && (this._isInitialized = !0);
      }
    }), this._initializationPromise;
  }
  /**
   * If the persistence is changed in another window, the user manager will let us know
   */
  async _onStorageEvent() {
    if (this._deleted)
      return;
    const e = await this.assertedPersistence.getCurrentUser();
    if (!(!this.currentUser && !e)) {
      if (this.currentUser && e && this.currentUser.uid === e.uid) {
        this._currentUser._assign(e), await this.currentUser.getIdToken();
        return;
      }
      await this._updateCurrentUser(
        e,
        /* skipBeforeStateCallbacks */
        !0
      );
    }
  }
  async initializeCurrentUserFromIdToken(e) {
    try {
      const n = await Ly(this, { idToken: e }), r = await In._fromGetAccountInfoResponse(this, n, e);
      await this.directlySetCurrentUser(r);
    } catch (n) {
      console.warn("FirebaseServerApp could not login user with provided authIdToken: ", n), await this.directlySetCurrentUser(null);
    }
  }
  async initializeCurrentUser(e) {
    var n;
    if (Bt(this.app)) {
      const o = this.app.settings.authIdToken;
      return o ? new Promise((a) => {
        setTimeout(() => this.initializeCurrentUserFromIdToken(o).then(a, a));
      }) : this.directlySetCurrentUser(null);
    }
    const r = await this.assertedPersistence.getCurrentUser();
    let i = r, s = !1;
    if (e && this.config.authDomain) {
      await this.getOrInitRedirectPersistenceManager();
      const o = (n = this.redirectUser) === null || n === void 0 ? void 0 : n._redirectEventId, a = i == null ? void 0 : i._redirectEventId, u = await this.tryRedirectSignIn(e);
      (!o || o === a) && (u != null && u.user) && (i = u.user, s = !0);
    }
    if (!i)
      return this.directlySetCurrentUser(null);
    if (!i._redirectEventId) {
      if (s)
        try {
          await this.beforeStateQueue.runMiddleware(i);
        } catch (o) {
          i = r, this._popupRedirectResolver._overrideRedirectResult(this, () => Promise.reject(o));
        }
      return i ? this.reloadAndSetCurrentUserOrClear(i) : this.directlySetCurrentUser(null);
    }
    return te(
      this._popupRedirectResolver,
      this,
      "argument-error"
      /* AuthErrorCode.ARGUMENT_ERROR */
    ), await this.getOrInitRedirectPersistenceManager(), this.redirectUser && this.redirectUser._redirectEventId === i._redirectEventId ? this.directlySetCurrentUser(i) : this.reloadAndSetCurrentUserOrClear(i);
  }
  async tryRedirectSignIn(e) {
    let n = null;
    try {
      n = await this._popupRedirectResolver._completeRedirectFn(this, e, !0);
    } catch {
      await this._setRedirectUser(null);
    }
    return n;
  }
  async reloadAndSetCurrentUserOrClear(e) {
    try {
      await ea(e);
    } catch (n) {
      if ((n == null ? void 0 : n.code) !== "auth/network-request-failed")
        return this.directlySetCurrentUser(null);
    }
    return this.directlySetCurrentUser(e);
  }
  useDeviceLanguage() {
    this.languageCode = XR();
  }
  async _delete() {
    this._deleted = !0;
  }
  async updateCurrentUser(e) {
    if (Bt(this.app))
      return Promise.reject(cn(this));
    const n = e ? Ue(e) : null;
    return n && te(
      n.auth.config.apiKey === this.config.apiKey,
      this,
      "invalid-user-token"
      /* AuthErrorCode.INVALID_AUTH */
    ), this._updateCurrentUser(n && n._clone(this));
  }
  async _updateCurrentUser(e, n = !1) {
    if (!this._deleted)
      return e && te(
        this.tenantId === e.tenantId,
        this,
        "tenant-id-mismatch"
        /* AuthErrorCode.TENANT_ID_MISMATCH */
      ), n || await this.beforeStateQueue.runMiddleware(e), this.queue(async () => {
        await this.directlySetCurrentUser(e), this.notifyAuthListeners();
      });
  }
  async signOut() {
    return Bt(this.app) ? Promise.reject(cn(this)) : (await this.beforeStateQueue.runMiddleware(null), (this.redirectPersistenceManager || this._popupRedirectResolver) && await this._setRedirectUser(null), this._updateCurrentUser(
      null,
      /* skipBeforeStateCallbacks */
      !0
    ));
  }
  setPersistence(e) {
    return Bt(this.app) ? Promise.reject(cn(this)) : this.queue(async () => {
      await this.assertedPersistence.setPersistence(Sn(e));
    });
  }
  _getRecaptchaConfig() {
    return this.tenantId == null ? this._agentRecaptchaConfig : this._tenantRecaptchaConfigs[this.tenantId];
  }
  async validatePassword(e) {
    this._getPasswordPolicyInternal() || await this._updatePasswordPolicy();
    const n = this._getPasswordPolicyInternal();
    return n.schemaVersion !== this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION ? Promise.reject(this._errorFactory.create("unsupported-password-policy-schema-version", {})) : n.validatePassword(e);
  }
  _getPasswordPolicyInternal() {
    return this.tenantId === null ? this._projectPasswordPolicy : this._tenantPasswordPolicies[this.tenantId];
  }
  async _updatePasswordPolicy() {
    const e = await vC(this), n = new wC(e);
    this.tenantId === null ? this._projectPasswordPolicy = n : this._tenantPasswordPolicies[this.tenantId] = n;
  }
  _getPersistence() {
    return this.assertedPersistence.persistence.type;
  }
  _updateErrorMap(e) {
    this._errorFactory = new Ur("auth", "Firebase", e());
  }
  onAuthStateChanged(e, n, r) {
    return this.registerStateListener(this.authStateSubscription, e, n, r);
  }
  beforeAuthStateChanged(e, n) {
    return this.beforeStateQueue.pushCallback(e, n);
  }
  onIdTokenChanged(e, n, r) {
    return this.registerStateListener(this.idTokenSubscription, e, n, r);
  }
  authStateReady() {
    return new Promise((e, n) => {
      if (this.currentUser)
        e();
      else {
        const r = this.onAuthStateChanged(() => {
          r(), e();
        }, n);
      }
    });
  }
  /**
   * Revokes the given access token. Currently only supports Apple OAuth access tokens.
   */
  async revokeAccessToken(e) {
    if (this.currentUser) {
      const n = await this.currentUser.getIdToken(), r = {
        providerId: "apple.com",
        tokenType: "ACCESS_TOKEN",
        token: e,
        idToken: n
      };
      this.tenantId != null && (r.tenantId = this.tenantId), await dC(this, r);
    }
  }
  toJSON() {
    var e;
    return {
      apiKey: this.config.apiKey,
      authDomain: this.config.authDomain,
      appName: this.name,
      currentUser: (e = this._currentUser) === null || e === void 0 ? void 0 : e.toJSON()
    };
  }
  async _setRedirectUser(e, n) {
    const r = await this.getOrInitRedirectPersistenceManager(n);
    return e === null ? r.removeCurrentUser() : r.setCurrentUser(e);
  }
  async getOrInitRedirectPersistenceManager(e) {
    if (!this.redirectPersistenceManager) {
      const n = e && Sn(e) || this._popupRedirectResolver;
      te(
        n,
        this,
        "argument-error"
        /* AuthErrorCode.ARGUMENT_ERROR */
      ), this.redirectPersistenceManager = await si.create(
        this,
        [Sn(n._redirectPersistence)],
        "redirectUser"
        /* KeyName.REDIRECT_USER */
      ), this.redirectUser = await this.redirectPersistenceManager.getCurrentUser();
    }
    return this.redirectPersistenceManager;
  }
  async _redirectUserForId(e) {
    var n, r;
    return this._isInitialized && await this.queue(async () => {
    }), ((n = this._currentUser) === null || n === void 0 ? void 0 : n._redirectEventId) === e ? this._currentUser : ((r = this.redirectUser) === null || r === void 0 ? void 0 : r._redirectEventId) === e ? this.redirectUser : null;
  }
  async _persistUserIfCurrent(e) {
    if (e === this.currentUser)
      return this.queue(async () => this.directlySetCurrentUser(e));
  }
  /** Notifies listeners only if the user is current */
  _notifyListenersIfCurrent(e) {
    e === this.currentUser && this.notifyAuthListeners();
  }
  _key() {
    return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;
  }
  _startProactiveRefresh() {
    this.isProactiveRefreshEnabled = !0, this.currentUser && this._currentUser._startProactiveRefresh();
  }
  _stopProactiveRefresh() {
    this.isProactiveRefreshEnabled = !1, this.currentUser && this._currentUser._stopProactiveRefresh();
  }
  /** Returns the current user cast as the internal type */
  get _currentUser() {
    return this.currentUser;
  }
  notifyAuthListeners() {
    var e, n;
    if (!this._isInitialized)
      return;
    this.idTokenSubscription.next(this.currentUser);
    const r = (n = (e = this.currentUser) === null || e === void 0 ? void 0 : e.uid) !== null && n !== void 0 ? n : null;
    this.lastNotifiedUid !== r && (this.lastNotifiedUid = r, this.authStateSubscription.next(this.currentUser));
  }
  registerStateListener(e, n, r, i) {
    if (this._deleted)
      return () => {
      };
    const s = typeof n == "function" ? n : n.next.bind(n);
    let o = !1;
    const a = this._isInitialized ? Promise.resolve() : this._initializationPromise;
    if (te(
      a,
      this,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), a.then(() => {
      o || s(this.currentUser);
    }), typeof n == "function") {
      const u = e.addObserver(n, r, i);
      return () => {
        o = !0, u();
      };
    } else {
      const u = e.addObserver(n);
      return () => {
        o = !0, u();
      };
    }
  }
  /**
   * Unprotected (from race conditions) method to set the current user. This
   * should only be called from within a queued callback. This is necessary
   * because the queue shouldn't rely on another queued callback.
   */
  async directlySetCurrentUser(e) {
    this.currentUser && this.currentUser !== e && this._currentUser._stopProactiveRefresh(), e && this.isProactiveRefreshEnabled && e._startProactiveRefresh(), this.currentUser = e, e ? await this.assertedPersistence.setCurrentUser(e) : await this.assertedPersistence.removeCurrentUser();
  }
  queue(e) {
    return this.operations = this.operations.then(e, e), this.operations;
  }
  get assertedPersistence() {
    return te(
      this.persistenceManager,
      this,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), this.persistenceManager;
  }
  _logFramework(e) {
    !e || this.frameworks.includes(e) || (this.frameworks.push(e), this.frameworks.sort(), this.clientVersion = Ky(this.config.clientPlatform, this._getFrameworks()));
  }
  _getFrameworks() {
    return this.frameworks;
  }
  async _getAdditionalHeaders() {
    var e;
    const n = {
      "X-Client-Version": this.clientVersion
    };
    this.app.options.appId && (n[
      "X-Firebase-gmpid"
      /* HttpHeader.X_FIREBASE_GMPID */
    ] = this.app.options.appId);
    const r = await ((e = this.heartbeatServiceProvider.getImmediate({
      optional: !0
    })) === null || e === void 0 ? void 0 : e.getHeartbeatsHeader());
    r && (n[
      "X-Firebase-Client"
      /* HttpHeader.X_FIREBASE_CLIENT */
    ] = r);
    const i = await this._getAppCheckToken();
    return i && (n[
      "X-Firebase-AppCheck"
      /* HttpHeader.X_FIREBASE_APP_CHECK */
    ] = i), n;
  }
  async _getAppCheckToken() {
    var e;
    const n = await ((e = this.appCheckServiceProvider.getImmediate({ optional: !0 })) === null || e === void 0 ? void 0 : e.getToken());
    return n != null && n.error && QR(`Error while retrieving App Check token: ${n.error}`), n == null ? void 0 : n.token;
  }
}
function yn(t) {
  return Ue(t);
}
class gp {
  constructor(e) {
    this.auth = e, this.observer = null, this.addObserver = xA((n) => this.observer = n);
  }
  get next() {
    return te(
      this.observer,
      this.auth,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), this.observer.next.bind(this.observer);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
let Ls = {
  async loadJS() {
    throw new Error("Unable to load external scripts");
  },
  recaptchaV2Script: "",
  recaptchaEnterpriseScript: "",
  gapiScript: ""
};
function bC(t) {
  Ls = t;
}
function Vl(t) {
  return Ls.loadJS(t);
}
function TC() {
  return Ls.recaptchaV2Script;
}
function IC() {
  return Ls.recaptchaEnterpriseScript;
}
function SC() {
  return Ls.gapiScript;
}
function Hy(t) {
  return `__${t}${Math.floor(Math.random() * 1e6)}`;
}
const AC = "recaptcha-enterprise", RC = "NO_RECAPTCHA";
class CC {
  /**
   *
   * @param authExtern - The corresponding Firebase {@link Auth} instance.
   *
   */
  constructor(e) {
    this.type = AC, this.auth = yn(e);
  }
  /**
   * Executes the verification process.
   *
   * @returns A Promise for a token that can be used to assert the validity of a request.
   */
  async verify(e = "verify", n = !1) {
    async function r(s) {
      if (!n) {
        if (s.tenantId == null && s._agentRecaptchaConfig != null)
          return s._agentRecaptchaConfig.siteKey;
        if (s.tenantId != null && s._tenantRecaptchaConfigs[s.tenantId] !== void 0)
          return s._tenantRecaptchaConfigs[s.tenantId].siteKey;
      }
      return new Promise(async (o, a) => {
        sC(s, {
          clientType: "CLIENT_TYPE_WEB",
          version: "RECAPTCHA_ENTERPRISE"
          /* RecaptchaVersion.ENTERPRISE */
        }).then((u) => {
          if (u.recaptchaKey === void 0)
            a(new Error("recaptcha Enterprise site key undefined"));
          else {
            const l = new rC(u);
            return s.tenantId == null ? s._agentRecaptchaConfig = l : s._tenantRecaptchaConfigs[s.tenantId] = l, o(l.siteKey);
          }
        }).catch((u) => {
          a(u);
        });
      });
    }
    function i(s, o, a) {
      const u = window.grecaptcha;
      fp(u) ? u.enterprise.ready(() => {
        u.enterprise.execute(s, { action: e }).then((l) => {
          o(l);
        }).catch(() => {
          o(RC);
        });
      }) : a(Error("No reCAPTCHA enterprise script loaded."));
    }
    return new Promise((s, o) => {
      r(this.auth).then((a) => {
        if (!n && fp(window.grecaptcha))
          i(a, s, o);
        else {
          if (typeof window > "u") {
            o(new Error("RecaptchaVerifier is only supported in browser"));
            return;
          }
          let u = IC();
          u.length !== 0 && (u += a), Vl(u).then(() => {
            i(a, s, o);
          }).catch((l) => {
            o(l);
          });
        }
      }).catch((a) => {
        o(a);
      });
    });
  }
}
async function yp(t, e, n, r = !1) {
  const i = new CC(t);
  let s;
  try {
    s = await i.verify(n);
  } catch {
    s = await i.verify(n, !0);
  }
  const o = Object.assign({}, e);
  return r ? Object.assign(o, { captchaResp: s }) : Object.assign(o, { captchaResponse: s }), Object.assign(o, {
    clientType: "CLIENT_TYPE_WEB"
    /* RecaptchaClientType.WEB */
  }), Object.assign(o, {
    recaptchaVersion: "RECAPTCHA_ENTERPRISE"
    /* RecaptchaVersion.ENTERPRISE */
  }), o;
}
async function $u(t, e, n, r) {
  var i;
  if (!((i = t._getRecaptchaConfig()) === null || i === void 0) && i.isProviderEnabled(
    "EMAIL_PASSWORD_PROVIDER"
    /* RecaptchaProvider.EMAIL_PASSWORD_PROVIDER */
  )) {
    const s = await yp(
      t,
      e,
      n,
      n === "getOobCode"
      /* RecaptchaActionName.GET_OOB_CODE */
    );
    return r(t, s);
  } else
    return r(t, e).catch(async (s) => {
      if (s.code === "auth/missing-recaptcha-token") {
        console.log(`${n} is protected by reCAPTCHA Enterprise for this project. Automatically triggering the reCAPTCHA flow and restarting the flow.`);
        const o = await yp(
          t,
          e,
          n,
          n === "getOobCode"
          /* RecaptchaActionName.GET_OOB_CODE */
        );
        return r(t, o);
      } else
        return Promise.reject(s);
    });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function PC(t, e) {
  const n = nr(t, "auth");
  if (n.isInitialized()) {
    const i = n.getImmediate(), s = n.getOptions();
    if (_s(s, e ?? {}))
      return i;
    Ht(
      i,
      "already-initialized"
      /* AuthErrorCode.ALREADY_INITIALIZED */
    );
  }
  return n.initialize({ options: e });
}
function kC(t, e) {
  const n = (e == null ? void 0 : e.persistence) || [], r = (Array.isArray(n) ? n : [n]).map(Sn);
  e != null && e.errorMap && t._updateErrorMap(e.errorMap), t._initializeWithPersistence(r, e == null ? void 0 : e.popupRedirectResolver);
}
function OC(t, e, n) {
  const r = yn(t);
  te(
    r._canInitEmulator,
    r,
    "emulator-config-failed"
    /* AuthErrorCode.EMULATOR_CONFIG_FAILED */
  ), te(
    /^https?:\/\//.test(e),
    r,
    "invalid-emulator-scheme"
    /* AuthErrorCode.INVALID_EMULATOR_SCHEME */
  );
  const i = !1, s = Gy(e), { host: o, port: a } = DC(e), u = a === null ? "" : `:${a}`;
  r.config.emulator = { url: `${s}//${o}${u}/` }, r.settings.appVerificationDisabledForTesting = !0, r.emulatorConfig = Object.freeze({
    host: o,
    port: a,
    protocol: s.replace(":", ""),
    options: Object.freeze({ disableWarnings: i })
  }), NC();
}
function Gy(t) {
  const e = t.indexOf(":");
  return e < 0 ? "" : t.substr(0, e + 1);
}
function DC(t) {
  const e = Gy(t), n = /(\/\/)?([^?#/]+)/.exec(t.substr(e.length));
  if (!n)
    return { host: "", port: null };
  const r = n[2].split("@").pop() || "", i = /^(\[[^\]]+\])(:|$)/.exec(r);
  if (i) {
    const s = i[1];
    return { host: s, port: vp(r.substr(s.length + 1)) };
  } else {
    const [s, o] = r.split(":");
    return { host: s, port: vp(o) };
  }
}
function vp(t) {
  if (!t)
    return null;
  const e = Number(t);
  return isNaN(e) ? null : e;
}
function NC() {
  function t() {
    const e = document.createElement("p"), n = e.style;
    e.innerText = "Running in emulator mode. Do not use with production credentials.", n.position = "fixed", n.width = "100%", n.backgroundColor = "#ffffff", n.border = ".1em solid #000000", n.color = "#b50000", n.bottom = "0px", n.left = "0px", n.margin = "0px", n.zIndex = "10000", n.textAlign = "center", e.classList.add("firebase-emulator-warning"), document.body.appendChild(e);
  }
  typeof console < "u" && typeof console.info == "function" && console.info("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials."), typeof window < "u" && typeof document < "u" && (document.readyState === "loading" ? window.addEventListener("DOMContentLoaded", t) : t());
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Fl {
  /** @internal */
  constructor(e, n) {
    this.providerId = e, this.signInMethod = n;
  }
  /**
   * Returns a JSON-serializable representation of this object.
   *
   * @returns a JSON-serializable representation of this object.
   */
  toJSON() {
    return Tn("not implemented");
  }
  /** @internal */
  _getIdTokenResponse(e) {
    return Tn("not implemented");
  }
  /** @internal */
  _linkToIdToken(e, n) {
    return Tn("not implemented");
  }
  /** @internal */
  _getReauthenticationResolver(e) {
    return Tn("not implemented");
  }
}
async function xC(t, e) {
  return gn(t, "POST", "/v1/accounts:signUp", e);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function LC(t, e) {
  return Si(t, "POST", "/v1/accounts:signInWithPassword", Nn(t, e));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function MC(t, e) {
  return Si(t, "POST", "/v1/accounts:signInWithEmailLink", Nn(t, e));
}
async function VC(t, e) {
  return Si(t, "POST", "/v1/accounts:signInWithEmailLink", Nn(t, e));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Es extends Fl {
  /** @internal */
  constructor(e, n, r, i = null) {
    super("password", r), this._email = e, this._password = n, this._tenantId = i;
  }
  /** @internal */
  static _fromEmailAndPassword(e, n) {
    return new Es(
      e,
      n,
      "password"
      /* SignInMethod.EMAIL_PASSWORD */
    );
  }
  /** @internal */
  static _fromEmailAndCode(e, n, r = null) {
    return new Es(e, n, "emailLink", r);
  }
  /** {@inheritdoc AuthCredential.toJSON} */
  toJSON() {
    return {
      email: this._email,
      password: this._password,
      signInMethod: this.signInMethod,
      tenantId: this._tenantId
    };
  }
  /**
   * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.
   *
   * @param json - Either `object` or the stringified representation of the object. When string is
   * provided, `JSON.parse` would be called first.
   *
   * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.
   */
  static fromJSON(e) {
    const n = typeof e == "string" ? JSON.parse(e) : e;
    if (n != null && n.email && (n != null && n.password)) {
      if (n.signInMethod === "password")
        return this._fromEmailAndPassword(n.email, n.password);
      if (n.signInMethod === "emailLink")
        return this._fromEmailAndCode(n.email, n.password, n.tenantId);
    }
    return null;
  }
  /** @internal */
  async _getIdTokenResponse(e) {
    switch (this.signInMethod) {
      case "password":
        const n = {
          returnSecureToken: !0,
          email: this._email,
          password: this._password,
          clientType: "CLIENT_TYPE_WEB"
          /* RecaptchaClientType.WEB */
        };
        return $u(e, n, "signInWithPassword", LC);
      case "emailLink":
        return MC(e, {
          email: this._email,
          oobCode: this._password
        });
      default:
        Ht(
          e,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
    }
  }
  /** @internal */
  async _linkToIdToken(e, n) {
    switch (this.signInMethod) {
      case "password":
        const r = {
          idToken: n,
          returnSecureToken: !0,
          email: this._email,
          password: this._password,
          clientType: "CLIENT_TYPE_WEB"
          /* RecaptchaClientType.WEB */
        };
        return $u(e, r, "signUpPassword", xC);
      case "emailLink":
        return VC(e, {
          idToken: n,
          email: this._email,
          oobCode: this._password
        });
      default:
        Ht(
          e,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
    }
  }
  /** @internal */
  _getReauthenticationResolver(e) {
    return this._getIdTokenResponse(e);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function oi(t, e) {
  return Si(t, "POST", "/v1/accounts:signInWithIdp", Nn(t, e));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const FC = "http://localhost";
class Pr extends Fl {
  constructor() {
    super(...arguments), this.pendingToken = null;
  }
  /** @internal */
  static _fromParams(e) {
    const n = new Pr(e.providerId, e.signInMethod);
    return e.idToken || e.accessToken ? (e.idToken && (n.idToken = e.idToken), e.accessToken && (n.accessToken = e.accessToken), e.nonce && !e.pendingToken && (n.nonce = e.nonce), e.pendingToken && (n.pendingToken = e.pendingToken)) : e.oauthToken && e.oauthTokenSecret ? (n.accessToken = e.oauthToken, n.secret = e.oauthTokenSecret) : Ht(
      "argument-error"
      /* AuthErrorCode.ARGUMENT_ERROR */
    ), n;
  }
  /** {@inheritdoc AuthCredential.toJSON}  */
  toJSON() {
    return {
      idToken: this.idToken,
      accessToken: this.accessToken,
      secret: this.secret,
      nonce: this.nonce,
      pendingToken: this.pendingToken,
      providerId: this.providerId,
      signInMethod: this.signInMethod
    };
  }
  /**
   * Static method to deserialize a JSON representation of an object into an
   * {@link  AuthCredential}.
   *
   * @param json - Input can be either Object or the stringified representation of the object.
   * When string is provided, JSON.parse would be called first.
   *
   * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.
   */
  static fromJSON(e) {
    const n = typeof e == "string" ? JSON.parse(e) : e, { providerId: r, signInMethod: i } = n, s = Ol(n, ["providerId", "signInMethod"]);
    if (!r || !i)
      return null;
    const o = new Pr(r, i);
    return o.idToken = s.idToken || void 0, o.accessToken = s.accessToken || void 0, o.secret = s.secret, o.nonce = s.nonce, o.pendingToken = s.pendingToken || null, o;
  }
  /** @internal */
  _getIdTokenResponse(e) {
    const n = this.buildRequest();
    return oi(e, n);
  }
  /** @internal */
  _linkToIdToken(e, n) {
    const r = this.buildRequest();
    return r.idToken = n, oi(e, r);
  }
  /** @internal */
  _getReauthenticationResolver(e) {
    const n = this.buildRequest();
    return n.autoCreate = !1, oi(e, n);
  }
  buildRequest() {
    const e = {
      requestUri: FC,
      returnSecureToken: !0
    };
    if (this.pendingToken)
      e.pendingToken = this.pendingToken;
    else {
      const n = {};
      this.idToken && (n.id_token = this.idToken), this.accessToken && (n.access_token = this.accessToken), this.secret && (n.oauth_token_secret = this.secret), n.providerId = this.providerId, this.nonce && !this.pendingToken && (n.nonce = this.nonce), e.postBody = Ii(n);
    }
    return e;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function UC(t) {
  switch (t) {
    case "recoverEmail":
      return "RECOVER_EMAIL";
    case "resetPassword":
      return "PASSWORD_RESET";
    case "signIn":
      return "EMAIL_SIGNIN";
    case "verifyEmail":
      return "VERIFY_EMAIL";
    case "verifyAndChangeEmail":
      return "VERIFY_AND_CHANGE_EMAIL";
    case "revertSecondFactorAddition":
      return "REVERT_SECOND_FACTOR_ADDITION";
    default:
      return null;
  }
}
function jC(t) {
  const e = Xi(Zi(t)).link, n = e ? Xi(Zi(e)).deep_link_id : null, r = Xi(Zi(t)).deep_link_id;
  return (r ? Xi(Zi(r)).link : null) || r || n || e || t;
}
class Ul {
  /**
   * @param actionLink - The link from which to extract the URL.
   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.
   *
   * @internal
   */
  constructor(e) {
    var n, r, i, s, o, a;
    const u = Xi(Zi(e)), l = (n = u.apiKey) !== null && n !== void 0 ? n : null, h = (r = u.oobCode) !== null && r !== void 0 ? r : null, f = UC((i = u.mode) !== null && i !== void 0 ? i : null);
    te(
      l && h && f,
      "argument-error"
      /* AuthErrorCode.ARGUMENT_ERROR */
    ), this.apiKey = l, this.operation = f, this.code = h, this.continueUrl = (s = u.continueUrl) !== null && s !== void 0 ? s : null, this.languageCode = (o = u.languageCode) !== null && o !== void 0 ? o : null, this.tenantId = (a = u.tenantId) !== null && a !== void 0 ? a : null;
  }
  /**
   * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,
   * otherwise returns null.
   *
   * @param link  - The email action link string.
   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.
   *
   * @public
   */
  static parseLink(e) {
    const n = jC(e);
    try {
      return new Ul(n);
    } catch {
      return null;
    }
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Ai {
  constructor() {
    this.providerId = Ai.PROVIDER_ID;
  }
  /**
   * Initialize an {@link AuthCredential} using an email and password.
   *
   * @example
   * ```javascript
   * const authCredential = EmailAuthProvider.credential(email, password);
   * const userCredential = await signInWithCredential(auth, authCredential);
   * ```
   *
   * @example
   * ```javascript
   * const userCredential = await signInWithEmailAndPassword(auth, email, password);
   * ```
   *
   * @param email - Email address.
   * @param password - User account password.
   * @returns The auth provider credential.
   */
  static credential(e, n) {
    return Es._fromEmailAndPassword(e, n);
  }
  /**
   * Initialize an {@link AuthCredential} using an email and an email link after a sign in with
   * email link operation.
   *
   * @example
   * ```javascript
   * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);
   * const userCredential = await signInWithCredential(auth, authCredential);
   * ```
   *
   * @example
   * ```javascript
   * await sendSignInLinkToEmail(auth, email);
   * // Obtain emailLink from user.
   * const userCredential = await signInWithEmailLink(auth, email, emailLink);
   * ```
   *
   * @param auth - The {@link Auth} instance used to verify the link.
   * @param email - Email address.
   * @param emailLink - Sign-in email link.
   * @returns - The auth provider credential.
   */
  static credentialWithLink(e, n) {
    const r = Ul.parseLink(n);
    return te(
      r,
      "argument-error"
      /* AuthErrorCode.ARGUMENT_ERROR */
    ), Es._fromEmailAndCode(e, r.code, r.tenantId);
  }
}
Ai.PROVIDER_ID = "password";
Ai.EMAIL_PASSWORD_SIGN_IN_METHOD = "password";
Ai.EMAIL_LINK_SIGN_IN_METHOD = "emailLink";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class jl {
  /**
   * Constructor for generic OAuth providers.
   *
   * @param providerId - Provider for which credentials should be generated.
   */
  constructor(e) {
    this.providerId = e, this.defaultLanguageCode = null, this.customParameters = {};
  }
  /**
   * Set the language gode.
   *
   * @param languageCode - language code
   */
  setDefaultLanguage(e) {
    this.defaultLanguageCode = e;
  }
  /**
   * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in
   * operations.
   *
   * @remarks
   * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,
   * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.
   *
   * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.
   */
  setCustomParameters(e) {
    return this.customParameters = e, this;
  }
  /**
   * Retrieve the current list of {@link CustomParameters}.
   */
  getCustomParameters() {
    return this.customParameters;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Ms extends jl {
  constructor() {
    super(...arguments), this.scopes = [];
  }
  /**
   * Add an OAuth scope to the credential.
   *
   * @param scope - Provider OAuth scope to add.
   */
  addScope(e) {
    return this.scopes.includes(e) || this.scopes.push(e), this;
  }
  /**
   * Retrieve the current list of OAuth scopes.
   */
  getScopes() {
    return [...this.scopes];
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class $n extends Ms {
  constructor() {
    super(
      "facebook.com"
      /* ProviderId.FACEBOOK */
    );
  }
  /**
   * Creates a credential for Facebook.
   *
   * @example
   * ```javascript
   * // `event` from the Facebook auth.authResponseChange callback.
   * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);
   * const result = await signInWithCredential(credential);
   * ```
   *
   * @param accessToken - Facebook access token.
   */
  static credential(e) {
    return Pr._fromParams({
      providerId: $n.PROVIDER_ID,
      signInMethod: $n.FACEBOOK_SIGN_IN_METHOD,
      accessToken: e
    });
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromResult(e) {
    return $n.credentialFromTaggedObject(e);
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
   * thrown during a sign-in, link, or reauthenticate operation.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromError(e) {
    return $n.credentialFromTaggedObject(e.customData || {});
  }
  static credentialFromTaggedObject({ _tokenResponse: e }) {
    if (!e || !("oauthAccessToken" in e) || !e.oauthAccessToken)
      return null;
    try {
      return $n.credential(e.oauthAccessToken);
    } catch {
      return null;
    }
  }
}
$n.FACEBOOK_SIGN_IN_METHOD = "facebook.com";
$n.PROVIDER_ID = "facebook.com";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Bn extends Ms {
  constructor() {
    super(
      "google.com"
      /* ProviderId.GOOGLE */
    ), this.addScope("profile");
  }
  /**
   * Creates a credential for Google. At least one of ID token and access token is required.
   *
   * @example
   * ```javascript
   * // \`googleUser\` from the onsuccess Google Sign In callback.
   * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);
   * const result = await signInWithCredential(credential);
   * ```
   *
   * @param idToken - Google ID token.
   * @param accessToken - Google access token.
   */
  static credential(e, n) {
    return Pr._fromParams({
      providerId: Bn.PROVIDER_ID,
      signInMethod: Bn.GOOGLE_SIGN_IN_METHOD,
      idToken: e,
      accessToken: n
    });
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromResult(e) {
    return Bn.credentialFromTaggedObject(e);
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
   * thrown during a sign-in, link, or reauthenticate operation.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromError(e) {
    return Bn.credentialFromTaggedObject(e.customData || {});
  }
  static credentialFromTaggedObject({ _tokenResponse: e }) {
    if (!e)
      return null;
    const { oauthIdToken: n, oauthAccessToken: r } = e;
    if (!n && !r)
      return null;
    try {
      return Bn.credential(n, r);
    } catch {
      return null;
    }
  }
}
Bn.GOOGLE_SIGN_IN_METHOD = "google.com";
Bn.PROVIDER_ID = "google.com";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class qn extends Ms {
  constructor() {
    super(
      "github.com"
      /* ProviderId.GITHUB */
    );
  }
  /**
   * Creates a credential for GitHub.
   *
   * @param accessToken - GitHub access token.
   */
  static credential(e) {
    return Pr._fromParams({
      providerId: qn.PROVIDER_ID,
      signInMethod: qn.GITHUB_SIGN_IN_METHOD,
      accessToken: e
    });
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromResult(e) {
    return qn.credentialFromTaggedObject(e);
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
   * thrown during a sign-in, link, or reauthenticate operation.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromError(e) {
    return qn.credentialFromTaggedObject(e.customData || {});
  }
  static credentialFromTaggedObject({ _tokenResponse: e }) {
    if (!e || !("oauthAccessToken" in e) || !e.oauthAccessToken)
      return null;
    try {
      return qn.credential(e.oauthAccessToken);
    } catch {
      return null;
    }
  }
}
qn.GITHUB_SIGN_IN_METHOD = "github.com";
qn.PROVIDER_ID = "github.com";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class zn extends Ms {
  constructor() {
    super(
      "twitter.com"
      /* ProviderId.TWITTER */
    );
  }
  /**
   * Creates a credential for Twitter.
   *
   * @param token - Twitter access token.
   * @param secret - Twitter secret.
   */
  static credential(e, n) {
    return Pr._fromParams({
      providerId: zn.PROVIDER_ID,
      signInMethod: zn.TWITTER_SIGN_IN_METHOD,
      oauthToken: e,
      oauthTokenSecret: n
    });
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromResult(e) {
    return zn.credentialFromTaggedObject(e);
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
   * thrown during a sign-in, link, or reauthenticate operation.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromError(e) {
    return zn.credentialFromTaggedObject(e.customData || {});
  }
  static credentialFromTaggedObject({ _tokenResponse: e }) {
    if (!e)
      return null;
    const { oauthAccessToken: n, oauthTokenSecret: r } = e;
    if (!n || !r)
      return null;
    try {
      return zn.credential(n, r);
    } catch {
      return null;
    }
  }
}
zn.TWITTER_SIGN_IN_METHOD = "twitter.com";
zn.PROVIDER_ID = "twitter.com";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function $C(t, e) {
  return Si(t, "POST", "/v1/accounts:signUp", Nn(t, e));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Jn {
  constructor(e) {
    this.user = e.user, this.providerId = e.providerId, this._tokenResponse = e._tokenResponse, this.operationType = e.operationType;
  }
  static async _fromIdTokenResponse(e, n, r, i = !1) {
    const s = await In._fromIdTokenResponse(e, r, i), o = _p(r);
    return new Jn({
      user: s,
      providerId: o,
      _tokenResponse: r,
      operationType: n
    });
  }
  static async _forOperation(e, n, r) {
    await e._updateTokensIfNecessary(
      r,
      /* reload */
      !0
    );
    const i = _p(r);
    return new Jn({
      user: e,
      providerId: i,
      _tokenResponse: r,
      operationType: n
    });
  }
}
function _p(t) {
  return t.providerId ? t.providerId : "phoneNumber" in t ? "phone" : null;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ta extends Gt {
  constructor(e, n, r, i) {
    var s;
    super(n.code, n.message), this.operationType = r, this.user = i, Object.setPrototypeOf(this, ta.prototype), this.customData = {
      appName: e.name,
      tenantId: (s = e.tenantId) !== null && s !== void 0 ? s : void 0,
      _serverResponse: n.customData._serverResponse,
      operationType: r
    };
  }
  static _fromErrorAndOperation(e, n, r, i) {
    return new ta(e, n, r, i);
  }
}
function Wy(t, e, n, r) {
  return (e === "reauthenticate" ? n._getReauthenticationResolver(t) : n._getIdTokenResponse(t)).catch((s) => {
    throw s.code === "auth/multi-factor-auth-required" ? ta._fromErrorAndOperation(t, s, e, r) : s;
  });
}
async function BC(t, e, n = !1) {
  const r = await di(t, e._linkToIdToken(t.auth, await t.getIdToken()), n);
  return Jn._forOperation(t, "link", r);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function qC(t, e, n = !1) {
  const { auth: r } = t;
  if (Bt(r.app))
    return Promise.reject(cn(r));
  const i = "reauthenticate";
  try {
    const s = await di(t, Wy(r, i, e, t), n);
    te(
      s.idToken,
      r,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    );
    const o = Ll(s.idToken);
    te(
      o,
      r,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    );
    const { sub: a } = o;
    return te(
      t.uid === a,
      r,
      "user-mismatch"
      /* AuthErrorCode.USER_MISMATCH */
    ), Jn._forOperation(t, i, s);
  } catch (s) {
    throw (s == null ? void 0 : s.code) === "auth/user-not-found" && Ht(
      r,
      "user-mismatch"
      /* AuthErrorCode.USER_MISMATCH */
    ), s;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function Qy(t, e, n = !1) {
  if (Bt(t.app))
    return Promise.reject(cn(t));
  const r = "signIn", i = await Wy(t, r, e), s = await Jn._fromIdTokenResponse(t, r, i);
  return n || await t._updateCurrentUser(s.user), s;
}
async function zC(t, e) {
  return Qy(yn(t), e);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function KC(t, e) {
  return Si(t, "POST", "/v1/accounts:signInWithCustomToken", Nn(t, e));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function uV(t, e) {
  if (Bt(t.app))
    return Promise.reject(cn(t));
  const n = yn(t), r = await KC(n, {
    token: e,
    returnSecureToken: !0
  }), i = await Jn._fromIdTokenResponse(n, "signIn", r);
  return await n._updateCurrentUser(i.user), i;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function Yy(t) {
  const e = yn(t);
  e._getPasswordPolicyInternal() && await e._updatePasswordPolicy();
}
async function lV(t, e, n) {
  if (Bt(t.app))
    return Promise.reject(cn(t));
  const r = yn(t), o = await $u(r, {
    returnSecureToken: !0,
    email: e,
    password: n,
    clientType: "CLIENT_TYPE_WEB"
    /* RecaptchaClientType.WEB */
  }, "signUpPassword", $C).catch((u) => {
    throw u.code === "auth/password-does-not-meet-requirements" && Yy(t), u;
  }), a = await Jn._fromIdTokenResponse(r, "signIn", o);
  return await r._updateCurrentUser(a.user), a;
}
function fV(t, e, n) {
  return Bt(t.app) ? Promise.reject(cn(t)) : zC(Ue(t), Ai.credential(e, n)).catch(async (r) => {
    throw r.code === "auth/password-does-not-meet-requirements" && Yy(t), r;
  });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function HC(t, e) {
  return gn(t, "POST", "/v1/accounts:update", e);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function GC(t, { displayName: e, photoURL: n }) {
  if (e === void 0 && n === void 0)
    return;
  const r = Ue(t), s = {
    idToken: await r.getIdToken(),
    displayName: e,
    photoUrl: n,
    returnSecureToken: !0
  }, o = await di(r, HC(r.auth, s));
  r.displayName = o.displayName || null, r.photoURL = o.photoUrl || null;
  const a = r.providerData.find(
    ({ providerId: u }) => u === "password"
    /* ProviderId.PASSWORD */
  );
  a && (a.displayName = r.displayName, a.photoURL = r.photoURL), await r._updateTokensIfNecessary(o);
}
function Jy(t, e, n, r) {
  return Ue(t).onIdTokenChanged(e, n, r);
}
function WC(t, e, n) {
  return Ue(t).beforeAuthStateChanged(e, n);
}
function QC(t, e, n, r) {
  return Ue(t).onAuthStateChanged(e, n, r);
}
function hV(t) {
  return Ue(t).signOut();
}
const na = "__sak";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Xy {
  constructor(e, n) {
    this.storageRetriever = e, this.type = n;
  }
  _isAvailable() {
    try {
      return this.storage ? (this.storage.setItem(na, "1"), this.storage.removeItem(na), Promise.resolve(!0)) : Promise.resolve(!1);
    } catch {
      return Promise.resolve(!1);
    }
  }
  _set(e, n) {
    return this.storage.setItem(e, JSON.stringify(n)), Promise.resolve();
  }
  _get(e) {
    const n = this.storage.getItem(e);
    return Promise.resolve(n ? JSON.parse(n) : null);
  }
  _remove(e) {
    return this.storage.removeItem(e), Promise.resolve();
  }
  get storage() {
    return this.storageRetriever();
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function YC() {
  const t = lt();
  return Ml(t) || Va(t);
}
const JC = 1e3, XC = 10;
class Zy extends Xy {
  constructor() {
    super(
      () => window.localStorage,
      "LOCAL"
      /* PersistenceType.LOCAL */
    ), this.boundEventHandler = (e, n) => this.onStorageEvent(e, n), this.listeners = {}, this.localCache = {}, this.pollTimer = null, this.safariLocalStorageNotSynced = YC() && gC(), this.fallbackToPolling = zy(), this._shouldAllowMigration = !0;
  }
  forAllChangedKeys(e) {
    for (const n of Object.keys(this.listeners)) {
      const r = this.storage.getItem(n), i = this.localCache[n];
      r !== i && e(n, i, r);
    }
  }
  onStorageEvent(e, n = !1) {
    if (!e.key) {
      this.forAllChangedKeys((o, a, u) => {
        this.notifyListeners(o, u);
      });
      return;
    }
    const r = e.key;
    if (n ? this.detachListener() : this.stopPolling(), this.safariLocalStorageNotSynced) {
      const o = this.storage.getItem(r);
      if (e.newValue !== o)
        e.newValue !== null ? this.storage.setItem(r, e.newValue) : this.storage.removeItem(r);
      else if (this.localCache[r] === e.newValue && !n)
        return;
    }
    const i = () => {
      const o = this.storage.getItem(r);
      !n && this.localCache[r] === o || this.notifyListeners(r, o);
    }, s = this.storage.getItem(r);
    mC() && s !== e.newValue && e.newValue !== e.oldValue ? setTimeout(i, XC) : i();
  }
  notifyListeners(e, n) {
    this.localCache[e] = n;
    const r = this.listeners[e];
    if (r)
      for (const i of Array.from(r))
        i(n && JSON.parse(n));
  }
  startPolling() {
    this.stopPolling(), this.pollTimer = setInterval(() => {
      this.forAllChangedKeys((e, n, r) => {
        this.onStorageEvent(
          new StorageEvent("storage", {
            key: e,
            oldValue: n,
            newValue: r
          }),
          /* poll */
          !0
        );
      });
    }, JC);
  }
  stopPolling() {
    this.pollTimer && (clearInterval(this.pollTimer), this.pollTimer = null);
  }
  attachListener() {
    window.addEventListener("storage", this.boundEventHandler);
  }
  detachListener() {
    window.removeEventListener("storage", this.boundEventHandler);
  }
  _addListener(e, n) {
    Object.keys(this.listeners).length === 0 && (this.fallbackToPolling ? this.startPolling() : this.attachListener()), this.listeners[e] || (this.listeners[e] = /* @__PURE__ */ new Set(), this.localCache[e] = this.storage.getItem(e)), this.listeners[e].add(n);
  }
  _removeListener(e, n) {
    this.listeners[e] && (this.listeners[e].delete(n), this.listeners[e].size === 0 && delete this.listeners[e]), Object.keys(this.listeners).length === 0 && (this.detachListener(), this.stopPolling());
  }
  // Update local cache on base operations:
  async _set(e, n) {
    await super._set(e, n), this.localCache[e] = JSON.stringify(n);
  }
  async _get(e) {
    const n = await super._get(e);
    return this.localCache[e] = JSON.stringify(n), n;
  }
  async _remove(e) {
    await super._remove(e), delete this.localCache[e];
  }
}
Zy.type = "LOCAL";
const ZC = Zy;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ev extends Xy {
  constructor() {
    super(
      () => window.sessionStorage,
      "SESSION"
      /* PersistenceType.SESSION */
    );
  }
  _addListener(e, n) {
  }
  _removeListener(e, n) {
  }
}
ev.type = "SESSION";
const tv = ev;
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function eP(t) {
  return Promise.all(t.map(async (e) => {
    try {
      return {
        fulfilled: !0,
        value: await e
      };
    } catch (n) {
      return {
        fulfilled: !1,
        reason: n
      };
    }
  }));
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Fa {
  constructor(e) {
    this.eventTarget = e, this.handlersMap = {}, this.boundEventHandler = this.handleEvent.bind(this);
  }
  /**
   * Obtain an instance of a Receiver for a given event target, if none exists it will be created.
   *
   * @param eventTarget - An event target (such as window or self) through which the underlying
   * messages will be received.
   */
  static _getInstance(e) {
    const n = this.receivers.find((i) => i.isListeningto(e));
    if (n)
      return n;
    const r = new Fa(e);
    return this.receivers.push(r), r;
  }
  isListeningto(e) {
    return this.eventTarget === e;
  }
  /**
   * Fans out a MessageEvent to the appropriate listeners.
   *
   * @remarks
   * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have
   * finished processing.
   *
   * @param event - The MessageEvent.
   *
   */
  async handleEvent(e) {
    const n = e, { eventId: r, eventType: i, data: s } = n.data, o = this.handlersMap[i];
    if (!(o != null && o.size))
      return;
    n.ports[0].postMessage({
      status: "ack",
      eventId: r,
      eventType: i
    });
    const a = Array.from(o).map(async (l) => l(n.origin, s)), u = await eP(a);
    n.ports[0].postMessage({
      status: "done",
      eventId: r,
      eventType: i,
      response: u
    });
  }
  /**
   * Subscribe an event handler for a particular event.
   *
   * @param eventType - Event name to subscribe to.
   * @param eventHandler - The event handler which should receive the events.
   *
   */
  _subscribe(e, n) {
    Object.keys(this.handlersMap).length === 0 && this.eventTarget.addEventListener("message", this.boundEventHandler), this.handlersMap[e] || (this.handlersMap[e] = /* @__PURE__ */ new Set()), this.handlersMap[e].add(n);
  }
  /**
   * Unsubscribe an event handler from a particular event.
   *
   * @param eventType - Event name to unsubscribe from.
   * @param eventHandler - Optional event handler, if none provided, unsubscribe all handlers on this event.
   *
   */
  _unsubscribe(e, n) {
    this.handlersMap[e] && n && this.handlersMap[e].delete(n), (!n || this.handlersMap[e].size === 0) && delete this.handlersMap[e], Object.keys(this.handlersMap).length === 0 && this.eventTarget.removeEventListener("message", this.boundEventHandler);
  }
}
Fa.receivers = [];
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function $l(t = "", e = 10) {
  let n = "";
  for (let r = 0; r < e; r++)
    n += Math.floor(Math.random() * 10);
  return t + n;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class tP {
  constructor(e) {
    this.target = e, this.handlers = /* @__PURE__ */ new Set();
  }
  /**
   * Unsubscribe the handler and remove it from our tracking Set.
   *
   * @param handler - The handler to unsubscribe.
   */
  removeMessageHandler(e) {
    e.messageChannel && (e.messageChannel.port1.removeEventListener("message", e.onMessage), e.messageChannel.port1.close()), this.handlers.delete(e);
  }
  /**
   * Send a message to the Receiver located at {@link target}.
   *
   * @remarks
   * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the
   * receiver has had a chance to fully process the event.
   *
   * @param eventType - Type of event to send.
   * @param data - The payload of the event.
   * @param timeout - Timeout for waiting on an ACK from the receiver.
   *
   * @returns An array of settled promises from all the handlers that were listening on the receiver.
   */
  async _send(e, n, r = 50) {
    const i = typeof MessageChannel < "u" ? new MessageChannel() : null;
    if (!i)
      throw new Error(
        "connection_unavailable"
        /* _MessageError.CONNECTION_UNAVAILABLE */
      );
    let s, o;
    return new Promise((a, u) => {
      const l = $l("", 20);
      i.port1.start();
      const h = setTimeout(() => {
        u(new Error(
          "unsupported_event"
          /* _MessageError.UNSUPPORTED_EVENT */
        ));
      }, r);
      o = {
        messageChannel: i,
        onMessage(f) {
          const y = f;
          if (y.data.eventId === l)
            switch (y.data.status) {
              case "ack":
                clearTimeout(h), s = setTimeout(
                  () => {
                    u(new Error(
                      "timeout"
                      /* _MessageError.TIMEOUT */
                    ));
                  },
                  3e3
                  /* _TimeoutDuration.COMPLETION */
                );
                break;
              case "done":
                clearTimeout(s), a(y.data.response);
                break;
              default:
                clearTimeout(h), clearTimeout(s), u(new Error(
                  "invalid_response"
                  /* _MessageError.INVALID_RESPONSE */
                ));
                break;
            }
        }
      }, this.handlers.add(o), i.port1.addEventListener("message", o.onMessage), this.target.postMessage({
        eventType: e,
        eventId: l,
        data: n
      }, [i.port2]);
    }).finally(() => {
      o && this.removeMessageHandler(o);
    });
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Qe() {
  return window;
}
function nP(t) {
  Qe().location.href = t;
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Bl() {
  return typeof Qe().WorkerGlobalScope < "u" && typeof Qe().importScripts == "function";
}
async function rP() {
  if (!(navigator != null && navigator.serviceWorker))
    return null;
  try {
    return (await navigator.serviceWorker.ready).active;
  } catch {
    return null;
  }
}
function iP() {
  var t;
  return ((t = navigator == null ? void 0 : navigator.serviceWorker) === null || t === void 0 ? void 0 : t.controller) || null;
}
function sP() {
  return Bl() ? self : null;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const nv = "firebaseLocalStorageDb", oP = 1, ra = "firebaseLocalStorage", rv = "fbase_key";
class Vs {
  constructor(e) {
    this.request = e;
  }
  toPromise() {
    return new Promise((e, n) => {
      this.request.addEventListener("success", () => {
        e(this.request.result);
      }), this.request.addEventListener("error", () => {
        n(this.request.error);
      });
    });
  }
}
function Ua(t, e) {
  return t.transaction([ra], e ? "readwrite" : "readonly").objectStore(ra);
}
function aP() {
  const t = indexedDB.deleteDatabase(nv);
  return new Vs(t).toPromise();
}
function Bu() {
  const t = indexedDB.open(nv, oP);
  return new Promise((e, n) => {
    t.addEventListener("error", () => {
      n(t.error);
    }), t.addEventListener("upgradeneeded", () => {
      const r = t.result;
      try {
        r.createObjectStore(ra, { keyPath: rv });
      } catch (i) {
        n(i);
      }
    }), t.addEventListener("success", async () => {
      const r = t.result;
      r.objectStoreNames.contains(ra) ? e(r) : (r.close(), await aP(), e(await Bu()));
    });
  });
}
async function wp(t, e, n) {
  const r = Ua(t, !0).put({
    [rv]: e,
    value: n
  });
  return new Vs(r).toPromise();
}
async function cP(t, e) {
  const n = Ua(t, !1).get(e), r = await new Vs(n).toPromise();
  return r === void 0 ? null : r.value;
}
function Ep(t, e) {
  const n = Ua(t, !0).delete(e);
  return new Vs(n).toPromise();
}
const uP = 800, lP = 3;
class iv {
  constructor() {
    this.type = "LOCAL", this._shouldAllowMigration = !0, this.listeners = {}, this.localCache = {}, this.pollTimer = null, this.pendingWrites = 0, this.receiver = null, this.sender = null, this.serviceWorkerReceiverAvailable = !1, this.activeServiceWorker = null, this._workerInitializationPromise = this.initializeServiceWorkerMessaging().then(() => {
    }, () => {
    });
  }
  async _openDb() {
    return this.db ? this.db : (this.db = await Bu(), this.db);
  }
  async _withRetries(e) {
    let n = 0;
    for (; ; )
      try {
        const r = await this._openDb();
        return await e(r);
      } catch (r) {
        if (n++ > lP)
          throw r;
        this.db && (this.db.close(), this.db = void 0);
      }
  }
  /**
   * IndexedDB events do not propagate from the main window to the worker context.  We rely on a
   * postMessage interface to send these events to the worker ourselves.
   */
  async initializeServiceWorkerMessaging() {
    return Bl() ? this.initializeReceiver() : this.initializeSender();
  }
  /**
   * As the worker we should listen to events from the main window.
   */
  async initializeReceiver() {
    this.receiver = Fa._getInstance(sP()), this.receiver._subscribe("keyChanged", async (e, n) => ({
      keyProcessed: (await this._poll()).includes(n.key)
    })), this.receiver._subscribe("ping", async (e, n) => [
      "keyChanged"
      /* _EventType.KEY_CHANGED */
    ]);
  }
  /**
   * As the main window, we should let the worker know when keys change (set and remove).
   *
   * @remarks
   * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}
   * may not resolve.
   */
  async initializeSender() {
    var e, n;
    if (this.activeServiceWorker = await rP(), !this.activeServiceWorker)
      return;
    this.sender = new tP(this.activeServiceWorker);
    const r = await this.sender._send(
      "ping",
      {},
      800
      /* _TimeoutDuration.LONG_ACK */
    );
    r && !((e = r[0]) === null || e === void 0) && e.fulfilled && !((n = r[0]) === null || n === void 0) && n.value.includes(
      "keyChanged"
      /* _EventType.KEY_CHANGED */
    ) && (this.serviceWorkerReceiverAvailable = !0);
  }
  /**
   * Let the worker know about a changed key, the exact key doesn't technically matter since the
   * worker will just trigger a full sync anyway.
   *
   * @remarks
   * For now, we only support one service worker per page.
   *
   * @param key - Storage key which changed.
   */
  async notifyServiceWorker(e) {
    if (!(!this.sender || !this.activeServiceWorker || iP() !== this.activeServiceWorker))
      try {
        await this.sender._send(
          "keyChanged",
          { key: e },
          // Use long timeout if receiver has previously responded to a ping from us.
          this.serviceWorkerReceiverAvailable ? 800 : 50
          /* _TimeoutDuration.ACK */
        );
      } catch {
      }
  }
  async _isAvailable() {
    try {
      if (!indexedDB)
        return !1;
      const e = await Bu();
      return await wp(e, na, "1"), await Ep(e, na), !0;
    } catch {
    }
    return !1;
  }
  async _withPendingWrite(e) {
    this.pendingWrites++;
    try {
      await e();
    } finally {
      this.pendingWrites--;
    }
  }
  async _set(e, n) {
    return this._withPendingWrite(async () => (await this._withRetries((r) => wp(r, e, n)), this.localCache[e] = n, this.notifyServiceWorker(e)));
  }
  async _get(e) {
    const n = await this._withRetries((r) => cP(r, e));
    return this.localCache[e] = n, n;
  }
  async _remove(e) {
    return this._withPendingWrite(async () => (await this._withRetries((n) => Ep(n, e)), delete this.localCache[e], this.notifyServiceWorker(e)));
  }
  async _poll() {
    const e = await this._withRetries((i) => {
      const s = Ua(i, !1).getAll();
      return new Vs(s).toPromise();
    });
    if (!e)
      return [];
    if (this.pendingWrites !== 0)
      return [];
    const n = [], r = /* @__PURE__ */ new Set();
    if (e.length !== 0)
      for (const { fbase_key: i, value: s } of e)
        r.add(i), JSON.stringify(this.localCache[i]) !== JSON.stringify(s) && (this.notifyListeners(i, s), n.push(i));
    for (const i of Object.keys(this.localCache))
      this.localCache[i] && !r.has(i) && (this.notifyListeners(i, null), n.push(i));
    return n;
  }
  notifyListeners(e, n) {
    this.localCache[e] = n;
    const r = this.listeners[e];
    if (r)
      for (const i of Array.from(r))
        i(n);
  }
  startPolling() {
    this.stopPolling(), this.pollTimer = setInterval(async () => this._poll(), uP);
  }
  stopPolling() {
    this.pollTimer && (clearInterval(this.pollTimer), this.pollTimer = null);
  }
  _addListener(e, n) {
    Object.keys(this.listeners).length === 0 && this.startPolling(), this.listeners[e] || (this.listeners[e] = /* @__PURE__ */ new Set(), this._get(e)), this.listeners[e].add(n);
  }
  _removeListener(e, n) {
    this.listeners[e] && (this.listeners[e].delete(n), this.listeners[e].size === 0 && delete this.listeners[e]), Object.keys(this.listeners).length === 0 && this.stopPolling();
  }
}
iv.type = "LOCAL";
const fP = iv;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const hP = 500, dP = 6e4, wo = 1e12;
class pP {
  constructor(e) {
    this.auth = e, this.counter = wo, this._widgets = /* @__PURE__ */ new Map();
  }
  render(e, n) {
    const r = this.counter;
    return this._widgets.set(r, new mP(e, this.auth.name, n || {})), this.counter++, r;
  }
  reset(e) {
    var n;
    const r = e || wo;
    (n = this._widgets.get(r)) === null || n === void 0 || n.delete(), this._widgets.delete(r);
  }
  getResponse(e) {
    var n;
    const r = e || wo;
    return ((n = this._widgets.get(r)) === null || n === void 0 ? void 0 : n.getResponse()) || "";
  }
  async execute(e) {
    var n;
    const r = e || wo;
    return (n = this._widgets.get(r)) === null || n === void 0 || n.execute(), "";
  }
}
class mP {
  constructor(e, n, r) {
    this.params = r, this.timerId = null, this.deleted = !1, this.responseToken = null, this.clickHandler = () => {
      this.execute();
    };
    const i = typeof e == "string" ? document.getElementById(e) : e;
    te(i, "argument-error", { appName: n }), this.container = i, this.isVisible = this.params.size !== "invisible", this.isVisible ? this.execute() : this.container.addEventListener("click", this.clickHandler);
  }
  getResponse() {
    return this.checkIfDeleted(), this.responseToken;
  }
  delete() {
    this.checkIfDeleted(), this.deleted = !0, this.timerId && (clearTimeout(this.timerId), this.timerId = null), this.container.removeEventListener("click", this.clickHandler);
  }
  execute() {
    this.checkIfDeleted(), !this.timerId && (this.timerId = window.setTimeout(() => {
      this.responseToken = gP(50);
      const { callback: e, "expired-callback": n } = this.params;
      if (e)
        try {
          e(this.responseToken);
        } catch {
        }
      this.timerId = window.setTimeout(() => {
        if (this.timerId = null, this.responseToken = null, n)
          try {
            n();
          } catch {
          }
        this.isVisible && this.execute();
      }, dP);
    }, hP));
  }
  checkIfDeleted() {
    if (this.deleted)
      throw new Error("reCAPTCHA mock was already deleted!");
  }
}
function gP(t) {
  const e = [], n = "1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
  for (let r = 0; r < t; r++)
    e.push(n.charAt(Math.floor(Math.random() * n.length)));
  return e.join("");
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Kc = Hy("rcb"), yP = new xs(3e4, 6e4);
class vP {
  constructor() {
    var e;
    this.hostLanguage = "", this.counter = 0, this.librarySeparatelyLoaded = !!(!((e = Qe().grecaptcha) === null || e === void 0) && e.render);
  }
  load(e, n = "") {
    return te(
      _P(n),
      e,
      "argument-error"
      /* AuthErrorCode.ARGUMENT_ERROR */
    ), this.shouldResolveImmediately(n) && lp(Qe().grecaptcha) ? Promise.resolve(Qe().grecaptcha) : new Promise((r, i) => {
      const s = Qe().setTimeout(() => {
        i(kt(
          e,
          "network-request-failed"
          /* AuthErrorCode.NETWORK_REQUEST_FAILED */
        ));
      }, yP.get());
      Qe()[Kc] = () => {
        Qe().clearTimeout(s), delete Qe()[Kc];
        const a = Qe().grecaptcha;
        if (!a || !lp(a)) {
          i(kt(
            e,
            "internal-error"
            /* AuthErrorCode.INTERNAL_ERROR */
          ));
          return;
        }
        const u = a.render;
        a.render = (l, h) => {
          const f = u(l, h);
          return this.counter++, f;
        }, this.hostLanguage = n, r(a);
      };
      const o = `${TC()}?${Ii({
        onload: Kc,
        render: "explicit",
        hl: n
      })}`;
      Vl(o).catch(() => {
        clearTimeout(s), i(kt(
          e,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        ));
      });
    });
  }
  clearedOneInstance() {
    this.counter--;
  }
  shouldResolveImmediately(e) {
    var n;
    return !!(!((n = Qe().grecaptcha) === null || n === void 0) && n.render) && (e === this.hostLanguage || this.counter > 0 || this.librarySeparatelyLoaded);
  }
}
function _P(t) {
  return t.length <= 6 && /^\s*[a-zA-Z0-9\-]*\s*$/.test(t);
}
class wP {
  async load(e) {
    return new pP(e);
  }
  clearedOneInstance() {
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const EP = "recaptcha", bP = {
  theme: "light",
  type: "image"
};
class TP {
  /**
   * @param authExtern - The corresponding Firebase {@link Auth} instance.
   *
   * @param containerOrId - The reCAPTCHA container parameter.
   *
   * @remarks
   * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a
   * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to
   * an element ID. The corresponding element must also must be in the DOM at the time of
   * initialization.
   *
   * @param parameters - The optional reCAPTCHA parameters.
   *
   * @remarks
   * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for
   * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will
   * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value
   * 'invisible'.
   */
  constructor(e, n, r = Object.assign({}, bP)) {
    this.parameters = r, this.type = EP, this.destroyed = !1, this.widgetId = null, this.tokenChangeListeners = /* @__PURE__ */ new Set(), this.renderPromise = null, this.recaptcha = null, this.auth = yn(e), this.isInvisible = this.parameters.size === "invisible", te(
      typeof document < "u",
      this.auth,
      "operation-not-supported-in-this-environment"
      /* AuthErrorCode.OPERATION_NOT_SUPPORTED */
    );
    const i = typeof n == "string" ? document.getElementById(n) : n;
    te(
      i,
      this.auth,
      "argument-error"
      /* AuthErrorCode.ARGUMENT_ERROR */
    ), this.container = i, this.parameters.callback = this.makeTokenCallback(this.parameters.callback), this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting ? new wP() : new vP(), this.validateStartingState();
  }
  /**
   * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.
   *
   * @returns A Promise for the reCAPTCHA token.
   */
  async verify() {
    this.assertNotDestroyed();
    const e = await this.render(), n = this.getAssertedRecaptcha(), r = n.getResponse(e);
    return r || new Promise((i) => {
      const s = (o) => {
        o && (this.tokenChangeListeners.delete(s), i(o));
      };
      this.tokenChangeListeners.add(s), this.isInvisible && n.execute(e);
    });
  }
  /**
   * Renders the reCAPTCHA widget on the page.
   *
   * @returns A Promise that resolves with the reCAPTCHA widget ID.
   */
  render() {
    try {
      this.assertNotDestroyed();
    } catch (e) {
      return Promise.reject(e);
    }
    return this.renderPromise ? this.renderPromise : (this.renderPromise = this.makeRenderPromise().catch((e) => {
      throw this.renderPromise = null, e;
    }), this.renderPromise);
  }
  /** @internal */
  _reset() {
    this.assertNotDestroyed(), this.widgetId !== null && this.getAssertedRecaptcha().reset(this.widgetId);
  }
  /**
   * Clears the reCAPTCHA widget from the page and destroys the instance.
   */
  clear() {
    this.assertNotDestroyed(), this.destroyed = !0, this._recaptchaLoader.clearedOneInstance(), this.isInvisible || this.container.childNodes.forEach((e) => {
      this.container.removeChild(e);
    });
  }
  validateStartingState() {
    te(
      !this.parameters.sitekey,
      this.auth,
      "argument-error"
      /* AuthErrorCode.ARGUMENT_ERROR */
    ), te(
      this.isInvisible || !this.container.hasChildNodes(),
      this.auth,
      "argument-error"
      /* AuthErrorCode.ARGUMENT_ERROR */
    ), te(
      typeof document < "u",
      this.auth,
      "operation-not-supported-in-this-environment"
      /* AuthErrorCode.OPERATION_NOT_SUPPORTED */
    );
  }
  makeTokenCallback(e) {
    return (n) => {
      if (this.tokenChangeListeners.forEach((r) => r(n)), typeof e == "function")
        e(n);
      else if (typeof e == "string") {
        const r = Qe()[e];
        typeof r == "function" && r(n);
      }
    };
  }
  assertNotDestroyed() {
    te(
      !this.destroyed,
      this.auth,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    );
  }
  async makeRenderPromise() {
    if (await this.init(), !this.widgetId) {
      let e = this.container;
      if (!this.isInvisible) {
        const n = document.createElement("div");
        e.appendChild(n), e = n;
      }
      this.widgetId = this.getAssertedRecaptcha().render(e, this.parameters);
    }
    return this.widgetId;
  }
  async init() {
    te(
      Oy() && !Bl(),
      this.auth,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), await IP(), this.recaptcha = await this._recaptchaLoader.load(this.auth, this.auth.languageCode || void 0);
    const e = await iC(this.auth);
    te(
      e,
      this.auth,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), this.parameters.sitekey = e;
  }
  getAssertedRecaptcha() {
    return te(
      this.recaptcha,
      this.auth,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), this.recaptcha;
  }
}
function IP() {
  let t = null;
  return new Promise((e) => {
    if (document.readyState === "complete") {
      e();
      return;
    }
    t = () => e(), window.addEventListener("load", t);
  }).catch((e) => {
    throw t && window.removeEventListener("load", t), e;
  });
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function sv(t, e) {
  return e ? Sn(e) : (te(
    t._popupRedirectResolver,
    t,
    "argument-error"
    /* AuthErrorCode.ARGUMENT_ERROR */
  ), t._popupRedirectResolver);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ql extends Fl {
  constructor(e) {
    super(
      "custom",
      "custom"
      /* ProviderId.CUSTOM */
    ), this.params = e;
  }
  _getIdTokenResponse(e) {
    return oi(e, this._buildIdpRequest());
  }
  _linkToIdToken(e, n) {
    return oi(e, this._buildIdpRequest(n));
  }
  _getReauthenticationResolver(e) {
    return oi(e, this._buildIdpRequest());
  }
  _buildIdpRequest(e) {
    const n = {
      requestUri: this.params.requestUri,
      sessionId: this.params.sessionId,
      postBody: this.params.postBody,
      tenantId: this.params.tenantId,
      pendingToken: this.params.pendingToken,
      returnSecureToken: !0,
      returnIdpCredential: !0
    };
    return e && (n.idToken = e), n;
  }
}
function SP(t) {
  return Qy(t.auth, new ql(t), t.bypassAuthState);
}
function AP(t) {
  const { auth: e, user: n } = t;
  return te(
    n,
    e,
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  ), qC(n, new ql(t), t.bypassAuthState);
}
async function RP(t) {
  const { auth: e, user: n } = t;
  return te(
    n,
    e,
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  ), BC(n, new ql(t), t.bypassAuthState);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ov {
  constructor(e, n, r, i, s = !1) {
    this.auth = e, this.resolver = r, this.user = i, this.bypassAuthState = s, this.pendingPromise = null, this.eventManager = null, this.filter = Array.isArray(n) ? n : [n];
  }
  execute() {
    return new Promise(async (e, n) => {
      this.pendingPromise = { resolve: e, reject: n };
      try {
        this.eventManager = await this.resolver._initialize(this.auth), await this.onExecution(), this.eventManager.registerConsumer(this);
      } catch (r) {
        this.reject(r);
      }
    });
  }
  async onAuthEvent(e) {
    const { urlResponse: n, sessionId: r, postBody: i, tenantId: s, error: o, type: a } = e;
    if (o) {
      this.reject(o);
      return;
    }
    const u = {
      auth: this.auth,
      requestUri: n,
      sessionId: r,
      tenantId: s || void 0,
      postBody: i || void 0,
      user: this.user,
      bypassAuthState: this.bypassAuthState
    };
    try {
      this.resolve(await this.getIdpTask(a)(u));
    } catch (l) {
      this.reject(l);
    }
  }
  onError(e) {
    this.reject(e);
  }
  getIdpTask(e) {
    switch (e) {
      case "signInViaPopup":
      case "signInViaRedirect":
        return SP;
      case "linkViaPopup":
      case "linkViaRedirect":
        return RP;
      case "reauthViaPopup":
      case "reauthViaRedirect":
        return AP;
      default:
        Ht(
          this.auth,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
    }
  }
  resolve(e) {
    kn(this.pendingPromise, "Pending promise was never set"), this.pendingPromise.resolve(e), this.unregisterAndCleanUp();
  }
  reject(e) {
    kn(this.pendingPromise, "Pending promise was never set"), this.pendingPromise.reject(e), this.unregisterAndCleanUp();
  }
  unregisterAndCleanUp() {
    this.eventManager && this.eventManager.unregisterConsumer(this), this.pendingPromise = null, this.cleanUp();
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const CP = new xs(2e3, 1e4);
async function dV(t, e, n) {
  if (Bt(t.app))
    return Promise.reject(kt(
      t,
      "operation-not-supported-in-this-environment"
      /* AuthErrorCode.OPERATION_NOT_SUPPORTED */
    ));
  const r = yn(t);
  YR(t, e, jl);
  const i = sv(r, n);
  return new mr(r, "signInViaPopup", e, i).executeNotNull();
}
class mr extends ov {
  constructor(e, n, r, i, s) {
    super(e, n, i, s), this.provider = r, this.authWindow = null, this.pollId = null, mr.currentPopupAction && mr.currentPopupAction.cancel(), mr.currentPopupAction = this;
  }
  async executeNotNull() {
    const e = await this.execute();
    return te(
      e,
      this.auth,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), e;
  }
  async onExecution() {
    kn(this.filter.length === 1, "Popup operations only handle one event");
    const e = $l();
    this.authWindow = await this.resolver._openPopup(
      this.auth,
      this.provider,
      this.filter[0],
      // There's always one, see constructor
      e
    ), this.authWindow.associatedEvent = e, this.resolver._originValidation(this.auth).catch((n) => {
      this.reject(n);
    }), this.resolver._isIframeWebStorageSupported(this.auth, (n) => {
      n || this.reject(kt(
        this.auth,
        "web-storage-unsupported"
        /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */
      ));
    }), this.pollUserCancellation();
  }
  get eventId() {
    var e;
    return ((e = this.authWindow) === null || e === void 0 ? void 0 : e.associatedEvent) || null;
  }
  cancel() {
    this.reject(kt(
      this.auth,
      "cancelled-popup-request"
      /* AuthErrorCode.EXPIRED_POPUP_REQUEST */
    ));
  }
  cleanUp() {
    this.authWindow && this.authWindow.close(), this.pollId && window.clearTimeout(this.pollId), this.authWindow = null, this.pollId = null, mr.currentPopupAction = null;
  }
  pollUserCancellation() {
    const e = () => {
      var n, r;
      if (!((r = (n = this.authWindow) === null || n === void 0 ? void 0 : n.window) === null || r === void 0) && r.closed) {
        this.pollId = window.setTimeout(
          () => {
            this.pollId = null, this.reject(kt(
              this.auth,
              "popup-closed-by-user"
              /* AuthErrorCode.POPUP_CLOSED_BY_USER */
            ));
          },
          8e3
          /* _Timeout.AUTH_EVENT */
        );
        return;
      }
      this.pollId = window.setTimeout(e, CP.get());
    };
    e();
  }
}
mr.currentPopupAction = null;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const PP = "pendingRedirect", xo = /* @__PURE__ */ new Map();
class kP extends ov {
  constructor(e, n, r = !1) {
    super(e, [
      "signInViaRedirect",
      "linkViaRedirect",
      "reauthViaRedirect",
      "unknown"
      /* AuthEventType.UNKNOWN */
    ], n, void 0, r), this.eventId = null;
  }
  /**
   * Override the execute function; if we already have a redirect result, then
   * just return it.
   */
  async execute() {
    let e = xo.get(this.auth._key());
    if (!e) {
      try {
        const r = await OP(this.resolver, this.auth) ? await super.execute() : null;
        e = () => Promise.resolve(r);
      } catch (n) {
        e = () => Promise.reject(n);
      }
      xo.set(this.auth._key(), e);
    }
    return this.bypassAuthState || xo.set(this.auth._key(), () => Promise.resolve(null)), e();
  }
  async onAuthEvent(e) {
    if (e.type === "signInViaRedirect")
      return super.onAuthEvent(e);
    if (e.type === "unknown") {
      this.resolve(null);
      return;
    }
    if (e.eventId) {
      const n = await this.auth._redirectUserForId(e.eventId);
      if (n)
        return this.user = n, super.onAuthEvent(e);
      this.resolve(null);
    }
  }
  async onExecution() {
  }
  cleanUp() {
  }
}
async function OP(t, e) {
  const n = xP(e), r = NP(t);
  if (!await r._isAvailable())
    return !1;
  const i = await r._get(n) === "true";
  return await r._remove(n), i;
}
function DP(t, e) {
  xo.set(t._key(), e);
}
function NP(t) {
  return Sn(t._redirectPersistence);
}
function xP(t) {
  return No(PP, t.config.apiKey, t.name);
}
async function LP(t, e, n = !1) {
  if (Bt(t.app))
    return Promise.reject(cn(t));
  const r = yn(t), i = sv(r, e), o = await new kP(r, i, n).execute();
  return o && !n && (delete o.user._redirectEventId, await r._persistUserIfCurrent(o.user), await r._setRedirectUser(null, e)), o;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const MP = 10 * 60 * 1e3;
class VP {
  constructor(e) {
    this.auth = e, this.cachedEventUids = /* @__PURE__ */ new Set(), this.consumers = /* @__PURE__ */ new Set(), this.queuedRedirectEvent = null, this.hasHandledPotentialRedirect = !1, this.lastProcessedEventTime = Date.now();
  }
  registerConsumer(e) {
    this.consumers.add(e), this.queuedRedirectEvent && this.isEventForConsumer(this.queuedRedirectEvent, e) && (this.sendToConsumer(this.queuedRedirectEvent, e), this.saveEventToCache(this.queuedRedirectEvent), this.queuedRedirectEvent = null);
  }
  unregisterConsumer(e) {
    this.consumers.delete(e);
  }
  onEvent(e) {
    if (this.hasEventBeenHandled(e))
      return !1;
    let n = !1;
    return this.consumers.forEach((r) => {
      this.isEventForConsumer(e, r) && (n = !0, this.sendToConsumer(e, r), this.saveEventToCache(e));
    }), this.hasHandledPotentialRedirect || !FP(e) || (this.hasHandledPotentialRedirect = !0, n || (this.queuedRedirectEvent = e, n = !0)), n;
  }
  sendToConsumer(e, n) {
    var r;
    if (e.error && !av(e)) {
      const i = ((r = e.error.code) === null || r === void 0 ? void 0 : r.split("auth/")[1]) || "internal-error";
      n.onError(kt(this.auth, i));
    } else
      n.onAuthEvent(e);
  }
  isEventForConsumer(e, n) {
    const r = n.eventId === null || !!e.eventId && e.eventId === n.eventId;
    return n.filter.includes(e.type) && r;
  }
  hasEventBeenHandled(e) {
    return Date.now() - this.lastProcessedEventTime >= MP && this.cachedEventUids.clear(), this.cachedEventUids.has(bp(e));
  }
  saveEventToCache(e) {
    this.cachedEventUids.add(bp(e)), this.lastProcessedEventTime = Date.now();
  }
}
function bp(t) {
  return [t.type, t.eventId, t.sessionId, t.tenantId].filter((e) => e).join("-");
}
function av({ type: t, error: e }) {
  return t === "unknown" && (e == null ? void 0 : e.code) === "auth/no-auth-event";
}
function FP(t) {
  switch (t.type) {
    case "signInViaRedirect":
    case "linkViaRedirect":
    case "reauthViaRedirect":
      return !0;
    case "unknown":
      return av(t);
    default:
      return !1;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function UP(t, e = {}) {
  return gn(t, "GET", "/v1/projects", e);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const jP = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/, $P = /^https?/;
async function BP(t) {
  if (t.config.emulator)
    return;
  const { authorizedDomains: e } = await UP(t);
  for (const n of e)
    try {
      if (qP(n))
        return;
    } catch {
    }
  Ht(
    t,
    "unauthorized-domain"
    /* AuthErrorCode.INVALID_ORIGIN */
  );
}
function qP(t) {
  const e = Uu(), { protocol: n, hostname: r } = new URL(e);
  if (t.startsWith("chrome-extension://")) {
    const o = new URL(t);
    return o.hostname === "" && r === "" ? n === "chrome-extension:" && t.replace("chrome-extension://", "") === e.replace("chrome-extension://", "") : n === "chrome-extension:" && o.hostname === r;
  }
  if (!$P.test(n))
    return !1;
  if (jP.test(t))
    return r === t;
  const i = t.replace(/\./g, "\\.");
  return new RegExp("^(.+\\." + i + "|" + i + ")$", "i").test(r);
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const zP = new xs(3e4, 6e4);
function Tp() {
  const t = Qe().___jsl;
  if (t != null && t.H) {
    for (const e of Object.keys(t.H))
      if (t.H[e].r = t.H[e].r || [], t.H[e].L = t.H[e].L || [], t.H[e].r = [...t.H[e].L], t.CP)
        for (let n = 0; n < t.CP.length; n++)
          t.CP[n] = null;
  }
}
function KP(t) {
  return new Promise((e, n) => {
    var r, i, s;
    function o() {
      Tp(), gapi.load("gapi.iframes", {
        callback: () => {
          e(gapi.iframes.getContext());
        },
        ontimeout: () => {
          Tp(), n(kt(
            t,
            "network-request-failed"
            /* AuthErrorCode.NETWORK_REQUEST_FAILED */
          ));
        },
        timeout: zP.get()
      });
    }
    if (!((i = (r = Qe().gapi) === null || r === void 0 ? void 0 : r.iframes) === null || i === void 0) && i.Iframe)
      e(gapi.iframes.getContext());
    else if (!((s = Qe().gapi) === null || s === void 0) && s.load)
      o();
    else {
      const a = Hy("iframefcb");
      return Qe()[a] = () => {
        gapi.load ? o() : n(kt(
          t,
          "network-request-failed"
          /* AuthErrorCode.NETWORK_REQUEST_FAILED */
        ));
      }, Vl(`${SC()}?onload=${a}`).catch((u) => n(u));
    }
  }).catch((e) => {
    throw Lo = null, e;
  });
}
let Lo = null;
function HP(t) {
  return Lo = Lo || KP(t), Lo;
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const GP = new xs(5e3, 15e3), WP = "__/auth/iframe", QP = "emulator/auth/iframe", YP = {
  style: {
    position: "absolute",
    top: "-100px",
    width: "1px",
    height: "1px"
  },
  "aria-hidden": "true",
  tabindex: "-1"
}, JP = /* @__PURE__ */ new Map([
  ["identitytoolkit.googleapis.com", "p"],
  ["staging-identitytoolkit.sandbox.googleapis.com", "s"],
  ["test-identitytoolkit.sandbox.googleapis.com", "t"]
  // test
]);
function XP(t) {
  const e = t.config;
  te(
    e.authDomain,
    t,
    "auth-domain-config-required"
    /* AuthErrorCode.MISSING_AUTH_DOMAIN */
  );
  const n = e.emulator ? xl(e, QP) : `https://${t.config.authDomain}/${WP}`, r = {
    apiKey: e.apiKey,
    appName: t.name,
    v: jr
  }, i = JP.get(t.config.apiHost);
  i && (r.eid = i);
  const s = t._getFrameworks();
  return s.length && (r.fw = s.join(",")), `${n}?${Ii(r).slice(1)}`;
}
async function ZP(t) {
  const e = await HP(t), n = Qe().gapi;
  return te(
    n,
    t,
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  ), e.open({
    where: document.body,
    url: XP(t),
    messageHandlersFilter: n.iframes.CROSS_ORIGIN_IFRAMES_FILTER,
    attributes: YP,
    dontclear: !0
  }, (r) => new Promise(async (i, s) => {
    await r.restyle({
      // Prevent iframe from closing on mouse out.
      setHideOnLeave: !1
    });
    const o = kt(
      t,
      "network-request-failed"
      /* AuthErrorCode.NETWORK_REQUEST_FAILED */
    ), a = Qe().setTimeout(() => {
      s(o);
    }, GP.get());
    function u() {
      Qe().clearTimeout(a), i(r);
    }
    r.ping(u).then(u, () => {
      s(o);
    });
  }));
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const ek = {
  location: "yes",
  resizable: "yes",
  statusbar: "yes",
  toolbar: "no"
}, tk = 500, nk = 600, rk = "_blank", ik = "http://localhost";
class Ip {
  constructor(e) {
    this.window = e, this.associatedEvent = null;
  }
  close() {
    if (this.window)
      try {
        this.window.close();
      } catch {
      }
  }
}
function sk(t, e, n, r = tk, i = nk) {
  const s = Math.max((window.screen.availHeight - i) / 2, 0).toString(), o = Math.max((window.screen.availWidth - r) / 2, 0).toString();
  let a = "";
  const u = Object.assign(Object.assign({}, ek), {
    width: r.toString(),
    height: i.toString(),
    top: s,
    left: o
  }), l = lt().toLowerCase();
  n && (a = Uy(l) ? rk : n), Fy(l) && (e = e || ik, u.scrollbars = "yes");
  const h = Object.entries(u).reduce((y, [b, S]) => `${y}${b}=${S},`, "");
  if (pC(l) && a !== "_self")
    return ok(e || "", a), new Ip(null);
  const f = window.open(e || "", a, h);
  te(
    f,
    t,
    "popup-blocked"
    /* AuthErrorCode.POPUP_BLOCKED */
  );
  try {
    f.focus();
  } catch {
  }
  return new Ip(f);
}
function ok(t, e) {
  const n = document.createElement("a");
  n.href = t, n.target = e;
  const r = document.createEvent("MouseEvent");
  r.initMouseEvent("click", !0, !0, window, 1, 0, 0, 0, 0, !1, !1, !1, !1, 1, null), n.dispatchEvent(r);
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const ak = "__/auth/handler", ck = "emulator/auth/handler", uk = encodeURIComponent("fac");
async function Sp(t, e, n, r, i, s) {
  te(
    t.config.authDomain,
    t,
    "auth-domain-config-required"
    /* AuthErrorCode.MISSING_AUTH_DOMAIN */
  ), te(
    t.config.apiKey,
    t,
    "invalid-api-key"
    /* AuthErrorCode.INVALID_API_KEY */
  );
  const o = {
    apiKey: t.config.apiKey,
    appName: t.name,
    authType: n,
    redirectUrl: r,
    v: jr,
    eventId: i
  };
  if (e instanceof jl) {
    e.setDefaultLanguage(t.languageCode), o.providerId = e.providerId || "", NA(e.getCustomParameters()) || (o.customParameters = JSON.stringify(e.getCustomParameters()));
    for (const [h, f] of Object.entries({}))
      o[h] = f;
  }
  if (e instanceof Ms) {
    const h = e.getScopes().filter((f) => f !== "");
    h.length > 0 && (o.scopes = h.join(","));
  }
  t.tenantId && (o.tid = t.tenantId);
  const a = o;
  for (const h of Object.keys(a))
    a[h] === void 0 && delete a[h];
  const u = await t._getAppCheckToken(), l = u ? `#${uk}=${encodeURIComponent(u)}` : "";
  return `${lk(t)}?${Ii(a).slice(1)}${l}`;
}
function lk({ config: t }) {
  return t.emulator ? xl(t, ck) : `https://${t.authDomain}/${ak}`;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Hc = "webStorageSupport";
class fk {
  constructor() {
    this.eventManagers = {}, this.iframes = {}, this.originValidationPromises = {}, this._redirectPersistence = tv, this._completeRedirectFn = LP, this._overrideRedirectResult = DP;
  }
  // Wrapping in async even though we don't await anywhere in order
  // to make sure errors are raised as promise rejections
  async _openPopup(e, n, r, i) {
    var s;
    kn((s = this.eventManagers[e._key()]) === null || s === void 0 ? void 0 : s.manager, "_initialize() not called before _openPopup()");
    const o = await Sp(e, n, r, Uu(), i);
    return sk(e, o, $l());
  }
  async _openRedirect(e, n, r, i) {
    await this._originValidation(e);
    const s = await Sp(e, n, r, Uu(), i);
    return nP(s), new Promise(() => {
    });
  }
  _initialize(e) {
    const n = e._key();
    if (this.eventManagers[n]) {
      const { manager: i, promise: s } = this.eventManagers[n];
      return i ? Promise.resolve(i) : (kn(s, "If manager is not set, promise should be"), s);
    }
    const r = this.initAndGetManager(e);
    return this.eventManagers[n] = { promise: r }, r.catch(() => {
      delete this.eventManagers[n];
    }), r;
  }
  async initAndGetManager(e) {
    const n = await ZP(e), r = new VP(e);
    return n.register("authEvent", (i) => (te(
      i == null ? void 0 : i.authEvent,
      e,
      "invalid-auth-event"
      /* AuthErrorCode.INVALID_AUTH_EVENT */
    ), {
      status: r.onEvent(i.authEvent) ? "ACK" : "ERROR"
      /* GapiOutcome.ERROR */
    }), gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER), this.eventManagers[e._key()] = { manager: r }, this.iframes[e._key()] = n, r;
  }
  _isIframeWebStorageSupported(e, n) {
    this.iframes[e._key()].send(Hc, { type: Hc }, (i) => {
      var s;
      const o = (s = i == null ? void 0 : i[0]) === null || s === void 0 ? void 0 : s[Hc];
      o !== void 0 && n(!!o), Ht(
        e,
        "internal-error"
        /* AuthErrorCode.INTERNAL_ERROR */
      );
    }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
  }
  _originValidation(e) {
    const n = e._key();
    return this.originValidationPromises[n] || (this.originValidationPromises[n] = BP(e)), this.originValidationPromises[n];
  }
  get _shouldInitProactively() {
    return zy() || Ml() || Va();
  }
}
const hk = fk;
var Ap = "@firebase/auth", Rp = "1.7.6";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class dk {
  constructor(e) {
    this.auth = e, this.internalListeners = /* @__PURE__ */ new Map();
  }
  getUid() {
    var e;
    return this.assertAuthConfigured(), ((e = this.auth.currentUser) === null || e === void 0 ? void 0 : e.uid) || null;
  }
  async getToken(e) {
    return this.assertAuthConfigured(), await this.auth._initializationPromise, this.auth.currentUser ? { accessToken: await this.auth.currentUser.getIdToken(e) } : null;
  }
  addAuthTokenListener(e) {
    if (this.assertAuthConfigured(), this.internalListeners.has(e))
      return;
    const n = this.auth.onIdTokenChanged((r) => {
      e((r == null ? void 0 : r.stsTokenManager.accessToken) || null);
    });
    this.internalListeners.set(e, n), this.updateProactiveRefresh();
  }
  removeAuthTokenListener(e) {
    this.assertAuthConfigured();
    const n = this.internalListeners.get(e);
    n && (this.internalListeners.delete(e), n(), this.updateProactiveRefresh());
  }
  assertAuthConfigured() {
    te(
      this.auth._initializationPromise,
      "dependent-sdk-initialized-before-auth"
      /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */
    );
  }
  updateProactiveRefresh() {
    this.internalListeners.size > 0 ? this.auth._startProactiveRefresh() : this.auth._stopProactiveRefresh();
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function pk(t) {
  switch (t) {
    case "Node":
      return "node";
    case "ReactNative":
      return "rn";
    case "Worker":
      return "webworker";
    case "Cordova":
      return "cordova";
    case "WebExtension":
      return "web-extension";
    default:
      return;
  }
}
function mk(t) {
  en(new Kt(
    "auth",
    (e, { options: n }) => {
      const r = e.getProvider("app").getImmediate(), i = e.getProvider("heartbeat"), s = e.getProvider("app-check-internal"), { apiKey: o, authDomain: a } = r.options;
      te(o && !o.includes(":"), "invalid-api-key", { appName: r.name });
      const u = {
        apiKey: o,
        authDomain: a,
        clientPlatform: t,
        apiHost: "identitytoolkit.googleapis.com",
        tokenApiHost: "securetoken.googleapis.com",
        apiScheme: "https",
        sdkClientVersion: Ky(t)
      }, l = new EC(r, i, s, u);
      return kC(l, n), l;
    },
    "PUBLIC"
    /* ComponentType.PUBLIC */
  ).setInstantiationMode(
    "EXPLICIT"
    /* InstantiationMode.EXPLICIT */
  ).setInstanceCreatedCallback((e, n, r) => {
    e.getProvider(
      "auth-internal"
      /* _ComponentName.AUTH_INTERNAL */
    ).initialize();
  })), en(new Kt(
    "auth-internal",
    (e) => {
      const n = yn(e.getProvider(
        "auth"
        /* _ComponentName.AUTH */
      ).getImmediate());
      return ((r) => new dk(r))(n);
    },
    "PRIVATE"
    /* ComponentType.PRIVATE */
  ).setInstantiationMode(
    "EXPLICIT"
    /* InstantiationMode.EXPLICIT */
  )), Pt(Ap, Rp, pk(t)), Pt(Ap, Rp, "esm2017");
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const gk = 5 * 60, yk = vy("authIdTokenMaxAge") || gk;
let Cp = null;
const vk = (t) => async (e) => {
  const n = e && await e.getIdTokenResult(), r = n && ((/* @__PURE__ */ new Date()).getTime() - Date.parse(n.issuedAtTime)) / 1e3;
  if (r && r > yk)
    return;
  const i = n == null ? void 0 : n.token;
  Cp !== i && (Cp = i, await fetch(t, {
    method: i ? "POST" : "DELETE",
    headers: i ? {
      Authorization: `Bearer ${i}`
    } : {}
  }));
};
function _k(t = Ma()) {
  const e = nr(t, "auth");
  if (e.isInitialized())
    return e.getImmediate();
  const n = PC(t, {
    popupRedirectResolver: hk,
    persistence: [
      fP,
      ZC,
      tv
    ]
  }), r = vy("authTokenSyncURL");
  if (r && typeof isSecureContext == "boolean" && isSecureContext) {
    const s = new URL(r, location.origin);
    if (location.origin === s.origin) {
      const o = vk(s.toString());
      WC(n, o, () => o(n.currentUser)), Jy(n, (a) => o(a));
    }
  }
  const i = my("auth");
  return i && OC(n, `http://${i}`), n;
}
function wk() {
  var t, e;
  return (e = (t = document.getElementsByTagName("head")) === null || t === void 0 ? void 0 : t[0]) !== null && e !== void 0 ? e : document;
}
bC({
  loadJS(t) {
    return new Promise((e, n) => {
      const r = document.createElement("script");
      r.setAttribute("src", t), r.onload = e, r.onerror = (i) => {
        const s = kt(
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        s.customData = i, n(s);
      }, r.type = "text/javascript", r.charset = "UTF-8", wk().appendChild(r);
    });
  },
  gapiScript: "https://apis.google.com/js/api.js",
  recaptchaV2Script: "https://www.google.com/recaptcha/api.js",
  recaptchaEnterpriseScript: "https://www.google.com/recaptcha/enterprise.js?render="
});
mk(
  "Browser"
  /* ClientPlatform.BROWSER */
);
var Pp = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof globalThis < "u" ? globalThis : typeof self < "u" ? self : {};
/** @license
Copyright The Closure Library Authors.
SPDX-License-Identifier: Apache-2.0
*/
var Er, cv;
(function() {
  var t;
  /** @license
  
   Copyright The Closure Library Authors.
   SPDX-License-Identifier: Apache-2.0
  */
  function e(R, T) {
    function A() {
    }
    A.prototype = T.prototype, R.D = T.prototype, R.prototype = new A(), R.prototype.constructor = R, R.C = function(O, D, N) {
      for (var k = Array(arguments.length - 2), Y = 2; Y < arguments.length; Y++) k[Y - 2] = arguments[Y];
      return T.prototype[D].apply(O, k);
    };
  }
  function n() {
    this.blockSize = -1;
  }
  function r() {
    this.blockSize = -1, this.blockSize = 64, this.g = Array(4), this.B = Array(this.blockSize), this.o = this.h = 0, this.s();
  }
  e(r, n), r.prototype.s = function() {
    this.g[0] = 1732584193, this.g[1] = 4023233417, this.g[2] = 2562383102, this.g[3] = 271733878, this.o = this.h = 0;
  };
  function i(R, T, A) {
    A || (A = 0);
    var O = Array(16);
    if (typeof T == "string") for (var D = 0; 16 > D; ++D) O[D] = T.charCodeAt(A++) | T.charCodeAt(A++) << 8 | T.charCodeAt(A++) << 16 | T.charCodeAt(A++) << 24;
    else for (D = 0; 16 > D; ++D) O[D] = T[A++] | T[A++] << 8 | T[A++] << 16 | T[A++] << 24;
    T = R.g[0], A = R.g[1], D = R.g[2];
    var N = R.g[3], k = T + (N ^ A & (D ^ N)) + O[0] + 3614090360 & 4294967295;
    T = A + (k << 7 & 4294967295 | k >>> 25), k = N + (D ^ T & (A ^ D)) + O[1] + 3905402710 & 4294967295, N = T + (k << 12 & 4294967295 | k >>> 20), k = D + (A ^ N & (T ^ A)) + O[2] + 606105819 & 4294967295, D = N + (k << 17 & 4294967295 | k >>> 15), k = A + (T ^ D & (N ^ T)) + O[3] + 3250441966 & 4294967295, A = D + (k << 22 & 4294967295 | k >>> 10), k = T + (N ^ A & (D ^ N)) + O[4] + 4118548399 & 4294967295, T = A + (k << 7 & 4294967295 | k >>> 25), k = N + (D ^ T & (A ^ D)) + O[5] + 1200080426 & 4294967295, N = T + (k << 12 & 4294967295 | k >>> 20), k = D + (A ^ N & (T ^ A)) + O[6] + 2821735955 & 4294967295, D = N + (k << 17 & 4294967295 | k >>> 15), k = A + (T ^ D & (N ^ T)) + O[7] + 4249261313 & 4294967295, A = D + (k << 22 & 4294967295 | k >>> 10), k = T + (N ^ A & (D ^ N)) + O[8] + 1770035416 & 4294967295, T = A + (k << 7 & 4294967295 | k >>> 25), k = N + (D ^ T & (A ^ D)) + O[9] + 2336552879 & 4294967295, N = T + (k << 12 & 4294967295 | k >>> 20), k = D + (A ^ N & (T ^ A)) + O[10] + 4294925233 & 4294967295, D = N + (k << 17 & 4294967295 | k >>> 15), k = A + (T ^ D & (N ^ T)) + O[11] + 2304563134 & 4294967295, A = D + (k << 22 & 4294967295 | k >>> 10), k = T + (N ^ A & (D ^ N)) + O[12] + 1804603682 & 4294967295, T = A + (k << 7 & 4294967295 | k >>> 25), k = N + (D ^ T & (A ^ D)) + O[13] + 4254626195 & 4294967295, N = T + (k << 12 & 4294967295 | k >>> 20), k = D + (A ^ N & (T ^ A)) + O[14] + 2792965006 & 4294967295, D = N + (k << 17 & 4294967295 | k >>> 15), k = A + (T ^ D & (N ^ T)) + O[15] + 1236535329 & 4294967295, A = D + (k << 22 & 4294967295 | k >>> 10), k = T + (D ^ N & (A ^ D)) + O[1] + 4129170786 & 4294967295, T = A + (k << 5 & 4294967295 | k >>> 27), k = N + (A ^ D & (T ^ A)) + O[6] + 3225465664 & 4294967295, N = T + (k << 9 & 4294967295 | k >>> 23), k = D + (T ^ A & (N ^ T)) + O[11] + 643717713 & 4294967295, D = N + (k << 14 & 4294967295 | k >>> 18), k = A + (N ^ T & (D ^ N)) + O[0] + 3921069994 & 4294967295, A = D + (k << 20 & 4294967295 | k >>> 12), k = T + (D ^ N & (A ^ D)) + O[5] + 3593408605 & 4294967295, T = A + (k << 5 & 4294967295 | k >>> 27), k = N + (A ^ D & (T ^ A)) + O[10] + 38016083 & 4294967295, N = T + (k << 9 & 4294967295 | k >>> 23), k = D + (T ^ A & (N ^ T)) + O[15] + 3634488961 & 4294967295, D = N + (k << 14 & 4294967295 | k >>> 18), k = A + (N ^ T & (D ^ N)) + O[4] + 3889429448 & 4294967295, A = D + (k << 20 & 4294967295 | k >>> 12), k = T + (D ^ N & (A ^ D)) + O[9] + 568446438 & 4294967295, T = A + (k << 5 & 4294967295 | k >>> 27), k = N + (A ^ D & (T ^ A)) + O[14] + 3275163606 & 4294967295, N = T + (k << 9 & 4294967295 | k >>> 23), k = D + (T ^ A & (N ^ T)) + O[3] + 4107603335 & 4294967295, D = N + (k << 14 & 4294967295 | k >>> 18), k = A + (N ^ T & (D ^ N)) + O[8] + 1163531501 & 4294967295, A = D + (k << 20 & 4294967295 | k >>> 12), k = T + (D ^ N & (A ^ D)) + O[13] + 2850285829 & 4294967295, T = A + (k << 5 & 4294967295 | k >>> 27), k = N + (A ^ D & (T ^ A)) + O[2] + 4243563512 & 4294967295, N = T + (k << 9 & 4294967295 | k >>> 23), k = D + (T ^ A & (N ^ T)) + O[7] + 1735328473 & 4294967295, D = N + (k << 14 & 4294967295 | k >>> 18), k = A + (N ^ T & (D ^ N)) + O[12] + 2368359562 & 4294967295, A = D + (k << 20 & 4294967295 | k >>> 12), k = T + (A ^ D ^ N) + O[5] + 4294588738 & 4294967295, T = A + (k << 4 & 4294967295 | k >>> 28), k = N + (T ^ A ^ D) + O[8] + 2272392833 & 4294967295, N = T + (k << 11 & 4294967295 | k >>> 21), k = D + (N ^ T ^ A) + O[11] + 1839030562 & 4294967295, D = N + (k << 16 & 4294967295 | k >>> 16), k = A + (D ^ N ^ T) + O[14] + 4259657740 & 4294967295, A = D + (k << 23 & 4294967295 | k >>> 9), k = T + (A ^ D ^ N) + O[1] + 2763975236 & 4294967295, T = A + (k << 4 & 4294967295 | k >>> 28), k = N + (T ^ A ^ D) + O[4] + 1272893353 & 4294967295, N = T + (k << 11 & 4294967295 | k >>> 21), k = D + (N ^ T ^ A) + O[7] + 4139469664 & 4294967295, D = N + (k << 16 & 4294967295 | k >>> 16), k = A + (D ^ N ^ T) + O[10] + 3200236656 & 4294967295, A = D + (k << 23 & 4294967295 | k >>> 9), k = T + (A ^ D ^ N) + O[13] + 681279174 & 4294967295, T = A + (k << 4 & 4294967295 | k >>> 28), k = N + (T ^ A ^ D) + O[0] + 3936430074 & 4294967295, N = T + (k << 11 & 4294967295 | k >>> 21), k = D + (N ^ T ^ A) + O[3] + 3572445317 & 4294967295, D = N + (k << 16 & 4294967295 | k >>> 16), k = A + (D ^ N ^ T) + O[6] + 76029189 & 4294967295, A = D + (k << 23 & 4294967295 | k >>> 9), k = T + (A ^ D ^ N) + O[9] + 3654602809 & 4294967295, T = A + (k << 4 & 4294967295 | k >>> 28), k = N + (T ^ A ^ D) + O[12] + 3873151461 & 4294967295, N = T + (k << 11 & 4294967295 | k >>> 21), k = D + (N ^ T ^ A) + O[15] + 530742520 & 4294967295, D = N + (k << 16 & 4294967295 | k >>> 16), k = A + (D ^ N ^ T) + O[2] + 3299628645 & 4294967295, A = D + (k << 23 & 4294967295 | k >>> 9), k = T + (D ^ (A | ~N)) + O[0] + 4096336452 & 4294967295, T = A + (k << 6 & 4294967295 | k >>> 26), k = N + (A ^ (T | ~D)) + O[7] + 1126891415 & 4294967295, N = T + (k << 10 & 4294967295 | k >>> 22), k = D + (T ^ (N | ~A)) + O[14] + 2878612391 & 4294967295, D = N + (k << 15 & 4294967295 | k >>> 17), k = A + (N ^ (D | ~T)) + O[5] + 4237533241 & 4294967295, A = D + (k << 21 & 4294967295 | k >>> 11), k = T + (D ^ (A | ~N)) + O[12] + 1700485571 & 4294967295, T = A + (k << 6 & 4294967295 | k >>> 26), k = N + (A ^ (T | ~D)) + O[3] + 2399980690 & 4294967295, N = T + (k << 10 & 4294967295 | k >>> 22), k = D + (T ^ (N | ~A)) + O[10] + 4293915773 & 4294967295, D = N + (k << 15 & 4294967295 | k >>> 17), k = A + (N ^ (D | ~T)) + O[1] + 2240044497 & 4294967295, A = D + (k << 21 & 4294967295 | k >>> 11), k = T + (D ^ (A | ~N)) + O[8] + 1873313359 & 4294967295, T = A + (k << 6 & 4294967295 | k >>> 26), k = N + (A ^ (T | ~D)) + O[15] + 4264355552 & 4294967295, N = T + (k << 10 & 4294967295 | k >>> 22), k = D + (T ^ (N | ~A)) + O[6] + 2734768916 & 4294967295, D = N + (k << 15 & 4294967295 | k >>> 17), k = A + (N ^ (D | ~T)) + O[13] + 1309151649 & 4294967295, A = D + (k << 21 & 4294967295 | k >>> 11), k = T + (D ^ (A | ~N)) + O[4] + 4149444226 & 4294967295, T = A + (k << 6 & 4294967295 | k >>> 26), k = N + (A ^ (T | ~D)) + O[11] + 3174756917 & 4294967295, N = T + (k << 10 & 4294967295 | k >>> 22), k = D + (T ^ (N | ~A)) + O[2] + 718787259 & 4294967295, D = N + (k << 15 & 4294967295 | k >>> 17), k = A + (N ^ (D | ~T)) + O[9] + 3951481745 & 4294967295, R.g[0] = R.g[0] + T & 4294967295, R.g[1] = R.g[1] + (D + (k << 21 & 4294967295 | k >>> 11)) & 4294967295, R.g[2] = R.g[2] + D & 4294967295, R.g[3] = R.g[3] + N & 4294967295;
  }
  r.prototype.u = function(R, T) {
    T === void 0 && (T = R.length);
    for (var A = T - this.blockSize, O = this.B, D = this.h, N = 0; N < T; ) {
      if (D == 0) for (; N <= A; ) i(this, R, N), N += this.blockSize;
      if (typeof R == "string") {
        for (; N < T; )
          if (O[D++] = R.charCodeAt(N++), D == this.blockSize) {
            i(this, O), D = 0;
            break;
          }
      } else for (; N < T; ) if (O[D++] = R[N++], D == this.blockSize) {
        i(this, O), D = 0;
        break;
      }
    }
    this.h = D, this.o += T;
  }, r.prototype.v = function() {
    var R = Array((56 > this.h ? this.blockSize : 2 * this.blockSize) - this.h);
    R[0] = 128;
    for (var T = 1; T < R.length - 8; ++T) R[T] = 0;
    var A = 8 * this.o;
    for (T = R.length - 8; T < R.length; ++T) R[T] = A & 255, A /= 256;
    for (this.u(R), R = Array(16), T = A = 0; 4 > T; ++T) for (var O = 0; 32 > O; O += 8) R[A++] = this.g[T] >>> O & 255;
    return R;
  };
  function s(R, T) {
    var A = a;
    return Object.prototype.hasOwnProperty.call(A, R) ? A[R] : A[R] = T(R);
  }
  function o(R, T) {
    this.h = T;
    for (var A = [], O = !0, D = R.length - 1; 0 <= D; D--) {
      var N = R[D] | 0;
      O && N == T || (A[D] = N, O = !1);
    }
    this.g = A;
  }
  var a = {};
  function u(R) {
    return -128 <= R && 128 > R ? s(R, function(T) {
      return new o([T | 0], 0 > T ? -1 : 0);
    }) : new o([R | 0], 0 > R ? -1 : 0);
  }
  function l(R) {
    if (isNaN(R) || !isFinite(R)) return f;
    if (0 > R) return m(l(-R));
    for (var T = [], A = 1, O = 0; R >= A; O++) T[O] = R / A | 0, A *= 4294967296;
    return new o(T, 0);
  }
  function h(R, T) {
    if (R.length == 0) throw Error("number format error: empty string");
    if (T = T || 10, 2 > T || 36 < T) throw Error("radix out of range: " + T);
    if (R.charAt(0) == "-") return m(h(R.substring(1), T));
    if (0 <= R.indexOf("-")) throw Error('number format error: interior "-" character');
    for (var A = l(Math.pow(T, 8)), O = f, D = 0; D < R.length; D += 8) {
      var N = Math.min(8, R.length - D), k = parseInt(R.substring(D, D + N), T);
      8 > N ? (N = l(Math.pow(T, N)), O = O.j(N).add(l(k))) : (O = O.j(A), O = O.add(l(k)));
    }
    return O;
  }
  var f = u(0), y = u(1), b = u(16777216);
  t = o.prototype, t.m = function() {
    if (C(this)) return -m(this).m();
    for (var R = 0, T = 1, A = 0; A < this.g.length; A++) {
      var O = this.i(A);
      R += (0 <= O ? O : 4294967296 + O) * T, T *= 4294967296;
    }
    return R;
  }, t.toString = function(R) {
    if (R = R || 10, 2 > R || 36 < R) throw Error("radix out of range: " + R);
    if (S(this)) return "0";
    if (C(this)) return "-" + m(this).toString(R);
    for (var T = l(Math.pow(R, 6)), A = this, O = ""; ; ) {
      var D = g(A, T).g;
      A = v(A, D.j(T));
      var N = ((0 < A.g.length ? A.g[0] : A.h) >>> 0).toString(R);
      if (A = D, S(A)) return N + O;
      for (; 6 > N.length; ) N = "0" + N;
      O = N + O;
    }
  }, t.i = function(R) {
    return 0 > R ? 0 : R < this.g.length ? this.g[R] : this.h;
  };
  function S(R) {
    if (R.h != 0) return !1;
    for (var T = 0; T < R.g.length; T++) if (R.g[T] != 0) return !1;
    return !0;
  }
  function C(R) {
    return R.h == -1;
  }
  t.l = function(R) {
    return R = v(this, R), C(R) ? -1 : S(R) ? 0 : 1;
  };
  function m(R) {
    for (var T = R.g.length, A = [], O = 0; O < T; O++) A[O] = ~R.g[O];
    return new o(A, ~R.h).add(y);
  }
  t.abs = function() {
    return C(this) ? m(this) : this;
  }, t.add = function(R) {
    for (var T = Math.max(this.g.length, R.g.length), A = [], O = 0, D = 0; D <= T; D++) {
      var N = O + (this.i(D) & 65535) + (R.i(D) & 65535), k = (N >>> 16) + (this.i(D) >>> 16) + (R.i(D) >>> 16);
      O = k >>> 16, N &= 65535, k &= 65535, A[D] = k << 16 | N;
    }
    return new o(A, A[A.length - 1] & -2147483648 ? -1 : 0);
  };
  function v(R, T) {
    return R.add(m(T));
  }
  t.j = function(R) {
    if (S(this) || S(R)) return f;
    if (C(this)) return C(R) ? m(this).j(m(R)) : m(m(this).j(R));
    if (C(R)) return m(this.j(m(R)));
    if (0 > this.l(b) && 0 > R.l(b)) return l(this.m() * R.m());
    for (var T = this.g.length + R.g.length, A = [], O = 0; O < 2 * T; O++) A[O] = 0;
    for (O = 0; O < this.g.length; O++) for (var D = 0; D < R.g.length; D++) {
      var N = this.i(O) >>> 16, k = this.i(O) & 65535, Y = R.i(D) >>> 16, oe = R.i(D) & 65535;
      A[2 * O + 2 * D] += k * oe, E(A, 2 * O + 2 * D), A[2 * O + 2 * D + 1] += N * oe, E(A, 2 * O + 2 * D + 1), A[2 * O + 2 * D + 1] += k * Y, E(A, 2 * O + 2 * D + 1), A[2 * O + 2 * D + 2] += N * Y, E(A, 2 * O + 2 * D + 2);
    }
    for (O = 0; O < T; O++) A[O] = A[2 * O + 1] << 16 | A[2 * O];
    for (O = T; O < 2 * T; O++) A[O] = 0;
    return new o(A, 0);
  };
  function E(R, T) {
    for (; (R[T] & 65535) != R[T]; ) R[T + 1] += R[T] >>> 16, R[T] &= 65535, T++;
  }
  function p(R, T) {
    this.g = R, this.h = T;
  }
  function g(R, T) {
    if (S(T)) throw Error("division by zero");
    if (S(R)) return new p(f, f);
    if (C(R)) return T = g(m(R), T), new p(m(T.g), m(T.h));
    if (C(T)) return T = g(R, m(T)), new p(m(T.g), T.h);
    if (30 < R.g.length) {
      if (C(R) || C(T)) throw Error("slowDivide_ only works with positive integers.");
      for (var A = y, O = T; 0 >= O.l(R); ) A = w(A), O = w(O);
      var D = I(A, 1), N = I(O, 1);
      for (O = I(O, 2), A = I(A, 2); !S(O); ) {
        var k = N.add(O);
        0 >= k.l(R) && (D = D.add(A), N = k), O = I(O, 1), A = I(A, 1);
      }
      return T = v(R, D.j(T)), new p(D, T);
    }
    for (D = f; 0 <= R.l(T); ) {
      for (A = Math.max(1, Math.floor(R.m() / T.m())), O = Math.ceil(Math.log(A) / Math.LN2), O = 48 >= O ? 1 : Math.pow(2, O - 48), N = l(A), k = N.j(T); C(k) || 0 < k.l(R); ) A -= O, N = l(A), k = N.j(T);
      S(N) && (N = y), D = D.add(N), R = v(R, k);
    }
    return new p(D, R);
  }
  t.A = function(R) {
    return g(this, R).h;
  }, t.and = function(R) {
    for (var T = Math.max(this.g.length, R.g.length), A = [], O = 0; O < T; O++) A[O] = this.i(O) & R.i(O);
    return new o(A, this.h & R.h);
  }, t.or = function(R) {
    for (var T = Math.max(this.g.length, R.g.length), A = [], O = 0; O < T; O++) A[O] = this.i(O) | R.i(O);
    return new o(A, this.h | R.h);
  }, t.xor = function(R) {
    for (var T = Math.max(this.g.length, R.g.length), A = [], O = 0; O < T; O++) A[O] = this.i(O) ^ R.i(O);
    return new o(A, this.h ^ R.h);
  };
  function w(R) {
    for (var T = R.g.length + 1, A = [], O = 0; O < T; O++) A[O] = R.i(O) << 1 | R.i(O - 1) >>> 31;
    return new o(A, R.h);
  }
  function I(R, T) {
    var A = T >> 5;
    T %= 32;
    for (var O = R.g.length - A, D = [], N = 0; N < O; N++) D[N] = 0 < T ? R.i(N + A) >>> T | R.i(N + A + 1) << 32 - T : R.i(N + A);
    return new o(D, R.h);
  }
  r.prototype.digest = r.prototype.v, r.prototype.reset = r.prototype.s, r.prototype.update = r.prototype.u, cv = r, o.prototype.add = o.prototype.add, o.prototype.multiply = o.prototype.j, o.prototype.modulo = o.prototype.A, o.prototype.compare = o.prototype.l, o.prototype.toNumber = o.prototype.m, o.prototype.toString = o.prototype.toString, o.prototype.getBits = o.prototype.i, o.fromNumber = l, o.fromString = h, Er = o;
}).apply(typeof Pp < "u" ? Pp : typeof self < "u" ? self : typeof window < "u" ? window : {});
var Eo = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof globalThis < "u" ? globalThis : typeof self < "u" ? self : {};
/** @license
Copyright The Closure Library Authors.
SPDX-License-Identifier: Apache-2.0
*/
var uv, lv, es, fv, Mo, qu, hv, dv, pv;
(function() {
  var t, e = typeof Object.defineProperties == "function" ? Object.defineProperty : function(c, d, _) {
    return c == Array.prototype || c == Object.prototype || (c[d] = _.value), c;
  };
  function n(c) {
    c = [typeof globalThis == "object" && globalThis, c, typeof window == "object" && window, typeof self == "object" && self, typeof Eo == "object" && Eo];
    for (var d = 0; d < c.length; ++d) {
      var _ = c[d];
      if (_ && _.Math == Math) return _;
    }
    throw Error("Cannot find global object");
  }
  var r = n(this);
  function i(c, d) {
    if (d) e: {
      var _ = r;
      c = c.split(".");
      for (var P = 0; P < c.length - 1; P++) {
        var M = c[P];
        if (!(M in _)) break e;
        _ = _[M];
      }
      c = c[c.length - 1], P = _[c], d = d(P), d != P && d != null && e(_, c, { configurable: !0, writable: !0, value: d });
    }
  }
  function s(c, d) {
    c instanceof String && (c += "");
    var _ = 0, P = !1, M = { next: function() {
      if (!P && _ < c.length) {
        var F = _++;
        return { value: d(F, c[F]), done: !1 };
      }
      return P = !0, { done: !0, value: void 0 };
    } };
    return M[Symbol.iterator] = function() {
      return M;
    }, M;
  }
  i("Array.prototype.values", function(c) {
    return c || function() {
      return s(this, function(d, _) {
        return _;
      });
    };
  });
  /** @license
  
   Copyright The Closure Library Authors.
   SPDX-License-Identifier: Apache-2.0
  */
  var o = o || {}, a = this || self;
  function u(c) {
    var d = typeof c;
    return d = d != "object" ? d : c ? Array.isArray(c) ? "array" : d : "null", d == "array" || d == "object" && typeof c.length == "number";
  }
  function l(c) {
    var d = typeof c;
    return d == "object" && c != null || d == "function";
  }
  function h(c, d, _) {
    return c.call.apply(c.bind, arguments);
  }
  function f(c, d, _) {
    if (!c) throw Error();
    if (2 < arguments.length) {
      var P = Array.prototype.slice.call(arguments, 2);
      return function() {
        var M = Array.prototype.slice.call(arguments);
        return Array.prototype.unshift.apply(M, P), c.apply(d, M);
      };
    }
    return function() {
      return c.apply(d, arguments);
    };
  }
  function y(c, d, _) {
    return y = Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1 ? h : f, y.apply(null, arguments);
  }
  function b(c, d) {
    var _ = Array.prototype.slice.call(arguments, 1);
    return function() {
      var P = _.slice();
      return P.push.apply(P, arguments), c.apply(this, P);
    };
  }
  function S(c, d) {
    function _() {
    }
    _.prototype = d.prototype, c.aa = d.prototype, c.prototype = new _(), c.prototype.constructor = c, c.Qb = function(P, M, F) {
      for (var W = Array(arguments.length - 2), Oe = 2; Oe < arguments.length; Oe++) W[Oe - 2] = arguments[Oe];
      return d.prototype[M].apply(P, W);
    };
  }
  function C(c) {
    const d = c.length;
    if (0 < d) {
      const _ = Array(d);
      for (let P = 0; P < d; P++) _[P] = c[P];
      return _;
    }
    return [];
  }
  function m(c, d) {
    for (let _ = 1; _ < arguments.length; _++) {
      const P = arguments[_];
      if (u(P)) {
        const M = c.length || 0, F = P.length || 0;
        c.length = M + F;
        for (let W = 0; W < F; W++) c[M + W] = P[W];
      } else c.push(P);
    }
  }
  class v {
    constructor(d, _) {
      this.i = d, this.j = _, this.h = 0, this.g = null;
    }
    get() {
      let d;
      return 0 < this.h ? (this.h--, d = this.g, this.g = d.next, d.next = null) : d = this.i(), d;
    }
  }
  function E(c) {
    return /^[\s\xa0]*$/.test(c);
  }
  function p() {
    var c = a.navigator;
    return c && (c = c.userAgent) ? c : "";
  }
  function g(c) {
    return g[" "](c), c;
  }
  g[" "] = function() {
  };
  var w = p().indexOf("Gecko") != -1 && !(p().toLowerCase().indexOf("webkit") != -1 && p().indexOf("Edge") == -1) && !(p().indexOf("Trident") != -1 || p().indexOf("MSIE") != -1) && p().indexOf("Edge") == -1;
  function I(c, d, _) {
    for (const P in c) d.call(_, c[P], P, c);
  }
  function R(c, d) {
    for (const _ in c) d.call(void 0, c[_], _, c);
  }
  function T(c) {
    const d = {};
    for (const _ in c) d[_] = c[_];
    return d;
  }
  const A = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
  function O(c, d) {
    let _, P;
    for (let M = 1; M < arguments.length; M++) {
      P = arguments[M];
      for (_ in P) c[_] = P[_];
      for (let F = 0; F < A.length; F++) _ = A[F], Object.prototype.hasOwnProperty.call(P, _) && (c[_] = P[_]);
    }
  }
  function D(c) {
    var d = 1;
    c = c.split(":");
    const _ = [];
    for (; 0 < d && c.length; ) _.push(c.shift()), d--;
    return c.length && _.push(c.join(":")), _;
  }
  function N(c) {
    a.setTimeout(() => {
      throw c;
    }, 0);
  }
  function k() {
    var c = L;
    let d = null;
    return c.g && (d = c.g, c.g = c.g.next, c.g || (c.h = null), d.next = null), d;
  }
  class Y {
    constructor() {
      this.h = this.g = null;
    }
    add(d, _) {
      const P = oe.get();
      P.set(d, _), this.h ? this.h.next = P : this.g = P, this.h = P;
    }
  }
  var oe = new v(() => new ue(), (c) => c.reset());
  class ue {
    constructor() {
      this.next = this.g = this.h = null;
    }
    set(d, _) {
      this.h = d, this.g = _, this.next = null;
    }
    reset() {
      this.next = this.g = this.h = null;
    }
  }
  let ae, x = !1, L = new Y(), $ = () => {
    const c = a.Promise.resolve(void 0);
    ae = () => {
      c.then(U);
    };
  };
  var U = () => {
    for (var c; c = k(); ) {
      try {
        c.h.call(c.g);
      } catch (_) {
        N(_);
      }
      var d = oe;
      d.j(c), 100 > d.h && (d.h++, c.next = d.g, d.g = c);
    }
    x = !1;
  };
  function B() {
    this.s = this.s, this.C = this.C;
  }
  B.prototype.s = !1, B.prototype.ma = function() {
    this.s || (this.s = !0, this.N());
  }, B.prototype.N = function() {
    if (this.C) for (; this.C.length; ) this.C.shift()();
  };
  function H(c, d) {
    this.type = c, this.g = this.target = d, this.defaultPrevented = !1;
  }
  H.prototype.h = function() {
    this.defaultPrevented = !0;
  };
  var ie = function() {
    if (!a.addEventListener || !Object.defineProperty) return !1;
    var c = !1, d = Object.defineProperty({}, "passive", { get: function() {
      c = !0;
    } });
    try {
      const _ = () => {
      };
      a.addEventListener("test", _, d), a.removeEventListener("test", _, d);
    } catch {
    }
    return c;
  }();
  function K(c, d) {
    if (H.call(this, c ? c.type : ""), this.relatedTarget = this.g = this.target = null, this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0, this.key = "", this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1, this.state = null, this.pointerId = 0, this.pointerType = "", this.i = null, c) {
      var _ = this.type = c.type, P = c.changedTouches && c.changedTouches.length ? c.changedTouches[0] : null;
      if (this.target = c.target || c.srcElement, this.g = d, d = c.relatedTarget) {
        if (w) {
          e: {
            try {
              g(d.nodeName);
              var M = !0;
              break e;
            } catch {
            }
            M = !1;
          }
          M || (d = null);
        }
      } else _ == "mouseover" ? d = c.fromElement : _ == "mouseout" && (d = c.toElement);
      this.relatedTarget = d, P ? (this.clientX = P.clientX !== void 0 ? P.clientX : P.pageX, this.clientY = P.clientY !== void 0 ? P.clientY : P.pageY, this.screenX = P.screenX || 0, this.screenY = P.screenY || 0) : (this.clientX = c.clientX !== void 0 ? c.clientX : c.pageX, this.clientY = c.clientY !== void 0 ? c.clientY : c.pageY, this.screenX = c.screenX || 0, this.screenY = c.screenY || 0), this.button = c.button, this.key = c.key || "", this.ctrlKey = c.ctrlKey, this.altKey = c.altKey, this.shiftKey = c.shiftKey, this.metaKey = c.metaKey, this.pointerId = c.pointerId || 0, this.pointerType = typeof c.pointerType == "string" ? c.pointerType : V[c.pointerType] || "", this.state = c.state, this.i = c, c.defaultPrevented && K.aa.h.call(this);
    }
  }
  S(K, H);
  var V = { 2: "touch", 3: "pen", 4: "mouse" };
  K.prototype.h = function() {
    K.aa.h.call(this);
    var c = this.i;
    c.preventDefault ? c.preventDefault() : c.returnValue = !1;
  };
  var j = "closure_listenable_" + (1e6 * Math.random() | 0), Q = 0;
  function X(c, d, _, P, M) {
    this.listener = c, this.proxy = null, this.src = d, this.type = _, this.capture = !!P, this.ha = M, this.key = ++Q, this.da = this.fa = !1;
  }
  function ee(c) {
    c.da = !0, c.listener = null, c.proxy = null, c.src = null, c.ha = null;
  }
  function ge(c) {
    this.src = c, this.g = {}, this.h = 0;
  }
  ge.prototype.add = function(c, d, _, P, M) {
    var F = c.toString();
    c = this.g[F], c || (c = this.g[F] = [], this.h++);
    var W = Te(c, d, P, M);
    return -1 < W ? (d = c[W], _ || (d.fa = !1)) : (d = new X(d, this.src, F, !!P, M), d.fa = _, c.push(d)), d;
  };
  function G(c, d) {
    var _ = d.type;
    if (_ in c.g) {
      var P = c.g[_], M = Array.prototype.indexOf.call(P, d, void 0), F;
      (F = 0 <= M) && Array.prototype.splice.call(P, M, 1), F && (ee(d), c.g[_].length == 0 && (delete c.g[_], c.h--));
    }
  }
  function Te(c, d, _, P) {
    for (var M = 0; M < c.length; ++M) {
      var F = c[M];
      if (!F.da && F.listener == d && F.capture == !!_ && F.ha == P) return M;
    }
    return -1;
  }
  var J = "closure_lm_" + (1e6 * Math.random() | 0), Be = {};
  function me(c, d, _, P, M) {
    if (Array.isArray(d)) {
      for (var F = 0; F < d.length; F++) me(c, d[F], _, P, M);
      return null;
    }
    return _ = Nf(_), c && c[j] ? c.K(d, _, l(P) ? !!P.capture : !!P, M) : ye(c, d, _, !1, P, M);
  }
  function ye(c, d, _, P, M, F) {
    if (!d) throw Error("Invalid event type");
    var W = l(M) ? !!M.capture : !!M, Oe = vn(c);
    if (Oe || (c[J] = Oe = new ge(c)), _ = Oe.add(d, _, P, W, F), _.proxy) return _;
    if (P = Ie(), _.proxy = P, P.src = c, P.listener = _, c.addEventListener) ie || (M = W), M === void 0 && (M = !1), c.addEventListener(d.toString(), P, M);
    else if (c.attachEvent) c.attachEvent(qe(d.toString()), P);
    else if (c.addListener && c.removeListener) c.addListener(P);
    else throw Error("addEventListener and attachEvent are unavailable.");
    return _;
  }
  function Ie() {
    function c(_) {
      return d.call(c.src, c.listener, _);
    }
    const d = Oi;
    return c;
  }
  function Rt(c, d, _, P, M) {
    if (Array.isArray(d)) for (var F = 0; F < d.length; F++) Rt(c, d[F], _, P, M);
    else P = l(P) ? !!P.capture : !!P, _ = Nf(_), c && c[j] ? (c = c.i, d = String(d).toString(), d in c.g && (F = c.g[d], _ = Te(F, _, P, M), -1 < _ && (ee(F[_]), Array.prototype.splice.call(F, _, 1), F.length == 0 && (delete c.g[d], c.h--)))) : c && (c = vn(c)) && (d = c.g[d.toString()], c = -1, d && (c = Te(d, _, P, M)), (_ = -1 < c ? d[c] : null) && ht(_));
  }
  function ht(c) {
    if (typeof c != "number" && c && !c.da) {
      var d = c.src;
      if (d && d[j]) G(d.i, c);
      else {
        var _ = c.type, P = c.proxy;
        d.removeEventListener ? d.removeEventListener(_, P, c.capture) : d.detachEvent ? d.detachEvent(qe(_), P) : d.addListener && d.removeListener && d.removeListener(P), (_ = vn(d)) ? (G(_, c), _.h == 0 && (_.src = null, d[J] = null)) : ee(c);
      }
    }
  }
  function qe(c) {
    return c in Be ? Be[c] : Be[c] = "on" + c;
  }
  function Oi(c, d) {
    if (c.da) c = !0;
    else {
      d = new K(d, this);
      var _ = c.listener, P = c.ha || c.src;
      c.fa && ht(c), c = _.call(P, d);
    }
    return c;
  }
  function vn(c) {
    return c = c[J], c instanceof ge ? c : null;
  }
  var tc = "__closure_events_fn_" + (1e9 * Math.random() >>> 0);
  function Nf(c) {
    return typeof c == "function" ? c : (c[tc] || (c[tc] = function(d) {
      return c.handleEvent(d);
    }), c[tc]);
  }
  function dt() {
    B.call(this), this.i = new ge(this), this.M = this, this.F = null;
  }
  S(dt, B), dt.prototype[j] = !0, dt.prototype.removeEventListener = function(c, d, _, P) {
    Rt(this, c, d, _, P);
  };
  function bt(c, d) {
    var _, P = c.F;
    if (P) for (_ = []; P; P = P.F) _.push(P);
    if (c = c.M, P = d.type || d, typeof d == "string") d = new H(d, c);
    else if (d instanceof H) d.target = d.target || c;
    else {
      var M = d;
      d = new H(P, c), O(d, M);
    }
    if (M = !0, _) for (var F = _.length - 1; 0 <= F; F--) {
      var W = d.g = _[F];
      M = Gs(W, P, !0, d) && M;
    }
    if (W = d.g = c, M = Gs(W, P, !0, d) && M, M = Gs(W, P, !1, d) && M, _) for (F = 0; F < _.length; F++) W = d.g = _[F], M = Gs(W, P, !1, d) && M;
  }
  dt.prototype.N = function() {
    if (dt.aa.N.call(this), this.i) {
      var c = this.i, d;
      for (d in c.g) {
        for (var _ = c.g[d], P = 0; P < _.length; P++) ee(_[P]);
        delete c.g[d], c.h--;
      }
    }
    this.F = null;
  }, dt.prototype.K = function(c, d, _, P) {
    return this.i.add(String(c), d, !1, _, P);
  }, dt.prototype.L = function(c, d, _, P) {
    return this.i.add(String(c), d, !0, _, P);
  };
  function Gs(c, d, _, P) {
    if (d = c.i.g[String(d)], !d) return !0;
    d = d.concat();
    for (var M = !0, F = 0; F < d.length; ++F) {
      var W = d[F];
      if (W && !W.da && W.capture == _) {
        var Oe = W.listener, rt = W.ha || W.src;
        W.fa && G(c.i, W), M = Oe.call(rt, P) !== !1 && M;
      }
    }
    return M && !P.defaultPrevented;
  }
  function xf(c, d, _) {
    if (typeof c == "function") _ && (c = y(c, _));
    else if (c && typeof c.handleEvent == "function") c = y(c.handleEvent, c);
    else throw Error("Invalid listener argument");
    return 2147483647 < Number(d) ? -1 : a.setTimeout(c, d || 0);
  }
  function Lf(c) {
    c.g = xf(() => {
      c.g = null, c.i && (c.i = !1, Lf(c));
    }, c.l);
    const d = c.h;
    c.h = null, c.m.apply(null, d);
  }
  class bw extends B {
    constructor(d, _) {
      super(), this.m = d, this.l = _, this.h = null, this.i = !1, this.g = null;
    }
    j(d) {
      this.h = arguments, this.g ? this.i = !0 : Lf(this);
    }
    N() {
      super.N(), this.g && (a.clearTimeout(this.g), this.g = null, this.i = !1, this.h = null);
    }
  }
  function Di(c) {
    B.call(this), this.h = c, this.g = {};
  }
  S(Di, B);
  var Mf = [];
  function Vf(c) {
    I(c.g, function(d, _) {
      this.g.hasOwnProperty(_) && ht(d);
    }, c), c.g = {};
  }
  Di.prototype.N = function() {
    Di.aa.N.call(this), Vf(this);
  }, Di.prototype.handleEvent = function() {
    throw Error("EventHandler.handleEvent not implemented");
  };
  var nc = a.JSON.stringify, Tw = a.JSON.parse, Iw = class {
    stringify(c) {
      return a.JSON.stringify(c, void 0);
    }
    parse(c) {
      return a.JSON.parse(c, void 0);
    }
  };
  function rc() {
  }
  rc.prototype.h = null;
  function Ff(c) {
    return c.h || (c.h = c.i());
  }
  function Uf() {
  }
  var Ni = { OPEN: "a", kb: "b", Ja: "c", wb: "d" };
  function ic() {
    H.call(this, "d");
  }
  S(ic, H);
  function sc() {
    H.call(this, "c");
  }
  S(sc, H);
  var rr = {}, jf = null;
  function Ws() {
    return jf = jf || new dt();
  }
  rr.La = "serverreachability";
  function $f(c) {
    H.call(this, rr.La, c);
  }
  S($f, H);
  function xi(c) {
    const d = Ws();
    bt(d, new $f(d));
  }
  rr.STAT_EVENT = "statevent";
  function Bf(c, d) {
    H.call(this, rr.STAT_EVENT, c), this.stat = d;
  }
  S(Bf, H);
  function Tt(c) {
    const d = Ws();
    bt(d, new Bf(d, c));
  }
  rr.Ma = "timingevent";
  function qf(c, d) {
    H.call(this, rr.Ma, c), this.size = d;
  }
  S(qf, H);
  function Li(c, d) {
    if (typeof c != "function") throw Error("Fn must not be null and must be a function");
    return a.setTimeout(function() {
      c();
    }, d);
  }
  function Mi() {
    this.g = !0;
  }
  Mi.prototype.xa = function() {
    this.g = !1;
  };
  function Sw(c, d, _, P, M, F) {
    c.info(function() {
      if (c.g) if (F)
        for (var W = "", Oe = F.split("&"), rt = 0; rt < Oe.length; rt++) {
          var Ee = Oe[rt].split("=");
          if (1 < Ee.length) {
            var pt = Ee[0];
            Ee = Ee[1];
            var mt = pt.split("_");
            W = 2 <= mt.length && mt[1] == "type" ? W + (pt + "=" + Ee + "&") : W + (pt + "=redacted&");
          }
        }
      else W = null;
      else W = F;
      return "XMLHTTP REQ (" + P + ") [attempt " + M + "]: " + d + `
` + _ + `
` + W;
    });
  }
  function Aw(c, d, _, P, M, F, W) {
    c.info(function() {
      return "XMLHTTP RESP (" + P + ") [ attempt " + M + "]: " + d + `
` + _ + `
` + F + " " + W;
    });
  }
  function qr(c, d, _, P) {
    c.info(function() {
      return "XMLHTTP TEXT (" + d + "): " + Cw(c, _) + (P ? " " + P : "");
    });
  }
  function Rw(c, d) {
    c.info(function() {
      return "TIMEOUT: " + d;
    });
  }
  Mi.prototype.info = function() {
  };
  function Cw(c, d) {
    if (!c.g) return d;
    if (!d) return null;
    try {
      var _ = JSON.parse(d);
      if (_) {
        for (c = 0; c < _.length; c++) if (Array.isArray(_[c])) {
          var P = _[c];
          if (!(2 > P.length)) {
            var M = P[1];
            if (Array.isArray(M) && !(1 > M.length)) {
              var F = M[0];
              if (F != "noop" && F != "stop" && F != "close") for (var W = 1; W < M.length; W++) M[W] = "";
            }
          }
        }
      }
      return nc(_);
    } catch {
      return d;
    }
  }
  var Qs = { NO_ERROR: 0, gb: 1, tb: 2, sb: 3, nb: 4, rb: 5, ub: 6, Ia: 7, TIMEOUT: 8, xb: 9 }, zf = { lb: "complete", Hb: "success", Ja: "error", Ia: "abort", zb: "ready", Ab: "readystatechange", TIMEOUT: "timeout", vb: "incrementaldata", yb: "progress", ob: "downloadprogress", Pb: "uploadprogress" }, oc;
  function Ys() {
  }
  S(Ys, rc), Ys.prototype.g = function() {
    return new XMLHttpRequest();
  }, Ys.prototype.i = function() {
    return {};
  }, oc = new Ys();
  function xn(c, d, _, P) {
    this.j = c, this.i = d, this.l = _, this.R = P || 1, this.U = new Di(this), this.I = 45e3, this.H = null, this.o = !1, this.m = this.A = this.v = this.L = this.F = this.S = this.B = null, this.D = [], this.g = null, this.C = 0, this.s = this.u = null, this.X = -1, this.J = !1, this.O = 0, this.M = null, this.W = this.K = this.T = this.P = !1, this.h = new Kf();
  }
  function Kf() {
    this.i = null, this.g = "", this.h = !1;
  }
  var Hf = {}, ac = {};
  function cc(c, d, _) {
    c.L = 1, c.v = eo(_n(d)), c.m = _, c.P = !0, Gf(c, null);
  }
  function Gf(c, d) {
    c.F = Date.now(), Js(c), c.A = _n(c.v);
    var _ = c.A, P = c.R;
    Array.isArray(P) || (P = [String(P)]), ah(_.i, "t", P), c.C = 0, _ = c.j.J, c.h = new Kf(), c.g = Sh(c.j, _ ? d : null, !c.m), 0 < c.O && (c.M = new bw(y(c.Y, c, c.g), c.O)), d = c.U, _ = c.g, P = c.ca;
    var M = "readystatechange";
    Array.isArray(M) || (M && (Mf[0] = M.toString()), M = Mf);
    for (var F = 0; F < M.length; F++) {
      var W = me(_, M[F], P || d.handleEvent, !1, d.h || d);
      if (!W) break;
      d.g[W.key] = W;
    }
    d = c.H ? T(c.H) : {}, c.m ? (c.u || (c.u = "POST"), d["Content-Type"] = "application/x-www-form-urlencoded", c.g.ea(
      c.A,
      c.u,
      c.m,
      d
    )) : (c.u = "GET", c.g.ea(c.A, c.u, null, d)), xi(), Sw(c.i, c.u, c.A, c.l, c.R, c.m);
  }
  xn.prototype.ca = function(c) {
    c = c.target;
    const d = this.M;
    d && wn(c) == 3 ? d.j() : this.Y(c);
  }, xn.prototype.Y = function(c) {
    try {
      if (c == this.g) e: {
        const mt = wn(this.g);
        var d = this.g.Ba();
        const Hr = this.g.Z();
        if (!(3 > mt) && (mt != 3 || this.g && (this.h.h || this.g.oa() || ph(this.g)))) {
          this.J || mt != 4 || d == 7 || (d == 8 || 0 >= Hr ? xi(3) : xi(2)), uc(this);
          var _ = this.g.Z();
          this.X = _;
          t: if (Wf(this)) {
            var P = ph(this.g);
            c = "";
            var M = P.length, F = wn(this.g) == 4;
            if (!this.h.i) {
              if (typeof TextDecoder > "u") {
                ir(this), Vi(this);
                var W = "";
                break t;
              }
              this.h.i = new a.TextDecoder();
            }
            for (d = 0; d < M; d++) this.h.h = !0, c += this.h.i.decode(P[d], { stream: !(F && d == M - 1) });
            P.length = 0, this.h.g += c, this.C = 0, W = this.h.g;
          } else W = this.g.oa();
          if (this.o = _ == 200, Aw(this.i, this.u, this.A, this.l, this.R, mt, _), this.o) {
            if (this.T && !this.K) {
              t: {
                if (this.g) {
                  var Oe, rt = this.g;
                  if ((Oe = rt.g ? rt.g.getResponseHeader("X-HTTP-Initial-Response") : null) && !E(Oe)) {
                    var Ee = Oe;
                    break t;
                  }
                }
                Ee = null;
              }
              if (_ = Ee) qr(this.i, this.l, _, "Initial handshake response via X-HTTP-Initial-Response"), this.K = !0, lc(this, _);
              else {
                this.o = !1, this.s = 3, Tt(12), ir(this), Vi(this);
                break e;
              }
            }
            if (this.P) {
              _ = !0;
              let Wt;
              for (; !this.J && this.C < W.length; ) if (Wt = Pw(this, W), Wt == ac) {
                mt == 4 && (this.s = 4, Tt(14), _ = !1), qr(this.i, this.l, null, "[Incomplete Response]");
                break;
              } else if (Wt == Hf) {
                this.s = 4, Tt(15), qr(this.i, this.l, W, "[Invalid Chunk]"), _ = !1;
                break;
              } else qr(this.i, this.l, Wt, null), lc(this, Wt);
              if (Wf(this) && this.C != 0 && (this.h.g = this.h.g.slice(this.C), this.C = 0), mt != 4 || W.length != 0 || this.h.h || (this.s = 1, Tt(16), _ = !1), this.o = this.o && _, !_) qr(this.i, this.l, W, "[Invalid Chunked Response]"), ir(this), Vi(this);
              else if (0 < W.length && !this.W) {
                this.W = !0;
                var pt = this.j;
                pt.g == this && pt.ba && !pt.M && (pt.j.info("Great, no buffering proxy detected. Bytes received: " + W.length), gc(pt), pt.M = !0, Tt(11));
              }
            } else qr(this.i, this.l, W, null), lc(this, W);
            mt == 4 && ir(this), this.o && !this.J && (mt == 4 ? Eh(this.j, this) : (this.o = !1, Js(this)));
          } else Hw(this.g), _ == 400 && 0 < W.indexOf("Unknown SID") ? (this.s = 3, Tt(12)) : (this.s = 0, Tt(13)), ir(this), Vi(this);
        }
      }
    } catch {
    } finally {
    }
  };
  function Wf(c) {
    return c.g ? c.u == "GET" && c.L != 2 && c.j.Ca : !1;
  }
  function Pw(c, d) {
    var _ = c.C, P = d.indexOf(`
`, _);
    return P == -1 ? ac : (_ = Number(d.substring(_, P)), isNaN(_) ? Hf : (P += 1, P + _ > d.length ? ac : (d = d.slice(P, P + _), c.C = P + _, d)));
  }
  xn.prototype.cancel = function() {
    this.J = !0, ir(this);
  };
  function Js(c) {
    c.S = Date.now() + c.I, Qf(c, c.I);
  }
  function Qf(c, d) {
    if (c.B != null) throw Error("WatchDog timer not null");
    c.B = Li(y(c.ba, c), d);
  }
  function uc(c) {
    c.B && (a.clearTimeout(c.B), c.B = null);
  }
  xn.prototype.ba = function() {
    this.B = null;
    const c = Date.now();
    0 <= c - this.S ? (Rw(this.i, this.A), this.L != 2 && (xi(), Tt(17)), ir(this), this.s = 2, Vi(this)) : Qf(this, this.S - c);
  };
  function Vi(c) {
    c.j.G == 0 || c.J || Eh(c.j, c);
  }
  function ir(c) {
    uc(c);
    var d = c.M;
    d && typeof d.ma == "function" && d.ma(), c.M = null, Vf(c.U), c.g && (d = c.g, c.g = null, d.abort(), d.ma());
  }
  function lc(c, d) {
    try {
      var _ = c.j;
      if (_.G != 0 && (_.g == c || fc(_.h, c))) {
        if (!c.K && fc(_.h, c) && _.G == 3) {
          try {
            var P = _.Da.g.parse(d);
          } catch {
            P = null;
          }
          if (Array.isArray(P) && P.length == 3) {
            var M = P;
            if (M[0] == 0) {
              e:
                if (!_.u) {
                  if (_.g) if (_.g.F + 3e3 < c.F) so(_), ro(_);
                  else break e;
                  mc(_), Tt(18);
                }
            } else _.za = M[1], 0 < _.za - _.T && 37500 > M[2] && _.F && _.v == 0 && !_.C && (_.C = Li(y(_.Za, _), 6e3));
            if (1 >= Xf(_.h) && _.ca) {
              try {
                _.ca();
              } catch {
              }
              _.ca = void 0;
            }
          } else or(_, 11);
        } else if ((c.K || _.g == c) && so(_), !E(d)) for (M = _.Da.g.parse(d), d = 0; d < M.length; d++) {
          let Ee = M[d];
          if (_.T = Ee[0], Ee = Ee[1], _.G == 2) if (Ee[0] == "c") {
            _.K = Ee[1], _.ia = Ee[2];
            const pt = Ee[3];
            pt != null && (_.la = pt, _.j.info("VER=" + _.la));
            const mt = Ee[4];
            mt != null && (_.Aa = mt, _.j.info("SVER=" + _.Aa));
            const Hr = Ee[5];
            Hr != null && typeof Hr == "number" && 0 < Hr && (P = 1.5 * Hr, _.L = P, _.j.info("backChannelRequestTimeoutMs_=" + P)), P = _;
            const Wt = c.g;
            if (Wt) {
              const ao = Wt.g ? Wt.g.getResponseHeader("X-Client-Wire-Protocol") : null;
              if (ao) {
                var F = P.h;
                F.g || ao.indexOf("spdy") == -1 && ao.indexOf("quic") == -1 && ao.indexOf("h2") == -1 || (F.j = F.l, F.g = /* @__PURE__ */ new Set(), F.h && (hc(F, F.h), F.h = null));
              }
              if (P.D) {
                const yc = Wt.g ? Wt.g.getResponseHeader("X-HTTP-Session-Id") : null;
                yc && (P.ya = yc, Ne(P.I, P.D, yc));
              }
            }
            _.G = 3, _.l && _.l.ua(), _.ba && (_.R = Date.now() - c.F, _.j.info("Handshake RTT: " + _.R + "ms")), P = _;
            var W = c;
            if (P.qa = Ih(P, P.J ? P.ia : null, P.W), W.K) {
              Zf(P.h, W);
              var Oe = W, rt = P.L;
              rt && (Oe.I = rt), Oe.B && (uc(Oe), Js(Oe)), P.g = W;
            } else _h(P);
            0 < _.i.length && io(_);
          } else Ee[0] != "stop" && Ee[0] != "close" || or(_, 7);
          else _.G == 3 && (Ee[0] == "stop" || Ee[0] == "close" ? Ee[0] == "stop" ? or(_, 7) : pc(_) : Ee[0] != "noop" && _.l && _.l.ta(Ee), _.v = 0);
        }
      }
      xi(4);
    } catch {
    }
  }
  var kw = class {
    constructor(c, d) {
      this.g = c, this.map = d;
    }
  };
  function Yf(c) {
    this.l = c || 10, a.PerformanceNavigationTiming ? (c = a.performance.getEntriesByType("navigation"), c = 0 < c.length && (c[0].nextHopProtocol == "hq" || c[0].nextHopProtocol == "h2")) : c = !!(a.chrome && a.chrome.loadTimes && a.chrome.loadTimes() && a.chrome.loadTimes().wasFetchedViaSpdy), this.j = c ? this.l : 1, this.g = null, 1 < this.j && (this.g = /* @__PURE__ */ new Set()), this.h = null, this.i = [];
  }
  function Jf(c) {
    return c.h ? !0 : c.g ? c.g.size >= c.j : !1;
  }
  function Xf(c) {
    return c.h ? 1 : c.g ? c.g.size : 0;
  }
  function fc(c, d) {
    return c.h ? c.h == d : c.g ? c.g.has(d) : !1;
  }
  function hc(c, d) {
    c.g ? c.g.add(d) : c.h = d;
  }
  function Zf(c, d) {
    c.h && c.h == d ? c.h = null : c.g && c.g.has(d) && c.g.delete(d);
  }
  Yf.prototype.cancel = function() {
    if (this.i = eh(this), this.h) this.h.cancel(), this.h = null;
    else if (this.g && this.g.size !== 0) {
      for (const c of this.g.values()) c.cancel();
      this.g.clear();
    }
  };
  function eh(c) {
    if (c.h != null) return c.i.concat(c.h.D);
    if (c.g != null && c.g.size !== 0) {
      let d = c.i;
      for (const _ of c.g.values()) d = d.concat(_.D);
      return d;
    }
    return C(c.i);
  }
  function Ow(c) {
    if (c.V && typeof c.V == "function") return c.V();
    if (typeof Map < "u" && c instanceof Map || typeof Set < "u" && c instanceof Set) return Array.from(c.values());
    if (typeof c == "string") return c.split("");
    if (u(c)) {
      for (var d = [], _ = c.length, P = 0; P < _; P++) d.push(c[P]);
      return d;
    }
    d = [], _ = 0;
    for (P in c) d[_++] = c[P];
    return d;
  }
  function Dw(c) {
    if (c.na && typeof c.na == "function") return c.na();
    if (!c.V || typeof c.V != "function") {
      if (typeof Map < "u" && c instanceof Map) return Array.from(c.keys());
      if (!(typeof Set < "u" && c instanceof Set)) {
        if (u(c) || typeof c == "string") {
          var d = [];
          c = c.length;
          for (var _ = 0; _ < c; _++) d.push(_);
          return d;
        }
        d = [], _ = 0;
        for (const P in c) d[_++] = P;
        return d;
      }
    }
  }
  function th(c, d) {
    if (c.forEach && typeof c.forEach == "function") c.forEach(d, void 0);
    else if (u(c) || typeof c == "string") Array.prototype.forEach.call(c, d, void 0);
    else for (var _ = Dw(c), P = Ow(c), M = P.length, F = 0; F < M; F++) d.call(void 0, P[F], _ && _[F], c);
  }
  var nh = RegExp("^(?:([^:/?#.]+):)?(?://(?:([^\\\\/?#]*)@)?([^\\\\/?#]*?)(?::([0-9]+))?(?=[\\\\/?#]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#([\\s\\S]*))?$");
  function Nw(c, d) {
    if (c) {
      c = c.split("&");
      for (var _ = 0; _ < c.length; _++) {
        var P = c[_].indexOf("="), M = null;
        if (0 <= P) {
          var F = c[_].substring(0, P);
          M = c[_].substring(P + 1);
        } else F = c[_];
        d(F, M ? decodeURIComponent(M.replace(/\+/g, " ")) : "");
      }
    }
  }
  function sr(c) {
    if (this.g = this.o = this.j = "", this.s = null, this.m = this.l = "", this.h = !1, c instanceof sr) {
      this.h = c.h, Xs(this, c.j), this.o = c.o, this.g = c.g, Zs(this, c.s), this.l = c.l;
      var d = c.i, _ = new ji();
      _.i = d.i, d.g && (_.g = new Map(d.g), _.h = d.h), rh(this, _), this.m = c.m;
    } else c && (d = String(c).match(nh)) ? (this.h = !1, Xs(this, d[1] || "", !0), this.o = Fi(d[2] || ""), this.g = Fi(d[3] || "", !0), Zs(this, d[4]), this.l = Fi(d[5] || "", !0), rh(this, d[6] || "", !0), this.m = Fi(d[7] || "")) : (this.h = !1, this.i = new ji(null, this.h));
  }
  sr.prototype.toString = function() {
    var c = [], d = this.j;
    d && c.push(Ui(d, ih, !0), ":");
    var _ = this.g;
    return (_ || d == "file") && (c.push("//"), (d = this.o) && c.push(Ui(d, ih, !0), "@"), c.push(encodeURIComponent(String(_)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), _ = this.s, _ != null && c.push(":", String(_))), (_ = this.l) && (this.g && _.charAt(0) != "/" && c.push("/"), c.push(Ui(_, _.charAt(0) == "/" ? Mw : Lw, !0))), (_ = this.i.toString()) && c.push("?", _), (_ = this.m) && c.push("#", Ui(_, Fw)), c.join("");
  };
  function _n(c) {
    return new sr(c);
  }
  function Xs(c, d, _) {
    c.j = _ ? Fi(d, !0) : d, c.j && (c.j = c.j.replace(/:$/, ""));
  }
  function Zs(c, d) {
    if (d) {
      if (d = Number(d), isNaN(d) || 0 > d) throw Error("Bad port number " + d);
      c.s = d;
    } else c.s = null;
  }
  function rh(c, d, _) {
    d instanceof ji ? (c.i = d, Uw(c.i, c.h)) : (_ || (d = Ui(d, Vw)), c.i = new ji(d, c.h));
  }
  function Ne(c, d, _) {
    c.i.set(d, _);
  }
  function eo(c) {
    return Ne(c, "zx", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ Date.now()).toString(36)), c;
  }
  function Fi(c, d) {
    return c ? d ? decodeURI(c.replace(/%25/g, "%2525")) : decodeURIComponent(c) : "";
  }
  function Ui(c, d, _) {
    return typeof c == "string" ? (c = encodeURI(c).replace(d, xw), _ && (c = c.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c) : null;
  }
  function xw(c) {
    return c = c.charCodeAt(0), "%" + (c >> 4 & 15).toString(16) + (c & 15).toString(16);
  }
  var ih = /[#\/\?@]/g, Lw = /[#\?:]/g, Mw = /[#\?]/g, Vw = /[#\?@]/g, Fw = /#/g;
  function ji(c, d) {
    this.h = this.g = null, this.i = c || null, this.j = !!d;
  }
  function Ln(c) {
    c.g || (c.g = /* @__PURE__ */ new Map(), c.h = 0, c.i && Nw(c.i, function(d, _) {
      c.add(decodeURIComponent(d.replace(/\+/g, " ")), _);
    }));
  }
  t = ji.prototype, t.add = function(c, d) {
    Ln(this), this.i = null, c = zr(this, c);
    var _ = this.g.get(c);
    return _ || this.g.set(c, _ = []), _.push(d), this.h += 1, this;
  };
  function sh(c, d) {
    Ln(c), d = zr(c, d), c.g.has(d) && (c.i = null, c.h -= c.g.get(d).length, c.g.delete(d));
  }
  function oh(c, d) {
    return Ln(c), d = zr(c, d), c.g.has(d);
  }
  t.forEach = function(c, d) {
    Ln(this), this.g.forEach(function(_, P) {
      _.forEach(function(M) {
        c.call(d, M, P, this);
      }, this);
    }, this);
  }, t.na = function() {
    Ln(this);
    const c = Array.from(this.g.values()), d = Array.from(this.g.keys()), _ = [];
    for (let P = 0; P < d.length; P++) {
      const M = c[P];
      for (let F = 0; F < M.length; F++) _.push(d[P]);
    }
    return _;
  }, t.V = function(c) {
    Ln(this);
    let d = [];
    if (typeof c == "string") oh(this, c) && (d = d.concat(this.g.get(zr(this, c))));
    else {
      c = Array.from(this.g.values());
      for (let _ = 0; _ < c.length; _++) d = d.concat(c[_]);
    }
    return d;
  }, t.set = function(c, d) {
    return Ln(this), this.i = null, c = zr(this, c), oh(this, c) && (this.h -= this.g.get(c).length), this.g.set(c, [d]), this.h += 1, this;
  }, t.get = function(c, d) {
    return c ? (c = this.V(c), 0 < c.length ? String(c[0]) : d) : d;
  };
  function ah(c, d, _) {
    sh(c, d), 0 < _.length && (c.i = null, c.g.set(zr(c, d), C(_)), c.h += _.length);
  }
  t.toString = function() {
    if (this.i) return this.i;
    if (!this.g) return "";
    const c = [], d = Array.from(this.g.keys());
    for (var _ = 0; _ < d.length; _++) {
      var P = d[_];
      const F = encodeURIComponent(String(P)), W = this.V(P);
      for (P = 0; P < W.length; P++) {
        var M = F;
        W[P] !== "" && (M += "=" + encodeURIComponent(String(W[P]))), c.push(M);
      }
    }
    return this.i = c.join("&");
  };
  function zr(c, d) {
    return d = String(d), c.j && (d = d.toLowerCase()), d;
  }
  function Uw(c, d) {
    d && !c.j && (Ln(c), c.i = null, c.g.forEach(function(_, P) {
      var M = P.toLowerCase();
      P != M && (sh(this, P), ah(this, M, _));
    }, c)), c.j = d;
  }
  function jw(c, d) {
    const _ = new Mi();
    if (a.Image) {
      const P = new Image();
      P.onload = b(Mn, _, "TestLoadImage: loaded", !0, d, P), P.onerror = b(Mn, _, "TestLoadImage: error", !1, d, P), P.onabort = b(Mn, _, "TestLoadImage: abort", !1, d, P), P.ontimeout = b(Mn, _, "TestLoadImage: timeout", !1, d, P), a.setTimeout(function() {
        P.ontimeout && P.ontimeout();
      }, 1e4), P.src = c;
    } else d(!1);
  }
  function $w(c, d) {
    const _ = new Mi(), P = new AbortController(), M = setTimeout(() => {
      P.abort(), Mn(_, "TestPingServer: timeout", !1, d);
    }, 1e4);
    fetch(c, { signal: P.signal }).then((F) => {
      clearTimeout(M), F.ok ? Mn(_, "TestPingServer: ok", !0, d) : Mn(_, "TestPingServer: server error", !1, d);
    }).catch(() => {
      clearTimeout(M), Mn(_, "TestPingServer: error", !1, d);
    });
  }
  function Mn(c, d, _, P, M) {
    try {
      M && (M.onload = null, M.onerror = null, M.onabort = null, M.ontimeout = null), P(_);
    } catch {
    }
  }
  function Bw() {
    this.g = new Iw();
  }
  function qw(c, d, _) {
    const P = _ || "";
    try {
      th(c, function(M, F) {
        let W = M;
        l(M) && (W = nc(M)), d.push(P + F + "=" + encodeURIComponent(W));
      });
    } catch (M) {
      throw d.push(P + "type=" + encodeURIComponent("_badmap")), M;
    }
  }
  function $i(c) {
    this.l = c.Ub || null, this.j = c.eb || !1;
  }
  S($i, rc), $i.prototype.g = function() {
    return new to(this.l, this.j);
  }, $i.prototype.i = /* @__PURE__ */ function(c) {
    return function() {
      return c;
    };
  }({});
  function to(c, d) {
    dt.call(this), this.D = c, this.o = d, this.m = void 0, this.status = this.readyState = 0, this.responseType = this.responseText = this.response = this.statusText = "", this.onreadystatechange = null, this.u = new Headers(), this.h = null, this.B = "GET", this.A = "", this.g = !1, this.v = this.j = this.l = null;
  }
  S(to, dt), t = to.prototype, t.open = function(c, d) {
    if (this.readyState != 0) throw this.abort(), Error("Error reopening a connection");
    this.B = c, this.A = d, this.readyState = 1, qi(this);
  }, t.send = function(c) {
    if (this.readyState != 1) throw this.abort(), Error("need to call open() first. ");
    this.g = !0;
    const d = { headers: this.u, method: this.B, credentials: this.m, cache: void 0 };
    c && (d.body = c), (this.D || a).fetch(new Request(this.A, d)).then(this.Sa.bind(this), this.ga.bind(this));
  }, t.abort = function() {
    this.response = this.responseText = "", this.u = new Headers(), this.status = 0, this.j && this.j.cancel("Request was aborted.").catch(() => {
    }), 1 <= this.readyState && this.g && this.readyState != 4 && (this.g = !1, Bi(this)), this.readyState = 0;
  }, t.Sa = function(c) {
    if (this.g && (this.l = c, this.h || (this.status = this.l.status, this.statusText = this.l.statusText, this.h = c.headers, this.readyState = 2, qi(this)), this.g && (this.readyState = 3, qi(this), this.g))) if (this.responseType === "arraybuffer") c.arrayBuffer().then(this.Qa.bind(this), this.ga.bind(this));
    else if (typeof a.ReadableStream < "u" && "body" in c) {
      if (this.j = c.body.getReader(), this.o) {
        if (this.responseType) throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');
        this.response = [];
      } else this.response = this.responseText = "", this.v = new TextDecoder();
      ch(this);
    } else c.text().then(this.Ra.bind(this), this.ga.bind(this));
  };
  function ch(c) {
    c.j.read().then(c.Pa.bind(c)).catch(c.ga.bind(c));
  }
  t.Pa = function(c) {
    if (this.g) {
      if (this.o && c.value) this.response.push(c.value);
      else if (!this.o) {
        var d = c.value ? c.value : new Uint8Array(0);
        (d = this.v.decode(d, { stream: !c.done })) && (this.response = this.responseText += d);
      }
      c.done ? Bi(this) : qi(this), this.readyState == 3 && ch(this);
    }
  }, t.Ra = function(c) {
    this.g && (this.response = this.responseText = c, Bi(this));
  }, t.Qa = function(c) {
    this.g && (this.response = c, Bi(this));
  }, t.ga = function() {
    this.g && Bi(this);
  };
  function Bi(c) {
    c.readyState = 4, c.l = null, c.j = null, c.v = null, qi(c);
  }
  t.setRequestHeader = function(c, d) {
    this.u.append(c, d);
  }, t.getResponseHeader = function(c) {
    return this.h && this.h.get(c.toLowerCase()) || "";
  }, t.getAllResponseHeaders = function() {
    if (!this.h) return "";
    const c = [], d = this.h.entries();
    for (var _ = d.next(); !_.done; ) _ = _.value, c.push(_[0] + ": " + _[1]), _ = d.next();
    return c.join(`\r
`);
  };
  function qi(c) {
    c.onreadystatechange && c.onreadystatechange.call(c);
  }
  Object.defineProperty(to.prototype, "withCredentials", { get: function() {
    return this.m === "include";
  }, set: function(c) {
    this.m = c ? "include" : "same-origin";
  } });
  function uh(c) {
    let d = "";
    return I(c, function(_, P) {
      d += P, d += ":", d += _, d += `\r
`;
    }), d;
  }
  function dc(c, d, _) {
    e: {
      for (P in _) {
        var P = !1;
        break e;
      }
      P = !0;
    }
    P || (_ = uh(_), typeof c == "string" ? _ != null && encodeURIComponent(String(_)) : Ne(c, d, _));
  }
  function Ve(c) {
    dt.call(this), this.headers = /* @__PURE__ */ new Map(), this.o = c || null, this.h = !1, this.v = this.g = null, this.D = "", this.m = 0, this.l = "", this.j = this.B = this.u = this.A = !1, this.I = null, this.H = "", this.J = !1;
  }
  S(Ve, dt);
  var zw = /^https?$/i, Kw = ["POST", "PUT"];
  t = Ve.prototype, t.Ha = function(c) {
    this.J = c;
  }, t.ea = function(c, d, _, P) {
    if (this.g) throw Error("[goog.net.XhrIo] Object is active with another request=" + this.D + "; newUri=" + c);
    d = d ? d.toUpperCase() : "GET", this.D = c, this.l = "", this.m = 0, this.A = !1, this.h = !0, this.g = this.o ? this.o.g() : oc.g(), this.v = this.o ? Ff(this.o) : Ff(oc), this.g.onreadystatechange = y(this.Ea, this);
    try {
      this.B = !0, this.g.open(d, String(c), !0), this.B = !1;
    } catch (F) {
      lh(this, F);
      return;
    }
    if (c = _ || "", _ = new Map(this.headers), P) if (Object.getPrototypeOf(P) === Object.prototype) for (var M in P) _.set(M, P[M]);
    else if (typeof P.keys == "function" && typeof P.get == "function") for (const F of P.keys()) _.set(F, P.get(F));
    else throw Error("Unknown input type for opt_headers: " + String(P));
    P = Array.from(_.keys()).find((F) => F.toLowerCase() == "content-type"), M = a.FormData && c instanceof a.FormData, !(0 <= Array.prototype.indexOf.call(Kw, d, void 0)) || P || M || _.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
    for (const [F, W] of _) this.g.setRequestHeader(F, W);
    this.H && (this.g.responseType = this.H), "withCredentials" in this.g && this.g.withCredentials !== this.J && (this.g.withCredentials = this.J);
    try {
      dh(this), this.u = !0, this.g.send(c), this.u = !1;
    } catch (F) {
      lh(this, F);
    }
  };
  function lh(c, d) {
    c.h = !1, c.g && (c.j = !0, c.g.abort(), c.j = !1), c.l = d, c.m = 5, fh(c), no(c);
  }
  function fh(c) {
    c.A || (c.A = !0, bt(c, "complete"), bt(c, "error"));
  }
  t.abort = function(c) {
    this.g && this.h && (this.h = !1, this.j = !0, this.g.abort(), this.j = !1, this.m = c || 7, bt(this, "complete"), bt(this, "abort"), no(this));
  }, t.N = function() {
    this.g && (this.h && (this.h = !1, this.j = !0, this.g.abort(), this.j = !1), no(this, !0)), Ve.aa.N.call(this);
  }, t.Ea = function() {
    this.s || (this.B || this.u || this.j ? hh(this) : this.bb());
  }, t.bb = function() {
    hh(this);
  };
  function hh(c) {
    if (c.h && typeof o < "u" && (!c.v[1] || wn(c) != 4 || c.Z() != 2)) {
      if (c.u && wn(c) == 4) xf(c.Ea, 0, c);
      else if (bt(c, "readystatechange"), wn(c) == 4) {
        c.h = !1;
        try {
          const W = c.Z();
          e: switch (W) {
            case 200:
            case 201:
            case 202:
            case 204:
            case 206:
            case 304:
            case 1223:
              var d = !0;
              break e;
            default:
              d = !1;
          }
          var _;
          if (!(_ = d)) {
            var P;
            if (P = W === 0) {
              var M = String(c.D).match(nh)[1] || null;
              !M && a.self && a.self.location && (M = a.self.location.protocol.slice(0, -1)), P = !zw.test(M ? M.toLowerCase() : "");
            }
            _ = P;
          }
          if (_) bt(c, "complete"), bt(c, "success");
          else {
            c.m = 6;
            try {
              var F = 2 < wn(c) ? c.g.statusText : "";
            } catch {
              F = "";
            }
            c.l = F + " [" + c.Z() + "]", fh(c);
          }
        } finally {
          no(c);
        }
      }
    }
  }
  function no(c, d) {
    if (c.g) {
      dh(c);
      const _ = c.g, P = c.v[0] ? () => {
      } : null;
      c.g = null, c.v = null, d || bt(c, "ready");
      try {
        _.onreadystatechange = P;
      } catch {
      }
    }
  }
  function dh(c) {
    c.I && (a.clearTimeout(c.I), c.I = null);
  }
  t.isActive = function() {
    return !!this.g;
  };
  function wn(c) {
    return c.g ? c.g.readyState : 0;
  }
  t.Z = function() {
    try {
      return 2 < wn(this) ? this.g.status : -1;
    } catch {
      return -1;
    }
  }, t.oa = function() {
    try {
      return this.g ? this.g.responseText : "";
    } catch {
      return "";
    }
  }, t.Oa = function(c) {
    if (this.g) {
      var d = this.g.responseText;
      return c && d.indexOf(c) == 0 && (d = d.substring(c.length)), Tw(d);
    }
  };
  function ph(c) {
    try {
      if (!c.g) return null;
      if ("response" in c.g) return c.g.response;
      switch (c.H) {
        case "":
        case "text":
          return c.g.responseText;
        case "arraybuffer":
          if ("mozResponseArrayBuffer" in c.g) return c.g.mozResponseArrayBuffer;
      }
      return null;
    } catch {
      return null;
    }
  }
  function Hw(c) {
    const d = {};
    c = (c.g && 2 <= wn(c) && c.g.getAllResponseHeaders() || "").split(`\r
`);
    for (let P = 0; P < c.length; P++) {
      if (E(c[P])) continue;
      var _ = D(c[P]);
      const M = _[0];
      if (_ = _[1], typeof _ != "string") continue;
      _ = _.trim();
      const F = d[M] || [];
      d[M] = F, F.push(_);
    }
    R(d, function(P) {
      return P.join(", ");
    });
  }
  t.Ba = function() {
    return this.m;
  }, t.Ka = function() {
    return typeof this.l == "string" ? this.l : String(this.l);
  };
  function zi(c, d, _) {
    return _ && _.internalChannelParams && _.internalChannelParams[c] || d;
  }
  function mh(c) {
    this.Aa = 0, this.i = [], this.j = new Mi(), this.ia = this.qa = this.I = this.W = this.g = this.ya = this.D = this.H = this.m = this.S = this.o = null, this.Ya = this.U = 0, this.Va = zi("failFast", !1, c), this.F = this.C = this.u = this.s = this.l = null, this.X = !0, this.za = this.T = -1, this.Y = this.v = this.B = 0, this.Ta = zi("baseRetryDelayMs", 5e3, c), this.cb = zi("retryDelaySeedMs", 1e4, c), this.Wa = zi("forwardChannelMaxRetries", 2, c), this.wa = zi("forwardChannelRequestTimeoutMs", 2e4, c), this.pa = c && c.xmlHttpFactory || void 0, this.Xa = c && c.Tb || void 0, this.Ca = c && c.useFetchStreams || !1, this.L = void 0, this.J = c && c.supportsCrossDomainXhr || !1, this.K = "", this.h = new Yf(c && c.concurrentRequestLimit), this.Da = new Bw(), this.P = c && c.fastHandshake || !1, this.O = c && c.encodeInitMessageHeaders || !1, this.P && this.O && (this.O = !1), this.Ua = c && c.Rb || !1, c && c.xa && this.j.xa(), c && c.forceLongPolling && (this.X = !1), this.ba = !this.P && this.X && c && c.detectBufferingProxy || !1, this.ja = void 0, c && c.longPollingTimeout && 0 < c.longPollingTimeout && (this.ja = c.longPollingTimeout), this.ca = void 0, this.R = 0, this.M = !1, this.ka = this.A = null;
  }
  t = mh.prototype, t.la = 8, t.G = 1, t.connect = function(c, d, _, P) {
    Tt(0), this.W = c, this.H = d || {}, _ && P !== void 0 && (this.H.OSID = _, this.H.OAID = P), this.F = this.X, this.I = Ih(this, null, this.W), io(this);
  };
  function pc(c) {
    if (gh(c), c.G == 3) {
      var d = c.U++, _ = _n(c.I);
      if (Ne(_, "SID", c.K), Ne(_, "RID", d), Ne(_, "TYPE", "terminate"), Ki(c, _), d = new xn(c, c.j, d), d.L = 2, d.v = eo(_n(_)), _ = !1, a.navigator && a.navigator.sendBeacon) try {
        _ = a.navigator.sendBeacon(d.v.toString(), "");
      } catch {
      }
      !_ && a.Image && (new Image().src = d.v, _ = !0), _ || (d.g = Sh(d.j, null), d.g.ea(d.v)), d.F = Date.now(), Js(d);
    }
    Th(c);
  }
  function ro(c) {
    c.g && (gc(c), c.g.cancel(), c.g = null);
  }
  function gh(c) {
    ro(c), c.u && (a.clearTimeout(c.u), c.u = null), so(c), c.h.cancel(), c.s && (typeof c.s == "number" && a.clearTimeout(c.s), c.s = null);
  }
  function io(c) {
    if (!Jf(c.h) && !c.s) {
      c.s = !0;
      var d = c.Ga;
      ae || $(), x || (ae(), x = !0), L.add(d, c), c.B = 0;
    }
  }
  function Gw(c, d) {
    return Xf(c.h) >= c.h.j - (c.s ? 1 : 0) ? !1 : c.s ? (c.i = d.D.concat(c.i), !0) : c.G == 1 || c.G == 2 || c.B >= (c.Va ? 0 : c.Wa) ? !1 : (c.s = Li(y(c.Ga, c, d), bh(c, c.B)), c.B++, !0);
  }
  t.Ga = function(c) {
    if (this.s) if (this.s = null, this.G == 1) {
      if (!c) {
        this.U = Math.floor(1e5 * Math.random()), c = this.U++;
        const M = new xn(this, this.j, c);
        let F = this.o;
        if (this.S && (F ? (F = T(F), O(F, this.S)) : F = this.S), this.m !== null || this.O || (M.H = F, F = null), this.P) e: {
          for (var d = 0, _ = 0; _ < this.i.length; _++) {
            t: {
              var P = this.i[_];
              if ("__data__" in P.map && (P = P.map.__data__, typeof P == "string")) {
                P = P.length;
                break t;
              }
              P = void 0;
            }
            if (P === void 0) break;
            if (d += P, 4096 < d) {
              d = _;
              break e;
            }
            if (d === 4096 || _ === this.i.length - 1) {
              d = _ + 1;
              break e;
            }
          }
          d = 1e3;
        }
        else d = 1e3;
        d = vh(this, M, d), _ = _n(this.I), Ne(_, "RID", c), Ne(_, "CVER", 22), this.D && Ne(_, "X-HTTP-Session-Id", this.D), Ki(this, _), F && (this.O ? d = "headers=" + encodeURIComponent(String(uh(F))) + "&" + d : this.m && dc(_, this.m, F)), hc(this.h, M), this.Ua && Ne(_, "TYPE", "init"), this.P ? (Ne(_, "$req", d), Ne(_, "SID", "null"), M.T = !0, cc(M, _, null)) : cc(M, _, d), this.G = 2;
      }
    } else this.G == 3 && (c ? yh(this, c) : this.i.length == 0 || Jf(this.h) || yh(this));
  };
  function yh(c, d) {
    var _;
    d ? _ = d.l : _ = c.U++;
    const P = _n(c.I);
    Ne(P, "SID", c.K), Ne(P, "RID", _), Ne(P, "AID", c.T), Ki(c, P), c.m && c.o && dc(P, c.m, c.o), _ = new xn(c, c.j, _, c.B + 1), c.m === null && (_.H = c.o), d && (c.i = d.D.concat(c.i)), d = vh(c, _, 1e3), _.I = Math.round(0.5 * c.wa) + Math.round(0.5 * c.wa * Math.random()), hc(c.h, _), cc(_, P, d);
  }
  function Ki(c, d) {
    c.H && I(c.H, function(_, P) {
      Ne(d, P, _);
    }), c.l && th({}, function(_, P) {
      Ne(d, P, _);
    });
  }
  function vh(c, d, _) {
    _ = Math.min(c.i.length, _);
    var P = c.l ? y(c.l.Na, c.l, c) : null;
    e: {
      var M = c.i;
      let F = -1;
      for (; ; ) {
        const W = ["count=" + _];
        F == -1 ? 0 < _ ? (F = M[0].g, W.push("ofs=" + F)) : F = 0 : W.push("ofs=" + F);
        let Oe = !0;
        for (let rt = 0; rt < _; rt++) {
          let Ee = M[rt].g;
          const pt = M[rt].map;
          if (Ee -= F, 0 > Ee) F = Math.max(0, M[rt].g - 100), Oe = !1;
          else try {
            qw(pt, W, "req" + Ee + "_");
          } catch {
            P && P(pt);
          }
        }
        if (Oe) {
          P = W.join("&");
          break e;
        }
      }
    }
    return c = c.i.splice(0, _), d.D = c, P;
  }
  function _h(c) {
    if (!c.g && !c.u) {
      c.Y = 1;
      var d = c.Fa;
      ae || $(), x || (ae(), x = !0), L.add(d, c), c.v = 0;
    }
  }
  function mc(c) {
    return c.g || c.u || 3 <= c.v ? !1 : (c.Y++, c.u = Li(y(c.Fa, c), bh(c, c.v)), c.v++, !0);
  }
  t.Fa = function() {
    if (this.u = null, wh(this), this.ba && !(this.M || this.g == null || 0 >= this.R)) {
      var c = 2 * this.R;
      this.j.info("BP detection timer enabled: " + c), this.A = Li(y(this.ab, this), c);
    }
  }, t.ab = function() {
    this.A && (this.A = null, this.j.info("BP detection timeout reached."), this.j.info("Buffering proxy detected and switch to long-polling!"), this.F = !1, this.M = !0, Tt(10), ro(this), wh(this));
  };
  function gc(c) {
    c.A != null && (a.clearTimeout(c.A), c.A = null);
  }
  function wh(c) {
    c.g = new xn(c, c.j, "rpc", c.Y), c.m === null && (c.g.H = c.o), c.g.O = 0;
    var d = _n(c.qa);
    Ne(d, "RID", "rpc"), Ne(d, "SID", c.K), Ne(d, "AID", c.T), Ne(d, "CI", c.F ? "0" : "1"), !c.F && c.ja && Ne(d, "TO", c.ja), Ne(d, "TYPE", "xmlhttp"), Ki(c, d), c.m && c.o && dc(d, c.m, c.o), c.L && (c.g.I = c.L);
    var _ = c.g;
    c = c.ia, _.L = 1, _.v = eo(_n(d)), _.m = null, _.P = !0, Gf(_, c);
  }
  t.Za = function() {
    this.C != null && (this.C = null, ro(this), mc(this), Tt(19));
  };
  function so(c) {
    c.C != null && (a.clearTimeout(c.C), c.C = null);
  }
  function Eh(c, d) {
    var _ = null;
    if (c.g == d) {
      so(c), gc(c), c.g = null;
      var P = 2;
    } else if (fc(c.h, d)) _ = d.D, Zf(c.h, d), P = 1;
    else return;
    if (c.G != 0) {
      if (d.o) if (P == 1) {
        _ = d.m ? d.m.length : 0, d = Date.now() - d.F;
        var M = c.B;
        P = Ws(), bt(P, new qf(P, _)), io(c);
      } else _h(c);
      else if (M = d.s, M == 3 || M == 0 && 0 < d.X || !(P == 1 && Gw(c, d) || P == 2 && mc(c))) switch (_ && 0 < _.length && (d = c.h, d.i = d.i.concat(_)), M) {
        case 1:
          or(c, 5);
          break;
        case 4:
          or(c, 10);
          break;
        case 3:
          or(c, 6);
          break;
        default:
          or(c, 2);
      }
    }
  }
  function bh(c, d) {
    let _ = c.Ta + Math.floor(Math.random() * c.cb);
    return c.isActive() || (_ *= 2), _ * d;
  }
  function or(c, d) {
    if (c.j.info("Error code " + d), d == 2) {
      var _ = y(c.fb, c), P = c.Xa;
      const M = !P;
      P = new sr(P || "//www.google.com/images/cleardot.gif"), a.location && a.location.protocol == "http" || Xs(P, "https"), eo(P), M ? jw(P.toString(), _) : $w(P.toString(), _);
    } else Tt(2);
    c.G = 0, c.l && c.l.sa(d), Th(c), gh(c);
  }
  t.fb = function(c) {
    c ? (this.j.info("Successfully pinged google.com"), Tt(2)) : (this.j.info("Failed to ping google.com"), Tt(1));
  };
  function Th(c) {
    if (c.G = 0, c.ka = [], c.l) {
      const d = eh(c.h);
      (d.length != 0 || c.i.length != 0) && (m(c.ka, d), m(c.ka, c.i), c.h.i.length = 0, C(c.i), c.i.length = 0), c.l.ra();
    }
  }
  function Ih(c, d, _) {
    var P = _ instanceof sr ? _n(_) : new sr(_);
    if (P.g != "") d && (P.g = d + "." + P.g), Zs(P, P.s);
    else {
      var M = a.location;
      P = M.protocol, d = d ? d + "." + M.hostname : M.hostname, M = +M.port;
      var F = new sr(null);
      P && Xs(F, P), d && (F.g = d), M && Zs(F, M), _ && (F.l = _), P = F;
    }
    return _ = c.D, d = c.ya, _ && d && Ne(P, _, d), Ne(P, "VER", c.la), Ki(c, P), P;
  }
  function Sh(c, d, _) {
    if (d && !c.J) throw Error("Can't create secondary domain capable XhrIo object.");
    return d = c.Ca && !c.pa ? new Ve(new $i({ eb: _ })) : new Ve(c.pa), d.Ha(c.J), d;
  }
  t.isActive = function() {
    return !!this.l && this.l.isActive(this);
  };
  function Ah() {
  }
  t = Ah.prototype, t.ua = function() {
  }, t.ta = function() {
  }, t.sa = function() {
  }, t.ra = function() {
  }, t.isActive = function() {
    return !0;
  }, t.Na = function() {
  };
  function oo() {
  }
  oo.prototype.g = function(c, d) {
    return new Nt(c, d);
  };
  function Nt(c, d) {
    dt.call(this), this.g = new mh(d), this.l = c, this.h = d && d.messageUrlParams || null, c = d && d.messageHeaders || null, d && d.clientProtocolHeaderRequired && (c ? c["X-Client-Protocol"] = "webchannel" : c = { "X-Client-Protocol": "webchannel" }), this.g.o = c, c = d && d.initMessageHeaders || null, d && d.messageContentType && (c ? c["X-WebChannel-Content-Type"] = d.messageContentType : c = { "X-WebChannel-Content-Type": d.messageContentType }), d && d.va && (c ? c["X-WebChannel-Client-Profile"] = d.va : c = { "X-WebChannel-Client-Profile": d.va }), this.g.S = c, (c = d && d.Sb) && !E(c) && (this.g.m = c), this.v = d && d.supportsCrossDomainXhr || !1, this.u = d && d.sendRawJson || !1, (d = d && d.httpSessionIdParam) && !E(d) && (this.g.D = d, c = this.h, c !== null && d in c && (c = this.h, d in c && delete c[d])), this.j = new Kr(this);
  }
  S(Nt, dt), Nt.prototype.m = function() {
    this.g.l = this.j, this.v && (this.g.J = !0), this.g.connect(this.l, this.h || void 0);
  }, Nt.prototype.close = function() {
    pc(this.g);
  }, Nt.prototype.o = function(c) {
    var d = this.g;
    if (typeof c == "string") {
      var _ = {};
      _.__data__ = c, c = _;
    } else this.u && (_ = {}, _.__data__ = nc(c), c = _);
    d.i.push(new kw(d.Ya++, c)), d.G == 3 && io(d);
  }, Nt.prototype.N = function() {
    this.g.l = null, delete this.j, pc(this.g), delete this.g, Nt.aa.N.call(this);
  };
  function Rh(c) {
    ic.call(this), c.__headers__ && (this.headers = c.__headers__, this.statusCode = c.__status__, delete c.__headers__, delete c.__status__);
    var d = c.__sm__;
    if (d) {
      e: {
        for (const _ in d) {
          c = _;
          break e;
        }
        c = void 0;
      }
      (this.i = c) && (c = this.i, d = d !== null && c in d ? d[c] : void 0), this.data = d;
    } else this.data = c;
  }
  S(Rh, ic);
  function Ch() {
    sc.call(this), this.status = 1;
  }
  S(Ch, sc);
  function Kr(c) {
    this.g = c;
  }
  S(Kr, Ah), Kr.prototype.ua = function() {
    bt(this.g, "a");
  }, Kr.prototype.ta = function(c) {
    bt(this.g, new Rh(c));
  }, Kr.prototype.sa = function(c) {
    bt(this.g, new Ch());
  }, Kr.prototype.ra = function() {
    bt(this.g, "b");
  }, oo.prototype.createWebChannel = oo.prototype.g, Nt.prototype.send = Nt.prototype.o, Nt.prototype.open = Nt.prototype.m, Nt.prototype.close = Nt.prototype.close, pv = function() {
    return new oo();
  }, dv = function() {
    return Ws();
  }, hv = rr, qu = { mb: 0, pb: 1, qb: 2, Jb: 3, Ob: 4, Lb: 5, Mb: 6, Kb: 7, Ib: 8, Nb: 9, PROXY: 10, NOPROXY: 11, Gb: 12, Cb: 13, Db: 14, Bb: 15, Eb: 16, Fb: 17, ib: 18, hb: 19, jb: 20 }, Qs.NO_ERROR = 0, Qs.TIMEOUT = 8, Qs.HTTP_ERROR = 6, Mo = Qs, zf.COMPLETE = "complete", fv = zf, Uf.EventType = Ni, Ni.OPEN = "a", Ni.CLOSE = "b", Ni.ERROR = "c", Ni.MESSAGE = "d", dt.prototype.listen = dt.prototype.K, es = Uf, lv = $i, Ve.prototype.listenOnce = Ve.prototype.L, Ve.prototype.getLastError = Ve.prototype.Ka, Ve.prototype.getLastErrorCode = Ve.prototype.Ba, Ve.prototype.getStatus = Ve.prototype.Z, Ve.prototype.getResponseJson = Ve.prototype.Oa, Ve.prototype.getResponseText = Ve.prototype.oa, Ve.prototype.send = Ve.prototype.ea, Ve.prototype.setWithCredentials = Ve.prototype.Ha, uv = Ve;
}).apply(typeof Eo < "u" ? Eo : typeof self < "u" ? self : typeof window < "u" ? window : {});
const kp = "@firebase/firestore";
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class yt {
  constructor(e) {
    this.uid = e;
  }
  isAuthenticated() {
    return this.uid != null;
  }
  /**
   * Returns a key representing this user, suitable for inclusion in a
   * dictionary.
   */
  toKey() {
    return this.isAuthenticated() ? "uid:" + this.uid : "anonymous-user";
  }
  isEqual(e) {
    return e.uid === this.uid;
  }
}
yt.UNAUTHENTICATED = new yt(null), // TODO(mikelehen): Look into getting a proper uid-equivalent for
// non-FirebaseAuth providers.
yt.GOOGLE_CREDENTIALS = new yt("google-credentials-uid"), yt.FIRST_PARTY = new yt("first-party-uid"), yt.MOCK_USER = new yt("mock-user");
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
let Ri = "10.12.5";
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const kr = new La("@firebase/firestore");
function Gi() {
  return kr.logLevel;
}
function Z(t, ...e) {
  if (kr.logLevel <= _e.DEBUG) {
    const n = e.map(zl);
    kr.debug(`Firestore (${Ri}): ${t}`, ...n);
  }
}
function On(t, ...e) {
  if (kr.logLevel <= _e.ERROR) {
    const n = e.map(zl);
    kr.error(`Firestore (${Ri}): ${t}`, ...n);
  }
}
function pi(t, ...e) {
  if (kr.logLevel <= _e.WARN) {
    const n = e.map(zl);
    kr.warn(`Firestore (${Ri}): ${t}`, ...n);
  }
}
function zl(t) {
  if (typeof t == "string") return t;
  try {
    /**
    * @license
    * Copyright 2020 Google LLC
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    return function(n) {
      return JSON.stringify(n);
    }(t);
  } catch {
    return t;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function ce(t = "Unexpected state") {
  const e = `FIRESTORE (${Ri}) INTERNAL ASSERTION FAILED: ` + t;
  throw On(e), new Error(e);
}
function De(t, e) {
  t || ce();
}
function he(t, e) {
  return t;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const q = {
  // Causes are copied from:
  // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
  /** Not an error; returned on success. */
  OK: "ok",
  /** The operation was cancelled (typically by the caller). */
  CANCELLED: "cancelled",
  /** Unknown error or an error from a different error domain. */
  UNKNOWN: "unknown",
  /**
   * Client specified an invalid argument. Note that this differs from
   * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
   * problematic regardless of the state of the system (e.g., a malformed file
   * name).
   */
  INVALID_ARGUMENT: "invalid-argument",
  /**
   * Deadline expired before operation could complete. For operations that
   * change the state of the system, this error may be returned even if the
   * operation has completed successfully. For example, a successful response
   * from a server could have been delayed long enough for the deadline to
   * expire.
   */
  DEADLINE_EXCEEDED: "deadline-exceeded",
  /** Some requested entity (e.g., file or directory) was not found. */
  NOT_FOUND: "not-found",
  /**
   * Some entity that we attempted to create (e.g., file or directory) already
   * exists.
   */
  ALREADY_EXISTS: "already-exists",
  /**
   * The caller does not have permission to execute the specified operation.
   * PERMISSION_DENIED must not be used for rejections caused by exhausting
   * some resource (use RESOURCE_EXHAUSTED instead for those errors).
   * PERMISSION_DENIED must not be used if the caller cannot be identified
   * (use UNAUTHENTICATED instead for those errors).
   */
  PERMISSION_DENIED: "permission-denied",
  /**
   * The request does not have valid authentication credentials for the
   * operation.
   */
  UNAUTHENTICATED: "unauthenticated",
  /**
   * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
   * entire file system is out of space.
   */
  RESOURCE_EXHAUSTED: "resource-exhausted",
  /**
   * Operation was rejected because the system is not in a state required for
   * the operation's execution. For example, directory to be deleted may be
   * non-empty, an rmdir operation is applied to a non-directory, etc.
   *
   * A litmus test that may help a service implementor in deciding
   * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
   *  (a) Use UNAVAILABLE if the client can retry just the failing call.
   *  (b) Use ABORTED if the client should retry at a higher-level
   *      (e.g., restarting a read-modify-write sequence).
   *  (c) Use FAILED_PRECONDITION if the client should not retry until
   *      the system state has been explicitly fixed. E.g., if an "rmdir"
   *      fails because the directory is non-empty, FAILED_PRECONDITION
   *      should be returned since the client should not retry unless
   *      they have first fixed up the directory by deleting files from it.
   *  (d) Use FAILED_PRECONDITION if the client performs conditional
   *      REST Get/Update/Delete on a resource and the resource on the
   *      server does not match the condition. E.g., conflicting
   *      read-modify-write on the same resource.
   */
  FAILED_PRECONDITION: "failed-precondition",
  /**
   * The operation was aborted, typically due to a concurrency issue like
   * sequencer check failures, transaction aborts, etc.
   *
   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
   * and UNAVAILABLE.
   */
  ABORTED: "aborted",
  /**
   * Operation was attempted past the valid range. E.g., seeking or reading
   * past end of file.
   *
   * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
   * if the system state changes. For example, a 32-bit file system will
   * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
   * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
   * an offset past the current file size.
   *
   * There is a fair bit of overlap between FAILED_PRECONDITION and
   * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
   * when it applies so that callers who are iterating through a space can
   * easily look for an OUT_OF_RANGE error to detect when they are done.
   */
  OUT_OF_RANGE: "out-of-range",
  /** Operation is not implemented or not supported/enabled in this service. */
  UNIMPLEMENTED: "unimplemented",
  /**
   * Internal errors. Means some invariants expected by underlying System has
   * been broken. If you see one of these errors, Something is very broken.
   */
  INTERNAL: "internal",
  /**
   * The service is currently unavailable. This is a most likely a transient
   * condition and may be corrected by retrying with a backoff.
   *
   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
   * and UNAVAILABLE.
   */
  UNAVAILABLE: "unavailable",
  /** Unrecoverable data loss or corruption. */
  DATA_LOSS: "data-loss"
};
class re extends Gt {
  /** @hideconstructor */
  constructor(e, n) {
    super(e, n), this.code = e, this.message = n, // HACK: We write a toString property directly because Error is not a real
    // class and so inheritance does not work correctly. We could alternatively
    // do the same "back-door inheritance" trick that FirebaseError does.
    this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class An {
  constructor() {
    this.promise = new Promise((e, n) => {
      this.resolve = e, this.reject = n;
    });
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class mv {
  constructor(e, n) {
    this.user = n, this.type = "OAuth", this.headers = /* @__PURE__ */ new Map(), this.headers.set("Authorization", `Bearer ${e}`);
  }
}
class Ek {
  getToken() {
    return Promise.resolve(null);
  }
  invalidateToken() {
  }
  start(e, n) {
    e.enqueueRetryable(() => n(yt.UNAUTHENTICATED));
  }
  shutdown() {
  }
}
class bk {
  constructor(e) {
    this.token = e, /**
    * Stores the listener registered with setChangeListener()
    * This isn't actually necessary since the UID never changes, but we use this
    * to verify the listen contract is adhered to in tests.
    */
    this.changeListener = null;
  }
  getToken() {
    return Promise.resolve(this.token);
  }
  invalidateToken() {
  }
  start(e, n) {
    this.changeListener = n, // Fire with initial user.
    e.enqueueRetryable(() => n(this.token.user));
  }
  shutdown() {
    this.changeListener = null;
  }
}
class Tk {
  constructor(e) {
    this.t = e, /** Tracks the current User. */
    this.currentUser = yt.UNAUTHENTICATED, /**
    * Counter used to detect if the token changed while a getToken request was
    * outstanding.
    */
    this.i = 0, this.forceRefresh = !1, this.auth = null;
  }
  start(e, n) {
    let r = this.i;
    const i = (u) => this.i !== r ? (r = this.i, n(u)) : Promise.resolve();
    let s = new An();
    this.o = () => {
      this.i++, this.currentUser = this.u(), s.resolve(), s = new An(), e.enqueueRetryable(() => i(this.currentUser));
    };
    const o = () => {
      const u = s;
      e.enqueueRetryable(async () => {
        await u.promise, await i(this.currentUser);
      });
    }, a = (u) => {
      Z("FirebaseAuthCredentialsProvider", "Auth detected"), this.auth = u, this.auth.addAuthTokenListener(this.o), o();
    };
    this.t.onInit((u) => a(u)), // Our users can initialize Auth right after Firestore, so we give it
    // a chance to register itself with the component framework before we
    // determine whether to start up in unauthenticated mode.
    setTimeout(() => {
      if (!this.auth) {
        const u = this.t.getImmediate({
          optional: !0
        });
        u ? a(u) : (
          // If auth is still not available, proceed with `null` user
          (Z("FirebaseAuthCredentialsProvider", "Auth not yet detected"), s.resolve(), s = new An())
        );
      }
    }, 0), o();
  }
  getToken() {
    const e = this.i, n = this.forceRefresh;
    return this.forceRefresh = !1, this.auth ? this.auth.getToken(n).then((r) => (
      // Cancel the request since the token changed while the request was
      // outstanding so the response is potentially for a previous user (which
      // user, we can't be sure).
      this.i !== e ? (Z("FirebaseAuthCredentialsProvider", "getToken aborted due to token change."), this.getToken()) : r ? (De(typeof r.accessToken == "string"), new mv(r.accessToken, this.currentUser)) : null
    )) : Promise.resolve(null);
  }
  invalidateToken() {
    this.forceRefresh = !0;
  }
  shutdown() {
    this.auth && this.auth.removeAuthTokenListener(this.o);
  }
  // Auth.getUid() can return null even with a user logged in. It is because
  // getUid() is synchronous, but the auth code populating Uid is asynchronous.
  // This method should only be called in the AuthTokenListener callback
  // to guarantee to get the actual user.
  u() {
    const e = this.auth && this.auth.getUid();
    return De(e === null || typeof e == "string"), new yt(e);
  }
}
class Ik {
  constructor(e, n, r) {
    this.l = e, this.h = n, this.P = r, this.type = "FirstParty", this.user = yt.FIRST_PARTY, this.I = /* @__PURE__ */ new Map();
  }
  /**
   * Gets an authorization token, using a provided factory function, or return
   * null.
   */
  T() {
    return this.P ? this.P() : null;
  }
  get headers() {
    this.I.set("X-Goog-AuthUser", this.l);
    const e = this.T();
    return e && this.I.set("Authorization", e), this.h && this.I.set("X-Goog-Iam-Authorization-Token", this.h), this.I;
  }
}
class Sk {
  constructor(e, n, r) {
    this.l = e, this.h = n, this.P = r;
  }
  getToken() {
    return Promise.resolve(new Ik(this.l, this.h, this.P));
  }
  start(e, n) {
    e.enqueueRetryable(() => n(yt.FIRST_PARTY));
  }
  shutdown() {
  }
  invalidateToken() {
  }
}
class Ak {
  constructor(e) {
    this.value = e, this.type = "AppCheck", this.headers = /* @__PURE__ */ new Map(), e && e.length > 0 && this.headers.set("x-firebase-appcheck", this.value);
  }
}
class Rk {
  constructor(e) {
    this.A = e, this.forceRefresh = !1, this.appCheck = null, this.R = null;
  }
  start(e, n) {
    const r = (s) => {
      s.error != null && Z("FirebaseAppCheckTokenProvider", `Error getting App Check token; using placeholder token instead. Error: ${s.error.message}`);
      const o = s.token !== this.R;
      return this.R = s.token, Z("FirebaseAppCheckTokenProvider", `Received ${o ? "new" : "existing"} token.`), o ? n(s.token) : Promise.resolve();
    };
    this.o = (s) => {
      e.enqueueRetryable(() => r(s));
    };
    const i = (s) => {
      Z("FirebaseAppCheckTokenProvider", "AppCheck detected"), this.appCheck = s, this.appCheck.addTokenListener(this.o);
    };
    this.A.onInit((s) => i(s)), // Our users can initialize AppCheck after Firestore, so we give it
    // a chance to register itself with the component framework.
    setTimeout(() => {
      if (!this.appCheck) {
        const s = this.A.getImmediate({
          optional: !0
        });
        s ? i(s) : (
          // If AppCheck is still not available, proceed without it.
          Z("FirebaseAppCheckTokenProvider", "AppCheck not yet detected")
        );
      }
    }, 0);
  }
  getToken() {
    const e = this.forceRefresh;
    return this.forceRefresh = !1, this.appCheck ? this.appCheck.getToken(e).then((n) => n ? (De(typeof n.token == "string"), this.R = n.token, new Ak(n.token)) : null) : Promise.resolve(null);
  }
  invalidateToken() {
    this.forceRefresh = !0;
  }
  shutdown() {
    this.appCheck && this.appCheck.removeTokenListener(this.o);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Ck(t) {
  const e = (
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    typeof self < "u" && (self.crypto || self.msCrypto)
  ), n = new Uint8Array(t);
  if (e && typeof e.getRandomValues == "function") e.getRandomValues(n);
  else
    for (let r = 0; r < t; r++) n[r] = Math.floor(256 * Math.random());
  return n;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class gv {
  static newId() {
    const e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", n = Math.floor(256 / e.length) * e.length;
    let r = "";
    for (; r.length < 20; ) {
      const i = Ck(40);
      for (let s = 0; s < i.length; ++s)
        r.length < 20 && i[s] < n && (r += e.charAt(i[s] % e.length));
    }
    return r;
  }
}
function be(t, e) {
  return t < e ? -1 : t > e ? 1 : 0;
}
function mi(t, e, n) {
  return t.length === e.length && t.every((r, i) => n(r, e[i]));
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class et {
  /**
   * Creates a new timestamp.
   *
   * @param seconds - The number of seconds of UTC time since Unix epoch
   *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
   *     9999-12-31T23:59:59Z inclusive.
   * @param nanoseconds - The non-negative fractions of a second at nanosecond
   *     resolution. Negative second values with fractions must still have
   *     non-negative nanoseconds values that count forward in time. Must be
   *     from 0 to 999,999,999 inclusive.
   */
  constructor(e, n) {
    if (this.seconds = e, this.nanoseconds = n, n < 0) throw new re(q.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + n);
    if (n >= 1e9) throw new re(q.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + n);
    if (e < -62135596800) throw new re(q.INVALID_ARGUMENT, "Timestamp seconds out of range: " + e);
    if (e >= 253402300800) throw new re(q.INVALID_ARGUMENT, "Timestamp seconds out of range: " + e);
  }
  /**
   * Creates a new timestamp with the current date, with millisecond precision.
   *
   * @returns a new timestamp representing the current date.
   */
  static now() {
    return et.fromMillis(Date.now());
  }
  /**
   * Creates a new timestamp from the given date.
   *
   * @param date - The date to initialize the `Timestamp` from.
   * @returns A new `Timestamp` representing the same point in time as the given
   *     date.
   */
  static fromDate(e) {
    return et.fromMillis(e.getTime());
  }
  /**
   * Creates a new timestamp from the given number of milliseconds.
   *
   * @param milliseconds - Number of milliseconds since Unix epoch
   *     1970-01-01T00:00:00Z.
   * @returns A new `Timestamp` representing the same point in time as the given
   *     number of milliseconds.
   */
  static fromMillis(e) {
    const n = Math.floor(e / 1e3), r = Math.floor(1e6 * (e - 1e3 * n));
    return new et(n, r);
  }
  /**
   * Converts a `Timestamp` to a JavaScript `Date` object. This conversion
   * causes a loss of precision since `Date` objects only support millisecond
   * precision.
   *
   * @returns JavaScript `Date` object representing the same point in time as
   *     this `Timestamp`, with millisecond precision.
   */
  toDate() {
    return new Date(this.toMillis());
  }
  /**
   * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
   * epoch). This operation causes a loss of precision.
   *
   * @returns The point in time corresponding to this timestamp, represented as
   *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
   */
  toMillis() {
    return 1e3 * this.seconds + this.nanoseconds / 1e6;
  }
  _compareTo(e) {
    return this.seconds === e.seconds ? be(this.nanoseconds, e.nanoseconds) : be(this.seconds, e.seconds);
  }
  /**
   * Returns true if this `Timestamp` is equal to the provided one.
   *
   * @param other - The `Timestamp` to compare against.
   * @returns true if this `Timestamp` is equal to the provided one.
   */
  isEqual(e) {
    return e.seconds === this.seconds && e.nanoseconds === this.nanoseconds;
  }
  /** Returns a textual representation of this `Timestamp`. */
  toString() {
    return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
  }
  /** Returns a JSON-serializable representation of this `Timestamp`. */
  toJSON() {
    return {
      seconds: this.seconds,
      nanoseconds: this.nanoseconds
    };
  }
  /**
   * Converts this object to a primitive string, which allows `Timestamp` objects
   * to be compared using the `>`, `<=`, `>=` and `>` operators.
   */
  valueOf() {
    const e = this.seconds - -62135596800;
    return String(e).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class fe {
  constructor(e) {
    this.timestamp = e;
  }
  static fromTimestamp(e) {
    return new fe(e);
  }
  static min() {
    return new fe(new et(0, 0));
  }
  static max() {
    return new fe(new et(253402300799, 999999999));
  }
  compareTo(e) {
    return this.timestamp._compareTo(e.timestamp);
  }
  isEqual(e) {
    return this.timestamp.isEqual(e.timestamp);
  }
  /** Returns a number representation of the version for use in spec tests. */
  toMicroseconds() {
    return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
  }
  toString() {
    return "SnapshotVersion(" + this.timestamp.toString() + ")";
  }
  toTimestamp() {
    return this.timestamp;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class bs {
  constructor(e, n, r) {
    n === void 0 ? n = 0 : n > e.length && ce(), r === void 0 ? r = e.length - n : r > e.length - n && ce(), this.segments = e, this.offset = n, this.len = r;
  }
  get length() {
    return this.len;
  }
  isEqual(e) {
    return bs.comparator(this, e) === 0;
  }
  child(e) {
    const n = this.segments.slice(this.offset, this.limit());
    return e instanceof bs ? e.forEach((r) => {
      n.push(r);
    }) : n.push(e), this.construct(n);
  }
  /** The index of one past the last segment of the path. */
  limit() {
    return this.offset + this.length;
  }
  popFirst(e) {
    return e = e === void 0 ? 1 : e, this.construct(this.segments, this.offset + e, this.length - e);
  }
  popLast() {
    return this.construct(this.segments, this.offset, this.length - 1);
  }
  firstSegment() {
    return this.segments[this.offset];
  }
  lastSegment() {
    return this.get(this.length - 1);
  }
  get(e) {
    return this.segments[this.offset + e];
  }
  isEmpty() {
    return this.length === 0;
  }
  isPrefixOf(e) {
    if (e.length < this.length) return !1;
    for (let n = 0; n < this.length; n++) if (this.get(n) !== e.get(n)) return !1;
    return !0;
  }
  isImmediateParentOf(e) {
    if (this.length + 1 !== e.length) return !1;
    for (let n = 0; n < this.length; n++) if (this.get(n) !== e.get(n)) return !1;
    return !0;
  }
  forEach(e) {
    for (let n = this.offset, r = this.limit(); n < r; n++) e(this.segments[n]);
  }
  toArray() {
    return this.segments.slice(this.offset, this.limit());
  }
  static comparator(e, n) {
    const r = Math.min(e.length, n.length);
    for (let i = 0; i < r; i++) {
      const s = e.get(i), o = n.get(i);
      if (s < o) return -1;
      if (s > o) return 1;
    }
    return e.length < n.length ? -1 : e.length > n.length ? 1 : 0;
  }
}
class Le extends bs {
  construct(e, n, r) {
    return new Le(e, n, r);
  }
  canonicalString() {
    return this.toArray().join("/");
  }
  toString() {
    return this.canonicalString();
  }
  /**
   * Returns a string representation of this path
   * where each path segment has been encoded with
   * `encodeURIComponent`.
   */
  toUriEncodedString() {
    return this.toArray().map(encodeURIComponent).join("/");
  }
  /**
   * Creates a resource path from the given slash-delimited string. If multiple
   * arguments are provided, all components are combined. Leading and trailing
   * slashes from all components are ignored.
   */
  static fromString(...e) {
    const n = [];
    for (const r of e) {
      if (r.indexOf("//") >= 0) throw new re(q.INVALID_ARGUMENT, `Invalid segment (${r}). Paths must not contain // in them.`);
      n.push(...r.split("/").filter((i) => i.length > 0));
    }
    return new Le(n);
  }
  static emptyPath() {
    return new Le([]);
  }
}
const Pk = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
class ct extends bs {
  construct(e, n, r) {
    return new ct(e, n, r);
  }
  /**
   * Returns true if the string could be used as a segment in a field path
   * without escaping.
   */
  static isValidIdentifier(e) {
    return Pk.test(e);
  }
  canonicalString() {
    return this.toArray().map((e) => (e = e.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), ct.isValidIdentifier(e) || (e = "`" + e + "`"), e)).join(".");
  }
  toString() {
    return this.canonicalString();
  }
  /**
   * Returns true if this field references the key of a document.
   */
  isKeyField() {
    return this.length === 1 && this.get(0) === "__name__";
  }
  /**
   * The field designating the key of a document.
   */
  static keyField() {
    return new ct(["__name__"]);
  }
  /**
   * Parses a field string from the given server-formatted string.
   *
   * - Splitting the empty string is not allowed (for now at least).
   * - Empty segments within the string (e.g. if there are two consecutive
   *   separators) are not allowed.
   *
   * TODO(b/37244157): we should make this more strict. Right now, it allows
   * non-identifier path components, even if they aren't escaped.
   */
  static fromServerFormat(e) {
    const n = [];
    let r = "", i = 0;
    const s = () => {
      if (r.length === 0) throw new re(q.INVALID_ARGUMENT, `Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);
      n.push(r), r = "";
    };
    let o = !1;
    for (; i < e.length; ) {
      const a = e[i];
      if (a === "\\") {
        if (i + 1 === e.length) throw new re(q.INVALID_ARGUMENT, "Path has trailing escape character: " + e);
        const u = e[i + 1];
        if (u !== "\\" && u !== "." && u !== "`") throw new re(q.INVALID_ARGUMENT, "Path has invalid escape sequence: " + e);
        r += u, i += 2;
      } else a === "`" ? (o = !o, i++) : a !== "." || o ? (r += a, i++) : (s(), i++);
    }
    if (s(), o) throw new re(q.INVALID_ARGUMENT, "Unterminated ` in path: " + e);
    return new ct(n);
  }
  static emptyPath() {
    return new ct([]);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class se {
  constructor(e) {
    this.path = e;
  }
  static fromPath(e) {
    return new se(Le.fromString(e));
  }
  static fromName(e) {
    return new se(Le.fromString(e).popFirst(5));
  }
  static empty() {
    return new se(Le.emptyPath());
  }
  get collectionGroup() {
    return this.path.popLast().lastSegment();
  }
  /** Returns true if the document is in the specified collectionId. */
  hasCollectionId(e) {
    return this.path.length >= 2 && this.path.get(this.path.length - 2) === e;
  }
  /** Returns the collection group (i.e. the name of the parent collection) for this key. */
  getCollectionGroup() {
    return this.path.get(this.path.length - 2);
  }
  /** Returns the fully qualified path to the parent collection. */
  getCollectionPath() {
    return this.path.popLast();
  }
  isEqual(e) {
    return e !== null && Le.comparator(this.path, e.path) === 0;
  }
  toString() {
    return this.path.toString();
  }
  static comparator(e, n) {
    return Le.comparator(e.path, n.path);
  }
  static isDocumentKey(e) {
    return e.length % 2 == 0;
  }
  /**
   * Creates and returns a new document key with the given segments.
   *
   * @param segments - The segments of the path to the document
   * @returns A new instance of DocumentKey
   */
  static fromSegments(e) {
    return new se(new Le(e.slice()));
  }
}
function kk(t, e) {
  const n = t.toTimestamp().seconds, r = t.toTimestamp().nanoseconds + 1, i = fe.fromTimestamp(r === 1e9 ? new et(n + 1, 0) : new et(n, r));
  return new Xn(i, se.empty(), e);
}
function Ok(t) {
  return new Xn(t.readTime, t.key, -1);
}
class Xn {
  constructor(e, n, r) {
    this.readTime = e, this.documentKey = n, this.largestBatchId = r;
  }
  /** Returns an offset that sorts before all regular offsets. */
  static min() {
    return new Xn(fe.min(), se.empty(), -1);
  }
  /** Returns an offset that sorts after all regular offsets. */
  static max() {
    return new Xn(fe.max(), se.empty(), -1);
  }
}
function Dk(t, e) {
  let n = t.readTime.compareTo(e.readTime);
  return n !== 0 ? n : (n = se.comparator(t.documentKey, e.documentKey), n !== 0 ? n : be(t.largestBatchId, e.largestBatchId));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Nk = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";
class xk {
  constructor() {
    this.onCommittedListeners = [];
  }
  addOnCommittedListener(e) {
    this.onCommittedListeners.push(e);
  }
  raiseOnCommittedEvent() {
    this.onCommittedListeners.forEach((e) => e());
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function Fs(t) {
  if (t.code !== q.FAILED_PRECONDITION || t.message !== Nk) throw t;
  Z("LocalStore", "Unexpectedly lost primary lease");
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class z {
  constructor(e) {
    this.nextCallback = null, this.catchCallback = null, // When the operation resolves, we'll set result or error and mark isDone.
    this.result = void 0, this.error = void 0, this.isDone = !1, // Set to true when .then() or .catch() are called and prevents additional
    // chaining.
    this.callbackAttached = !1, e((n) => {
      this.isDone = !0, this.result = n, this.nextCallback && // value should be defined unless T is Void, but we can't express
      // that in the type system.
      this.nextCallback(n);
    }, (n) => {
      this.isDone = !0, this.error = n, this.catchCallback && this.catchCallback(n);
    });
  }
  catch(e) {
    return this.next(void 0, e);
  }
  next(e, n) {
    return this.callbackAttached && ce(), this.callbackAttached = !0, this.isDone ? this.error ? this.wrapFailure(n, this.error) : this.wrapSuccess(e, this.result) : new z((r, i) => {
      this.nextCallback = (s) => {
        this.wrapSuccess(e, s).next(r, i);
      }, this.catchCallback = (s) => {
        this.wrapFailure(n, s).next(r, i);
      };
    });
  }
  toPromise() {
    return new Promise((e, n) => {
      this.next(e, n);
    });
  }
  wrapUserFunction(e) {
    try {
      const n = e();
      return n instanceof z ? n : z.resolve(n);
    } catch (n) {
      return z.reject(n);
    }
  }
  wrapSuccess(e, n) {
    return e ? this.wrapUserFunction(() => e(n)) : z.resolve(n);
  }
  wrapFailure(e, n) {
    return e ? this.wrapUserFunction(() => e(n)) : z.reject(n);
  }
  static resolve(e) {
    return new z((n, r) => {
      n(e);
    });
  }
  static reject(e) {
    return new z((n, r) => {
      r(e);
    });
  }
  static waitFor(e) {
    return new z((n, r) => {
      let i = 0, s = 0, o = !1;
      e.forEach((a) => {
        ++i, a.next(() => {
          ++s, o && s === i && n();
        }, (u) => r(u));
      }), o = !0, s === i && n();
    });
  }
  /**
   * Given an array of predicate functions that asynchronously evaluate to a
   * boolean, implements a short-circuiting `or` between the results. Predicates
   * will be evaluated until one of them returns `true`, then stop. The final
   * result will be whether any of them returned `true`.
   */
  static or(e) {
    let n = z.resolve(!1);
    for (const r of e) n = n.next((i) => i ? z.resolve(i) : r());
    return n;
  }
  static forEach(e, n) {
    const r = [];
    return e.forEach((i, s) => {
      r.push(n.call(this, i, s));
    }), this.waitFor(r);
  }
  /**
   * Concurrently map all array elements through asynchronous function.
   */
  static mapArray(e, n) {
    return new z((r, i) => {
      const s = e.length, o = new Array(s);
      let a = 0;
      for (let u = 0; u < s; u++) {
        const l = u;
        n(e[l]).next((h) => {
          o[l] = h, ++a, a === s && r(o);
        }, (h) => i(h));
      }
    });
  }
  /**
   * An alternative to recursive PersistencePromise calls, that avoids
   * potential memory problems from unbounded chains of promises.
   *
   * The `action` will be called repeatedly while `condition` is true.
   */
  static doWhile(e, n) {
    return new z((r, i) => {
      const s = () => {
        e() === !0 ? n().next(() => {
          s();
        }, i) : r();
      };
      s();
    });
  }
}
function Lk(t) {
  const e = t.match(/Android ([\d.]+)/i), n = e ? e[1].split(".").slice(0, 2).join(".") : "-1";
  return Number(n);
}
function Us(t) {
  return t.name === "IndexedDbTransactionError";
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Kl {
  constructor(e, n) {
    this.previousValue = e, n && (n.sequenceNumberHandler = (r) => this.ie(r), this.se = (r) => n.writeSequenceNumber(r));
  }
  ie(e) {
    return this.previousValue = Math.max(e, this.previousValue), this.previousValue;
  }
  next() {
    const e = ++this.previousValue;
    return this.se && this.se(e), e;
  }
}
Kl.oe = -1;
function ja(t) {
  return t == null;
}
function ia(t) {
  return t === 0 && 1 / t == -1 / 0;
}
function Mk(t) {
  return typeof t == "number" && Number.isInteger(t) && !ia(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Op(t) {
  let e = 0;
  for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && e++;
  return e;
}
function Ci(t, e) {
  for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && e(n, t[n]);
}
function yv(t) {
  for (const e in t) if (Object.prototype.hasOwnProperty.call(t, e)) return !1;
  return !0;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Me {
  constructor(e, n) {
    this.comparator = e, this.root = n || at.EMPTY;
  }
  // Returns a copy of the map, with the specified key/value added or replaced.
  insert(e, n) {
    return new Me(this.comparator, this.root.insert(e, n, this.comparator).copy(null, null, at.BLACK, null, null));
  }
  // Returns a copy of the map, with the specified key removed.
  remove(e) {
    return new Me(this.comparator, this.root.remove(e, this.comparator).copy(null, null, at.BLACK, null, null));
  }
  // Returns the value of the node with the given key, or null.
  get(e) {
    let n = this.root;
    for (; !n.isEmpty(); ) {
      const r = this.comparator(e, n.key);
      if (r === 0) return n.value;
      r < 0 ? n = n.left : r > 0 && (n = n.right);
    }
    return null;
  }
  // Returns the index of the element in this sorted map, or -1 if it doesn't
  // exist.
  indexOf(e) {
    let n = 0, r = this.root;
    for (; !r.isEmpty(); ) {
      const i = this.comparator(e, r.key);
      if (i === 0) return n + r.left.size;
      i < 0 ? r = r.left : (
        // Count all nodes left of the node plus the node itself
        (n += r.left.size + 1, r = r.right)
      );
    }
    return -1;
  }
  isEmpty() {
    return this.root.isEmpty();
  }
  // Returns the total number of nodes in the map.
  get size() {
    return this.root.size;
  }
  // Returns the minimum key in the map.
  minKey() {
    return this.root.minKey();
  }
  // Returns the maximum key in the map.
  maxKey() {
    return this.root.maxKey();
  }
  // Traverses the map in key order and calls the specified action function
  // for each key/value pair. If action returns true, traversal is aborted.
  // Returns the first truthy value returned by action, or the last falsey
  // value returned by action.
  inorderTraversal(e) {
    return this.root.inorderTraversal(e);
  }
  forEach(e) {
    this.inorderTraversal((n, r) => (e(n, r), !1));
  }
  toString() {
    const e = [];
    return this.inorderTraversal((n, r) => (e.push(`${n}:${r}`), !1)), `{${e.join(", ")}}`;
  }
  // Traverses the map in reverse key order and calls the specified action
  // function for each key/value pair. If action returns true, traversal is
  // aborted.
  // Returns the first truthy value returned by action, or the last falsey
  // value returned by action.
  reverseTraversal(e) {
    return this.root.reverseTraversal(e);
  }
  // Returns an iterator over the SortedMap.
  getIterator() {
    return new bo(this.root, null, this.comparator, !1);
  }
  getIteratorFrom(e) {
    return new bo(this.root, e, this.comparator, !1);
  }
  getReverseIterator() {
    return new bo(this.root, null, this.comparator, !0);
  }
  getReverseIteratorFrom(e) {
    return new bo(this.root, e, this.comparator, !0);
  }
}
class bo {
  constructor(e, n, r, i) {
    this.isReverse = i, this.nodeStack = [];
    let s = 1;
    for (; !e.isEmpty(); ) if (s = n ? r(e.key, n) : 1, // flip the comparison if we're going in reverse
    n && i && (s *= -1), s < 0)
      e = this.isReverse ? e.left : e.right;
    else {
      if (s === 0) {
        this.nodeStack.push(e);
        break;
      }
      this.nodeStack.push(e), e = this.isReverse ? e.right : e.left;
    }
  }
  getNext() {
    let e = this.nodeStack.pop();
    const n = {
      key: e.key,
      value: e.value
    };
    if (this.isReverse) for (e = e.left; !e.isEmpty(); ) this.nodeStack.push(e), e = e.right;
    else for (e = e.right; !e.isEmpty(); ) this.nodeStack.push(e), e = e.left;
    return n;
  }
  hasNext() {
    return this.nodeStack.length > 0;
  }
  peek() {
    if (this.nodeStack.length === 0) return null;
    const e = this.nodeStack[this.nodeStack.length - 1];
    return {
      key: e.key,
      value: e.value
    };
  }
}
class at {
  constructor(e, n, r, i, s) {
    this.key = e, this.value = n, this.color = r ?? at.RED, this.left = i ?? at.EMPTY, this.right = s ?? at.EMPTY, this.size = this.left.size + 1 + this.right.size;
  }
  // Returns a copy of the current node, optionally replacing pieces of it.
  copy(e, n, r, i, s) {
    return new at(e ?? this.key, n ?? this.value, r ?? this.color, i ?? this.left, s ?? this.right);
  }
  isEmpty() {
    return !1;
  }
  // Traverses the tree in key order and calls the specified action function
  // for each node. If action returns true, traversal is aborted.
  // Returns the first truthy value returned by action, or the last falsey
  // value returned by action.
  inorderTraversal(e) {
    return this.left.inorderTraversal(e) || e(this.key, this.value) || this.right.inorderTraversal(e);
  }
  // Traverses the tree in reverse key order and calls the specified action
  // function for each node. If action returns true, traversal is aborted.
  // Returns the first truthy value returned by action, or the last falsey
  // value returned by action.
  reverseTraversal(e) {
    return this.right.reverseTraversal(e) || e(this.key, this.value) || this.left.reverseTraversal(e);
  }
  // Returns the minimum node in the tree.
  min() {
    return this.left.isEmpty() ? this : this.left.min();
  }
  // Returns the maximum key in the tree.
  minKey() {
    return this.min().key;
  }
  // Returns the maximum key in the tree.
  maxKey() {
    return this.right.isEmpty() ? this.key : this.right.maxKey();
  }
  // Returns new tree, with the key/value added.
  insert(e, n, r) {
    let i = this;
    const s = r(e, i.key);
    return i = s < 0 ? i.copy(null, null, null, i.left.insert(e, n, r), null) : s === 0 ? i.copy(null, n, null, null, null) : i.copy(null, null, null, null, i.right.insert(e, n, r)), i.fixUp();
  }
  removeMin() {
    if (this.left.isEmpty()) return at.EMPTY;
    let e = this;
    return e.left.isRed() || e.left.left.isRed() || (e = e.moveRedLeft()), e = e.copy(null, null, null, e.left.removeMin(), null), e.fixUp();
  }
  // Returns new tree, with the specified item removed.
  remove(e, n) {
    let r, i = this;
    if (n(e, i.key) < 0) i.left.isEmpty() || i.left.isRed() || i.left.left.isRed() || (i = i.moveRedLeft()), i = i.copy(null, null, null, i.left.remove(e, n), null);
    else {
      if (i.left.isRed() && (i = i.rotateRight()), i.right.isEmpty() || i.right.isRed() || i.right.left.isRed() || (i = i.moveRedRight()), n(e, i.key) === 0) {
        if (i.right.isEmpty()) return at.EMPTY;
        r = i.right.min(), i = i.copy(r.key, r.value, null, null, i.right.removeMin());
      }
      i = i.copy(null, null, null, null, i.right.remove(e, n));
    }
    return i.fixUp();
  }
  isRed() {
    return this.color;
  }
  // Returns new tree after performing any needed rotations.
  fixUp() {
    let e = this;
    return e.right.isRed() && !e.left.isRed() && (e = e.rotateLeft()), e.left.isRed() && e.left.left.isRed() && (e = e.rotateRight()), e.left.isRed() && e.right.isRed() && (e = e.colorFlip()), e;
  }
  moveRedLeft() {
    let e = this.colorFlip();
    return e.right.left.isRed() && (e = e.copy(null, null, null, null, e.right.rotateRight()), e = e.rotateLeft(), e = e.colorFlip()), e;
  }
  moveRedRight() {
    let e = this.colorFlip();
    return e.left.left.isRed() && (e = e.rotateRight(), e = e.colorFlip()), e;
  }
  rotateLeft() {
    const e = this.copy(null, null, at.RED, null, this.right.left);
    return this.right.copy(null, null, this.color, e, null);
  }
  rotateRight() {
    const e = this.copy(null, null, at.RED, this.left.right, null);
    return this.left.copy(null, null, this.color, null, e);
  }
  colorFlip() {
    const e = this.left.copy(null, null, !this.left.color, null, null), n = this.right.copy(null, null, !this.right.color, null, null);
    return this.copy(null, null, !this.color, e, n);
  }
  // For testing.
  checkMaxDepth() {
    const e = this.check();
    return Math.pow(2, e) <= this.size + 1;
  }
  // In a balanced RB tree, the black-depth (number of black nodes) from root to
  // leaves is equal on both sides.  This function verifies that or asserts.
  check() {
    if (this.isRed() && this.left.isRed() || this.right.isRed()) throw ce();
    const e = this.left.check();
    if (e !== this.right.check()) throw ce();
    return e + (this.isRed() ? 0 : 1);
  }
}
at.EMPTY = null, at.RED = !0, at.BLACK = !1;
at.EMPTY = new // Represents an empty node (a leaf node in the Red-Black Tree).
class {
  constructor() {
    this.size = 0;
  }
  get key() {
    throw ce();
  }
  get value() {
    throw ce();
  }
  get color() {
    throw ce();
  }
  get left() {
    throw ce();
  }
  get right() {
    throw ce();
  }
  // Returns a copy of the current node.
  copy(e, n, r, i, s) {
    return this;
  }
  // Returns a copy of the tree, with the specified key/value added.
  insert(e, n, r) {
    return new at(e, n);
  }
  // Returns a copy of the tree, with the specified key removed.
  remove(e, n) {
    return this;
  }
  isEmpty() {
    return !0;
  }
  inorderTraversal(e) {
    return !1;
  }
  reverseTraversal(e) {
    return !1;
  }
  minKey() {
    return null;
  }
  maxKey() {
    return null;
  }
  isRed() {
    return !1;
  }
  // For testing.
  checkMaxDepth() {
    return !0;
  }
  check() {
    return 0;
  }
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ut {
  constructor(e) {
    this.comparator = e, this.data = new Me(this.comparator);
  }
  has(e) {
    return this.data.get(e) !== null;
  }
  first() {
    return this.data.minKey();
  }
  last() {
    return this.data.maxKey();
  }
  get size() {
    return this.data.size;
  }
  indexOf(e) {
    return this.data.indexOf(e);
  }
  /** Iterates elements in order defined by "comparator" */
  forEach(e) {
    this.data.inorderTraversal((n, r) => (e(n), !1));
  }
  /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */
  forEachInRange(e, n) {
    const r = this.data.getIteratorFrom(e[0]);
    for (; r.hasNext(); ) {
      const i = r.getNext();
      if (this.comparator(i.key, e[1]) >= 0) return;
      n(i.key);
    }
  }
  /**
   * Iterates over `elem`s such that: start &lt;= elem until false is returned.
   */
  forEachWhile(e, n) {
    let r;
    for (r = n !== void 0 ? this.data.getIteratorFrom(n) : this.data.getIterator(); r.hasNext(); )
      if (!e(r.getNext().key)) return;
  }
  /** Finds the least element greater than or equal to `elem`. */
  firstAfterOrEqual(e) {
    const n = this.data.getIteratorFrom(e);
    return n.hasNext() ? n.getNext().key : null;
  }
  getIterator() {
    return new Dp(this.data.getIterator());
  }
  getIteratorFrom(e) {
    return new Dp(this.data.getIteratorFrom(e));
  }
  /** Inserts or updates an element */
  add(e) {
    return this.copy(this.data.remove(e).insert(e, !0));
  }
  /** Deletes an element */
  delete(e) {
    return this.has(e) ? this.copy(this.data.remove(e)) : this;
  }
  isEmpty() {
    return this.data.isEmpty();
  }
  unionWith(e) {
    let n = this;
    return n.size < e.size && (n = e, e = this), e.forEach((r) => {
      n = n.add(r);
    }), n;
  }
  isEqual(e) {
    if (!(e instanceof ut) || this.size !== e.size) return !1;
    const n = this.data.getIterator(), r = e.data.getIterator();
    for (; n.hasNext(); ) {
      const i = n.getNext().key, s = r.getNext().key;
      if (this.comparator(i, s) !== 0) return !1;
    }
    return !0;
  }
  toArray() {
    const e = [];
    return this.forEach((n) => {
      e.push(n);
    }), e;
  }
  toString() {
    const e = [];
    return this.forEach((n) => e.push(n)), "SortedSet(" + e.toString() + ")";
  }
  copy(e) {
    const n = new ut(this.comparator);
    return n.data = e, n;
  }
}
class Dp {
  constructor(e) {
    this.iter = e;
  }
  getNext() {
    return this.iter.getNext().key;
  }
  hasNext() {
    return this.iter.hasNext();
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Xt {
  constructor(e) {
    this.fields = e, // TODO(dimond): validation of FieldMask
    // Sort the field mask to support `FieldMask.isEqual()` and assert below.
    e.sort(ct.comparator);
  }
  static empty() {
    return new Xt([]);
  }
  /**
   * Returns a new FieldMask object that is the result of adding all the given
   * fields paths to this field mask.
   */
  unionWith(e) {
    let n = new ut(ct.comparator);
    for (const r of this.fields) n = n.add(r);
    for (const r of e) n = n.add(r);
    return new Xt(n.toArray());
  }
  /**
   * Verifies that `fieldPath` is included by at least one field in this field
   * mask.
   *
   * This is an O(n) operation, where `n` is the size of the field mask.
   */
  covers(e) {
    for (const n of this.fields) if (n.isPrefixOf(e)) return !0;
    return !1;
  }
  isEqual(e) {
    return mi(this.fields, e.fields, (n, r) => n.isEqual(r));
  }
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class vv extends Error {
  constructor() {
    super(...arguments), this.name = "Base64DecodeError";
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ft {
  constructor(e) {
    this.binaryString = e;
  }
  static fromBase64String(e) {
    const n = function(i) {
      try {
        return atob(i);
      } catch (s) {
        throw typeof DOMException < "u" && s instanceof DOMException ? new vv("Invalid base64 string: " + s) : s;
      }
    }(e);
    return new ft(n);
  }
  static fromUint8Array(e) {
    const n = (
      /**
      * Helper function to convert an Uint8array to a binary string.
      */
      function(i) {
        let s = "";
        for (let o = 0; o < i.length; ++o) s += String.fromCharCode(i[o]);
        return s;
      }(e)
    );
    return new ft(n);
  }
  [Symbol.iterator]() {
    let e = 0;
    return {
      next: () => e < this.binaryString.length ? {
        value: this.binaryString.charCodeAt(e++),
        done: !1
      } : {
        value: void 0,
        done: !0
      }
    };
  }
  toBase64() {
    return function(n) {
      return btoa(n);
    }(this.binaryString);
  }
  toUint8Array() {
    return function(n) {
      const r = new Uint8Array(n.length);
      for (let i = 0; i < n.length; i++) r[i] = n.charCodeAt(i);
      return r;
    }(this.binaryString);
  }
  approximateByteSize() {
    return 2 * this.binaryString.length;
  }
  compareTo(e) {
    return be(this.binaryString, e.binaryString);
  }
  isEqual(e) {
    return this.binaryString === e.binaryString;
  }
}
ft.EMPTY_BYTE_STRING = new ft("");
const Vk = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);
function Zn(t) {
  if (De(!!t), typeof t == "string") {
    let e = 0;
    const n = Vk.exec(t);
    if (De(!!n), n[1]) {
      let i = n[1];
      i = (i + "000000000").substr(0, 9), e = Number(i);
    }
    const r = new Date(t);
    return {
      seconds: Math.floor(r.getTime() / 1e3),
      nanos: e
    };
  }
  return {
    seconds: Ye(t.seconds),
    nanos: Ye(t.nanos)
  };
}
function Ye(t) {
  return typeof t == "number" ? t : typeof t == "string" ? Number(t) : 0;
}
function Or(t) {
  return typeof t == "string" ? ft.fromBase64String(t) : ft.fromUint8Array(t);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Hl(t) {
  var e, n;
  return ((n = (((e = t == null ? void 0 : t.mapValue) === null || e === void 0 ? void 0 : e.fields) || {}).__type__) === null || n === void 0 ? void 0 : n.stringValue) === "server_timestamp";
}
function Gl(t) {
  const e = t.mapValue.fields.__previous_value__;
  return Hl(e) ? Gl(e) : e;
}
function Ts(t) {
  const e = Zn(t.mapValue.fields.__local_write_time__.timestampValue);
  return new et(e.seconds, e.nanos);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Fk {
  /**
   * Constructs a DatabaseInfo using the provided host, databaseId and
   * persistenceKey.
   *
   * @param databaseId - The database to use.
   * @param appId - The Firebase App Id.
   * @param persistenceKey - A unique identifier for this Firestore's local
   * storage (used in conjunction with the databaseId).
   * @param host - The Firestore backend host to connect to.
   * @param ssl - Whether to use SSL when connecting.
   * @param forceLongPolling - Whether to use the forceLongPolling option
   * when using WebChannel as the network transport.
   * @param autoDetectLongPolling - Whether to use the detectBufferingProxy
   * option when using WebChannel as the network transport.
   * @param longPollingOptions Options that configure long-polling.
   * @param useFetchStreams Whether to use the Fetch API instead of
   * XMLHTTPRequest
   */
  constructor(e, n, r, i, s, o, a, u, l) {
    this.databaseId = e, this.appId = n, this.persistenceKey = r, this.host = i, this.ssl = s, this.forceLongPolling = o, this.autoDetectLongPolling = a, this.longPollingOptions = u, this.useFetchStreams = l;
  }
}
class Is {
  constructor(e, n) {
    this.projectId = e, this.database = n || "(default)";
  }
  static empty() {
    return new Is("", "");
  }
  get isDefaultDatabase() {
    return this.database === "(default)";
  }
  isEqual(e) {
    return e instanceof Is && e.projectId === this.projectId && e.database === this.database;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const To = {
  mapValue: {
    fields: {
      __type__: {
        stringValue: "__max__"
      }
    }
  }
};
function Dr(t) {
  return "nullValue" in t ? 0 : "booleanValue" in t ? 1 : "integerValue" in t || "doubleValue" in t ? 2 : "timestampValue" in t ? 3 : "stringValue" in t ? 5 : "bytesValue" in t ? 6 : "referenceValue" in t ? 7 : "geoPointValue" in t ? 8 : "arrayValue" in t ? 9 : "mapValue" in t ? Hl(t) ? 4 : Uk(t) ? 9007199254740991 : 10 : ce();
}
function pn(t, e) {
  if (t === e) return !0;
  const n = Dr(t);
  if (n !== Dr(e)) return !1;
  switch (n) {
    case 0:
    case 9007199254740991:
      return !0;
    case 1:
      return t.booleanValue === e.booleanValue;
    case 4:
      return Ts(t).isEqual(Ts(e));
    case 3:
      return function(i, s) {
        if (typeof i.timestampValue == "string" && typeof s.timestampValue == "string" && i.timestampValue.length === s.timestampValue.length)
          return i.timestampValue === s.timestampValue;
        const o = Zn(i.timestampValue), a = Zn(s.timestampValue);
        return o.seconds === a.seconds && o.nanos === a.nanos;
      }(t, e);
    case 5:
      return t.stringValue === e.stringValue;
    case 6:
      return function(i, s) {
        return Or(i.bytesValue).isEqual(Or(s.bytesValue));
      }(t, e);
    case 7:
      return t.referenceValue === e.referenceValue;
    case 8:
      return function(i, s) {
        return Ye(i.geoPointValue.latitude) === Ye(s.geoPointValue.latitude) && Ye(i.geoPointValue.longitude) === Ye(s.geoPointValue.longitude);
      }(t, e);
    case 2:
      return function(i, s) {
        if ("integerValue" in i && "integerValue" in s) return Ye(i.integerValue) === Ye(s.integerValue);
        if ("doubleValue" in i && "doubleValue" in s) {
          const o = Ye(i.doubleValue), a = Ye(s.doubleValue);
          return o === a ? ia(o) === ia(a) : isNaN(o) && isNaN(a);
        }
        return !1;
      }(t, e);
    case 9:
      return mi(t.arrayValue.values || [], e.arrayValue.values || [], pn);
    case 10:
      return function(i, s) {
        const o = i.mapValue.fields || {}, a = s.mapValue.fields || {};
        if (Op(o) !== Op(a)) return !1;
        for (const u in o) if (o.hasOwnProperty(u) && (a[u] === void 0 || !pn(o[u], a[u]))) return !1;
        return !0;
      }(t, e);
    default:
      return ce();
  }
}
function Ss(t, e) {
  return (t.values || []).find((n) => pn(n, e)) !== void 0;
}
function gi(t, e) {
  if (t === e) return 0;
  const n = Dr(t), r = Dr(e);
  if (n !== r) return be(n, r);
  switch (n) {
    case 0:
    case 9007199254740991:
      return 0;
    case 1:
      return be(t.booleanValue, e.booleanValue);
    case 2:
      return function(s, o) {
        const a = Ye(s.integerValue || s.doubleValue), u = Ye(o.integerValue || o.doubleValue);
        return a < u ? -1 : a > u ? 1 : a === u ? 0 : (
          // one or both are NaN.
          isNaN(a) ? isNaN(u) ? 0 : -1 : 1
        );
      }(t, e);
    case 3:
      return Np(t.timestampValue, e.timestampValue);
    case 4:
      return Np(Ts(t), Ts(e));
    case 5:
      return be(t.stringValue, e.stringValue);
    case 6:
      return function(s, o) {
        const a = Or(s), u = Or(o);
        return a.compareTo(u);
      }(t.bytesValue, e.bytesValue);
    case 7:
      return function(s, o) {
        const a = s.split("/"), u = o.split("/");
        for (let l = 0; l < a.length && l < u.length; l++) {
          const h = be(a[l], u[l]);
          if (h !== 0) return h;
        }
        return be(a.length, u.length);
      }(t.referenceValue, e.referenceValue);
    case 8:
      return function(s, o) {
        const a = be(Ye(s.latitude), Ye(o.latitude));
        return a !== 0 ? a : be(Ye(s.longitude), Ye(o.longitude));
      }(t.geoPointValue, e.geoPointValue);
    case 9:
      return function(s, o) {
        const a = s.values || [], u = o.values || [];
        for (let l = 0; l < a.length && l < u.length; ++l) {
          const h = gi(a[l], u[l]);
          if (h) return h;
        }
        return be(a.length, u.length);
      }(t.arrayValue, e.arrayValue);
    case 10:
      return function(s, o) {
        if (s === To.mapValue && o === To.mapValue) return 0;
        if (s === To.mapValue) return 1;
        if (o === To.mapValue) return -1;
        const a = s.fields || {}, u = Object.keys(a), l = o.fields || {}, h = Object.keys(l);
        u.sort(), h.sort();
        for (let f = 0; f < u.length && f < h.length; ++f) {
          const y = be(u[f], h[f]);
          if (y !== 0) return y;
          const b = gi(a[u[f]], l[h[f]]);
          if (b !== 0) return b;
        }
        return be(u.length, h.length);
      }(t.mapValue, e.mapValue);
    default:
      throw ce();
  }
}
function Np(t, e) {
  if (typeof t == "string" && typeof e == "string" && t.length === e.length) return be(t, e);
  const n = Zn(t), r = Zn(e), i = be(n.seconds, r.seconds);
  return i !== 0 ? i : be(n.nanos, r.nanos);
}
function yi(t) {
  return zu(t);
}
function zu(t) {
  return "nullValue" in t ? "null" : "booleanValue" in t ? "" + t.booleanValue : "integerValue" in t ? "" + t.integerValue : "doubleValue" in t ? "" + t.doubleValue : "timestampValue" in t ? function(n) {
    const r = Zn(n);
    return `time(${r.seconds},${r.nanos})`;
  }(t.timestampValue) : "stringValue" in t ? t.stringValue : "bytesValue" in t ? function(n) {
    return Or(n).toBase64();
  }(t.bytesValue) : "referenceValue" in t ? function(n) {
    return se.fromName(n).toString();
  }(t.referenceValue) : "geoPointValue" in t ? function(n) {
    return `geo(${n.latitude},${n.longitude})`;
  }(t.geoPointValue) : "arrayValue" in t ? function(n) {
    let r = "[", i = !0;
    for (const s of n.values || []) i ? i = !1 : r += ",", r += zu(s);
    return r + "]";
  }(t.arrayValue) : "mapValue" in t ? function(n) {
    const r = Object.keys(n.fields || {}).sort();
    let i = "{", s = !0;
    for (const o of r) s ? s = !1 : i += ",", i += `${o}:${zu(n.fields[o])}`;
    return i + "}";
  }(t.mapValue) : ce();
}
function Ku(t) {
  return !!t && "integerValue" in t;
}
function Wl(t) {
  return !!t && "arrayValue" in t;
}
function xp(t) {
  return !!t && "nullValue" in t;
}
function Lp(t) {
  return !!t && "doubleValue" in t && isNaN(Number(t.doubleValue));
}
function Vo(t) {
  return !!t && "mapValue" in t;
}
function os(t) {
  if (t.geoPointValue) return {
    geoPointValue: Object.assign({}, t.geoPointValue)
  };
  if (t.timestampValue && typeof t.timestampValue == "object") return {
    timestampValue: Object.assign({}, t.timestampValue)
  };
  if (t.mapValue) {
    const e = {
      mapValue: {
        fields: {}
      }
    };
    return Ci(t.mapValue.fields, (n, r) => e.mapValue.fields[n] = os(r)), e;
  }
  if (t.arrayValue) {
    const e = {
      arrayValue: {
        values: []
      }
    };
    for (let n = 0; n < (t.arrayValue.values || []).length; ++n) e.arrayValue.values[n] = os(t.arrayValue.values[n]);
    return e;
  }
  return Object.assign({}, t);
}
function Uk(t) {
  return (((t.mapValue || {}).fields || {}).__type__ || {}).stringValue === "__max__";
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class jt {
  constructor(e) {
    this.value = e;
  }
  static empty() {
    return new jt({
      mapValue: {}
    });
  }
  /**
   * Returns the value at the given path or null.
   *
   * @param path - the path to search
   * @returns The value at the path or null if the path is not set.
   */
  field(e) {
    if (e.isEmpty()) return this.value;
    {
      let n = this.value;
      for (let r = 0; r < e.length - 1; ++r) if (n = (n.mapValue.fields || {})[e.get(r)], !Vo(n)) return null;
      return n = (n.mapValue.fields || {})[e.lastSegment()], n || null;
    }
  }
  /**
   * Sets the field to the provided value.
   *
   * @param path - The field path to set.
   * @param value - The value to set.
   */
  set(e, n) {
    this.getFieldsMap(e.popLast())[e.lastSegment()] = os(n);
  }
  /**
   * Sets the provided fields to the provided values.
   *
   * @param data - A map of fields to values (or null for deletes).
   */
  setAll(e) {
    let n = ct.emptyPath(), r = {}, i = [];
    e.forEach((o, a) => {
      if (!n.isImmediateParentOf(a)) {
        const u = this.getFieldsMap(n);
        this.applyChanges(u, r, i), r = {}, i = [], n = a.popLast();
      }
      o ? r[a.lastSegment()] = os(o) : i.push(a.lastSegment());
    });
    const s = this.getFieldsMap(n);
    this.applyChanges(s, r, i);
  }
  /**
   * Removes the field at the specified path. If there is no field at the
   * specified path, nothing is changed.
   *
   * @param path - The field path to remove.
   */
  delete(e) {
    const n = this.field(e.popLast());
    Vo(n) && n.mapValue.fields && delete n.mapValue.fields[e.lastSegment()];
  }
  isEqual(e) {
    return pn(this.value, e.value);
  }
  /**
   * Returns the map that contains the leaf element of `path`. If the parent
   * entry does not yet exist, or if it is not a map, a new map will be created.
   */
  getFieldsMap(e) {
    let n = this.value;
    n.mapValue.fields || (n.mapValue = {
      fields: {}
    });
    for (let r = 0; r < e.length; ++r) {
      let i = n.mapValue.fields[e.get(r)];
      Vo(i) && i.mapValue.fields || (i = {
        mapValue: {
          fields: {}
        }
      }, n.mapValue.fields[e.get(r)] = i), n = i;
    }
    return n.mapValue.fields;
  }
  /**
   * Modifies `fieldsMap` by adding, replacing or deleting the specified
   * entries.
   */
  applyChanges(e, n, r) {
    Ci(n, (i, s) => e[i] = s);
    for (const i of r) delete e[i];
  }
  clone() {
    return new jt(os(this.value));
  }
}
function _v(t) {
  const e = [];
  return Ci(t.fields, (n, r) => {
    const i = new ct([n]);
    if (Vo(r)) {
      const s = _v(r.mapValue).fields;
      if (s.length === 0)
        e.push(i);
      else
        for (const o of s) e.push(i.child(o));
    } else
      e.push(i);
  }), new Xt(e);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class vt {
  constructor(e, n, r, i, s, o, a) {
    this.key = e, this.documentType = n, this.version = r, this.readTime = i, this.createTime = s, this.data = o, this.documentState = a;
  }
  /**
   * Creates a document with no known version or data, but which can serve as
   * base document for mutations.
   */
  static newInvalidDocument(e) {
    return new vt(
      e,
      0,
      /* version */
      fe.min(),
      /* readTime */
      fe.min(),
      /* createTime */
      fe.min(),
      jt.empty(),
      0
      /* DocumentState.SYNCED */
    );
  }
  /**
   * Creates a new document that is known to exist with the given data at the
   * given version.
   */
  static newFoundDocument(e, n, r, i) {
    return new vt(
      e,
      1,
      /* version */
      n,
      /* readTime */
      fe.min(),
      /* createTime */
      r,
      i,
      0
      /* DocumentState.SYNCED */
    );
  }
  /** Creates a new document that is known to not exist at the given version. */
  static newNoDocument(e, n) {
    return new vt(
      e,
      2,
      /* version */
      n,
      /* readTime */
      fe.min(),
      /* createTime */
      fe.min(),
      jt.empty(),
      0
      /* DocumentState.SYNCED */
    );
  }
  /**
   * Creates a new document that is known to exist at the given version but
   * whose data is not known (e.g. a document that was updated without a known
   * base document).
   */
  static newUnknownDocument(e, n) {
    return new vt(
      e,
      3,
      /* version */
      n,
      /* readTime */
      fe.min(),
      /* createTime */
      fe.min(),
      jt.empty(),
      2
      /* DocumentState.HAS_COMMITTED_MUTATIONS */
    );
  }
  /**
   * Changes the document type to indicate that it exists and that its version
   * and data are known.
   */
  convertToFoundDocument(e, n) {
    return !this.createTime.isEqual(fe.min()) || this.documentType !== 2 && this.documentType !== 0 || (this.createTime = e), this.version = e, this.documentType = 1, this.data = n, this.documentState = 0, this;
  }
  /**
   * Changes the document type to indicate that it doesn't exist at the given
   * version.
   */
  convertToNoDocument(e) {
    return this.version = e, this.documentType = 2, this.data = jt.empty(), this.documentState = 0, this;
  }
  /**
   * Changes the document type to indicate that it exists at a given version but
   * that its data is not known (e.g. a document that was updated without a known
   * base document).
   */
  convertToUnknownDocument(e) {
    return this.version = e, this.documentType = 3, this.data = jt.empty(), this.documentState = 2, this;
  }
  setHasCommittedMutations() {
    return this.documentState = 2, this;
  }
  setHasLocalMutations() {
    return this.documentState = 1, this.version = fe.min(), this;
  }
  setReadTime(e) {
    return this.readTime = e, this;
  }
  get hasLocalMutations() {
    return this.documentState === 1;
  }
  get hasCommittedMutations() {
    return this.documentState === 2;
  }
  get hasPendingWrites() {
    return this.hasLocalMutations || this.hasCommittedMutations;
  }
  isValidDocument() {
    return this.documentType !== 0;
  }
  isFoundDocument() {
    return this.documentType === 1;
  }
  isNoDocument() {
    return this.documentType === 2;
  }
  isUnknownDocument() {
    return this.documentType === 3;
  }
  isEqual(e) {
    return e instanceof vt && this.key.isEqual(e.key) && this.version.isEqual(e.version) && this.documentType === e.documentType && this.documentState === e.documentState && this.data.isEqual(e.data);
  }
  mutableCopy() {
    return new vt(this.key, this.documentType, this.version, this.readTime, this.createTime, this.data.clone(), this.documentState);
  }
  toString() {
    return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {createTime: ${this.createTime}}), {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`;
  }
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class sa {
  constructor(e, n) {
    this.position = e, this.inclusive = n;
  }
}
function Mp(t, e, n) {
  let r = 0;
  for (let i = 0; i < t.position.length; i++) {
    const s = e[i], o = t.position[i];
    if (s.field.isKeyField() ? r = se.comparator(se.fromName(o.referenceValue), n.key) : r = gi(o, n.data.field(s.field)), s.dir === "desc" && (r *= -1), r !== 0) break;
  }
  return r;
}
function Vp(t, e) {
  if (t === null) return e === null;
  if (e === null || t.inclusive !== e.inclusive || t.position.length !== e.position.length) return !1;
  for (let n = 0; n < t.position.length; n++)
    if (!pn(t.position[n], e.position[n])) return !1;
  return !0;
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class oa {
  constructor(e, n = "asc") {
    this.field = e, this.dir = n;
  }
}
function jk(t, e) {
  return t.dir === e.dir && t.field.isEqual(e.field);
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class wv {
}
class Ze extends wv {
  constructor(e, n, r) {
    super(), this.field = e, this.op = n, this.value = r;
  }
  /**
   * Creates a filter based on the provided arguments.
   */
  static create(e, n, r) {
    return e.isKeyField() ? n === "in" || n === "not-in" ? this.createKeyFieldInFilter(e, n, r) : new Bk(e, n, r) : n === "array-contains" ? new Kk(e, r) : n === "in" ? new Hk(e, r) : n === "not-in" ? new Gk(e, r) : n === "array-contains-any" ? new Wk(e, r) : new Ze(e, n, r);
  }
  static createKeyFieldInFilter(e, n, r) {
    return n === "in" ? new qk(e, r) : new zk(e, r);
  }
  matches(e) {
    const n = e.data.field(this.field);
    return this.op === "!=" ? n !== null && this.matchesComparison(gi(n, this.value)) : n !== null && Dr(this.value) === Dr(n) && this.matchesComparison(gi(n, this.value));
  }
  matchesComparison(e) {
    switch (this.op) {
      case "<":
        return e < 0;
      case "<=":
        return e <= 0;
      case "==":
        return e === 0;
      case "!=":
        return e !== 0;
      case ">":
        return e > 0;
      case ">=":
        return e >= 0;
      default:
        return ce();
    }
  }
  isInequality() {
    return [
      "<",
      "<=",
      ">",
      ">=",
      "!=",
      "not-in"
      /* Operator.NOT_IN */
    ].indexOf(this.op) >= 0;
  }
  getFlattenedFilters() {
    return [this];
  }
  getFilters() {
    return [this];
  }
}
class mn extends wv {
  constructor(e, n) {
    super(), this.filters = e, this.op = n, this.ae = null;
  }
  /**
   * Creates a filter based on the provided arguments.
   */
  static create(e, n) {
    return new mn(e, n);
  }
  matches(e) {
    return Ev(this) ? this.filters.find((n) => !n.matches(e)) === void 0 : this.filters.find((n) => n.matches(e)) !== void 0;
  }
  getFlattenedFilters() {
    return this.ae !== null || (this.ae = this.filters.reduce((e, n) => e.concat(n.getFlattenedFilters()), [])), this.ae;
  }
  // Returns a mutable copy of `this.filters`
  getFilters() {
    return Object.assign([], this.filters);
  }
}
function Ev(t) {
  return t.op === "and";
}
function bv(t) {
  return $k(t) && Ev(t);
}
function $k(t) {
  for (const e of t.filters) if (e instanceof mn) return !1;
  return !0;
}
function Hu(t) {
  if (t instanceof Ze)
    return t.field.canonicalString() + t.op.toString() + yi(t.value);
  if (bv(t))
    return t.filters.map((e) => Hu(e)).join(",");
  {
    const e = t.filters.map((n) => Hu(n)).join(",");
    return `${t.op}(${e})`;
  }
}
function Tv(t, e) {
  return t instanceof Ze ? function(r, i) {
    return i instanceof Ze && r.op === i.op && r.field.isEqual(i.field) && pn(r.value, i.value);
  }(t, e) : t instanceof mn ? function(r, i) {
    return i instanceof mn && r.op === i.op && r.filters.length === i.filters.length ? r.filters.reduce((s, o, a) => s && Tv(o, i.filters[a]), !0) : !1;
  }(t, e) : void ce();
}
function Iv(t) {
  return t instanceof Ze ? function(n) {
    return `${n.field.canonicalString()} ${n.op} ${yi(n.value)}`;
  }(t) : t instanceof mn ? function(n) {
    return n.op.toString() + " {" + n.getFilters().map(Iv).join(" ,") + "}";
  }(t) : "Filter";
}
class Bk extends Ze {
  constructor(e, n, r) {
    super(e, n, r), this.key = se.fromName(r.referenceValue);
  }
  matches(e) {
    const n = se.comparator(e.key, this.key);
    return this.matchesComparison(n);
  }
}
class qk extends Ze {
  constructor(e, n) {
    super(e, "in", n), this.keys = Sv("in", n);
  }
  matches(e) {
    return this.keys.some((n) => n.isEqual(e.key));
  }
}
class zk extends Ze {
  constructor(e, n) {
    super(e, "not-in", n), this.keys = Sv("not-in", n);
  }
  matches(e) {
    return !this.keys.some((n) => n.isEqual(e.key));
  }
}
function Sv(t, e) {
  var n;
  return (((n = e.arrayValue) === null || n === void 0 ? void 0 : n.values) || []).map((r) => se.fromName(r.referenceValue));
}
class Kk extends Ze {
  constructor(e, n) {
    super(e, "array-contains", n);
  }
  matches(e) {
    const n = e.data.field(this.field);
    return Wl(n) && Ss(n.arrayValue, this.value);
  }
}
class Hk extends Ze {
  constructor(e, n) {
    super(e, "in", n);
  }
  matches(e) {
    const n = e.data.field(this.field);
    return n !== null && Ss(this.value.arrayValue, n);
  }
}
class Gk extends Ze {
  constructor(e, n) {
    super(e, "not-in", n);
  }
  matches(e) {
    if (Ss(this.value.arrayValue, {
      nullValue: "NULL_VALUE"
    })) return !1;
    const n = e.data.field(this.field);
    return n !== null && !Ss(this.value.arrayValue, n);
  }
}
class Wk extends Ze {
  constructor(e, n) {
    super(e, "array-contains-any", n);
  }
  matches(e) {
    const n = e.data.field(this.field);
    return !(!Wl(n) || !n.arrayValue.values) && n.arrayValue.values.some((r) => Ss(this.value.arrayValue, r));
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Qk {
  constructor(e, n = null, r = [], i = [], s = null, o = null, a = null) {
    this.path = e, this.collectionGroup = n, this.orderBy = r, this.filters = i, this.limit = s, this.startAt = o, this.endAt = a, this.ue = null;
  }
}
function Fp(t, e = null, n = [], r = [], i = null, s = null, o = null) {
  return new Qk(t, e, n, r, i, s, o);
}
function Ql(t) {
  const e = he(t);
  if (e.ue === null) {
    let n = e.path.canonicalString();
    e.collectionGroup !== null && (n += "|cg:" + e.collectionGroup), n += "|f:", n += e.filters.map((r) => Hu(r)).join(","), n += "|ob:", n += e.orderBy.map((r) => function(s) {
      return s.field.canonicalString() + s.dir;
    }(r)).join(","), ja(e.limit) || (n += "|l:", n += e.limit), e.startAt && (n += "|lb:", n += e.startAt.inclusive ? "b:" : "a:", n += e.startAt.position.map((r) => yi(r)).join(",")), e.endAt && (n += "|ub:", n += e.endAt.inclusive ? "a:" : "b:", n += e.endAt.position.map((r) => yi(r)).join(",")), e.ue = n;
  }
  return e.ue;
}
function Yl(t, e) {
  if (t.limit !== e.limit || t.orderBy.length !== e.orderBy.length) return !1;
  for (let n = 0; n < t.orderBy.length; n++) if (!jk(t.orderBy[n], e.orderBy[n])) return !1;
  if (t.filters.length !== e.filters.length) return !1;
  for (let n = 0; n < t.filters.length; n++) if (!Tv(t.filters[n], e.filters[n])) return !1;
  return t.collectionGroup === e.collectionGroup && !!t.path.isEqual(e.path) && !!Vp(t.startAt, e.startAt) && Vp(t.endAt, e.endAt);
}
function Gu(t) {
  return se.isDocumentKey(t.path) && t.collectionGroup === null && t.filters.length === 0;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class $a {
  /**
   * Initializes a Query with a path and optional additional query constraints.
   * Path must currently be empty if this is a collection group query.
   */
  constructor(e, n = null, r = [], i = [], s = null, o = "F", a = null, u = null) {
    this.path = e, this.collectionGroup = n, this.explicitOrderBy = r, this.filters = i, this.limit = s, this.limitType = o, this.startAt = a, this.endAt = u, this.ce = null, // The corresponding `Target` of this `Query` instance, for use with
    // non-aggregate queries.
    this.le = null, // The corresponding `Target` of this `Query` instance, for use with
    // aggregate queries. Unlike targets for non-aggregate queries,
    // aggregate query targets do not contain normalized order-bys, they only
    // contain explicit order-bys.
    this.he = null, this.startAt, this.endAt;
  }
}
function Yk(t, e, n, r, i, s, o, a) {
  return new $a(t, e, n, r, i, s, o, a);
}
function Ba(t) {
  return new $a(t);
}
function Up(t) {
  return t.filters.length === 0 && t.limit === null && t.startAt == null && t.endAt == null && (t.explicitOrderBy.length === 0 || t.explicitOrderBy.length === 1 && t.explicitOrderBy[0].field.isKeyField());
}
function Jk(t) {
  return t.collectionGroup !== null;
}
function as(t) {
  const e = he(t);
  if (e.ce === null) {
    e.ce = [];
    const n = /* @__PURE__ */ new Set();
    for (const s of e.explicitOrderBy) e.ce.push(s), n.add(s.field.canonicalString());
    const r = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : "asc";
    (function(o) {
      let a = new ut(ct.comparator);
      return o.filters.forEach((u) => {
        u.getFlattenedFilters().forEach((l) => {
          l.isInequality() && (a = a.add(l.field));
        });
      }), a;
    })(e).forEach((s) => {
      n.has(s.canonicalString()) || s.isKeyField() || e.ce.push(new oa(s, r));
    }), // Add the document key field to the last if it is not explicitly ordered.
    n.has(ct.keyField().canonicalString()) || e.ce.push(new oa(ct.keyField(), r));
  }
  return e.ce;
}
function un(t) {
  const e = he(t);
  return e.le || (e.le = Xk(e, as(t))), e.le;
}
function Xk(t, e) {
  if (t.limitType === "F") return Fp(t.path, t.collectionGroup, e, t.filters, t.limit, t.startAt, t.endAt);
  {
    e = e.map((i) => {
      const s = i.dir === "desc" ? "asc" : "desc";
      return new oa(i.field, s);
    });
    const n = t.endAt ? new sa(t.endAt.position, t.endAt.inclusive) : null, r = t.startAt ? new sa(t.startAt.position, t.startAt.inclusive) : null;
    return Fp(t.path, t.collectionGroup, e, t.filters, t.limit, n, r);
  }
}
function Wu(t, e, n) {
  return new $a(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), e, n, t.startAt, t.endAt);
}
function qa(t, e) {
  return Yl(un(t), un(e)) && t.limitType === e.limitType;
}
function Av(t) {
  return `${Ql(un(t))}|lt:${t.limitType}`;
}
function Yr(t) {
  return `Query(target=${function(n) {
    let r = n.path.canonicalString();
    return n.collectionGroup !== null && (r += " collectionGroup=" + n.collectionGroup), n.filters.length > 0 && (r += `, filters: [${n.filters.map((i) => Iv(i)).join(", ")}]`), ja(n.limit) || (r += ", limit: " + n.limit), n.orderBy.length > 0 && (r += `, orderBy: [${n.orderBy.map((i) => function(o) {
      return `${o.field.canonicalString()} (${o.dir})`;
    }(i)).join(", ")}]`), n.startAt && (r += ", startAt: ", r += n.startAt.inclusive ? "b:" : "a:", r += n.startAt.position.map((i) => yi(i)).join(",")), n.endAt && (r += ", endAt: ", r += n.endAt.inclusive ? "a:" : "b:", r += n.endAt.position.map((i) => yi(i)).join(",")), `Target(${r})`;
  }(un(t))}; limitType=${t.limitType})`;
}
function za(t, e) {
  return e.isFoundDocument() && function(r, i) {
    const s = i.key.path;
    return r.collectionGroup !== null ? i.key.hasCollectionId(r.collectionGroup) && r.path.isPrefixOf(s) : se.isDocumentKey(r.path) ? r.path.isEqual(s) : r.path.isImmediateParentOf(s);
  }(t, e) && function(r, i) {
    for (const s of as(r))
      if (!s.field.isKeyField() && i.data.field(s.field) === null) return !1;
    return !0;
  }(t, e) && function(r, i) {
    for (const s of r.filters) if (!s.matches(i)) return !1;
    return !0;
  }(t, e) && function(r, i) {
    return !(r.startAt && !/**
    * Returns true if a document sorts before a bound using the provided sort
    * order.
    */
    function(o, a, u) {
      const l = Mp(o, a, u);
      return o.inclusive ? l <= 0 : l < 0;
    }(r.startAt, as(r), i) || r.endAt && !function(o, a, u) {
      const l = Mp(o, a, u);
      return o.inclusive ? l >= 0 : l > 0;
    }(r.endAt, as(r), i));
  }(t, e);
}
function Zk(t) {
  return t.collectionGroup || (t.path.length % 2 == 1 ? t.path.lastSegment() : t.path.get(t.path.length - 2));
}
function Rv(t) {
  return (e, n) => {
    let r = !1;
    for (const i of as(t)) {
      const s = eO(i, e, n);
      if (s !== 0) return s;
      r = r || i.field.isKeyField();
    }
    return 0;
  };
}
function eO(t, e, n) {
  const r = t.field.isKeyField() ? se.comparator(e.key, n.key) : function(s, o, a) {
    const u = o.data.field(s), l = a.data.field(s);
    return u !== null && l !== null ? gi(u, l) : ce();
  }(t.field, e, n);
  switch (t.dir) {
    case "asc":
      return r;
    case "desc":
      return -1 * r;
    default:
      return ce();
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Pi {
  constructor(e, n) {
    this.mapKeyFn = e, this.equalsFn = n, /**
    * The inner map for a key/value pair. Due to the possibility of collisions we
    * keep a list of entries that we do a linear search through to find an actual
    * match. Note that collisions should be rare, so we still expect near
    * constant time lookups in practice.
    */
    this.inner = {}, /** The number of entries stored in the map */
    this.innerSize = 0;
  }
  /** Get a value for this key, or undefined if it does not exist. */
  get(e) {
    const n = this.mapKeyFn(e), r = this.inner[n];
    if (r !== void 0) {
      for (const [i, s] of r) if (this.equalsFn(i, e)) return s;
    }
  }
  has(e) {
    return this.get(e) !== void 0;
  }
  /** Put this key and value in the map. */
  set(e, n) {
    const r = this.mapKeyFn(e), i = this.inner[r];
    if (i === void 0) return this.inner[r] = [[e, n]], void this.innerSize++;
    for (let s = 0; s < i.length; s++) if (this.equalsFn(i[s][0], e))
      return void (i[s] = [e, n]);
    i.push([e, n]), this.innerSize++;
  }
  /**
   * Remove this key from the map. Returns a boolean if anything was deleted.
   */
  delete(e) {
    const n = this.mapKeyFn(e), r = this.inner[n];
    if (r === void 0) return !1;
    for (let i = 0; i < r.length; i++) if (this.equalsFn(r[i][0], e)) return r.length === 1 ? delete this.inner[n] : r.splice(i, 1), this.innerSize--, !0;
    return !1;
  }
  forEach(e) {
    Ci(this.inner, (n, r) => {
      for (const [i, s] of r) e(i, s);
    });
  }
  isEmpty() {
    return yv(this.inner);
  }
  size() {
    return this.innerSize;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const tO = new Me(se.comparator);
function Dn() {
  return tO;
}
const Cv = new Me(se.comparator);
function ts(...t) {
  let e = Cv;
  for (const n of t) e = e.insert(n.key, n);
  return e;
}
function Pv(t) {
  let e = Cv;
  return t.forEach((n, r) => e = e.insert(n, r.overlayedDocument)), e;
}
function gr() {
  return cs();
}
function kv() {
  return cs();
}
function cs() {
  return new Pi((t) => t.toString(), (t, e) => t.isEqual(e));
}
const nO = new Me(se.comparator), rO = new ut(se.comparator);
function ve(...t) {
  let e = rO;
  for (const n of t) e = e.add(n);
  return e;
}
const iO = new ut(be);
function sO() {
  return iO;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Ov(t, e) {
  if (t.useProto3Json) {
    if (isNaN(e)) return {
      doubleValue: "NaN"
    };
    if (e === 1 / 0) return {
      doubleValue: "Infinity"
    };
    if (e === -1 / 0) return {
      doubleValue: "-Infinity"
    };
  }
  return {
    doubleValue: ia(e) ? "-0" : e
  };
}
function Dv(t) {
  return {
    integerValue: "" + t
  };
}
function oO(t, e) {
  return Mk(e) ? Dv(e) : Ov(t, e);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Ka {
  constructor() {
    this._ = void 0;
  }
}
function aO(t, e, n) {
  return t instanceof aa ? function(i, s) {
    const o = {
      fields: {
        __type__: {
          stringValue: "server_timestamp"
        },
        __local_write_time__: {
          timestampValue: {
            seconds: i.seconds,
            nanos: i.nanoseconds
          }
        }
      }
    };
    return s && Hl(s) && (s = Gl(s)), s && (o.fields.__previous_value__ = s), {
      mapValue: o
    };
  }(n, e) : t instanceof As ? xv(t, e) : t instanceof Rs ? Lv(t, e) : function(i, s) {
    const o = Nv(i, s), a = jp(o) + jp(i.Pe);
    return Ku(o) && Ku(i.Pe) ? Dv(a) : Ov(i.serializer, a);
  }(t, e);
}
function cO(t, e, n) {
  return t instanceof As ? xv(t, e) : t instanceof Rs ? Lv(t, e) : n;
}
function Nv(t, e) {
  return t instanceof ca ? (
    /** Returns true if `value` is either an IntegerValue or a DoubleValue. */
    function(r) {
      return Ku(r) || function(s) {
        return !!s && "doubleValue" in s;
      }(r);
    }(e) ? e : {
      integerValue: 0
    }
  ) : null;
}
class aa extends Ka {
}
class As extends Ka {
  constructor(e) {
    super(), this.elements = e;
  }
}
function xv(t, e) {
  const n = Mv(e);
  for (const r of t.elements) n.some((i) => pn(i, r)) || n.push(r);
  return {
    arrayValue: {
      values: n
    }
  };
}
class Rs extends Ka {
  constructor(e) {
    super(), this.elements = e;
  }
}
function Lv(t, e) {
  let n = Mv(e);
  for (const r of t.elements) n = n.filter((i) => !pn(i, r));
  return {
    arrayValue: {
      values: n
    }
  };
}
class ca extends Ka {
  constructor(e, n) {
    super(), this.serializer = e, this.Pe = n;
  }
}
function jp(t) {
  return Ye(t.integerValue || t.doubleValue);
}
function Mv(t) {
  return Wl(t) && t.arrayValue.values ? t.arrayValue.values.slice() : [];
}
function uO(t, e) {
  return t.field.isEqual(e.field) && function(r, i) {
    return r instanceof As && i instanceof As || r instanceof Rs && i instanceof Rs ? mi(r.elements, i.elements, pn) : r instanceof ca && i instanceof ca ? pn(r.Pe, i.Pe) : r instanceof aa && i instanceof aa;
  }(t.transform, e.transform);
}
class lO {
  constructor(e, n) {
    this.version = e, this.transformResults = n;
  }
}
class Rn {
  constructor(e, n) {
    this.updateTime = e, this.exists = n;
  }
  /** Creates a new empty Precondition. */
  static none() {
    return new Rn();
  }
  /** Creates a new Precondition with an exists flag. */
  static exists(e) {
    return new Rn(void 0, e);
  }
  /** Creates a new Precondition based on a version a document exists at. */
  static updateTime(e) {
    return new Rn(e);
  }
  /** Returns whether this Precondition is empty. */
  get isNone() {
    return this.updateTime === void 0 && this.exists === void 0;
  }
  isEqual(e) {
    return this.exists === e.exists && (this.updateTime ? !!e.updateTime && this.updateTime.isEqual(e.updateTime) : !e.updateTime);
  }
}
function Fo(t, e) {
  return t.updateTime !== void 0 ? e.isFoundDocument() && e.version.isEqual(t.updateTime) : t.exists === void 0 || t.exists === e.isFoundDocument();
}
class Ha {
}
function Vv(t, e) {
  if (!t.hasLocalMutations || e && e.fields.length === 0) return null;
  if (e === null) return t.isNoDocument() ? new Uv(t.key, Rn.none()) : new js(t.key, t.data, Rn.none());
  {
    const n = t.data, r = jt.empty();
    let i = new ut(ct.comparator);
    for (let s of e.fields) if (!i.has(s)) {
      let o = n.field(s);
      o === null && s.length > 1 && (s = s.popLast(), o = n.field(s)), o === null ? r.delete(s) : r.set(s, o), i = i.add(s);
    }
    return new $r(t.key, r, new Xt(i.toArray()), Rn.none());
  }
}
function fO(t, e, n) {
  t instanceof js ? function(i, s, o) {
    const a = i.value.clone(), u = Bp(i.fieldTransforms, s, o.transformResults);
    a.setAll(u), s.convertToFoundDocument(o.version, a).setHasCommittedMutations();
  }(t, e, n) : t instanceof $r ? function(i, s, o) {
    if (!Fo(i.precondition, s))
      return void s.convertToUnknownDocument(o.version);
    const a = Bp(i.fieldTransforms, s, o.transformResults), u = s.data;
    u.setAll(Fv(i)), u.setAll(a), s.convertToFoundDocument(o.version, u).setHasCommittedMutations();
  }(t, e, n) : function(i, s, o) {
    s.convertToNoDocument(o.version).setHasCommittedMutations();
  }(0, e, n);
}
function us(t, e, n, r) {
  return t instanceof js ? function(s, o, a, u) {
    if (!Fo(s.precondition, o))
      return a;
    const l = s.value.clone(), h = qp(s.fieldTransforms, u, o);
    return l.setAll(h), o.convertToFoundDocument(o.version, l).setHasLocalMutations(), null;
  }(t, e, n, r) : t instanceof $r ? function(s, o, a, u) {
    if (!Fo(s.precondition, o)) return a;
    const l = qp(s.fieldTransforms, u, o), h = o.data;
    return h.setAll(Fv(s)), h.setAll(l), o.convertToFoundDocument(o.version, h).setHasLocalMutations(), a === null ? null : a.unionWith(s.fieldMask.fields).unionWith(s.fieldTransforms.map((f) => f.field));
  }(t, e, n, r) : function(s, o, a) {
    return Fo(s.precondition, o) ? (o.convertToNoDocument(o.version).setHasLocalMutations(), null) : a;
  }(t, e, n);
}
function hO(t, e) {
  let n = null;
  for (const r of t.fieldTransforms) {
    const i = e.data.field(r.field), s = Nv(r.transform, i || null);
    s != null && (n === null && (n = jt.empty()), n.set(r.field, s));
  }
  return n || null;
}
function $p(t, e) {
  return t.type === e.type && !!t.key.isEqual(e.key) && !!t.precondition.isEqual(e.precondition) && !!function(r, i) {
    return r === void 0 && i === void 0 || !(!r || !i) && mi(r, i, (s, o) => uO(s, o));
  }(t.fieldTransforms, e.fieldTransforms) && (t.type === 0 ? t.value.isEqual(e.value) : t.type !== 1 || t.data.isEqual(e.data) && t.fieldMask.isEqual(e.fieldMask));
}
class js extends Ha {
  constructor(e, n, r, i = []) {
    super(), this.key = e, this.value = n, this.precondition = r, this.fieldTransforms = i, this.type = 0;
  }
  getFieldMask() {
    return null;
  }
}
class $r extends Ha {
  constructor(e, n, r, i, s = []) {
    super(), this.key = e, this.data = n, this.fieldMask = r, this.precondition = i, this.fieldTransforms = s, this.type = 1;
  }
  getFieldMask() {
    return this.fieldMask;
  }
}
function Fv(t) {
  const e = /* @__PURE__ */ new Map();
  return t.fieldMask.fields.forEach((n) => {
    if (!n.isEmpty()) {
      const r = t.data.field(n);
      e.set(n, r);
    }
  }), e;
}
function Bp(t, e, n) {
  const r = /* @__PURE__ */ new Map();
  De(t.length === n.length);
  for (let i = 0; i < n.length; i++) {
    const s = t[i], o = s.transform, a = e.data.field(s.field);
    r.set(s.field, cO(o, a, n[i]));
  }
  return r;
}
function qp(t, e, n) {
  const r = /* @__PURE__ */ new Map();
  for (const i of t) {
    const s = i.transform, o = n.data.field(i.field);
    r.set(i.field, aO(s, o, e));
  }
  return r;
}
class Uv extends Ha {
  constructor(e, n) {
    super(), this.key = e, this.precondition = n, this.type = 2, this.fieldTransforms = [];
  }
  getFieldMask() {
    return null;
  }
}
class dO extends Ha {
  constructor(e, n) {
    super(), this.key = e, this.precondition = n, this.type = 3, this.fieldTransforms = [];
  }
  getFieldMask() {
    return null;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class pO {
  /**
   * @param batchId - The unique ID of this mutation batch.
   * @param localWriteTime - The original write time of this mutation.
   * @param baseMutations - Mutations that are used to populate the base
   * values when this mutation is applied locally. This can be used to locally
   * overwrite values that are persisted in the remote document cache. Base
   * mutations are never sent to the backend.
   * @param mutations - The user-provided mutations in this mutation batch.
   * User-provided mutations are applied both locally and remotely on the
   * backend.
   */
  constructor(e, n, r, i) {
    this.batchId = e, this.localWriteTime = n, this.baseMutations = r, this.mutations = i;
  }
  /**
   * Applies all the mutations in this MutationBatch to the specified document
   * to compute the state of the remote document
   *
   * @param document - The document to apply mutations to.
   * @param batchResult - The result of applying the MutationBatch to the
   * backend.
   */
  applyToRemoteDocument(e, n) {
    const r = n.mutationResults;
    for (let i = 0; i < this.mutations.length; i++) {
      const s = this.mutations[i];
      s.key.isEqual(e.key) && fO(s, e, r[i]);
    }
  }
  /**
   * Computes the local view of a document given all the mutations in this
   * batch.
   *
   * @param document - The document to apply mutations to.
   * @param mutatedFields - Fields that have been updated before applying this mutation batch.
   * @returns A `FieldMask` representing all the fields that are mutated.
   */
  applyToLocalView(e, n) {
    for (const r of this.baseMutations) r.key.isEqual(e.key) && (n = us(r, e, n, this.localWriteTime));
    for (const r of this.mutations) r.key.isEqual(e.key) && (n = us(r, e, n, this.localWriteTime));
    return n;
  }
  /**
   * Computes the local view for all provided documents given the mutations in
   * this batch. Returns a `DocumentKey` to `Mutation` map which can be used to
   * replace all the mutation applications.
   */
  applyToLocalDocumentSet(e, n) {
    const r = kv();
    return this.mutations.forEach((i) => {
      const s = e.get(i.key), o = s.overlayedDocument;
      let a = this.applyToLocalView(o, s.mutatedFields);
      a = n.has(i.key) ? null : a;
      const u = Vv(o, a);
      u !== null && r.set(i.key, u), o.isValidDocument() || o.convertToNoDocument(fe.min());
    }), r;
  }
  keys() {
    return this.mutations.reduce((e, n) => e.add(n.key), ve());
  }
  isEqual(e) {
    return this.batchId === e.batchId && mi(this.mutations, e.mutations, (n, r) => $p(n, r)) && mi(this.baseMutations, e.baseMutations, (n, r) => $p(n, r));
  }
}
class Jl {
  constructor(e, n, r, i) {
    this.batch = e, this.commitVersion = n, this.mutationResults = r, this.docVersions = i;
  }
  /**
   * Creates a new MutationBatchResult for the given batch and results. There
   * must be one result for each mutation in the batch. This static factory
   * caches a document=&gt;version mapping (docVersions).
   */
  static from(e, n, r) {
    De(e.mutations.length === r.length);
    let i = /* @__PURE__ */ function() {
      return nO;
    }();
    const s = e.mutations;
    for (let o = 0; o < s.length; o++) i = i.insert(s[o].key, r[o].version);
    return new Jl(e, n, r, i);
  }
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class mO {
  constructor(e, n) {
    this.largestBatchId = e, this.mutation = n;
  }
  getKey() {
    return this.mutation.key;
  }
  isEqual(e) {
    return e !== null && this.mutation === e.mutation;
  }
  toString() {
    return `Overlay{
      largestBatchId: ${this.largestBatchId},
      mutation: ${this.mutation.toString()}
    }`;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class gO {
  constructor(e, n) {
    this.count = e, this.unchangedNames = n;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Ge, we;
function yO(t) {
  switch (t) {
    default:
      return ce();
    case q.CANCELLED:
    case q.UNKNOWN:
    case q.DEADLINE_EXCEEDED:
    case q.RESOURCE_EXHAUSTED:
    case q.INTERNAL:
    case q.UNAVAILABLE:
    case q.UNAUTHENTICATED:
      return !1;
    case q.INVALID_ARGUMENT:
    case q.NOT_FOUND:
    case q.ALREADY_EXISTS:
    case q.PERMISSION_DENIED:
    case q.FAILED_PRECONDITION:
    case q.ABORTED:
    case q.OUT_OF_RANGE:
    case q.UNIMPLEMENTED:
    case q.DATA_LOSS:
      return !0;
  }
}
function jv(t) {
  if (t === void 0)
    return On("GRPC error has no .code"), q.UNKNOWN;
  switch (t) {
    case Ge.OK:
      return q.OK;
    case Ge.CANCELLED:
      return q.CANCELLED;
    case Ge.UNKNOWN:
      return q.UNKNOWN;
    case Ge.DEADLINE_EXCEEDED:
      return q.DEADLINE_EXCEEDED;
    case Ge.RESOURCE_EXHAUSTED:
      return q.RESOURCE_EXHAUSTED;
    case Ge.INTERNAL:
      return q.INTERNAL;
    case Ge.UNAVAILABLE:
      return q.UNAVAILABLE;
    case Ge.UNAUTHENTICATED:
      return q.UNAUTHENTICATED;
    case Ge.INVALID_ARGUMENT:
      return q.INVALID_ARGUMENT;
    case Ge.NOT_FOUND:
      return q.NOT_FOUND;
    case Ge.ALREADY_EXISTS:
      return q.ALREADY_EXISTS;
    case Ge.PERMISSION_DENIED:
      return q.PERMISSION_DENIED;
    case Ge.FAILED_PRECONDITION:
      return q.FAILED_PRECONDITION;
    case Ge.ABORTED:
      return q.ABORTED;
    case Ge.OUT_OF_RANGE:
      return q.OUT_OF_RANGE;
    case Ge.UNIMPLEMENTED:
      return q.UNIMPLEMENTED;
    case Ge.DATA_LOSS:
      return q.DATA_LOSS;
    default:
      return ce();
  }
}
(we = Ge || (Ge = {}))[we.OK = 0] = "OK", we[we.CANCELLED = 1] = "CANCELLED", we[we.UNKNOWN = 2] = "UNKNOWN", we[we.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", we[we.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", we[we.NOT_FOUND = 5] = "NOT_FOUND", we[we.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", we[we.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", we[we.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", we[we.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", we[we.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", we[we.ABORTED = 10] = "ABORTED", we[we.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", we[we.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", we[we.INTERNAL = 13] = "INTERNAL", we[we.UNAVAILABLE = 14] = "UNAVAILABLE", we[we.DATA_LOSS = 15] = "DATA_LOSS";
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function vO() {
  return new TextEncoder();
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const _O = new Er([4294967295, 4294967295], 0);
function zp(t) {
  const e = vO().encode(t), n = new cv();
  return n.update(e), new Uint8Array(n.digest());
}
function Kp(t) {
  const e = new DataView(t.buffer), n = e.getUint32(
    0,
    /* littleEndian= */
    !0
  ), r = e.getUint32(
    4,
    /* littleEndian= */
    !0
  ), i = e.getUint32(
    8,
    /* littleEndian= */
    !0
  ), s = e.getUint32(
    12,
    /* littleEndian= */
    !0
  );
  return [new Er([n, r], 0), new Er([i, s], 0)];
}
class Xl {
  constructor(e, n, r) {
    if (this.bitmap = e, this.padding = n, this.hashCount = r, n < 0 || n >= 8) throw new ns(`Invalid padding: ${n}`);
    if (r < 0) throw new ns(`Invalid hash count: ${r}`);
    if (e.length > 0 && this.hashCount === 0)
      throw new ns(`Invalid hash count: ${r}`);
    if (e.length === 0 && n !== 0)
      throw new ns(`Invalid padding when bitmap length is 0: ${n}`);
    this.Ie = 8 * e.length - n, // Set the bit count in Integer to avoid repetition in mightContain().
    this.Te = Er.fromNumber(this.Ie);
  }
  // Calculate the ith hash value based on the hashed 64bit integers,
  // and calculate its corresponding bit index in the bitmap to be checked.
  Ee(e, n, r) {
    let i = e.add(n.multiply(Er.fromNumber(r)));
    return i.compare(_O) === 1 && (i = new Er([i.getBits(0), i.getBits(1)], 0)), i.modulo(this.Te).toNumber();
  }
  // Return whether the bit on the given index in the bitmap is set to 1.
  de(e) {
    return (this.bitmap[Math.floor(e / 8)] & 1 << e % 8) != 0;
  }
  mightContain(e) {
    if (this.Ie === 0) return !1;
    const n = zp(e), [r, i] = Kp(n);
    for (let s = 0; s < this.hashCount; s++) {
      const o = this.Ee(r, i, s);
      if (!this.de(o)) return !1;
    }
    return !0;
  }
  /** Create bloom filter for testing purposes only. */
  static create(e, n, r) {
    const i = e % 8 == 0 ? 0 : 8 - e % 8, s = new Uint8Array(Math.ceil(e / 8)), o = new Xl(s, i, n);
    return r.forEach((a) => o.insert(a)), o;
  }
  insert(e) {
    if (this.Ie === 0) return;
    const n = zp(e), [r, i] = Kp(n);
    for (let s = 0; s < this.hashCount; s++) {
      const o = this.Ee(r, i, s);
      this.Ae(o);
    }
  }
  Ae(e) {
    const n = Math.floor(e / 8), r = e % 8;
    this.bitmap[n] |= 1 << r;
  }
}
class ns extends Error {
  constructor() {
    super(...arguments), this.name = "BloomFilterError";
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Ga {
  constructor(e, n, r, i, s) {
    this.snapshotVersion = e, this.targetChanges = n, this.targetMismatches = r, this.documentUpdates = i, this.resolvedLimboDocuments = s;
  }
  /**
   * HACK: Views require RemoteEvents in order to determine whether the view is
   * CURRENT, but secondary tabs don't receive remote events. So this method is
   * used to create a synthesized RemoteEvent that can be used to apply a
   * CURRENT status change to a View, for queries executed in a different tab.
   */
  // PORTING NOTE: Multi-tab only
  static createSynthesizedRemoteEventForCurrentChange(e, n, r) {
    const i = /* @__PURE__ */ new Map();
    return i.set(e, $s.createSynthesizedTargetChangeForCurrentChange(e, n, r)), new Ga(fe.min(), i, new Me(be), Dn(), ve());
  }
}
class $s {
  constructor(e, n, r, i, s) {
    this.resumeToken = e, this.current = n, this.addedDocuments = r, this.modifiedDocuments = i, this.removedDocuments = s;
  }
  /**
   * This method is used to create a synthesized TargetChanges that can be used to
   * apply a CURRENT status change to a View (for queries executed in a different
   * tab) or for new queries (to raise snapshots with correct CURRENT status).
   */
  static createSynthesizedTargetChangeForCurrentChange(e, n, r) {
    return new $s(r, n, ve(), ve(), ve());
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Uo {
  constructor(e, n, r, i) {
    this.Re = e, this.removedTargetIds = n, this.key = r, this.Ve = i;
  }
}
class $v {
  constructor(e, n) {
    this.targetId = e, this.me = n;
  }
}
class Bv {
  constructor(e, n, r = ft.EMPTY_BYTE_STRING, i = null) {
    this.state = e, this.targetIds = n, this.resumeToken = r, this.cause = i;
  }
}
class Hp {
  constructor() {
    this.fe = 0, /**
    * Keeps track of the document changes since the last raised snapshot.
    *
    * These changes are continuously updated as we receive document updates and
    * always reflect the current set of changes against the last issued snapshot.
    */
    this.ge = Wp(), /** See public getters for explanations of these fields. */
    this.pe = ft.EMPTY_BYTE_STRING, this.ye = !1, /**
    * Whether this target state should be included in the next snapshot. We
    * initialize to true so that newly-added targets are included in the next
    * RemoteEvent.
    */
    this.we = !0;
  }
  /**
   * Whether this target has been marked 'current'.
   *
   * 'Current' has special meaning in the RPC protocol: It implies that the
   * Watch backend has sent us all changes up to the point at which the target
   * was added and that the target is consistent with the rest of the watch
   * stream.
   */
  get current() {
    return this.ye;
  }
  /** The last resume token sent to us for this target. */
  get resumeToken() {
    return this.pe;
  }
  /** Whether this target has pending target adds or target removes. */
  get Se() {
    return this.fe !== 0;
  }
  /** Whether we have modified any state that should trigger a snapshot. */
  get be() {
    return this.we;
  }
  /**
   * Applies the resume token to the TargetChange, but only when it has a new
   * value. Empty resumeTokens are discarded.
   */
  De(e) {
    e.approximateByteSize() > 0 && (this.we = !0, this.pe = e);
  }
  /**
   * Creates a target change from the current set of changes.
   *
   * To reset the document changes after raising this snapshot, call
   * `clearPendingChanges()`.
   */
  Ce() {
    let e = ve(), n = ve(), r = ve();
    return this.ge.forEach((i, s) => {
      switch (s) {
        case 0:
          e = e.add(i);
          break;
        case 2:
          n = n.add(i);
          break;
        case 1:
          r = r.add(i);
          break;
        default:
          ce();
      }
    }), new $s(this.pe, this.ye, e, n, r);
  }
  /**
   * Resets the document changes and sets `hasPendingChanges` to false.
   */
  ve() {
    this.we = !1, this.ge = Wp();
  }
  Fe(e, n) {
    this.we = !0, this.ge = this.ge.insert(e, n);
  }
  Me(e) {
    this.we = !0, this.ge = this.ge.remove(e);
  }
  xe() {
    this.fe += 1;
  }
  Oe() {
    this.fe -= 1, De(this.fe >= 0);
  }
  Ne() {
    this.we = !0, this.ye = !0;
  }
}
class wO {
  constructor(e) {
    this.Le = e, /** The internal state of all tracked targets. */
    this.Be = /* @__PURE__ */ new Map(), /** Keeps track of the documents to update since the last raised snapshot. */
    this.ke = Dn(), /** A mapping of document keys to their set of target IDs. */
    this.qe = Gp(), /**
    * A map of targets with existence filter mismatches. These targets are
    * known to be inconsistent and their listens needs to be re-established by
    * RemoteStore.
    */
    this.Qe = new Me(be);
  }
  /**
   * Processes and adds the DocumentWatchChange to the current set of changes.
   */
  Ke(e) {
    for (const n of e.Re) e.Ve && e.Ve.isFoundDocument() ? this.$e(n, e.Ve) : this.Ue(n, e.key, e.Ve);
    for (const n of e.removedTargetIds) this.Ue(n, e.key, e.Ve);
  }
  /** Processes and adds the WatchTargetChange to the current set of changes. */
  We(e) {
    this.forEachTarget(e, (n) => {
      const r = this.Ge(n);
      switch (e.state) {
        case 0:
          this.ze(n) && r.De(e.resumeToken);
          break;
        case 1:
          r.Oe(), r.Se || // We have a freshly added target, so we need to reset any state
          // that we had previously. This can happen e.g. when remove and add
          // back a target for existence filter mismatches.
          r.ve(), r.De(e.resumeToken);
          break;
        case 2:
          r.Oe(), r.Se || this.removeTarget(n);
          break;
        case 3:
          this.ze(n) && (r.Ne(), r.De(e.resumeToken));
          break;
        case 4:
          this.ze(n) && // Reset the target and synthesizes removes for all existing
          // documents. The backend will re-add any documents that still
          // match the target before it sends the next global snapshot.
          (this.je(n), r.De(e.resumeToken));
          break;
        default:
          ce();
      }
    });
  }
  /**
   * Iterates over all targetIds that the watch change applies to: either the
   * targetIds explicitly listed in the change or the targetIds of all currently
   * active targets.
   */
  forEachTarget(e, n) {
    e.targetIds.length > 0 ? e.targetIds.forEach(n) : this.Be.forEach((r, i) => {
      this.ze(i) && n(i);
    });
  }
  /**
   * Handles existence filters and synthesizes deletes for filter mismatches.
   * Targets that are invalidated by filter mismatches are added to
   * `pendingTargetResets`.
   */
  He(e) {
    const n = e.targetId, r = e.me.count, i = this.Je(n);
    if (i) {
      const s = i.target;
      if (Gu(s)) if (r === 0) {
        const o = new se(s.path);
        this.Ue(n, o, vt.newNoDocument(o, fe.min()));
      } else De(r === 1);
      else {
        const o = this.Ye(n);
        if (o !== r) {
          const a = this.Ze(e), u = a ? this.Xe(a, e, o) : 1;
          if (u !== 0) {
            this.je(n);
            const l = u === 2 ? "TargetPurposeExistenceFilterMismatchBloom" : "TargetPurposeExistenceFilterMismatch";
            this.Qe = this.Qe.insert(n, l);
          }
        }
      }
    }
  }
  /**
   * Parse the bloom filter from the "unchanged_names" field of an existence
   * filter.
   */
  Ze(e) {
    const n = e.me.unchangedNames;
    if (!n || !n.bits) return null;
    const { bits: { bitmap: r = "", padding: i = 0 }, hashCount: s = 0 } = n;
    let o, a;
    try {
      o = Or(r).toUint8Array();
    } catch (u) {
      if (u instanceof vv) return pi("Decoding the base64 bloom filter in existence filter failed (" + u.message + "); ignoring the bloom filter and falling back to full re-query."), null;
      throw u;
    }
    try {
      a = new Xl(o, i, s);
    } catch (u) {
      return pi(u instanceof ns ? "BloomFilter error: " : "Applying bloom filter failed: ", u), null;
    }
    return a.Ie === 0 ? null : a;
  }
  /**
   * Apply bloom filter to remove the deleted documents, and return the
   * application status.
   */
  Xe(e, n, r) {
    return n.me.count === r - this.nt(e, n.targetId) ? 0 : 2;
  }
  /**
   * Filter out removed documents based on bloom filter membership result and
   * return number of documents removed.
   */
  nt(e, n) {
    const r = this.Le.getRemoteKeysForTarget(n);
    let i = 0;
    return r.forEach((s) => {
      const o = this.Le.tt(), a = `projects/${o.projectId}/databases/${o.database}/documents/${s.path.canonicalString()}`;
      e.mightContain(a) || (this.Ue(
        n,
        s,
        /*updatedDocument=*/
        null
      ), i++);
    }), i;
  }
  /**
   * Converts the currently accumulated state into a remote event at the
   * provided snapshot version. Resets the accumulated changes before returning.
   */
  rt(e) {
    const n = /* @__PURE__ */ new Map();
    this.Be.forEach((s, o) => {
      const a = this.Je(o);
      if (a) {
        if (s.current && Gu(a.target)) {
          const u = new se(a.target.path);
          this.ke.get(u) !== null || this.it(o, u) || this.Ue(o, u, vt.newNoDocument(u, e));
        }
        s.be && (n.set(o, s.Ce()), s.ve());
      }
    });
    let r = ve();
    this.qe.forEach((s, o) => {
      let a = !0;
      o.forEachWhile((u) => {
        const l = this.Je(u);
        return !l || l.purpose === "TargetPurposeLimboResolution" || (a = !1, !1);
      }), a && (r = r.add(s));
    }), this.ke.forEach((s, o) => o.setReadTime(e));
    const i = new Ga(e, n, this.Qe, this.ke, r);
    return this.ke = Dn(), this.qe = Gp(), this.Qe = new Me(be), i;
  }
  /**
   * Adds the provided document to the internal list of document updates and
   * its document key to the given target's mapping.
   */
  // Visible for testing.
  $e(e, n) {
    if (!this.ze(e)) return;
    const r = this.it(e, n.key) ? 2 : 0;
    this.Ge(e).Fe(n.key, r), this.ke = this.ke.insert(n.key, n), this.qe = this.qe.insert(n.key, this.st(n.key).add(e));
  }
  /**
   * Removes the provided document from the target mapping. If the
   * document no longer matches the target, but the document's state is still
   * known (e.g. we know that the document was deleted or we received the change
   * that caused the filter mismatch), the new document can be provided
   * to update the remote document cache.
   */
  // Visible for testing.
  Ue(e, n, r) {
    if (!this.ze(e)) return;
    const i = this.Ge(e);
    this.it(e, n) ? i.Fe(
      n,
      1
      /* ChangeType.Removed */
    ) : (
      // The document may have entered and left the target before we raised a
      // snapshot, so we can just ignore the change.
      i.Me(n)
    ), this.qe = this.qe.insert(n, this.st(n).delete(e)), r && (this.ke = this.ke.insert(n, r));
  }
  removeTarget(e) {
    this.Be.delete(e);
  }
  /**
   * Returns the current count of documents in the target. This includes both
   * the number of documents that the LocalStore considers to be part of the
   * target as well as any accumulated changes.
   */
  Ye(e) {
    const n = this.Ge(e).Ce();
    return this.Le.getRemoteKeysForTarget(e).size + n.addedDocuments.size - n.removedDocuments.size;
  }
  /**
   * Increment the number of acks needed from watch before we can consider the
   * server to be 'in-sync' with the client's active targets.
   */
  xe(e) {
    this.Ge(e).xe();
  }
  Ge(e) {
    let n = this.Be.get(e);
    return n || (n = new Hp(), this.Be.set(e, n)), n;
  }
  st(e) {
    let n = this.qe.get(e);
    return n || (n = new ut(be), this.qe = this.qe.insert(e, n)), n;
  }
  /**
   * Verifies that the user is still interested in this target (by calling
   * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs
   * from watch.
   */
  ze(e) {
    const n = this.Je(e) !== null;
    return n || Z("WatchChangeAggregator", "Detected inactive target", e), n;
  }
  /**
   * Returns the TargetData for an active target (i.e. a target that the user
   * is still interested in that has no outstanding target change requests).
   */
  Je(e) {
    const n = this.Be.get(e);
    return n && n.Se ? null : this.Le.ot(e);
  }
  /**
   * Resets the state of a Watch target to its initial state (e.g. sets
   * 'current' to false, clears the resume token and removes its target mapping
   * from all documents).
   */
  je(e) {
    this.Be.set(e, new Hp()), this.Le.getRemoteKeysForTarget(e).forEach((n) => {
      this.Ue(
        e,
        n,
        /*updatedDocument=*/
        null
      );
    });
  }
  /**
   * Returns whether the LocalStore considers the document to be part of the
   * specified target.
   */
  it(e, n) {
    return this.Le.getRemoteKeysForTarget(e).has(n);
  }
}
function Gp() {
  return new Me(se.comparator);
}
function Wp() {
  return new Me(se.comparator);
}
const EO = {
  asc: "ASCENDING",
  desc: "DESCENDING"
}, bO = {
  "<": "LESS_THAN",
  "<=": "LESS_THAN_OR_EQUAL",
  ">": "GREATER_THAN",
  ">=": "GREATER_THAN_OR_EQUAL",
  "==": "EQUAL",
  "!=": "NOT_EQUAL",
  "array-contains": "ARRAY_CONTAINS",
  in: "IN",
  "not-in": "NOT_IN",
  "array-contains-any": "ARRAY_CONTAINS_ANY"
}, TO = {
  and: "AND",
  or: "OR"
};
class IO {
  constructor(e, n) {
    this.databaseId = e, this.useProto3Json = n;
  }
}
function Qu(t, e) {
  return t.useProto3Json || ja(e) ? e : {
    value: e
  };
}
function ua(t, e) {
  return t.useProto3Json ? `${new Date(1e3 * e.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "")}.${("000000000" + e.nanoseconds).slice(-9)}Z` : {
    seconds: "" + e.seconds,
    nanos: e.nanoseconds
  };
}
function qv(t, e) {
  return t.useProto3Json ? e.toBase64() : e.toUint8Array();
}
function SO(t, e) {
  return ua(t, e.toTimestamp());
}
function ln(t) {
  return De(!!t), fe.fromTimestamp(function(n) {
    const r = Zn(n);
    return new et(r.seconds, r.nanos);
  }(t));
}
function Zl(t, e) {
  return Yu(t, e).canonicalString();
}
function Yu(t, e) {
  const n = function(i) {
    return new Le(["projects", i.projectId, "databases", i.database]);
  }(t).child("documents");
  return e === void 0 ? n : n.child(e);
}
function zv(t) {
  const e = Le.fromString(t);
  return De(Qv(e)), e;
}
function Ju(t, e) {
  return Zl(t.databaseId, e.path);
}
function Gc(t, e) {
  const n = zv(e);
  if (n.get(1) !== t.databaseId.projectId) throw new re(q.INVALID_ARGUMENT, "Tried to deserialize key from different project: " + n.get(1) + " vs " + t.databaseId.projectId);
  if (n.get(3) !== t.databaseId.database) throw new re(q.INVALID_ARGUMENT, "Tried to deserialize key from different database: " + n.get(3) + " vs " + t.databaseId.database);
  return new se(Hv(n));
}
function Kv(t, e) {
  return Zl(t.databaseId, e);
}
function AO(t) {
  const e = zv(t);
  return e.length === 4 ? Le.emptyPath() : Hv(e);
}
function Xu(t) {
  return new Le(["projects", t.databaseId.projectId, "databases", t.databaseId.database]).canonicalString();
}
function Hv(t) {
  return De(t.length > 4 && t.get(4) === "documents"), t.popFirst(5);
}
function Qp(t, e, n) {
  return {
    name: Ju(t, e),
    fields: n.value.mapValue.fields
  };
}
function RO(t, e) {
  let n;
  if ("targetChange" in e) {
    e.targetChange;
    const r = function(l) {
      return l === "NO_CHANGE" ? 0 : l === "ADD" ? 1 : l === "REMOVE" ? 2 : l === "CURRENT" ? 3 : l === "RESET" ? 4 : ce();
    }(e.targetChange.targetChangeType || "NO_CHANGE"), i = e.targetChange.targetIds || [], s = function(l, h) {
      return l.useProto3Json ? (De(h === void 0 || typeof h == "string"), ft.fromBase64String(h || "")) : (De(h === void 0 || // Check if the value is an instance of both Buffer and Uint8Array,
      // despite the fact that Buffer extends Uint8Array. In some
      // environments, such as jsdom, the prototype chain of Buffer
      // does not indicate that it extends Uint8Array.
      h instanceof Buffer || h instanceof Uint8Array), ft.fromUint8Array(h || new Uint8Array()));
    }(t, e.targetChange.resumeToken), o = e.targetChange.cause, a = o && function(l) {
      const h = l.code === void 0 ? q.UNKNOWN : jv(l.code);
      return new re(h, l.message || "");
    }(o);
    n = new Bv(r, i, s, a || null);
  } else if ("documentChange" in e) {
    e.documentChange;
    const r = e.documentChange;
    r.document, r.document.name, r.document.updateTime;
    const i = Gc(t, r.document.name), s = ln(r.document.updateTime), o = r.document.createTime ? ln(r.document.createTime) : fe.min(), a = new jt({
      mapValue: {
        fields: r.document.fields
      }
    }), u = vt.newFoundDocument(i, s, o, a), l = r.targetIds || [], h = r.removedTargetIds || [];
    n = new Uo(l, h, u.key, u);
  } else if ("documentDelete" in e) {
    e.documentDelete;
    const r = e.documentDelete;
    r.document;
    const i = Gc(t, r.document), s = r.readTime ? ln(r.readTime) : fe.min(), o = vt.newNoDocument(i, s), a = r.removedTargetIds || [];
    n = new Uo([], a, o.key, o);
  } else if ("documentRemove" in e) {
    e.documentRemove;
    const r = e.documentRemove;
    r.document;
    const i = Gc(t, r.document), s = r.removedTargetIds || [];
    n = new Uo([], s, i, null);
  } else {
    if (!("filter" in e)) return ce();
    {
      e.filter;
      const r = e.filter;
      r.targetId;
      const { count: i = 0, unchangedNames: s } = r, o = new gO(i, s), a = r.targetId;
      n = new $v(a, o);
    }
  }
  return n;
}
function CO(t, e) {
  let n;
  if (e instanceof js) n = {
    update: Qp(t, e.key, e.value)
  };
  else if (e instanceof Uv) n = {
    delete: Ju(t, e.key)
  };
  else if (e instanceof $r) n = {
    update: Qp(t, e.key, e.data),
    updateMask: VO(e.fieldMask)
  };
  else {
    if (!(e instanceof dO)) return ce();
    n = {
      verify: Ju(t, e.key)
    };
  }
  return e.fieldTransforms.length > 0 && (n.updateTransforms = e.fieldTransforms.map((r) => function(s, o) {
    const a = o.transform;
    if (a instanceof aa) return {
      fieldPath: o.field.canonicalString(),
      setToServerValue: "REQUEST_TIME"
    };
    if (a instanceof As) return {
      fieldPath: o.field.canonicalString(),
      appendMissingElements: {
        values: a.elements
      }
    };
    if (a instanceof Rs) return {
      fieldPath: o.field.canonicalString(),
      removeAllFromArray: {
        values: a.elements
      }
    };
    if (a instanceof ca) return {
      fieldPath: o.field.canonicalString(),
      increment: a.Pe
    };
    throw ce();
  }(0, r))), e.precondition.isNone || (n.currentDocument = function(i, s) {
    return s.updateTime !== void 0 ? {
      updateTime: SO(i, s.updateTime)
    } : s.exists !== void 0 ? {
      exists: s.exists
    } : ce();
  }(t, e.precondition)), n;
}
function PO(t, e) {
  return t && t.length > 0 ? (De(e !== void 0), t.map((n) => function(i, s) {
    let o = i.updateTime ? ln(i.updateTime) : ln(s);
    return o.isEqual(fe.min()) && // The Firestore Emulator currently returns an update time of 0 for
    // deletes of non-existing documents (rather than null). This breaks the
    // test "get deleted doc while offline with source=cache" as NoDocuments
    // with version 0 are filtered by IndexedDb's RemoteDocumentCache.
    // TODO(#2149): Remove this when Emulator is fixed
    (o = ln(s)), new lO(o, i.transformResults || []);
  }(n, e))) : [];
}
function kO(t, e) {
  return {
    documents: [Kv(t, e.path)]
  };
}
function OO(t, e) {
  const n = {
    structuredQuery: {}
  }, r = e.path;
  let i;
  e.collectionGroup !== null ? (i = r, n.structuredQuery.from = [{
    collectionId: e.collectionGroup,
    allDescendants: !0
  }]) : (i = r.popLast(), n.structuredQuery.from = [{
    collectionId: r.lastSegment()
  }]), n.parent = Kv(t, i);
  const s = function(l) {
    if (l.length !== 0)
      return Wv(mn.create(
        l,
        "and"
        /* CompositeOperator.AND */
      ));
  }(e.filters);
  s && (n.structuredQuery.where = s);
  const o = function(l) {
    if (l.length !== 0)
      return l.map((h) => (
        // visible for testing
        function(y) {
          return {
            field: Jr(y.field),
            direction: xO(y.dir)
          };
        }(h)
      ));
  }(e.orderBy);
  o && (n.structuredQuery.orderBy = o);
  const a = Qu(t, e.limit);
  return a !== null && (n.structuredQuery.limit = a), e.startAt && (n.structuredQuery.startAt = function(l) {
    return {
      before: l.inclusive,
      values: l.position
    };
  }(e.startAt)), e.endAt && (n.structuredQuery.endAt = function(l) {
    return {
      before: !l.inclusive,
      values: l.position
    };
  }(e.endAt)), {
    _t: n,
    parent: i
  };
}
function DO(t) {
  let e = AO(t.parent);
  const n = t.structuredQuery, r = n.from ? n.from.length : 0;
  let i = null;
  if (r > 0) {
    De(r === 1);
    const h = n.from[0];
    h.allDescendants ? i = h.collectionId : e = e.child(h.collectionId);
  }
  let s = [];
  n.where && (s = function(f) {
    const y = Gv(f);
    return y instanceof mn && bv(y) ? y.getFilters() : [y];
  }(n.where));
  let o = [];
  n.orderBy && (o = function(f) {
    return f.map((y) => function(S) {
      return new oa(
        Xr(S.field),
        // visible for testing
        function(m) {
          switch (m) {
            case "ASCENDING":
              return "asc";
            case "DESCENDING":
              return "desc";
            default:
              return;
          }
        }(S.direction)
      );
    }(y));
  }(n.orderBy));
  let a = null;
  n.limit && (a = function(f) {
    let y;
    return y = typeof f == "object" ? f.value : f, ja(y) ? null : y;
  }(n.limit));
  let u = null;
  n.startAt && (u = function(f) {
    const y = !!f.before, b = f.values || [];
    return new sa(b, y);
  }(n.startAt));
  let l = null;
  return n.endAt && (l = function(f) {
    const y = !f.before, b = f.values || [];
    return new sa(b, y);
  }(n.endAt)), Yk(e, i, o, s, a, "F", u, l);
}
function NO(t, e) {
  const n = function(i) {
    switch (i) {
      case "TargetPurposeListen":
        return null;
      case "TargetPurposeExistenceFilterMismatch":
        return "existence-filter-mismatch";
      case "TargetPurposeExistenceFilterMismatchBloom":
        return "existence-filter-mismatch-bloom";
      case "TargetPurposeLimboResolution":
        return "limbo-document";
      default:
        return ce();
    }
  }(e.purpose);
  return n == null ? null : {
    "goog-listen-tags": n
  };
}
function Gv(t) {
  return t.unaryFilter !== void 0 ? function(n) {
    switch (n.unaryFilter.op) {
      case "IS_NAN":
        const r = Xr(n.unaryFilter.field);
        return Ze.create(r, "==", {
          doubleValue: NaN
        });
      case "IS_NULL":
        const i = Xr(n.unaryFilter.field);
        return Ze.create(i, "==", {
          nullValue: "NULL_VALUE"
        });
      case "IS_NOT_NAN":
        const s = Xr(n.unaryFilter.field);
        return Ze.create(s, "!=", {
          doubleValue: NaN
        });
      case "IS_NOT_NULL":
        const o = Xr(n.unaryFilter.field);
        return Ze.create(o, "!=", {
          nullValue: "NULL_VALUE"
        });
      default:
        return ce();
    }
  }(t) : t.fieldFilter !== void 0 ? function(n) {
    return Ze.create(Xr(n.fieldFilter.field), function(i) {
      switch (i) {
        case "EQUAL":
          return "==";
        case "NOT_EQUAL":
          return "!=";
        case "GREATER_THAN":
          return ">";
        case "GREATER_THAN_OR_EQUAL":
          return ">=";
        case "LESS_THAN":
          return "<";
        case "LESS_THAN_OR_EQUAL":
          return "<=";
        case "ARRAY_CONTAINS":
          return "array-contains";
        case "IN":
          return "in";
        case "NOT_IN":
          return "not-in";
        case "ARRAY_CONTAINS_ANY":
          return "array-contains-any";
        default:
          return ce();
      }
    }(n.fieldFilter.op), n.fieldFilter.value);
  }(t) : t.compositeFilter !== void 0 ? function(n) {
    return mn.create(n.compositeFilter.filters.map((r) => Gv(r)), function(i) {
      switch (i) {
        case "AND":
          return "and";
        case "OR":
          return "or";
        default:
          return ce();
      }
    }(n.compositeFilter.op));
  }(t) : ce();
}
function xO(t) {
  return EO[t];
}
function LO(t) {
  return bO[t];
}
function MO(t) {
  return TO[t];
}
function Jr(t) {
  return {
    fieldPath: t.canonicalString()
  };
}
function Xr(t) {
  return ct.fromServerFormat(t.fieldPath);
}
function Wv(t) {
  return t instanceof Ze ? function(n) {
    if (n.op === "==") {
      if (Lp(n.value)) return {
        unaryFilter: {
          field: Jr(n.field),
          op: "IS_NAN"
        }
      };
      if (xp(n.value)) return {
        unaryFilter: {
          field: Jr(n.field),
          op: "IS_NULL"
        }
      };
    } else if (n.op === "!=") {
      if (Lp(n.value)) return {
        unaryFilter: {
          field: Jr(n.field),
          op: "IS_NOT_NAN"
        }
      };
      if (xp(n.value)) return {
        unaryFilter: {
          field: Jr(n.field),
          op: "IS_NOT_NULL"
        }
      };
    }
    return {
      fieldFilter: {
        field: Jr(n.field),
        op: LO(n.op),
        value: n.value
      }
    };
  }(t) : t instanceof mn ? function(n) {
    const r = n.getFilters().map((i) => Wv(i));
    return r.length === 1 ? r[0] : {
      compositeFilter: {
        op: MO(n.op),
        filters: r
      }
    };
  }(t) : ce();
}
function VO(t) {
  const e = [];
  return t.fields.forEach((n) => e.push(n.canonicalString())), {
    fieldPaths: e
  };
}
function Qv(t) {
  return t.length >= 4 && t.get(0) === "projects" && t.get(2) === "databases";
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Hn {
  constructor(e, n, r, i, s = fe.min(), o = fe.min(), a = ft.EMPTY_BYTE_STRING, u = null) {
    this.target = e, this.targetId = n, this.purpose = r, this.sequenceNumber = i, this.snapshotVersion = s, this.lastLimboFreeSnapshotVersion = o, this.resumeToken = a, this.expectedCount = u;
  }
  /** Creates a new target data instance with an updated sequence number. */
  withSequenceNumber(e) {
    return new Hn(this.target, this.targetId, this.purpose, e, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken, this.expectedCount);
  }
  /**
   * Creates a new target data instance with an updated resume token and
   * snapshot version.
   */
  withResumeToken(e, n) {
    return new Hn(
      this.target,
      this.targetId,
      this.purpose,
      this.sequenceNumber,
      n,
      this.lastLimboFreeSnapshotVersion,
      e,
      /* expectedCount= */
      null
    );
  }
  /**
   * Creates a new target data instance with an updated expected count.
   */
  withExpectedCount(e) {
    return new Hn(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken, e);
  }
  /**
   * Creates a new target data instance with an updated last limbo free
   * snapshot version number.
   */
  withLastLimboFreeSnapshotVersion(e) {
    return new Hn(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, e, this.resumeToken, this.expectedCount);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class FO {
  constructor(e) {
    this.ct = e;
  }
}
function UO(t) {
  const e = DO({
    parent: t.parent,
    structuredQuery: t.structuredQuery
  });
  return t.limitType === "LAST" ? Wu(
    e,
    e.limit,
    "L"
    /* LimitType.Last */
  ) : e;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class jO {
  constructor() {
    this.an = new $O();
  }
  addToCollectionParentIndex(e, n) {
    return this.an.add(n), z.resolve();
  }
  getCollectionParents(e, n) {
    return z.resolve(this.an.getEntries(n));
  }
  addFieldIndex(e, n) {
    return z.resolve();
  }
  deleteFieldIndex(e, n) {
    return z.resolve();
  }
  deleteAllFieldIndexes(e) {
    return z.resolve();
  }
  createTargetIndexes(e, n) {
    return z.resolve();
  }
  getDocumentsMatchingTarget(e, n) {
    return z.resolve(null);
  }
  getIndexType(e, n) {
    return z.resolve(
      0
      /* IndexType.NONE */
    );
  }
  getFieldIndexes(e, n) {
    return z.resolve([]);
  }
  getNextCollectionGroupToUpdate(e) {
    return z.resolve(null);
  }
  getMinOffset(e, n) {
    return z.resolve(Xn.min());
  }
  getMinOffsetFromCollectionGroup(e, n) {
    return z.resolve(Xn.min());
  }
  updateCollectionGroup(e, n, r) {
    return z.resolve();
  }
  updateIndexEntries(e, n) {
    return z.resolve();
  }
}
class $O {
  constructor() {
    this.index = {};
  }
  // Returns false if the entry already existed.
  add(e) {
    const n = e.lastSegment(), r = e.popLast(), i = this.index[n] || new ut(Le.comparator), s = !i.has(r);
    return this.index[n] = i.add(r), s;
  }
  has(e) {
    const n = e.lastSegment(), r = e.popLast(), i = this.index[n];
    return i && i.has(r);
  }
  getEntries(e) {
    return (this.index[e] || new ut(Le.comparator)).toArray();
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class vi {
  constructor(e) {
    this.Nn = e;
  }
  next() {
    return this.Nn += 2, this.Nn;
  }
  static Ln() {
    return new vi(0);
  }
  static Bn() {
    return new vi(-1);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class BO {
  constructor() {
    this.changes = new Pi((e) => e.toString(), (e, n) => e.isEqual(n)), this.changesApplied = !1;
  }
  /**
   * Buffers a `RemoteDocumentCache.addEntry()` call.
   *
   * You can only modify documents that have already been retrieved via
   * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
   */
  addEntry(e) {
    this.assertNotApplied(), this.changes.set(e.key, e);
  }
  /**
   * Buffers a `RemoteDocumentCache.removeEntry()` call.
   *
   * You can only remove documents that have already been retrieved via
   * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
   */
  removeEntry(e, n) {
    this.assertNotApplied(), this.changes.set(e, vt.newInvalidDocument(e).setReadTime(n));
  }
  /**
   * Looks up an entry in the cache. The buffered changes will first be checked,
   * and if no buffered change applies, this will forward to
   * `RemoteDocumentCache.getEntry()`.
   *
   * @param transaction - The transaction in which to perform any persistence
   *     operations.
   * @param documentKey - The key of the entry to look up.
   * @returns The cached document or an invalid document if we have nothing
   * cached.
   */
  getEntry(e, n) {
    this.assertNotApplied();
    const r = this.changes.get(n);
    return r !== void 0 ? z.resolve(r) : this.getFromCache(e, n);
  }
  /**
   * Looks up several entries in the cache, forwarding to
   * `RemoteDocumentCache.getEntry()`.
   *
   * @param transaction - The transaction in which to perform any persistence
   *     operations.
   * @param documentKeys - The keys of the entries to look up.
   * @returns A map of cached documents, indexed by key. If an entry cannot be
   *     found, the corresponding key will be mapped to an invalid document.
   */
  getEntries(e, n) {
    return this.getAllFromCache(e, n);
  }
  /**
   * Applies buffered changes to the underlying RemoteDocumentCache, using
   * the provided transaction.
   */
  apply(e) {
    return this.assertNotApplied(), this.changesApplied = !0, this.applyChanges(e);
  }
  /** Helper to assert this.changes is not null  */
  assertNotApplied() {
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class qO {
  constructor(e, n) {
    this.overlayedDocument = e, this.mutatedFields = n;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class zO {
  constructor(e, n, r, i) {
    this.remoteDocumentCache = e, this.mutationQueue = n, this.documentOverlayCache = r, this.indexManager = i;
  }
  /**
   * Get the local view of the document identified by `key`.
   *
   * @returns Local view of the document or null if we don't have any cached
   * state for it.
   */
  getDocument(e, n) {
    let r = null;
    return this.documentOverlayCache.getOverlay(e, n).next((i) => (r = i, this.remoteDocumentCache.getEntry(e, n))).next((i) => (r !== null && us(r.mutation, i, Xt.empty(), et.now()), i));
  }
  /**
   * Gets the local view of the documents identified by `keys`.
   *
   * If we don't have cached state for a document in `keys`, a NoDocument will
   * be stored for that key in the resulting set.
   */
  getDocuments(e, n) {
    return this.remoteDocumentCache.getEntries(e, n).next((r) => this.getLocalViewOfDocuments(e, r, ve()).next(() => r));
  }
  /**
   * Similar to `getDocuments`, but creates the local view from the given
   * `baseDocs` without retrieving documents from the local store.
   *
   * @param transaction - The transaction this operation is scoped to.
   * @param docs - The documents to apply local mutations to get the local views.
   * @param existenceStateChanged - The set of document keys whose existence state
   *   is changed. This is useful to determine if some documents overlay needs
   *   to be recalculated.
   */
  getLocalViewOfDocuments(e, n, r = ve()) {
    const i = gr();
    return this.populateOverlays(e, i, n).next(() => this.computeViews(e, n, i, r).next((s) => {
      let o = ts();
      return s.forEach((a, u) => {
        o = o.insert(a, u.overlayedDocument);
      }), o;
    }));
  }
  /**
   * Gets the overlayed documents for the given document map, which will include
   * the local view of those documents and a `FieldMask` indicating which fields
   * are mutated locally, `null` if overlay is a Set or Delete mutation.
   */
  getOverlayedDocuments(e, n) {
    const r = gr();
    return this.populateOverlays(e, r, n).next(() => this.computeViews(e, n, r, ve()));
  }
  /**
   * Fetches the overlays for {@code docs} and adds them to provided overlay map
   * if the map does not already contain an entry for the given document key.
   */
  populateOverlays(e, n, r) {
    const i = [];
    return r.forEach((s) => {
      n.has(s) || i.push(s);
    }), this.documentOverlayCache.getOverlays(e, i).next((s) => {
      s.forEach((o, a) => {
        n.set(o, a);
      });
    });
  }
  /**
   * Computes the local view for the given documents.
   *
   * @param docs - The documents to compute views for. It also has the base
   *   version of the documents.
   * @param overlays - The overlays that need to be applied to the given base
   *   version of the documents.
   * @param existenceStateChanged - A set of documents whose existence states
   *   might have changed. This is used to determine if we need to re-calculate
   *   overlays from mutation queues.
   * @return A map represents the local documents view.
   */
  computeViews(e, n, r, i) {
    let s = Dn();
    const o = cs(), a = function() {
      return cs();
    }();
    return n.forEach((u, l) => {
      const h = r.get(l.key);
      i.has(l.key) && (h === void 0 || h.mutation instanceof $r) ? s = s.insert(l.key, l) : h !== void 0 ? (o.set(l.key, h.mutation.getFieldMask()), us(h.mutation, l, h.mutation.getFieldMask(), et.now())) : (
        // no overlay exists
        // Using EMPTY to indicate there is no overlay for the document.
        o.set(l.key, Xt.empty())
      );
    }), this.recalculateAndSaveOverlays(e, s).next((u) => (u.forEach((l, h) => o.set(l, h)), n.forEach((l, h) => {
      var f;
      return a.set(l, new qO(h, (f = o.get(l)) !== null && f !== void 0 ? f : null));
    }), a));
  }
  recalculateAndSaveOverlays(e, n) {
    const r = cs();
    let i = new Me((o, a) => o - a), s = ve();
    return this.mutationQueue.getAllMutationBatchesAffectingDocumentKeys(e, n).next((o) => {
      for (const a of o) a.keys().forEach((u) => {
        const l = n.get(u);
        if (l === null) return;
        let h = r.get(u) || Xt.empty();
        h = a.applyToLocalView(l, h), r.set(u, h);
        const f = (i.get(a.batchId) || ve()).add(u);
        i = i.insert(a.batchId, f);
      });
    }).next(() => {
      const o = [], a = i.getReverseIterator();
      for (; a.hasNext(); ) {
        const u = a.getNext(), l = u.key, h = u.value, f = kv();
        h.forEach((y) => {
          if (!s.has(y)) {
            const b = Vv(n.get(y), r.get(y));
            b !== null && f.set(y, b), s = s.add(y);
          }
        }), o.push(this.documentOverlayCache.saveOverlays(e, l, f));
      }
      return z.waitFor(o);
    }).next(() => r);
  }
  /**
   * Recalculates overlays by reading the documents from remote document cache
   * first, and saves them after they are calculated.
   */
  recalculateAndSaveOverlaysForDocumentKeys(e, n) {
    return this.remoteDocumentCache.getEntries(e, n).next((r) => this.recalculateAndSaveOverlays(e, r));
  }
  /**
   * Performs a query against the local view of all documents.
   *
   * @param transaction - The persistence transaction.
   * @param query - The query to match documents against.
   * @param offset - Read time and key to start scanning by (exclusive).
   * @param context - A optional tracker to keep a record of important details
   *   during database local query execution.
   */
  getDocumentsMatchingQuery(e, n, r, i) {
    return function(o) {
      return se.isDocumentKey(o.path) && o.collectionGroup === null && o.filters.length === 0;
    }(n) ? this.getDocumentsMatchingDocumentQuery(e, n.path) : Jk(n) ? this.getDocumentsMatchingCollectionGroupQuery(e, n, r, i) : this.getDocumentsMatchingCollectionQuery(e, n, r, i);
  }
  /**
   * Given a collection group, returns the next documents that follow the provided offset, along
   * with an updated batch ID.
   *
   * <p>The documents returned by this method are ordered by remote version from the provided
   * offset. If there are no more remote documents after the provided offset, documents with
   * mutations in order of batch id from the offset are returned. Since all documents in a batch are
   * returned together, the total number of documents returned can exceed {@code count}.
   *
   * @param transaction
   * @param collectionGroup The collection group for the documents.
   * @param offset The offset to index into.
   * @param count The number of documents to return
   * @return A LocalWriteResult with the documents that follow the provided offset and the last processed batch id.
   */
  getNextDocuments(e, n, r, i) {
    return this.remoteDocumentCache.getAllFromCollectionGroup(e, n, r, i).next((s) => {
      const o = i - s.size > 0 ? this.documentOverlayCache.getOverlaysForCollectionGroup(e, n, r.largestBatchId, i - s.size) : z.resolve(gr());
      let a = -1, u = s;
      return o.next((l) => z.forEach(l, (h, f) => (a < f.largestBatchId && (a = f.largestBatchId), s.get(h) ? z.resolve() : this.remoteDocumentCache.getEntry(e, h).next((y) => {
        u = u.insert(h, y);
      }))).next(() => this.populateOverlays(e, l, s)).next(() => this.computeViews(e, u, l, ve())).next((h) => ({
        batchId: a,
        changes: Pv(h)
      })));
    });
  }
  getDocumentsMatchingDocumentQuery(e, n) {
    return this.getDocument(e, new se(n)).next((r) => {
      let i = ts();
      return r.isFoundDocument() && (i = i.insert(r.key, r)), i;
    });
  }
  getDocumentsMatchingCollectionGroupQuery(e, n, r, i) {
    const s = n.collectionGroup;
    let o = ts();
    return this.indexManager.getCollectionParents(e, s).next((a) => z.forEach(a, (u) => {
      const l = function(f, y) {
        return new $a(
          y,
          /*collectionGroup=*/
          null,
          f.explicitOrderBy.slice(),
          f.filters.slice(),
          f.limit,
          f.limitType,
          f.startAt,
          f.endAt
        );
      }(n, u.child(s));
      return this.getDocumentsMatchingCollectionQuery(e, l, r, i).next((h) => {
        h.forEach((f, y) => {
          o = o.insert(f, y);
        });
      });
    }).next(() => o));
  }
  getDocumentsMatchingCollectionQuery(e, n, r, i) {
    let s;
    return this.documentOverlayCache.getOverlaysForCollection(e, n.path, r.largestBatchId).next((o) => (s = o, this.remoteDocumentCache.getDocumentsMatchingQuery(e, n, r, s, i))).next((o) => {
      s.forEach((u, l) => {
        const h = l.getKey();
        o.get(h) === null && (o = o.insert(h, vt.newInvalidDocument(h)));
      });
      let a = ts();
      return o.forEach((u, l) => {
        const h = s.get(u);
        h !== void 0 && us(h.mutation, l, Xt.empty(), et.now()), // Finally, insert the documents that still match the query
        za(n, l) && (a = a.insert(u, l));
      }), a;
    });
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class KO {
  constructor(e) {
    this.serializer = e, this.lr = /* @__PURE__ */ new Map(), this.hr = /* @__PURE__ */ new Map();
  }
  getBundleMetadata(e, n) {
    return z.resolve(this.lr.get(n));
  }
  saveBundleMetadata(e, n) {
    return this.lr.set(
      n.id,
      /** Decodes a BundleMetadata proto into a BundleMetadata object. */
      function(i) {
        return {
          id: i.id,
          version: i.version,
          createTime: ln(i.createTime)
        };
      }(n)
    ), z.resolve();
  }
  getNamedQuery(e, n) {
    return z.resolve(this.hr.get(n));
  }
  saveNamedQuery(e, n) {
    return this.hr.set(n.name, function(i) {
      return {
        name: i.name,
        query: UO(i.bundledQuery),
        readTime: ln(i.readTime)
      };
    }(n)), z.resolve();
  }
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class HO {
  constructor() {
    this.overlays = new Me(se.comparator), this.Pr = /* @__PURE__ */ new Map();
  }
  getOverlay(e, n) {
    return z.resolve(this.overlays.get(n));
  }
  getOverlays(e, n) {
    const r = gr();
    return z.forEach(n, (i) => this.getOverlay(e, i).next((s) => {
      s !== null && r.set(i, s);
    })).next(() => r);
  }
  saveOverlays(e, n, r) {
    return r.forEach((i, s) => {
      this.ht(e, n, s);
    }), z.resolve();
  }
  removeOverlaysForBatchId(e, n, r) {
    const i = this.Pr.get(r);
    return i !== void 0 && (i.forEach((s) => this.overlays = this.overlays.remove(s)), this.Pr.delete(r)), z.resolve();
  }
  getOverlaysForCollection(e, n, r) {
    const i = gr(), s = n.length + 1, o = new se(n.child("")), a = this.overlays.getIteratorFrom(o);
    for (; a.hasNext(); ) {
      const u = a.getNext().value, l = u.getKey();
      if (!n.isPrefixOf(l.path)) break;
      l.path.length === s && u.largestBatchId > r && i.set(u.getKey(), u);
    }
    return z.resolve(i);
  }
  getOverlaysForCollectionGroup(e, n, r, i) {
    let s = new Me((l, h) => l - h);
    const o = this.overlays.getIterator();
    for (; o.hasNext(); ) {
      const l = o.getNext().value;
      if (l.getKey().getCollectionGroup() === n && l.largestBatchId > r) {
        let h = s.get(l.largestBatchId);
        h === null && (h = gr(), s = s.insert(l.largestBatchId, h)), h.set(l.getKey(), l);
      }
    }
    const a = gr(), u = s.getIterator();
    for (; u.hasNext() && (u.getNext().value.forEach((l, h) => a.set(l, h)), !(a.size() >= i)); )
      ;
    return z.resolve(a);
  }
  ht(e, n, r) {
    const i = this.overlays.get(r.key);
    if (i !== null) {
      const o = this.Pr.get(i.largestBatchId).delete(r.key);
      this.Pr.set(i.largestBatchId, o);
    }
    this.overlays = this.overlays.insert(r.key, new mO(n, r));
    let s = this.Pr.get(n);
    s === void 0 && (s = ve(), this.Pr.set(n, s)), this.Pr.set(n, s.add(r.key));
  }
}
/**
 * @license
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class GO {
  constructor() {
    this.sessionToken = ft.EMPTY_BYTE_STRING;
  }
  getSessionToken(e) {
    return z.resolve(this.sessionToken);
  }
  setSessionToken(e, n) {
    return this.sessionToken = n, z.resolve();
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ef {
  constructor() {
    this.Ir = new ut(nt.Tr), // A set of outstanding references to a document sorted by target id.
    this.Er = new ut(nt.dr);
  }
  /** Returns true if the reference set contains no references. */
  isEmpty() {
    return this.Ir.isEmpty();
  }
  /** Adds a reference to the given document key for the given ID. */
  addReference(e, n) {
    const r = new nt(e, n);
    this.Ir = this.Ir.add(r), this.Er = this.Er.add(r);
  }
  /** Add references to the given document keys for the given ID. */
  Ar(e, n) {
    e.forEach((r) => this.addReference(r, n));
  }
  /**
   * Removes a reference to the given document key for the given
   * ID.
   */
  removeReference(e, n) {
    this.Rr(new nt(e, n));
  }
  Vr(e, n) {
    e.forEach((r) => this.removeReference(r, n));
  }
  /**
   * Clears all references with a given ID. Calls removeRef() for each key
   * removed.
   */
  mr(e) {
    const n = new se(new Le([])), r = new nt(n, e), i = new nt(n, e + 1), s = [];
    return this.Er.forEachInRange([r, i], (o) => {
      this.Rr(o), s.push(o.key);
    }), s;
  }
  gr() {
    this.Ir.forEach((e) => this.Rr(e));
  }
  Rr(e) {
    this.Ir = this.Ir.delete(e), this.Er = this.Er.delete(e);
  }
  pr(e) {
    const n = new se(new Le([])), r = new nt(n, e), i = new nt(n, e + 1);
    let s = ve();
    return this.Er.forEachInRange([r, i], (o) => {
      s = s.add(o.key);
    }), s;
  }
  containsKey(e) {
    const n = new nt(e, 0), r = this.Ir.firstAfterOrEqual(n);
    return r !== null && e.isEqual(r.key);
  }
}
class nt {
  constructor(e, n) {
    this.key = e, this.yr = n;
  }
  /** Compare by key then by ID */
  static Tr(e, n) {
    return se.comparator(e.key, n.key) || be(e.yr, n.yr);
  }
  /** Compare by ID then by key */
  static dr(e, n) {
    return be(e.yr, n.yr) || se.comparator(e.key, n.key);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class WO {
  constructor(e, n) {
    this.indexManager = e, this.referenceDelegate = n, /**
    * The set of all mutations that have been sent but not yet been applied to
    * the backend.
    */
    this.mutationQueue = [], /** Next value to use when assigning sequential IDs to each mutation batch. */
    this.wr = 1, /** An ordered mapping between documents and the mutations batch IDs. */
    this.Sr = new ut(nt.Tr);
  }
  checkEmpty(e) {
    return z.resolve(this.mutationQueue.length === 0);
  }
  addMutationBatch(e, n, r, i) {
    const s = this.wr;
    this.wr++, this.mutationQueue.length > 0 && this.mutationQueue[this.mutationQueue.length - 1];
    const o = new pO(s, n, r, i);
    this.mutationQueue.push(o);
    for (const a of i) this.Sr = this.Sr.add(new nt(a.key, s)), this.indexManager.addToCollectionParentIndex(e, a.key.path.popLast());
    return z.resolve(o);
  }
  lookupMutationBatch(e, n) {
    return z.resolve(this.br(n));
  }
  getNextMutationBatchAfterBatchId(e, n) {
    const r = n + 1, i = this.Dr(r), s = i < 0 ? 0 : i;
    return z.resolve(this.mutationQueue.length > s ? this.mutationQueue[s] : null);
  }
  getHighestUnacknowledgedBatchId() {
    return z.resolve(this.mutationQueue.length === 0 ? -1 : this.wr - 1);
  }
  getAllMutationBatches(e) {
    return z.resolve(this.mutationQueue.slice());
  }
  getAllMutationBatchesAffectingDocumentKey(e, n) {
    const r = new nt(n, 0), i = new nt(n, Number.POSITIVE_INFINITY), s = [];
    return this.Sr.forEachInRange([r, i], (o) => {
      const a = this.br(o.yr);
      s.push(a);
    }), z.resolve(s);
  }
  getAllMutationBatchesAffectingDocumentKeys(e, n) {
    let r = new ut(be);
    return n.forEach((i) => {
      const s = new nt(i, 0), o = new nt(i, Number.POSITIVE_INFINITY);
      this.Sr.forEachInRange([s, o], (a) => {
        r = r.add(a.yr);
      });
    }), z.resolve(this.Cr(r));
  }
  getAllMutationBatchesAffectingQuery(e, n) {
    const r = n.path, i = r.length + 1;
    let s = r;
    se.isDocumentKey(s) || (s = s.child(""));
    const o = new nt(new se(s), 0);
    let a = new ut(be);
    return this.Sr.forEachWhile((u) => {
      const l = u.key.path;
      return !!r.isPrefixOf(l) && // Rows with document keys more than one segment longer than the query
      // path can't be matches. For example, a query on 'rooms' can't match
      // the document /rooms/abc/messages/xyx.
      // TODO(mcg): we'll need a different scanner when we implement
      // ancestor queries.
      (l.length === i && (a = a.add(u.yr)), !0);
    }, o), z.resolve(this.Cr(a));
  }
  Cr(e) {
    const n = [];
    return e.forEach((r) => {
      const i = this.br(r);
      i !== null && n.push(i);
    }), n;
  }
  removeMutationBatch(e, n) {
    De(this.vr(n.batchId, "removed") === 0), this.mutationQueue.shift();
    let r = this.Sr;
    return z.forEach(n.mutations, (i) => {
      const s = new nt(i.key, n.batchId);
      return r = r.delete(s), this.referenceDelegate.markPotentiallyOrphaned(e, i.key);
    }).next(() => {
      this.Sr = r;
    });
  }
  xn(e) {
  }
  containsKey(e, n) {
    const r = new nt(n, 0), i = this.Sr.firstAfterOrEqual(r);
    return z.resolve(n.isEqual(i && i.key));
  }
  performConsistencyCheck(e) {
    return this.mutationQueue.length, z.resolve();
  }
  /**
   * Finds the index of the given batchId in the mutation queue and asserts that
   * the resulting index is within the bounds of the queue.
   *
   * @param batchId - The batchId to search for
   * @param action - A description of what the caller is doing, phrased in passive
   * form (e.g. "acknowledged" in a routine that acknowledges batches).
   */
  vr(e, n) {
    return this.Dr(e);
  }
  /**
   * Finds the index of the given batchId in the mutation queue. This operation
   * is O(1).
   *
   * @returns The computed index of the batch with the given batchId, based on
   * the state of the queue. Note this index can be negative if the requested
   * batchId has already been removed from the queue or past the end of the
   * queue if the batchId is larger than the last added batch.
   */
  Dr(e) {
    return this.mutationQueue.length === 0 ? 0 : e - this.mutationQueue[0].batchId;
  }
  /**
   * A version of lookupMutationBatch that doesn't return a promise, this makes
   * other functions that uses this code easier to read and more efficient.
   */
  br(e) {
    const n = this.Dr(e);
    return n < 0 || n >= this.mutationQueue.length ? null : this.mutationQueue[n];
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class QO {
  /**
   * @param sizer - Used to assess the size of a document. For eager GC, this is
   * expected to just return 0 to avoid unnecessarily doing the work of
   * calculating the size.
   */
  constructor(e) {
    this.Fr = e, /** Underlying cache of documents and their read times. */
    this.docs = function() {
      return new Me(se.comparator);
    }(), /** Size of all cached documents. */
    this.size = 0;
  }
  setIndexManager(e) {
    this.indexManager = e;
  }
  /**
   * Adds the supplied entry to the cache and updates the cache size as appropriate.
   *
   * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer
   * returned by `newChangeBuffer()`.
   */
  addEntry(e, n) {
    const r = n.key, i = this.docs.get(r), s = i ? i.size : 0, o = this.Fr(n);
    return this.docs = this.docs.insert(r, {
      document: n.mutableCopy(),
      size: o
    }), this.size += o - s, this.indexManager.addToCollectionParentIndex(e, r.path.popLast());
  }
  /**
   * Removes the specified entry from the cache and updates the cache size as appropriate.
   *
   * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer
   * returned by `newChangeBuffer()`.
   */
  removeEntry(e) {
    const n = this.docs.get(e);
    n && (this.docs = this.docs.remove(e), this.size -= n.size);
  }
  getEntry(e, n) {
    const r = this.docs.get(n);
    return z.resolve(r ? r.document.mutableCopy() : vt.newInvalidDocument(n));
  }
  getEntries(e, n) {
    let r = Dn();
    return n.forEach((i) => {
      const s = this.docs.get(i);
      r = r.insert(i, s ? s.document.mutableCopy() : vt.newInvalidDocument(i));
    }), z.resolve(r);
  }
  getDocumentsMatchingQuery(e, n, r, i) {
    let s = Dn();
    const o = n.path, a = new se(o.child("")), u = this.docs.getIteratorFrom(a);
    for (; u.hasNext(); ) {
      const { key: l, value: { document: h } } = u.getNext();
      if (!o.isPrefixOf(l.path)) break;
      l.path.length > o.length + 1 || Dk(Ok(h), r) <= 0 || (i.has(h.key) || za(n, h)) && (s = s.insert(h.key, h.mutableCopy()));
    }
    return z.resolve(s);
  }
  getAllFromCollectionGroup(e, n, r, i) {
    ce();
  }
  Mr(e, n) {
    return z.forEach(this.docs, (r) => n(r));
  }
  newChangeBuffer(e) {
    return new YO(this);
  }
  getSize(e) {
    return z.resolve(this.size);
  }
}
class YO extends BO {
  constructor(e) {
    super(), this.ur = e;
  }
  applyChanges(e) {
    const n = [];
    return this.changes.forEach((r, i) => {
      i.isValidDocument() ? n.push(this.ur.addEntry(e, i)) : this.ur.removeEntry(r);
    }), z.waitFor(n);
  }
  getFromCache(e, n) {
    return this.ur.getEntry(e, n);
  }
  getAllFromCache(e, n) {
    return this.ur.getEntries(e, n);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class JO {
  constructor(e) {
    this.persistence = e, /**
    * Maps a target to the data about that target
    */
    this.Or = new Pi((n) => Ql(n), Yl), /** The last received snapshot version. */
    this.lastRemoteSnapshotVersion = fe.min(), /** The highest numbered target ID encountered. */
    this.highestTargetId = 0, /** The highest sequence number encountered. */
    this.Nr = 0, /**
    * A ordered bidirectional mapping between documents and the remote target
    * IDs.
    */
    this.Lr = new ef(), this.targetCount = 0, this.Br = vi.Ln();
  }
  forEachTarget(e, n) {
    return this.Or.forEach((r, i) => n(i)), z.resolve();
  }
  getLastRemoteSnapshotVersion(e) {
    return z.resolve(this.lastRemoteSnapshotVersion);
  }
  getHighestSequenceNumber(e) {
    return z.resolve(this.Nr);
  }
  allocateTargetId(e) {
    return this.highestTargetId = this.Br.next(), z.resolve(this.highestTargetId);
  }
  setTargetsMetadata(e, n, r) {
    return r && (this.lastRemoteSnapshotVersion = r), n > this.Nr && (this.Nr = n), z.resolve();
  }
  Qn(e) {
    this.Or.set(e.target, e);
    const n = e.targetId;
    n > this.highestTargetId && (this.Br = new vi(n), this.highestTargetId = n), e.sequenceNumber > this.Nr && (this.Nr = e.sequenceNumber);
  }
  addTargetData(e, n) {
    return this.Qn(n), this.targetCount += 1, z.resolve();
  }
  updateTargetData(e, n) {
    return this.Qn(n), z.resolve();
  }
  removeTargetData(e, n) {
    return this.Or.delete(n.target), this.Lr.mr(n.targetId), this.targetCount -= 1, z.resolve();
  }
  removeTargets(e, n, r) {
    let i = 0;
    const s = [];
    return this.Or.forEach((o, a) => {
      a.sequenceNumber <= n && r.get(a.targetId) === null && (this.Or.delete(o), s.push(this.removeMatchingKeysForTargetId(e, a.targetId)), i++);
    }), z.waitFor(s).next(() => i);
  }
  getTargetCount(e) {
    return z.resolve(this.targetCount);
  }
  getTargetData(e, n) {
    const r = this.Or.get(n) || null;
    return z.resolve(r);
  }
  addMatchingKeys(e, n, r) {
    return this.Lr.Ar(n, r), z.resolve();
  }
  removeMatchingKeys(e, n, r) {
    this.Lr.Vr(n, r);
    const i = this.persistence.referenceDelegate, s = [];
    return i && n.forEach((o) => {
      s.push(i.markPotentiallyOrphaned(e, o));
    }), z.waitFor(s);
  }
  removeMatchingKeysForTargetId(e, n) {
    return this.Lr.mr(n), z.resolve();
  }
  getMatchingKeysForTargetId(e, n) {
    const r = this.Lr.pr(n);
    return z.resolve(r);
  }
  containsKey(e, n) {
    return z.resolve(this.Lr.containsKey(n));
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class XO {
  /**
   * The constructor accepts a factory for creating a reference delegate. This
   * allows both the delegate and this instance to have strong references to
   * each other without having nullable fields that would then need to be
   * checked or asserted on every access.
   */
  constructor(e, n) {
    this.kr = {}, this.overlays = {}, this.qr = new Kl(0), this.Qr = !1, this.Qr = !0, this.Kr = new GO(), this.referenceDelegate = e(this), this.$r = new JO(this), this.indexManager = new jO(), this.remoteDocumentCache = function(i) {
      return new QO(i);
    }((r) => this.referenceDelegate.Ur(r)), this.serializer = new FO(n), this.Wr = new KO(this.serializer);
  }
  start() {
    return Promise.resolve();
  }
  shutdown() {
    return this.Qr = !1, Promise.resolve();
  }
  get started() {
    return this.Qr;
  }
  setDatabaseDeletedListener() {
  }
  setNetworkEnabled() {
  }
  getIndexManager(e) {
    return this.indexManager;
  }
  getDocumentOverlayCache(e) {
    let n = this.overlays[e.toKey()];
    return n || (n = new HO(), this.overlays[e.toKey()] = n), n;
  }
  getMutationQueue(e, n) {
    let r = this.kr[e.toKey()];
    return r || (r = new WO(n, this.referenceDelegate), this.kr[e.toKey()] = r), r;
  }
  getGlobalsCache() {
    return this.Kr;
  }
  getTargetCache() {
    return this.$r;
  }
  getRemoteDocumentCache() {
    return this.remoteDocumentCache;
  }
  getBundleCache() {
    return this.Wr;
  }
  runTransaction(e, n, r) {
    Z("MemoryPersistence", "Starting transaction:", e);
    const i = new ZO(this.qr.next());
    return this.referenceDelegate.Gr(), r(i).next((s) => this.referenceDelegate.zr(i).next(() => s)).toPromise().then((s) => (i.raiseOnCommittedEvent(), s));
  }
  jr(e, n) {
    return z.or(Object.values(this.kr).map((r) => () => r.containsKey(e, n)));
  }
}
class ZO extends xk {
  constructor(e) {
    super(), this.currentSequenceNumber = e;
  }
}
class tf {
  constructor(e) {
    this.persistence = e, /** Tracks all documents that are active in Query views. */
    this.Hr = new ef(), /** The list of documents that are potentially GCed after each transaction. */
    this.Jr = null;
  }
  static Yr(e) {
    return new tf(e);
  }
  get Zr() {
    if (this.Jr) return this.Jr;
    throw ce();
  }
  addReference(e, n, r) {
    return this.Hr.addReference(r, n), this.Zr.delete(r.toString()), z.resolve();
  }
  removeReference(e, n, r) {
    return this.Hr.removeReference(r, n), this.Zr.add(r.toString()), z.resolve();
  }
  markPotentiallyOrphaned(e, n) {
    return this.Zr.add(n.toString()), z.resolve();
  }
  removeTarget(e, n) {
    this.Hr.mr(n.targetId).forEach((i) => this.Zr.add(i.toString()));
    const r = this.persistence.getTargetCache();
    return r.getMatchingKeysForTargetId(e, n.targetId).next((i) => {
      i.forEach((s) => this.Zr.add(s.toString()));
    }).next(() => r.removeTargetData(e, n));
  }
  Gr() {
    this.Jr = /* @__PURE__ */ new Set();
  }
  zr(e) {
    const n = this.persistence.getRemoteDocumentCache().newChangeBuffer();
    return z.forEach(this.Zr, (r) => {
      const i = se.fromPath(r);
      return this.Xr(e, i).next((s) => {
        s || n.removeEntry(i, fe.min());
      });
    }).next(() => (this.Jr = null, n.apply(e)));
  }
  updateLimboDocument(e, n) {
    return this.Xr(e, n).next((r) => {
      r ? this.Zr.delete(n.toString()) : this.Zr.add(n.toString());
    });
  }
  Ur(e) {
    return 0;
  }
  Xr(e, n) {
    return z.or([() => z.resolve(this.Hr.containsKey(n)), () => this.persistence.getTargetCache().containsKey(e, n), () => this.persistence.jr(e, n)]);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class nf {
  constructor(e, n, r, i) {
    this.targetId = e, this.fromCache = n, this.Ki = r, this.$i = i;
  }
  static Ui(e, n) {
    let r = ve(), i = ve();
    for (const s of n.docChanges) switch (s.type) {
      case 0:
        r = r.add(s.doc.key);
        break;
      case 1:
        i = i.add(s.doc.key);
    }
    return new nf(e, n.fromCache, r, i);
  }
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class eD {
  constructor() {
    this._documentReadCount = 0;
  }
  get documentReadCount() {
    return this._documentReadCount;
  }
  incrementDocumentReadCount(e) {
    this._documentReadCount += e;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class tD {
  constructor() {
    this.Wi = !1, this.Gi = !1, /**
    * SDK only decides whether it should create index when collection size is
    * larger than this.
    */
    this.zi = 100, this.ji = /**
    * This cost represents the evaluation result of
    * (([index, docKey] + [docKey, docContent]) per document in the result set)
    * / ([docKey, docContent] per documents in full collection scan) coming from
    * experiment [enter PR experiment URL here].
    */
    function() {
      return CA() ? 8 : Lk(lt()) > 0 ? 6 : 4;
    }();
  }
  /** Sets the document view to query against. */
  initialize(e, n) {
    this.Hi = e, this.indexManager = n, this.Wi = !0;
  }
  /** Returns all local documents matching the specified query. */
  getDocumentsMatchingQuery(e, n, r, i) {
    const s = {
      result: null
    };
    return this.Ji(e, n).next((o) => {
      s.result = o;
    }).next(() => {
      if (!s.result) return this.Yi(e, n, i, r).next((o) => {
        s.result = o;
      });
    }).next(() => {
      if (s.result) return;
      const o = new eD();
      return this.Zi(e, n, o).next((a) => {
        if (s.result = a, this.Gi) return this.Xi(e, n, o, a.size);
      });
    }).next(() => s.result);
  }
  Xi(e, n, r, i) {
    return r.documentReadCount < this.zi ? (Gi() <= _e.DEBUG && Z("QueryEngine", "SDK will not create cache indexes for query:", Yr(n), "since it only creates cache indexes for collection contains", "more than or equal to", this.zi, "documents"), z.resolve()) : (Gi() <= _e.DEBUG && Z("QueryEngine", "Query:", Yr(n), "scans", r.documentReadCount, "local documents and returns", i, "documents as results."), r.documentReadCount > this.ji * i ? (Gi() <= _e.DEBUG && Z("QueryEngine", "The SDK decides to create cache indexes for query:", Yr(n), "as using cache indexes may help improve performance."), this.indexManager.createTargetIndexes(e, un(n))) : z.resolve());
  }
  /**
   * Performs an indexed query that evaluates the query based on a collection's
   * persisted index values. Returns `null` if an index is not available.
   */
  Ji(e, n) {
    if (Up(n))
      return z.resolve(null);
    let r = un(n);
    return this.indexManager.getIndexType(e, r).next((i) => i === 0 ? null : (n.limit !== null && i === 1 && // We cannot apply a limit for targets that are served using a partial
    // index. If a partial index will be used to serve the target, the
    // query may return a superset of documents that match the target
    // (e.g. if the index doesn't include all the target's filters), or
    // may return the correct set of documents in the wrong order (e.g. if
    // the index doesn't include a segment for one of the orderBys).
    // Therefore, a limit should not be applied in such cases.
    (n = Wu(
      n,
      null,
      "F"
      /* LimitType.First */
    ), r = un(n)), this.indexManager.getDocumentsMatchingTarget(e, r).next((s) => {
      const o = ve(...s);
      return this.Hi.getDocuments(e, o).next((a) => this.indexManager.getMinOffset(e, r).next((u) => {
        const l = this.es(n, a);
        return this.ts(n, l, o, u.readTime) ? this.Ji(e, Wu(
          n,
          null,
          "F"
          /* LimitType.First */
        )) : this.ns(e, l, n, u);
      }));
    })));
  }
  /**
   * Performs a query based on the target's persisted query mapping. Returns
   * `null` if the mapping is not available or cannot be used.
   */
  Yi(e, n, r, i) {
    return Up(n) || i.isEqual(fe.min()) ? z.resolve(null) : this.Hi.getDocuments(e, r).next((s) => {
      const o = this.es(n, s);
      return this.ts(n, o, r, i) ? z.resolve(null) : (Gi() <= _e.DEBUG && Z("QueryEngine", "Re-using previous result from %s to execute query: %s", i.toString(), Yr(n)), this.ns(e, o, n, kk(i, -1)).next((a) => a));
    });
  }
  /** Applies the query filter and sorting to the provided documents.  */
  es(e, n) {
    let r = new ut(Rv(e));
    return n.forEach((i, s) => {
      za(e, s) && (r = r.add(s));
    }), r;
  }
  /**
   * Determines if a limit query needs to be refilled from cache, making it
   * ineligible for index-free execution.
   *
   * @param query - The query.
   * @param sortedPreviousResults - The documents that matched the query when it
   * was last synchronized, sorted by the query's comparator.
   * @param remoteKeys - The document keys that matched the query at the last
   * snapshot.
   * @param limboFreeSnapshotVersion - The version of the snapshot when the
   * query was last synchronized.
   */
  ts(e, n, r, i) {
    if (e.limit === null)
      return !1;
    if (r.size !== n.size)
      return !0;
    const s = e.limitType === "F" ? n.last() : n.first();
    return !!s && (s.hasPendingWrites || s.version.compareTo(i) > 0);
  }
  Zi(e, n, r) {
    return Gi() <= _e.DEBUG && Z("QueryEngine", "Using full collection scan to execute query:", Yr(n)), this.Hi.getDocumentsMatchingQuery(e, n, Xn.min(), r);
  }
  /**
   * Combines the results from an indexed execution with the remaining documents
   * that have not yet been indexed.
   */
  ns(e, n, r, i) {
    return this.Hi.getDocumentsMatchingQuery(e, r, i).next((s) => (
      // Merge with existing results
      (n.forEach((o) => {
        s = s.insert(o.key, o);
      }), s)
    ));
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class nD {
  constructor(e, n, r, i) {
    this.persistence = e, this.rs = n, this.serializer = i, /**
    * Maps a targetID to data about its target.
    *
    * PORTING NOTE: We are using an immutable data structure on Web to make re-runs
    * of `applyRemoteEvent()` idempotent.
    */
    this.ss = new Me(be), /** Maps a target to its targetID. */
    // TODO(wuandy): Evaluate if TargetId can be part of Target.
    this.os = new Pi((s) => Ql(s), Yl), /**
    * A per collection group index of the last read time processed by
    * `getNewDocumentChanges()`.
    *
    * PORTING NOTE: This is only used for multi-tab synchronization.
    */
    this._s = /* @__PURE__ */ new Map(), this.us = e.getRemoteDocumentCache(), this.$r = e.getTargetCache(), this.Wr = e.getBundleCache(), this.cs(r);
  }
  cs(e) {
    this.documentOverlayCache = this.persistence.getDocumentOverlayCache(e), this.indexManager = this.persistence.getIndexManager(e), this.mutationQueue = this.persistence.getMutationQueue(e, this.indexManager), this.localDocuments = new zO(this.us, this.mutationQueue, this.documentOverlayCache, this.indexManager), this.us.setIndexManager(this.indexManager), this.rs.initialize(this.localDocuments, this.indexManager);
  }
  collectGarbage(e) {
    return this.persistence.runTransaction("Collect garbage", "readwrite-primary", (n) => e.collect(n, this.ss));
  }
}
function rD(t, e, n, r) {
  return new nD(t, e, n, r);
}
async function Yv(t, e) {
  const n = he(t);
  return await n.persistence.runTransaction("Handle user change", "readonly", (r) => {
    let i;
    return n.mutationQueue.getAllMutationBatches(r).next((s) => (i = s, n.cs(e), n.mutationQueue.getAllMutationBatches(r))).next((s) => {
      const o = [], a = [];
      let u = ve();
      for (const l of i) {
        o.push(l.batchId);
        for (const h of l.mutations) u = u.add(h.key);
      }
      for (const l of s) {
        a.push(l.batchId);
        for (const h of l.mutations) u = u.add(h.key);
      }
      return n.localDocuments.getDocuments(r, u).next((l) => ({
        ls: l,
        removedBatchIds: o,
        addedBatchIds: a
      }));
    });
  });
}
function iD(t, e) {
  const n = he(t);
  return n.persistence.runTransaction("Acknowledge batch", "readwrite-primary", (r) => {
    const i = e.batch.keys(), s = n.us.newChangeBuffer({
      trackRemovals: !0
    });
    return function(a, u, l, h) {
      const f = l.batch, y = f.keys();
      let b = z.resolve();
      return y.forEach((S) => {
        b = b.next(() => h.getEntry(u, S)).next((C) => {
          const m = l.docVersions.get(S);
          De(m !== null), C.version.compareTo(m) < 0 && (f.applyToRemoteDocument(C, l), C.isValidDocument() && // We use the commitVersion as the readTime rather than the
          // document's updateTime since the updateTime is not advanced
          // for updates that do not modify the underlying document.
          (C.setReadTime(l.commitVersion), h.addEntry(C)));
        });
      }), b.next(() => a.mutationQueue.removeMutationBatch(u, f));
    }(n, r, e, s).next(() => s.apply(r)).next(() => n.mutationQueue.performConsistencyCheck(r)).next(() => n.documentOverlayCache.removeOverlaysForBatchId(r, i, e.batch.batchId)).next(() => n.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(r, function(a) {
      let u = ve();
      for (let l = 0; l < a.mutationResults.length; ++l)
        a.mutationResults[l].transformResults.length > 0 && (u = u.add(a.batch.mutations[l].key));
      return u;
    }(e))).next(() => n.localDocuments.getDocuments(r, i));
  });
}
function Jv(t) {
  const e = he(t);
  return e.persistence.runTransaction("Get last remote snapshot version", "readonly", (n) => e.$r.getLastRemoteSnapshotVersion(n));
}
function sD(t, e) {
  const n = he(t), r = e.snapshotVersion;
  let i = n.ss;
  return n.persistence.runTransaction("Apply remote event", "readwrite-primary", (s) => {
    const o = n.us.newChangeBuffer({
      trackRemovals: !0
    });
    i = n.ss;
    const a = [];
    e.targetChanges.forEach((h, f) => {
      const y = i.get(f);
      if (!y) return;
      a.push(n.$r.removeMatchingKeys(s, h.removedDocuments, f).next(() => n.$r.addMatchingKeys(s, h.addedDocuments, f)));
      let b = y.withSequenceNumber(s.currentSequenceNumber);
      e.targetMismatches.get(f) !== null ? b = b.withResumeToken(ft.EMPTY_BYTE_STRING, fe.min()).withLastLimboFreeSnapshotVersion(fe.min()) : h.resumeToken.approximateByteSize() > 0 && (b = b.withResumeToken(h.resumeToken, r)), i = i.insert(f, b), // Update the target data if there are target changes (or if
      // sufficient time has passed since the last update).
      /**
      * Returns true if the newTargetData should be persisted during an update of
      * an active target. TargetData should always be persisted when a target is
      * being released and should not call this function.
      *
      * While the target is active, TargetData updates can be omitted when nothing
      * about the target has changed except metadata like the resume token or
      * snapshot version. Occasionally it's worth the extra write to prevent these
      * values from getting too stale after a crash, but this doesn't have to be
      * too frequent.
      */
      function(C, m, v) {
        return C.resumeToken.approximateByteSize() === 0 || m.snapshotVersion.toMicroseconds() - C.snapshotVersion.toMicroseconds() >= 3e8 ? !0 : v.addedDocuments.size + v.modifiedDocuments.size + v.removedDocuments.size > 0;
      }(y, b, h) && a.push(n.$r.updateTargetData(s, b));
    });
    let u = Dn(), l = ve();
    if (e.documentUpdates.forEach((h) => {
      e.resolvedLimboDocuments.has(h) && a.push(n.persistence.referenceDelegate.updateLimboDocument(s, h));
    }), // Each loop iteration only affects its "own" doc, so it's safe to get all
    // the remote documents in advance in a single call.
    a.push(oD(s, o, e.documentUpdates).next((h) => {
      u = h.hs, l = h.Ps;
    })), !r.isEqual(fe.min())) {
      const h = n.$r.getLastRemoteSnapshotVersion(s).next((f) => n.$r.setTargetsMetadata(s, s.currentSequenceNumber, r));
      a.push(h);
    }
    return z.waitFor(a).next(() => o.apply(s)).next(() => n.localDocuments.getLocalViewOfDocuments(s, u, l)).next(() => u);
  }).then((s) => (n.ss = i, s));
}
function oD(t, e, n) {
  let r = ve(), i = ve();
  return n.forEach((s) => r = r.add(s)), e.getEntries(t, r).next((s) => {
    let o = Dn();
    return n.forEach((a, u) => {
      const l = s.get(a);
      u.isFoundDocument() !== l.isFoundDocument() && (i = i.add(a)), // Note: The order of the steps below is important, since we want
      // to ensure that rejected limbo resolutions (which fabricate
      // NoDocuments with SnapshotVersion.min()) never add documents to
      // cache.
      u.isNoDocument() && u.version.isEqual(fe.min()) ? (
        // NoDocuments with SnapshotVersion.min() are used in manufactured
        // events. We remove these documents from cache since we lost
        // access.
        (e.removeEntry(a, u.readTime), o = o.insert(a, u))
      ) : !l.isValidDocument() || u.version.compareTo(l.version) > 0 || u.version.compareTo(l.version) === 0 && l.hasPendingWrites ? (e.addEntry(u), o = o.insert(a, u)) : Z("LocalStore", "Ignoring outdated watch update for ", a, ". Current version:", l.version, " Watch version:", u.version);
    }), {
      hs: o,
      Ps: i
    };
  });
}
function aD(t, e) {
  const n = he(t);
  return n.persistence.runTransaction("Get next mutation batch", "readonly", (r) => (e === void 0 && (e = -1), n.mutationQueue.getNextMutationBatchAfterBatchId(r, e)));
}
function cD(t, e) {
  const n = he(t);
  return n.persistence.runTransaction("Allocate target", "readwrite", (r) => {
    let i;
    return n.$r.getTargetData(r, e).next((s) => s ? (
      // This target has been listened to previously, so reuse the
      // previous targetID.
      // TODO(mcg): freshen last accessed date?
      (i = s, z.resolve(i))
    ) : n.$r.allocateTargetId(r).next((o) => (i = new Hn(e, o, "TargetPurposeListen", r.currentSequenceNumber), n.$r.addTargetData(r, i).next(() => i))));
  }).then((r) => {
    const i = n.ss.get(r.targetId);
    return (i === null || r.snapshotVersion.compareTo(i.snapshotVersion) > 0) && (n.ss = n.ss.insert(r.targetId, r), n.os.set(e, r.targetId)), r;
  });
}
async function Zu(t, e, n) {
  const r = he(t), i = r.ss.get(e), s = n ? "readwrite" : "readwrite-primary";
  try {
    n || await r.persistence.runTransaction("Release target", s, (o) => r.persistence.referenceDelegate.removeTarget(o, i));
  } catch (o) {
    if (!Us(o)) throw o;
    Z("LocalStore", `Failed to update sequence numbers for target ${e}: ${o}`);
  }
  r.ss = r.ss.remove(e), r.os.delete(i.target);
}
function Yp(t, e, n) {
  const r = he(t);
  let i = fe.min(), s = ve();
  return r.persistence.runTransaction(
    "Execute query",
    "readwrite",
    // Use readwrite instead of readonly so indexes can be created
    // Use readwrite instead of readonly so indexes can be created
    (o) => function(u, l, h) {
      const f = he(u), y = f.os.get(h);
      return y !== void 0 ? z.resolve(f.ss.get(y)) : f.$r.getTargetData(l, h);
    }(r, o, un(e)).next((a) => {
      if (a) return i = a.lastLimboFreeSnapshotVersion, r.$r.getMatchingKeysForTargetId(o, a.targetId).next((u) => {
        s = u;
      });
    }).next(() => r.rs.getDocumentsMatchingQuery(o, e, n ? i : fe.min(), n ? s : ve())).next((a) => (uD(r, Zk(e), a), {
      documents: a,
      Is: s
    }))
  );
}
function uD(t, e, n) {
  let r = t._s.get(e) || fe.min();
  n.forEach((i, s) => {
    s.readTime.compareTo(r) > 0 && (r = s.readTime);
  }), t._s.set(e, r);
}
class Jp {
  constructor() {
    this.activeTargetIds = sO();
  }
  Vs(e) {
    this.activeTargetIds = this.activeTargetIds.add(e);
  }
  fs(e) {
    this.activeTargetIds = this.activeTargetIds.delete(e);
  }
  /**
   * Converts this entry into a JSON-encoded format we can use for WebStorage.
   * Does not encode `clientId` as it is part of the key in WebStorage.
   */
  Rs() {
    const e = {
      activeTargetIds: this.activeTargetIds.toArray(),
      updateTimeMs: Date.now()
    };
    return JSON.stringify(e);
  }
}
class lD {
  constructor() {
    this.io = new Jp(), this.so = {}, this.onlineStateHandler = null, this.sequenceNumberHandler = null;
  }
  addPendingMutation(e) {
  }
  updateMutationState(e, n, r) {
  }
  addLocalQueryTarget(e) {
    return this.io.Vs(e), this.so[e] || "not-current";
  }
  updateQueryState(e, n, r) {
    this.so[e] = n;
  }
  removeLocalQueryTarget(e) {
    this.io.fs(e);
  }
  isLocalQueryTarget(e) {
    return this.io.activeTargetIds.has(e);
  }
  clearQueryState(e) {
    delete this.so[e];
  }
  getAllActiveQueryTargets() {
    return this.io.activeTargetIds;
  }
  isActiveQueryTarget(e) {
    return this.io.activeTargetIds.has(e);
  }
  start() {
    return this.io = new Jp(), Promise.resolve();
  }
  handleUserChange(e, n, r) {
  }
  setOnlineState(e) {
  }
  shutdown() {
  }
  writeSequenceNumber(e) {
  }
  notifyBundleLoaded(e) {
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class fD {
  oo(e) {
  }
  shutdown() {
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Xp {
  constructor() {
    this._o = () => this.ao(), this.uo = () => this.co(), this.lo = [], this.ho();
  }
  oo(e) {
    this.lo.push(e);
  }
  shutdown() {
    window.removeEventListener("online", this._o), window.removeEventListener("offline", this.uo);
  }
  ho() {
    window.addEventListener("online", this._o), window.addEventListener("offline", this.uo);
  }
  ao() {
    Z("ConnectivityMonitor", "Network connectivity changed: AVAILABLE");
    for (const e of this.lo) e(
      0
      /* NetworkStatus.AVAILABLE */
    );
  }
  co() {
    Z("ConnectivityMonitor", "Network connectivity changed: UNAVAILABLE");
    for (const e of this.lo) e(
      1
      /* NetworkStatus.UNAVAILABLE */
    );
  }
  // TODO(chenbrian): Consider passing in window either into this component or
  // here for testing via FakeWindow.
  /** Checks that all used attributes of window are available. */
  static D() {
    return typeof window < "u" && window.addEventListener !== void 0 && window.removeEventListener !== void 0;
  }
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
let Io = null;
function Wc() {
  return Io === null ? Io = function() {
    return 268435456 + Math.round(2147483648 * Math.random());
  }() : Io++, "0x" + Io.toString(16);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const hD = {
  BatchGetDocuments: "batchGet",
  Commit: "commit",
  RunQuery: "runQuery",
  RunAggregationQuery: "runAggregationQuery"
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class dD {
  constructor(e) {
    this.Po = e.Po, this.Io = e.Io;
  }
  To(e) {
    this.Eo = e;
  }
  Ao(e) {
    this.Ro = e;
  }
  Vo(e) {
    this.mo = e;
  }
  onMessage(e) {
    this.fo = e;
  }
  close() {
    this.Io();
  }
  send(e) {
    this.Po(e);
  }
  po() {
    this.Eo();
  }
  yo() {
    this.Ro();
  }
  wo(e) {
    this.mo(e);
  }
  So(e) {
    this.fo(e);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const gt = "WebChannelConnection";
class pD extends /**
* Base class for all Rest-based connections to the backend (WebChannel and
* HTTP).
*/
class {
  constructor(n) {
    this.databaseInfo = n, this.databaseId = n.databaseId;
    const r = n.ssl ? "https" : "http", i = encodeURIComponent(this.databaseId.projectId), s = encodeURIComponent(this.databaseId.database);
    this.bo = r + "://" + n.host, this.Do = `projects/${i}/databases/${s}`, this.Co = this.databaseId.database === "(default)" ? `project_id=${i}` : `project_id=${i}&database_id=${s}`;
  }
  get vo() {
    return !1;
  }
  Fo(n, r, i, s, o) {
    const a = Wc(), u = this.Mo(n, r.toUriEncodedString());
    Z("RestConnection", `Sending RPC '${n}' ${a}:`, u, i);
    const l = {
      "google-cloud-resource-prefix": this.Do,
      "x-goog-request-params": this.Co
    };
    return this.xo(l, s, o), this.Oo(n, u, l, i).then((h) => (Z("RestConnection", `Received RPC '${n}' ${a}: `, h), h), (h) => {
      throw pi("RestConnection", `RPC '${n}' ${a} failed with error: `, h, "url: ", u, "request:", i), h;
    });
  }
  No(n, r, i, s, o, a) {
    return this.Fo(n, r, i, s, o);
  }
  /**
   * Modifies the headers for a request, adding any authorization token if
   * present and any additional headers for the request.
   */
  xo(n, r, i) {
    n["X-Goog-Api-Client"] = // SDK_VERSION is updated to different value at runtime depending on the entry point,
    // so we need to get its value when we need it in a function.
    function() {
      return "gl-js/ fire/" + Ri;
    }(), // Content-Type: text/plain will avoid preflight requests which might
    // mess with CORS and redirects by proxies. If we add custom headers
    // we will need to change this code to potentially use the $httpOverwrite
    // parameter supported by ESF to avoid triggering preflight requests.
    n["Content-Type"] = "text/plain", this.databaseInfo.appId && (n["X-Firebase-GMPID"] = this.databaseInfo.appId), r && r.headers.forEach((s, o) => n[o] = s), i && i.headers.forEach((s, o) => n[o] = s);
  }
  Mo(n, r) {
    const i = hD[n];
    return `${this.bo}/v1/${r}:${i}`;
  }
  /**
   * Closes and cleans up any resources associated with the connection. This
   * implementation is a no-op because there are no resources associated
   * with the RestConnection that need to be cleaned up.
   */
  terminate() {
  }
} {
  constructor(e) {
    super(e), this.forceLongPolling = e.forceLongPolling, this.autoDetectLongPolling = e.autoDetectLongPolling, this.useFetchStreams = e.useFetchStreams, this.longPollingOptions = e.longPollingOptions;
  }
  Oo(e, n, r, i) {
    const s = Wc();
    return new Promise((o, a) => {
      const u = new uv();
      u.setWithCredentials(!0), u.listenOnce(fv.COMPLETE, () => {
        try {
          switch (u.getLastErrorCode()) {
            case Mo.NO_ERROR:
              const h = u.getResponseJson();
              Z(gt, `XHR for RPC '${e}' ${s} received:`, JSON.stringify(h)), o(h);
              break;
            case Mo.TIMEOUT:
              Z(gt, `RPC '${e}' ${s} timed out`), a(new re(q.DEADLINE_EXCEEDED, "Request time out"));
              break;
            case Mo.HTTP_ERROR:
              const f = u.getStatus();
              if (Z(gt, `RPC '${e}' ${s} failed with status:`, f, "response text:", u.getResponseText()), f > 0) {
                let y = u.getResponseJson();
                Array.isArray(y) && (y = y[0]);
                const b = y == null ? void 0 : y.error;
                if (b && b.status && b.message) {
                  const S = function(m) {
                    const v = m.toLowerCase().replace(/_/g, "-");
                    return Object.values(q).indexOf(v) >= 0 ? v : q.UNKNOWN;
                  }(b.status);
                  a(new re(S, b.message));
                } else a(new re(q.UNKNOWN, "Server responded with status " + u.getStatus()));
              } else
                a(new re(q.UNAVAILABLE, "Connection failed."));
              break;
            default:
              ce();
          }
        } finally {
          Z(gt, `RPC '${e}' ${s} completed.`);
        }
      });
      const l = JSON.stringify(i);
      Z(gt, `RPC '${e}' ${s} sending request:`, i), u.send(n, "POST", l, r, 15);
    });
  }
  Lo(e, n, r) {
    const i = Wc(), s = [this.bo, "/", "google.firestore.v1.Firestore", "/", e, "/channel"], o = pv(), a = dv(), u = {
      // Required for backend stickiness, routing behavior is based on this
      // parameter.
      httpSessionIdParam: "gsessionid",
      initMessageHeaders: {},
      messageUrlParams: {
        // This param is used to improve routing and project isolation by the
        // backend and must be included in every request.
        database: `projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`
      },
      sendRawJson: !0,
      supportsCrossDomainXhr: !0,
      internalChannelParams: {
        // Override the default timeout (randomized between 10-20 seconds) since
        // a large write batch on a slow internet connection may take a long
        // time to send to the backend. Rather than have WebChannel impose a
        // tight timeout which could lead to infinite timeouts and retries, we
        // set it very large (5-10 minutes) and rely on the browser's builtin
        // timeouts to kick in if the request isn't working.
        forwardChannelRequestTimeoutMs: 6e5
      },
      forceLongPolling: this.forceLongPolling,
      detectBufferingProxy: this.autoDetectLongPolling
    }, l = this.longPollingOptions.timeoutSeconds;
    l !== void 0 && (u.longPollingTimeout = Math.round(1e3 * l)), this.useFetchStreams && (u.xmlHttpFactory = new lv({})), this.xo(u.initMessageHeaders, n, r), // Sending the custom headers we just added to request.initMessageHeaders
    // (Authorization, etc.) will trigger the browser to make a CORS preflight
    // request because the XHR will no longer meet the criteria for a "simple"
    // CORS request:
    // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
    // Therefore to avoid the CORS preflight request (an extra network
    // roundtrip), we use the encodeInitMessageHeaders option to specify that
    // the headers should instead be encoded in the request's POST payload,
    // which is recognized by the webchannel backend.
    u.encodeInitMessageHeaders = !0;
    const h = s.join("");
    Z(gt, `Creating RPC '${e}' stream ${i}: ${h}`, u);
    const f = o.createWebChannel(h, u);
    let y = !1, b = !1;
    const S = new dD({
      Po: (m) => {
        b ? Z(gt, `Not sending because RPC '${e}' stream ${i} is closed:`, m) : (y || (Z(gt, `Opening RPC '${e}' stream ${i} transport.`), f.open(), y = !0), Z(gt, `RPC '${e}' stream ${i} sending:`, m), f.send(m));
      },
      Io: () => f.close()
    }), C = (m, v, E) => {
      m.listen(v, (p) => {
        try {
          E(p);
        } catch (g) {
          setTimeout(() => {
            throw g;
          }, 0);
        }
      });
    };
    return C(f, es.EventType.OPEN, () => {
      b || (Z(gt, `RPC '${e}' stream ${i} transport opened.`), S.po());
    }), C(f, es.EventType.CLOSE, () => {
      b || (b = !0, Z(gt, `RPC '${e}' stream ${i} transport closed`), S.wo());
    }), C(f, es.EventType.ERROR, (m) => {
      b || (b = !0, pi(gt, `RPC '${e}' stream ${i} transport errored:`, m), S.wo(new re(q.UNAVAILABLE, "The operation could not be completed")));
    }), C(f, es.EventType.MESSAGE, (m) => {
      var v;
      if (!b) {
        const E = m.data[0];
        De(!!E);
        const p = E, g = p.error || ((v = p[0]) === null || v === void 0 ? void 0 : v.error);
        if (g) {
          Z(gt, `RPC '${e}' stream ${i} received error:`, g);
          const w = g.status;
          let I = (
            /**
            * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.
            *
            * @returns The Code equivalent to the given status string or undefined if
            *     there is no match.
            */
            function(A) {
              const O = Ge[A];
              if (O !== void 0) return jv(O);
            }(w)
          ), R = g.message;
          I === void 0 && (I = q.INTERNAL, R = "Unknown error status: " + w + " with message " + g.message), // Mark closed so no further events are propagated
          b = !0, S.wo(new re(I, R)), f.close();
        } else Z(gt, `RPC '${e}' stream ${i} received:`, E), S.So(E);
      }
    }), C(a, hv.STAT_EVENT, (m) => {
      m.stat === qu.PROXY ? Z(gt, `RPC '${e}' stream ${i} detected buffering proxy`) : m.stat === qu.NOPROXY && Z(gt, `RPC '${e}' stream ${i} detected no buffering proxy`);
    }), setTimeout(() => {
      S.yo();
    }, 0), S;
  }
}
function Qc() {
  return typeof document < "u" ? document : null;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Wa(t) {
  return new IO(
    t,
    /* useProto3Json= */
    !0
  );
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Xv {
  constructor(e, n, r = 1e3, i = 1.5, s = 6e4) {
    this.ai = e, this.timerId = n, this.Bo = r, this.ko = i, this.qo = s, this.Qo = 0, this.Ko = null, /** The last backoff attempt, as epoch milliseconds. */
    this.$o = Date.now(), this.reset();
  }
  /**
   * Resets the backoff delay.
   *
   * The very next backoffAndWait() will have no delay. If it is called again
   * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
   * subsequent ones will increase according to the backoffFactor.
   */
  reset() {
    this.Qo = 0;
  }
  /**
   * Resets the backoff delay to the maximum delay (e.g. for use after a
   * RESOURCE_EXHAUSTED error).
   */
  Uo() {
    this.Qo = this.qo;
  }
  /**
   * Returns a promise that resolves after currentDelayMs, and increases the
   * delay for any subsequent attempts. If there was a pending backoff operation
   * already, it will be canceled.
   */
  Wo(e) {
    this.cancel();
    const n = Math.floor(this.Qo + this.Go()), r = Math.max(0, Date.now() - this.$o), i = Math.max(0, n - r);
    i > 0 && Z("ExponentialBackoff", `Backing off for ${i} ms (base delay: ${this.Qo} ms, delay with jitter: ${n} ms, last attempt: ${r} ms ago)`), this.Ko = this.ai.enqueueAfterDelay(this.timerId, i, () => (this.$o = Date.now(), e())), // Apply backoff factor to determine next delay and ensure it is within
    // bounds.
    this.Qo *= this.ko, this.Qo < this.Bo && (this.Qo = this.Bo), this.Qo > this.qo && (this.Qo = this.qo);
  }
  zo() {
    this.Ko !== null && (this.Ko.skipDelay(), this.Ko = null);
  }
  cancel() {
    this.Ko !== null && (this.Ko.cancel(), this.Ko = null);
  }
  /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */
  Go() {
    return (Math.random() - 0.5) * this.Qo;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Zv {
  constructor(e, n, r, i, s, o, a, u) {
    this.ai = e, this.jo = r, this.Ho = i, this.connection = s, this.authCredentialsProvider = o, this.appCheckCredentialsProvider = a, this.listener = u, this.state = 0, /**
    * A close count that's incremented every time the stream is closed; used by
    * getCloseGuardedDispatcher() to invalidate callbacks that happen after
    * close.
    */
    this.Jo = 0, this.Yo = null, this.Zo = null, this.stream = null, /**
    * Count of response messages received.
    */
    this.Xo = 0, this.e_ = new Xv(e, n);
  }
  /**
   * Returns true if start() has been called and no error has occurred. True
   * indicates the stream is open or in the process of opening (which
   * encompasses respecting backoff, getting auth tokens, and starting the
   * actual RPC). Use isOpen() to determine if the stream is open and ready for
   * outbound requests.
   */
  t_() {
    return this.state === 1 || this.state === 5 || this.n_();
  }
  /**
   * Returns true if the underlying RPC is open (the onOpen() listener has been
   * called) and the stream is ready for outbound requests.
   */
  n_() {
    return this.state === 2 || this.state === 3;
  }
  /**
   * Starts the RPC. Only allowed if isStarted() returns false. The stream is
   * not immediately ready for use: onOpen() will be invoked when the RPC is
   * ready for outbound requests, at which point isOpen() will return true.
   *
   * When start returns, isStarted() will return true.
   */
  start() {
    this.Xo = 0, this.state !== 4 ? this.auth() : this.r_();
  }
  /**
   * Stops the RPC. This call is idempotent and allowed regardless of the
   * current isStarted() state.
   *
   * When stop returns, isStarted() and isOpen() will both return false.
   */
  async stop() {
    this.t_() && await this.close(
      0
      /* PersistentStreamState.Initial */
    );
  }
  /**
   * After an error the stream will usually back off on the next attempt to
   * start it. If the error warrants an immediate restart of the stream, the
   * sender can use this to indicate that the receiver should not back off.
   *
   * Each error will call the onClose() listener. That function can decide to
   * inhibit backoff if required.
   */
  i_() {
    this.state = 0, this.e_.reset();
  }
  /**
   * Marks this stream as idle. If no further actions are performed on the
   * stream for one minute, the stream will automatically close itself and
   * notify the stream's onClose() handler with Status.OK. The stream will then
   * be in a !isStarted() state, requiring the caller to start the stream again
   * before further use.
   *
   * Only streams that are in state 'Open' can be marked idle, as all other
   * states imply pending network operations.
   */
  s_() {
    this.n_() && this.Yo === null && (this.Yo = this.ai.enqueueAfterDelay(this.jo, 6e4, () => this.o_()));
  }
  /** Sends a message to the underlying stream. */
  __(e) {
    this.a_(), this.stream.send(e);
  }
  /** Called by the idle timer when the stream should close due to inactivity. */
  async o_() {
    if (this.n_())
      return this.close(
        0
        /* PersistentStreamState.Initial */
      );
  }
  /** Marks the stream as active again. */
  a_() {
    this.Yo && (this.Yo.cancel(), this.Yo = null);
  }
  /** Cancels the health check delayed operation. */
  u_() {
    this.Zo && (this.Zo.cancel(), this.Zo = null);
  }
  /**
   * Closes the stream and cleans up as necessary:
   *
   * * closes the underlying GRPC stream;
   * * calls the onClose handler with the given 'error';
   * * sets internal stream state to 'finalState';
   * * adjusts the backoff timer based on the error
   *
   * A new stream can be opened by calling start().
   *
   * @param finalState - the intended state of the stream after closing.
   * @param error - the error the connection was closed with.
   */
  async close(e, n) {
    this.a_(), this.u_(), this.e_.cancel(), // Invalidates any stream-related callbacks (e.g. from auth or the
    // underlying stream), guaranteeing they won't execute.
    this.Jo++, e !== 4 ? (
      // If this is an intentional close ensure we don't delay our next connection attempt.
      this.e_.reset()
    ) : n && n.code === q.RESOURCE_EXHAUSTED ? (
      // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
      (On(n.toString()), On("Using maximum backoff delay to prevent overloading the backend."), this.e_.Uo())
    ) : n && n.code === q.UNAUTHENTICATED && this.state !== 3 && // "unauthenticated" error means the token was rejected. This should rarely
    // happen since both Auth and AppCheck ensure a sufficient TTL when we
    // request a token. If a user manually resets their system clock this can
    // fail, however. In this case, we should get a Code.UNAUTHENTICATED error
    // before we received the first message and we need to invalidate the token
    // to ensure that we fetch a new token.
    (this.authCredentialsProvider.invalidateToken(), this.appCheckCredentialsProvider.invalidateToken()), // Clean up the underlying stream because we are no longer interested in events.
    this.stream !== null && (this.c_(), this.stream.close(), this.stream = null), // This state must be assigned before calling onClose() to allow the callback to
    // inhibit backoff or otherwise manipulate the state in its non-started state.
    this.state = e, // Notify the listener that the stream closed.
    await this.listener.Vo(n);
  }
  /**
   * Can be overridden to perform additional cleanup before the stream is closed.
   * Calling super.tearDown() is not required.
   */
  c_() {
  }
  auth() {
    this.state = 1;
    const e = this.l_(this.Jo), n = this.Jo;
    Promise.all([this.authCredentialsProvider.getToken(), this.appCheckCredentialsProvider.getToken()]).then(([r, i]) => {
      this.Jo === n && // Normally we'd have to schedule the callback on the AsyncQueue.
      // However, the following calls are safe to be called outside the
      // AsyncQueue since they don't chain asynchronous calls
      this.h_(r, i);
    }, (r) => {
      e(() => {
        const i = new re(q.UNKNOWN, "Fetching auth token failed: " + r.message);
        return this.P_(i);
      });
    });
  }
  h_(e, n) {
    const r = this.l_(this.Jo);
    this.stream = this.I_(e, n), this.stream.To(() => {
      r(() => this.listener.To());
    }), this.stream.Ao(() => {
      r(() => (this.state = 2, this.Zo = this.ai.enqueueAfterDelay(this.Ho, 1e4, () => (this.n_() && (this.state = 3), Promise.resolve())), this.listener.Ao()));
    }), this.stream.Vo((i) => {
      r(() => this.P_(i));
    }), this.stream.onMessage((i) => {
      r(() => ++this.Xo == 1 ? this.T_(i) : this.onNext(i));
    });
  }
  r_() {
    this.state = 5, this.e_.Wo(async () => {
      this.state = 0, this.start();
    });
  }
  // Visible for tests
  P_(e) {
    return Z("PersistentStream", `close with error: ${e}`), this.stream = null, this.close(4, e);
  }
  /**
   * Returns a "dispatcher" function that dispatches operations onto the
   * AsyncQueue but only runs them if closeCount remains unchanged. This allows
   * us to turn auth / stream callbacks into no-ops if the stream is closed /
   * re-opened, etc.
   */
  l_(e) {
    return (n) => {
      this.ai.enqueueAndForget(() => this.Jo === e ? n() : (Z("PersistentStream", "stream callback skipped by getCloseGuardedDispatcher."), Promise.resolve()));
    };
  }
}
class mD extends Zv {
  constructor(e, n, r, i, s, o) {
    super(e, "listen_stream_connection_backoff", "listen_stream_idle", "health_check_timeout", n, r, i, o), this.serializer = s;
  }
  I_(e, n) {
    return this.connection.Lo("Listen", e, n);
  }
  T_(e) {
    return this.onNext(e);
  }
  onNext(e) {
    this.e_.reset();
    const n = RO(this.serializer, e), r = function(s) {
      if (!("targetChange" in s)) return fe.min();
      const o = s.targetChange;
      return o.targetIds && o.targetIds.length ? fe.min() : o.readTime ? ln(o.readTime) : fe.min();
    }(e);
    return this.listener.E_(n, r);
  }
  /**
   * Registers interest in the results of the given target. If the target
   * includes a resumeToken it will be included in the request. Results that
   * affect the target will be streamed back as WatchChange messages that
   * reference the targetId.
   */
  d_(e) {
    const n = {};
    n.database = Xu(this.serializer), n.addTarget = function(s, o) {
      let a;
      const u = o.target;
      if (a = Gu(u) ? {
        documents: kO(s, u)
      } : {
        query: OO(s, u)._t
      }, a.targetId = o.targetId, o.resumeToken.approximateByteSize() > 0) {
        a.resumeToken = qv(s, o.resumeToken);
        const l = Qu(s, o.expectedCount);
        l !== null && (a.expectedCount = l);
      } else if (o.snapshotVersion.compareTo(fe.min()) > 0) {
        a.readTime = ua(s, o.snapshotVersion.toTimestamp());
        const l = Qu(s, o.expectedCount);
        l !== null && (a.expectedCount = l);
      }
      return a;
    }(this.serializer, e);
    const r = NO(this.serializer, e);
    r && (n.labels = r), this.__(n);
  }
  /**
   * Unregisters interest in the results of the target associated with the
   * given targetId.
   */
  A_(e) {
    const n = {};
    n.database = Xu(this.serializer), n.removeTarget = e, this.__(n);
  }
}
class gD extends Zv {
  constructor(e, n, r, i, s, o) {
    super(e, "write_stream_connection_backoff", "write_stream_idle", "health_check_timeout", n, r, i, o), this.serializer = s;
  }
  /**
   * Tracks whether or not a handshake has been successfully exchanged and
   * the stream is ready to accept mutations.
   */
  get R_() {
    return this.Xo > 0;
  }
  // Override of PersistentStream.start
  start() {
    this.lastStreamToken = void 0, super.start();
  }
  c_() {
    this.R_ && this.V_([]);
  }
  I_(e, n) {
    return this.connection.Lo("Write", e, n);
  }
  T_(e) {
    return De(!!e.streamToken), this.lastStreamToken = e.streamToken, // The first response is always the handshake response
    De(!e.writeResults || e.writeResults.length === 0), this.listener.m_();
  }
  onNext(e) {
    De(!!e.streamToken), this.lastStreamToken = e.streamToken, // A successful first write response means the stream is healthy,
    // Note, that we could consider a successful handshake healthy, however,
    // the write itself might be causing an error we want to back off from.
    this.e_.reset();
    const n = PO(e.writeResults, e.commitTime), r = ln(e.commitTime);
    return this.listener.f_(r, n);
  }
  /**
   * Sends an initial streamToken to the server, performing the handshake
   * required to make the StreamingWrite RPC work. Subsequent
   * calls should wait until onHandshakeComplete was called.
   */
  g_() {
    const e = {};
    e.database = Xu(this.serializer), this.__(e);
  }
  /** Sends a group of mutations to the Firestore backend to apply. */
  V_(e) {
    const n = {
      streamToken: this.lastStreamToken,
      writes: e.map((r) => CO(this.serializer, r))
    };
    this.__(n);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class yD extends class {
} {
  constructor(e, n, r, i) {
    super(), this.authCredentials = e, this.appCheckCredentials = n, this.connection = r, this.serializer = i, this.p_ = !1;
  }
  y_() {
    if (this.p_) throw new re(q.FAILED_PRECONDITION, "The client has already been terminated.");
  }
  /** Invokes the provided RPC with auth and AppCheck tokens. */
  Fo(e, n, r, i) {
    return this.y_(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(([s, o]) => this.connection.Fo(e, Yu(n, r), i, s, o)).catch((s) => {
      throw s.name === "FirebaseError" ? (s.code === q.UNAUTHENTICATED && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), s) : new re(q.UNKNOWN, s.toString());
    });
  }
  /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */
  No(e, n, r, i, s) {
    return this.y_(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(([o, a]) => this.connection.No(e, Yu(n, r), i, o, a, s)).catch((o) => {
      throw o.name === "FirebaseError" ? (o.code === q.UNAUTHENTICATED && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), o) : new re(q.UNKNOWN, o.toString());
    });
  }
  terminate() {
    this.p_ = !0, this.connection.terminate();
  }
}
class vD {
  constructor(e, n) {
    this.asyncQueue = e, this.onlineStateHandler = n, /** The current OnlineState. */
    this.state = "Unknown", /**
    * A count of consecutive failures to open the stream. If it reaches the
    * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
    * Offline.
    */
    this.w_ = 0, /**
    * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
    * transition from OnlineState.Unknown to OnlineState.Offline without waiting
    * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
    */
    this.S_ = null, /**
    * Whether the client should log a warning message if it fails to connect to
    * the backend (initially true, cleared after a successful stream, or if we've
    * logged the message already).
    */
    this.b_ = !0;
  }
  /**
   * Called by RemoteStore when a watch stream is started (including on each
   * backoff attempt).
   *
   * If this is the first attempt, it sets the OnlineState to Unknown and starts
   * the onlineStateTimer.
   */
  D_() {
    this.w_ === 0 && (this.C_(
      "Unknown"
      /* OnlineState.Unknown */
    ), this.S_ = this.asyncQueue.enqueueAfterDelay("online_state_timeout", 1e4, () => (this.S_ = null, this.v_("Backend didn't respond within 10 seconds."), this.C_(
      "Offline"
      /* OnlineState.Offline */
    ), Promise.resolve())));
  }
  /**
   * Updates our OnlineState as appropriate after the watch stream reports a
   * failure. The first failure moves us to the 'Unknown' state. We then may
   * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
   * actually transition to the 'Offline' state.
   */
  F_(e) {
    this.state === "Online" ? this.C_(
      "Unknown"
      /* OnlineState.Unknown */
    ) : (this.w_++, this.w_ >= 1 && (this.M_(), this.v_(`Connection failed 1 times. Most recent error: ${e.toString()}`), this.C_(
      "Offline"
      /* OnlineState.Offline */
    )));
  }
  /**
   * Explicitly sets the OnlineState to the specified state.
   *
   * Note that this resets our timers / failure counters, etc. used by our
   * Offline heuristics, so must not be used in place of
   * handleWatchStreamStart() and handleWatchStreamFailure().
   */
  set(e) {
    this.M_(), this.w_ = 0, e === "Online" && // We've connected to watch at least once. Don't warn the developer
    // about being offline going forward.
    (this.b_ = !1), this.C_(e);
  }
  C_(e) {
    e !== this.state && (this.state = e, this.onlineStateHandler(e));
  }
  v_(e) {
    const n = `Could not reach Cloud Firestore backend. ${e}
This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;
    this.b_ ? (On(n), this.b_ = !1) : Z("OnlineStateTracker", n);
  }
  M_() {
    this.S_ !== null && (this.S_.cancel(), this.S_ = null);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class _D {
  constructor(e, n, r, i, s) {
    this.localStore = e, this.datastore = n, this.asyncQueue = r, this.remoteSyncer = {}, /**
    * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
    * LocalStore via fillWritePipeline() and have or will send to the write
    * stream.
    *
    * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
    * restart the write stream. When the stream is established the writes in the
    * pipeline will be sent in order.
    *
    * Writes remain in writePipeline until they are acknowledged by the backend
    * and thus will automatically be re-sent if the stream is interrupted /
    * restarted before they're acknowledged.
    *
    * Write responses from the backend are linked to their originating request
    * purely based on order, and so we can just shift() writes from the front of
    * the writePipeline as we receive responses.
    */
    this.x_ = [], /**
    * A mapping of watched targets that the client cares about tracking and the
    * user has explicitly called a 'listen' for this target.
    *
    * These targets may or may not have been sent to or acknowledged by the
    * server. On re-establishing the listen stream, these targets should be sent
    * to the server. The targets removed with unlistens are removed eagerly
    * without waiting for confirmation from the listen stream.
    */
    this.O_ = /* @__PURE__ */ new Map(), /**
    * A set of reasons for why the RemoteStore may be offline. If empty, the
    * RemoteStore may start its network connections.
    */
    this.N_ = /* @__PURE__ */ new Set(), /**
    * Event handlers that get called when the network is disabled or enabled.
    *
    * PORTING NOTE: These functions are used on the Web client to create the
    * underlying streams (to support tree-shakeable streams). On Android and iOS,
    * the streams are created during construction of RemoteStore.
    */
    this.L_ = [], this.B_ = s, this.B_.oo((o) => {
      r.enqueueAndForget(async () => {
        Br(this) && (Z("RemoteStore", "Restarting streams for network reachability change."), await async function(u) {
          const l = he(u);
          l.N_.add(
            4
            /* OfflineCause.ConnectivityChange */
          ), await Bs(l), l.k_.set(
            "Unknown"
            /* OnlineState.Unknown */
          ), l.N_.delete(
            4
            /* OfflineCause.ConnectivityChange */
          ), await Qa(l);
        }(this));
      });
    }), this.k_ = new vD(r, i);
  }
}
async function Qa(t) {
  if (Br(t)) for (const e of t.L_) await e(
    /* enabled= */
    !0
  );
}
async function Bs(t) {
  for (const e of t.L_) await e(
    /* enabled= */
    !1
  );
}
function e_(t, e) {
  const n = he(t);
  n.O_.has(e.targetId) || // Mark this as something the client is currently listening for.
  (n.O_.set(e.targetId, e), af(n) ? (
    // The listen will be sent in onWatchStreamOpen
    of(n)
  ) : ki(n).n_() && sf(n, e));
}
function rf(t, e) {
  const n = he(t), r = ki(n);
  n.O_.delete(e), r.n_() && t_(n, e), n.O_.size === 0 && (r.n_() ? r.s_() : Br(n) && // Revert to OnlineState.Unknown if the watch stream is not open and we
  // have no listeners, since without any listens to send we cannot
  // confirm if the stream is healthy and upgrade to OnlineState.Online.
  n.k_.set(
    "Unknown"
    /* OnlineState.Unknown */
  ));
}
function sf(t, e) {
  if (t.q_.xe(e.targetId), e.resumeToken.approximateByteSize() > 0 || e.snapshotVersion.compareTo(fe.min()) > 0) {
    const n = t.remoteSyncer.getRemoteKeysForTarget(e.targetId).size;
    e = e.withExpectedCount(n);
  }
  ki(t).d_(e);
}
function t_(t, e) {
  t.q_.xe(e), ki(t).A_(e);
}
function of(t) {
  t.q_ = new wO({
    getRemoteKeysForTarget: (e) => t.remoteSyncer.getRemoteKeysForTarget(e),
    ot: (e) => t.O_.get(e) || null,
    tt: () => t.datastore.serializer.databaseId
  }), ki(t).start(), t.k_.D_();
}
function af(t) {
  return Br(t) && !ki(t).t_() && t.O_.size > 0;
}
function Br(t) {
  return he(t).N_.size === 0;
}
function n_(t) {
  t.q_ = void 0;
}
async function wD(t) {
  t.k_.set(
    "Online"
    /* OnlineState.Online */
  );
}
async function ED(t) {
  t.O_.forEach((e, n) => {
    sf(t, e);
  });
}
async function bD(t, e) {
  n_(t), // If we still need the watch stream, retry the connection.
  af(t) ? (t.k_.F_(e), of(t)) : (
    // No need to restart watch stream because there are no active targets.
    // The online state is set to unknown because there is no active attempt
    // at establishing a connection
    t.k_.set(
      "Unknown"
      /* OnlineState.Unknown */
    )
  );
}
async function TD(t, e, n) {
  if (
    // Mark the client as online since we got a message from the server
    t.k_.set(
      "Online"
      /* OnlineState.Online */
    ), e instanceof Bv && e.state === 2 && e.cause
  )
    try {
      await /** Handles an error on a target */
      async function(i, s) {
        const o = s.cause;
        for (const a of s.targetIds)
          i.O_.has(a) && (await i.remoteSyncer.rejectListen(a, o), i.O_.delete(a), i.q_.removeTarget(a));
      }(t, e);
    } catch (r) {
      Z("RemoteStore", "Failed to remove targets %s: %s ", e.targetIds.join(","), r), await la(t, r);
    }
  else if (e instanceof Uo ? t.q_.Ke(e) : e instanceof $v ? t.q_.He(e) : t.q_.We(e), !n.isEqual(fe.min())) try {
    const r = await Jv(t.localStore);
    n.compareTo(r) >= 0 && // We have received a target change with a global snapshot if the snapshot
    // version is not equal to SnapshotVersion.min().
    await /**
    * Takes a batch of changes from the Datastore, repackages them as a
    * RemoteEvent, and passes that on to the listener, which is typically the
    * SyncEngine.
    */
    function(s, o) {
      const a = s.q_.rt(o);
      return a.targetChanges.forEach((u, l) => {
        if (u.resumeToken.approximateByteSize() > 0) {
          const h = s.O_.get(l);
          h && s.O_.set(l, h.withResumeToken(u.resumeToken, o));
        }
      }), // Re-establish listens for the targets that have been invalidated by
      // existence filter mismatches.
      a.targetMismatches.forEach((u, l) => {
        const h = s.O_.get(u);
        if (!h)
          return;
        s.O_.set(u, h.withResumeToken(ft.EMPTY_BYTE_STRING, h.snapshotVersion)), // Cause a hard reset by unwatching and rewatching immediately, but
        // deliberately don't send a resume token so that we get a full update.
        t_(s, u);
        const f = new Hn(h.target, u, l, h.sequenceNumber);
        sf(s, f);
      }), s.remoteSyncer.applyRemoteEvent(a);
    }(t, n);
  } catch (r) {
    Z("RemoteStore", "Failed to raise snapshot:", r), await la(t, r);
  }
}
async function la(t, e, n) {
  if (!Us(e)) throw e;
  t.N_.add(
    1
    /* OfflineCause.IndexedDbFailed */
  ), // Disable network and raise offline snapshots
  await Bs(t), t.k_.set(
    "Offline"
    /* OnlineState.Offline */
  ), n || // Use a simple read operation to determine if IndexedDB recovered.
  // Ideally, we would expose a health check directly on SimpleDb, but
  // RemoteStore only has access to persistence through LocalStore.
  (n = () => Jv(t.localStore)), // Probe IndexedDB periodically and re-enable network
  t.asyncQueue.enqueueRetryable(async () => {
    Z("RemoteStore", "Retrying IndexedDB access"), await n(), t.N_.delete(
      1
      /* OfflineCause.IndexedDbFailed */
    ), await Qa(t);
  });
}
function r_(t, e) {
  return e().catch((n) => la(t, n, e));
}
async function Ya(t) {
  const e = he(t), n = er(e);
  let r = e.x_.length > 0 ? e.x_[e.x_.length - 1].batchId : -1;
  for (; ID(e); ) try {
    const i = await aD(e.localStore, r);
    if (i === null) {
      e.x_.length === 0 && n.s_();
      break;
    }
    r = i.batchId, SD(e, i);
  } catch (i) {
    await la(e, i);
  }
  i_(e) && s_(e);
}
function ID(t) {
  return Br(t) && t.x_.length < 10;
}
function SD(t, e) {
  t.x_.push(e);
  const n = er(t);
  n.n_() && n.R_ && n.V_(e.mutations);
}
function i_(t) {
  return Br(t) && !er(t).t_() && t.x_.length > 0;
}
function s_(t) {
  er(t).start();
}
async function AD(t) {
  er(t).g_();
}
async function RD(t) {
  const e = er(t);
  for (const n of t.x_) e.V_(n.mutations);
}
async function CD(t, e, n) {
  const r = t.x_.shift(), i = Jl.from(r, e, n);
  await r_(t, () => t.remoteSyncer.applySuccessfulWrite(i)), // It's possible that with the completion of this mutation another
  // slot has freed up.
  await Ya(t);
}
async function PD(t, e) {
  e && er(t).R_ && // This error affects the actual write.
  await async function(r, i) {
    if (function(o) {
      return yO(o) && o !== q.ABORTED;
    }(i.code)) {
      const s = r.x_.shift();
      er(r).i_(), await r_(r, () => r.remoteSyncer.rejectFailedWrite(s.batchId, i)), // It's possible that with the completion of this mutation
      // another slot has freed up.
      await Ya(r);
    }
  }(t, e), // The write stream might have been started by refilling the write
  // pipeline for failed writes
  i_(t) && s_(t);
}
async function Zp(t, e) {
  const n = he(t);
  n.asyncQueue.verifyOperationInProgress(), Z("RemoteStore", "RemoteStore received new credentials");
  const r = Br(n);
  n.N_.add(
    3
    /* OfflineCause.CredentialChange */
  ), await Bs(n), r && // Don't set the network status to Unknown if we are offline.
  n.k_.set(
    "Unknown"
    /* OnlineState.Unknown */
  ), await n.remoteSyncer.handleCredentialChange(e), n.N_.delete(
    3
    /* OfflineCause.CredentialChange */
  ), await Qa(n);
}
async function kD(t, e) {
  const n = he(t);
  e ? (n.N_.delete(
    2
    /* OfflineCause.IsSecondary */
  ), await Qa(n)) : e || (n.N_.add(
    2
    /* OfflineCause.IsSecondary */
  ), await Bs(n), n.k_.set(
    "Unknown"
    /* OnlineState.Unknown */
  ));
}
function ki(t) {
  return t.Q_ || // Create stream (but note that it is not started yet).
  (t.Q_ = function(n, r, i) {
    const s = he(n);
    return s.y_(), new mD(r, s.connection, s.authCredentials, s.appCheckCredentials, s.serializer, i);
  }(t.datastore, t.asyncQueue, {
    To: wD.bind(null, t),
    Ao: ED.bind(null, t),
    Vo: bD.bind(null, t),
    E_: TD.bind(null, t)
  }), t.L_.push(async (e) => {
    e ? (t.Q_.i_(), af(t) ? of(t) : t.k_.set(
      "Unknown"
      /* OnlineState.Unknown */
    )) : (await t.Q_.stop(), n_(t));
  })), t.Q_;
}
function er(t) {
  return t.K_ || // Create stream (but note that it is not started yet).
  (t.K_ = function(n, r, i) {
    const s = he(n);
    return s.y_(), new gD(r, s.connection, s.authCredentials, s.appCheckCredentials, s.serializer, i);
  }(t.datastore, t.asyncQueue, {
    To: () => Promise.resolve(),
    Ao: AD.bind(null, t),
    Vo: PD.bind(null, t),
    m_: RD.bind(null, t),
    f_: CD.bind(null, t)
  }), t.L_.push(async (e) => {
    e ? (t.K_.i_(), // This will start the write stream if necessary.
    await Ya(t)) : (await t.K_.stop(), t.x_.length > 0 && (Z("RemoteStore", `Stopping write stream with ${t.x_.length} pending writes`), t.x_ = []));
  })), t.K_;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class cf {
  constructor(e, n, r, i, s) {
    this.asyncQueue = e, this.timerId = n, this.targetTimeMs = r, this.op = i, this.removalCallback = s, this.deferred = new An(), this.then = this.deferred.promise.then.bind(this.deferred.promise), // It's normal for the deferred promise to be canceled (due to cancellation)
    // and so we attach a dummy catch callback to avoid
    // 'UnhandledPromiseRejectionWarning' log spam.
    this.deferred.promise.catch((o) => {
    });
  }
  get promise() {
    return this.deferred.promise;
  }
  /**
   * Creates and returns a DelayedOperation that has been scheduled to be
   * executed on the provided asyncQueue after the provided delayMs.
   *
   * @param asyncQueue - The queue to schedule the operation on.
   * @param id - A Timer ID identifying the type of operation this is.
   * @param delayMs - The delay (ms) before the operation should be scheduled.
   * @param op - The operation to run.
   * @param removalCallback - A callback to be called synchronously once the
   *   operation is executed or canceled, notifying the AsyncQueue to remove it
   *   from its delayedOperations list.
   *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
   *   the DelayedOperation class public.
   */
  static createAndSchedule(e, n, r, i, s) {
    const o = Date.now() + r, a = new cf(e, n, o, i, s);
    return a.start(r), a;
  }
  /**
   * Starts the timer. This is called immediately after construction by
   * createAndSchedule().
   */
  start(e) {
    this.timerHandle = setTimeout(() => this.handleDelayElapsed(), e);
  }
  /**
   * Queues the operation to run immediately (if it hasn't already been run or
   * canceled).
   */
  skipDelay() {
    return this.handleDelayElapsed();
  }
  /**
   * Cancels the operation if it hasn't already been executed or canceled. The
   * promise will be rejected.
   *
   * As long as the operation has not yet been run, calling cancel() provides a
   * guarantee that the operation will not be run.
   */
  cancel(e) {
    this.timerHandle !== null && (this.clearTimeout(), this.deferred.reject(new re(q.CANCELLED, "Operation cancelled" + (e ? ": " + e : ""))));
  }
  handleDelayElapsed() {
    this.asyncQueue.enqueueAndForget(() => this.timerHandle !== null ? (this.clearTimeout(), this.op().then((e) => this.deferred.resolve(e))) : Promise.resolve());
  }
  clearTimeout() {
    this.timerHandle !== null && (this.removalCallback(this), clearTimeout(this.timerHandle), this.timerHandle = null);
  }
}
function uf(t, e) {
  if (On("AsyncQueue", `${e}: ${t}`), Us(t)) return new re(q.UNAVAILABLE, `${e}: ${t}`);
  throw t;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ai {
  /** The default ordering is by key if the comparator is omitted */
  constructor(e) {
    this.comparator = e ? (n, r) => e(n, r) || se.comparator(n.key, r.key) : (n, r) => se.comparator(n.key, r.key), this.keyedMap = ts(), this.sortedSet = new Me(this.comparator);
  }
  /**
   * Returns an empty copy of the existing DocumentSet, using the same
   * comparator.
   */
  static emptySet(e) {
    return new ai(e.comparator);
  }
  has(e) {
    return this.keyedMap.get(e) != null;
  }
  get(e) {
    return this.keyedMap.get(e);
  }
  first() {
    return this.sortedSet.minKey();
  }
  last() {
    return this.sortedSet.maxKey();
  }
  isEmpty() {
    return this.sortedSet.isEmpty();
  }
  /**
   * Returns the index of the provided key in the document set, or -1 if the
   * document key is not present in the set;
   */
  indexOf(e) {
    const n = this.keyedMap.get(e);
    return n ? this.sortedSet.indexOf(n) : -1;
  }
  get size() {
    return this.sortedSet.size;
  }
  /** Iterates documents in order defined by "comparator" */
  forEach(e) {
    this.sortedSet.inorderTraversal((n, r) => (e(n), !1));
  }
  /** Inserts or updates a document with the same key */
  add(e) {
    const n = this.delete(e.key);
    return n.copy(n.keyedMap.insert(e.key, e), n.sortedSet.insert(e, null));
  }
  /** Deletes a document with a given key */
  delete(e) {
    const n = this.get(e);
    return n ? this.copy(this.keyedMap.remove(e), this.sortedSet.remove(n)) : this;
  }
  isEqual(e) {
    if (!(e instanceof ai) || this.size !== e.size) return !1;
    const n = this.sortedSet.getIterator(), r = e.sortedSet.getIterator();
    for (; n.hasNext(); ) {
      const i = n.getNext().key, s = r.getNext().key;
      if (!i.isEqual(s)) return !1;
    }
    return !0;
  }
  toString() {
    const e = [];
    return this.forEach((n) => {
      e.push(n.toString());
    }), e.length === 0 ? "DocumentSet ()" : `DocumentSet (
  ` + e.join(`  
`) + `
)`;
  }
  copy(e, n) {
    const r = new ai();
    return r.comparator = this.comparator, r.keyedMap = e, r.sortedSet = n, r;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class em {
  constructor() {
    this.U_ = new Me(se.comparator);
  }
  track(e) {
    const n = e.doc.key, r = this.U_.get(n);
    r ? (
      // Merge the new change with the existing change.
      e.type !== 0 && r.type === 3 ? this.U_ = this.U_.insert(n, e) : e.type === 3 && r.type !== 1 ? this.U_ = this.U_.insert(n, {
        type: r.type,
        doc: e.doc
      }) : e.type === 2 && r.type === 2 ? this.U_ = this.U_.insert(n, {
        type: 2,
        doc: e.doc
      }) : e.type === 2 && r.type === 0 ? this.U_ = this.U_.insert(n, {
        type: 0,
        doc: e.doc
      }) : e.type === 1 && r.type === 0 ? this.U_ = this.U_.remove(n) : e.type === 1 && r.type === 2 ? this.U_ = this.U_.insert(n, {
        type: 1,
        doc: r.doc
      }) : e.type === 0 && r.type === 1 ? this.U_ = this.U_.insert(n, {
        type: 2,
        doc: e.doc
      }) : (
        // This includes these cases, which don't make sense:
        // Added->Added
        // Removed->Removed
        // Modified->Added
        // Removed->Modified
        // Metadata->Added
        // Removed->Metadata
        ce()
      )
    ) : this.U_ = this.U_.insert(n, e);
  }
  W_() {
    const e = [];
    return this.U_.inorderTraversal((n, r) => {
      e.push(r);
    }), e;
  }
}
class _i {
  constructor(e, n, r, i, s, o, a, u, l) {
    this.query = e, this.docs = n, this.oldDocs = r, this.docChanges = i, this.mutatedKeys = s, this.fromCache = o, this.syncStateChanged = a, this.excludesMetadataChanges = u, this.hasCachedResults = l;
  }
  /** Returns a view snapshot as if all documents in the snapshot were added. */
  static fromInitialDocuments(e, n, r, i, s) {
    const o = [];
    return n.forEach((a) => {
      o.push({
        type: 0,
        doc: a
      });
    }), new _i(
      e,
      n,
      ai.emptySet(n),
      o,
      r,
      i,
      /* syncStateChanged= */
      !0,
      /* excludesMetadataChanges= */
      !1,
      s
    );
  }
  get hasPendingWrites() {
    return !this.mutatedKeys.isEmpty();
  }
  isEqual(e) {
    if (!(this.fromCache === e.fromCache && this.hasCachedResults === e.hasCachedResults && this.syncStateChanged === e.syncStateChanged && this.mutatedKeys.isEqual(e.mutatedKeys) && qa(this.query, e.query) && this.docs.isEqual(e.docs) && this.oldDocs.isEqual(e.oldDocs))) return !1;
    const n = this.docChanges, r = e.docChanges;
    if (n.length !== r.length) return !1;
    for (let i = 0; i < n.length; i++) if (n[i].type !== r[i].type || !n[i].doc.isEqual(r[i].doc)) return !1;
    return !0;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class OD {
  constructor() {
    this.G_ = void 0, this.z_ = [];
  }
  // Helper methods that checks if the query has listeners that listening to remote store
  j_() {
    return this.z_.some((e) => e.H_());
  }
}
class DD {
  constructor() {
    this.queries = tm(), this.onlineState = "Unknown", this.J_ = /* @__PURE__ */ new Set();
  }
  terminate() {
    (function(n, r) {
      const i = he(n), s = i.queries;
      i.queries = tm(), s.forEach((o, a) => {
        for (const u of a.z_) u.onError(r);
      });
    })(this, new re(q.ABORTED, "Firestore shutting down"));
  }
}
function tm() {
  return new Pi((t) => Av(t), qa);
}
async function lf(t, e) {
  const n = he(t);
  let r = 3;
  const i = e.query;
  let s = n.queries.get(i);
  s ? !s.j_() && e.H_() && // Query has been listening to local cache, and tries to add a new listener sourced from watch.
  (r = 2) : (s = new OD(), r = e.H_() ? 0 : 1);
  try {
    switch (r) {
      case 0:
        s.G_ = await n.onListen(
          i,
          /** enableRemoteListen= */
          !0
        );
        break;
      case 1:
        s.G_ = await n.onListen(
          i,
          /** enableRemoteListen= */
          !1
        );
        break;
      case 2:
        await n.onFirstRemoteStoreListen(i);
    }
  } catch (o) {
    const a = uf(o, `Initialization of query '${Yr(e.query)}' failed`);
    return void e.onError(a);
  }
  n.queries.set(i, s), s.z_.push(e), // Run global snapshot listeners if a consistent snapshot has been emitted.
  e.Y_(n.onlineState), s.G_ && e.Z_(s.G_) && hf(n);
}
async function ff(t, e) {
  const n = he(t), r = e.query;
  let i = 3;
  const s = n.queries.get(r);
  if (s) {
    const o = s.z_.indexOf(e);
    o >= 0 && (s.z_.splice(o, 1), s.z_.length === 0 ? i = e.H_() ? 0 : 1 : !s.j_() && e.H_() && // The removed listener is the last one that sourced from watch.
    (i = 2));
  }
  switch (i) {
    case 0:
      return n.queries.delete(r), n.onUnlisten(
        r,
        /** disableRemoteListen= */
        !0
      );
    case 1:
      return n.queries.delete(r), n.onUnlisten(
        r,
        /** disableRemoteListen= */
        !1
      );
    case 2:
      return n.onLastRemoteStoreUnlisten(r);
    default:
      return;
  }
}
function ND(t, e) {
  const n = he(t);
  let r = !1;
  for (const i of e) {
    const s = i.query, o = n.queries.get(s);
    if (o) {
      for (const a of o.z_) a.Z_(i) && (r = !0);
      o.G_ = i;
    }
  }
  r && hf(n);
}
function xD(t, e, n) {
  const r = he(t), i = r.queries.get(e);
  if (i) for (const s of i.z_) s.onError(n);
  r.queries.delete(e);
}
function hf(t) {
  t.J_.forEach((e) => {
    e.next();
  });
}
var el, nm;
(nm = el || (el = {})).X_ = "default", /** Listen to changes in cache only */
nm.Cache = "cache";
class df {
  constructor(e, n, r) {
    this.query = e, this.ea = n, /**
    * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
    * observer. This flag is set to true once we've actually raised an event.
    */
    this.ta = !1, this.na = null, this.onlineState = "Unknown", this.options = r || {};
  }
  /**
   * Applies the new ViewSnapshot to this listener, raising a user-facing event
   * if applicable (depending on what changed, whether the user has opted into
   * metadata-only changes, etc.). Returns true if a user-facing event was
   * indeed raised.
   */
  Z_(e) {
    if (!this.options.includeMetadataChanges) {
      const r = [];
      for (const i of e.docChanges) i.type !== 3 && r.push(i);
      e = new _i(
        e.query,
        e.docs,
        e.oldDocs,
        r,
        e.mutatedKeys,
        e.fromCache,
        e.syncStateChanged,
        /* excludesMetadataChanges= */
        !0,
        e.hasCachedResults
      );
    }
    let n = !1;
    return this.ta ? this.ra(e) && (this.ea.next(e), n = !0) : this.ia(e, this.onlineState) && (this.sa(e), n = !0), this.na = e, n;
  }
  onError(e) {
    this.ea.error(e);
  }
  /** Returns whether a snapshot was raised. */
  Y_(e) {
    this.onlineState = e;
    let n = !1;
    return this.na && !this.ta && this.ia(this.na, e) && (this.sa(this.na), n = !0), n;
  }
  ia(e, n) {
    if (!e.fromCache || !this.H_()) return !0;
    const r = n !== "Offline";
    return (!this.options.oa || !r) && (!e.docs.isEmpty() || e.hasCachedResults || n === "Offline");
  }
  ra(e) {
    if (e.docChanges.length > 0) return !0;
    const n = this.na && this.na.hasPendingWrites !== e.hasPendingWrites;
    return !(!e.syncStateChanged && !n) && this.options.includeMetadataChanges === !0;
  }
  sa(e) {
    e = _i.fromInitialDocuments(e.query, e.docs, e.mutatedKeys, e.fromCache, e.hasCachedResults), this.ta = !0, this.ea.next(e);
  }
  H_() {
    return this.options.source !== el.Cache;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class o_ {
  constructor(e) {
    this.key = e;
  }
}
class a_ {
  constructor(e) {
    this.key = e;
  }
}
class LD {
  constructor(e, n) {
    this.query = e, this.Ia = n, this.Ta = null, this.hasCachedResults = !1, /**
    * A flag whether the view is current with the backend. A view is considered
    * current after it has seen the current flag from the backend and did not
    * lose consistency within the watch stream (e.g. because of an existence
    * filter mismatch).
    */
    this.current = !1, /** Documents in the view but not in the remote target */
    this.Ea = ve(), /** Document Keys that have local changes */
    this.mutatedKeys = ve(), this.da = Rv(e), this.Aa = new ai(this.da);
  }
  /**
   * The set of remote documents that the server has told us belongs to the target associated with
   * this view.
   */
  get Ra() {
    return this.Ia;
  }
  /**
   * Iterates over a set of doc changes, applies the query limit, and computes
   * what the new results should be, what the changes were, and whether we may
   * need to go back to the local cache for more results. Does not make any
   * changes to the view.
   * @param docChanges - The doc changes to apply to this view.
   * @param previousChanges - If this is being called with a refill, then start
   *        with this set of docs and changes instead of the current view.
   * @returns a new set of docs, changes, and refill flag.
   */
  Va(e, n) {
    const r = n ? n.ma : new em(), i = n ? n.Aa : this.Aa;
    let s = n ? n.mutatedKeys : this.mutatedKeys, o = i, a = !1;
    const u = this.query.limitType === "F" && i.size === this.query.limit ? i.last() : null, l = this.query.limitType === "L" && i.size === this.query.limit ? i.first() : null;
    if (e.inorderTraversal((h, f) => {
      const y = i.get(h), b = za(this.query, f) ? f : null, S = !!y && this.mutatedKeys.has(y.key), C = !!b && (b.hasLocalMutations || // We only consider committed mutations for documents that were
      // mutated during the lifetime of the view.
      this.mutatedKeys.has(b.key) && b.hasCommittedMutations);
      let m = !1;
      y && b ? y.data.isEqual(b.data) ? S !== C && (r.track({
        type: 3,
        doc: b
      }), m = !0) : this.fa(y, b) || (r.track({
        type: 2,
        doc: b
      }), m = !0, (u && this.da(b, u) > 0 || l && this.da(b, l) < 0) && // This doc moved from inside the limit to outside the limit.
      // That means there may be some other doc in the local cache
      // that should be included instead.
      (a = !0)) : !y && b ? (r.track({
        type: 0,
        doc: b
      }), m = !0) : y && !b && (r.track({
        type: 1,
        doc: y
      }), m = !0, (u || l) && // A doc was removed from a full limit query. We'll need to
      // requery from the local cache to see if we know about some other
      // doc that should be in the results.
      (a = !0)), m && (b ? (o = o.add(b), s = C ? s.add(h) : s.delete(h)) : (o = o.delete(h), s = s.delete(h)));
    }), this.query.limit !== null) for (; o.size > this.query.limit; ) {
      const h = this.query.limitType === "F" ? o.last() : o.first();
      o = o.delete(h.key), s = s.delete(h.key), r.track({
        type: 1,
        doc: h
      });
    }
    return {
      Aa: o,
      ma: r,
      ts: a,
      mutatedKeys: s
    };
  }
  fa(e, n) {
    return e.hasLocalMutations && n.hasCommittedMutations && !n.hasLocalMutations;
  }
  /**
   * Updates the view with the given ViewDocumentChanges and optionally updates
   * limbo docs and sync state from the provided target change.
   * @param docChanges - The set of changes to make to the view's docs.
   * @param limboResolutionEnabled - Whether to update limbo documents based on
   *        this change.
   * @param targetChange - A target change to apply for computing limbo docs and
   *        sync state.
   * @param targetIsPendingReset - Whether the target is pending to reset due to
   *        existence filter mismatch. If not explicitly specified, it is treated
   *        equivalently to `false`.
   * @returns A new ViewChange with the given docs, changes, and sync state.
   */
  // PORTING NOTE: The iOS/Android clients always compute limbo document changes.
  applyChanges(e, n, r, i) {
    const s = this.Aa;
    this.Aa = e.Aa, this.mutatedKeys = e.mutatedKeys;
    const o = e.ma.W_();
    o.sort((h, f) => function(b, S) {
      const C = (m) => {
        switch (m) {
          case 0:
            return 1;
          case 2:
          case 3:
            return 2;
          case 1:
            return 0;
          default:
            return ce();
        }
      };
      return C(b) - C(S);
    }(h.type, f.type) || this.da(h.doc, f.doc)), this.ga(r), i = i != null && i;
    const a = n && !i ? this.pa() : [], u = this.Ea.size === 0 && this.current && !i ? 1 : 0, l = u !== this.Ta;
    return this.Ta = u, o.length !== 0 || l ? {
      snapshot: new _i(
        this.query,
        e.Aa,
        s,
        o,
        e.mutatedKeys,
        u === 0,
        l,
        /* excludesMetadataChanges= */
        !1,
        !!r && r.resumeToken.approximateByteSize() > 0
      ),
      ya: a
    } : {
      ya: a
    };
  }
  /**
   * Applies an OnlineState change to the view, potentially generating a
   * ViewChange if the view's syncState changes as a result.
   */
  Y_(e) {
    return this.current && e === "Offline" ? (
      // If we're offline, set `current` to false and then call applyChanges()
      // to refresh our syncState and generate a ViewChange as appropriate. We
      // are guaranteed to get a new TargetChange that sets `current` back to
      // true once the client is back online.
      (this.current = !1, this.applyChanges(
        {
          Aa: this.Aa,
          ma: new em(),
          mutatedKeys: this.mutatedKeys,
          ts: !1
        },
        /* limboResolutionEnabled= */
        !1
      ))
    ) : {
      ya: []
    };
  }
  /**
   * Returns whether the doc for the given key should be in limbo.
   */
  wa(e) {
    return !this.Ia.has(e) && // The local store doesn't think it's a result, so it shouldn't be in limbo.
    !!this.Aa.has(e) && !this.Aa.get(e).hasLocalMutations;
  }
  /**
   * Updates syncedDocuments, current, and limbo docs based on the given change.
   * Returns the list of changes to which docs are in limbo.
   */
  ga(e) {
    e && (e.addedDocuments.forEach((n) => this.Ia = this.Ia.add(n)), e.modifiedDocuments.forEach((n) => {
    }), e.removedDocuments.forEach((n) => this.Ia = this.Ia.delete(n)), this.current = e.current);
  }
  pa() {
    if (!this.current) return [];
    const e = this.Ea;
    this.Ea = ve(), this.Aa.forEach((r) => {
      this.wa(r.key) && (this.Ea = this.Ea.add(r.key));
    });
    const n = [];
    return e.forEach((r) => {
      this.Ea.has(r) || n.push(new a_(r));
    }), this.Ea.forEach((r) => {
      e.has(r) || n.push(new o_(r));
    }), n;
  }
  /**
   * Update the in-memory state of the current view with the state read from
   * persistence.
   *
   * We update the query view whenever a client's primary status changes:
   * - When a client transitions from primary to secondary, it can miss
   *   LocalStorage updates and its query views may temporarily not be
   *   synchronized with the state on disk.
   * - For secondary to primary transitions, the client needs to update the list
   *   of `syncedDocuments` since secondary clients update their query views
   *   based purely on synthesized RemoteEvents.
   *
   * @param queryResult.documents - The documents that match the query according
   * to the LocalStore.
   * @param queryResult.remoteKeys - The keys of the documents that match the
   * query according to the backend.
   *
   * @returns The ViewChange that resulted from this synchronization.
   */
  // PORTING NOTE: Multi-tab only.
  Sa(e) {
    this.Ia = e.Is, this.Ea = ve();
    const n = this.Va(e.documents);
    return this.applyChanges(
      n,
      /* limboResolutionEnabled= */
      !0
    );
  }
  /**
   * Returns a view snapshot as if this query was just listened to. Contains
   * a document add for every existing document and the `fromCache` and
   * `hasPendingWrites` status of the already established view.
   */
  // PORTING NOTE: Multi-tab only.
  ba() {
    return _i.fromInitialDocuments(this.query, this.Aa, this.mutatedKeys, this.Ta === 0, this.hasCachedResults);
  }
}
class MD {
  constructor(e, n, r) {
    this.query = e, this.targetId = n, this.view = r;
  }
}
class VD {
  constructor(e) {
    this.key = e, /**
    * Set to true once we've received a document. This is used in
    * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to
    * decide whether it needs to manufacture a delete event for the target once
    * the target is CURRENT.
    */
    this.Da = !1;
  }
}
class FD {
  constructor(e, n, r, i, s, o) {
    this.localStore = e, this.remoteStore = n, this.eventManager = r, this.sharedClientState = i, this.currentUser = s, this.maxConcurrentLimboResolutions = o, this.Ca = {}, this.va = new Pi((a) => Av(a), qa), this.Fa = /* @__PURE__ */ new Map(), /**
    * The keys of documents that are in limbo for which we haven't yet started a
    * limbo resolution query. The strings in this set are the result of calling
    * `key.path.canonicalString()` where `key` is a `DocumentKey` object.
    *
    * The `Set` type was chosen because it provides efficient lookup and removal
    * of arbitrary elements and it also maintains insertion order, providing the
    * desired queue-like FIFO semantics.
    */
    this.Ma = /* @__PURE__ */ new Set(), /**
    * Keeps track of the target ID for each document that is in limbo with an
    * active target.
    */
    this.xa = new Me(se.comparator), /**
    * Keeps track of the information about an active limbo resolution for each
    * active target ID that was started for the purpose of limbo resolution.
    */
    this.Oa = /* @__PURE__ */ new Map(), this.Na = new ef(), /** Stores user completion handlers, indexed by User and BatchId. */
    this.La = {}, /** Stores user callbacks waiting for all pending writes to be acknowledged. */
    this.Ba = /* @__PURE__ */ new Map(), this.ka = vi.Bn(), this.onlineState = "Unknown", // The primary state is set to `true` or `false` immediately after Firestore
    // startup. In the interim, a client should only be considered primary if
    // `isPrimary` is true.
    this.qa = void 0;
  }
  get isPrimaryClient() {
    return this.qa === !0;
  }
}
async function UD(t, e, n = !0) {
  const r = d_(t);
  let i;
  const s = r.va.get(e);
  return s ? (
    // PORTING NOTE: With Multi-Tab Web, it is possible that a query view
    // already exists when EventManager calls us for the first time. This
    // happens when the primary tab is already listening to this query on
    // behalf of another tab and the user of the primary also starts listening
    // to the query. EventManager will not have an assigned target ID in this
    // case and calls `listen` to obtain this ID.
    (r.sharedClientState.addLocalQueryTarget(s.targetId), i = s.view.ba())
  ) : i = await c_(
    r,
    e,
    n,
    /** shouldInitializeView= */
    !0
  ), i;
}
async function jD(t, e) {
  const n = d_(t);
  await c_(
    n,
    e,
    /** shouldListenToRemote= */
    !0,
    /** shouldInitializeView= */
    !1
  );
}
async function c_(t, e, n, r) {
  const i = await cD(t.localStore, un(e)), s = i.targetId, o = n ? t.sharedClientState.addLocalQueryTarget(s) : "not-current";
  let a;
  return r && (a = await $D(t, e, s, o === "current", i.resumeToken)), t.isPrimaryClient && n && e_(t.remoteStore, i), a;
}
async function $D(t, e, n, r, i) {
  t.Qa = (f, y, b) => async function(C, m, v, E) {
    let p = m.view.Va(v);
    p.ts && // The query has a limit and some docs were removed, so we need
    // to re-run the query against the local store to make sure we
    // didn't lose any good docs that had been past the limit.
    (p = await Yp(
      C.localStore,
      m.query,
      /* usePreviousResults= */
      !1
    ).then(({ documents: R }) => m.view.Va(R, p)));
    const g = E && E.targetChanges.get(m.targetId), w = E && E.targetMismatches.get(m.targetId) != null, I = m.view.applyChanges(
      p,
      /* limboResolutionEnabled= */
      C.isPrimaryClient,
      g,
      w
    );
    return im(C, m.targetId, I.ya), I.snapshot;
  }(t, f, y, b);
  const s = await Yp(
    t.localStore,
    e,
    /* usePreviousResults= */
    !0
  ), o = new LD(e, s.Is), a = o.Va(s.documents), u = $s.createSynthesizedTargetChangeForCurrentChange(n, r && t.onlineState !== "Offline", i), l = o.applyChanges(
    a,
    /* limboResolutionEnabled= */
    t.isPrimaryClient,
    u
  );
  im(t, n, l.ya);
  const h = new MD(e, n, o);
  return t.va.set(e, h), t.Fa.has(n) ? t.Fa.get(n).push(e) : t.Fa.set(n, [e]), l.snapshot;
}
async function BD(t, e, n) {
  const r = he(t), i = r.va.get(e), s = r.Fa.get(i.targetId);
  if (s.length > 1) return r.Fa.set(i.targetId, s.filter((o) => !qa(o, e))), void r.va.delete(e);
  r.isPrimaryClient ? (r.sharedClientState.removeLocalQueryTarget(i.targetId), r.sharedClientState.isActiveQueryTarget(i.targetId) || await Zu(
    r.localStore,
    i.targetId,
    /*keepPersistedTargetData=*/
    !1
  ).then(() => {
    r.sharedClientState.clearQueryState(i.targetId), n && rf(r.remoteStore, i.targetId), tl(r, i.targetId);
  }).catch(Fs)) : (tl(r, i.targetId), await Zu(
    r.localStore,
    i.targetId,
    /*keepPersistedTargetData=*/
    !0
  ));
}
async function qD(t, e) {
  const n = he(t), r = n.va.get(e), i = n.Fa.get(r.targetId);
  n.isPrimaryClient && i.length === 1 && // PORTING NOTE: Unregister the target ID with local Firestore client as
  // watch target.
  (n.sharedClientState.removeLocalQueryTarget(r.targetId), rf(n.remoteStore, r.targetId));
}
async function zD(t, e, n) {
  const r = JD(t);
  try {
    const i = await function(o, a) {
      const u = he(o), l = et.now(), h = a.reduce((b, S) => b.add(S.key), ve());
      let f, y;
      return u.persistence.runTransaction("Locally write mutations", "readwrite", (b) => {
        let S = Dn(), C = ve();
        return u.us.getEntries(b, h).next((m) => {
          S = m, S.forEach((v, E) => {
            E.isValidDocument() || (C = C.add(v));
          });
        }).next(() => u.localDocuments.getOverlayedDocuments(b, S)).next((m) => {
          f = m;
          const v = [];
          for (const E of a) {
            const p = hO(E, f.get(E.key).overlayedDocument);
            p != null && // NOTE: The base state should only be applied if there's some
            // existing document to override, so use a Precondition of
            // exists=true
            v.push(new $r(E.key, p, _v(p.value.mapValue), Rn.exists(!0)));
          }
          return u.mutationQueue.addMutationBatch(b, l, v, a);
        }).next((m) => {
          y = m;
          const v = m.applyToLocalDocumentSet(f, C);
          return u.documentOverlayCache.saveOverlays(b, m.batchId, v);
        });
      }).then(() => ({
        batchId: y.batchId,
        changes: Pv(f)
      }));
    }(r.localStore, e);
    r.sharedClientState.addPendingMutation(i.batchId), function(o, a, u) {
      let l = o.La[o.currentUser.toKey()];
      l || (l = new Me(be)), l = l.insert(a, u), o.La[o.currentUser.toKey()] = l;
    }(r, i.batchId, n), await qs(r, i.changes), await Ya(r.remoteStore);
  } catch (i) {
    const s = uf(i, "Failed to persist write");
    n.reject(s);
  }
}
async function u_(t, e) {
  const n = he(t);
  try {
    const r = await sD(n.localStore, e);
    e.targetChanges.forEach((i, s) => {
      const o = n.Oa.get(s);
      o && // Since this is a limbo resolution lookup, it's for a single document
      // and it could be added, modified, or removed, but not a combination.
      (De(i.addedDocuments.size + i.modifiedDocuments.size + i.removedDocuments.size <= 1), i.addedDocuments.size > 0 ? o.Da = !0 : i.modifiedDocuments.size > 0 ? De(o.Da) : i.removedDocuments.size > 0 && (De(o.Da), o.Da = !1));
    }), await qs(n, r, e);
  } catch (r) {
    await Fs(r);
  }
}
function rm(t, e, n) {
  const r = he(t);
  if (r.isPrimaryClient && n === 0 || !r.isPrimaryClient && n === 1) {
    const i = [];
    r.va.forEach((s, o) => {
      const a = o.view.Y_(e);
      a.snapshot && i.push(a.snapshot);
    }), function(o, a) {
      const u = he(o);
      u.onlineState = a;
      let l = !1;
      u.queries.forEach((h, f) => {
        for (const y of f.z_)
          y.Y_(a) && (l = !0);
      }), l && hf(u);
    }(r.eventManager, e), i.length && r.Ca.E_(i), r.onlineState = e, r.isPrimaryClient && r.sharedClientState.setOnlineState(e);
  }
}
async function KD(t, e, n) {
  const r = he(t);
  r.sharedClientState.updateQueryState(e, "rejected", n);
  const i = r.Oa.get(e), s = i && i.key;
  if (s) {
    let o = new Me(se.comparator);
    o = o.insert(s, vt.newNoDocument(s, fe.min()));
    const a = ve().add(s), u = new Ga(
      fe.min(),
      /* targetChanges= */
      /* @__PURE__ */ new Map(),
      /* targetMismatches= */
      new Me(be),
      o,
      a
    );
    await u_(r, u), // Since this query failed, we won't want to manually unlisten to it.
    // We only remove it from bookkeeping after we successfully applied the
    // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to
    // this query when the RemoteStore restarts the Watch stream, which should
    // re-trigger the target failure.
    r.xa = r.xa.remove(s), r.Oa.delete(e), pf(r);
  } else await Zu(
    r.localStore,
    e,
    /* keepPersistedTargetData */
    !1
  ).then(() => tl(r, e, n)).catch(Fs);
}
async function HD(t, e) {
  const n = he(t), r = e.batch.batchId;
  try {
    const i = await iD(n.localStore, e);
    f_(
      n,
      r,
      /*error=*/
      null
    ), l_(n, r), n.sharedClientState.updateMutationState(r, "acknowledged"), await qs(n, i);
  } catch (i) {
    await Fs(i);
  }
}
async function GD(t, e, n) {
  const r = he(t);
  try {
    const i = await function(o, a) {
      const u = he(o);
      return u.persistence.runTransaction("Reject batch", "readwrite-primary", (l) => {
        let h;
        return u.mutationQueue.lookupMutationBatch(l, a).next((f) => (De(f !== null), h = f.keys(), u.mutationQueue.removeMutationBatch(l, f))).next(() => u.mutationQueue.performConsistencyCheck(l)).next(() => u.documentOverlayCache.removeOverlaysForBatchId(l, h, a)).next(() => u.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(l, h)).next(() => u.localDocuments.getDocuments(l, h));
      });
    }(r.localStore, e);
    f_(r, e, n), l_(r, e), r.sharedClientState.updateMutationState(e, "rejected", n), await qs(r, i);
  } catch (i) {
    await Fs(i);
  }
}
function l_(t, e) {
  (t.Ba.get(e) || []).forEach((n) => {
    n.resolve();
  }), t.Ba.delete(e);
}
function f_(t, e, n) {
  const r = he(t);
  let i = r.La[r.currentUser.toKey()];
  if (i) {
    const s = i.get(e);
    s && (n ? s.reject(n) : s.resolve(), i = i.remove(e)), r.La[r.currentUser.toKey()] = i;
  }
}
function tl(t, e, n = null) {
  t.sharedClientState.removeLocalQueryTarget(e);
  for (const r of t.Fa.get(e)) t.va.delete(r), n && t.Ca.Ka(r, n);
  t.Fa.delete(e), t.isPrimaryClient && t.Na.mr(e).forEach((r) => {
    t.Na.containsKey(r) || // We removed the last reference for this key
    h_(t, r);
  });
}
function h_(t, e) {
  t.Ma.delete(e.path.canonicalString());
  const n = t.xa.get(e);
  n !== null && (rf(t.remoteStore, n), t.xa = t.xa.remove(e), t.Oa.delete(n), pf(t));
}
function im(t, e, n) {
  for (const r of n) r instanceof o_ ? (t.Na.addReference(r.key, e), WD(t, r)) : r instanceof a_ ? (Z("SyncEngine", "Document no longer in limbo: " + r.key), t.Na.removeReference(r.key, e), t.Na.containsKey(r.key) || // We removed the last reference for this key
  h_(t, r.key)) : ce();
}
function WD(t, e) {
  const n = e.key, r = n.path.canonicalString();
  t.xa.get(n) || t.Ma.has(r) || (Z("SyncEngine", "New document in limbo: " + n), t.Ma.add(r), pf(t));
}
function pf(t) {
  for (; t.Ma.size > 0 && t.xa.size < t.maxConcurrentLimboResolutions; ) {
    const e = t.Ma.values().next().value;
    t.Ma.delete(e);
    const n = new se(Le.fromString(e)), r = t.ka.next();
    t.Oa.set(r, new VD(n)), t.xa = t.xa.insert(n, r), e_(t.remoteStore, new Hn(un(Ba(n.path)), r, "TargetPurposeLimboResolution", Kl.oe));
  }
}
async function qs(t, e, n) {
  const r = he(t), i = [], s = [], o = [];
  r.va.isEmpty() || (r.va.forEach((a, u) => {
    o.push(r.Qa(u, e, n).then((l) => {
      var h;
      if ((l || n) && r.isPrimaryClient) {
        const f = l ? !l.fromCache : (h = n == null ? void 0 : n.targetChanges.get(u.targetId)) === null || h === void 0 ? void 0 : h.current;
        r.sharedClientState.updateQueryState(u.targetId, f ? "current" : "not-current");
      }
      if (l) {
        i.push(l);
        const f = nf.Ui(u.targetId, l);
        s.push(f);
      }
    }));
  }), await Promise.all(o), r.Ca.E_(i), await async function(u, l) {
    const h = he(u);
    try {
      await h.persistence.runTransaction("notifyLocalViewChanges", "readwrite", (f) => z.forEach(l, (y) => z.forEach(y.Ki, (b) => h.persistence.referenceDelegate.addReference(f, y.targetId, b)).next(() => z.forEach(y.$i, (b) => h.persistence.referenceDelegate.removeReference(f, y.targetId, b)))));
    } catch (f) {
      if (!Us(f)) throw f;
      Z("LocalStore", "Failed to update sequence numbers: " + f);
    }
    for (const f of l) {
      const y = f.targetId;
      if (!f.fromCache) {
        const b = h.ss.get(y), S = b.snapshotVersion, C = b.withLastLimboFreeSnapshotVersion(S);
        h.ss = h.ss.insert(y, C);
      }
    }
  }(r.localStore, s));
}
async function QD(t, e) {
  const n = he(t);
  if (!n.currentUser.isEqual(e)) {
    Z("SyncEngine", "User change. New user:", e.toKey());
    const r = await Yv(n.localStore, e);
    n.currentUser = e, // Fails tasks waiting for pending writes requested by previous user.
    function(s, o) {
      s.Ba.forEach((a) => {
        a.forEach((u) => {
          u.reject(new re(q.CANCELLED, o));
        });
      }), s.Ba.clear();
    }(n, "'waitForPendingWrites' promise is rejected due to a user change."), // TODO(b/114226417): Consider calling this only in the primary tab.
    n.sharedClientState.handleUserChange(e, r.removedBatchIds, r.addedBatchIds), await qs(n, r.ls);
  }
}
function YD(t, e) {
  const n = he(t), r = n.Oa.get(e);
  if (r && r.Da) return ve().add(r.key);
  {
    let i = ve();
    const s = n.Fa.get(e);
    if (!s) return i;
    for (const o of s) {
      const a = n.va.get(o);
      i = i.unionWith(a.view.Ra);
    }
    return i;
  }
}
function d_(t) {
  const e = he(t);
  return e.remoteStore.remoteSyncer.applyRemoteEvent = u_.bind(null, e), e.remoteStore.remoteSyncer.getRemoteKeysForTarget = YD.bind(null, e), e.remoteStore.remoteSyncer.rejectListen = KD.bind(null, e), e.Ca.E_ = ND.bind(null, e.eventManager), e.Ca.Ka = xD.bind(null, e.eventManager), e;
}
function JD(t) {
  const e = he(t);
  return e.remoteStore.remoteSyncer.applySuccessfulWrite = HD.bind(null, e), e.remoteStore.remoteSyncer.rejectFailedWrite = GD.bind(null, e), e;
}
class sm {
  constructor() {
    this.synchronizeTabs = !1;
  }
  async initialize(e) {
    this.serializer = Wa(e.databaseInfo.databaseId), this.sharedClientState = this.createSharedClientState(e), this.persistence = this.createPersistence(e), await this.persistence.start(), this.localStore = this.createLocalStore(e), this.gcScheduler = this.createGarbageCollectionScheduler(e, this.localStore), this.indexBackfillerScheduler = this.createIndexBackfillerScheduler(e, this.localStore);
  }
  createGarbageCollectionScheduler(e, n) {
    return null;
  }
  createIndexBackfillerScheduler(e, n) {
    return null;
  }
  createLocalStore(e) {
    return rD(this.persistence, new tD(), e.initialUser, this.serializer);
  }
  createPersistence(e) {
    return new XO(tf.Yr, this.serializer);
  }
  createSharedClientState(e) {
    return new lD();
  }
  async terminate() {
    var e, n;
    (e = this.gcScheduler) === null || e === void 0 || e.stop(), (n = this.indexBackfillerScheduler) === null || n === void 0 || n.stop(), this.sharedClientState.shutdown(), await this.persistence.shutdown();
  }
}
class XD {
  async initialize(e, n) {
    this.localStore || (this.localStore = e.localStore, this.sharedClientState = e.sharedClientState, this.datastore = this.createDatastore(n), this.remoteStore = this.createRemoteStore(n), this.eventManager = this.createEventManager(n), this.syncEngine = this.createSyncEngine(
      n,
      /* startAsPrimary=*/
      !e.synchronizeTabs
    ), this.sharedClientState.onlineStateHandler = (r) => rm(
      this.syncEngine,
      r,
      1
      /* OnlineStateSource.SharedClientState */
    ), this.remoteStore.remoteSyncer.handleCredentialChange = QD.bind(null, this.syncEngine), await kD(this.remoteStore, this.syncEngine.isPrimaryClient));
  }
  createEventManager(e) {
    return function() {
      return new DD();
    }();
  }
  createDatastore(e) {
    const n = Wa(e.databaseInfo.databaseId), r = function(s) {
      return new pD(s);
    }(e.databaseInfo);
    return function(s, o, a, u) {
      return new yD(s, o, a, u);
    }(e.authCredentials, e.appCheckCredentials, r, n);
  }
  createRemoteStore(e) {
    return function(r, i, s, o, a) {
      return new _D(r, i, s, o, a);
    }(this.localStore, this.datastore, e.asyncQueue, (n) => rm(
      this.syncEngine,
      n,
      0
      /* OnlineStateSource.RemoteStore */
    ), function() {
      return Xp.D() ? new Xp() : new fD();
    }());
  }
  createSyncEngine(e, n) {
    return function(i, s, o, a, u, l, h) {
      const f = new FD(i, s, o, a, u, l);
      return h && (f.qa = !0), f;
    }(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, e.initialUser, e.maxConcurrentLimboResolutions, n);
  }
  async terminate() {
    var e, n;
    await async function(i) {
      const s = he(i);
      Z("RemoteStore", "RemoteStore shutting down."), s.N_.add(
        5
        /* OfflineCause.Shutdown */
      ), await Bs(s), s.B_.shutdown(), // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
      // triggering spurious listener events with cached data, etc.
      s.k_.set(
        "Unknown"
        /* OnlineState.Unknown */
      );
    }(this.remoteStore), (e = this.datastore) === null || e === void 0 || e.terminate(), (n = this.eventManager) === null || n === void 0 || n.terminate();
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class mf {
  constructor(e) {
    this.observer = e, /**
    * When set to true, will not raise future events. Necessary to deal with
    * async detachment of listener.
    */
    this.muted = !1;
  }
  next(e) {
    this.observer.next && this.Wa(this.observer.next, e);
  }
  error(e) {
    this.observer.error ? this.Wa(this.observer.error, e) : On("Uncaught Error in snapshot listener:", e.toString());
  }
  Ga() {
    this.muted = !0;
  }
  Wa(e, n) {
    this.muted || setTimeout(() => {
      this.muted || e(n);
    }, 0);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ZD {
  constructor(e, n, r, i) {
    this.authCredentials = e, this.appCheckCredentials = n, this.asyncQueue = r, this.databaseInfo = i, this.user = yt.UNAUTHENTICATED, this.clientId = gv.newId(), this.authCredentialListener = () => Promise.resolve(), this.appCheckCredentialListener = () => Promise.resolve(), this.authCredentials.start(r, async (s) => {
      Z("FirestoreClient", "Received user=", s.uid), await this.authCredentialListener(s), this.user = s;
    }), this.appCheckCredentials.start(r, (s) => (Z("FirestoreClient", "Received new app check token=", s), this.appCheckCredentialListener(s, this.user)));
  }
  get configuration() {
    return {
      asyncQueue: this.asyncQueue,
      databaseInfo: this.databaseInfo,
      clientId: this.clientId,
      authCredentials: this.authCredentials,
      appCheckCredentials: this.appCheckCredentials,
      initialUser: this.user,
      maxConcurrentLimboResolutions: 100
    };
  }
  setCredentialChangeListener(e) {
    this.authCredentialListener = e;
  }
  setAppCheckTokenChangeListener(e) {
    this.appCheckCredentialListener = e;
  }
  /**
   * Checks that the client has not been terminated. Ensures that other methods on //
   * this class cannot be called after the client is terminated. //
   */
  verifyNotTerminated() {
    if (this.asyncQueue.isShuttingDown) throw new re(q.FAILED_PRECONDITION, "The client has already been terminated.");
  }
  terminate() {
    this.asyncQueue.enterRestrictedMode();
    const e = new An();
    return this.asyncQueue.enqueueAndForgetEvenWhileRestricted(async () => {
      try {
        this._onlineComponents && await this._onlineComponents.terminate(), this._offlineComponents && await this._offlineComponents.terminate(), // The credentials provider must be terminated after shutting down the
        // RemoteStore as it will prevent the RemoteStore from retrieving auth
        // tokens.
        this.authCredentials.shutdown(), this.appCheckCredentials.shutdown(), e.resolve();
      } catch (n) {
        const r = uf(n, "Failed to shutdown persistence");
        e.reject(r);
      }
    }), e.promise;
  }
}
async function Yc(t, e) {
  t.asyncQueue.verifyOperationInProgress(), Z("FirestoreClient", "Initializing OfflineComponentProvider");
  const n = t.configuration;
  await e.initialize(n);
  let r = n.initialUser;
  t.setCredentialChangeListener(async (i) => {
    r.isEqual(i) || (await Yv(e.localStore, i), r = i);
  }), // When a user calls clearPersistence() in one client, all other clients
  // need to be terminated to allow the delete to succeed.
  e.persistence.setDatabaseDeletedListener(() => t.terminate()), t._offlineComponents = e;
}
async function om(t, e) {
  t.asyncQueue.verifyOperationInProgress();
  const n = await tN(t);
  Z("FirestoreClient", "Initializing OnlineComponentProvider"), await e.initialize(n, t.configuration), // The CredentialChangeListener of the online component provider takes
  // precedence over the offline component provider.
  t.setCredentialChangeListener((r) => Zp(e.remoteStore, r)), t.setAppCheckTokenChangeListener((r, i) => Zp(e.remoteStore, i)), t._onlineComponents = e;
}
function eN(t) {
  return t.name === "FirebaseError" ? t.code === q.FAILED_PRECONDITION || t.code === q.UNIMPLEMENTED : !(typeof DOMException < "u" && t instanceof DOMException) || // When the browser is out of quota we could get either quota exceeded
  // or an aborted error depending on whether the error happened during
  // schema migration.
  t.code === 22 || t.code === 20 || // Firefox Private Browsing mode disables IndexedDb and returns
  // INVALID_STATE for any usage.
  t.code === 11;
}
async function tN(t) {
  if (!t._offlineComponents) if (t._uninitializedComponentsProvider) {
    Z("FirestoreClient", "Using user provided OfflineComponentProvider");
    try {
      await Yc(t, t._uninitializedComponentsProvider._offline);
    } catch (e) {
      const n = e;
      if (!eN(n)) throw n;
      pi("Error using user provided cache. Falling back to memory cache: " + n), await Yc(t, new sm());
    }
  } else Z("FirestoreClient", "Using default OfflineComponentProvider"), await Yc(t, new sm());
  return t._offlineComponents;
}
async function p_(t) {
  return t._onlineComponents || (t._uninitializedComponentsProvider ? (Z("FirestoreClient", "Using user provided OnlineComponentProvider"), await om(t, t._uninitializedComponentsProvider._online)) : (Z("FirestoreClient", "Using default OnlineComponentProvider"), await om(t, new XD()))), t._onlineComponents;
}
function nN(t) {
  return p_(t).then((e) => e.syncEngine);
}
async function fa(t) {
  const e = await p_(t), n = e.eventManager;
  return n.onListen = UD.bind(null, e.syncEngine), n.onUnlisten = BD.bind(null, e.syncEngine), n.onFirstRemoteStoreListen = jD.bind(null, e.syncEngine), n.onLastRemoteStoreUnlisten = qD.bind(null, e.syncEngine), n;
}
function rN(t, e, n = {}) {
  const r = new An();
  return t.asyncQueue.enqueueAndForget(async () => function(s, o, a, u, l) {
    const h = new mf({
      next: (y) => {
        o.enqueueAndForget(() => ff(s, f));
        const b = y.docs.has(a);
        !b && y.fromCache ? (
          // TODO(dimond): If we're online and the document doesn't
          // exist then we resolve with a doc.exists set to false. If
          // we're offline however, we reject the Promise in this
          // case. Two options: 1) Cache the negative response from
          // the server so we can deliver that even when you're
          // offline 2) Actually reject the Promise in the online case
          // if the document doesn't exist.
          l.reject(new re(q.UNAVAILABLE, "Failed to get document because the client is offline."))
        ) : b && y.fromCache && u && u.source === "server" ? l.reject(new re(q.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')) : l.resolve(y);
      },
      error: (y) => l.reject(y)
    }), f = new df(Ba(a.path), h, {
      includeMetadataChanges: !0,
      oa: !0
    });
    return lf(s, f);
  }(await fa(t), t.asyncQueue, e, n, r)), r.promise;
}
function iN(t, e, n = {}) {
  const r = new An();
  return t.asyncQueue.enqueueAndForget(async () => function(s, o, a, u, l) {
    const h = new mf({
      next: (y) => {
        o.enqueueAndForget(() => ff(s, f)), y.fromCache && u.source === "server" ? l.reject(new re(q.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')) : l.resolve(y);
      },
      error: (y) => l.reject(y)
    }), f = new df(a, h, {
      includeMetadataChanges: !0,
      oa: !0
    });
    return lf(s, f);
  }(await fa(t), t.asyncQueue, e, n, r)), r.promise;
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function m_(t) {
  const e = {};
  return t.timeoutSeconds !== void 0 && (e.timeoutSeconds = t.timeoutSeconds), e;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const am = /* @__PURE__ */ new Map();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function g_(t, e, n) {
  if (!n) throw new re(q.INVALID_ARGUMENT, `Function ${t}() cannot be called with an empty ${e}.`);
}
function sN(t, e, n, r) {
  if (e === !0 && r === !0) throw new re(q.INVALID_ARGUMENT, `${t} and ${n} cannot be used together.`);
}
function cm(t) {
  if (!se.isDocumentKey(t)) throw new re(q.INVALID_ARGUMENT, `Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`);
}
function um(t) {
  if (se.isDocumentKey(t)) throw new re(q.INVALID_ARGUMENT, `Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`);
}
function gf(t) {
  if (t === void 0) return "undefined";
  if (t === null) return "null";
  if (typeof t == "string") return t.length > 20 && (t = `${t.substring(0, 20)}...`), JSON.stringify(t);
  if (typeof t == "number" || typeof t == "boolean") return "" + t;
  if (typeof t == "object") {
    if (t instanceof Array) return "an array";
    {
      const e = (
        /** try to get the constructor name for an object. */
        function(r) {
          return r.constructor ? r.constructor.name : null;
        }(t)
      );
      return e ? `a custom ${e} object` : "an object";
    }
  }
  return typeof t == "function" ? "a function" : ce();
}
function fn(t, e) {
  if ("_delegate" in t && // Unwrap Compat types
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  (t = t._delegate), !(t instanceof e)) {
    if (e.name === t.constructor.name) throw new re(q.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
    {
      const n = gf(t);
      throw new re(q.INVALID_ARGUMENT, `Expected type '${e.name}', but it was: ${n}`);
    }
  }
  return t;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class lm {
  constructor(e) {
    var n, r;
    if (e.host === void 0) {
      if (e.ssl !== void 0) throw new re(q.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
      this.host = "firestore.googleapis.com", this.ssl = !0;
    } else this.host = e.host, this.ssl = (n = e.ssl) === null || n === void 0 || n;
    if (this.credentials = e.credentials, this.ignoreUndefinedProperties = !!e.ignoreUndefinedProperties, this.localCache = e.localCache, e.cacheSizeBytes === void 0) this.cacheSizeBytes = 41943040;
    else {
      if (e.cacheSizeBytes !== -1 && e.cacheSizeBytes < 1048576) throw new re(q.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
      this.cacheSizeBytes = e.cacheSizeBytes;
    }
    sN("experimentalForceLongPolling", e.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", e.experimentalAutoDetectLongPolling), this.experimentalForceLongPolling = !!e.experimentalForceLongPolling, this.experimentalForceLongPolling ? this.experimentalAutoDetectLongPolling = !1 : e.experimentalAutoDetectLongPolling === void 0 ? this.experimentalAutoDetectLongPolling = !0 : (
      // For backwards compatibility, coerce the value to boolean even though
      // the TypeScript compiler has narrowed the type to boolean already.
      // noinspection PointlessBooleanExpressionJS
      this.experimentalAutoDetectLongPolling = !!e.experimentalAutoDetectLongPolling
    ), this.experimentalLongPollingOptions = m_((r = e.experimentalLongPollingOptions) !== null && r !== void 0 ? r : {}), function(s) {
      if (s.timeoutSeconds !== void 0) {
        if (isNaN(s.timeoutSeconds)) throw new re(q.INVALID_ARGUMENT, `invalid long polling timeout: ${s.timeoutSeconds} (must not be NaN)`);
        if (s.timeoutSeconds < 5) throw new re(q.INVALID_ARGUMENT, `invalid long polling timeout: ${s.timeoutSeconds} (minimum allowed value is 5)`);
        if (s.timeoutSeconds > 30) throw new re(q.INVALID_ARGUMENT, `invalid long polling timeout: ${s.timeoutSeconds} (maximum allowed value is 30)`);
      }
    }(this.experimentalLongPollingOptions), this.useFetchStreams = !!e.useFetchStreams;
  }
  isEqual(e) {
    return this.host === e.host && this.ssl === e.ssl && this.credentials === e.credentials && this.cacheSizeBytes === e.cacheSizeBytes && this.experimentalForceLongPolling === e.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === e.experimentalAutoDetectLongPolling && function(r, i) {
      return r.timeoutSeconds === i.timeoutSeconds;
    }(this.experimentalLongPollingOptions, e.experimentalLongPollingOptions) && this.ignoreUndefinedProperties === e.ignoreUndefinedProperties && this.useFetchStreams === e.useFetchStreams;
  }
}
class Ja {
  /** @hideconstructor */
  constructor(e, n, r, i) {
    this._authCredentials = e, this._appCheckCredentials = n, this._databaseId = r, this._app = i, /**
    * Whether it's a Firestore or Firestore Lite instance.
    */
    this.type = "firestore-lite", this._persistenceKey = "(lite)", this._settings = new lm({}), this._settingsFrozen = !1;
  }
  /**
   * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service
   * instance.
   */
  get app() {
    if (!this._app) throw new re(q.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
    return this._app;
  }
  get _initialized() {
    return this._settingsFrozen;
  }
  get _terminated() {
    return this._terminateTask !== void 0;
  }
  _setSettings(e) {
    if (this._settingsFrozen) throw new re(q.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
    this._settings = new lm(e), e.credentials !== void 0 && (this._authCredentials = function(r) {
      if (!r) return new Ek();
      switch (r.type) {
        case "firstParty":
          return new Sk(r.sessionIndex || "0", r.iamToken || null, r.authTokenFactory || null);
        case "provider":
          return r.client;
        default:
          throw new re(q.INVALID_ARGUMENT, "makeAuthCredentialsProvider failed due to invalid credential type");
      }
    }(e.credentials));
  }
  _getSettings() {
    return this._settings;
  }
  _freezeSettings() {
    return this._settingsFrozen = !0, this._settings;
  }
  _delete() {
    return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;
  }
  /** Returns a JSON-serializable representation of this `Firestore` instance. */
  toJSON() {
    return {
      app: this._app,
      databaseId: this._databaseId,
      settings: this._settings
    };
  }
  /**
   * Terminates all components used by this client. Subclasses can override
   * this method to clean up their own dependencies, but must also call this
   * method.
   *
   * Only ever called once.
   */
  _terminate() {
    return function(n) {
      const r = am.get(n);
      r && (Z("ComponentProvider", "Removing Datastore"), am.delete(n), r.terminate());
    }(this), Promise.resolve();
  }
}
function oN(t, e, n, r = {}) {
  var i;
  const s = (t = fn(t, Ja))._getSettings(), o = `${e}:${n}`;
  if (s.host !== "firestore.googleapis.com" && s.host !== o && pi("Host has been set in both settings() and connectFirestoreEmulator(), emulator host will be used."), t._setSettings(Object.assign(Object.assign({}, s), {
    host: o,
    ssl: !1
  })), r.mockUserToken) {
    let a, u;
    if (typeof r.mockUserToken == "string") a = r.mockUserToken, u = yt.MOCK_USER;
    else {
      a = _y(r.mockUserToken, (i = t._app) === null || i === void 0 ? void 0 : i.options.projectId);
      const l = r.mockUserToken.sub || r.mockUserToken.user_id;
      if (!l) throw new re(q.INVALID_ARGUMENT, "mockUserToken must contain 'sub' or 'user_id' field!");
      u = new yt(l);
    }
    t._authCredentials = new bk(new mv(a, u));
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class zs {
  // This is the lite version of the Query class in the main SDK.
  /** @hideconstructor protected */
  constructor(e, n, r) {
    this.converter = n, this._query = r, /** The type of this Firestore reference. */
    this.type = "query", this.firestore = e;
  }
  withConverter(e) {
    return new zs(this.firestore, e, this._query);
  }
}
class Ot {
  /** @hideconstructor */
  constructor(e, n, r) {
    this.converter = n, this._key = r, /** The type of this Firestore reference. */
    this.type = "document", this.firestore = e;
  }
  get _path() {
    return this._key.path;
  }
  /**
   * The document's identifier within its collection.
   */
  get id() {
    return this._key.path.lastSegment();
  }
  /**
   * A string representing the path of the referenced document (relative
   * to the root of the database).
   */
  get path() {
    return this._key.path.canonicalString();
  }
  /**
   * The collection this `DocumentReference` belongs to.
   */
  get parent() {
    return new Yn(this.firestore, this.converter, this._key.path.popLast());
  }
  withConverter(e) {
    return new Ot(this.firestore, e, this._key);
  }
}
class Yn extends zs {
  /** @hideconstructor */
  constructor(e, n, r) {
    super(e, n, Ba(r)), this._path = r, /** The type of this Firestore reference. */
    this.type = "collection";
  }
  /** The collection's identifier. */
  get id() {
    return this._query.path.lastSegment();
  }
  /**
   * A string representing the path of the referenced collection (relative
   * to the root of the database).
   */
  get path() {
    return this._query.path.canonicalString();
  }
  /**
   * A reference to the containing `DocumentReference` if this is a
   * subcollection. If this isn't a subcollection, the reference is null.
   */
  get parent() {
    const e = this._path.popLast();
    return e.isEmpty() ? null : new Ot(
      this.firestore,
      /* converter= */
      null,
      new se(e)
    );
  }
  withConverter(e) {
    return new Yn(this.firestore, e, this._path);
  }
}
function fm(t, e, ...n) {
  if (t = Ue(t), g_("collection", "path", e), t instanceof Ja) {
    const r = Le.fromString(e, ...n);
    return um(r), new Yn(
      t,
      /* converter= */
      null,
      r
    );
  }
  {
    if (!(t instanceof Ot || t instanceof Yn)) throw new re(q.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
    const r = t._path.child(Le.fromString(e, ...n));
    return um(r), new Yn(
      t.firestore,
      /* converter= */
      null,
      r
    );
  }
}
function hm(t, e, ...n) {
  if (t = Ue(t), // We allow omission of 'pathString' but explicitly prohibit passing in both
  // 'undefined' and 'null'.
  arguments.length === 1 && (e = gv.newId()), g_("doc", "path", e), t instanceof Ja) {
    const r = Le.fromString(e, ...n);
    return cm(r), new Ot(
      t,
      /* converter= */
      null,
      new se(r)
    );
  }
  {
    if (!(t instanceof Ot || t instanceof Yn)) throw new re(q.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
    const r = t._path.child(Le.fromString(e, ...n));
    return cm(r), new Ot(t.firestore, t instanceof Yn ? t.converter : null, new se(r));
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class aN {
  constructor() {
    this._u = Promise.resolve(), // A list of retryable operations. Retryable operations are run in order and
    // retried with backoff.
    this.au = [], // Is this AsyncQueue being shut down? Once it is set to true, it will not
    // be changed again.
    this.uu = !1, // Operations scheduled to be queued in the future. Operations are
    // automatically removed after they are run or canceled.
    this.cu = [], // visible for testing
    this.lu = null, // Flag set while there's an outstanding AsyncQueue operation, used for
    // assertion sanity-checks.
    this.hu = !1, // Enabled during shutdown on Safari to prevent future access to IndexedDB.
    this.Pu = !1, // List of TimerIds to fast-forward delays for.
    this.Iu = [], // Backoff timer used to schedule retries for retryable operations
    this.e_ = new Xv(
      this,
      "async_queue_retry"
      /* TimerId.AsyncQueueRetry */
    ), // Visibility handler that triggers an immediate retry of all retryable
    // operations. Meant to speed up recovery when we regain file system access
    // after page comes into foreground.
    this.Tu = () => {
      const n = Qc();
      n && Z("AsyncQueue", "Visibility state changed to " + n.visibilityState), this.e_.zo();
    };
    const e = Qc();
    e && typeof e.addEventListener == "function" && e.addEventListener("visibilitychange", this.Tu);
  }
  get isShuttingDown() {
    return this.uu;
  }
  /**
   * Adds a new operation to the queue without waiting for it to complete (i.e.
   * we ignore the Promise result).
   */
  enqueueAndForget(e) {
    this.enqueue(e);
  }
  enqueueAndForgetEvenWhileRestricted(e) {
    this.Eu(), // eslint-disable-next-line @typescript-eslint/no-floating-promises
    this.du(e);
  }
  enterRestrictedMode(e) {
    if (!this.uu) {
      this.uu = !0, this.Pu = e || !1;
      const n = Qc();
      n && typeof n.removeEventListener == "function" && n.removeEventListener("visibilitychange", this.Tu);
    }
  }
  enqueue(e) {
    if (this.Eu(), this.uu)
      return new Promise(() => {
      });
    const n = new An();
    return this.du(() => this.uu && this.Pu ? Promise.resolve() : (e().then(n.resolve, n.reject), n.promise)).then(() => n.promise);
  }
  enqueueRetryable(e) {
    this.enqueueAndForget(() => (this.au.push(e), this.Au()));
  }
  /**
   * Runs the next operation from the retryable queue. If the operation fails,
   * reschedules with backoff.
   */
  async Au() {
    if (this.au.length !== 0) {
      try {
        await this.au[0](), this.au.shift(), this.e_.reset();
      } catch (e) {
        if (!Us(e)) throw e;
        Z("AsyncQueue", "Operation failed with retryable error: " + e);
      }
      this.au.length > 0 && // If there are additional operations, we re-schedule `retryNextOp()`.
      // This is necessary to run retryable operations that failed during
      // their initial attempt since we don't know whether they are already
      // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
      // needs to  be re-run, we will run `op1`, `op1`, `op2` using the
      // already enqueued calls to `retryNextOp()`. `op3()` will then run in the
      // call scheduled here.
      // Since `backoffAndRun()` cancels an existing backoff and schedules a
      // new backoff on every call, there is only ever a single additional
      // operation in the queue.
      this.e_.Wo(() => this.Au());
    }
  }
  du(e) {
    const n = this._u.then(() => (this.hu = !0, e().catch((r) => {
      this.lu = r, this.hu = !1;
      const i = (
        /**
        * Chrome includes Error.message in Error.stack. Other browsers do not.
        * This returns expected output of message + stack when available.
        * @param error - Error or FirestoreError
        */
        function(o) {
          let a = o.message || "";
          return o.stack && (a = o.stack.includes(o.message) ? o.stack : o.message + `
` + o.stack), a;
        }(r)
      );
      throw On("INTERNAL UNHANDLED ERROR: ", i), r;
    }).then((r) => (this.hu = !1, r))));
    return this._u = n, n;
  }
  enqueueAfterDelay(e, n, r) {
    this.Eu(), // Fast-forward delays for timerIds that have been overridden.
    this.Iu.indexOf(e) > -1 && (n = 0);
    const i = cf.createAndSchedule(this, e, n, r, (s) => this.Ru(s));
    return this.cu.push(i), i;
  }
  Eu() {
    this.lu && ce();
  }
  verifyOperationInProgress() {
  }
  /**
   * Waits until all currently queued tasks are finished executing. Delayed
   * operations are not run.
   */
  async Vu() {
    let e;
    do
      e = this._u, await e;
    while (e !== this._u);
  }
  /**
   * For Tests: Determine if a delayed operation with a particular TimerId
   * exists.
   */
  mu(e) {
    for (const n of this.cu) if (n.timerId === e) return !0;
    return !1;
  }
  /**
   * For Tests: Runs some or all delayed operations early.
   *
   * @param lastTimerId - Delayed operations up to and including this TimerId
   * will be drained. Pass TimerId.All to run all delayed operations.
   * @returns a Promise that resolves once all operations have been run.
   */
  fu(e) {
    return this.Vu().then(() => {
      this.cu.sort((n, r) => n.targetTimeMs - r.targetTimeMs);
      for (const n of this.cu) if (n.skipDelay(), e !== "all" && n.timerId === e) break;
      return this.Vu();
    });
  }
  /**
   * For Tests: Skip all subsequent delays for a timer id.
   */
  gu(e) {
    this.Iu.push(e);
  }
  /** Called once a DelayedOperation is run or canceled. */
  Ru(e) {
    const n = this.cu.indexOf(e);
    this.cu.splice(n, 1);
  }
}
function dm(t) {
  return function(n, r) {
    if (typeof n != "object" || n === null) return !1;
    const i = n;
    for (const s of r) if (s in i && typeof i[s] == "function") return !0;
    return !1;
  }(t, ["next", "error", "complete"]);
}
class wi extends Ja {
  /** @hideconstructor */
  constructor(e, n, r, i) {
    super(e, n, r, i), /**
    * Whether it's a {@link Firestore} or Firestore Lite instance.
    */
    this.type = "firestore", this._queue = function() {
      return new aN();
    }(), this._persistenceKey = (i == null ? void 0 : i.name) || "[DEFAULT]";
  }
  _terminate() {
    return this._firestoreClient || // The client must be initialized to ensure that all subsequent API
    // usage throws an exception.
    y_(this), this._firestoreClient.terminate();
  }
}
function cN(t, e) {
  const n = typeof t == "object" ? t : Ma(), r = typeof t == "string" ? t : "(default)", i = nr(n, "firestore").getImmediate({
    identifier: r
  });
  if (!i._initialized) {
    const s = gy("firestore");
    s && oN(i, ...s);
  }
  return i;
}
function Xa(t) {
  return t._firestoreClient || y_(t), t._firestoreClient.verifyNotTerminated(), t._firestoreClient;
}
function y_(t) {
  var e, n, r;
  const i = t._freezeSettings(), s = function(a, u, l, h) {
    return new Fk(a, u, l, h.host, h.ssl, h.experimentalForceLongPolling, h.experimentalAutoDetectLongPolling, m_(h.experimentalLongPollingOptions), h.useFetchStreams);
  }(t._databaseId, ((e = t._app) === null || e === void 0 ? void 0 : e.options.appId) || "", t._persistenceKey, i);
  t._firestoreClient = new ZD(t._authCredentials, t._appCheckCredentials, t._queue, s), !((n = i.localCache) === null || n === void 0) && n._offlineComponentProvider && (!((r = i.localCache) === null || r === void 0) && r._onlineComponentProvider) && (t._firestoreClient._uninitializedComponentsProvider = {
    _offlineKind: i.localCache.kind,
    _offline: i.localCache._offlineComponentProvider,
    _online: i.localCache._onlineComponentProvider
  });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Ei {
  /** @hideconstructor */
  constructor(e) {
    this._byteString = e;
  }
  /**
   * Creates a new `Bytes` object from the given Base64 string, converting it to
   * bytes.
   *
   * @param base64 - The Base64 string used to create the `Bytes` object.
   */
  static fromBase64String(e) {
    try {
      return new Ei(ft.fromBase64String(e));
    } catch (n) {
      throw new re(q.INVALID_ARGUMENT, "Failed to construct data from Base64 string: " + n);
    }
  }
  /**
   * Creates a new `Bytes` object from the given Uint8Array.
   *
   * @param array - The Uint8Array used to create the `Bytes` object.
   */
  static fromUint8Array(e) {
    return new Ei(ft.fromUint8Array(e));
  }
  /**
   * Returns the underlying bytes as a Base64-encoded string.
   *
   * @returns The Base64-encoded string created from the `Bytes` object.
   */
  toBase64() {
    return this._byteString.toBase64();
  }
  /**
   * Returns the underlying bytes in a new `Uint8Array`.
   *
   * @returns The Uint8Array created from the `Bytes` object.
   */
  toUint8Array() {
    return this._byteString.toUint8Array();
  }
  /**
   * Returns a string representation of the `Bytes` object.
   *
   * @returns A string representation of the `Bytes` object.
   */
  toString() {
    return "Bytes(base64: " + this.toBase64() + ")";
  }
  /**
   * Returns true if this `Bytes` object is equal to the provided one.
   *
   * @param other - The `Bytes` object to compare against.
   * @returns true if this `Bytes` object is equal to the provided one.
   */
  isEqual(e) {
    return this._byteString.isEqual(e._byteString);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class yf {
  /**
   * Creates a `FieldPath` from the provided field names. If more than one field
   * name is provided, the path will point to a nested field in a document.
   *
   * @param fieldNames - A list of field names.
   */
  constructor(...e) {
    for (let n = 0; n < e.length; ++n) if (e[n].length === 0) throw new re(q.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
    this._internalPath = new ct(e);
  }
  /**
   * Returns true if this `FieldPath` is equal to the provided one.
   *
   * @param other - The `FieldPath` to compare against.
   * @returns true if this `FieldPath` is equal to the provided one.
   */
  isEqual(e) {
    return this._internalPath.isEqual(e._internalPath);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class v_ {
  /**
   * @param _methodName - The public API endpoint that returns this class.
   * @hideconstructor
   */
  constructor(e) {
    this._methodName = e;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class vf {
  /**
   * Creates a new immutable `GeoPoint` object with the provided latitude and
   * longitude values.
   * @param latitude - The latitude as number between -90 and 90.
   * @param longitude - The longitude as number between -180 and 180.
   */
  constructor(e, n) {
    if (!isFinite(e) || e < -90 || e > 90) throw new re(q.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + e);
    if (!isFinite(n) || n < -180 || n > 180) throw new re(q.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + n);
    this._lat = e, this._long = n;
  }
  /**
   * The latitude of this `GeoPoint` instance.
   */
  get latitude() {
    return this._lat;
  }
  /**
   * The longitude of this `GeoPoint` instance.
   */
  get longitude() {
    return this._long;
  }
  /**
   * Returns true if this `GeoPoint` is equal to the provided one.
   *
   * @param other - The `GeoPoint` to compare against.
   * @returns true if this `GeoPoint` is equal to the provided one.
   */
  isEqual(e) {
    return this._lat === e._lat && this._long === e._long;
  }
  /** Returns a JSON-serializable representation of this GeoPoint. */
  toJSON() {
    return {
      latitude: this._lat,
      longitude: this._long
    };
  }
  /**
   * Actually private to JS consumers of our API, so this function is prefixed
   * with an underscore.
   */
  _compareTo(e) {
    return be(this._lat, e._lat) || be(this._long, e._long);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const uN = /^__.*__$/;
class lN {
  constructor(e, n, r) {
    this.data = e, this.fieldMask = n, this.fieldTransforms = r;
  }
  toMutation(e, n) {
    return this.fieldMask !== null ? new $r(e, this.data, this.fieldMask, n, this.fieldTransforms) : new js(e, this.data, n, this.fieldTransforms);
  }
}
function __(t) {
  switch (t) {
    case 0:
    case 2:
    case 1:
      return !0;
    case 3:
    case 4:
      return !1;
    default:
      throw ce();
  }
}
class _f {
  /**
   * Initializes a ParseContext with the given source and path.
   *
   * @param settings - The settings for the parser.
   * @param databaseId - The database ID of the Firestore instance.
   * @param serializer - The serializer to use to generate the Value proto.
   * @param ignoreUndefinedProperties - Whether to ignore undefined properties
   * rather than throw.
   * @param fieldTransforms - A mutable list of field transforms encountered
   * while parsing the data.
   * @param fieldMask - A mutable list of field paths encountered while parsing
   * the data.
   *
   * TODO(b/34871131): We don't support array paths right now, so path can be
   * null to indicate the context represents any location within an array (in
   * which case certain features will not work and errors will be somewhat
   * compromised).
   */
  constructor(e, n, r, i, s, o) {
    this.settings = e, this.databaseId = n, this.serializer = r, this.ignoreUndefinedProperties = i, // Minor hack: If fieldTransforms is undefined, we assume this is an
    // external call and we need to validate the entire path.
    s === void 0 && this.pu(), this.fieldTransforms = s || [], this.fieldMask = o || [];
  }
  get path() {
    return this.settings.path;
  }
  get yu() {
    return this.settings.yu;
  }
  /** Returns a new context with the specified settings overwritten. */
  wu(e) {
    return new _f(Object.assign(Object.assign({}, this.settings), e), this.databaseId, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);
  }
  Su(e) {
    var n;
    const r = (n = this.path) === null || n === void 0 ? void 0 : n.child(e), i = this.wu({
      path: r,
      bu: !1
    });
    return i.Du(e), i;
  }
  Cu(e) {
    var n;
    const r = (n = this.path) === null || n === void 0 ? void 0 : n.child(e), i = this.wu({
      path: r,
      bu: !1
    });
    return i.pu(), i;
  }
  vu(e) {
    return this.wu({
      path: void 0,
      bu: !0
    });
  }
  Fu(e) {
    return ha(e, this.settings.methodName, this.settings.Mu || !1, this.path, this.settings.xu);
  }
  /** Returns 'true' if 'fieldPath' was traversed when creating this context. */
  contains(e) {
    return this.fieldMask.find((n) => e.isPrefixOf(n)) !== void 0 || this.fieldTransforms.find((n) => e.isPrefixOf(n.field)) !== void 0;
  }
  pu() {
    if (this.path) for (let e = 0; e < this.path.length; e++) this.Du(this.path.get(e));
  }
  Du(e) {
    if (e.length === 0) throw this.Fu("Document fields must not be empty");
    if (__(this.yu) && uN.test(e)) throw this.Fu('Document fields cannot begin and end with "__"');
  }
}
class fN {
  constructor(e, n, r) {
    this.databaseId = e, this.ignoreUndefinedProperties = n, this.serializer = r || Wa(e);
  }
  /** Creates a new top-level parse context. */
  Ou(e, n, r, i = !1) {
    return new _f({
      yu: e,
      methodName: n,
      xu: r,
      path: ct.emptyPath(),
      bu: !1,
      Mu: i
    }, this.databaseId, this.serializer, this.ignoreUndefinedProperties);
  }
}
function hN(t) {
  const e = t._freezeSettings(), n = Wa(t._databaseId);
  return new fN(t._databaseId, !!e.ignoreUndefinedProperties, n);
}
function dN(t, e, n, r, i, s = {}) {
  const o = t.Ou(s.merge || s.mergeFields ? 2 : 0, e, n, i);
  T_("Data must be an object, but it was:", o, r);
  const a = E_(r, o);
  let u, l;
  if (s.merge) u = new Xt(o.fieldMask), l = o.fieldTransforms;
  else if (s.mergeFields) {
    const h = [];
    for (const f of s.mergeFields) {
      const y = pN(e, f, n);
      if (!o.contains(y)) throw new re(q.INVALID_ARGUMENT, `Field '${y}' is specified in your field mask but missing from your input data.`);
      gN(h, y) || h.push(y);
    }
    u = new Xt(h), l = o.fieldTransforms.filter((f) => u.covers(f.field));
  } else u = null, l = o.fieldTransforms;
  return new lN(new jt(a), u, l);
}
function w_(t, e) {
  if (b_(
    // Unwrap the API type from the Compat SDK. This will return the API type
    // from firestore-exp.
    t = Ue(t)
  )) return T_("Unsupported field value:", e, t), E_(t, e);
  if (t instanceof v_)
    return function(r, i) {
      if (!__(i.yu)) throw i.Fu(`${r._methodName}() can only be used with update() and set()`);
      if (!i.path) throw i.Fu(`${r._methodName}() is not currently supported inside arrays`);
      const s = r._toFieldTransform(i);
      s && i.fieldTransforms.push(s);
    }(t, e), null;
  if (t === void 0 && e.ignoreUndefinedProperties)
    return null;
  if (
    // If context.path is null we are inside an array and we don't support
    // field mask paths more granular than the top-level array.
    e.path && e.fieldMask.push(e.path), t instanceof Array
  ) {
    if (e.settings.bu && e.yu !== 4) throw e.Fu("Nested arrays are not supported");
    return function(r, i) {
      const s = [];
      let o = 0;
      for (const a of r) {
        let u = w_(a, i.vu(o));
        u == null && // Just include nulls in the array for fields being replaced with a
        // sentinel.
        (u = {
          nullValue: "NULL_VALUE"
        }), s.push(u), o++;
      }
      return {
        arrayValue: {
          values: s
        }
      };
    }(t, e);
  }
  return function(r, i) {
    if ((r = Ue(r)) === null) return {
      nullValue: "NULL_VALUE"
    };
    if (typeof r == "number") return oO(i.serializer, r);
    if (typeof r == "boolean") return {
      booleanValue: r
    };
    if (typeof r == "string") return {
      stringValue: r
    };
    if (r instanceof Date) {
      const s = et.fromDate(r);
      return {
        timestampValue: ua(i.serializer, s)
      };
    }
    if (r instanceof et) {
      const s = new et(r.seconds, 1e3 * Math.floor(r.nanoseconds / 1e3));
      return {
        timestampValue: ua(i.serializer, s)
      };
    }
    if (r instanceof vf) return {
      geoPointValue: {
        latitude: r.latitude,
        longitude: r.longitude
      }
    };
    if (r instanceof Ei) return {
      bytesValue: qv(i.serializer, r._byteString)
    };
    if (r instanceof Ot) {
      const s = i.databaseId, o = r.firestore._databaseId;
      if (!o.isEqual(s)) throw i.Fu(`Document reference is for database ${o.projectId}/${o.database} but should be for database ${s.projectId}/${s.database}`);
      return {
        referenceValue: Zl(r.firestore._databaseId || i.databaseId, r._key.path)
      };
    }
    throw i.Fu(`Unsupported field value: ${gf(r)}`);
  }(t, e);
}
function E_(t, e) {
  const n = {};
  return yv(t) ? (
    // If we encounter an empty object, we explicitly add it to the update
    // mask to ensure that the server creates a map entry.
    e.path && e.path.length > 0 && e.fieldMask.push(e.path)
  ) : Ci(t, (r, i) => {
    const s = w_(i, e.Su(r));
    s != null && (n[r] = s);
  }), {
    mapValue: {
      fields: n
    }
  };
}
function b_(t) {
  return !(typeof t != "object" || t === null || t instanceof Array || t instanceof Date || t instanceof et || t instanceof vf || t instanceof Ei || t instanceof Ot || t instanceof v_);
}
function T_(t, e, n) {
  if (!b_(n) || !function(i) {
    return typeof i == "object" && i !== null && (Object.getPrototypeOf(i) === Object.prototype || Object.getPrototypeOf(i) === null);
  }(n)) {
    const r = gf(n);
    throw r === "an object" ? e.Fu(t + " a custom object") : e.Fu(t + " " + r);
  }
}
function pN(t, e, n) {
  if (
    // If required, replace the FieldPath Compat class with the firestore-exp
    // FieldPath.
    (e = Ue(e)) instanceof yf
  ) return e._internalPath;
  if (typeof e == "string") return I_(t, e);
  throw ha(
    "Field path arguments must be of type string or ",
    t,
    /* hasConverter= */
    !1,
    /* path= */
    void 0,
    n
  );
}
const mN = new RegExp("[~\\*/\\[\\]]");
function I_(t, e, n) {
  if (e.search(mN) >= 0) throw ha(
    `Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`,
    t,
    /* hasConverter= */
    !1,
    /* path= */
    void 0,
    n
  );
  try {
    return new yf(...e.split("."))._internalPath;
  } catch {
    throw ha(
      `Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`,
      t,
      /* hasConverter= */
      !1,
      /* path= */
      void 0,
      n
    );
  }
}
function ha(t, e, n, r, i) {
  const s = r && !r.isEmpty(), o = i !== void 0;
  let a = `Function ${e}() called with invalid data`;
  n && (a += " (via `toFirestore()`)"), a += ". ";
  let u = "";
  return (s || o) && (u += " (found", s && (u += ` in field ${r}`), o && (u += ` in document ${i}`), u += ")"), new re(q.INVALID_ARGUMENT, a + t + u);
}
function gN(t, e) {
  return t.some((n) => n.isEqual(e));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class S_ {
  // Note: This class is stripped down version of the DocumentSnapshot in
  // the legacy SDK. The changes are:
  // - No support for SnapshotMetadata.
  // - No support for SnapshotOptions.
  /** @hideconstructor protected */
  constructor(e, n, r, i, s) {
    this._firestore = e, this._userDataWriter = n, this._key = r, this._document = i, this._converter = s;
  }
  /** Property of the `DocumentSnapshot` that provides the document's ID. */
  get id() {
    return this._key.path.lastSegment();
  }
  /**
   * The `DocumentReference` for the document included in the `DocumentSnapshot`.
   */
  get ref() {
    return new Ot(this._firestore, this._converter, this._key);
  }
  /**
   * Signals whether or not the document at the snapshot's location exists.
   *
   * @returns true if the document exists.
   */
  exists() {
    return this._document !== null;
  }
  /**
   * Retrieves all fields in the document as an `Object`. Returns `undefined` if
   * the document doesn't exist.
   *
   * @returns An `Object` containing all fields in the document or `undefined`
   * if the document doesn't exist.
   */
  data() {
    if (this._document) {
      if (this._converter) {
        const e = new yN(
          this._firestore,
          this._userDataWriter,
          this._key,
          this._document,
          /* converter= */
          null
        );
        return this._converter.fromFirestore(e);
      }
      return this._userDataWriter.convertValue(this._document.data.value);
    }
  }
  /**
   * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
   * document or field doesn't exist.
   *
   * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
   * field.
   * @returns The data at the specified field location or undefined if no such
   * field exists in the document.
   */
  // We are using `any` here to avoid an explicit cast by our users.
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  get(e) {
    if (this._document) {
      const n = this._document.data.field(A_("DocumentSnapshot.get", e));
      if (n !== null) return this._userDataWriter.convertValue(n);
    }
  }
}
class yN extends S_ {
  /**
   * Retrieves all fields in the document as an `Object`.
   *
   * @override
   * @returns An `Object` containing all fields in the document.
   */
  data() {
    return super.data();
  }
}
function A_(t, e) {
  return typeof e == "string" ? I_(t, e) : e instanceof yf ? e._internalPath : e._delegate._internalPath;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function R_(t) {
  if (t.limitType === "L" && t.explicitOrderBy.length === 0) throw new re(q.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
}
class vN {
  convertValue(e, n = "none") {
    switch (Dr(e)) {
      case 0:
        return null;
      case 1:
        return e.booleanValue;
      case 2:
        return Ye(e.integerValue || e.doubleValue);
      case 3:
        return this.convertTimestamp(e.timestampValue);
      case 4:
        return this.convertServerTimestamp(e, n);
      case 5:
        return e.stringValue;
      case 6:
        return this.convertBytes(Or(e.bytesValue));
      case 7:
        return this.convertReference(e.referenceValue);
      case 8:
        return this.convertGeoPoint(e.geoPointValue);
      case 9:
        return this.convertArray(e.arrayValue, n);
      case 10:
        return this.convertObject(e.mapValue, n);
      default:
        throw ce();
    }
  }
  convertObject(e, n) {
    return this.convertObjectMap(e.fields, n);
  }
  /**
   * @internal
   */
  convertObjectMap(e, n = "none") {
    const r = {};
    return Ci(e, (i, s) => {
      r[i] = this.convertValue(s, n);
    }), r;
  }
  convertGeoPoint(e) {
    return new vf(Ye(e.latitude), Ye(e.longitude));
  }
  convertArray(e, n) {
    return (e.values || []).map((r) => this.convertValue(r, n));
  }
  convertServerTimestamp(e, n) {
    switch (n) {
      case "previous":
        const r = Gl(e);
        return r == null ? null : this.convertValue(r, n);
      case "estimate":
        return this.convertTimestamp(Ts(e));
      default:
        return null;
    }
  }
  convertTimestamp(e) {
    const n = Zn(e);
    return new et(n.seconds, n.nanos);
  }
  convertDocumentKey(e, n) {
    const r = Le.fromString(e);
    De(Qv(r));
    const i = new Is(r.get(1), r.get(3)), s = new se(r.popFirst(5));
    return i.isEqual(n) || // TODO(b/64130202): Somehow support foreign references.
    On(`Document ${s} contains a document reference within a different database (${i.projectId}/${i.database}) which is not supported. It will be treated as a reference in the current database (${n.projectId}/${n.database}) instead.`), s;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _N(t, e, n) {
  let r;
  return r = t ? n && (n.merge || n.mergeFields) ? t.toFirestore(e, n) : t.toFirestore(e) : e, r;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class rs {
  /** @hideconstructor */
  constructor(e, n) {
    this.hasPendingWrites = e, this.fromCache = n;
  }
  /**
   * Returns true if this `SnapshotMetadata` is equal to the provided one.
   *
   * @param other - The `SnapshotMetadata` to compare against.
   * @returns true if this `SnapshotMetadata` is equal to the provided one.
   */
  isEqual(e) {
    return this.hasPendingWrites === e.hasPendingWrites && this.fromCache === e.fromCache;
  }
}
class C_ extends S_ {
  /** @hideconstructor protected */
  constructor(e, n, r, i, s, o) {
    super(e, n, r, i, o), this._firestore = e, this._firestoreImpl = e, this.metadata = s;
  }
  /**
   * Returns whether or not the data exists. True if the document exists.
   */
  exists() {
    return super.exists();
  }
  /**
   * Retrieves all fields in the document as an `Object`. Returns `undefined` if
   * the document doesn't exist.
   *
   * By default, `serverTimestamp()` values that have not yet been
   * set to their final value will be returned as `null`. You can override
   * this by passing an options object.
   *
   * @param options - An options object to configure how data is retrieved from
   * the snapshot (for example the desired behavior for server timestamps that
   * have not yet been set to their final value).
   * @returns An `Object` containing all fields in the document or `undefined` if
   * the document doesn't exist.
   */
  data(e = {}) {
    if (this._document) {
      if (this._converter) {
        const n = new jo(
          this._firestore,
          this._userDataWriter,
          this._key,
          this._document,
          this.metadata,
          /* converter= */
          null
        );
        return this._converter.fromFirestore(n, e);
      }
      return this._userDataWriter.convertValue(this._document.data.value, e.serverTimestamps);
    }
  }
  /**
   * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
   * document or field doesn't exist.
   *
   * By default, a `serverTimestamp()` that has not yet been set to
   * its final value will be returned as `null`. You can override this by
   * passing an options object.
   *
   * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
   * field.
   * @param options - An options object to configure how the field is retrieved
   * from the snapshot (for example the desired behavior for server timestamps
   * that have not yet been set to their final value).
   * @returns The data at the specified field location or undefined if no such
   * field exists in the document.
   */
  // We are using `any` here to avoid an explicit cast by our users.
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  get(e, n = {}) {
    if (this._document) {
      const r = this._document.data.field(A_("DocumentSnapshot.get", e));
      if (r !== null) return this._userDataWriter.convertValue(r, n.serverTimestamps);
    }
  }
}
class jo extends C_ {
  /**
   * Retrieves all fields in the document as an `Object`.
   *
   * By default, `serverTimestamp()` values that have not yet been
   * set to their final value will be returned as `null`. You can override
   * this by passing an options object.
   *
   * @override
   * @param options - An options object to configure how data is retrieved from
   * the snapshot (for example the desired behavior for server timestamps that
   * have not yet been set to their final value).
   * @returns An `Object` containing all fields in the document.
   */
  data(e = {}) {
    return super.data(e);
  }
}
class P_ {
  /** @hideconstructor */
  constructor(e, n, r, i) {
    this._firestore = e, this._userDataWriter = n, this._snapshot = i, this.metadata = new rs(i.hasPendingWrites, i.fromCache), this.query = r;
  }
  /** An array of all the documents in the `QuerySnapshot`. */
  get docs() {
    const e = [];
    return this.forEach((n) => e.push(n)), e;
  }
  /** The number of documents in the `QuerySnapshot`. */
  get size() {
    return this._snapshot.docs.size;
  }
  /** True if there are no documents in the `QuerySnapshot`. */
  get empty() {
    return this.size === 0;
  }
  /**
   * Enumerates all of the documents in the `QuerySnapshot`.
   *
   * @param callback - A callback to be called with a `QueryDocumentSnapshot` for
   * each document in the snapshot.
   * @param thisArg - The `this` binding for the callback.
   */
  forEach(e, n) {
    this._snapshot.docs.forEach((r) => {
      e.call(n, new jo(this._firestore, this._userDataWriter, r.key, r, new rs(this._snapshot.mutatedKeys.has(r.key), this._snapshot.fromCache), this.query.converter));
    });
  }
  /**
   * Returns an array of the documents changes since the last snapshot. If this
   * is the first snapshot, all documents will be in the list as 'added'
   * changes.
   *
   * @param options - `SnapshotListenOptions` that control whether metadata-only
   * changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger
   * snapshot events.
   */
  docChanges(e = {}) {
    const n = !!e.includeMetadataChanges;
    if (n && this._snapshot.excludesMetadataChanges) throw new re(q.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
    return this._cachedChanges && this._cachedChangesIncludeMetadataChanges === n || (this._cachedChanges = /** Calculates the array of `DocumentChange`s for a given `ViewSnapshot`. */
    function(i, s) {
      if (i._snapshot.oldDocs.isEmpty()) {
        let o = 0;
        return i._snapshot.docChanges.map((a) => {
          const u = new jo(i._firestore, i._userDataWriter, a.doc.key, a.doc, new rs(i._snapshot.mutatedKeys.has(a.doc.key), i._snapshot.fromCache), i.query.converter);
          return a.doc, {
            type: "added",
            doc: u,
            oldIndex: -1,
            newIndex: o++
          };
        });
      }
      {
        let o = i._snapshot.oldDocs;
        return i._snapshot.docChanges.filter((a) => s || a.type !== 3).map((a) => {
          const u = new jo(i._firestore, i._userDataWriter, a.doc.key, a.doc, new rs(i._snapshot.mutatedKeys.has(a.doc.key), i._snapshot.fromCache), i.query.converter);
          let l = -1, h = -1;
          return a.type !== 0 && (l = o.indexOf(a.doc.key), o = o.delete(a.doc.key)), a.type !== 1 && (o = o.add(a.doc), h = o.indexOf(a.doc.key)), {
            type: wN(a.type),
            doc: u,
            oldIndex: l,
            newIndex: h
          };
        });
      }
    }(this, n), this._cachedChangesIncludeMetadataChanges = n), this._cachedChanges;
  }
}
function wN(t) {
  switch (t) {
    case 0:
      return "added";
    case 2:
    case 3:
      return "modified";
    case 1:
      return "removed";
    default:
      return ce();
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function yV(t) {
  t = fn(t, Ot);
  const e = fn(t.firestore, wi);
  return rN(Xa(e), t._key).then((n) => k_(e, t, n));
}
class wf extends vN {
  constructor(e) {
    super(), this.firestore = e;
  }
  convertBytes(e) {
    return new Ei(e);
  }
  convertReference(e) {
    const n = this.convertDocumentKey(e, this.firestore._databaseId);
    return new Ot(
      this.firestore,
      /* converter= */
      null,
      n
    );
  }
}
function vV(t) {
  t = fn(t, zs);
  const e = fn(t.firestore, wi), n = Xa(e), r = new wf(e);
  return R_(t._query), iN(n, t._query).then((i) => new P_(e, r, t, i));
}
function EN(t, e, n) {
  t = fn(t, Ot);
  const r = fn(t.firestore, wi), i = _N(t.converter, e, n);
  return TN(r, [dN(hN(r), "setDoc", t._key, i, t.converter !== null, n).toMutation(t._key, Rn.none())]);
}
function bN(t, ...e) {
  var n, r, i;
  t = Ue(t);
  let s = {
    includeMetadataChanges: !1,
    source: "default"
  }, o = 0;
  typeof e[o] != "object" || dm(e[o]) || (s = e[o], o++);
  const a = {
    includeMetadataChanges: s.includeMetadataChanges,
    source: s.source
  };
  if (dm(e[o])) {
    const f = e[o];
    e[o] = (n = f.next) === null || n === void 0 ? void 0 : n.bind(f), e[o + 1] = (r = f.error) === null || r === void 0 ? void 0 : r.bind(f), e[o + 2] = (i = f.complete) === null || i === void 0 ? void 0 : i.bind(f);
  }
  let u, l, h;
  if (t instanceof Ot) l = fn(t.firestore, wi), h = Ba(t._key.path), u = {
    next: (f) => {
      e[o] && e[o](k_(l, t, f));
    },
    error: e[o + 1],
    complete: e[o + 2]
  };
  else {
    const f = fn(t, zs);
    l = fn(f.firestore, wi), h = f._query;
    const y = new wf(l);
    u = {
      next: (b) => {
        e[o] && e[o](new P_(l, y, f, b));
      },
      error: e[o + 1],
      complete: e[o + 2]
    }, R_(t._query);
  }
  return function(y, b, S, C) {
    const m = new mf(C), v = new df(b, m, S);
    return y.asyncQueue.enqueueAndForget(async () => lf(await fa(y), v)), () => {
      m.Ga(), y.asyncQueue.enqueueAndForget(async () => ff(await fa(y), v));
    };
  }(Xa(l), h, a, u);
}
function TN(t, e) {
  return function(r, i) {
    const s = new An();
    return r.asyncQueue.enqueueAndForget(async () => zD(await nN(r), i, s)), s.promise;
  }(Xa(t), e);
}
function k_(t, e, n) {
  const r = n.docs.get(e._key), i = new wf(t);
  return new C_(t, i, e._key, r, new rs(n.hasPendingWrites, n.fromCache), e.converter);
}
(function(e, n = !0) {
  (function(i) {
    Ri = i;
  })(jr), en(new Kt("firestore", (r, { instanceIdentifier: i, options: s }) => {
    const o = r.getProvider("app").getImmediate(), a = new wi(new Tk(r.getProvider("auth-internal")), new Rk(r.getProvider("app-check-internal")), function(l, h) {
      if (!Object.prototype.hasOwnProperty.apply(l.options, ["projectId"])) throw new re(q.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
      return new Is(l.options.projectId, h);
    }(o, i), o);
    return s = Object.assign({
      useFetchStreams: n
    }, s), a._setSettings(s), a;
  }, "PUBLIC").setMultipleInstances(!0)), Pt(kp, "4.6.5", e), // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
  Pt(kp, "4.6.5", "esm2017");
})();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const O_ = "firebasestorage.googleapis.com", D_ = "storageBucket", IN = 2 * 60 * 1e3, SN = 10 * 60 * 1e3;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class $e extends Gt {
  /**
   * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and
   *  added to the end of the message.
   * @param message  - Error message.
   * @param status_ - Corresponding HTTP Status Code
   */
  constructor(e, n, r = 0) {
    super(Jc(e), `Firebase Storage: ${n} (${Jc(e)})`), this.status_ = r, this.customData = { serverResponse: null }, this._baseMessage = this.message, Object.setPrototypeOf(this, $e.prototype);
  }
  get status() {
    return this.status_;
  }
  set status(e) {
    this.status_ = e;
  }
  /**
   * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.
   */
  _codeEquals(e) {
    return Jc(e) === this.code;
  }
  /**
   * Optional response message that was added by the server.
   */
  get serverResponse() {
    return this.customData.serverResponse;
  }
  set serverResponse(e) {
    this.customData.serverResponse = e, this.customData.serverResponse ? this.message = `${this._baseMessage}
${this.customData.serverResponse}` : this.message = this._baseMessage;
  }
}
var je;
(function(t) {
  t.UNKNOWN = "unknown", t.OBJECT_NOT_FOUND = "object-not-found", t.BUCKET_NOT_FOUND = "bucket-not-found", t.PROJECT_NOT_FOUND = "project-not-found", t.QUOTA_EXCEEDED = "quota-exceeded", t.UNAUTHENTICATED = "unauthenticated", t.UNAUTHORIZED = "unauthorized", t.UNAUTHORIZED_APP = "unauthorized-app", t.RETRY_LIMIT_EXCEEDED = "retry-limit-exceeded", t.INVALID_CHECKSUM = "invalid-checksum", t.CANCELED = "canceled", t.INVALID_EVENT_NAME = "invalid-event-name", t.INVALID_URL = "invalid-url", t.INVALID_DEFAULT_BUCKET = "invalid-default-bucket", t.NO_DEFAULT_BUCKET = "no-default-bucket", t.CANNOT_SLICE_BLOB = "cannot-slice-blob", t.SERVER_FILE_WRONG_SIZE = "server-file-wrong-size", t.NO_DOWNLOAD_URL = "no-download-url", t.INVALID_ARGUMENT = "invalid-argument", t.INVALID_ARGUMENT_COUNT = "invalid-argument-count", t.APP_DELETED = "app-deleted", t.INVALID_ROOT_OPERATION = "invalid-root-operation", t.INVALID_FORMAT = "invalid-format", t.INTERNAL_ERROR = "internal-error", t.UNSUPPORTED_ENVIRONMENT = "unsupported-environment";
})(je || (je = {}));
function Jc(t) {
  return "storage/" + t;
}
function Ef() {
  const t = "An unknown error occurred, please check the error payload for server response.";
  return new $e(je.UNKNOWN, t);
}
function AN(t) {
  return new $e(je.OBJECT_NOT_FOUND, "Object '" + t + "' does not exist.");
}
function RN(t) {
  return new $e(je.QUOTA_EXCEEDED, "Quota for bucket '" + t + "' exceeded, please view quota on https://firebase.google.com/pricing/.");
}
function CN() {
  const t = "User is not authenticated, please authenticate using Firebase Authentication and try again.";
  return new $e(je.UNAUTHENTICATED, t);
}
function PN() {
  return new $e(je.UNAUTHORIZED_APP, "This app does not have permission to access Firebase Storage on this project.");
}
function kN(t) {
  return new $e(je.UNAUTHORIZED, "User does not have permission to access '" + t + "'.");
}
function ON() {
  return new $e(je.RETRY_LIMIT_EXCEEDED, "Max retry time for operation exceeded, please try again.");
}
function DN() {
  return new $e(je.CANCELED, "User canceled the upload/download.");
}
function NN(t) {
  return new $e(je.INVALID_URL, "Invalid URL '" + t + "'.");
}
function xN(t) {
  return new $e(je.INVALID_DEFAULT_BUCKET, "Invalid default bucket '" + t + "'.");
}
function LN() {
  return new $e(je.NO_DEFAULT_BUCKET, "No default bucket found. Did you set the '" + D_ + "' property when initializing the app?");
}
function MN() {
  return new $e(je.CANNOT_SLICE_BLOB, "Cannot slice blob for upload. Please retry the upload.");
}
function VN() {
  return new $e(je.NO_DOWNLOAD_URL, "The given file does not have any download URLs.");
}
function FN(t) {
  return new $e(je.UNSUPPORTED_ENVIRONMENT, `${t} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`);
}
function nl(t) {
  return new $e(je.INVALID_ARGUMENT, t);
}
function N_() {
  return new $e(je.APP_DELETED, "The Firebase app was deleted.");
}
function UN(t) {
  return new $e(je.INVALID_ROOT_OPERATION, "The operation '" + t + "' cannot be performed on a root reference, create a non-root reference using child, such as .child('file.png').");
}
function ls(t, e) {
  return new $e(je.INVALID_FORMAT, "String does not match format '" + t + "': " + e);
}
function Wi(t) {
  throw new $e(je.INTERNAL_ERROR, "Internal error: " + t);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class xt {
  constructor(e, n) {
    this.bucket = e, this.path_ = n;
  }
  get path() {
    return this.path_;
  }
  get isRoot() {
    return this.path.length === 0;
  }
  fullServerUrl() {
    const e = encodeURIComponent;
    return "/b/" + e(this.bucket) + "/o/" + e(this.path);
  }
  bucketOnlyServerUrl() {
    return "/b/" + encodeURIComponent(this.bucket) + "/o";
  }
  static makeFromBucketSpec(e, n) {
    let r;
    try {
      r = xt.makeFromUrl(e, n);
    } catch {
      return new xt(e, "");
    }
    if (r.path === "")
      return r;
    throw xN(e);
  }
  static makeFromUrl(e, n) {
    let r = null;
    const i = "([A-Za-z0-9.\\-_]+)";
    function s(g) {
      g.path.charAt(g.path.length - 1) === "/" && (g.path_ = g.path_.slice(0, -1));
    }
    const o = "(/(.*))?$", a = new RegExp("^gs://" + i + o, "i"), u = { bucket: 1, path: 3 };
    function l(g) {
      g.path_ = decodeURIComponent(g.path);
    }
    const h = "v[A-Za-z0-9_]+", f = n.replace(/[.]/g, "\\."), y = "(/([^?#]*).*)?$", b = new RegExp(`^https?://${f}/${h}/b/${i}/o${y}`, "i"), S = { bucket: 1, path: 3 }, C = n === O_ ? "(?:storage.googleapis.com|storage.cloud.google.com)" : n, m = "([^?#]*)", v = new RegExp(`^https?://${C}/${i}/${m}`, "i"), p = [
      { regex: a, indices: u, postModify: s },
      {
        regex: b,
        indices: S,
        postModify: l
      },
      {
        regex: v,
        indices: { bucket: 1, path: 2 },
        postModify: l
      }
    ];
    for (let g = 0; g < p.length; g++) {
      const w = p[g], I = w.regex.exec(e);
      if (I) {
        const R = I[w.indices.bucket];
        let T = I[w.indices.path];
        T || (T = ""), r = new xt(R, T), w.postModify(r);
        break;
      }
    }
    if (r == null)
      throw NN(e);
    return r;
  }
}
class jN {
  constructor(e) {
    this.promise_ = Promise.reject(e);
  }
  /** @inheritDoc */
  getPromise() {
    return this.promise_;
  }
  /** @inheritDoc */
  cancel(e = !1) {
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function $N(t, e, n) {
  let r = 1, i = null, s = null, o = !1, a = 0;
  function u() {
    return a === 2;
  }
  let l = !1;
  function h(...m) {
    l || (l = !0, e.apply(null, m));
  }
  function f(m) {
    i = setTimeout(() => {
      i = null, t(b, u());
    }, m);
  }
  function y() {
    s && clearTimeout(s);
  }
  function b(m, ...v) {
    if (l) {
      y();
      return;
    }
    if (m) {
      y(), h.call(null, m, ...v);
      return;
    }
    if (u() || o) {
      y(), h.call(null, m, ...v);
      return;
    }
    r < 64 && (r *= 2);
    let p;
    a === 1 ? (a = 2, p = 0) : p = (r + Math.random()) * 1e3, f(p);
  }
  let S = !1;
  function C(m) {
    S || (S = !0, y(), !l && (i !== null ? (m || (a = 2), clearTimeout(i), f(0)) : m || (a = 1)));
  }
  return f(0), s = setTimeout(() => {
    o = !0, C(!0);
  }, n), C;
}
function BN(t) {
  t(!1);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function qN(t) {
  return t !== void 0;
}
function zN(t) {
  return typeof t == "object" && !Array.isArray(t);
}
function bf(t) {
  return typeof t == "string" || t instanceof String;
}
function pm(t) {
  return Tf() && t instanceof Blob;
}
function Tf() {
  return typeof Blob < "u";
}
function mm(t, e, n, r) {
  if (r < e)
    throw nl(`Invalid value for '${t}'. Expected ${e} or greater.`);
  if (r > n)
    throw nl(`Invalid value for '${t}'. Expected ${n} or less.`);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function If(t, e, n) {
  let r = e;
  return n == null && (r = `https://${e}`), `${n}://${r}/v0${t}`;
}
function x_(t) {
  const e = encodeURIComponent;
  let n = "?";
  for (const r in t)
    if (t.hasOwnProperty(r)) {
      const i = e(r) + "=" + e(t[r]);
      n = n + i + "&";
    }
  return n = n.slice(0, -1), n;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var br;
(function(t) {
  t[t.NO_ERROR = 0] = "NO_ERROR", t[t.NETWORK_ERROR = 1] = "NETWORK_ERROR", t[t.ABORT = 2] = "ABORT";
})(br || (br = {}));
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function KN(t, e) {
  const n = t >= 500 && t < 600, i = [
    // Request Timeout: web server didn't receive full request in time.
    408,
    // Too Many Requests: you're getting rate-limited, basically.
    429
  ].indexOf(t) !== -1, s = e.indexOf(t) !== -1;
  return n || i || s;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class HN {
  constructor(e, n, r, i, s, o, a, u, l, h, f, y = !0) {
    this.url_ = e, this.method_ = n, this.headers_ = r, this.body_ = i, this.successCodes_ = s, this.additionalRetryCodes_ = o, this.callback_ = a, this.errorCallback_ = u, this.timeout_ = l, this.progressCallback_ = h, this.connectionFactory_ = f, this.retry = y, this.pendingConnection_ = null, this.backoffId_ = null, this.canceled_ = !1, this.appDelete_ = !1, this.promise_ = new Promise((b, S) => {
      this.resolve_ = b, this.reject_ = S, this.start_();
    });
  }
  /**
   * Actually starts the retry loop.
   */
  start_() {
    const e = (r, i) => {
      if (i) {
        r(!1, new So(!1, null, !0));
        return;
      }
      const s = this.connectionFactory_();
      this.pendingConnection_ = s;
      const o = (a) => {
        const u = a.loaded, l = a.lengthComputable ? a.total : -1;
        this.progressCallback_ !== null && this.progressCallback_(u, l);
      };
      this.progressCallback_ !== null && s.addUploadProgressListener(o), s.send(this.url_, this.method_, this.body_, this.headers_).then(() => {
        this.progressCallback_ !== null && s.removeUploadProgressListener(o), this.pendingConnection_ = null;
        const a = s.getErrorCode() === br.NO_ERROR, u = s.getStatus();
        if (!a || KN(u, this.additionalRetryCodes_) && this.retry) {
          const h = s.getErrorCode() === br.ABORT;
          r(!1, new So(!1, null, h));
          return;
        }
        const l = this.successCodes_.indexOf(u) !== -1;
        r(!0, new So(l, s));
      });
    }, n = (r, i) => {
      const s = this.resolve_, o = this.reject_, a = i.connection;
      if (i.wasSuccessCode)
        try {
          const u = this.callback_(a, a.getResponse());
          qN(u) ? s(u) : s();
        } catch (u) {
          o(u);
        }
      else if (a !== null) {
        const u = Ef();
        u.serverResponse = a.getErrorText(), this.errorCallback_ ? o(this.errorCallback_(a, u)) : o(u);
      } else if (i.canceled) {
        const u = this.appDelete_ ? N_() : DN();
        o(u);
      } else {
        const u = ON();
        o(u);
      }
    };
    this.canceled_ ? n(!1, new So(!1, null, !0)) : this.backoffId_ = $N(e, n, this.timeout_);
  }
  /** @inheritDoc */
  getPromise() {
    return this.promise_;
  }
  /** @inheritDoc */
  cancel(e) {
    this.canceled_ = !0, this.appDelete_ = e || !1, this.backoffId_ !== null && BN(this.backoffId_), this.pendingConnection_ !== null && this.pendingConnection_.abort();
  }
}
class So {
  constructor(e, n, r) {
    this.wasSuccessCode = e, this.connection = n, this.canceled = !!r;
  }
}
function GN(t, e) {
  e !== null && e.length > 0 && (t.Authorization = "Firebase " + e);
}
function WN(t, e) {
  t["X-Firebase-Storage-Version"] = "webjs/" + (e ?? "AppManager");
}
function QN(t, e) {
  e && (t["X-Firebase-GMPID"] = e);
}
function YN(t, e) {
  e !== null && (t["X-Firebase-AppCheck"] = e);
}
function JN(t, e, n, r, i, s, o = !0) {
  const a = x_(t.urlParams), u = t.url + a, l = Object.assign({}, t.headers);
  return QN(l, e), GN(l, n), WN(l, s), YN(l, r), new HN(u, t.method, l, t.body, t.successCodes, t.additionalRetryCodes, t.handler, t.errorHandler, t.timeout, t.progressCallback, i, o);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function XN() {
  return typeof BlobBuilder < "u" ? BlobBuilder : typeof WebKitBlobBuilder < "u" ? WebKitBlobBuilder : void 0;
}
function ZN(...t) {
  const e = XN();
  if (e !== void 0) {
    const n = new e();
    for (let r = 0; r < t.length; r++)
      n.append(t[r]);
    return n.getBlob();
  } else {
    if (Tf())
      return new Blob(t);
    throw new $e(je.UNSUPPORTED_ENVIRONMENT, "This browser doesn't seem to support creating Blobs");
  }
}
function e1(t, e, n) {
  return t.webkitSlice ? t.webkitSlice(e, n) : t.mozSlice ? t.mozSlice(e, n) : t.slice ? t.slice(e, n) : null;
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function t1(t) {
  if (typeof atob > "u")
    throw FN("base-64");
  return atob(t);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const an = {
  /**
   * Indicates the string should be interpreted "raw", that is, as normal text.
   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte
   * sequence.
   * Example: The string 'Hello! \\ud83d\\ude0a' becomes the byte sequence
   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a
   */
  RAW: "raw",
  /**
   * Indicates the string should be interpreted as base64-encoded data.
   * Padding characters (trailing '='s) are optional.
   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence
   * ad 69 8e fb e1 3a b7 bf eb 97
   */
  BASE64: "base64",
  /**
   * Indicates the string should be interpreted as base64url-encoded data.
   * Padding characters (trailing '='s) are optional.
   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence
   * ad 69 8e fb e1 3a b7 bf eb 97
   */
  BASE64URL: "base64url",
  /**
   * Indicates the string is a data URL, such as one obtained from
   * canvas.toDataURL().
   * Example: the string 'data:application/octet-stream;base64,aaaa'
   * becomes the byte sequence
   * 69 a6 9a
   * (the content-type "application/octet-stream" is also applied, but can
   * be overridden in the metadata object).
   */
  DATA_URL: "data_url"
};
class Xc {
  constructor(e, n) {
    this.data = e, this.contentType = n || null;
  }
}
function n1(t, e) {
  switch (t) {
    case an.RAW:
      return new Xc(L_(e));
    case an.BASE64:
    case an.BASE64URL:
      return new Xc(M_(t, e));
    case an.DATA_URL:
      return new Xc(i1(e), s1(e));
  }
  throw Ef();
}
function L_(t) {
  const e = [];
  for (let n = 0; n < t.length; n++) {
    let r = t.charCodeAt(n);
    if (r <= 127)
      e.push(r);
    else if (r <= 2047)
      e.push(192 | r >> 6, 128 | r & 63);
    else if ((r & 64512) === 55296)
      if (!(n < t.length - 1 && (t.charCodeAt(n + 1) & 64512) === 56320))
        e.push(239, 191, 189);
      else {
        const s = r, o = t.charCodeAt(++n);
        r = 65536 | (s & 1023) << 10 | o & 1023, e.push(240 | r >> 18, 128 | r >> 12 & 63, 128 | r >> 6 & 63, 128 | r & 63);
      }
    else
      (r & 64512) === 56320 ? e.push(239, 191, 189) : e.push(224 | r >> 12, 128 | r >> 6 & 63, 128 | r & 63);
  }
  return new Uint8Array(e);
}
function r1(t) {
  let e;
  try {
    e = decodeURIComponent(t);
  } catch {
    throw ls(an.DATA_URL, "Malformed data URL.");
  }
  return L_(e);
}
function M_(t, e) {
  switch (t) {
    case an.BASE64: {
      const i = e.indexOf("-") !== -1, s = e.indexOf("_") !== -1;
      if (i || s)
        throw ls(t, "Invalid character '" + (i ? "-" : "_") + "' found: is it base64url encoded?");
      break;
    }
    case an.BASE64URL: {
      const i = e.indexOf("+") !== -1, s = e.indexOf("/") !== -1;
      if (i || s)
        throw ls(t, "Invalid character '" + (i ? "+" : "/") + "' found: is it base64 encoded?");
      e = e.replace(/-/g, "+").replace(/_/g, "/");
      break;
    }
  }
  let n;
  try {
    n = t1(e);
  } catch (i) {
    throw i.message.includes("polyfill") ? i : ls(t, "Invalid character found");
  }
  const r = new Uint8Array(n.length);
  for (let i = 0; i < n.length; i++)
    r[i] = n.charCodeAt(i);
  return r;
}
class V_ {
  constructor(e) {
    this.base64 = !1, this.contentType = null;
    const n = e.match(/^data:([^,]+)?,/);
    if (n === null)
      throw ls(an.DATA_URL, "Must be formatted 'data:[<mediatype>][;base64],<data>");
    const r = n[1] || null;
    r != null && (this.base64 = o1(r, ";base64"), this.contentType = this.base64 ? r.substring(0, r.length - 7) : r), this.rest = e.substring(e.indexOf(",") + 1);
  }
}
function i1(t) {
  const e = new V_(t);
  return e.base64 ? M_(an.BASE64, e.rest) : r1(e.rest);
}
function s1(t) {
  return new V_(t).contentType;
}
function o1(t, e) {
  return t.length >= e.length ? t.substring(t.length - e.length) === e : !1;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Kn {
  constructor(e, n) {
    let r = 0, i = "";
    pm(e) ? (this.data_ = e, r = e.size, i = e.type) : e instanceof ArrayBuffer ? (n ? this.data_ = new Uint8Array(e) : (this.data_ = new Uint8Array(e.byteLength), this.data_.set(new Uint8Array(e))), r = this.data_.length) : e instanceof Uint8Array && (n ? this.data_ = e : (this.data_ = new Uint8Array(e.length), this.data_.set(e)), r = e.length), this.size_ = r, this.type_ = i;
  }
  size() {
    return this.size_;
  }
  type() {
    return this.type_;
  }
  slice(e, n) {
    if (pm(this.data_)) {
      const r = this.data_, i = e1(r, e, n);
      return i === null ? null : new Kn(i);
    } else {
      const r = new Uint8Array(this.data_.buffer, e, n - e);
      return new Kn(r, !0);
    }
  }
  static getBlob(...e) {
    if (Tf()) {
      const n = e.map((r) => r instanceof Kn ? r.data_ : r);
      return new Kn(ZN.apply(null, n));
    } else {
      const n = e.map((o) => bf(o) ? n1(an.RAW, o).data : o.data_);
      let r = 0;
      n.forEach((o) => {
        r += o.byteLength;
      });
      const i = new Uint8Array(r);
      let s = 0;
      return n.forEach((o) => {
        for (let a = 0; a < o.length; a++)
          i[s++] = o[a];
      }), new Kn(i, !0);
    }
  }
  uploadData() {
    return this.data_;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function F_(t) {
  let e;
  try {
    e = JSON.parse(t);
  } catch {
    return null;
  }
  return zN(e) ? e : null;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function a1(t) {
  if (t.length === 0)
    return null;
  const e = t.lastIndexOf("/");
  return e === -1 ? "" : t.slice(0, e);
}
function c1(t, e) {
  const n = e.split("/").filter((r) => r.length > 0).join("/");
  return t.length === 0 ? n : t + "/" + n;
}
function U_(t) {
  const e = t.lastIndexOf("/", t.length - 2);
  return e === -1 ? t : t.slice(e + 1);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function u1(t, e) {
  return e;
}
class It {
  constructor(e, n, r, i) {
    this.server = e, this.local = n || e, this.writable = !!r, this.xform = i || u1;
  }
}
let Ao = null;
function l1(t) {
  return !bf(t) || t.length < 2 ? t : U_(t);
}
function j_() {
  if (Ao)
    return Ao;
  const t = [];
  t.push(new It("bucket")), t.push(new It("generation")), t.push(new It("metageneration")), t.push(new It("name", "fullPath", !0));
  function e(s, o) {
    return l1(o);
  }
  const n = new It("name");
  n.xform = e, t.push(n);
  function r(s, o) {
    return o !== void 0 ? Number(o) : o;
  }
  const i = new It("size");
  return i.xform = r, t.push(i), t.push(new It("timeCreated")), t.push(new It("updated")), t.push(new It("md5Hash", null, !0)), t.push(new It("cacheControl", null, !0)), t.push(new It("contentDisposition", null, !0)), t.push(new It("contentEncoding", null, !0)), t.push(new It("contentLanguage", null, !0)), t.push(new It("contentType", null, !0)), t.push(new It("metadata", "customMetadata", !0)), Ao = t, Ao;
}
function f1(t, e) {
  function n() {
    const r = t.bucket, i = t.fullPath, s = new xt(r, i);
    return e._makeStorageReference(s);
  }
  Object.defineProperty(t, "ref", { get: n });
}
function h1(t, e, n) {
  const r = {};
  r.type = "file";
  const i = n.length;
  for (let s = 0; s < i; s++) {
    const o = n[s];
    r[o.local] = o.xform(r, e[o.server]);
  }
  return f1(r, t), r;
}
function $_(t, e, n) {
  const r = F_(e);
  return r === null ? null : h1(t, r, n);
}
function d1(t, e, n, r) {
  const i = F_(e);
  if (i === null || !bf(i.downloadTokens))
    return null;
  const s = i.downloadTokens;
  if (s.length === 0)
    return null;
  const o = encodeURIComponent;
  return s.split(",").map((l) => {
    const h = t.bucket, f = t.fullPath, y = "/b/" + o(h) + "/o/" + o(f), b = If(y, n, r), S = x_({
      alt: "media",
      token: l
    });
    return b + S;
  })[0];
}
function p1(t, e) {
  const n = {}, r = e.length;
  for (let i = 0; i < r; i++) {
    const s = e[i];
    s.writable && (n[s.server] = t[s.local]);
  }
  return JSON.stringify(n);
}
class B_ {
  constructor(e, n, r, i) {
    this.url = e, this.method = n, this.handler = r, this.timeout = i, this.urlParams = {}, this.headers = {}, this.body = null, this.errorHandler = null, this.progressCallback = null, this.successCodes = [200], this.additionalRetryCodes = [];
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function q_(t) {
  if (!t)
    throw Ef();
}
function m1(t, e) {
  function n(r, i) {
    const s = $_(t, i, e);
    return q_(s !== null), s;
  }
  return n;
}
function g1(t, e) {
  function n(r, i) {
    const s = $_(t, i, e);
    return q_(s !== null), d1(s, i, t.host, t._protocol);
  }
  return n;
}
function z_(t) {
  function e(n, r) {
    let i;
    return n.getStatus() === 401 ? /* This exact message string is the only consistent part of the */ /* server's error response that identifies it as an App Check error. */ n.getErrorText().includes("Firebase App Check token is invalid") ? i = PN() : i = CN() : n.getStatus() === 402 ? i = RN(t.bucket) : n.getStatus() === 403 ? i = kN(t.path) : i = r, i.status = n.getStatus(), i.serverResponse = r.serverResponse, i;
  }
  return e;
}
function y1(t) {
  const e = z_(t);
  function n(r, i) {
    let s = e(r, i);
    return r.getStatus() === 404 && (s = AN(t.path)), s.serverResponse = i.serverResponse, s;
  }
  return n;
}
function v1(t, e, n) {
  const r = e.fullServerUrl(), i = If(r, t.host, t._protocol), s = "GET", o = t.maxOperationRetryTime, a = new B_(i, s, g1(t, n), o);
  return a.errorHandler = y1(e), a;
}
function _1(t, e) {
  return t && t.contentType || e && e.type() || "application/octet-stream";
}
function w1(t, e, n) {
  const r = Object.assign({}, n);
  return r.fullPath = t.path, r.size = e.size(), r.contentType || (r.contentType = _1(null, e)), r;
}
function E1(t, e, n, r, i) {
  const s = e.bucketOnlyServerUrl(), o = {
    "X-Goog-Upload-Protocol": "multipart"
  };
  function a() {
    let p = "";
    for (let g = 0; g < 2; g++)
      p = p + Math.random().toString().slice(2);
    return p;
  }
  const u = a();
  o["Content-Type"] = "multipart/related; boundary=" + u;
  const l = w1(e, r, i), h = p1(l, n), f = "--" + u + `\r
Content-Type: application/json; charset=utf-8\r
\r
` + h + `\r
--` + u + `\r
Content-Type: ` + l.contentType + `\r
\r
`, y = `\r
--` + u + "--", b = Kn.getBlob(f, r, y);
  if (b === null)
    throw MN();
  const S = { name: l.fullPath }, C = If(s, t.host, t._protocol), m = "POST", v = t.maxUploadRetryTime, E = new B_(C, m, m1(t, n), v);
  return E.urlParams = S, E.headers = o, E.body = b.uploadData(), E.errorHandler = z_(e), E;
}
class b1 {
  constructor() {
    this.sent_ = !1, this.xhr_ = new XMLHttpRequest(), this.initXhr(), this.errorCode_ = br.NO_ERROR, this.sendPromise_ = new Promise((e) => {
      this.xhr_.addEventListener("abort", () => {
        this.errorCode_ = br.ABORT, e();
      }), this.xhr_.addEventListener("error", () => {
        this.errorCode_ = br.NETWORK_ERROR, e();
      }), this.xhr_.addEventListener("load", () => {
        e();
      });
    });
  }
  send(e, n, r, i) {
    if (this.sent_)
      throw Wi("cannot .send() more than once");
    if (this.sent_ = !0, this.xhr_.open(n, e, !0), i !== void 0)
      for (const s in i)
        i.hasOwnProperty(s) && this.xhr_.setRequestHeader(s, i[s].toString());
    return r !== void 0 ? this.xhr_.send(r) : this.xhr_.send(), this.sendPromise_;
  }
  getErrorCode() {
    if (!this.sent_)
      throw Wi("cannot .getErrorCode() before sending");
    return this.errorCode_;
  }
  getStatus() {
    if (!this.sent_)
      throw Wi("cannot .getStatus() before sending");
    try {
      return this.xhr_.status;
    } catch {
      return -1;
    }
  }
  getResponse() {
    if (!this.sent_)
      throw Wi("cannot .getResponse() before sending");
    return this.xhr_.response;
  }
  getErrorText() {
    if (!this.sent_)
      throw Wi("cannot .getErrorText() before sending");
    return this.xhr_.statusText;
  }
  /** Aborts the request. */
  abort() {
    this.xhr_.abort();
  }
  getResponseHeader(e) {
    return this.xhr_.getResponseHeader(e);
  }
  addUploadProgressListener(e) {
    this.xhr_.upload != null && this.xhr_.upload.addEventListener("progress", e);
  }
  removeUploadProgressListener(e) {
    this.xhr_.upload != null && this.xhr_.upload.removeEventListener("progress", e);
  }
}
class T1 extends b1 {
  initXhr() {
    this.xhr_.responseType = "text";
  }
}
function K_() {
  return new T1();
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Nr {
  constructor(e, n) {
    this._service = e, n instanceof xt ? this._location = n : this._location = xt.makeFromUrl(n, e.host);
  }
  /**
   * Returns the URL for the bucket and path this object references,
   *     in the form gs://<bucket>/<object-path>
   * @override
   */
  toString() {
    return "gs://" + this._location.bucket + "/" + this._location.path;
  }
  _newRef(e, n) {
    return new Nr(e, n);
  }
  /**
   * A reference to the root of this object's bucket.
   */
  get root() {
    const e = new xt(this._location.bucket, "");
    return this._newRef(this._service, e);
  }
  /**
   * The name of the bucket containing this reference's object.
   */
  get bucket() {
    return this._location.bucket;
  }
  /**
   * The full path of this object.
   */
  get fullPath() {
    return this._location.path;
  }
  /**
   * The short name of this object, which is the last component of the full path.
   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.
   */
  get name() {
    return U_(this._location.path);
  }
  /**
   * The `StorageService` instance this `StorageReference` is associated with.
   */
  get storage() {
    return this._service;
  }
  /**
   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if
   * this reference is the root.
   */
  get parent() {
    const e = a1(this._location.path);
    if (e === null)
      return null;
    const n = new xt(this._location.bucket, e);
    return new Nr(this._service, n);
  }
  /**
   * Utility function to throw an error in methods that do not accept a root reference.
   */
  _throwIfRoot(e) {
    if (this._location.path === "")
      throw UN(e);
  }
}
function I1(t, e, n) {
  t._throwIfRoot("uploadBytes");
  const r = E1(t.storage, t._location, j_(), new Kn(e, !0), n);
  return t.storage.makeRequestWithTokens(r, K_).then((i) => ({
    metadata: i,
    ref: t
  }));
}
function S1(t) {
  t._throwIfRoot("getDownloadURL");
  const e = v1(t.storage, t._location, j_());
  return t.storage.makeRequestWithTokens(e, K_).then((n) => {
    if (n === null)
      throw VN();
    return n;
  });
}
function A1(t, e) {
  const n = c1(t._location.path, e), r = new xt(t._location.bucket, n);
  return new Nr(t.storage, r);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function R1(t) {
  return /^[A-Za-z]+:\/\//.test(t);
}
function C1(t, e) {
  return new Nr(t, e);
}
function H_(t, e) {
  if (t instanceof Sf) {
    const n = t;
    if (n._bucket == null)
      throw LN();
    const r = new Nr(n, n._bucket);
    return e != null ? H_(r, e) : r;
  } else
    return e !== void 0 ? A1(t, e) : t;
}
function P1(t, e) {
  if (e && R1(e)) {
    if (t instanceof Sf)
      return C1(t, e);
    throw nl("To use ref(service, url), the first argument must be a Storage instance.");
  } else
    return H_(t, e);
}
function gm(t, e) {
  const n = e == null ? void 0 : e[D_];
  return n == null ? null : xt.makeFromBucketSpec(n, t);
}
function k1(t, e, n, r = {}) {
  t.host = `${e}:${n}`, t._protocol = "http";
  const { mockUserToken: i } = r;
  i && (t._overrideAuthToken = typeof i == "string" ? i : _y(i, t.app.options.projectId));
}
class Sf {
  constructor(e, n, r, i, s) {
    this.app = e, this._authProvider = n, this._appCheckProvider = r, this._url = i, this._firebaseVersion = s, this._bucket = null, this._host = O_, this._protocol = "https", this._appId = null, this._deleted = !1, this._maxOperationRetryTime = IN, this._maxUploadRetryTime = SN, this._requests = /* @__PURE__ */ new Set(), i != null ? this._bucket = xt.makeFromBucketSpec(i, this._host) : this._bucket = gm(this._host, this.app.options);
  }
  /**
   * The host string for this service, in the form of `host` or
   * `host:port`.
   */
  get host() {
    return this._host;
  }
  set host(e) {
    this._host = e, this._url != null ? this._bucket = xt.makeFromBucketSpec(this._url, e) : this._bucket = gm(e, this.app.options);
  }
  /**
   * The maximum time to retry uploads in milliseconds.
   */
  get maxUploadRetryTime() {
    return this._maxUploadRetryTime;
  }
  set maxUploadRetryTime(e) {
    mm(
      "time",
      /* minValue=*/
      0,
      /* maxValue= */
      Number.POSITIVE_INFINITY,
      e
    ), this._maxUploadRetryTime = e;
  }
  /**
   * The maximum time to retry operations other than uploads or downloads in
   * milliseconds.
   */
  get maxOperationRetryTime() {
    return this._maxOperationRetryTime;
  }
  set maxOperationRetryTime(e) {
    mm(
      "time",
      /* minValue=*/
      0,
      /* maxValue= */
      Number.POSITIVE_INFINITY,
      e
    ), this._maxOperationRetryTime = e;
  }
  async _getAuthToken() {
    if (this._overrideAuthToken)
      return this._overrideAuthToken;
    const e = this._authProvider.getImmediate({ optional: !0 });
    if (e) {
      const n = await e.getToken();
      if (n !== null)
        return n.accessToken;
    }
    return null;
  }
  async _getAppCheckToken() {
    const e = this._appCheckProvider.getImmediate({ optional: !0 });
    return e ? (await e.getToken()).token : null;
  }
  /**
   * Stop running requests and prevent more from being created.
   */
  _delete() {
    return this._deleted || (this._deleted = !0, this._requests.forEach((e) => e.cancel()), this._requests.clear()), Promise.resolve();
  }
  /**
   * Returns a new firebaseStorage.Reference object referencing this StorageService
   * at the given Location.
   */
  _makeStorageReference(e) {
    return new Nr(this, e);
  }
  /**
   * @param requestInfo - HTTP RequestInfo object
   * @param authToken - Firebase auth token
   */
  _makeRequest(e, n, r, i, s = !0) {
    if (this._deleted)
      return new jN(N_());
    {
      const o = JN(e, this._appId, r, i, n, this._firebaseVersion, s);
      return this._requests.add(o), o.getPromise().then(() => this._requests.delete(o), () => this._requests.delete(o)), o;
    }
  }
  async makeRequestWithTokens(e, n) {
    const [r, i] = await Promise.all([
      this._getAuthToken(),
      this._getAppCheckToken()
    ]);
    return this._makeRequest(e, n, r, i).getPromise();
  }
}
const ym = "@firebase/storage", vm = "0.12.6";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const G_ = "storage";
function _V(t, e, n) {
  return t = Ue(t), I1(t, e, n);
}
function wV(t) {
  return t = Ue(t), S1(t);
}
function EV(t, e) {
  return t = Ue(t), P1(t, e);
}
function O1(t = Ma(), e) {
  t = Ue(t);
  const r = nr(t, G_).getImmediate({
    identifier: e
  }), i = gy("storage");
  return i && D1(r, ...i), r;
}
function D1(t, e, n, r = {}) {
  k1(t, e, n, r);
}
function N1(t, { instanceIdentifier: e }) {
  const n = t.getProvider("app").getImmediate(), r = t.getProvider("auth-internal"), i = t.getProvider("app-check-internal");
  return new Sf(n, r, i, e, jr);
}
function x1() {
  en(new Kt(
    G_,
    N1,
    "PUBLIC"
    /* ComponentType.PUBLIC */
  ).setMultipleInstances(!0)), Pt(ym, vm, ""), Pt(ym, vm, "esm2017");
}
x1();
const W_ = "@firebase/installations", Af = "0.6.8";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Q_ = 1e4, Y_ = `w:${Af}`, J_ = "FIS_v2", L1 = "https://firebaseinstallations.googleapis.com/v1", M1 = 60 * 60 * 1e3, V1 = "installations", F1 = "Installations";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const U1 = {
  "missing-app-config-values": 'Missing App configuration value: "{$valueName}"',
  "not-registered": "Firebase Installation is not registered.",
  "installation-not-found": "Firebase Installation not found.",
  "request-failed": '{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',
  "app-offline": "Could not process request. Application offline.",
  "delete-pending-registration": "Can't delete installation while there is a pending registration request."
}, xr = new Ur(V1, F1, U1);
function X_(t) {
  return t instanceof Gt && t.code.includes(
    "request-failed"
    /* ErrorCode.REQUEST_FAILED */
  );
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Z_({ projectId: t }) {
  return `${L1}/projects/${t}/installations`;
}
function ew(t) {
  return {
    token: t.token,
    requestStatus: 2,
    expiresIn: $1(t.expiresIn),
    creationTime: Date.now()
  };
}
async function tw(t, e) {
  const r = (await e.json()).error;
  return xr.create("request-failed", {
    requestName: t,
    serverCode: r.code,
    serverMessage: r.message,
    serverStatus: r.status
  });
}
function nw({ apiKey: t }) {
  return new Headers({
    "Content-Type": "application/json",
    Accept: "application/json",
    "x-goog-api-key": t
  });
}
function j1(t, { refreshToken: e }) {
  const n = nw(t);
  return n.append("Authorization", B1(e)), n;
}
async function rw(t) {
  const e = await t();
  return e.status >= 500 && e.status < 600 ? t() : e;
}
function $1(t) {
  return Number(t.replace("s", "000"));
}
function B1(t) {
  return `${J_} ${t}`;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function q1({ appConfig: t, heartbeatServiceProvider: e }, { fid: n }) {
  const r = Z_(t), i = nw(t), s = e.getImmediate({
    optional: !0
  });
  if (s) {
    const l = await s.getHeartbeatsHeader();
    l && i.append("x-firebase-client", l);
  }
  const o = {
    fid: n,
    authVersion: J_,
    appId: t.appId,
    sdkVersion: Y_
  }, a = {
    method: "POST",
    headers: i,
    body: JSON.stringify(o)
  }, u = await rw(() => fetch(r, a));
  if (u.ok) {
    const l = await u.json();
    return {
      fid: l.fid || n,
      registrationStatus: 2,
      refreshToken: l.refreshToken,
      authToken: ew(l.authToken)
    };
  } else
    throw await tw("Create Installation", u);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function iw(t) {
  return new Promise((e) => {
    setTimeout(e, t);
  });
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function z1(t) {
  return btoa(String.fromCharCode(...t)).replace(/\+/g, "-").replace(/\//g, "_");
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const K1 = /^[cdef][\w-]{21}$/, rl = "";
function H1() {
  try {
    const t = new Uint8Array(17);
    (self.crypto || self.msCrypto).getRandomValues(t), t[0] = 112 + t[0] % 16;
    const n = G1(t);
    return K1.test(n) ? n : rl;
  } catch {
    return rl;
  }
}
function G1(t) {
  return z1(t).substr(0, 22);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Za(t) {
  return `${t.appName}!${t.appId}`;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const sw = /* @__PURE__ */ new Map();
function ow(t, e) {
  const n = Za(t);
  aw(n, e), W1(n, e);
}
function aw(t, e) {
  const n = sw.get(t);
  if (n)
    for (const r of n)
      r(e);
}
function W1(t, e) {
  const n = Q1();
  n && n.postMessage({ key: t, fid: e }), Y1();
}
let yr = null;
function Q1() {
  return !yr && "BroadcastChannel" in self && (yr = new BroadcastChannel("[Firebase] FID Change"), yr.onmessage = (t) => {
    aw(t.data.key, t.data.fid);
  }), yr;
}
function Y1() {
  sw.size === 0 && yr && (yr.close(), yr = null);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const J1 = "firebase-installations-database", X1 = 1, Lr = "firebase-installations-store";
let Zc = null;
function Rf() {
  return Zc || (Zc = Sy(J1, X1, {
    upgrade: (t, e) => {
      switch (e) {
        case 0:
          t.createObjectStore(Lr);
      }
    }
  })), Zc;
}
async function da(t, e) {
  const n = Za(t), i = (await Rf()).transaction(Lr, "readwrite"), s = i.objectStore(Lr), o = await s.get(n);
  return await s.put(e, n), await i.done, (!o || o.fid !== e.fid) && ow(t, e.fid), e;
}
async function cw(t) {
  const e = Za(t), r = (await Rf()).transaction(Lr, "readwrite");
  await r.objectStore(Lr).delete(e), await r.done;
}
async function ec(t, e) {
  const n = Za(t), i = (await Rf()).transaction(Lr, "readwrite"), s = i.objectStore(Lr), o = await s.get(n), a = e(o);
  return a === void 0 ? await s.delete(n) : await s.put(a, n), await i.done, a && (!o || o.fid !== a.fid) && ow(t, a.fid), a;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function Cf(t) {
  let e;
  const n = await ec(t.appConfig, (r) => {
    const i = Z1(r), s = ex(t, i);
    return e = s.registrationPromise, s.installationEntry;
  });
  return n.fid === rl ? { installationEntry: await e } : {
    installationEntry: n,
    registrationPromise: e
  };
}
function Z1(t) {
  const e = t || {
    fid: H1(),
    registrationStatus: 0
    /* RequestStatus.NOT_STARTED */
  };
  return uw(e);
}
function ex(t, e) {
  if (e.registrationStatus === 0) {
    if (!navigator.onLine) {
      const i = Promise.reject(xr.create(
        "app-offline"
        /* ErrorCode.APP_OFFLINE */
      ));
      return {
        installationEntry: e,
        registrationPromise: i
      };
    }
    const n = {
      fid: e.fid,
      registrationStatus: 1,
      registrationTime: Date.now()
    }, r = tx(t, n);
    return { installationEntry: n, registrationPromise: r };
  } else return e.registrationStatus === 1 ? {
    installationEntry: e,
    registrationPromise: nx(t)
  } : { installationEntry: e };
}
async function tx(t, e) {
  try {
    const n = await q1(t, e);
    return da(t.appConfig, n);
  } catch (n) {
    throw X_(n) && n.customData.serverCode === 409 ? await cw(t.appConfig) : await da(t.appConfig, {
      fid: e.fid,
      registrationStatus: 0
      /* RequestStatus.NOT_STARTED */
    }), n;
  }
}
async function nx(t) {
  let e = await _m(t.appConfig);
  for (; e.registrationStatus === 1; )
    await iw(100), e = await _m(t.appConfig);
  if (e.registrationStatus === 0) {
    const { installationEntry: n, registrationPromise: r } = await Cf(t);
    return r || n;
  }
  return e;
}
function _m(t) {
  return ec(t, (e) => {
    if (!e)
      throw xr.create(
        "installation-not-found"
        /* ErrorCode.INSTALLATION_NOT_FOUND */
      );
    return uw(e);
  });
}
function uw(t) {
  return rx(t) ? {
    fid: t.fid,
    registrationStatus: 0
    /* RequestStatus.NOT_STARTED */
  } : t;
}
function rx(t) {
  return t.registrationStatus === 1 && t.registrationTime + Q_ < Date.now();
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function ix({ appConfig: t, heartbeatServiceProvider: e }, n) {
  const r = sx(t, n), i = j1(t, n), s = e.getImmediate({
    optional: !0
  });
  if (s) {
    const l = await s.getHeartbeatsHeader();
    l && i.append("x-firebase-client", l);
  }
  const o = {
    installation: {
      sdkVersion: Y_,
      appId: t.appId
    }
  }, a = {
    method: "POST",
    headers: i,
    body: JSON.stringify(o)
  }, u = await rw(() => fetch(r, a));
  if (u.ok) {
    const l = await u.json();
    return ew(l);
  } else
    throw await tw("Generate Auth Token", u);
}
function sx(t, { fid: e }) {
  return `${Z_(t)}/${e}/authTokens:generate`;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function Pf(t, e = !1) {
  let n;
  const r = await ec(t.appConfig, (s) => {
    if (!lw(s))
      throw xr.create(
        "not-registered"
        /* ErrorCode.NOT_REGISTERED */
      );
    const o = s.authToken;
    if (!e && cx(o))
      return s;
    if (o.requestStatus === 1)
      return n = ox(t, e), s;
    {
      if (!navigator.onLine)
        throw xr.create(
          "app-offline"
          /* ErrorCode.APP_OFFLINE */
        );
      const a = lx(s);
      return n = ax(t, a), a;
    }
  });
  return n ? await n : r.authToken;
}
async function ox(t, e) {
  let n = await wm(t.appConfig);
  for (; n.authToken.requestStatus === 1; )
    await iw(100), n = await wm(t.appConfig);
  const r = n.authToken;
  return r.requestStatus === 0 ? Pf(t, e) : r;
}
function wm(t) {
  return ec(t, (e) => {
    if (!lw(e))
      throw xr.create(
        "not-registered"
        /* ErrorCode.NOT_REGISTERED */
      );
    const n = e.authToken;
    return fx(n) ? Object.assign(Object.assign({}, e), { authToken: {
      requestStatus: 0
      /* RequestStatus.NOT_STARTED */
    } }) : e;
  });
}
async function ax(t, e) {
  try {
    const n = await ix(t, e), r = Object.assign(Object.assign({}, e), { authToken: n });
    return await da(t.appConfig, r), n;
  } catch (n) {
    if (X_(n) && (n.customData.serverCode === 401 || n.customData.serverCode === 404))
      await cw(t.appConfig);
    else {
      const r = Object.assign(Object.assign({}, e), { authToken: {
        requestStatus: 0
        /* RequestStatus.NOT_STARTED */
      } });
      await da(t.appConfig, r);
    }
    throw n;
  }
}
function lw(t) {
  return t !== void 0 && t.registrationStatus === 2;
}
function cx(t) {
  return t.requestStatus === 2 && !ux(t);
}
function ux(t) {
  const e = Date.now();
  return e < t.creationTime || t.creationTime + t.expiresIn < e + M1;
}
function lx(t) {
  const e = {
    requestStatus: 1,
    requestTime: Date.now()
  };
  return Object.assign(Object.assign({}, t), { authToken: e });
}
function fx(t) {
  return t.requestStatus === 1 && t.requestTime + Q_ < Date.now();
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function hx(t) {
  const e = t, { installationEntry: n, registrationPromise: r } = await Cf(e);
  return r ? r.catch(console.error) : Pf(e).catch(console.error), n.fid;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function dx(t, e = !1) {
  const n = t;
  return await px(n), (await Pf(n, e)).token;
}
async function px(t) {
  const { registrationPromise: e } = await Cf(t);
  e && await e;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function mx(t) {
  if (!t || !t.options)
    throw eu("App Configuration");
  if (!t.name)
    throw eu("App Name");
  const e = [
    "projectId",
    "apiKey",
    "appId"
  ];
  for (const n of e)
    if (!t.options[n])
      throw eu(n);
  return {
    appName: t.name,
    projectId: t.options.projectId,
    apiKey: t.options.apiKey,
    appId: t.options.appId
  };
}
function eu(t) {
  return xr.create("missing-app-config-values", {
    valueName: t
  });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const fw = "installations", gx = "installations-internal", yx = (t) => {
  const e = t.getProvider("app").getImmediate(), n = mx(e), r = nr(e, "heartbeat");
  return {
    app: e,
    appConfig: n,
    heartbeatServiceProvider: r,
    _delete: () => Promise.resolve()
  };
}, vx = (t) => {
  const e = t.getProvider("app").getImmediate(), n = nr(e, fw).getImmediate();
  return {
    getId: () => hx(n),
    getToken: (i) => dx(n, i)
  };
};
function _x() {
  en(new Kt(
    fw,
    yx,
    "PUBLIC"
    /* ComponentType.PUBLIC */
  )), en(new Kt(
    gx,
    vx,
    "PRIVATE"
    /* ComponentType.PRIVATE */
  ));
}
_x();
Pt(W_, Af);
Pt(W_, Af, "esm2017");
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const pa = "analytics", wx = "firebase_id", Ex = "origin", bx = 60 * 1e3, Tx = "https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig", kf = "https://www.googletagmanager.com/gtag/js";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Dt = new La("@firebase/analytics");
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Ix = {
  "already-exists": "A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.",
  "already-initialized": "initializeAnalytics() cannot be called again with different options than those it was initially called with. It can be called again with the same options to return the existing instance, or getAnalytics() can be used to get a reference to the already-initialized instance.",
  "already-initialized-settings": "Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.",
  "interop-component-reg-failed": "Firebase Analytics Interop Component failed to instantiate: {$reason}",
  "invalid-analytics-context": "Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}",
  "indexeddb-unavailable": "IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}",
  "fetch-throttle": "The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.",
  "config-fetch-failed": "Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}",
  "no-api-key": 'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',
  "no-app-id": 'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.',
  "no-client-id": 'The "client_id" field is empty.',
  "invalid-gtag-resource": "Trusted Types detected an invalid gtag resource: {$gtagURL}."
}, Lt = new Ur("analytics", "Analytics", Ix);
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Sx(t) {
  if (!t.startsWith(kf)) {
    const e = Lt.create("invalid-gtag-resource", {
      gtagURL: t
    });
    return Dt.warn(e.message), "";
  }
  return t;
}
function hw(t) {
  return Promise.all(t.map((e) => e.catch((n) => n)));
}
function Ax(t, e) {
  let n;
  return window.trustedTypes && (n = window.trustedTypes.createPolicy(t, e)), n;
}
function Rx(t, e) {
  const n = Ax("firebase-js-sdk-policy", {
    createScriptURL: Sx
  }), r = document.createElement("script"), i = `${kf}?l=${t}&id=${e}`;
  r.src = n ? n == null ? void 0 : n.createScriptURL(i) : i, r.async = !0, document.head.appendChild(r);
}
function Cx(t) {
  let e = [];
  return Array.isArray(window[t]) ? e = window[t] : window[t] = e, e;
}
async function Px(t, e, n, r, i, s) {
  const o = r[i];
  try {
    if (o)
      await e[o];
    else {
      const u = (await hw(n)).find((l) => l.measurementId === i);
      u && await e[u.appId];
    }
  } catch (a) {
    Dt.error(a);
  }
  t("config", i, s);
}
async function kx(t, e, n, r, i) {
  try {
    let s = [];
    if (i && i.send_to) {
      let o = i.send_to;
      Array.isArray(o) || (o = [o]);
      const a = await hw(n);
      for (const u of o) {
        const l = a.find((f) => f.measurementId === u), h = l && e[l.appId];
        if (h)
          s.push(h);
        else {
          s = [];
          break;
        }
      }
    }
    s.length === 0 && (s = Object.values(e)), await Promise.all(s), t("event", r, i || {});
  } catch (s) {
    Dt.error(s);
  }
}
function Ox(t, e, n, r) {
  async function i(s, ...o) {
    try {
      if (s === "event") {
        const [a, u] = o;
        await kx(t, e, n, a, u);
      } else if (s === "config") {
        const [a, u] = o;
        await Px(t, e, n, r, a, u);
      } else if (s === "consent") {
        const [a, u] = o;
        t("consent", a, u);
      } else if (s === "get") {
        const [a, u, l] = o;
        t("get", a, u, l);
      } else if (s === "set") {
        const [a] = o;
        t("set", a);
      } else
        t(s, ...o);
    } catch (a) {
      Dt.error(a);
    }
  }
  return i;
}
function Dx(t, e, n, r, i) {
  let s = function(...o) {
    window[r].push(arguments);
  };
  return window[i] && typeof window[i] == "function" && (s = window[i]), window[i] = Ox(s, t, e, n), {
    gtagCore: s,
    wrappedGtag: window[i]
  };
}
function Nx(t) {
  const e = window.document.getElementsByTagName("script");
  for (const n of Object.values(e))
    if (n.src && n.src.includes(kf) && n.src.includes(t))
      return n;
  return null;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const xx = 30, Lx = 1e3;
class Mx {
  constructor(e = {}, n = Lx) {
    this.throttleMetadata = e, this.intervalMillis = n;
  }
  getThrottleMetadata(e) {
    return this.throttleMetadata[e];
  }
  setThrottleMetadata(e, n) {
    this.throttleMetadata[e] = n;
  }
  deleteThrottleMetadata(e) {
    delete this.throttleMetadata[e];
  }
}
const dw = new Mx();
function Vx(t) {
  return new Headers({
    Accept: "application/json",
    "x-goog-api-key": t
  });
}
async function Fx(t) {
  var e;
  const { appId: n, apiKey: r } = t, i = {
    method: "GET",
    headers: Vx(r)
  }, s = Tx.replace("{app-id}", n), o = await fetch(s, i);
  if (o.status !== 200 && o.status !== 304) {
    let a = "";
    try {
      const u = await o.json();
      !((e = u.error) === null || e === void 0) && e.message && (a = u.error.message);
    } catch {
    }
    throw Lt.create("config-fetch-failed", {
      httpStatus: o.status,
      responseMessage: a
    });
  }
  return o.json();
}
async function Ux(t, e = dw, n) {
  const { appId: r, apiKey: i, measurementId: s } = t.options;
  if (!r)
    throw Lt.create(
      "no-app-id"
      /* AnalyticsError.NO_APP_ID */
    );
  if (!i) {
    if (s)
      return {
        measurementId: s,
        appId: r
      };
    throw Lt.create(
      "no-api-key"
      /* AnalyticsError.NO_API_KEY */
    );
  }
  const o = e.getThrottleMetadata(r) || {
    backoffCount: 0,
    throttleEndTimeMillis: Date.now()
  }, a = new Bx();
  return setTimeout(async () => {
    a.abort();
  }, bx), pw({ appId: r, apiKey: i, measurementId: s }, o, a, e);
}
async function pw(t, { throttleEndTimeMillis: e, backoffCount: n }, r, i = dw) {
  var s;
  const { appId: o, measurementId: a } = t;
  try {
    await jx(r, e);
  } catch (u) {
    if (a)
      return Dt.warn(`Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID ${a} provided in the "measurementId" field in the local Firebase config. [${u == null ? void 0 : u.message}]`), { appId: o, measurementId: a };
    throw u;
  }
  try {
    const u = await Fx(t);
    return i.deleteThrottleMetadata(o), u;
  } catch (u) {
    const l = u;
    if (!$x(l)) {
      if (i.deleteThrottleMetadata(o), a)
        return Dt.warn(`Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID ${a} provided in the "measurementId" field in the local Firebase config. [${l == null ? void 0 : l.message}]`), { appId: o, measurementId: a };
      throw u;
    }
    const h = Number((s = l == null ? void 0 : l.customData) === null || s === void 0 ? void 0 : s.httpStatus) === 503 ? ep(n, i.intervalMillis, xx) : ep(n, i.intervalMillis), f = {
      throttleEndTimeMillis: Date.now() + h,
      backoffCount: n + 1
    };
    return i.setThrottleMetadata(o, f), Dt.debug(`Calling attemptFetch again in ${h} millis`), pw(t, f, r, i);
  }
}
function jx(t, e) {
  return new Promise((n, r) => {
    const i = Math.max(e - Date.now(), 0), s = setTimeout(n, i);
    t.addEventListener(() => {
      clearTimeout(s), r(Lt.create("fetch-throttle", {
        throttleEndTimeMillis: e
      }));
    });
  });
}
function $x(t) {
  if (!(t instanceof Gt) || !t.customData)
    return !1;
  const e = Number(t.customData.httpStatus);
  return e === 429 || e === 500 || e === 503 || e === 504;
}
class Bx {
  constructor() {
    this.listeners = [];
  }
  addEventListener(e) {
    this.listeners.push(e);
  }
  abort() {
    this.listeners.forEach((e) => e());
  }
}
async function qx(t, e, n, r, i) {
  if (i && i.global) {
    t("event", n, r);
    return;
  } else {
    const s = await e, o = Object.assign(Object.assign({}, r), { send_to: s });
    t("event", n, o);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function zx() {
  if (Ey())
    try {
      await by();
    } catch (t) {
      return Dt.warn(Lt.create("indexeddb-unavailable", {
        errorInfo: t == null ? void 0 : t.toString()
      }).message), !1;
    }
  else
    return Dt.warn(Lt.create("indexeddb-unavailable", {
      errorInfo: "IndexedDB is not available in this environment."
    }).message), !1;
  return !0;
}
async function Kx(t, e, n, r, i, s, o) {
  var a;
  const u = Ux(t);
  u.then((b) => {
    n[b.measurementId] = b.appId, t.options.measurementId && b.measurementId !== t.options.measurementId && Dt.warn(`The measurement ID in the local Firebase config (${t.options.measurementId}) does not match the measurement ID fetched from the server (${b.measurementId}). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.`);
  }).catch((b) => Dt.error(b)), e.push(u);
  const l = zx().then((b) => {
    if (b)
      return r.getId();
  }), [h, f] = await Promise.all([
    u,
    l
  ]);
  Nx(s) || Rx(s, h.measurementId), i("js", /* @__PURE__ */ new Date());
  const y = (a = o == null ? void 0 : o.config) !== null && a !== void 0 ? a : {};
  return y[Ex] = "firebase", y.update = !0, f != null && (y[wx] = f), i("config", h.measurementId, y), h.measurementId;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Hx {
  constructor(e) {
    this.app = e;
  }
  _delete() {
    return delete fs[this.app.options.appId], Promise.resolve();
  }
}
let fs = {}, Em = [];
const bm = {};
let tu = "dataLayer", Gx = "gtag", Tm, mw, Im = !1;
function Wx() {
  const t = [];
  if (wy() && t.push("This is a browser extension environment."), PA() || t.push("Cookies are not available."), t.length > 0) {
    const e = t.map((r, i) => `(${i + 1}) ${r}`).join(" "), n = Lt.create("invalid-analytics-context", {
      errorInfo: e
    });
    Dt.warn(n.message);
  }
}
function Qx(t, e, n) {
  Wx();
  const r = t.options.appId;
  if (!r)
    throw Lt.create(
      "no-app-id"
      /* AnalyticsError.NO_APP_ID */
    );
  if (!t.options.apiKey)
    if (t.options.measurementId)
      Dt.warn(`The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID ${t.options.measurementId} provided in the "measurementId" field in the local Firebase config.`);
    else
      throw Lt.create(
        "no-api-key"
        /* AnalyticsError.NO_API_KEY */
      );
  if (fs[r] != null)
    throw Lt.create("already-exists", {
      id: r
    });
  if (!Im) {
    Cx(tu);
    const { wrappedGtag: s, gtagCore: o } = Dx(fs, Em, bm, tu, Gx);
    mw = s, Tm = o, Im = !0;
  }
  return fs[r] = Kx(t, Em, bm, e, Tm, tu, n), new Hx(t);
}
function Yx(t = Ma()) {
  t = Ue(t);
  const e = nr(t, pa);
  return e.isInitialized() ? e.getImmediate() : Jx(t);
}
function Jx(t, e = {}) {
  const n = nr(t, pa);
  if (n.isInitialized()) {
    const i = n.getImmediate();
    if (_s(e, n.getOptions()))
      return i;
    throw Lt.create(
      "already-initialized"
      /* AnalyticsError.ALREADY_INITIALIZED */
    );
  }
  return n.initialize({ options: e });
}
function Xx(t, e, n, r) {
  t = Ue(t), qx(mw, fs[t.app.options.appId], e, n, r).catch((i) => Dt.error(i));
}
const Sm = "@firebase/analytics", Am = "0.10.7";
function Zx() {
  en(new Kt(
    pa,
    (e, { options: n }) => {
      const r = e.getProvider("app").getImmediate(), i = e.getProvider("installations-internal").getImmediate();
      return Qx(r, i, n);
    },
    "PUBLIC"
    /* ComponentType.PUBLIC */
  )), en(new Kt(
    "analytics-internal",
    t,
    "PRIVATE"
    /* ComponentType.PRIVATE */
  )), Pt(Sm, Am), Pt(Sm, Am, "esm2017");
  function t(e) {
    try {
      const n = e.getProvider(pa).getImmediate();
      return {
        logEvent: (r, i, s) => Xx(n, r, i, s)
      };
    } catch (n) {
      throw Lt.create("interop-component-reg-failed", {
        reason: n
      });
    }
  }
}
Zx();
const eL = {
  apiKey: "AIzaSyBmcnHP80KXpBXltHrVnP1MZPsiSbVbWqQ",
  authDomain: "water-fetch.firebaseapp.com",
  projectId: "water-fetch",
  storageBucket: "water-fetch.appspot.com",
  messagingSenderId: "911813185967"
}, ds = class ds {
  constructor(e) {
    En(this, "app");
    En(this, "auth");
    En(this, "db");
    En(this, "storage");
    En(this, "analytics");
    En(this, "lockConfig");
    if (ds.server)
      throw new Error("Server already initialized");
    this.lockConfig = {
      ...eL,
      ...e
    }, this.app = Ay(this.lockConfig), this.auth = _k(this.app), this.db = cN(this.app), this.storage = O1(this.app), this.analytics = Yx(this.app), ds.server = this;
  }
  get config() {
    return this.lockConfig;
  }
};
En(ds, "server", null);
let $t = ds;
const tL = ["jpg", "jpeg", "png", "gif", "bmp", "svg", "webp", "tiff", "ico", "jfif"];
function nL(t) {
  const e = Et();
  return new Promise((n, r) => {
    var o;
    if (!((o = t.buttons) != null && o.length)) {
      r("Need Minimum One Button");
      return;
    }
    Jd.setTemp("id", e), Jd.setTemp("params", t);
    const i = async () => {
      var h, f, y;
      const { slot: a, object: u } = de.getState(), l = (h = a.entities["dialog-list"]) == null ? void 0 : h.submited;
      typeof l == "number" && (n({
        response: l,
        checkboxChecked: ((y = (f = u.data) == null ? void 0 : f.dialog) == null ? void 0 : y.checked) || !1
      }), s(), Gn("dialog.id", null));
    }, s = de.subscribe(i);
  });
}
async function bV() {
  const { screenX: t, screenY: e, innerWidth: n, innerHeight: r } = window;
  return {
    x: t,
    y: e,
    width: n,
    height: r
  };
}
async function TV() {
  return await fetch("https://api.ipify.org?format=json").then((t) => t.json()).then((t) => t.ip);
}
const IV = (t) => {
  var r;
  const e = (r = t.match(/\.[a-z]+$/gi)) == null ? void 0 : r[0].slice(1).toLowerCase();
  let n = {};
  return tL.forEach((i) => {
    n[i] = i;
  }), n = {
    ...n,
    jpg: "jpeg",
    svg: "svg+xml"
  }, e ? n[e] : "png";
}, SV = async ({ to: t, subject: e = "", body: n = "" }) => {
  const r = document.createElement("a");
  r.href = `mailto:${t}?subject=${encodeURIComponent(e)}&body=${encodeURIComponent(n)}`, r.target = "_blank", r.click();
}, AV = ({ tel: t }) => {
  const e = document.createElement("a");
  e.href = `tel:${t}`, e.target = "_blank", e.click();
}, RV = ({ to: t, body: e = "" }) => {
  const n = document.createElement("a");
  n.href = `sms:${t}?body=${encodeURIComponent(e)}`, n.target = "_blank", n.click();
}, il = /* @__PURE__ */ new Map(), CV = (t, e) => {
  const n = async () => {
    const r = e();
    r instanceof Promise && await r;
  };
  il.set(t, n), document.addEventListener(t, n);
}, PV = (t) => {
  const e = il.get(t);
  e && (document.removeEventListener(t, e), il.delete(t));
}, kV = async ({ options: t, value: e }) => {
  Xd.setTemp("main", e), Xd.setTemp("main-mode", t == null ? void 0 : t.mode);
}, OV = (t) => {
  Qr.setTemp("position", [t.x, t.y]);
  const e = Et();
  Qr.setTemp("id", e), Qr.setTemp(
    "list",
    t.menu.map(({ click: n, ...r }) => r)
  ), sl(
    "object.data.menu.result",
    (n) => typeof n == "number",
    (n) => {
      var i, s;
      const r = (i = n.object.data) == null ? void 0 : i.menu;
      if (typeof r == "object" && typeof r.result == "number" && r.id == e) {
        Qr.setTemp("id", null), Qr.setTemp("list", []), Qr.setTemp("result", null);
        const o = t.menu[r.result];
        (s = o.click) == null || s.call(o);
      }
    }
  );
}, DV = (t) => new Promise((e, n) => {
  var i;
  const r = document.createElement("input");
  r.type = "file", t.filters ? r.accept = t.filters.map(({ name: s, extensions: o }) => `${s}.{${o.join(",")}`).join(",") : r.accept = "*", r.multiple = !!((i = t.properties) != null && i.includes("multiSelections")), r.onchange = async () => {
    var s;
    if ((s = r.files) != null && s.length) {
      const o = [];
      for (let u = 0; u < r.files.length; u++) {
        const l = r.files.item(u);
        l && o.push(l);
      }
      const a = await rE(o, async (u) => new Promise((l) => {
        const h = new FileReader();
        h.onload = () => {
          h.result && l(h.result.toString());
        }, h.readAsDataURL(u);
      }));
      e(a);
    }
  }, r.click(), r.onerror = n;
}), NV = async (t) => (await nL({
  ...t,
  buttons: ["Yes", "No"]
})).response === 0;
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Rm;
(function(t) {
  t.HARM_CATEGORY_UNSPECIFIED = "HARM_CATEGORY_UNSPECIFIED", t.HARM_CATEGORY_HATE_SPEECH = "HARM_CATEGORY_HATE_SPEECH", t.HARM_CATEGORY_SEXUALLY_EXPLICIT = "HARM_CATEGORY_SEXUALLY_EXPLICIT", t.HARM_CATEGORY_HARASSMENT = "HARM_CATEGORY_HARASSMENT", t.HARM_CATEGORY_DANGEROUS_CONTENT = "HARM_CATEGORY_DANGEROUS_CONTENT";
})(Rm || (Rm = {}));
var Cm;
(function(t) {
  t.HARM_BLOCK_THRESHOLD_UNSPECIFIED = "HARM_BLOCK_THRESHOLD_UNSPECIFIED", t.BLOCK_LOW_AND_ABOVE = "BLOCK_LOW_AND_ABOVE", t.BLOCK_MEDIUM_AND_ABOVE = "BLOCK_MEDIUM_AND_ABOVE", t.BLOCK_ONLY_HIGH = "BLOCK_ONLY_HIGH", t.BLOCK_NONE = "BLOCK_NONE";
})(Cm || (Cm = {}));
var Pm;
(function(t) {
  t.HARM_PROBABILITY_UNSPECIFIED = "HARM_PROBABILITY_UNSPECIFIED", t.NEGLIGIBLE = "NEGLIGIBLE", t.LOW = "LOW", t.MEDIUM = "MEDIUM", t.HIGH = "HIGH";
})(Pm || (Pm = {}));
var km;
(function(t) {
  t.BLOCKED_REASON_UNSPECIFIED = "BLOCKED_REASON_UNSPECIFIED", t.SAFETY = "SAFETY", t.OTHER = "OTHER";
})(km || (km = {}));
var ma;
(function(t) {
  t.FINISH_REASON_UNSPECIFIED = "FINISH_REASON_UNSPECIFIED", t.STOP = "STOP", t.MAX_TOKENS = "MAX_TOKENS", t.SAFETY = "SAFETY", t.RECITATION = "RECITATION", t.OTHER = "OTHER";
})(ma || (ma = {}));
var Om;
(function(t) {
  t.TASK_TYPE_UNSPECIFIED = "TASK_TYPE_UNSPECIFIED", t.RETRIEVAL_QUERY = "RETRIEVAL_QUERY", t.RETRIEVAL_DOCUMENT = "RETRIEVAL_DOCUMENT", t.SEMANTIC_SIMILARITY = "SEMANTIC_SIMILARITY", t.CLASSIFICATION = "CLASSIFICATION", t.CLUSTERING = "CLUSTERING";
})(Om || (Om = {}));
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Cs extends Error {
  constructor(e) {
    super(`[GoogleGenerativeAI Error]: ${e}`);
  }
}
class Dm extends Cs {
  constructor(e, n) {
    super(e), this.response = n;
  }
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const rL = "https://generativelanguage.googleapis.com", iL = "v1", sL = "0.2.1", oL = "genai-js";
var Mr;
(function(t) {
  t.GENERATE_CONTENT = "generateContent", t.STREAM_GENERATE_CONTENT = "streamGenerateContent", t.COUNT_TOKENS = "countTokens", t.EMBED_CONTENT = "embedContent", t.BATCH_EMBED_CONTENTS = "batchEmbedContents";
})(Mr || (Mr = {}));
class Ks {
  constructor(e, n, r, i) {
    this.model = e, this.task = n, this.apiKey = r, this.stream = i;
  }
  toString() {
    let e = `${rL}/${iL}/${this.model}:${this.task}`;
    return this.stream && (e += "?alt=sse"), e;
  }
}
function aL() {
  return `${oL}/${sL}`;
}
async function Hs(t, e, n) {
  let r;
  try {
    if (r = await fetch(t.toString(), Object.assign(Object.assign({}, cL(n)), { method: "POST", headers: {
      "Content-Type": "application/json",
      "x-goog-api-client": aL(),
      "x-goog-api-key": t.apiKey
    }, body: e })), !r.ok) {
      let i = "";
      try {
        const s = await r.json();
        i = s.error.message, s.error.details && (i += ` ${JSON.stringify(s.error.details)}`);
      } catch {
      }
      throw new Error(`[${r.status} ${r.statusText}] ${i}`);
    }
  } catch (i) {
    const s = new Cs(`Error fetching from ${t.toString()}: ${i.message}`);
    throw s.stack = i.stack, s;
  }
  return r;
}
function cL(t) {
  const e = {};
  if ((t == null ? void 0 : t.timeout) >= 0) {
    const n = new AbortController(), r = n.signal;
    setTimeout(() => n.abort(), t.timeout), e.signal = r;
  }
  return e;
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Of(t) {
  return t.text = () => {
    if (t.candidates && t.candidates.length > 0) {
      if (t.candidates.length > 1 && console.warn(`This response had ${t.candidates.length} candidates. Returning text from the first candidate only. Access response.candidates directly to use the other candidates.`), gw(t.candidates[0]))
        throw new Dm(`${ga(t)}`, t);
      return uL(t);
    } else if (t.promptFeedback)
      throw new Dm(`Text not available. ${ga(t)}`, t);
    return "";
  }, t;
}
function uL(t) {
  var e, n, r, i;
  return !((i = (r = (n = (e = t.candidates) === null || e === void 0 ? void 0 : e[0].content) === null || n === void 0 ? void 0 : n.parts) === null || r === void 0 ? void 0 : r[0]) === null || i === void 0) && i.text ? t.candidates[0].content.parts[0].text : "";
}
const lL = [ma.RECITATION, ma.SAFETY];
function gw(t) {
  return !!t.finishReason && lL.includes(t.finishReason);
}
function ga(t) {
  var e, n, r;
  let i = "";
  if ((!t.candidates || t.candidates.length === 0) && t.promptFeedback)
    i += "Response was blocked", !((e = t.promptFeedback) === null || e === void 0) && e.blockReason && (i += ` due to ${t.promptFeedback.blockReason}`), !((n = t.promptFeedback) === null || n === void 0) && n.blockReasonMessage && (i += `: ${t.promptFeedback.blockReasonMessage}`);
  else if (!((r = t.candidates) === null || r === void 0) && r[0]) {
    const s = t.candidates[0];
    gw(s) && (i += `Candidate was blocked due to ${s.finishReason}`, s.finishMessage && (i += `: ${s.finishMessage}`));
  }
  return i;
}
function Ps(t) {
  return this instanceof Ps ? (this.v = t, this) : new Ps(t);
}
function fL(t, e, n) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var r = n.apply(t, e || []), i, s = [];
  return i = {}, o("next"), o("throw"), o("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function o(y) {
    r[y] && (i[y] = function(b) {
      return new Promise(function(S, C) {
        s.push([y, b, S, C]) > 1 || a(y, b);
      });
    });
  }
  function a(y, b) {
    try {
      u(r[y](b));
    } catch (S) {
      f(s[0][3], S);
    }
  }
  function u(y) {
    y.value instanceof Ps ? Promise.resolve(y.value.v).then(l, h) : f(s[0][2], y);
  }
  function l(y) {
    a("next", y);
  }
  function h(y) {
    a("throw", y);
  }
  function f(y, b) {
    y(b), s.shift(), s.length && a(s[0][0], s[0][1]);
  }
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Nm = /^data\: (.*)(?:\n\n|\r\r|\r\n\r\n)/;
function hL(t) {
  const e = t.body.pipeThrough(new TextDecoderStream("utf8", { fatal: !0 })), n = mL(e), [r, i] = n.tee();
  return {
    stream: pL(r),
    response: dL(i)
  };
}
async function dL(t) {
  const e = [], n = t.getReader();
  for (; ; ) {
    const { done: r, value: i } = await n.read();
    if (r)
      return Of(gL(e));
    e.push(i);
  }
}
function pL(t) {
  return fL(this, arguments, function* () {
    const n = t.getReader();
    for (; ; ) {
      const { value: r, done: i } = yield Ps(n.read());
      if (i)
        break;
      yield yield Ps(Of(r));
    }
  });
}
function mL(t) {
  const e = t.getReader();
  return new ReadableStream({
    start(r) {
      let i = "";
      return s();
      function s() {
        return e.read().then(({ value: o, done: a }) => {
          if (a) {
            if (i.trim()) {
              r.error(new Cs("Failed to parse stream"));
              return;
            }
            r.close();
            return;
          }
          i += o;
          let u = i.match(Nm), l;
          for (; u; ) {
            try {
              l = JSON.parse(u[1]);
            } catch {
              r.error(new Cs(`Error parsing JSON response: "${u[1]}"`));
              return;
            }
            r.enqueue(l), i = i.substring(u[0].length), u = i.match(Nm);
          }
          return s();
        });
      }
    }
  });
}
function gL(t) {
  const e = t[t.length - 1], n = {
    promptFeedback: e == null ? void 0 : e.promptFeedback
  };
  for (const r of t)
    if (r.candidates)
      for (const i of r.candidates) {
        const s = i.index;
        if (n.candidates || (n.candidates = []), n.candidates[s] || (n.candidates[s] = {
          index: i.index
        }), n.candidates[s].citationMetadata = i.citationMetadata, n.candidates[s].finishReason = i.finishReason, n.candidates[s].finishMessage = i.finishMessage, n.candidates[s].safetyRatings = i.safetyRatings, i.content && i.content.parts) {
          n.candidates[s].content || (n.candidates[s].content = {
            role: i.content.role || "user",
            parts: [{ text: "" }]
          });
          for (const o of i.content.parts)
            o.text && (n.candidates[s].content.parts[0].text += o.text);
        }
      }
  return n;
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function yw(t, e, n, r) {
  const i = new Ks(
    e,
    Mr.STREAM_GENERATE_CONTENT,
    t,
    /* stream */
    !0
  ), s = await Hs(i, JSON.stringify(n), r);
  return hL(s);
}
async function vw(t, e, n, r) {
  const i = new Ks(
    e,
    Mr.GENERATE_CONTENT,
    t,
    /* stream */
    !1
  ), o = await (await Hs(i, JSON.stringify(n), r)).json();
  return {
    response: Of(o)
  };
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function hs(t, e) {
  let n = [];
  if (typeof t == "string")
    n = [{ text: t }];
  else
    for (const r of t)
      typeof r == "string" ? n.push({ text: r }) : n.push(r);
  return { role: e, parts: n };
}
function nu(t) {
  return t.contents ? t : { contents: [hs(t, "user")] };
}
function yL(t) {
  return typeof t == "string" || Array.isArray(t) ? { content: hs(t, "user") } : t;
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const xm = "SILENT_ERROR";
class vL {
  constructor(e, n, r, i) {
    this.model = n, this.params = r, this.requestOptions = i, this._history = [], this._sendPromise = Promise.resolve(), this._apiKey = e, r != null && r.history && (this._history = r.history.map((s) => {
      if (!s.role)
        throw new Error("Missing role for history item: " + JSON.stringify(s));
      return hs(s.parts, s.role);
    }));
  }
  /**
   * Gets the chat history so far. Blocked prompts are not added to history.
   * Blocked candidates are not added to history, nor are the prompts that
   * generated them.
   */
  async getHistory() {
    return await this._sendPromise, this._history;
  }
  /**
   * Sends a chat message and receives a non-streaming
   * {@link GenerateContentResult}
   */
  async sendMessage(e) {
    var n, r;
    await this._sendPromise;
    const i = hs(e, "user"), s = {
      safetySettings: (n = this.params) === null || n === void 0 ? void 0 : n.safetySettings,
      generationConfig: (r = this.params) === null || r === void 0 ? void 0 : r.generationConfig,
      contents: [...this._history, i]
    };
    let o;
    return this._sendPromise = this._sendPromise.then(() => vw(this._apiKey, this.model, s, this.requestOptions)).then((a) => {
      var u;
      if (a.response.candidates && a.response.candidates.length > 0) {
        this._history.push(i);
        const l = Object.assign({
          parts: [],
          // Response seems to come back without a role set.
          role: "model"
        }, (u = a.response.candidates) === null || u === void 0 ? void 0 : u[0].content);
        this._history.push(l);
      } else {
        const l = ga(a.response);
        l && console.warn(`sendMessage() was unsuccessful. ${l}. Inspect response object for details.`);
      }
      o = a;
    }), await this._sendPromise, o;
  }
  /**
   * Sends a chat message and receives the response as a
   * {@link GenerateContentStreamResult} containing an iterable stream
   * and a response promise.
   */
  async sendMessageStream(e) {
    var n, r;
    await this._sendPromise;
    const i = hs(e, "user"), s = {
      safetySettings: (n = this.params) === null || n === void 0 ? void 0 : n.safetySettings,
      generationConfig: (r = this.params) === null || r === void 0 ? void 0 : r.generationConfig,
      contents: [...this._history, i]
    }, o = yw(this._apiKey, this.model, s, this.requestOptions);
    return this._sendPromise = this._sendPromise.then(() => o).catch((a) => {
      throw new Error(xm);
    }).then((a) => a.response).then((a) => {
      if (a.candidates && a.candidates.length > 0) {
        this._history.push(i);
        const u = Object.assign({}, a.candidates[0].content);
        u.role || (u.role = "model"), this._history.push(u);
      } else {
        const u = ga(a);
        u && console.warn(`sendMessageStream() was unsuccessful. ${u}. Inspect response object for details.`);
      }
    }).catch((a) => {
      a.message !== xm && console.error(a);
    }), o;
  }
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function _L(t, e, n, r) {
  const i = new Ks(e, Mr.COUNT_TOKENS, t, !1);
  return (await Hs(i, JSON.stringify(Object.assign(Object.assign({}, n), { model: e })), r)).json();
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function wL(t, e, n, r) {
  const i = new Ks(e, Mr.EMBED_CONTENT, t, !1);
  return (await Hs(i, JSON.stringify(n), r)).json();
}
async function EL(t, e, n, r) {
  const i = new Ks(e, Mr.BATCH_EMBED_CONTENTS, t, !1), s = n.requests.map((a) => Object.assign(Object.assign({}, a), { model: e }));
  return (await Hs(i, JSON.stringify({ requests: s }), r)).json();
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class bL {
  constructor(e, n, r) {
    this.apiKey = e, n.model.includes("/") ? this.model = n.model : this.model = `models/${n.model}`, this.generationConfig = n.generationConfig || {}, this.safetySettings = n.safetySettings || [], this.requestOptions = r || {};
  }
  /**
   * Makes a single non-streaming call to the model
   * and returns an object containing a single {@link GenerateContentResponse}.
   */
  async generateContent(e) {
    const n = nu(e);
    return vw(this.apiKey, this.model, Object.assign({ generationConfig: this.generationConfig, safetySettings: this.safetySettings }, n), this.requestOptions);
  }
  /**
   * Makes a single streaming call to the model
   * and returns an object containing an iterable stream that iterates
   * over all chunks in the streaming response as well as
   * a promise that returns the final aggregated response.
   */
  async generateContentStream(e) {
    const n = nu(e);
    return yw(this.apiKey, this.model, Object.assign({ generationConfig: this.generationConfig, safetySettings: this.safetySettings }, n), this.requestOptions);
  }
  /**
   * Gets a new {@link ChatSession} instance which can be used for
   * multi-turn chats.
   */
  startChat(e) {
    return new vL(this.apiKey, this.model, e, this.requestOptions);
  }
  /**
   * Counts the tokens in the provided request.
   */
  async countTokens(e) {
    const n = nu(e);
    return _L(this.apiKey, this.model, n);
  }
  /**
   * Embeds the provided content.
   */
  async embedContent(e) {
    const n = yL(e);
    return wL(this.apiKey, this.model, n);
  }
  /**
   * Embeds an array of {@link EmbedContentRequest}s.
   */
  async batchEmbedContents(e) {
    return EL(this.apiKey, this.model, e, this.requestOptions);
  }
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class TL {
  constructor(e) {
    this.apiKey = e;
  }
  /**
   * Gets a {@link GenerativeModel} instance for the provided model name.
   */
  getGenerativeModel(e, n) {
    if (!e.model)
      throw new Cs("Must provide a model name. Example: genai.getGenerativeModel({ model: 'my-model-name' })");
    return new bL(this.apiKey, e, n);
  }
}
const xV = ({ model: t = "gemini-pro" }) => ne.useMemo(() => {
  const n = "AIzaSyDQE3JFkJBf10uy1r77i07E2IClXOBWorc";
  return new TL(n).getGenerativeModel({ model: t });
}, [t]);
pe.plugin(EE);
function LV(t, e = [], n) {
  const r = _t(null);
  return ne.useEffect(() => (t().then(r.set), () => {
    n == null || n(e);
  }), e), r.get;
}
function bi(t, e = [], n = () => {
}) {
  const r = _t(!0);
  return ne.useEffect(() => (r.set(!0), t().then().finally(() => {
    r.set(!1);
  }), () => n(e)), e), r.get;
}
function _t(t) {
  const [e, n] = ne.useState(t);
  return {
    get: e,
    set: n
  };
}
function Lm(t, e, n = (r) => r) {
  const r = _t(n(t)), i = ne.useDeferredValue(r.get);
  return ne.useEffect(() => {
    e(i);
  }, [i]), ne.useEffect(() => {
    r.set(n(t));
  }, [t]), r;
}
function MV(t, e = [], n = 1e3) {
  const r = _t(null), i = _t(!1);
  return ne.useEffect(() => {
    const s = new ya();
    return i.set(!0), s.start(n).then(() => {
      r.set(t()), i.set(!1);
    }), () => {
      s.clear(), i.set(!1);
    };
  }, [...e, n]), [i.get, r.get];
}
function IL(t, e = [], n = 1e3) {
  const r = _t(!1);
  return ne.useEffect(() => {
    const i = new ya();
    r.set(!0);
    let s;
    return i.start(n).then(async () => {
      s = t(), s instanceof Promise && await s, r.set(!1);
    }), () => {
      i.clear(), typeof s == "function" && s(), r.set(!1);
    };
  }, [...e, n]), r.get;
}
const VV = (t, e = []) => {
  const n = _t("ready"), r = _t(null), i = _t(null);
  return bi(async () => {
    if (n.get == "idle") {
      n.set("loading");
      try {
        const s = await t();
        r.set(s), i.set(null), n.set("success");
      } catch (s) {
        r.set(null), i.set(s), n.set("error");
      }
    }
  }, [n.get, ...e]), {
    status: n,
    data: r,
    error: i
  };
};
function SL(t) {
  const e = Zt.getOne(t);
  return ne.useMemo(() => e || null, [e]);
}
function AL() {
  const t = Zt.getAll();
  return ne.useMemo(() => t.filter(({ private: n = !1 }) => !n), [t]);
}
function FV(t) {
  const e = Zt.getOneFeild(t, "config");
  return ne.useMemo(() => e || null, [e]);
}
function UV() {
  const t = AL(), e = zt.getOneFeild("findConfigurations", "value"), n = ay.getOneFeild("settings.viewType", "focused"), r = ne.useMemo(() => n == "list" ? ps.orderBy(t, "name", "asc") : n ? ps.orderBy(t, "settingId", "asc") : t, [n, t]), i = _w("settings/findBy.enum"), s = ne.useMemo(() => Object.entries(Fm(String(e))).map(([a, u]) => [a, u.join(" ")]), [e]), o = ne.useMemo(() => r.filter((a) => s.every(([u, l]) => {
    var h;
    switch (u) {
      case "id":
        return jn(a.settingId, l);
      case "name":
        return typeof a.name == "string" && jn(a.name, l);
      case "changed":
        return !tr(a.def, a.value);
      case "type": {
        const f = (h = a.settingId.match(/\.[a-z]+$/gi)) == null ? void 0 : h[0].slice(1);
        return typeof f == "string" ? jn(l, f) : !1;
      }
      case "default value":
        return i == "nice" ? jn(iE(a.name, a.desc, a.settingId).join(" "), l) : i && jn(String(a[i]), l);
    }
  })), [s, r, i]);
  return ne.useEffect(() => {
    Gn("configurations.found.length", o.length);
  }, [o]), o;
}
function jV(t, e) {
  Zt.setOneFeild(t, "config", e);
}
function $V(t, e) {
  Zt.setOneFeild(t, "value", e);
}
function _w(t) {
  const e = SL(t);
  return e == null ? void 0 : e.value;
}
function BV(t) {
  const e = Pl.getAll();
  return ne.useMemo(() => ps.join({ commandId: t }, e, "commandId->command"), [t, e]);
}
function ww() {
  const t = Pl.getAll();
  return ne.useMemo(() => t.filter(({ value: e }) => e), [t]);
}
function qV(t) {
  const e = ww();
  return ne.useMemo(() => ps.join({ actionName: t }, e, "actionName->action"), [e]);
}
const zV = (t) => Na.setTemp("settings", t == null ? void 0 : t.toString());
function RL() {
  const t = YS.getAll();
  return ne.useMemo(() => t.filter((e) => !e.private), [t]);
}
function KV() {
  const t = RL(), e = zt.getOneFeild("findConfigurations", "value"), n = ww(), r = ne.useMemo(() => ps.fullJoin(t, n, "commandId->command").map(({ childs: o, data: a }) => ({
    ...a,
    keys: o
  })), [t, n]), i = ne.useMemo(() => {
    if (!e)
      return r;
    const s = Object.entries(Fm(e)).map(([o, a]) => ({
      prop: o,
      value: a.join(" ")
    }));
    return r.filter(({ commandId: o, label: a, keys: u }) => s.every(({ prop: l, value: h }) => {
      switch (l) {
        case "key":
          return jn(u.map(({ value: f }) => f).join(" "), h);
        case "label":
          return jn(a, h);
        case "commandId":
          return o.startsWith(h);
        default:
          return jn([a, ...u.map(({ value: f }) => f)].join(" "), h);
      }
    }));
  }, [e, r]);
  return ne.useEffect(() => {
    Gn("configurations.found.length", i.length);
  }, [i]), i;
}
function HV(t, e = []) {
  const n = Object.entries(t), r = n.map(([, i]) => zt.getOneFeild(i, "value"));
  return ne.useMemo(() => {
    const i = {};
    return n.forEach(([s], o) => {
      const a = r[o];
      i[s] = a;
    }), i;
  }, [...r, ...e]);
}
function GV(t) {
  t.forEach((e) => {
    zt.setOneFeild(e, "value", "");
  });
}
function CL(t) {
  const e = zt.getOne(t);
  ne.useEffect(() => {
    e || zt.add([
      {
        fieldId: t,
        selection: {
          direction: "forward",
          end: 0,
          start: 0
        },
        value: "",
        controls: {}
      }
    ]);
  }, [e]);
}
function PL(t, e) {
  return ne.useMemo(() => {
    if (!e)
      return t || "";
    const r = Math.min(e.start, e.end);
    return (t == null ? void 0 : t.slice(0, r)) || "";
  }, [t, e]);
}
function kL(t, e) {
  return ne.useMemo(() => {
    if (!e)
      return t || "";
    const r = Math.max(e.start, e.end);
    return (t == null ? void 0 : t.slice(r)) || "";
  }, [t, e]);
}
function OL(t, e) {
  return ne.useMemo(() => {
    if (!e)
      return t || "";
    const r = Math.min(e.start, e.end), i = Math.max(e.start, e.end);
    return (t == null ? void 0 : t.slice(r, i)) || "";
  }, [t, e]);
}
function WV(t) {
  t.forEach(CL);
}
function QV(t) {
  const e = zt.getOneFeild(t, "value"), n = zt.getOneFeild(t, "selection");
  return PL(e, n);
}
function YV(t) {
  const e = zt.getOneFeild(t, "value"), n = zt.getOneFeild(t, "selection");
  return kL(e, n);
}
function JV(t) {
  const e = zt.getOneFeild(t, "value"), n = zt.getOneFeild(t, "selection");
  return OL(e, n);
}
function XV(t, e = de.getState()) {
  const n = t.map((r) => {
    const i = e.fields.entities[r], s = Object.keys((i == null ? void 0 : i.controls) || {});
    if (!i || !s.length)
      return {
        response: [],
        isValide: !0
      };
    const o = i.value, a = s.map((u) => o.match(new RegExp(u, "ig")));
    return { response: a, isValide: a.every(Boolean), fieldName: r };
  });
  return {
    controls: n,
    isValide: n.every(({ isValide: r }) => r)
  };
}
function ZV(t, e = "info", n = Et(), r = 5) {
  return AS.add([
    {
      message: t,
      type: e,
      time: r,
      id: n
    }
  ]), n;
}
var DL = /* @__PURE__ */ ((t) => (t[t.short = 5] = "short", t[t.long = 10] = "long", t))(DL || {});
const eF = async () => {
  const t = Et();
  return hr.setTemp("id", t), hr.setTemp("type", "scanQr"), new Promise(async (e) => {
    const n = Ew(
      "object.data.view.result",
      (r) => !!r,
      async ({ object: r }) => {
        var s;
        const i = (s = r.data) == null ? void 0 : s.camera;
        (i == null ? void 0 : i.id) == t && (n(), e(i.result));
      }
    );
  });
};
function tF(t) {
  return new Promise(async (e, n) => {
    var o, a;
    if ((a = (o = de.getState().object.data) == null ? void 0 : o.camera) == null ? void 0 : a.id) {
      n("Camera Is Work Now");
      return;
    }
    const i = Et();
    hr.setTemp("id", i), hr.setTemp("type", t), hr.setTemp("result", null), hr.setTemp("error", null);
    const s = Ew(
      "object.data.camera",
      (u) => !!(u != null && u.result || u != null && u.error),
      async ({ object: u }) => {
        var h;
        const l = (h = u.data) == null ? void 0 : h.camera;
        (l == null ? void 0 : l.id) == i && (l.result ? e(l.result) : n(l.error), ["id", "type", "result"].forEach((f) => {
          hr.setTemp(f, null);
        }), s());
      }
    );
  });
}
function nF() {
  const t = lA.getEntity(), e = _w("window/dark.boolean");
  return ne.useCallback(
    (...n) => {
      const r = {}, i = {};
      if (e == null)
        return i;
      n.forEach((s) => {
        if (s) {
          if (typeof s == "string") {
            r.backgroundColor = s;
            return;
          }
          Object.entries(s).forEach(([o, a]) => {
            if (typeof a == "function") {
              r[o] = a;
              return;
            }
            r[o] = a;
          });
        }
      });
      for (const s in r) {
        const o = r[s];
        if (typeof o == "function")
          i[s] = o(t, e);
        else if (typeof o == "string") {
          const a = t[o];
          a && (i[s] = Df(e, a));
        }
      }
      return i;
    },
    [e, t]
  );
}
function rF(t, ...e) {
  return (n, r) => `linear-gradient(${t} , ${e.filter((i) => n[i]).map((i) => {
    const s = n[i];
    return Df(r, s);
  }).join(" , ")})`;
}
function Df(t, e) {
  return t ? e.dark || e.default : e.light || e.default;
}
function iF(t = []) {
  return (e, n) => t.filter((r) => e[r.colorId]).map(({ colorId: r, x: i = 0, y: s = 0, blur: o = 3, size: a = 1, isInset: u = !1 }) => {
    const l = e[r];
    return `${i}px ${s}px ${o}px ${a}px ${Df(n, l)} ${u ? "inset" : ""}`;
  }).join(" , ");
}
const sl = (t, e, n) => {
  const r = () => {
    const s = de.getState(), { value: o } = va(s, t);
    (typeof e == "function" ? e(o) : o == e) && (i(), n(s));
  }, i = de.subscribe(r);
  return i;
}, Ew = (t, e, n) => {
  const r = () => {
    const i = de.getState(), { value: s, isValide: o } = va(i, t);
    if (!o) {
      rn.warn("Invalid State Dir", t);
      return;
    }
    (typeof e == "function" ? e(s) : s == e) && (n == null || n(i));
  };
  return de.subscribe(r);
}, NL = () => Da("userInfo"), sF = () => {
  const t = xL();
  bi(async () => {
    if (t != null && t.uid && $t.server) {
      const n = fm($t.server.db, "users"), r = hm(n, t.uid), i = {
        photo: t.photoURL,
        phone: t.phoneNumber,
        name: t.displayName,
        email: t.email
      }, s = { ...i, uid: t.uid };
      Gn("userInfo", s), await EN(r, i, { merge: !0 });
    } else
      Gn("userInfo", null);
  }, [t]);
  const e = NL();
  bi(async () => {
    if (t && e) {
      let n = {};
      t.displayName != e.name && (n.displayName = e.name), t.photoURL != e.photo && (n.photoURL = e.photo), await GC(t, n);
    }
  }, [e, t]), ne.useEffect(() => {
    const n = $t.server;
    if (t && n)
      return bN(hm(fm(n.db, "users"), t.uid), (r) => {
        r.exists() && Gn("userInfo", r.data());
      });
  }, [t]);
}, xL = () => {
  var e;
  const t = _t(((e = $t.server) == null ? void 0 : e.auth.currentUser) || null);
  return ne.useEffect(() => {
    var n;
    if ((n = $t.server) != null && n.auth) {
      t.set($t.server.auth.currentUser);
      const r = QC($t.server.auth, t.set), i = Jy($t.server.auth, t.set);
      return () => {
        r(), i();
      };
    }
  }, []), t.get;
}, oF = async () => {
  if (!$t.server)
    throw Error("Server is not initialized");
  mA.setTemp("open", !0), await Vm(1e3);
  const t = document.getElementById("capatcha-view");
  if (!t)
    throw Error("capatcha view element is not exists");
  return new TP($t.server.auth, t);
}, aF = () => {
  Na.setTemp("profile-view", !0);
}, cF = () => {
  Na.setTemp("profile-view", !1);
}, uF = (t) => {
  Na.setTemp("pdf", t);
}, lF = ({ ...t }) => {
  Zt.setOneFeild("visibility/notifays.boolean", "value", !0), vs.add([
    {
      id: Et(),
      buttons: [],
      desc: " - ",
      showDesc: !1,
      removable: !0,
      status: "idle",
      title: "Untitled",
      ...t
    }
  ]);
}, fF = () => {
  const t = Zt.getAll();
  return ne.useMemo(() => t.filter(({ def: e, value: n }) => !tr(e, n)), [t]);
}, hF = (t, e = Et()) => {
  const n = "iframe-" + e;
  return Yo.setTemp("id", n), Yo.setTemp("src", t.toString()), n;
}, dF = () => {
  Yo.setTemp("id", null), Yo.setTemp("src", null);
};
export {
  vV as $,
  xS as A,
  KV as B,
  BV as C,
  Pl as D,
  WV as E,
  Qr as F,
  pM as G,
  vs as H,
  nL as I,
  $V as J,
  Na as K,
  UV as L,
  fF as M,
  lM as N,
  AS as O,
  YS as P,
  Et as Q,
  ZV as R,
  $t as S,
  XV as T,
  lV as U,
  fV as V,
  dV as W,
  $n as X,
  Bn as Y,
  xL as Z,
  VV as _,
  _w as a,
  Lm as a$,
  fm as a0,
  NL as a1,
  EN as a2,
  hm as a3,
  GC as a4,
  EV as a5,
  _V as a6,
  wV as a7,
  tF as a8,
  hV as a9,
  Ld as aA,
  zL as aB,
  UL as aC,
  Nu as aD,
  VM as aE,
  BM as aF,
  nM as aG,
  qM as aH,
  jL as aI,
  gM as aJ,
  SM as aK,
  fM as aL,
  OM as aM,
  qL as aN,
  FM as aO,
  xM as aP,
  GM as aQ,
  ZL as aR,
  sF as aS,
  CS as aT,
  pe as aU,
  hF as aV,
  yV as aW,
  eL as aX,
  uV as aY,
  mS as aZ,
  _a as a_,
  Yo as aa,
  dF as ab,
  cV as ac,
  bi as ad,
  uM as ae,
  Jd as af,
  qS as ag,
  xV as ah,
  NM as ai,
  LV as aj,
  KL as ak,
  GL as al,
  QL as am,
  JL as an,
  sM as ao,
  lA as ap,
  Df as aq,
  Ew as ar,
  MV as as,
  DV as at,
  CM as au,
  LS as av,
  HL as aw,
  WL as ax,
  YL as ay,
  XL as az,
  _t as b,
  Vd as b$,
  SL as b0,
  FV as b1,
  jV as b2,
  qV as b3,
  HV as b4,
  GV as b5,
  PL as b6,
  kL as b7,
  OL as b8,
  QV as b9,
  IV as bA,
  SV as bB,
  AV as bC,
  RV as bD,
  CV as bE,
  PV as bF,
  kV as bG,
  OV as bH,
  NV as bI,
  Ud as bJ,
  hM as bK,
  ZM as bL,
  eV as bM,
  tV as bN,
  nV as bO,
  Xd as bP,
  rV as bQ,
  iV as bR,
  oV as bS,
  aV as bT,
  mA as bU,
  xd as bV,
  $L as bW,
  BL as bX,
  TS as bY,
  Md as bZ,
  eM as b_,
  YV as ba,
  JV as bb,
  DL as bc,
  eF as bd,
  sl as be,
  oF as bf,
  aF as bg,
  cF as bh,
  uF as bi,
  lF as bj,
  DS as bk,
  NS as bl,
  Rr as bm,
  yM as bn,
  vM as bo,
  _M as bp,
  wM as bq,
  EM as br,
  bM as bs,
  TM as bt,
  IM as bu,
  IS as bv,
  hi as bw,
  tL as bx,
  bV as by,
  TV as bz,
  iF as c,
  tM as c0,
  Fd as c1,
  RS as c2,
  rM as c3,
  iM as c4,
  oM as c5,
  aM as c6,
  cM as c7,
  dM as c8,
  jd as c9,
  zM as cA,
  KM as cB,
  HM as cC,
  Oo as cD,
  QM as cE,
  Yd as cF,
  YM as cG,
  pA as cH,
  mM as ca,
  AM as cb,
  $d as cc,
  RM as cd,
  cy as ce,
  uy as cf,
  PM as cg,
  kM as ch,
  Bd as ci,
  DM as cj,
  BS as ck,
  LM as cl,
  qd as cm,
  eA as cn,
  Kd as co,
  vo as cp,
  jM as cq,
  Gd as cr,
  $M as cs,
  HS as ct,
  ly as cu,
  GS as cv,
  QS as cw,
  zd as cx,
  MM as cy,
  Wd as cz,
  JM as d,
  XM as e,
  zt as f,
  hr as g,
  rF as h,
  ww as i,
  RL as j,
  de as k,
  AL as l,
  Da as m,
  nn as n,
  WS as o,
  zV as p,
  Gn as q,
  ko as r,
  Zt as s,
  tA as t,
  nF as u,
  ay as v,
  sV as w,
  CL as x,
  IL as y,
  UM as z
};

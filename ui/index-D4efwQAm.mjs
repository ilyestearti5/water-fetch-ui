var lw = Object.defineProperty;
var hw = (t, e, n) => e in t ? lw(t, e, { enumerable: !0, configurable: !0, writable: !0, value: n }) : t[e] = n;
var On = (t, e, n) => hw(t, typeof e != "symbol" ? e + "" : e, n);
import * as ro from "react";
import re, { useContext as fw, useRef as dw, useCallback as pw, useDebugValue as mw } from "react";
import { ap as mm, D as fa, A as Xn, r as gw, J as Gt, ar as da, a0 as gm, i as zc, S as yw, ao as _w, aq as vw, h as as, as as ym, a2 as Ln, E as ww } from "./index-BclG5w1X.mjs";
import { unstable_batchedUpdates as Ew } from "react-dom";
function pa(t) {
  return t && t.__esModule && Object.prototype.hasOwnProperty.call(t, "default") ? t.default : t;
}
function bw(t) {
  if (t.__esModule) return t;
  var e = t.default;
  if (typeof e == "function") {
    var n = function r() {
      return this instanceof r ? Reflect.construct(e, arguments, this.constructor) : e.apply(this, arguments);
    };
    n.prototype = e.prototype;
  } else n = {};
  return Object.defineProperty(n, "__esModule", { value: !0 }), Object.keys(t).forEach(function(r) {
    var i = Object.getOwnPropertyDescriptor(t, r);
    Object.defineProperty(n, r, i.get ? i : {
      enumerable: !0,
      get: function() {
        return t[r];
      }
    });
  }), n;
}
var _m = {}, yf = globalThis.MutationObserver || globalThis.WebKitMutationObserver, qi;
if (yf) {
  var _f = 0, Tw = new yf(io), vf = globalThis.document.createTextNode("");
  Tw.observe(vf, {
    characterData: !0
  }), qi = function() {
    vf.data = _f = ++_f % 2;
  };
} else if (!globalThis.setImmediate && typeof globalThis.MessageChannel < "u") {
  var wf = new globalThis.MessageChannel();
  wf.port1.onmessage = io, qi = function() {
    wf.port2.postMessage(0);
  };
} else "document" in globalThis && "onreadystatechange" in globalThis.document.createElement("script") ? qi = function() {
  var t = globalThis.document.createElement("script");
  t.onreadystatechange = function() {
    io(), t.onreadystatechange = null, t.parentNode.removeChild(t), t = null;
  }, globalThis.document.documentElement.appendChild(t);
} : qi = function() {
  setTimeout(io, 0);
};
var Kc, zi = [];
function io() {
  Kc = !0;
  for (var t, e, n = zi.length; n; ) {
    for (e = zi, zi = [], t = -1; ++t < n; )
      e[t]();
    n = zi.length;
  }
  Kc = !1;
}
var Iw = Sw;
function Sw(t) {
  zi.push(t) === 1 && !Kc && qi();
}
var Aw = Iw;
function mi() {
}
var wt = {}, vm = ["REJECTED"], Hc = ["FULFILLED"], wm = ["PENDING"], Rw = Or;
function Or(t) {
  if (typeof t != "function")
    throw new TypeError("resolver must be a function");
  this.state = wm, this.queue = [], this.outcome = void 0, t !== mi && Em(this, t);
}
Or.prototype.catch = function(t) {
  return this.then(null, t);
};
Or.prototype.then = function(t, e) {
  if (typeof t != "function" && this.state === Hc || typeof e != "function" && this.state === vm)
    return this;
  var n = new this.constructor(mi);
  if (this.state !== wm) {
    var r = this.state === Hc ? t : e;
    Yu(n, r, this.outcome);
  } else
    this.queue.push(new Ts(n, t, e));
  return n;
};
function Ts(t, e, n) {
  this.promise = t, typeof e == "function" && (this.onFulfilled = e, this.callFulfilled = this.otherCallFulfilled), typeof n == "function" && (this.onRejected = n, this.callRejected = this.otherCallRejected);
}
Ts.prototype.callFulfilled = function(t) {
  wt.resolve(this.promise, t);
};
Ts.prototype.otherCallFulfilled = function(t) {
  Yu(this.promise, this.onFulfilled, t);
};
Ts.prototype.callRejected = function(t) {
  wt.reject(this.promise, t);
};
Ts.prototype.otherCallRejected = function(t) {
  Yu(this.promise, this.onRejected, t);
};
function Yu(t, e, n) {
  Aw(function() {
    var r;
    try {
      r = e(n);
    } catch (i) {
      return wt.reject(t, i);
    }
    r === t ? wt.reject(t, new TypeError("Cannot resolve promise with itself")) : wt.resolve(t, r);
  });
}
wt.resolve = function(t, e) {
  var n = bm(Cw, e);
  if (n.status === "error")
    return wt.reject(t, n.value);
  var r = n.value;
  if (r)
    Em(t, r);
  else {
    t.state = Hc, t.outcome = e;
    for (var i = -1, s = t.queue.length; ++i < s; )
      t.queue[i].callFulfilled(e);
  }
  return t;
};
wt.reject = function(t, e) {
  t.state = vm, t.outcome = e;
  for (var n = -1, r = t.queue.length; ++n < r; )
    t.queue[n].callRejected(e);
  return t;
};
function Cw(t) {
  var e = t && t.then;
  if (t && (typeof t == "object" || typeof t == "function") && typeof e == "function")
    return function() {
      e.apply(t, arguments);
    };
}
function Em(t, e) {
  var n = !1;
  function r(c) {
    n || (n = !0, wt.reject(t, c));
  }
  function i(c) {
    n || (n = !0, wt.resolve(t, c));
  }
  function s() {
    e(i, r);
  }
  var o = bm(s);
  o.status === "error" && r(o.value);
}
function bm(t, e) {
  var n = {};
  try {
    n.value = t(e), n.status = "success";
  } catch (r) {
    n.status = "error", n.value = r;
  }
  return n;
}
Or.resolve = Pw;
function Pw(t) {
  return t instanceof this ? t : wt.resolve(new this(mi), t);
}
Or.reject = kw;
function kw(t) {
  var e = new this(mi);
  return wt.reject(e, t);
}
Or.all = Ow;
function Ow(t) {
  var e = this;
  if (Object.prototype.toString.call(t) !== "[object Array]")
    return this.reject(new TypeError("must be an array"));
  var n = t.length, r = !1;
  if (!n)
    return this.resolve([]);
  for (var i = new Array(n), s = 0, o = -1, c = new this(mi); ++o < n; )
    u(t[o], o);
  return c;
  function u(l, f) {
    e.resolve(l).then(h, function(_) {
      r || (r = !0, wt.reject(c, _));
    });
    function h(_) {
      i[f] = _, ++s === n && !r && (r = !0, wt.resolve(c, i));
    }
  }
}
Or.race = Nw;
function Nw(t) {
  var e = this;
  if (Object.prototype.toString.call(t) !== "[object Array]")
    return this.reject(new TypeError("must be an array"));
  var n = t.length, r = !1;
  if (!n)
    return this.resolve([]);
  for (var i = -1, s = new this(mi); ++i < n; )
    o(t[i]);
  return s;
  function o(c) {
    e.resolve(c).then(function(u) {
      r || (r = !0, wt.resolve(s, u));
    }, function(u) {
      r || (r = !0, wt.reject(s, u));
    });
  }
}
const Dw = /* @__PURE__ */ pa(Rw);
var xw = typeof Promise == "function" ? Promise : Dw;
const Lw = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: xw
}, Symbol.toStringTag, { value: "Module" })), Mw = /* @__PURE__ */ bw(Lw);
(function(t) {
  var e = Mw;
  function n(i, s, o) {
    return typeof s != "string" ? e.reject(new Error("doc id is required")) : i.get(s).catch(function(c) {
      if (c.status !== 404)
        throw c;
      return {};
    }).then(function(c) {
      var u = c._rev, l = o(c);
      return l ? (l._id = s, l._rev = u, r(i, l, o)) : { updated: !1, rev: u, id: s };
    });
  }
  function r(i, s, o) {
    return i.put(s).then(function(c) {
      return {
        updated: !0,
        rev: c.rev,
        id: s._id
      };
    }, function(c) {
      if (c.status !== 409)
        throw c;
      return n(i, s._id, o);
    });
  }
  t.upsert = function(s, o, c) {
    var u = this, l = n(u, s, o);
    if (typeof c != "function")
      return l;
    l.then(function(f) {
      c(null, f);
    }, c);
  }, t.putIfNotExists = function(s, o, c) {
    var u = this;
    typeof s != "string" && (c = o, o = s, s = o._id);
    var l = function(h) {
      return h._rev ? !1 : o;
    }, f = n(u, s, l);
    if (typeof c != "function")
      return f;
    f.then(function(h) {
      c(null, h);
    }, c);
  }, typeof window < "u" && window.PouchDB && window.PouchDB.plugin(t);
})(_m);
const Vw = /* @__PURE__ */ pa(_m);
var Tm = { exports: {} };
(function(t, e) {
  (function(n) {
    t.exports = n();
  })(function(n) {
    var r = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
    function i(y, E) {
      var p = y[0], g = y[1], w = y[2], S = y[3];
      p += (g & w | ~g & S) + E[0] - 680876936 | 0, p = (p << 7 | p >>> 25) + g | 0, S += (p & g | ~p & w) + E[1] - 389564586 | 0, S = (S << 12 | S >>> 20) + p | 0, w += (S & p | ~S & g) + E[2] + 606105819 | 0, w = (w << 17 | w >>> 15) + S | 0, g += (w & S | ~w & p) + E[3] - 1044525330 | 0, g = (g << 22 | g >>> 10) + w | 0, p += (g & w | ~g & S) + E[4] - 176418897 | 0, p = (p << 7 | p >>> 25) + g | 0, S += (p & g | ~p & w) + E[5] + 1200080426 | 0, S = (S << 12 | S >>> 20) + p | 0, w += (S & p | ~S & g) + E[6] - 1473231341 | 0, w = (w << 17 | w >>> 15) + S | 0, g += (w & S | ~w & p) + E[7] - 45705983 | 0, g = (g << 22 | g >>> 10) + w | 0, p += (g & w | ~g & S) + E[8] + 1770035416 | 0, p = (p << 7 | p >>> 25) + g | 0, S += (p & g | ~p & w) + E[9] - 1958414417 | 0, S = (S << 12 | S >>> 20) + p | 0, w += (S & p | ~S & g) + E[10] - 42063 | 0, w = (w << 17 | w >>> 15) + S | 0, g += (w & S | ~w & p) + E[11] - 1990404162 | 0, g = (g << 22 | g >>> 10) + w | 0, p += (g & w | ~g & S) + E[12] + 1804603682 | 0, p = (p << 7 | p >>> 25) + g | 0, S += (p & g | ~p & w) + E[13] - 40341101 | 0, S = (S << 12 | S >>> 20) + p | 0, w += (S & p | ~S & g) + E[14] - 1502002290 | 0, w = (w << 17 | w >>> 15) + S | 0, g += (w & S | ~w & p) + E[15] + 1236535329 | 0, g = (g << 22 | g >>> 10) + w | 0, p += (g & S | w & ~S) + E[1] - 165796510 | 0, p = (p << 5 | p >>> 27) + g | 0, S += (p & w | g & ~w) + E[6] - 1069501632 | 0, S = (S << 9 | S >>> 23) + p | 0, w += (S & g | p & ~g) + E[11] + 643717713 | 0, w = (w << 14 | w >>> 18) + S | 0, g += (w & p | S & ~p) + E[0] - 373897302 | 0, g = (g << 20 | g >>> 12) + w | 0, p += (g & S | w & ~S) + E[5] - 701558691 | 0, p = (p << 5 | p >>> 27) + g | 0, S += (p & w | g & ~w) + E[10] + 38016083 | 0, S = (S << 9 | S >>> 23) + p | 0, w += (S & g | p & ~g) + E[15] - 660478335 | 0, w = (w << 14 | w >>> 18) + S | 0, g += (w & p | S & ~p) + E[4] - 405537848 | 0, g = (g << 20 | g >>> 12) + w | 0, p += (g & S | w & ~S) + E[9] + 568446438 | 0, p = (p << 5 | p >>> 27) + g | 0, S += (p & w | g & ~w) + E[14] - 1019803690 | 0, S = (S << 9 | S >>> 23) + p | 0, w += (S & g | p & ~g) + E[3] - 187363961 | 0, w = (w << 14 | w >>> 18) + S | 0, g += (w & p | S & ~p) + E[8] + 1163531501 | 0, g = (g << 20 | g >>> 12) + w | 0, p += (g & S | w & ~S) + E[13] - 1444681467 | 0, p = (p << 5 | p >>> 27) + g | 0, S += (p & w | g & ~w) + E[2] - 51403784 | 0, S = (S << 9 | S >>> 23) + p | 0, w += (S & g | p & ~g) + E[7] + 1735328473 | 0, w = (w << 14 | w >>> 18) + S | 0, g += (w & p | S & ~p) + E[12] - 1926607734 | 0, g = (g << 20 | g >>> 12) + w | 0, p += (g ^ w ^ S) + E[5] - 378558 | 0, p = (p << 4 | p >>> 28) + g | 0, S += (p ^ g ^ w) + E[8] - 2022574463 | 0, S = (S << 11 | S >>> 21) + p | 0, w += (S ^ p ^ g) + E[11] + 1839030562 | 0, w = (w << 16 | w >>> 16) + S | 0, g += (w ^ S ^ p) + E[14] - 35309556 | 0, g = (g << 23 | g >>> 9) + w | 0, p += (g ^ w ^ S) + E[1] - 1530992060 | 0, p = (p << 4 | p >>> 28) + g | 0, S += (p ^ g ^ w) + E[4] + 1272893353 | 0, S = (S << 11 | S >>> 21) + p | 0, w += (S ^ p ^ g) + E[7] - 155497632 | 0, w = (w << 16 | w >>> 16) + S | 0, g += (w ^ S ^ p) + E[10] - 1094730640 | 0, g = (g << 23 | g >>> 9) + w | 0, p += (g ^ w ^ S) + E[13] + 681279174 | 0, p = (p << 4 | p >>> 28) + g | 0, S += (p ^ g ^ w) + E[0] - 358537222 | 0, S = (S << 11 | S >>> 21) + p | 0, w += (S ^ p ^ g) + E[3] - 722521979 | 0, w = (w << 16 | w >>> 16) + S | 0, g += (w ^ S ^ p) + E[6] + 76029189 | 0, g = (g << 23 | g >>> 9) + w | 0, p += (g ^ w ^ S) + E[9] - 640364487 | 0, p = (p << 4 | p >>> 28) + g | 0, S += (p ^ g ^ w) + E[12] - 421815835 | 0, S = (S << 11 | S >>> 21) + p | 0, w += (S ^ p ^ g) + E[15] + 530742520 | 0, w = (w << 16 | w >>> 16) + S | 0, g += (w ^ S ^ p) + E[2] - 995338651 | 0, g = (g << 23 | g >>> 9) + w | 0, p += (w ^ (g | ~S)) + E[0] - 198630844 | 0, p = (p << 6 | p >>> 26) + g | 0, S += (g ^ (p | ~w)) + E[7] + 1126891415 | 0, S = (S << 10 | S >>> 22) + p | 0, w += (p ^ (S | ~g)) + E[14] - 1416354905 | 0, w = (w << 15 | w >>> 17) + S | 0, g += (S ^ (w | ~p)) + E[5] - 57434055 | 0, g = (g << 21 | g >>> 11) + w | 0, p += (w ^ (g | ~S)) + E[12] + 1700485571 | 0, p = (p << 6 | p >>> 26) + g | 0, S += (g ^ (p | ~w)) + E[3] - 1894986606 | 0, S = (S << 10 | S >>> 22) + p | 0, w += (p ^ (S | ~g)) + E[10] - 1051523 | 0, w = (w << 15 | w >>> 17) + S | 0, g += (S ^ (w | ~p)) + E[1] - 2054922799 | 0, g = (g << 21 | g >>> 11) + w | 0, p += (w ^ (g | ~S)) + E[8] + 1873313359 | 0, p = (p << 6 | p >>> 26) + g | 0, S += (g ^ (p | ~w)) + E[15] - 30611744 | 0, S = (S << 10 | S >>> 22) + p | 0, w += (p ^ (S | ~g)) + E[6] - 1560198380 | 0, w = (w << 15 | w >>> 17) + S | 0, g += (S ^ (w | ~p)) + E[13] + 1309151649 | 0, g = (g << 21 | g >>> 11) + w | 0, p += (w ^ (g | ~S)) + E[4] - 145523070 | 0, p = (p << 6 | p >>> 26) + g | 0, S += (g ^ (p | ~w)) + E[11] - 1120210379 | 0, S = (S << 10 | S >>> 22) + p | 0, w += (p ^ (S | ~g)) + E[2] + 718787259 | 0, w = (w << 15 | w >>> 17) + S | 0, g += (S ^ (w | ~p)) + E[9] - 343485551 | 0, g = (g << 21 | g >>> 11) + w | 0, y[0] = p + y[0] | 0, y[1] = g + y[1] | 0, y[2] = w + y[2] | 0, y[3] = S + y[3] | 0;
    }
    function s(y) {
      var E = [], p;
      for (p = 0; p < 64; p += 4)
        E[p >> 2] = y.charCodeAt(p) + (y.charCodeAt(p + 1) << 8) + (y.charCodeAt(p + 2) << 16) + (y.charCodeAt(p + 3) << 24);
      return E;
    }
    function o(y) {
      var E = [], p;
      for (p = 0; p < 64; p += 4)
        E[p >> 2] = y[p] + (y[p + 1] << 8) + (y[p + 2] << 16) + (y[p + 3] << 24);
      return E;
    }
    function c(y) {
      var E = y.length, p = [1732584193, -271733879, -1732584194, 271733878], g, w, S, R, T, A;
      for (g = 64; g <= E; g += 64)
        i(p, s(y.substring(g - 64, g)));
      for (y = y.substring(g - 64), w = y.length, S = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], g = 0; g < w; g += 1)
        S[g >> 2] |= y.charCodeAt(g) << (g % 4 << 3);
      if (S[g >> 2] |= 128 << (g % 4 << 3), g > 55)
        for (i(p, S), g = 0; g < 16; g += 1)
          S[g] = 0;
      return R = E * 8, R = R.toString(16).match(/(.*?)(.{0,8})$/), T = parseInt(R[2], 16), A = parseInt(R[1], 16) || 0, S[14] = T, S[15] = A, i(p, S), p;
    }
    function u(y) {
      var E = y.length, p = [1732584193, -271733879, -1732584194, 271733878], g, w, S, R, T, A;
      for (g = 64; g <= E; g += 64)
        i(p, o(y.subarray(g - 64, g)));
      for (y = g - 64 < E ? y.subarray(g - 64) : new Uint8Array(0), w = y.length, S = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], g = 0; g < w; g += 1)
        S[g >> 2] |= y[g] << (g % 4 << 3);
      if (S[g >> 2] |= 128 << (g % 4 << 3), g > 55)
        for (i(p, S), g = 0; g < 16; g += 1)
          S[g] = 0;
      return R = E * 8, R = R.toString(16).match(/(.*?)(.{0,8})$/), T = parseInt(R[2], 16), A = parseInt(R[1], 16) || 0, S[14] = T, S[15] = A, i(p, S), p;
    }
    function l(y) {
      var E = "", p;
      for (p = 0; p < 4; p += 1)
        E += r[y >> p * 8 + 4 & 15] + r[y >> p * 8 & 15];
      return E;
    }
    function f(y) {
      var E;
      for (E = 0; E < y.length; E += 1)
        y[E] = l(y[E]);
      return y.join("");
    }
    f(c("hello")), typeof ArrayBuffer < "u" && !ArrayBuffer.prototype.slice && function() {
      function y(E, p) {
        return E = E | 0 || 0, E < 0 ? Math.max(E + p, 0) : Math.min(E, p);
      }
      ArrayBuffer.prototype.slice = function(E, p) {
        var g = this.byteLength, w = y(E, g), S = g, R, T, A, O;
        return p !== n && (S = y(p, g)), w > S ? new ArrayBuffer(0) : (R = S - w, T = new ArrayBuffer(R), A = new Uint8Array(T), O = new Uint8Array(this, w, R), A.set(O), T);
      };
    }();
    function h(y) {
      return /[\u0080-\uFFFF]/.test(y) && (y = unescape(encodeURIComponent(y))), y;
    }
    function _(y, E) {
      var p = y.length, g = new ArrayBuffer(p), w = new Uint8Array(g), S;
      for (S = 0; S < p; S += 1)
        w[S] = y.charCodeAt(S);
      return E ? w : g;
    }
    function b(y) {
      return String.fromCharCode.apply(null, new Uint8Array(y));
    }
    function I(y, E, p) {
      var g = new Uint8Array(y.byteLength + E.byteLength);
      return g.set(new Uint8Array(y)), g.set(new Uint8Array(E), y.byteLength), g;
    }
    function C(y) {
      var E = [], p = y.length, g;
      for (g = 0; g < p - 1; g += 2)
        E.push(parseInt(y.substr(g, 2), 16));
      return String.fromCharCode.apply(String, E);
    }
    function m() {
      this.reset();
    }
    return m.prototype.append = function(y) {
      return this.appendBinary(h(y)), this;
    }, m.prototype.appendBinary = function(y) {
      this._buff += y, this._length += y.length;
      var E = this._buff.length, p;
      for (p = 64; p <= E; p += 64)
        i(this._hash, s(this._buff.substring(p - 64, p)));
      return this._buff = this._buff.substring(p - 64), this;
    }, m.prototype.end = function(y) {
      var E = this._buff, p = E.length, g, w = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], S;
      for (g = 0; g < p; g += 1)
        w[g >> 2] |= E.charCodeAt(g) << (g % 4 << 3);
      return this._finish(w, p), S = f(this._hash), y && (S = C(S)), this.reset(), S;
    }, m.prototype.reset = function() {
      return this._buff = "", this._length = 0, this._hash = [1732584193, -271733879, -1732584194, 271733878], this;
    }, m.prototype.getState = function() {
      return {
        buff: this._buff,
        length: this._length,
        hash: this._hash.slice()
      };
    }, m.prototype.setState = function(y) {
      return this._buff = y.buff, this._length = y.length, this._hash = y.hash, this;
    }, m.prototype.destroy = function() {
      delete this._hash, delete this._buff, delete this._length;
    }, m.prototype._finish = function(y, E) {
      var p = E, g, w, S;
      if (y[p >> 2] |= 128 << (p % 4 << 3), p > 55)
        for (i(this._hash, y), p = 0; p < 16; p += 1)
          y[p] = 0;
      g = this._length * 8, g = g.toString(16).match(/(.*?)(.{0,8})$/), w = parseInt(g[2], 16), S = parseInt(g[1], 16) || 0, y[14] = w, y[15] = S, i(this._hash, y);
    }, m.hash = function(y, E) {
      return m.hashBinary(h(y), E);
    }, m.hashBinary = function(y, E) {
      var p = c(y), g = f(p);
      return E ? C(g) : g;
    }, m.ArrayBuffer = function() {
      this.reset();
    }, m.ArrayBuffer.prototype.append = function(y) {
      var E = I(this._buff.buffer, y), p = E.length, g;
      for (this._length += y.byteLength, g = 64; g <= p; g += 64)
        i(this._hash, o(E.subarray(g - 64, g)));
      return this._buff = g - 64 < p ? new Uint8Array(E.buffer.slice(g - 64)) : new Uint8Array(0), this;
    }, m.ArrayBuffer.prototype.end = function(y) {
      var E = this._buff, p = E.length, g = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], w, S;
      for (w = 0; w < p; w += 1)
        g[w >> 2] |= E[w] << (w % 4 << 3);
      return this._finish(g, p), S = f(this._hash), y && (S = C(S)), this.reset(), S;
    }, m.ArrayBuffer.prototype.reset = function() {
      return this._buff = new Uint8Array(0), this._length = 0, this._hash = [1732584193, -271733879, -1732584194, 271733878], this;
    }, m.ArrayBuffer.prototype.getState = function() {
      var y = m.prototype.getState.call(this);
      return y.buff = b(y.buff), y;
    }, m.ArrayBuffer.prototype.setState = function(y) {
      return y.buff = _(y.buff, !0), m.prototype.setState.call(this, y);
    }, m.ArrayBuffer.prototype.destroy = m.prototype.destroy, m.ArrayBuffer.prototype._finish = m.prototype._finish, m.ArrayBuffer.hash = function(y, E) {
      var p = u(new Uint8Array(y)), g = f(p);
      return E ? C(g) : g;
    }, m;
  });
})(Tm);
var Fw = Tm.exports;
const Gc = /* @__PURE__ */ pa(Fw);
var so, Uw = new Uint8Array(16);
function jw() {
  if (!so && (so = typeof crypto < "u" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto < "u" && typeof msCrypto.getRandomValues == "function" && msCrypto.getRandomValues.bind(msCrypto), !so))
    throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
  return so(Uw);
}
const Bw = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
function $w(t) {
  return typeof t == "string" && Bw.test(t);
}
var it = [];
for (var cc = 0; cc < 256; ++cc)
  it.push((cc + 256).toString(16).substr(1));
function qw(t) {
  var e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, n = (it[t[e + 0]] + it[t[e + 1]] + it[t[e + 2]] + it[t[e + 3]] + "-" + it[t[e + 4]] + it[t[e + 5]] + "-" + it[t[e + 6]] + it[t[e + 7]] + "-" + it[t[e + 8]] + it[t[e + 9]] + "-" + it[t[e + 10]] + it[t[e + 11]] + it[t[e + 12]] + it[t[e + 13]] + it[t[e + 14]] + it[t[e + 15]]).toLowerCase();
  if (!$w(n))
    throw TypeError("Stringified UUID is invalid");
  return n;
}
function Ju(t, e, n) {
  t = t || {};
  var r = t.random || (t.rng || jw)();
  if (r[6] = r[6] & 15 | 64, r[8] = r[8] & 63 | 128, e) {
    n = n || 0;
    for (var i = 0; i < 16; ++i)
      e[n + i] = r[i];
    return e;
  }
  return qw(r);
}
var ma = {};
ma.stringify = function(e) {
  var n = [];
  n.push({ obj: e });
  for (var r = "", i, s, o, c, u, l, f, h, _, b, I; i = n.pop(); )
    if (s = i.obj, o = i.prefix || "", c = i.val || "", r += o, c)
      r += c;
    else if (typeof s != "object")
      r += typeof s > "u" ? null : JSON.stringify(s);
    else if (s === null)
      r += "null";
    else if (Array.isArray(s)) {
      for (n.push({ val: "]" }), u = s.length - 1; u >= 0; u--)
        l = u === 0 ? "" : ",", n.push({ obj: s[u], prefix: l });
      n.push({ val: "[" });
    } else {
      f = [];
      for (h in s)
        s.hasOwnProperty(h) && f.push(h);
      for (n.push({ val: "}" }), u = f.length - 1; u >= 0; u--)
        _ = f[u], b = s[_], I = u > 0 ? "," : "", I += JSON.stringify(_) + ":", n.push({ obj: b, prefix: I });
      n.push({ val: "{" });
    }
  return r;
};
function jr(t, e, n) {
  var r = n[n.length - 1];
  t === r.element && (n.pop(), r = n[n.length - 1]);
  var i = r.element, s = r.index;
  if (Array.isArray(i))
    i.push(t);
  else if (s === e.length - 2) {
    var o = e.pop();
    i[o] = t;
  } else
    e.push(t);
}
ma.parse = function(t) {
  for (var e = [], n = [], r = 0, i, s, o, c, u, l, f, h, _; ; ) {
    if (i = t[r++], i === "}" || i === "]" || typeof i > "u") {
      if (e.length === 1)
        return e.pop();
      jr(e.pop(), e, n);
      continue;
    }
    switch (i) {
      case " ":
      case "	":
      case `
`:
      case ":":
      case ",":
        break;
      case "n":
        r += 3, jr(null, e, n);
        break;
      case "t":
        r += 3, jr(!0, e, n);
        break;
      case "f":
        r += 4, jr(!1, e, n);
        break;
      case "0":
      case "1":
      case "2":
      case "3":
      case "4":
      case "5":
      case "6":
      case "7":
      case "8":
      case "9":
      case "-":
        for (s = "", r--; ; )
          if (o = t[r++], /[\d\.\-e\+]/.test(o))
            s += o;
          else {
            r--;
            break;
          }
        jr(parseFloat(s), e, n);
        break;
      case '"':
        for (c = "", u = void 0, l = 0; f = t[r++], f !== '"' || u === "\\" && l % 2 === 1; )
          c += f, u = f, u === "\\" ? l++ : l = 0;
        jr(JSON.parse('"' + c + '"'), e, n);
        break;
      case "[":
        h = { element: [], index: e.length }, e.push(h.element), n.push(h);
        break;
      case "{":
        _ = { element: {}, index: e.length }, e.push(_.element), n.push(_);
        break;
      default:
        throw new Error(
          "unexpectedly reached end of input: " + i
        );
    }
  }
};
var Xu = { exports: {} }, Wr = typeof Reflect == "object" ? Reflect : null, Ef = Wr && typeof Wr.apply == "function" ? Wr.apply : function(e, n, r) {
  return Function.prototype.apply.call(e, n, r);
}, bo;
Wr && typeof Wr.ownKeys == "function" ? bo = Wr.ownKeys : Object.getOwnPropertySymbols ? bo = function(e) {
  return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e));
} : bo = function(e) {
  return Object.getOwnPropertyNames(e);
};
function zw(t) {
  console && console.warn && console.warn(t);
}
var Im = Number.isNaN || function(e) {
  return e !== e;
};
function ke() {
  ke.init.call(this);
}
Xu.exports = ke;
Xu.exports.once = Ww;
ke.EventEmitter = ke;
ke.prototype._events = void 0;
ke.prototype._eventsCount = 0;
ke.prototype._maxListeners = void 0;
var bf = 10;
function ga(t) {
  if (typeof t != "function")
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof t);
}
Object.defineProperty(ke, "defaultMaxListeners", {
  enumerable: !0,
  get: function() {
    return bf;
  },
  set: function(t) {
    if (typeof t != "number" || t < 0 || Im(t))
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + t + ".");
    bf = t;
  }
});
ke.init = function() {
  (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) && (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
};
ke.prototype.setMaxListeners = function(e) {
  if (typeof e != "number" || e < 0 || Im(e))
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e + ".");
  return this._maxListeners = e, this;
};
function Sm(t) {
  return t._maxListeners === void 0 ? ke.defaultMaxListeners : t._maxListeners;
}
ke.prototype.getMaxListeners = function() {
  return Sm(this);
};
ke.prototype.emit = function(e) {
  for (var n = [], r = 1; r < arguments.length; r++) n.push(arguments[r]);
  var i = e === "error", s = this._events;
  if (s !== void 0)
    i = i && s.error === void 0;
  else if (!i)
    return !1;
  if (i) {
    var o;
    if (n.length > 0 && (o = n[0]), o instanceof Error)
      throw o;
    var c = new Error("Unhandled error." + (o ? " (" + o.message + ")" : ""));
    throw c.context = o, c;
  }
  var u = s[e];
  if (u === void 0)
    return !1;
  if (typeof u == "function")
    Ef(u, this, n);
  else
    for (var l = u.length, f = km(u, l), r = 0; r < l; ++r)
      Ef(f[r], this, n);
  return !0;
};
function Am(t, e, n, r) {
  var i, s, o;
  if (ga(n), s = t._events, s === void 0 ? (s = t._events = /* @__PURE__ */ Object.create(null), t._eventsCount = 0) : (s.newListener !== void 0 && (t.emit(
    "newListener",
    e,
    n.listener ? n.listener : n
  ), s = t._events), o = s[e]), o === void 0)
    o = s[e] = n, ++t._eventsCount;
  else if (typeof o == "function" ? o = s[e] = r ? [n, o] : [o, n] : r ? o.unshift(n) : o.push(n), i = Sm(t), i > 0 && o.length > i && !o.warned) {
    o.warned = !0;
    var c = new Error("Possible EventEmitter memory leak detected. " + o.length + " " + String(e) + " listeners added. Use emitter.setMaxListeners() to increase limit");
    c.name = "MaxListenersExceededWarning", c.emitter = t, c.type = e, c.count = o.length, zw(c);
  }
  return t;
}
ke.prototype.addListener = function(e, n) {
  return Am(this, e, n, !1);
};
ke.prototype.on = ke.prototype.addListener;
ke.prototype.prependListener = function(e, n) {
  return Am(this, e, n, !0);
};
function Kw() {
  if (!this.fired)
    return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
}
function Rm(t, e, n) {
  var r = { fired: !1, wrapFn: void 0, target: t, type: e, listener: n }, i = Kw.bind(r);
  return i.listener = n, r.wrapFn = i, i;
}
ke.prototype.once = function(e, n) {
  return ga(n), this.on(e, Rm(this, e, n)), this;
};
ke.prototype.prependOnceListener = function(e, n) {
  return ga(n), this.prependListener(e, Rm(this, e, n)), this;
};
ke.prototype.removeListener = function(e, n) {
  var r, i, s, o, c;
  if (ga(n), i = this._events, i === void 0)
    return this;
  if (r = i[e], r === void 0)
    return this;
  if (r === n || r.listener === n)
    --this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : (delete i[e], i.removeListener && this.emit("removeListener", e, r.listener || n));
  else if (typeof r != "function") {
    for (s = -1, o = r.length - 1; o >= 0; o--)
      if (r[o] === n || r[o].listener === n) {
        c = r[o].listener, s = o;
        break;
      }
    if (s < 0)
      return this;
    s === 0 ? r.shift() : Hw(r, s), r.length === 1 && (i[e] = r[0]), i.removeListener !== void 0 && this.emit("removeListener", e, c || n);
  }
  return this;
};
ke.prototype.off = ke.prototype.removeListener;
ke.prototype.removeAllListeners = function(e) {
  var n, r, i;
  if (r = this._events, r === void 0)
    return this;
  if (r.removeListener === void 0)
    return arguments.length === 0 ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : r[e] !== void 0 && (--this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : delete r[e]), this;
  if (arguments.length === 0) {
    var s = Object.keys(r), o;
    for (i = 0; i < s.length; ++i)
      o = s[i], o !== "removeListener" && this.removeAllListeners(o);
    return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
  }
  if (n = r[e], typeof n == "function")
    this.removeListener(e, n);
  else if (n !== void 0)
    for (i = n.length - 1; i >= 0; i--)
      this.removeListener(e, n[i]);
  return this;
};
function Cm(t, e, n) {
  var r = t._events;
  if (r === void 0)
    return [];
  var i = r[e];
  return i === void 0 ? [] : typeof i == "function" ? n ? [i.listener || i] : [i] : n ? Gw(i) : km(i, i.length);
}
ke.prototype.listeners = function(e) {
  return Cm(this, e, !0);
};
ke.prototype.rawListeners = function(e) {
  return Cm(this, e, !1);
};
ke.listenerCount = function(t, e) {
  return typeof t.listenerCount == "function" ? t.listenerCount(e) : Pm.call(t, e);
};
ke.prototype.listenerCount = Pm;
function Pm(t) {
  var e = this._events;
  if (e !== void 0) {
    var n = e[t];
    if (typeof n == "function")
      return 1;
    if (n !== void 0)
      return n.length;
  }
  return 0;
}
ke.prototype.eventNames = function() {
  return this._eventsCount > 0 ? bo(this._events) : [];
};
function km(t, e) {
  for (var n = new Array(e), r = 0; r < e; ++r)
    n[r] = t[r];
  return n;
}
function Hw(t, e) {
  for (; e + 1 < t.length; e++)
    t[e] = t[e + 1];
  t.pop();
}
function Gw(t) {
  for (var e = new Array(t.length), n = 0; n < e.length; ++n)
    e[n] = t[n].listener || t[n];
  return e;
}
function Ww(t, e) {
  return new Promise(function(n, r) {
    function i(o) {
      t.removeListener(e, s), r(o);
    }
    function s() {
      typeof t.removeListener == "function" && t.removeListener("error", i), n([].slice.call(arguments));
    }
    Om(t, e, s, { once: !0 }), e !== "error" && Qw(t, i, { once: !0 });
  });
}
function Qw(t, e, n) {
  typeof t.on == "function" && Om(t, "error", e, n);
}
function Om(t, e, n, r) {
  if (typeof t.on == "function")
    r.once ? t.once(e, n) : t.on(e, n);
  else if (typeof t.addEventListener == "function")
    t.addEventListener(e, function i(s) {
      r.once && t.removeEventListener(e, i), n(s);
    });
  else
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof t);
}
var Yw = Xu.exports;
const bn = /* @__PURE__ */ pa(Yw);
function Jw(t) {
  return typeof ArrayBuffer < "u" && t instanceof ArrayBuffer || typeof Blob < "u" && t instanceof Blob;
}
function Xw(t) {
  return t instanceof ArrayBuffer ? t.slice(0) : t.slice(0, t.size, t.type);
}
var Nm = Function.prototype.toString, Zw = Nm.call(Object);
function eE(t) {
  var e = Object.getPrototypeOf(t);
  if (e === null)
    return !0;
  var n = e.constructor;
  return typeof n == "function" && n instanceof n && Nm.call(n) == Zw;
}
function Ze(t) {
  var e, n, r;
  if (!t || typeof t != "object")
    return t;
  if (Array.isArray(t)) {
    for (e = [], n = 0, r = t.length; n < r; n++)
      e[n] = Ze(t[n]);
    return e;
  }
  if (t instanceof Date && isFinite(t))
    return t.toISOString();
  if (Jw(t))
    return Xw(t);
  if (!eE(t))
    return t;
  e = {};
  for (n in t)
    if (Object.prototype.hasOwnProperty.call(t, n)) {
      var i = Ze(t[n]);
      typeof i < "u" && (e[n] = i);
    }
  return e;
}
function Dm(t) {
  var e = !1;
  return function(...n) {
    if (e)
      throw new Error("once called more than once");
    e = !0, t.apply(this, n);
  };
}
function xm(t) {
  return function(...e) {
    e = Ze(e);
    var n = this, r = typeof e[e.length - 1] == "function" ? e.pop() : !1, i = new Promise(function(s, o) {
      var c;
      try {
        var u = Dm(function(l, f) {
          l ? o(l) : s(f);
        });
        e.push(u), c = t.apply(n, e), c && typeof c.then == "function" && s(c);
      } catch (l) {
        o(l);
      }
    });
    return r && i.then(function(s) {
      r(null, s);
    }, r), i;
  };
}
function tE(t, e, n) {
  if (t.constructor.listeners("debug").length) {
    for (var r = ["api", t.name, e], i = 0; i < n.length - 1; i++)
      r.push(n[i]);
    t.constructor.emit("debug", r);
    var s = n[n.length - 1];
    n[n.length - 1] = function(o, c) {
      var u = ["api", t.name, e];
      u = u.concat(
        o ? ["error", o] : ["success", c]
      ), t.constructor.emit("debug", u), s(o, c);
    };
  }
}
function ze(t, e) {
  return xm(function(...n) {
    if (this._closed)
      return Promise.reject(new Error("database is closed"));
    if (this._destroyed)
      return Promise.reject(new Error("database is destroyed"));
    var r = this;
    return tE(r, t, n), this.taskqueue.isReady ? e.apply(this, n) : new Promise(function(i, s) {
      r.taskqueue.addTask(function(o) {
        o ? s(o) : i(r[t].apply(r, n));
      });
    });
  });
}
function Is(t, e) {
  for (var n = {}, r = 0, i = e.length; r < i; r++) {
    var s = e[r];
    s in t && (n[s] = t[s]);
  }
  return n;
}
var nE = 6;
function Tf(t) {
  return t;
}
function rE(t) {
  return [{
    ok: t
  }];
}
function Lm(t, e, n) {
  var r = e.docs, i = /* @__PURE__ */ new Map();
  r.forEach(function(C) {
    i.has(C.id) ? i.get(C.id).push(C) : i.set(C.id, [C]);
  });
  var s = i.size, o = 0, c = new Array(s);
  function u() {
    var C = [];
    c.forEach(function(m) {
      m.docs.forEach(function(y) {
        C.push({
          id: m.id,
          docs: [y]
        });
      });
    }), n(null, { results: C });
  }
  function l() {
    ++o === s && u();
  }
  function f(C, m, y) {
    c[C] = { id: m, docs: y }, l();
  }
  var h = [];
  i.forEach(function(C, m) {
    h.push(m);
  });
  var _ = 0;
  function b() {
    if (!(_ >= h.length)) {
      var C = Math.min(_ + nE, h.length), m = h.slice(_, C);
      I(m, _), _ += m.length;
    }
  }
  function I(C, m) {
    C.forEach(function(y, E) {
      var p = m + E, g = i.get(y), w = Is(g[0], ["atts_since", "attachments"]);
      w.open_revs = g.map(function(R) {
        return R.rev;
      }), w.open_revs = w.open_revs.filter(Tf);
      var S = Tf;
      w.open_revs.length === 0 && (delete w.open_revs, S = rE), ["revs", "attachments", "binary", "ajax", "latest"].forEach(function(R) {
        R in e && (w[R] = e[R]);
      }), t.get(y, w, function(R, T) {
        var A;
        R ? A = [{ error: R }] : A = S(T), f(p, y, A), b();
      });
    });
  }
  b();
}
var Wc;
try {
  localStorage.setItem("_pouch_check_localstorage", 1), Wc = !!localStorage.getItem("_pouch_check_localstorage");
} catch {
  Wc = !1;
}
function Vo() {
  return Wc;
}
const an = typeof queueMicrotask == "function" ? queueMicrotask : function(e) {
  Promise.resolve().then(e);
};
class iE extends bn {
  constructor() {
    super(), this._listeners = {}, Vo() && addEventListener("storage", (e) => {
      this.emit(e.key);
    });
  }
  addListener(e, n, r, i) {
    if (this._listeners[n])
      return;
    var s = !1, o = this;
    function c() {
      if (!o._listeners[n])
        return;
      if (s) {
        s = "waiting";
        return;
      }
      s = !0;
      var u = Is(i, [
        "style",
        "include_docs",
        "attachments",
        "conflicts",
        "filter",
        "doc_ids",
        "view",
        "since",
        "query_params",
        "binary",
        "return_docs"
      ]);
      function l() {
        s = !1;
      }
      r.changes(u).on("change", function(f) {
        f.seq > i.since && !i.cancelled && (i.since = f.seq, i.onChange(f));
      }).on("complete", function() {
        s === "waiting" && an(c), s = !1;
      }).on("error", l);
    }
    this._listeners[n] = c, this.on(e, c);
  }
  removeListener(e, n) {
    n in this._listeners && (super.removeListener(e, this._listeners[n]), delete this._listeners[n]);
  }
  notifyLocalWindows(e) {
    Vo() && (localStorage[e] = localStorage[e] === "a" ? "b" : "a");
  }
  notify(e) {
    this.emit(e), this.notifyLocalWindows(e);
  }
}
function jt(t) {
  if (typeof console < "u" && typeof console[t] == "function") {
    var e = Array.prototype.slice.call(arguments, 1);
    console[t].apply(console, e);
  }
}
function sE(t, e) {
  var n = 6e5;
  t = parseInt(t, 10) || 0, e = parseInt(e, 10), e !== e || e <= t ? e = (t || 1) << 1 : e = e + 1, e > n && (t = n >> 1, e = n);
  var r = Math.random(), i = e - t;
  return ~~(i * r + t);
}
function oE(t) {
  var e = 0;
  return t || (e = 2e3), sE(t, e);
}
function Qc(t, e) {
  jt("info", "The above " + t + " is totally normal. " + e);
}
class Le extends Error {
  constructor(e, n, r) {
    super(), this.status = e, this.name = n, this.message = r, this.error = !0;
  }
  toString() {
    return JSON.stringify({
      status: this.status,
      name: this.name,
      message: this.message,
      reason: this.reason
    });
  }
}
new Le(401, "unauthorized", "Name or password is incorrect.");
var aE = new Le(400, "bad_request", "Missing JSON list of 'docs'"), Mt = new Le(404, "not_found", "missing"), ti = new Le(409, "conflict", "Document update conflict"), Mm = new Le(400, "bad_request", "_id field must contain a string"), cE = new Le(412, "missing_id", "_id is required for puts"), uE = new Le(400, "bad_request", "Only reserved document ids may start with underscore.");
new Le(412, "precondition_failed", "Database not open");
var Zu = new Le(500, "unknown_error", "Database encountered an unknown error"), Vm = new Le(500, "badarg", "Some query argument is invalid");
new Le(400, "invalid_request", "Request was invalid");
var lE = new Le(400, "query_parse_error", "Some query parameter is invalid"), If = new Le(500, "doc_validation", "Bad special document member"), ya = new Le(400, "bad_request", "Something wrong with the request"), uc = new Le(400, "bad_request", "Document must be a JSON object");
new Le(404, "not_found", "Database not found");
var el = new Le(500, "indexed_db_went_bad", "unknown");
new Le(500, "web_sql_went_bad", "unknown");
new Le(500, "levelDB_went_went_bad", "unknown");
new Le(403, "forbidden", "Forbidden by design doc validate_doc_update function");
var To = new Le(400, "bad_request", "Invalid rev format");
new Le(412, "file_exists", "The database could not be created, the file already exists.");
var hE = new Le(412, "missing_stub", "A pre-existing attachment stub wasn't found");
new Le(413, "invalid_url", "Provided URL is invalid");
function le(t, e) {
  function n(r) {
    for (var i = Object.getOwnPropertyNames(t), s = 0, o = i.length; s < o; s++)
      typeof t[i[s]] != "function" && (this[i[s]] = t[i[s]]);
    this.stack === void 0 && (this.stack = new Error().stack), r !== void 0 && (this.reason = r);
  }
  return n.prototype = Le.prototype, new n(e);
}
function ni(t) {
  if (typeof t != "object") {
    var e = t;
    t = Zu, t.data = e;
  }
  return "error" in t && t.error === "conflict" && (t.name = "conflict", t.status = 409), "name" in t || (t.name = t.error || "unknown"), "status" in t || (t.status = 500), "message" in t || (t.message = t.message || t.reason), "stack" in t || (t.stack = new Error().stack), t;
}
function fE(t, e, n) {
  try {
    return !t(e, n);
  } catch (i) {
    var r = "Filter function threw: " + i.toString();
    return le(ya, r);
  }
}
function tl(t) {
  var e = {}, n = t.filter && typeof t.filter == "function";
  return e.query = t.query_params, function(i) {
    i.doc || (i.doc = {});
    var s = n && fE(t.filter, i.doc, e);
    if (typeof s == "object")
      return s;
    if (s)
      return !1;
    if (!t.include_docs)
      delete i.doc;
    else if (!t.attachments)
      for (var o in i.doc._attachments)
        Object.prototype.hasOwnProperty.call(i.doc._attachments, o) && (i.doc._attachments[o].stub = !0);
    return !0;
  };
}
function Fm(t) {
  var e;
  if (t ? typeof t != "string" ? e = le(Mm) : /^_/.test(t) && !/^_(design|local)/.test(t) && (e = le(uE)) : e = le(cE), e)
    throw e;
}
function tn(t) {
  return typeof t._remote == "boolean" ? t._remote : typeof t.type == "function" ? (jt(
    "warn",
    "db.type() is deprecated and will be removed in a future version of PouchDB"
  ), t.type() === "http") : !1;
}
function dE(t, e) {
  return "listenerCount" in t ? t.listenerCount(e) : bn.listenerCount(t, e);
}
function Yc(t) {
  if (!t)
    return null;
  var e = t.split("/");
  return e.length === 2 ? e : e.length === 1 ? [t, t] : null;
}
function Sf(t) {
  var e = Yc(t);
  return e ? e.join("/") : null;
}
var Af = [
  "source",
  "protocol",
  "authority",
  "userInfo",
  "user",
  "password",
  "host",
  "port",
  "relative",
  "path",
  "directory",
  "file",
  "query",
  "anchor"
], Rf = "queryKey", pE = /(?:^|&)([^&=]*)=?([^&]*)/g, mE = /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
function Um(t) {
  for (var e = mE.exec(t), n = {}, r = 14; r--; ) {
    var i = Af[r], s = e[r] || "", o = ["user", "password"].indexOf(i) !== -1;
    n[i] = o ? decodeURIComponent(s) : s;
  }
  return n[Rf] = {}, n[Af[12]].replace(pE, function(c, u, l) {
    u && (n[Rf][u] = l);
  }), n;
}
function nl(t, e) {
  var n = [], r = [];
  for (var i in e)
    Object.prototype.hasOwnProperty.call(e, i) && (n.push(i), r.push(e[i]));
  return n.push(t), Function.apply(null, n).apply(null, r);
}
function Fo(t, e, n) {
  return t.get(e).catch(function(r) {
    if (r.status !== 404)
      throw r;
    return {};
  }).then(function(r) {
    var i = r._rev, s = n(r);
    return s ? (s._id = e, s._rev = i, gE(t, s, n)) : { updated: !1, rev: i };
  });
}
function gE(t, e, n) {
  return t.put(e).then(function(r) {
    return {
      updated: !0,
      rev: r.rev
    };
  }, function(r) {
    if (r.status !== 409)
      throw r;
    return Fo(t, e._id, n);
  });
}
var rl = function(t) {
  return atob(t);
}, Ss = function(t) {
  return btoa(t);
};
function il(t, e) {
  t = t || [], e = e || {};
  try {
    return new Blob(t, e);
  } catch (s) {
    if (s.name !== "TypeError")
      throw s;
    for (var n = typeof BlobBuilder < "u" ? BlobBuilder : typeof MSBlobBuilder < "u" ? MSBlobBuilder : typeof MozBlobBuilder < "u" ? MozBlobBuilder : WebKitBlobBuilder, r = new n(), i = 0; i < t.length; i += 1)
      r.append(t[i]);
    return r.getBlob(e.type);
  }
}
function yE(t) {
  for (var e = t.length, n = new ArrayBuffer(e), r = new Uint8Array(n), i = 0; i < e; i++)
    r[i] = t.charCodeAt(i);
  return n;
}
function sl(t, e) {
  return il([yE(t)], { type: e });
}
function ol(t, e) {
  return sl(rl(t), e);
}
function _E(t) {
  for (var e = "", n = new Uint8Array(t), r = n.byteLength, i = 0; i < r; i++)
    e += String.fromCharCode(n[i]);
  return e;
}
function jm(t, e) {
  var n = new FileReader(), r = typeof n.readAsBinaryString == "function";
  n.onloadend = function(i) {
    var s = i.target.result || "";
    if (r)
      return e(s);
    e(_E(s));
  }, r ? n.readAsBinaryString(t) : n.readAsArrayBuffer(t);
}
function Bm(t, e) {
  jm(t, function(n) {
    e(n);
  });
}
function al(t, e) {
  Bm(t, function(n) {
    e(Ss(n));
  });
}
function vE(t, e) {
  var n = new FileReader();
  n.onloadend = function(r) {
    var i = r.target.result || new ArrayBuffer(0);
    e(i);
  }, n.readAsArrayBuffer(t);
}
var wE = self.setImmediate || self.setTimeout, EE = 32768;
function bE(t) {
  return Ss(t);
}
function TE(t, e, n, r, i) {
  (n > 0 || r < e.size) && (e = e.slice(n, r)), vE(e, function(s) {
    t.append(s), i();
  });
}
function IE(t, e, n, r, i) {
  (n > 0 || r < e.length) && (e = e.substring(n, r)), t.appendBinary(e), i();
}
function cl(t, e) {
  var n = typeof t == "string", r = n ? t.length : t.size, i = Math.min(EE, r), s = Math.ceil(r / i), o = 0, c = n ? new Gc() : new Gc.ArrayBuffer(), u = n ? IE : TE;
  function l() {
    wE(h);
  }
  function f() {
    var _ = c.end(!0), b = bE(_);
    e(b), c.destroy();
  }
  function h() {
    var _ = o * i, b = _ + i;
    o++, o < s ? u(c, t, _, b, l) : u(c, t, _, b, f);
  }
  h();
}
function $m(t) {
  return Gc.hash(t);
}
function qm(t, e) {
  if (!e)
    return Ju().replace(/-/g, "").toLowerCase();
  var n = Object.assign({}, t);
  return delete n._rev_tree, $m(JSON.stringify(n));
}
var _a = Ju;
function _r(t) {
  for (var e, n, r, i = t.rev_tree.slice(), s; s = i.pop(); ) {
    var o = s.ids, c = o[2], u = s.pos;
    if (c.length) {
      for (var l = 0, f = c.length; l < f; l++)
        i.push({ pos: u + 1, ids: c[l] });
      continue;
    }
    var h = !!o[1].deleted, _ = o[0];
    (!e || (r !== h ? r : n !== u ? n < u : e < _)) && (e = _, n = u, r = h);
  }
  return n + "-" + e;
}
function vr(t, e) {
  for (var n = t.slice(), r; r = n.pop(); )
    for (var i = r.pos, s = r.ids, o = s[2], c = e(o.length === 0, i, s[0], r.ctx, s[1]), u = 0, l = o.length; u < l; u++)
      n.push({ pos: i + 1, ids: o[u], ctx: c });
}
function SE(t, e) {
  return t.pos - e.pos;
}
function ul(t) {
  var e = [];
  vr(t, function(i, s, o, c, u) {
    i && e.push({ rev: s + "-" + o, pos: s, opts: u });
  }), e.sort(SE).reverse();
  for (var n = 0, r = e.length; n < r; n++)
    delete e[n].pos;
  return e;
}
function ll(t) {
  for (var e = _r(t), n = ul(t.rev_tree), r = [], i = 0, s = n.length; i < s; i++) {
    var o = n[i];
    o.rev !== e && !o.opts.deleted && r.push(o.rev);
  }
  return r;
}
function AE(t) {
  var e = [];
  return vr(t.rev_tree, function(n, r, i, s, o) {
    o.status === "available" && !n && (e.push(r + "-" + i), o.status = "missing");
  }), e;
}
function RE(t, e) {
  let n = [];
  const r = t.slice();
  let i;
  for (; i = r.pop(); ) {
    const { pos: s, ids: o } = i, c = `${s}-${o[0]}`, u = o[2];
    if (n.push(c), c === e) {
      if (u.length !== 0)
        throw new Error("The requested revision is not a leaf");
      return n.reverse();
    }
    (u.length === 0 || u.length > 1) && (n = []);
    for (let l = 0, f = u.length; l < f; l++)
      r.push({ pos: s + 1, ids: u[l] });
  }
  if (n.length === 0)
    throw new Error("The requested revision does not exist");
  return n.reverse();
}
function zm(t) {
  for (var e = [], n = t.slice(), r; r = n.pop(); ) {
    var i = r.pos, s = r.ids, o = s[0], c = s[1], u = s[2], l = u.length === 0, f = r.history ? r.history.slice() : [];
    f.push({ id: o, opts: c }), l && e.push({ pos: i + 1 - f.length, ids: f });
    for (var h = 0, _ = u.length; h < _; h++)
      n.push({ pos: i + 1, ids: u[h], history: f });
  }
  return e.reverse();
}
function CE(t, e) {
  return t.pos - e.pos;
}
function PE(t, e, n) {
  for (var r = 0, i = t.length, s; r < i; )
    s = r + i >>> 1, n(t[s], e) < 0 ? r = s + 1 : i = s;
  return r;
}
function kE(t, e, n) {
  var r = PE(t, e, n);
  t.splice(r, 0, e);
}
function Cf(t, e) {
  for (var n, r, i = e, s = t.length; i < s; i++) {
    var o = t[i], c = [o.id, o.opts, []];
    r ? (r[2].push(c), r = c) : n = r = c;
  }
  return n;
}
function OE(t, e) {
  return t[0] < e[0] ? -1 : 1;
}
function Pf(t, e) {
  for (var n = [{ tree1: t, tree2: e }], r = !1; n.length > 0; ) {
    var i = n.pop(), s = i.tree1, o = i.tree2;
    (s[1].status || o[1].status) && (s[1].status = s[1].status === "available" || o[1].status === "available" ? "available" : "missing");
    for (var c = 0; c < o[2].length; c++) {
      if (!s[2][0]) {
        r = "new_leaf", s[2][0] = o[2][c];
        continue;
      }
      for (var u = !1, l = 0; l < s[2].length; l++)
        s[2][l][0] === o[2][c][0] && (n.push({ tree1: s[2][l], tree2: o[2][c] }), u = !0);
      u || (r = "new_branch", kE(s[2], o[2][c], OE));
    }
  }
  return { conflicts: r, tree: t };
}
function Km(t, e, n) {
  var r = [], i = !1, s = !1, o;
  if (!t.length)
    return { tree: [e], conflicts: "new_leaf" };
  for (var c = 0, u = t.length; c < u; c++) {
    var l = t[c];
    if (l.pos === e.pos && l.ids[0] === e.ids[0])
      o = Pf(l.ids, e.ids), r.push({ pos: l.pos, ids: o.tree }), i = i || o.conflicts, s = !0;
    else if (n !== !0) {
      var f = l.pos < e.pos ? l : e, h = l.pos < e.pos ? e : l, _ = h.pos - f.pos, b = [], I = [];
      for (I.push({ ids: f.ids, diff: _, parent: null, parentIdx: null }); I.length > 0; ) {
        var C = I.pop();
        if (C.diff === 0) {
          C.ids[0] === h.ids[0] && b.push(C);
          continue;
        }
        for (var m = C.ids[2], y = 0, E = m.length; y < E; y++)
          I.push({
            ids: m[y],
            diff: C.diff - 1,
            parent: C.ids,
            parentIdx: y
          });
      }
      var p = b[0];
      p ? (o = Pf(p.ids, h.ids), p.parent[2][p.parentIdx] = o.tree, r.push({ pos: f.pos, ids: f.ids }), i = i || o.conflicts, s = !0) : r.push(l);
    } else
      r.push(l);
  }
  return s || r.push(e), r.sort(CE), {
    tree: r,
    conflicts: i || "internal_node"
  };
}
function NE(t, e) {
  for (var n = zm(t), r, i, s = 0, o = n.length; s < o; s++) {
    var c = n[s], u = c.ids, l;
    if (u.length > e) {
      r || (r = {});
      var f = u.length - e;
      l = {
        pos: c.pos + f,
        ids: Cf(u, f)
      };
      for (var h = 0; h < f; h++) {
        var _ = c.pos + h + "-" + u[h].id;
        r[_] = !0;
      }
    } else
      l = {
        pos: c.pos,
        ids: Cf(u, 0)
      };
    i ? i = Km(i, l, !0).tree : i = [l];
  }
  return r && vr(i, function(b, I, C) {
    delete r[I + "-" + C];
  }), {
    tree: i,
    revs: r ? Object.keys(r) : []
  };
}
function Hm(t, e, n) {
  var r = Km(t, e), i = NE(r.tree, n);
  return {
    tree: i.tree,
    stemmedRevs: i.revs,
    conflicts: r.conflicts
  };
}
function DE(t, e) {
  for (var n = t.slice(), r = e.split("-"), i = parseInt(r[0], 10), s = r[1], o; o = n.pop(); ) {
    if (o.pos === i && o.ids[0] === s)
      return !0;
    for (var c = o.ids[2], u = 0, l = c.length; u < l; u++)
      n.push({ pos: o.pos + 1, ids: c[u] });
  }
  return !1;
}
function xE(t) {
  return t.ids;
}
function gn(t, e) {
  e || (e = _r(t));
  for (var n = e.substring(e.indexOf("-") + 1), r = t.rev_tree.map(xE), i; i = r.pop(); ) {
    if (i[0] === n)
      return !!i[1].deleted;
    r = r.concat(i[2]);
  }
}
function dr(t) {
  return typeof t == "string" && t.startsWith("_local/");
}
function LE(t, e) {
  for (var n = e.rev_tree.slice(), r; r = n.pop(); ) {
    var i = r.pos, s = r.ids, o = s[0], c = s[1], u = s[2], l = u.length === 0, f = r.history ? r.history.slice() : [];
    if (f.push({ id: o, pos: i, opts: c }), l)
      for (var h = 0, _ = f.length; h < _; h++) {
        var b = f[h], I = b.pos + "-" + b.id;
        if (I === t)
          return i + "-" + o;
      }
    for (var C = 0, m = u.length; C < m; C++)
      n.push({ pos: i + 1, ids: u[C], history: f });
  }
  throw new Error("Unable to resolve latest revision for id " + e.id + ", rev " + t);
}
function ME(t, e, n, r) {
  try {
    t.emit("change", e, n, r);
  } catch (i) {
    jt("error", 'Error in .on("change", function):', i);
  }
}
function VE(t, e, n) {
  var r = [{ rev: t._rev }];
  n.style === "all_docs" && (r = ul(e.rev_tree).map(function(s) {
    return { rev: s.rev };
  }));
  var i = {
    id: e.id,
    changes: r,
    doc: t
  };
  return gn(e, t._rev) && (i.deleted = !0), n.conflicts && (i.doc._conflicts = ll(e), i.doc._conflicts.length || delete i.doc._conflicts), i;
}
class FE extends bn {
  constructor(e, n, r) {
    super(), this.db = e, n = n ? Ze(n) : {};
    var i = n.complete = Dm((c, u) => {
      c ? dE(this, "error") > 0 && this.emit("error", c) : this.emit("complete", u), this.removeAllListeners(), e.removeListener("destroyed", s);
    });
    r && (this.on("complete", function(c) {
      r(null, c);
    }), this.on("error", r));
    const s = () => {
      this.cancel();
    };
    e.once("destroyed", s), n.onChange = (c, u, l) => {
      this.isCancelled || ME(this, c, u, l);
    };
    var o = new Promise(function(c, u) {
      n.complete = function(l, f) {
        l ? u(l) : c(f);
      };
    });
    this.once("cancel", function() {
      e.removeListener("destroyed", s), n.complete(null, { status: "cancelled" });
    }), this.then = o.then.bind(o), this.catch = o.catch.bind(o), this.then(function(c) {
      i(null, c);
    }, i), e.taskqueue.isReady ? this.validateChanges(n) : e.taskqueue.addTask((c) => {
      c ? n.complete(c) : this.isCancelled ? this.emit("cancel") : this.validateChanges(n);
    });
  }
  cancel() {
    this.isCancelled = !0, this.db.taskqueue.isReady && this.emit("cancel");
  }
  validateChanges(e) {
    var n = e.complete;
    pe._changesFilterPlugin ? pe._changesFilterPlugin.validate(e, (r) => {
      if (r)
        return n(r);
      this.doChanges(e);
    }) : this.doChanges(e);
  }
  doChanges(e) {
    var n = e.complete;
    if (e = Ze(e), "live" in e && !("continuous" in e) && (e.continuous = e.live), e.processChange = VE, e.since === "latest" && (e.since = "now"), e.since || (e.since = 0), e.since === "now") {
      this.db.info().then((i) => {
        if (this.isCancelled) {
          n(null, { status: "cancelled" });
          return;
        }
        e.since = i.update_seq, this.doChanges(e);
      }, n);
      return;
    }
    if (pe._changesFilterPlugin) {
      if (pe._changesFilterPlugin.normalize(e), pe._changesFilterPlugin.shouldFilter(this, e))
        return pe._changesFilterPlugin.filter(this, e);
    } else
      ["doc_ids", "filter", "selector", "view"].forEach(function(i) {
        i in e && jt(
          "warn",
          'The "' + i + '" option was passed in to changes/replicate, but pouchdb-changes-filter plugin is not installed, so it was ignored. Please install the plugin to enable filtering.'
        );
      });
    "descending" in e || (e.descending = !1), e.limit = e.limit === 0 ? 1 : e.limit, e.complete = n;
    var r = this.db._changes(e);
    if (r && typeof r.cancel == "function") {
      const i = this.cancel;
      this.cancel = (...s) => {
        r.cancel(), i.apply(this, s);
      };
    }
  }
}
function lc(t, e) {
  return function(n, r) {
    n || r[0] && r[0].error ? (n = n || r[0], n.docId = e, t(n)) : t(null, r.length ? r[0] : r);
  };
}
function UE(t) {
  for (var e = 0; e < t.length; e++) {
    var n = t[e];
    if (n._deleted)
      delete n._attachments;
    else if (n._attachments)
      for (var r = Object.keys(n._attachments), i = 0; i < r.length; i++) {
        var s = r[i];
        n._attachments[s] = Is(
          n._attachments[s],
          ["data", "digest", "content_type", "length", "revpos", "stub"]
        );
      }
  }
}
function jE(t, e) {
  if (t._id === e._id) {
    const n = t._revisions ? t._revisions.start : 0, r = e._revisions ? e._revisions.start : 0;
    return n - r;
  }
  return t._id < e._id ? -1 : 1;
}
function BE(t) {
  var e = {}, n = [];
  return vr(t, function(r, i, s, o) {
    var c = i + "-" + s;
    return r && (e[c] = 0), o !== void 0 && n.push({ from: o, to: c }), c;
  }), n.reverse(), n.forEach(function(r) {
    e[r.from] === void 0 ? e[r.from] = 1 + e[r.to] : e[r.from] = Math.min(e[r.from], 1 + e[r.to]);
  }), e;
}
function $E(t) {
  var e = "limit" in t ? t.keys.slice(t.skip, t.limit + t.skip) : t.skip > 0 ? t.keys.slice(t.skip) : t.keys;
  t.keys = e, t.skip = 0, delete t.limit, t.descending && (e.reverse(), t.descending = !1);
}
function Gm(t) {
  var e = t._compactionQueue[0], n = e.opts, r = e.callback;
  t.get("_local/compaction").catch(function() {
    return !1;
  }).then(function(i) {
    i && i.last_seq && (n.last_seq = i.last_seq), t._compact(n, function(s, o) {
      s ? r(s) : r(null, o), an(function() {
        t._compactionQueue.shift(), t._compactionQueue.length && Gm(t);
      });
    });
  });
}
function qE(t, e, n) {
  return t.get("_local/purges").then(function(r) {
    const i = r.purgeSeq + 1;
    return r.purges.push({
      docId: e,
      rev: n,
      purgeSeq: i
    }), r.purges.length > self.purged_infos_limit && r.purges.splice(0, r.purges.length - self.purged_infos_limit), r.purgeSeq = i, r;
  }).catch(function(r) {
    if (r.status !== 404)
      throw r;
    return {
      _id: "_local/purges",
      purges: [{
        docId: e,
        rev: n,
        purgeSeq: 0
      }],
      purgeSeq: 0
    };
  }).then(function(r) {
    return t.put(r);
  });
}
function zE(t) {
  return t.charAt(0) === "_" ? t + " is not a valid attachment name, attachment names cannot start with '_'" : !1;
}
function hc(t) {
  return t === null || typeof t != "object" || Array.isArray(t);
}
const KE = /^\d+-[^-]*$/;
function fc(t) {
  return typeof t == "string" && KE.test(t);
}
class Wm extends bn {
  _setup() {
    this.post = ze("post", function(e, n, r) {
      if (typeof n == "function" && (r = n, n = {}), hc(e))
        return r(le(uc));
      this.bulkDocs({ docs: [e] }, n, lc(r, e._id));
    }).bind(this), this.put = ze("put", function(e, n, r) {
      if (typeof n == "function" && (r = n, n = {}), hc(e))
        return r(le(uc));
      if (Fm(e._id), "_rev" in e && !fc(e._rev))
        return r(le(To));
      if (dr(e._id) && typeof this._putLocal == "function")
        return e._deleted ? this._removeLocal(e, r) : this._putLocal(e, r);
      const i = (o) => {
        typeof this._put == "function" && n.new_edits !== !1 ? this._put(e, n, o) : this.bulkDocs({ docs: [e] }, n, lc(o, e._id));
      };
      n.force && e._rev ? (s(), i(function(o) {
        var c = o ? null : { ok: !0, id: e._id, rev: e._rev };
        r(o, c);
      })) : i(r);
      function s() {
        var o = e._rev.split("-"), c = o[1], u = parseInt(o[0], 10), l = u + 1, f = qm();
        e._revisions = {
          start: l,
          ids: [f, c]
        }, e._rev = l + "-" + f, n.new_edits = !1;
      }
    }).bind(this), this.putAttachment = ze("putAttachment", function(e, n, r, i, s) {
      var o = this;
      typeof s == "function" && (s = i, i = r, r = null), typeof s > "u" && (s = i, i = r, r = null), s || jt("warn", "Attachment", n, "on document", e, "is missing content_type");
      function c(u) {
        var l = "_rev" in u ? parseInt(u._rev, 10) : 0;
        return u._attachments = u._attachments || {}, u._attachments[n] = {
          content_type: s,
          data: i,
          revpos: ++l
        }, o.put(u);
      }
      return o.get(e).then(function(u) {
        if (u._rev !== r)
          throw le(ti);
        return c(u);
      }, function(u) {
        if (u.reason === Mt.message)
          return c({ _id: e });
        throw u;
      });
    }).bind(this), this.removeAttachment = ze("removeAttachment", function(e, n, r, i) {
      this.get(e, (s, o) => {
        if (s) {
          i(s);
          return;
        }
        if (o._rev !== r) {
          i(le(ti));
          return;
        }
        if (!o._attachments)
          return i();
        delete o._attachments[n], Object.keys(o._attachments).length === 0 && delete o._attachments, this.put(o, i);
      });
    }).bind(this), this.remove = ze("remove", function(e, n, r, i) {
      var s;
      typeof n == "string" ? (s = {
        _id: e,
        _rev: n
      }, typeof r == "function" && (i = r, r = {})) : (s = e, typeof n == "function" ? (i = n, r = {}) : (i = r, r = n)), r = r || {}, r.was_delete = !0;
      var o = { _id: s._id, _rev: s._rev || r.rev };
      if (o._deleted = !0, dr(o._id) && typeof this._removeLocal == "function")
        return this._removeLocal(s, i);
      this.bulkDocs({ docs: [o] }, r, lc(i, o._id));
    }).bind(this), this.revsDiff = ze("revsDiff", function(e, n, r) {
      typeof n == "function" && (r = n, n = {});
      var i = Object.keys(e);
      if (!i.length)
        return r(null, {});
      var s = 0, o = /* @__PURE__ */ new Map();
      function c(l, f) {
        o.has(l) || o.set(l, { missing: [] }), o.get(l).missing.push(f);
      }
      function u(l, f) {
        var h = e[l].slice(0);
        vr(f, function(_, b, I, C, m) {
          var y = b + "-" + I, E = h.indexOf(y);
          E !== -1 && (h.splice(E, 1), m.status !== "available" && c(l, y));
        }), h.forEach(function(_) {
          c(l, _);
        });
      }
      i.forEach(function(l) {
        this._getRevisionTree(l, function(f, h) {
          if (f && f.status === 404 && f.message === "missing")
            o.set(l, { missing: e[l] });
          else {
            if (f)
              return r(f);
            u(l, h);
          }
          if (++s === i.length) {
            var _ = {};
            return o.forEach(function(b, I) {
              _[I] = b;
            }), r(null, _);
          }
        });
      }, this);
    }).bind(this), this.bulkGet = ze("bulkGet", function(e, n) {
      Lm(this, e, n);
    }).bind(this), this.compactDocument = ze("compactDocument", function(e, n, r) {
      this._getRevisionTree(e, (i, s) => {
        if (i)
          return r(i);
        var o = BE(s), c = [], u = [];
        Object.keys(o).forEach(function(l) {
          o[l] > n && c.push(l);
        }), vr(s, function(l, f, h, _, b) {
          var I = f + "-" + h;
          b.status === "available" && c.indexOf(I) !== -1 && u.push(I);
        }), this._doCompaction(e, u, r);
      });
    }).bind(this), this.compact = ze("compact", function(e, n) {
      typeof e == "function" && (n = e, e = {}), e = e || {}, this._compactionQueue = this._compactionQueue || [], this._compactionQueue.push({ opts: e, callback: n }), this._compactionQueue.length === 1 && Gm(this);
    }).bind(this), this.get = ze("get", function(e, n, r) {
      if (typeof n == "function" && (r = n, n = {}), n = n || {}, typeof e != "string")
        return r(le(Mm));
      if (dr(e) && typeof this._getLocal == "function")
        return this._getLocal(e, r);
      var i = [];
      const s = () => {
        var u = [], l = i.length;
        if (!l)
          return r(null, u);
        i.forEach((f) => {
          this.get(e, {
            rev: f,
            revs: n.revs,
            latest: n.latest,
            attachments: n.attachments,
            binary: n.binary
          }, function(h, _) {
            if (h)
              u.push({ missing: f });
            else {
              for (var b, I = 0, C = u.length; I < C; I++)
                if (u[I].ok && u[I].ok._rev === _._rev) {
                  b = !0;
                  break;
                }
              b || u.push({ ok: _ });
            }
            l--, l || r(null, u);
          });
        });
      };
      if (n.open_revs) {
        if (n.open_revs === "all")
          this._getRevisionTree(e, function(u, l) {
            if (u)
              return r(u);
            i = ul(l).map(function(f) {
              return f.rev;
            }), s();
          });
        else if (Array.isArray(n.open_revs)) {
          i = n.open_revs;
          for (var o = 0; o < i.length; o++) {
            var c = i[o];
            if (!fc(c))
              return r(le(To));
          }
          s();
        } else
          return r(le(Zu, "function_clause"));
        return;
      }
      return this._get(e, n, (u, l) => {
        if (u)
          return u.docId = e, r(u);
        var f = l.doc, h = l.metadata, _ = l.ctx;
        if (n.conflicts) {
          var b = ll(h);
          b.length && (f._conflicts = b);
        }
        if (gn(h, f._rev) && (f._deleted = !0), n.revs || n.revs_info) {
          for (var I = f._rev.split("-"), C = parseInt(I[0], 10), m = I[1], y = zm(h.rev_tree), E = null, p = 0; p < y.length; p++) {
            var g = y[p];
            const k = g.ids.findIndex((Y) => Y.id === m);
            var w = k === C - 1;
            (w || !E && k !== -1) && (E = g);
          }
          if (!E)
            return u = new Error("invalid rev tree"), u.docId = e, r(u);
          const N = f._rev.split("-")[1], D = E.ids.findIndex((k) => k.id === N) + 1;
          var S = E.ids.length - D;
          if (E.ids.splice(D, S), E.ids.reverse(), n.revs && (f._revisions = {
            start: E.pos + E.ids.length - 1,
            ids: E.ids.map(function(k) {
              return k.id;
            })
          }), n.revs_info) {
            var R = E.pos + E.ids.length;
            f._revs_info = E.ids.map(function(k) {
              return R--, {
                rev: R + "-" + k.id,
                status: k.opts.status
              };
            });
          }
        }
        if (n.attachments && f._attachments) {
          var T = f._attachments, A = Object.keys(T).length;
          if (A === 0)
            return r(null, f);
          Object.keys(T).forEach((N) => {
            this._getAttachment(f._id, N, T[N], {
              binary: n.binary,
              metadata: h,
              ctx: _
            }, function(D, k) {
              var Y = f._attachments[N];
              Y.data = k, delete Y.stub, delete Y.length, --A || r(null, f);
            });
          });
        } else {
          if (f._attachments)
            for (var O in f._attachments)
              Object.prototype.hasOwnProperty.call(f._attachments, O) && (f._attachments[O].stub = !0);
          r(null, f);
        }
      });
    }).bind(this), this.getAttachment = ze("getAttachment", function(e, n, r, i) {
      r instanceof Function && (i = r, r = {}), this._get(e, r, (s, o) => {
        if (s)
          return i(s);
        if (o.doc._attachments && o.doc._attachments[n])
          r.ctx = o.ctx, r.binary = !0, r.metadata = o.metadata, this._getAttachment(
            e,
            n,
            o.doc._attachments[n],
            r,
            i
          );
        else
          return i(le(Mt));
      });
    }).bind(this), this.allDocs = ze("allDocs", function(e, n) {
      if (typeof e == "function" && (n = e, e = {}), e.skip = typeof e.skip < "u" ? e.skip : 0, e.start_key && (e.startkey = e.start_key), e.end_key && (e.endkey = e.end_key), "keys" in e) {
        if (!Array.isArray(e.keys))
          return n(new TypeError("options.keys must be an array"));
        var r = ["startkey", "endkey", "key"].filter(function(i) {
          return i in e;
        })[0];
        if (r) {
          n(le(
            lE,
            "Query parameter `" + r + "` is not compatible with multi-get"
          ));
          return;
        }
        if (!tn(this) && ($E(e), e.keys.length === 0))
          return this._allDocs({ limit: 0 }, n);
      }
      return this._allDocs(e, n);
    }).bind(this), this.close = ze("close", function(e) {
      return this._closed = !0, this.emit("closed"), this._close(e);
    }).bind(this), this.info = ze("info", function(e) {
      this._info((n, r) => {
        if (n)
          return e(n);
        r.db_name = r.db_name || this.name, r.auto_compaction = !!(this.auto_compaction && !tn(this)), r.adapter = this.adapter, e(null, r);
      });
    }).bind(this), this.id = ze("id", function(e) {
      return this._id(e);
    }).bind(this), this.bulkDocs = ze("bulkDocs", function(e, n, r) {
      if (typeof n == "function" && (r = n, n = {}), n = n || {}, Array.isArray(e) && (e = {
        docs: e
      }), !e || !e.docs || !Array.isArray(e.docs))
        return r(le(aE));
      for (var i = 0; i < e.docs.length; ++i) {
        const u = e.docs[i];
        if (hc(u))
          return r(le(uc));
        if ("_rev" in u && !fc(u._rev))
          return r(le(To));
      }
      var s;
      if (e.docs.forEach(function(u) {
        u._attachments && Object.keys(u._attachments).forEach(function(l) {
          s = s || zE(l), u._attachments[l].content_type || jt("warn", "Attachment", l, "on document", u._id, "is missing content_type");
        });
      }), s)
        return r(le(ya, s));
      "new_edits" in n || ("new_edits" in e ? n.new_edits = e.new_edits : n.new_edits = !0);
      var o = this;
      !n.new_edits && !tn(o) && e.docs.sort(jE), UE(e.docs);
      var c = e.docs.map(function(u) {
        return u._id;
      });
      this._bulkDocs(e, n, function(u, l) {
        if (u)
          return r(u);
        if (n.new_edits || (l = l.filter(function(_) {
          return _.error;
        })), !tn(o))
          for (var f = 0, h = l.length; f < h; f++)
            l[f].id = l[f].id || c[f];
        r(null, l);
      });
    }).bind(this), this.registerDependentDatabase = ze("registerDependentDatabase", function(e, n) {
      var r = Ze(this.__opts);
      this.__opts.view_adapter && (r.adapter = this.__opts.view_adapter);
      var i = new this.constructor(e, r);
      function s(o) {
        return o.dependentDbs = o.dependentDbs || {}, o.dependentDbs[e] ? !1 : (o.dependentDbs[e] = !0, o);
      }
      Fo(this, "_local/_pouch_dependentDbs", s).then(function() {
        n(null, { db: i });
      }).catch(n);
    }).bind(this), this.destroy = ze("destroy", function(e, n) {
      typeof e == "function" && (n = e, e = {});
      var r = "use_prefix" in this ? this.use_prefix : !0;
      const i = () => {
        this._destroy(e, (s, o) => {
          if (s)
            return n(s);
          this._destroyed = !0, this.emit("destroyed"), n(null, o || { ok: !0 });
        });
      };
      if (tn(this))
        return i();
      this.get("_local/_pouch_dependentDbs", (s, o) => {
        if (s)
          return s.status !== 404 ? n(s) : i();
        var c = o.dependentDbs, u = this.constructor, l = Object.keys(c).map((f) => {
          var h = r ? f.replace(new RegExp("^" + u.prefix), "") : f;
          return new u(h, this.__opts).destroy();
        });
        Promise.all(l).then(i, n);
      });
    }).bind(this);
  }
  _compact(e, n) {
    var r = {
      return_docs: !1,
      last_seq: e.last_seq || 0,
      since: e.last_seq || 0
    }, i = [], s, o = 0;
    const c = (f) => {
      this.activeTasks.update(s, {
        completed_items: ++o
      }), i.push(this.compactDocument(f.id, 0));
    }, u = (f) => {
      this.activeTasks.remove(s, f), n(f);
    }, l = (f) => {
      var h = f.last_seq;
      Promise.all(i).then(() => Fo(this, "_local/compaction", (_) => !_.last_seq || _.last_seq < h ? (_.last_seq = h, _) : !1)).then(() => {
        this.activeTasks.remove(s), n(null, { ok: !0 });
      }).catch(u);
    };
    this.info().then((f) => {
      s = this.activeTasks.add({
        name: "database_compaction",
        total_items: f.update_seq - r.last_seq
      }), this.changes(r).on("change", c).on("complete", l).on("error", u);
    });
  }
  changes(e, n) {
    return typeof e == "function" && (n = e, e = {}), e = e || {}, e.return_docs = "return_docs" in e ? e.return_docs : !e.live, new FE(this, e, n);
  }
  type() {
    return typeof this._type == "function" ? this._type() : this.adapter;
  }
}
Wm.prototype.purge = ze("_purge", function(t, e, n) {
  if (typeof this._purge > "u")
    return n(le(Zu, "Purge is not implemented in the " + this.adapter + " adapter."));
  var r = this;
  r._getRevisionTree(t, (i, s) => {
    if (i)
      return n(i);
    if (!s)
      return n(le(Mt));
    let o;
    try {
      o = RE(s, e);
    } catch (c) {
      return n(c.message || c);
    }
    r._purge(t, o, (c, u) => {
      if (c)
        return n(c);
      qE(r, t, e).then(function() {
        return n(null, u);
      });
    });
  });
});
class HE {
  constructor() {
    this.isReady = !1, this.failed = !1, this.queue = [];
  }
  execute() {
    var e;
    if (this.failed)
      for (; e = this.queue.shift(); )
        e(this.failed);
    else
      for (; e = this.queue.shift(); )
        e();
  }
  fail(e) {
    this.failed = e, this.execute();
  }
  ready(e) {
    this.isReady = !0, this.db = e, this.execute();
  }
  addTask(e) {
    this.queue.push(e), this.failed && this.execute();
  }
}
function GE(t, e) {
  var n = t.match(/([a-z-]*):\/\/(.*)/);
  if (n)
    return {
      name: /https?/.test(n[1]) ? n[1] + "://" + n[2] : n[2],
      adapter: n[1]
    };
  var r = pe.adapters, i = pe.preferredAdapters, s = pe.prefix, o = e.adapter;
  if (!o)
    for (var c = 0; c < i.length; ++c) {
      if (o = i[c], o === "idb" && "websql" in r && Vo() && localStorage["_pouch__websqldb_" + s + t]) {
        jt("log", 'PouchDB is downgrading "' + t + '" to WebSQL to avoid data loss, because it was already opened with WebSQL.');
        continue;
      }
      break;
    }
  var u = r[o], l = u && "use_prefix" in u ? u.use_prefix : !0;
  return {
    name: l ? s + t : t,
    adapter: o
  };
}
function WE(t, e) {
  t.prototype = Object.create(e.prototype, {
    constructor: { value: t }
  });
}
function Qm(t, e) {
  let n = function(...r) {
    if (!(this instanceof n))
      return new n(...r);
    e.apply(this, r);
  };
  return WE(n, t), n;
}
function QE(t) {
  function e(r) {
    t.removeListener("closed", n), r || t.constructor.emit("destroyed", t.name);
  }
  function n() {
    t.removeListener("destroyed", e), t.constructor.emit("unref", t);
  }
  t.once("destroyed", e), t.once("closed", n), t.constructor.emit("ref", t);
}
class kf extends Wm {
  constructor(e, n) {
    super(), this._setup(e, n);
  }
  _setup(e, n) {
    if (super._setup(), n = n || {}, e && typeof e == "object" && (n = e, e = n.name, delete n.name), n.deterministic_revs === void 0 && (n.deterministic_revs = !0), this.__opts = n = Ze(n), this.auto_compaction = n.auto_compaction, this.purged_infos_limit = n.purged_infos_limit || 1e3, this.prefix = pe.prefix, typeof e != "string")
      throw new Error("Missing/invalid DB name");
    var r = (n.prefix || "") + e, i = GE(r, n);
    if (n.name = i.name, n.adapter = n.adapter || i.adapter, this.name = e, this._adapter = n.adapter, pe.emit("debug", ["adapter", "Picked adapter: ", n.adapter]), !pe.adapters[n.adapter] || !pe.adapters[n.adapter].valid())
      throw new Error("Invalid Adapter: " + n.adapter);
    if (n.view_adapter && (!pe.adapters[n.view_adapter] || !pe.adapters[n.view_adapter].valid()))
      throw new Error("Invalid View Adapter: " + n.view_adapter);
    this.taskqueue = new HE(), this.adapter = n.adapter, pe.adapters[n.adapter].call(this, n, (s) => {
      if (s)
        return this.taskqueue.fail(s);
      QE(this), this.emit("created", this), pe.emit("created", this.name), this.taskqueue.ready(this);
    });
  }
}
const pe = Qm(kf, function(t, e) {
  kf.prototype._setup.call(this, t, e);
});
var Ym = fetch, Qr = Headers;
class YE {
  constructor() {
    this.tasks = {};
  }
  list() {
    return Object.values(this.tasks);
  }
  add(e) {
    const n = Ju();
    return this.tasks[n] = {
      id: n,
      name: e.name,
      total_items: e.total_items,
      created_at: (/* @__PURE__ */ new Date()).toJSON()
    }, n;
  }
  get(e) {
    return this.tasks[e];
  }
  /* eslint-disable no-unused-vars */
  remove(e, n) {
    return delete this.tasks[e], this.tasks;
  }
  update(e, n) {
    const r = this.tasks[e];
    if (typeof r < "u") {
      const i = {
        id: r.id,
        name: r.name,
        created_at: r.created_at,
        total_items: n.total_items || r.total_items,
        completed_items: n.completed_items || r.completed_items,
        updated_at: (/* @__PURE__ */ new Date()).toJSON()
      };
      this.tasks[e] = i;
    }
    return this.tasks;
  }
}
pe.adapters = {};
pe.preferredAdapters = [];
pe.prefix = "_pouch_";
var Of = new bn();
function JE(t) {
  Object.keys(bn.prototype).forEach(function(n) {
    typeof bn.prototype[n] == "function" && (t[n] = Of[n].bind(Of));
  });
  var e = t._destructionListeners = /* @__PURE__ */ new Map();
  t.on("ref", function(r) {
    e.has(r.name) || e.set(r.name, []), e.get(r.name).push(r);
  }), t.on("unref", function(r) {
    if (e.has(r.name)) {
      var i = e.get(r.name), s = i.indexOf(r);
      s < 0 || (i.splice(s, 1), i.length > 1 ? e.set(r.name, i) : e.delete(r.name));
    }
  }), t.on("destroyed", function(r) {
    if (e.has(r)) {
      var i = e.get(r);
      e.delete(r), i.forEach(function(s) {
        s.emit("destroyed", !0);
      });
    }
  });
}
JE(pe);
pe.adapter = function(t, e, n) {
  e.valid() && (pe.adapters[t] = e, n && pe.preferredAdapters.push(t));
};
pe.plugin = function(t) {
  if (typeof t == "function")
    t(pe);
  else {
    if (typeof t != "object" || Object.keys(t).length === 0)
      throw new Error('Invalid plugin: got "' + t + '", expected an object or a function');
    Object.keys(t).forEach(function(e) {
      pe.prototype[e] = t[e];
    });
  }
  return this.__defaults && (pe.__defaults = Object.assign({}, this.__defaults)), pe;
};
pe.defaults = function(t) {
  let e = Qm(pe, function(n, r) {
    r = r || {}, n && typeof n == "object" && (r = n, n = r.name, delete r.name), r = Object.assign({}, e.__defaults, r), pe.call(this, n, r);
  });
  return e.preferredAdapters = pe.preferredAdapters.slice(), Object.keys(pe).forEach(function(n) {
    n in e || (e[n] = pe[n]);
  }), e.__defaults = Object.assign({}, this.__defaults, t), e;
};
pe.fetch = function(t, e) {
  return Ym(t, e);
};
pe.prototype.activeTasks = pe.activeTasks = new YE();
var XE = "9.0.0";
function hl(t, e) {
  for (var n = t, r = 0, i = e.length; r < i; r++) {
    var s = e[r];
    if (n = n[s], !n)
      break;
  }
  return n;
}
function ZE(t, e) {
  return t < e ? -1 : t > e ? 1 : 0;
}
function fl(t) {
  for (var e = [], n = "", r = 0, i = t.length; r < i; r++) {
    var s = t[r];
    r > 0 && t[r - 1] === "\\" && (s === "$" || s === ".") ? n = n.substring(0, n.length - 1) + s : s === "." ? (e.push(n), n = "") : n += s;
  }
  return e.push(n), e;
}
var eb = ["$or", "$nor", "$not"];
function Jm(t) {
  return eb.indexOf(t) > -1;
}
function Xm(t) {
  return Object.keys(t)[0];
}
function tb(t) {
  return t[Xm(t)];
}
function cs(t) {
  var e = {}, n = { $or: !0, $nor: !0 };
  return t.forEach(function(r) {
    Object.keys(r).forEach(function(i) {
      var s = r[i];
      if (typeof s != "object" && (s = { $eq: s }), Jm(i))
        if (s instanceof Array) {
          if (n[i]) {
            n[i] = !1, e[i] = s;
            return;
          }
          var o = [];
          e[i].forEach(function(u) {
            Object.keys(s).forEach(function(l) {
              var f = s[l], h = Math.max(Object.keys(u).length, Object.keys(f).length), _ = cs([u, f]);
              Object.keys(_).length <= h || o.push(_);
            });
          }), e[i] = o;
        } else
          e[i] = cs([s]);
      else {
        var c = e[i] = e[i] || {};
        Object.keys(s).forEach(function(u) {
          var l = s[u];
          if (u === "$gt" || u === "$gte")
            return nb(u, l, c);
          if (u === "$lt" || u === "$lte")
            return rb(u, l, c);
          if (u === "$ne")
            return ib(l, c);
          if (u === "$eq")
            return sb(l, c);
          if (u === "$regex")
            return ob(l, c);
          c[u] = l;
        });
      }
    });
  }), e;
}
function nb(t, e, n) {
  typeof n.$eq < "u" || (typeof n.$gte < "u" ? t === "$gte" ? e > n.$gte && (n.$gte = e) : e >= n.$gte && (delete n.$gte, n.$gt = e) : typeof n.$gt < "u" ? t === "$gte" ? e > n.$gt && (delete n.$gt, n.$gte = e) : e > n.$gt && (n.$gt = e) : n[t] = e);
}
function rb(t, e, n) {
  typeof n.$eq < "u" || (typeof n.$lte < "u" ? t === "$lte" ? e < n.$lte && (n.$lte = e) : e <= n.$lte && (delete n.$lte, n.$lt = e) : typeof n.$lt < "u" ? t === "$lte" ? e < n.$lt && (delete n.$lt, n.$lte = e) : e < n.$lt && (n.$lt = e) : n[t] = e);
}
function ib(t, e) {
  "$ne" in e ? e.$ne.push(t) : e.$ne = [t];
}
function sb(t, e) {
  delete e.$gt, delete e.$gte, delete e.$lt, delete e.$lte, delete e.$ne, e.$eq = t;
}
function ob(t, e) {
  "$regex" in e ? e.$regex.push(t) : e.$regex = [t];
}
function Zm(t) {
  for (var e in t) {
    if (Array.isArray(t))
      for (var n in t)
        t[n].$and && (t[n] = cs(t[n].$and));
    var r = t[e];
    typeof r == "object" && Zm(r);
  }
  return t;
}
function eg(t, e) {
  for (var n in t) {
    n === "$and" && (e = !0);
    var r = t[n];
    typeof r == "object" && (e = eg(r, e));
  }
  return e;
}
function ab(t) {
  var e = Ze(t);
  eg(e, !1) && (e = Zm(e), "$and" in e && (e = cs(e.$and))), ["$or", "$nor"].forEach(function(o) {
    o in e && e[o].forEach(function(c) {
      for (var u = Object.keys(c), l = 0; l < u.length; l++) {
        var f = u[l], h = c[f];
        (typeof h != "object" || h === null) && (c[f] = { $eq: h });
      }
    });
  }), "$not" in e && (e.$not = cs([e.$not]));
  for (var n = Object.keys(e), r = 0; r < n.length; r++) {
    var i = n[r], s = e[i];
    (typeof s != "object" || s === null) && (s = { $eq: s }), e[i] = s;
  }
  return Jc(e), e;
}
function Jc(t) {
  Object.keys(t).forEach(function(e) {
    var n = t[e];
    Array.isArray(n) ? n.forEach(function(r) {
      r && typeof r == "object" && Jc(r);
    }) : e === "$ne" ? t.$ne = [n] : e === "$regex" ? t.$regex = [n] : n && typeof n == "object" && Jc(n);
  });
}
function cb(t, e, n) {
  for (var r = "", i = n - t.length; r.length < i; )
    r += e;
  return r;
}
function ub(t, e, n) {
  var r = cb(t, e, n);
  return r + t;
}
var tg = -324, Xc = 3, Zc = "";
function He(t, e) {
  if (t === e)
    return 0;
  t = wr(t), e = wr(e);
  var n = eu(t), r = eu(e);
  if (n - r !== 0)
    return n - r;
  switch (typeof t) {
    case "number":
      return t - e;
    case "boolean":
      return t < e ? -1 : 1;
    case "string":
      return mb(t, e);
  }
  return Array.isArray(t) ? pb(t, e) : gb(t, e);
}
function wr(t) {
  switch (typeof t) {
    case "undefined":
      return null;
    case "number":
      return t === 1 / 0 || t === -1 / 0 || isNaN(t) ? null : t;
    case "object":
      var e = t;
      if (Array.isArray(t)) {
        var n = t.length;
        t = new Array(n);
        for (var r = 0; r < n; r++)
          t[r] = wr(e[r]);
      } else {
        if (t instanceof Date)
          return t.toJSON();
        if (t !== null) {
          t = {};
          for (var i in e)
            if (Object.prototype.hasOwnProperty.call(e, i)) {
              var s = e[i];
              typeof s < "u" && (t[i] = wr(s));
            }
        }
      }
  }
  return t;
}
function lb(t) {
  if (t !== null)
    switch (typeof t) {
      case "boolean":
        return t ? 1 : 0;
      case "number":
        return yb(t);
      case "string":
        return t.replace(/\u0002/g, "").replace(/\u0001/g, "").replace(/\u0000/g, "");
      case "object":
        var e = Array.isArray(t), n = e ? t : Object.keys(t), r = -1, i = n.length, s = "";
        if (e)
          for (; ++r < i; )
            s += Kt(n[r]);
        else
          for (; ++r < i; ) {
            var o = n[r];
            s += Kt(o) + Kt(t[o]);
          }
        return s;
    }
  return "";
}
function Kt(t) {
  var e = "\0";
  return t = wr(t), eu(t) + Zc + lb(t) + e;
}
function hb(t, e) {
  var n = e, r, i = t[e] === "1";
  if (i)
    r = 0, e++;
  else {
    var s = t[e] === "0";
    e++;
    var o = "", c = t.substring(e, e + Xc), u = parseInt(c, 10) + tg;
    for (s && (u = -u), e += Xc; ; ) {
      var l = t[e];
      if (l === "\0")
        break;
      o += l, e++;
    }
    o = o.split("."), o.length === 1 ? r = parseInt(o, 10) : r = parseFloat(o[0] + "." + o[1]), s && (r = r - 10), u !== 0 && (r = parseFloat(r + "e" + u));
  }
  return { num: r, length: e - n };
}
function fb(t, e) {
  var n = t.pop();
  if (e.length) {
    var r = e[e.length - 1];
    n === r.element && (e.pop(), r = e[e.length - 1]);
    var i = r.element, s = r.index;
    if (Array.isArray(i))
      i.push(n);
    else if (s === t.length - 2) {
      var o = t.pop();
      i[o] = n;
    } else
      t.push(n);
  }
}
function db(t) {
  for (var e = [], n = [], r = 0; ; ) {
    var i = t[r++];
    if (i === "\0") {
      if (e.length === 1)
        return e.pop();
      fb(e, n);
      continue;
    }
    switch (i) {
      case "1":
        e.push(null);
        break;
      case "2":
        e.push(t[r] === "1"), r++;
        break;
      case "3":
        var s = hb(t, r);
        e.push(s.num), r += s.length;
        break;
      case "4":
        for (var o = ""; ; ) {
          var c = t[r];
          if (c === "\0")
            break;
          o += c, r++;
        }
        o = o.replace(/\u0001\u0001/g, "\0").replace(/\u0001\u0002/g, "").replace(/\u0002\u0002/g, ""), e.push(o);
        break;
      case "5":
        var u = { element: [], index: e.length };
        e.push(u.element), n.push(u);
        break;
      case "6":
        var l = { element: {}, index: e.length };
        e.push(l.element), n.push(l);
        break;
      default:
        throw new Error(
          "bad collationIndex or unexpectedly reached end of input: " + i
        );
    }
  }
}
function pb(t, e) {
  for (var n = Math.min(t.length, e.length), r = 0; r < n; r++) {
    var i = He(t[r], e[r]);
    if (i !== 0)
      return i;
  }
  return t.length === e.length ? 0 : t.length > e.length ? 1 : -1;
}
function mb(t, e) {
  return t === e ? 0 : t > e ? 1 : -1;
}
function gb(t, e) {
  for (var n = Object.keys(t), r = Object.keys(e), i = Math.min(n.length, r.length), s = 0; s < i; s++) {
    var o = He(n[s], r[s]);
    if (o !== 0 || (o = He(t[n[s]], e[r[s]]), o !== 0))
      return o;
  }
  return n.length === r.length ? 0 : n.length > r.length ? 1 : -1;
}
function eu(t) {
  var e = ["boolean", "number", "string", "object"], n = e.indexOf(typeof t);
  if (~n)
    return t === null ? 1 : Array.isArray(t) ? 5 : n < 3 ? n + 2 : n + 3;
  if (Array.isArray(t))
    return 5;
}
function yb(t) {
  if (t === 0)
    return "1";
  var e = t.toExponential().split(/e\+?/), n = parseInt(e[1], 10), r = t < 0, i = r ? "0" : "2", s = (r ? -n : n) - tg, o = ub(s.toString(), "0", Xc);
  i += Zc + o;
  var c = Math.abs(parseFloat(e[0]));
  r && (c = 10 - c);
  var u = c.toFixed(20);
  return u = u.replace(/\.?0+$/, ""), i += Zc + u, i;
}
function _b(t) {
  function e(n) {
    return t.map(function(r) {
      var i = Xm(r), s = fl(i), o = hl(n, s);
      return o;
    });
  }
  return function(n, r) {
    var i = e(n.doc), s = e(r.doc), o = He(i, s);
    return o !== 0 ? o : ZE(n.doc._id, r.doc._id);
  };
}
function vb(t, e, n) {
  if (t = t.filter(function(o) {
    return Yr(o.doc, e.selector, n);
  }), e.sort) {
    var r = _b(e.sort);
    t = t.sort(r), typeof e.sort[0] != "string" && tb(e.sort[0]) === "desc" && (t = t.reverse());
  }
  if ("limit" in e || "skip" in e) {
    var i = e.skip || 0, s = ("limit" in e ? e.limit : t.length) + i;
    t = t.slice(i, s);
  }
  return t;
}
function Yr(t, e, n) {
  return n.every(function(r) {
    var i = e[r], s = fl(r), o = hl(t, s);
    return Jm(r) ? wb(r, i, t) : Uo(i, t, s, o);
  });
}
function Uo(t, e, n, r) {
  return t ? typeof t == "object" ? Object.keys(t).every(function(i) {
    var s = t[i];
    if (i.indexOf("$") === 0)
      return Nf(i, e, s, n, r);
    var o = fl(i);
    if (r === void 0 && typeof s != "object" && o.length > 0)
      return !1;
    var c = hl(r, o);
    return typeof s == "object" ? Uo(s, e, n, c) : Nf("$eq", e, s, o, c);
  }) : t === r : !0;
}
function wb(t, e, n) {
  return t === "$or" ? e.some(function(r) {
    return Yr(n, r, Object.keys(r));
  }) : t === "$not" ? !Yr(n, e, Object.keys(e)) : !e.find(function(r) {
    return Yr(n, r, Object.keys(r));
  });
}
function Nf(t, e, n, r, i) {
  if (!xf[t])
    throw new Error('unknown operator "' + t + '" - should be one of $eq, $lte, $lt, $gt, $gte, $exists, $ne, $in, $nin, $size, $mod, $regex, $elemMatch, $type, $allMatch or $all');
  return xf[t](e, n, r, i);
}
function ji(t) {
  return typeof t < "u" && t !== null;
}
function rr(t) {
  return typeof t < "u";
}
function Eb(t, e) {
  if (typeof t != "number" || parseInt(t, 10) !== t)
    return !1;
  var n = e[0], r = e[1];
  return t % n === r;
}
function Df(t, e) {
  return e.some(function(n) {
    return t instanceof Array ? t.some(function(r) {
      return He(n, r) === 0;
    }) : He(n, t) === 0;
  });
}
function bb(t, e) {
  return e.every(function(n) {
    return t.some(function(r) {
      return He(n, r) === 0;
    });
  });
}
function Tb(t, e) {
  return t.length === e;
}
function Ib(t, e) {
  var n = new RegExp(e);
  return n.test(t);
}
function Sb(t, e) {
  switch (e) {
    case "null":
      return t === null;
    case "boolean":
      return typeof t == "boolean";
    case "number":
      return typeof t == "number";
    case "string":
      return typeof t == "string";
    case "array":
      return t instanceof Array;
    case "object":
      return {}.toString.call(t) === "[object Object]";
  }
}
var xf = {
  $elemMatch: function(t, e, n, r) {
    return !Array.isArray(r) || r.length === 0 ? !1 : typeof r[0] == "object" && r[0] !== null ? r.some(function(i) {
      return Yr(i, e, Object.keys(e));
    }) : r.some(function(i) {
      return Uo(e, t, n, i);
    });
  },
  $allMatch: function(t, e, n, r) {
    return !Array.isArray(r) || r.length === 0 ? !1 : typeof r[0] == "object" && r[0] !== null ? r.every(function(i) {
      return Yr(i, e, Object.keys(e));
    }) : r.every(function(i) {
      return Uo(e, t, n, i);
    });
  },
  $eq: function(t, e, n, r) {
    return rr(r) && He(r, e) === 0;
  },
  $gte: function(t, e, n, r) {
    return rr(r) && He(r, e) >= 0;
  },
  $gt: function(t, e, n, r) {
    return rr(r) && He(r, e) > 0;
  },
  $lte: function(t, e, n, r) {
    return rr(r) && He(r, e) <= 0;
  },
  $lt: function(t, e, n, r) {
    return rr(r) && He(r, e) < 0;
  },
  $exists: function(t, e, n, r) {
    return e ? rr(r) : !rr(r);
  },
  $mod: function(t, e, n, r) {
    return ji(r) && Eb(r, e);
  },
  $ne: function(t, e, n, r) {
    return e.every(function(i) {
      return He(r, i) !== 0;
    });
  },
  $in: function(t, e, n, r) {
    return ji(r) && Df(r, e);
  },
  $nin: function(t, e, n, r) {
    return ji(r) && !Df(r, e);
  },
  $size: function(t, e, n, r) {
    return ji(r) && Array.isArray(r) && Tb(r, e);
  },
  $all: function(t, e, n, r) {
    return Array.isArray(r) && bb(r, e);
  },
  $regex: function(t, e, n, r) {
    return ji(r) && typeof r == "string" && e.every(function(i) {
      return Ib(r, i);
    });
  },
  $type: function(t, e, n, r) {
    return Sb(r, e);
  }
};
function Ab(t, e) {
  if (typeof e != "object")
    throw new Error("Selector error: expected a JSON object");
  e = ab(e);
  var n = {
    doc: t
  }, r = vb([n], { selector: e }, Object.keys(e));
  return r && r.length === 1;
}
function Rb(t) {
  return nl(`"use strict";
return ` + t + ";", {});
}
function Cb(t) {
  var e = [
    "return function(doc) {",
    '  "use strict";',
    "  var emitted = false;",
    "  var emit = function (a, b) {",
    "    emitted = true;",
    "  };",
    "  var view = " + t + ";",
    "  view(doc);",
    "  if (emitted) {",
    "    return true;",
    "  }",
    "};"
  ].join(`
`);
  return nl(e, {});
}
function Pb(t, e) {
  if (t.selector && t.filter && t.filter !== "_selector") {
    var n = typeof t.filter == "string" ? t.filter : "function";
    return e(new Error('selector invalid for filter "' + n + '"'));
  }
  e();
}
function kb(t) {
  t.view && !t.filter && (t.filter = "_view"), t.selector && !t.filter && (t.filter = "_selector"), t.filter && typeof t.filter == "string" && (t.filter === "_view" ? t.view = Sf(t.view) : t.filter = Sf(t.filter));
}
function Ob(t, e) {
  return e.filter && typeof e.filter == "string" && !e.doc_ids && !tn(t.db);
}
function Nb(t, e) {
  var n = e.complete;
  if (e.filter === "_view") {
    if (!e.view || typeof e.view != "string") {
      var r = le(
        ya,
        "`view` filter parameter not found or invalid."
      );
      return n(r);
    }
    var i = Yc(e.view);
    t.db.get("_design/" + i[0], function(o, c) {
      if (t.isCancelled)
        return n(null, { status: "cancelled" });
      if (o)
        return n(ni(o));
      var u = c && c.views && c.views[i[1]] && c.views[i[1]].map;
      if (!u)
        return n(le(
          Mt,
          c.views ? "missing json key: " + i[1] : "missing json key: views"
        ));
      e.filter = Cb(u), t.doChanges(e);
    });
  } else if (e.selector)
    e.filter = function(o) {
      return Ab(o, e.selector);
    }, t.doChanges(e);
  else {
    var s = Yc(e.filter);
    t.db.get("_design/" + s[0], function(o, c) {
      if (t.isCancelled)
        return n(null, { status: "cancelled" });
      if (o)
        return n(ni(o));
      var u = c && c.filters && c.filters[s[1]];
      if (!u)
        return n(le(
          Mt,
          c && c.filters ? "missing json key: " + s[1] : "missing json key: filters"
        ));
      e.filter = Rb(u), t.doChanges(e);
    });
  }
}
function Db(t) {
  t._changesFilterPlugin = {
    validate: Pb,
    normalize: kb,
    shouldFilter: Ob,
    filter: Nb
  };
}
pe.plugin(Db);
pe.version = XE;
function xb(t, e, n) {
  return new Promise(function(r) {
    var i = il([""]);
    let s;
    {
      const o = n;
      s = t.objectStore(e).put(i, o);
    }
    s.onsuccess = function() {
      var o = navigator.userAgent.match(/Chrome\/(\d+)/), c = navigator.userAgent.match(/Edge\//);
      r(c || !o || parseInt(o[1], 10) >= 43);
    }, s.onerror = t.onabort = function(o) {
      o.preventDefault(), o.stopPropagation(), r(!1);
    };
  }).catch(function() {
    return !1;
  });
}
function ng(t) {
  return t.reduce(function(e, n) {
    return e[n] = !0, e;
  }, {});
}
var Lb = ng([
  "_id",
  "_rev",
  "_access",
  "_attachments",
  "_deleted",
  "_revisions",
  "_revs_info",
  "_conflicts",
  "_deleted_conflicts",
  "_local_seq",
  "_rev_tree",
  // replication documents
  "_replication_id",
  "_replication_state",
  "_replication_state_time",
  "_replication_state_reason",
  "_replication_stats",
  // Specific to Couchbase Sync Gateway
  "_removed"
]), Mb = ng([
  "_access",
  "_attachments",
  // replication documents
  "_replication_id",
  "_replication_state",
  "_replication_state_time",
  "_replication_state_reason",
  "_replication_stats"
]);
function Lf(t) {
  if (!/^\d+-/.test(t))
    return le(To);
  var e = t.indexOf("-"), n = t.substring(0, e), r = t.substring(e + 1);
  return {
    prefix: parseInt(n, 10),
    id: r
  };
}
function Vb(t, e) {
  for (var n = t.start - t.ids.length + 1, r = t.ids, i = [r[0], e, []], s = 1, o = r.length; s < o; s++)
    i = [r[s], { status: "missing" }, [i]];
  return [{
    pos: n,
    ids: i
  }];
}
function rg(t, e, n) {
  n || (n = {
    deterministic_revs: !0
  });
  var r, i, s, o = { status: "available" };
  if (t._deleted && (o.deleted = !0), e)
    if (t._id || (t._id = _a()), i = qm(t, n.deterministic_revs), t._rev) {
      if (s = Lf(t._rev), s.error)
        return s;
      t._rev_tree = [{
        pos: s.prefix,
        ids: [s.id, { status: "missing" }, [[i, o, []]]]
      }], r = s.prefix + 1;
    } else
      t._rev_tree = [{
        pos: 1,
        ids: [i, o, []]
      }], r = 1;
  else if (t._revisions && (t._rev_tree = Vb(t._revisions, o), r = t._revisions.start, i = t._revisions.ids[0]), !t._rev_tree) {
    if (s = Lf(t._rev), s.error)
      return s;
    r = s.prefix, i = s.id, t._rev_tree = [{
      pos: r,
      ids: [i, o, []]
    }];
  }
  Fm(t._id), t._rev = r + "-" + i;
  var c = { metadata: {}, data: {} };
  for (var u in t)
    if (Object.prototype.hasOwnProperty.call(t, u)) {
      var l = u[0] === "_";
      if (l && !Lb[u]) {
        var f = le(If, u);
        throw f.message = If.message + ": " + u, f;
      } else l && !Mb[u] ? c.metadata[u.slice(1)] = t[u] : c.data[u] = t[u];
    }
  return c;
}
function Fb(t) {
  try {
    return rl(t);
  } catch {
    var e = le(
      Vm,
      "Attachment is not a valid base64 string"
    );
    return { error: e };
  }
}
function Ub(t, e, n) {
  var r = Fb(t.data);
  if (r.error)
    return n(r.error);
  t.length = r.length, e === "blob" ? t.data = sl(r, t.content_type) : e === "base64" ? t.data = Ss(r) : t.data = r, cl(r, function(i) {
    t.digest = "md5-" + i, n();
  });
}
function jb(t, e, n) {
  cl(t.data, function(r) {
    t.digest = "md5-" + r, t.length = t.data.size || t.data.length || 0, e === "binary" ? Bm(t.data, function(i) {
      t.data = i, n();
    }) : e === "base64" ? al(t.data, function(i) {
      t.data = i, n();
    }) : n();
  });
}
function Bb(t, e, n) {
  if (t.stub)
    return n();
  typeof t.data == "string" ? Ub(t, e, n) : jb(t, e, n);
}
function $b(t, e, n) {
  if (!t.length)
    return n();
  var r = 0, i;
  t.forEach(function(o) {
    var c = o.data && o.data._attachments ? Object.keys(o.data._attachments) : [], u = 0;
    if (!c.length)
      return s();
    function l(h) {
      i = h, u++, u === c.length && s();
    }
    for (var f in o.data._attachments)
      Object.prototype.hasOwnProperty.call(o.data._attachments, f) && Bb(
        o.data._attachments[f],
        e,
        l
      );
  });
  function s() {
    r++, t.length === r && (i ? n(i) : n());
  }
}
function qb(t, e, n, r, i, s, o, c) {
  if (DE(e.rev_tree, n.metadata.rev) && !c)
    return r[i] = n, s();
  var u = e.winningRev || _r(e), l = "deleted" in e ? e.deleted : gn(e, u), f = "deleted" in n.metadata ? n.metadata.deleted : gn(n.metadata), h = /^1-/.test(n.metadata.rev);
  if (l && !f && c && h) {
    var _ = n.data;
    _._rev = u, _._id = n.metadata.id, n = rg(_, c);
  }
  var b = Hm(e.rev_tree, n.metadata.rev_tree[0], t), I = c && (l && f && b.conflicts !== "new_leaf" || !l && b.conflicts !== "new_leaf" || l && !f && b.conflicts === "new_branch");
  if (I) {
    var C = le(ti);
    return r[i] = C, s();
  }
  var m = n.metadata.rev;
  n.metadata.rev_tree = b.tree, n.stemmedRevs = b.stemmedRevs || [], e.rev_map && (n.metadata.rev_map = e.rev_map);
  var y = _r(n.metadata), E = gn(n.metadata, y), p = l === E ? 0 : l < E ? -1 : 1, g;
  m === y ? g = E : g = gn(n.metadata, m), o(
    n,
    y,
    E,
    g,
    !0,
    p,
    i,
    s
  );
}
function zb(t) {
  return t.metadata.rev_tree[0].ids[1].status === "missing";
}
function Kb(t, e, n, r, i, s, o, c, u) {
  t = t || 1e3;
  function l(C, m, y) {
    var E = _r(C.metadata), p = gn(C.metadata, E);
    if ("was_delete" in c && p)
      return s[m] = le(Mt, "deleted"), y();
    var g = f && zb(C);
    if (g) {
      var w = le(ti);
      return s[m] = w, y();
    }
    var S = p ? 0 : 1;
    o(
      C,
      E,
      p,
      p,
      !1,
      S,
      m,
      y
    );
  }
  var f = c.new_edits, h = /* @__PURE__ */ new Map(), _ = 0, b = e.length;
  function I() {
    ++_ === b && u && u();
  }
  e.forEach(function(C, m) {
    if (C._id && dr(C._id)) {
      var y = C._deleted ? "_removeLocal" : "_putLocal";
      n[y](C, { ctx: i }, function(p, g) {
        s[m] = p || g, I();
      });
      return;
    }
    var E = C.metadata.id;
    h.has(E) ? (b--, h.get(E).push([C, m])) : h.set(E, [[C, m]]);
  }), h.forEach(function(C, m) {
    var y = 0;
    function E() {
      ++y < C.length ? p() : I();
    }
    function p() {
      var g = C[y], w = g[0], S = g[1];
      if (r.has(m))
        qb(
          t,
          r.get(m),
          w,
          s,
          S,
          E,
          o,
          f
        );
      else {
        var R = Hm([], w.metadata.rev_tree[0], t);
        w.metadata.rev_tree = R.tree, w.stemmedRevs = R.stemmedRevs || [], l(w, S, E);
      }
    }
    p();
  });
}
var Hb = 5, We = "document-store", ot = "by-sequence", Vt = "attach-store", ur = "attach-seq-store", St = "meta-store", Xt = "local-store", dc = "detect-blob-support";
function Gb(t) {
  try {
    return JSON.parse(t);
  } catch {
    return ma.parse(t);
  }
}
function Wb(t) {
  try {
    return JSON.stringify(t);
  } catch {
    return ma.stringify(t);
  }
}
function en(t) {
  return function(e) {
    var n = "unknown_error";
    e.target && e.target.error && (n = e.target.error.name || e.target.error.message), t(le(el, n, e.type));
  };
}
function tu(t, e, n) {
  return {
    data: Wb(t),
    winningRev: e,
    deletedOrLocal: n ? "1" : "0",
    seq: t.seq,
    // highest seq for this doc
    id: t.id
  };
}
function lr(t) {
  if (!t)
    return null;
  var e = Gb(t.data);
  return e.winningRev = t.winningRev, e.deleted = t.deletedOrLocal === "1", e.seq = t.seq, e;
}
function jo(t) {
  if (!t)
    return t;
  var e = t._doc_id_rev.lastIndexOf(":");
  return t._id = t._doc_id_rev.substring(0, e - 1), t._rev = t._doc_id_rev.substring(e + 1), delete t._doc_id_rev, t;
}
function ig(t, e, n, r) {
  n ? r(t ? typeof t != "string" ? t : ol(t, e) : il([""], { type: e })) : t ? typeof t != "string" ? jm(t, function(i) {
    r(Ss(i));
  }) : r(t) : r("");
}
function sg(t, e, n, r) {
  var i = Object.keys(t._attachments || {});
  if (!i.length)
    return r && r();
  var s = 0;
  function o() {
    ++s === i.length && r && r();
  }
  function c(u, l) {
    var f = u._attachments[l], h = f.digest, _ = n.objectStore(Vt).get(h);
    _.onsuccess = function(b) {
      f.body = b.target.result.body, o();
    };
  }
  i.forEach(function(u) {
    e.attachments && e.include_docs ? c(t, u) : (t._attachments[u].stub = !0, o());
  });
}
function nu(t, e) {
  return Promise.all(t.map(function(n) {
    if (n.doc && n.doc._attachments) {
      var r = Object.keys(n.doc._attachments);
      return Promise.all(r.map(function(i) {
        var s = n.doc._attachments[i];
        if ("body" in s) {
          var o = s.body, c = s.content_type;
          return new Promise(function(u) {
            ig(o, c, e, function(l) {
              n.doc._attachments[i] = Object.assign(
                Is(s, ["digest", "content_type"]),
                { data: l }
              ), u();
            });
          });
        }
      }));
    }
  }));
}
function og(t, e, n) {
  var r = [], i = n.objectStore(ot), s = n.objectStore(Vt), o = n.objectStore(ur), c = t.length;
  function u() {
    c--, c || l();
  }
  function l() {
    r.length && r.forEach(function(f) {
      var h = o.index("digestSeq").count(
        IDBKeyRange.bound(
          f + "::",
          f + "::￿",
          !1,
          !1
        )
      );
      h.onsuccess = function(_) {
        var b = _.target.result;
        b || s.delete(f);
      };
    });
  }
  t.forEach(function(f) {
    var h = i.index("_doc_id_rev"), _ = e + "::" + f;
    h.getKey(_).onsuccess = function(b) {
      var I = b.target.result;
      if (typeof I != "number")
        return u();
      i.delete(I);
      var C = o.index("seq").openCursor(IDBKeyRange.only(I));
      C.onsuccess = function(m) {
        var y = m.target.result;
        if (y) {
          var E = y.value.digestSeq.split("::")[0];
          r.push(E), o.delete(y.primaryKey), y.continue();
        } else
          u();
      };
    };
  });
}
function Ht(t, e, n) {
  try {
    return {
      txn: t.transaction(e, n)
    };
  } catch (r) {
    return {
      error: r
    };
  }
}
var Xi = new iE();
function Qb(t, e, n, r, i, s) {
  for (var o = e.docs, c, u, l, f, h, _, b, I, C = 0, m = o.length; C < m; C++) {
    var y = o[C];
    y._id && dr(y._id) || (y = o[C] = rg(y, n.new_edits, t), y.error && !b && (b = y));
  }
  if (b)
    return s(b);
  var E = !1, p = 0, g = new Array(o.length), w = /* @__PURE__ */ new Map(), S = !1, R = r._meta.blobSupport ? "blob" : "base64";
  $b(o, R, function(U) {
    if (U)
      return s(U);
    T();
  });
  function T() {
    var U = [
      We,
      ot,
      Vt,
      Xt,
      ur,
      St
    ], q = Ht(i, U, "readwrite");
    if (q.error)
      return s(q.error);
    c = q.txn, c.onabort = en(s), c.ontimeout = en(s), c.oncomplete = k, u = c.objectStore(We), l = c.objectStore(ot), f = c.objectStore(Vt), h = c.objectStore(ur), _ = c.objectStore(St), _.get(St).onsuccess = function(H) {
      I = H.target.result, N();
    }, oe(function(H) {
      if (H)
        return S = !0, s(H);
      D();
    });
  }
  function A() {
    E = !0, N();
  }
  function O() {
    Kb(
      t.revs_limit,
      o,
      r,
      w,
      c,
      g,
      ue,
      n,
      A
    );
  }
  function N() {
    !I || !E || (I.docCount += p, _.put(I));
  }
  function D() {
    if (!o.length)
      return;
    var U = 0;
    function q() {
      ++U === o.length && O();
    }
    function H(Q) {
      var Z = lr(Q.target.result);
      Z && w.set(Z.id, Z), q();
    }
    for (var ie = 0, K = o.length; ie < K; ie++) {
      var V = o[ie];
      if (V._id && dr(V._id)) {
        q();
        continue;
      }
      var j = u.get(V.metadata.id);
      j.onsuccess = H;
    }
  }
  function k() {
    S || (Xi.notify(r._meta.name), s(null, g));
  }
  function Y(U, q) {
    var H = f.get(U);
    H.onsuccess = function(ie) {
      if (ie.target.result)
        q();
      else {
        var K = le(
          hE,
          "unknown stub attachment with digest " + U
        );
        K.status = 412, q(K);
      }
    };
  }
  function oe(U) {
    var q = [];
    if (o.forEach(function(V) {
      V.data && V.data._attachments && Object.keys(V.data._attachments).forEach(function(j) {
        var Q = V.data._attachments[j];
        Q.stub && q.push(Q.digest);
      });
    }), !q.length)
      return U();
    var H = 0, ie;
    function K() {
      ++H === q.length && U(ie);
    }
    q.forEach(function(V) {
      Y(V, function(j) {
        j && !ie && (ie = j), K();
      });
    });
  }
  function ue(U, q, H, ie, K, V, j, Q) {
    U.metadata.winningRev = q, U.metadata.deleted = H;
    var Z = U.data;
    Z._id = U.metadata.id, Z._rev = U.metadata.rev, ie && (Z._deleted = !0);
    var te = Z._attachments && Object.keys(Z._attachments).length;
    if (te)
      return x(
        U,
        q,
        H,
        K,
        j,
        Q
      );
    p += V, N(), ae(
      U,
      q,
      H,
      K,
      j,
      Q
    );
  }
  function ae(U, q, H, ie, K, V) {
    var j = U.data, Q = U.metadata;
    j._doc_id_rev = Q.id + "::" + Q.rev, delete j._id, delete j._rev;
    function Z(Te) {
      var J = U.stemmedRevs || [];
      ie && r.auto_compaction && (J = J.concat(AE(U.metadata))), J && J.length && og(J, U.metadata.id, c), Q.seq = Te.target.result;
      var $e = tu(
        Q,
        q,
        H
      ), me = u.put($e);
      me.onsuccess = ge;
    }
    function te(Te) {
      Te.preventDefault(), Te.stopPropagation();
      var J = l.index("_doc_id_rev"), $e = J.getKey(j._doc_id_rev);
      $e.onsuccess = function(me) {
        var ye = l.put(j, me.target.result);
        ye.onsuccess = Z;
      };
    }
    function ge() {
      g[K] = {
        ok: !0,
        id: Q.id,
        rev: Q.rev
      }, w.set(U.metadata.id, U.metadata), L(U, Q.seq, V);
    }
    var G = l.put(j);
    G.onsuccess = Z, G.onerror = te;
  }
  function x(U, q, H, ie, K, V) {
    var j = U.data, Q = 0, Z = Object.keys(j._attachments);
    function te() {
      Q === Z.length && ae(
        U,
        q,
        H,
        ie,
        K,
        V
      );
    }
    function ge() {
      Q++, te();
    }
    Z.forEach(function(G) {
      var Te = U.data._attachments[G];
      if (Te.stub)
        Q++, te();
      else {
        var J = Te.data;
        delete Te.data, Te.revpos = parseInt(q, 10);
        var $e = Te.digest;
        B($e, J, ge);
      }
    });
  }
  function L(U, q, H) {
    var ie = 0, K = Object.keys(U.data._attachments || {});
    if (!K.length)
      return H();
    function V() {
      ++ie === K.length && H();
    }
    function j(Z) {
      var te = U.data._attachments[Z].digest, ge = h.put({
        seq: q,
        digestSeq: te + "::" + q
      });
      ge.onsuccess = V, ge.onerror = function(G) {
        G.preventDefault(), G.stopPropagation(), V();
      };
    }
    for (var Q = 0; Q < K.length; Q++)
      j(K[Q]);
  }
  function B(U, q, H) {
    var ie = f.count(U);
    ie.onsuccess = function(K) {
      var V = K.target.result;
      if (V)
        return H();
      var j = {
        digest: U,
        body: q
      }, Q = f.put(j);
      Q.onsuccess = H;
    };
  }
}
function ag(t, e, n, r, i) {
  r === -1 && (r = 1e3);
  var s = typeof t.getAll == "function" && typeof t.getAllKeys == "function" && r > 1 && !n, o, c, u;
  function l(b) {
    c = b.target.result, o && i(o, c, u);
  }
  function f(b) {
    o = b.target.result, c && i(o, c, u);
  }
  function h() {
    if (!o.length)
      return i();
    var b = o[o.length - 1], I;
    if (e && e.upper)
      try {
        I = IDBKeyRange.bound(
          b,
          e.upper,
          !0,
          e.upperOpen
        );
      } catch (C) {
        if (C.name === "DataError" && C.code === 0)
          return i();
      }
    else
      I = IDBKeyRange.lowerBound(b, !0);
    e = I, o = null, c = null, t.getAll(e, r).onsuccess = l, t.getAllKeys(e, r).onsuccess = f;
  }
  function _(b) {
    var I = b.target.result;
    if (!I)
      return i();
    i([I.key], [I.value], I);
  }
  s ? (u = { continue: h }, t.getAll(e, r).onsuccess = l, t.getAllKeys(e, r).onsuccess = f) : n ? t.openCursor(e, "prev").onsuccess = _ : t.openCursor(e).onsuccess = _;
}
function Yb(t, e, n) {
  if (typeof t.getAll == "function") {
    t.getAll(e).onsuccess = n;
    return;
  }
  var r = [];
  function i(s) {
    var o = s.target.result;
    o ? (r.push(o.value), o.continue()) : n({
      target: {
        result: r
      }
    });
  }
  t.openCursor(e).onsuccess = i;
}
function Jb(t, e, n) {
  var r = new Array(t.length), i = 0;
  t.forEach(function(s, o) {
    e.get(s).onsuccess = function(c) {
      c.target.result ? r[o] = c.target.result : r[o] = { key: s, error: "not_found" }, i++, i === t.length && n(t, r, {});
    };
  });
}
function Xb(t, e, n, r, i) {
  try {
    if (t && e)
      return i ? IDBKeyRange.bound(e, t, !n, !1) : IDBKeyRange.bound(t, e, !1, !n);
    if (t)
      return i ? IDBKeyRange.upperBound(t) : IDBKeyRange.lowerBound(t);
    if (e)
      return i ? IDBKeyRange.lowerBound(e, !n) : IDBKeyRange.upperBound(e, !n);
    if (r)
      return IDBKeyRange.only(r);
  } catch (s) {
    return { error: s };
  }
  return null;
}
function Zb(t, e, n) {
  var r = "startkey" in t ? t.startkey : !1, i = "endkey" in t ? t.endkey : !1, s = "key" in t ? t.key : !1, o = "keys" in t ? t.keys : !1, c = t.skip || 0, u = typeof t.limit == "number" ? t.limit : -1, l = t.inclusive_end !== !1, f, h;
  if (!o && (f = Xb(r, i, l, s, t.descending), h = f && f.error, h && !(h.name === "DataError" && h.code === 0)))
    return n(le(
      el,
      h.name,
      h.message
    ));
  var _ = [We, ot, St];
  t.attachments && _.push(Vt);
  var b = Ht(e, _, "readonly");
  if (b.error)
    return n(b.error);
  var I = b.txn;
  I.oncomplete = D, I.onabort = en(n);
  var C = I.objectStore(We), m = I.objectStore(ot), y = I.objectStore(St), E = m.index("_doc_id_rev"), p = [], g, w;
  y.get(St).onsuccess = function(k) {
    g = k.target.result.docCount;
  }, t.update_seq && (m.openKeyCursor(null, "prev").onsuccess = (k) => {
    var Y = k.target.result;
    Y && Y.key && (w = Y.key);
  });
  function S(k, Y, oe) {
    var ue = k.id + "::" + oe;
    E.get(ue).onsuccess = function(x) {
      if (Y.doc = jo(x.target.result) || {}, t.conflicts) {
        var L = ll(k);
        L.length && (Y.doc._conflicts = L);
      }
      sg(Y.doc, t, I);
    };
  }
  function R(k, Y) {
    var oe = {
      id: Y.id,
      key: Y.id,
      value: {
        rev: k
      }
    }, ue = Y.deleted;
    ue ? o && (p.push(oe), oe.value.deleted = !0, oe.doc = null) : c-- <= 0 && (p.push(oe), t.include_docs && S(Y, oe, k));
  }
  function T(k) {
    for (var Y = 0, oe = k.length; Y < oe && p.length !== u; Y++) {
      var ue = k[Y];
      if (ue.error && o) {
        p.push(ue);
        continue;
      }
      var ae = lr(ue), x = ae.winningRev;
      R(x, ae);
    }
  }
  function A(k, Y, oe) {
    oe && (T(Y), p.length < u && oe.continue());
  }
  function O(k) {
    var Y = k.target.result;
    t.descending && (Y = Y.reverse()), T(Y);
  }
  function N() {
    var k = {
      total_rows: g,
      offset: t.skip,
      rows: p
    };
    t.update_seq && w !== void 0 && (k.update_seq = w), n(null, k);
  }
  function D() {
    t.attachments ? nu(p, t.binary).then(N) : N();
  }
  if (!(h || u === 0)) {
    if (o)
      return Jb(o, C, A);
    if (u === -1)
      return Yb(C, f, O);
    ag(C, f, t.descending, u + c, A);
  }
}
function eT(t, e) {
  var n = t.objectStore(We).index("deletedOrLocal");
  n.count(IDBKeyRange.only("0")).onsuccess = function(r) {
    e(r.target.result);
  };
}
var ru = !1, iu = [];
function tT(t, e, n, r) {
  try {
    t(e, n);
  } catch (i) {
    r.emit("error", i);
  }
}
function Mf() {
  ru || !iu.length || (ru = !0, iu.shift()());
}
function nT(t, e, n) {
  iu.push(function() {
    t(function(s, o) {
      tT(e, s, o, n), ru = !1, an(function() {
        Mf();
      });
    });
  }), Mf();
}
function rT(t, e, n, r) {
  if (t = Ze(t), t.continuous) {
    var i = n + ":" + _a();
    return Xi.addListener(n, i, e, t), Xi.notify(n), {
      cancel: function() {
        Xi.removeListener(n, i);
      }
    };
  }
  var s = t.doc_ids && new Set(t.doc_ids);
  t.since = t.since || 0;
  var o = t.since, c = "limit" in t ? t.limit : -1;
  c === 0 && (c = 1);
  var u = [], l = 0, f = tl(t), h = /* @__PURE__ */ new Map(), _, b, I, C;
  function m(T, A, O) {
    if (!O || !T.length)
      return;
    var N = new Array(T.length), D = new Array(T.length);
    function k(ue, ae) {
      var x = t.processChange(ae, ue, t);
      o = x.seq = ue.seq;
      var L = f(x);
      return typeof L == "object" ? Promise.reject(L) : L ? (l++, t.return_docs && u.push(x), t.attachments && t.include_docs ? new Promise(function(B) {
        sg(ae, t, _, function() {
          nu([x], t.binary).then(function() {
            B(x);
          });
        });
      }) : Promise.resolve(x)) : Promise.resolve();
    }
    function Y() {
      for (var ue = [], ae = 0, x = N.length; ae < x && l !== c; ae++) {
        var L = N[ae];
        if (L) {
          var B = D[ae];
          ue.push(k(B, L));
        }
      }
      Promise.all(ue).then(function(U) {
        for (var q = 0, H = U.length; q < H; q++)
          U[q] && t.onChange(U[q]);
      }).catch(t.complete), l !== c && O.continue();
    }
    var oe = 0;
    A.forEach(function(ue, ae) {
      var x = jo(ue), L = T[ae];
      E(x, L, function(B, U) {
        D[ae] = B, N[ae] = U, ++oe === T.length && Y();
      });
    });
  }
  function y(T, A, O, N) {
    if (O.seq !== A)
      return N();
    if (O.winningRev === T._rev)
      return N(O, T);
    var D = T._id + "::" + O.winningRev, k = C.get(D);
    k.onsuccess = function(Y) {
      N(O, jo(Y.target.result));
    };
  }
  function E(T, A, O) {
    if (s && !s.has(T._id))
      return O();
    var N = h.get(T._id);
    if (N)
      return y(T, A, N, O);
    I.get(T._id).onsuccess = function(D) {
      N = lr(D.target.result), h.set(T._id, N), y(T, A, N, O);
    };
  }
  function p() {
    t.complete(null, {
      results: u,
      last_seq: o
    });
  }
  function g() {
    !t.continuous && t.attachments ? nu(u).then(p) : p();
  }
  var w = [We, ot];
  t.attachments && w.push(Vt);
  var S = Ht(r, w, "readonly");
  if (S.error)
    return t.complete(S.error);
  _ = S.txn, _.onabort = en(t.complete), _.oncomplete = g, b = _.objectStore(ot), I = _.objectStore(We), C = b.index("_doc_id_rev");
  var R = t.since && !t.descending ? IDBKeyRange.lowerBound(t.since, !0) : null;
  ag(b, R, t.descending, c, m);
}
var Br = /* @__PURE__ */ new Map(), pc, mc = /* @__PURE__ */ new Map();
function cg(t, e) {
  var n = this;
  nT(function(r) {
    iT(n, t, r);
  }, e, n.constructor);
}
function iT(t, e, n) {
  var r = e.name, i = null, s = null;
  t._meta = null;
  function o(m) {
    return function(y, E) {
      y && y instanceof Error && !y.reason && s && (y.reason = s), m(y, E);
    };
  }
  function c(m) {
    var y = m.createObjectStore(We, { keyPath: "id" });
    m.createObjectStore(ot, { autoIncrement: !0 }).createIndex("_doc_id_rev", "_doc_id_rev", { unique: !0 }), m.createObjectStore(Vt, { keyPath: "digest" }), m.createObjectStore(St, { keyPath: "id", autoIncrement: !1 }), m.createObjectStore(dc), y.createIndex("deletedOrLocal", "deletedOrLocal", { unique: !1 }), m.createObjectStore(Xt, { keyPath: "_id" });
    var E = m.createObjectStore(
      ur,
      { autoIncrement: !0 }
    );
    E.createIndex("seq", "seq"), E.createIndex("digestSeq", "digestSeq", { unique: !0 });
  }
  function u(m, y) {
    var E = m.objectStore(We);
    E.createIndex("deletedOrLocal", "deletedOrLocal", { unique: !1 }), E.openCursor().onsuccess = function(p) {
      var g = p.target.result;
      if (g) {
        var w = g.value, S = gn(w);
        w.deletedOrLocal = S ? "1" : "0", E.put(w), g.continue();
      } else
        y();
    };
  }
  function l(m) {
    m.createObjectStore(Xt, { keyPath: "_id" }).createIndex("_doc_id_rev", "_doc_id_rev", { unique: !0 });
  }
  function f(m, y) {
    var E = m.objectStore(Xt), p = m.objectStore(We), g = m.objectStore(ot), w = p.openCursor();
    w.onsuccess = function(S) {
      var R = S.target.result;
      if (R) {
        var T = R.value, A = T.id, O = dr(A), N = _r(T);
        if (O) {
          var D = A + "::" + N, k = A + "::", Y = A + "::~", oe = g.index("_doc_id_rev"), ue = IDBKeyRange.bound(k, Y, !1, !1), ae = oe.openCursor(ue);
          ae.onsuccess = function(x) {
            if (ae = x.target.result, !ae)
              p.delete(R.primaryKey), R.continue();
            else {
              var L = ae.value;
              L._doc_id_rev === D && E.put(L), g.delete(ae.primaryKey), ae.continue();
            }
          };
        } else
          R.continue();
      } else y && y();
    };
  }
  function h(m) {
    var y = m.createObjectStore(
      ur,
      { autoIncrement: !0 }
    );
    y.createIndex("seq", "seq"), y.createIndex("digestSeq", "digestSeq", { unique: !0 });
  }
  function _(m, y) {
    var E = m.objectStore(ot), p = m.objectStore(Vt), g = m.objectStore(ur), w = p.count();
    w.onsuccess = function(S) {
      var R = S.target.result;
      if (!R)
        return y();
      E.openCursor().onsuccess = function(T) {
        var A = T.target.result;
        if (!A)
          return y();
        for (var O = A.value, N = A.primaryKey, D = Object.keys(O._attachments || {}), k = {}, Y = 0; Y < D.length; Y++) {
          var oe = O._attachments[D[Y]];
          k[oe.digest] = !0;
        }
        var ue = Object.keys(k);
        for (Y = 0; Y < ue.length; Y++) {
          var ae = ue[Y];
          g.put({
            seq: N,
            digestSeq: ae + "::" + N
          });
        }
        A.continue();
      };
    };
  }
  function b(m) {
    function y(w) {
      return w.data ? lr(w) : (w.deleted = w.deletedOrLocal === "1", w);
    }
    var E = m.objectStore(ot), p = m.objectStore(We), g = p.openCursor();
    g.onsuccess = function(w) {
      var S = w.target.result;
      if (!S)
        return;
      var R = y(S.value);
      R.winningRev = R.winningRev || _r(R);
      function T() {
        var O = R.id + "::", N = R.id + "::￿", D = E.index("_doc_id_rev").openCursor(
          IDBKeyRange.bound(O, N)
        ), k = 0;
        D.onsuccess = function(Y) {
          var oe = Y.target.result;
          if (!oe)
            return R.seq = k, A();
          var ue = oe.primaryKey;
          ue > k && (k = ue), oe.continue();
        };
      }
      function A() {
        var O = tu(
          R,
          R.winningRev,
          R.deleted
        ), N = p.put(O);
        N.onsuccess = function() {
          S.continue();
        };
      }
      if (R.seq)
        return A();
      T();
    };
  }
  t._remote = !1, t.type = function() {
    return "idb";
  }, t._id = xm(function(m) {
    m(null, t._meta.instanceId);
  }), t._bulkDocs = function(y, E, p) {
    Qb(e, y, E, t, i, o(p));
  }, t._get = function(y, E, p) {
    var g, w, S, R = E.ctx;
    if (!R) {
      var T = Ht(
        i,
        [We, ot, Vt],
        "readonly"
      );
      if (T.error)
        return p(T.error);
      R = T.txn;
    }
    function A() {
      p(S, { doc: g, metadata: w, ctx: R });
    }
    R.objectStore(We).get(y).onsuccess = function(O) {
      if (w = lr(O.target.result), !w)
        return S = le(Mt, "missing"), A();
      var N;
      if (E.rev)
        N = E.latest ? LE(E.rev, w) : E.rev;
      else {
        N = w.winningRev;
        var D = gn(w);
        if (D)
          return S = le(Mt, "deleted"), A();
      }
      var k = R.objectStore(ot), Y = w.id + "::" + N;
      k.index("_doc_id_rev").get(Y).onsuccess = function(oe) {
        if (g = oe.target.result, g && (g = jo(g)), !g)
          return S = le(Mt, "missing"), A();
        A();
      };
    };
  }, t._getAttachment = function(m, y, E, p, g) {
    var w;
    if (p.ctx)
      w = p.ctx;
    else {
      var S = Ht(
        i,
        [We, ot, Vt],
        "readonly"
      );
      if (S.error)
        return g(S.error);
      w = S.txn;
    }
    var R = E.digest, T = E.content_type;
    w.objectStore(Vt).get(R).onsuccess = function(A) {
      var O = A.target.result.body;
      ig(O, T, p.binary, function(N) {
        g(null, N);
      });
    };
  }, t._info = function(y) {
    var E, p, g = Ht(i, [St, ot], "readonly");
    if (g.error)
      return y(g.error);
    var w = g.txn;
    w.objectStore(St).get(St).onsuccess = function(S) {
      p = S.target.result.docCount;
    }, w.objectStore(ot).openKeyCursor(null, "prev").onsuccess = function(S) {
      var R = S.target.result;
      E = R ? R.key : 0;
    }, w.oncomplete = function() {
      y(null, {
        doc_count: p,
        update_seq: E,
        // for debugging
        idb_attachment_format: t._meta.blobSupport ? "binary" : "base64"
      });
    };
  }, t._allDocs = function(y, E) {
    Zb(y, i, o(E));
  }, t._changes = function(y) {
    return rT(y, t, r, i);
  }, t._close = function(m) {
    i.close(), Br.delete(r), m();
  }, t._getRevisionTree = function(m, y) {
    var E = Ht(i, [We], "readonly");
    if (E.error)
      return y(E.error);
    var p = E.txn, g = p.objectStore(We).get(m);
    g.onsuccess = function(w) {
      var S = lr(w.target.result);
      S ? y(null, S.rev_tree) : y(le(Mt));
    };
  }, t._doCompaction = function(m, y, E) {
    var p = [
      We,
      ot,
      Vt,
      ur
    ], g = Ht(i, p, "readwrite");
    if (g.error)
      return E(g.error);
    var w = g.txn, S = w.objectStore(We);
    S.get(m).onsuccess = function(R) {
      var T = lr(R.target.result);
      vr(T.rev_tree, function(N, D, k, Y, oe) {
        var ue = D + "-" + k;
        y.indexOf(ue) !== -1 && (oe.status = "missing");
      }), og(y, m, w);
      var A = T.winningRev, O = T.deleted;
      w.objectStore(We).put(
        tu(T, A, O)
      );
    }, w.onabort = en(E), w.oncomplete = function() {
      E();
    };
  }, t._getLocal = function(m, y) {
    var E = Ht(i, [Xt], "readonly");
    if (E.error)
      return y(E.error);
    var p = E.txn, g = p.objectStore(Xt).get(m);
    g.onerror = en(y), g.onsuccess = function(w) {
      var S = w.target.result;
      S ? (delete S._doc_id_rev, y(null, S)) : y(le(Mt));
    };
  }, t._putLocal = function(m, y, E) {
    typeof y == "function" && (E = y, y = {}), delete m._revisions;
    var p = m._rev, g = m._id;
    p ? m._rev = "0-" + (parseInt(p.split("-")[1], 10) + 1) : m._rev = "0-1";
    var w = y.ctx, S;
    if (!w) {
      var R = Ht(i, [Xt], "readwrite");
      if (R.error)
        return E(R.error);
      w = R.txn, w.onerror = en(E), w.oncomplete = function() {
        S && E(null, S);
      };
    }
    var T = w.objectStore(Xt), A;
    p ? (A = T.get(g), A.onsuccess = function(O) {
      var N = O.target.result;
      if (!N || N._rev !== p)
        E(le(ti));
      else {
        var D = T.put(m);
        D.onsuccess = function() {
          S = { ok: !0, id: m._id, rev: m._rev }, y.ctx && E(null, S);
        };
      }
    }) : (A = T.add(m), A.onerror = function(O) {
      E(le(ti)), O.preventDefault(), O.stopPropagation();
    }, A.onsuccess = function() {
      S = { ok: !0, id: m._id, rev: m._rev }, y.ctx && E(null, S);
    });
  }, t._removeLocal = function(m, y, E) {
    typeof y == "function" && (E = y, y = {});
    var p = y.ctx;
    if (!p) {
      var g = Ht(i, [Xt], "readwrite");
      if (g.error)
        return E(g.error);
      p = g.txn, p.oncomplete = function() {
        w && E(null, w);
      };
    }
    var w, S = m._id, R = p.objectStore(Xt), T = R.get(S);
    T.onerror = en(E), T.onsuccess = function(A) {
      var O = A.target.result;
      !O || O._rev !== m._rev ? E(le(Mt)) : (R.delete(S), w = { ok: !0, id: S, rev: "0-0" }, y.ctx && E(null, w));
    };
  }, t._destroy = function(m, y) {
    Xi.removeAllListeners(r);
    var E = mc.get(r);
    E && E.result && (E.result.close(), Br.delete(r));
    var p = indexedDB.deleteDatabase(r);
    p.onsuccess = function() {
      mc.delete(r), Vo() && r in localStorage && delete localStorage[r], y(null, { ok: !0 });
    }, p.onerror = en(y);
  };
  var I = Br.get(r);
  if (I)
    return i = I.idb, t._meta = I.global, an(function() {
      n(null, t);
    });
  var C = indexedDB.open(r, Hb);
  mc.set(r, C), C.onupgradeneeded = function(m) {
    var y = m.target.result;
    if (m.oldVersion < 1)
      return c(y);
    var E = m.currentTarget.transaction;
    m.oldVersion < 3 && l(y), m.oldVersion < 4 && h(y);
    var p = [
      u,
      // v1 -> v2
      f,
      // v2 -> v3
      _,
      // v3 -> v4
      b
      // v4 -> v5
    ], g = m.oldVersion;
    function w() {
      var S = p[g - 1];
      g++, S && S(E, w);
    }
    w();
  }, C.onsuccess = function(m) {
    i = m.target.result, i.onversionchange = function() {
      i.close(), Br.delete(r);
    }, i.onabort = function(A) {
      jt("error", "Database has a global failure", A.target.error), s = A.target.error, i.close(), Br.delete(r);
    };
    var y = i.transaction([
      St,
      dc,
      We
    ], "readwrite"), E = !1, p, g, w, S;
    function R() {
      typeof w > "u" || !E || (t._meta = {
        name: r,
        instanceId: S,
        blobSupport: w
      }, Br.set(r, {
        idb: i,
        global: t._meta
      }), n(null, t));
    }
    function T() {
      if (!(typeof g > "u" || typeof p > "u")) {
        var A = r + "_id";
        A in p ? S = p[A] : p[A] = S = _a(), p.docCount = g, y.objectStore(St).put(p);
      }
    }
    y.objectStore(St).get(St).onsuccess = function(A) {
      p = A.target.result || { id: St }, T();
    }, eT(y, function(A) {
      g = A, T();
    }), pc || (pc = xb(y, dc, "key")), pc.then(function(A) {
      w = A, R();
    }), y.oncomplete = function() {
      E = !0, R();
    }, y.onabort = en(n);
  }, C.onerror = function(m) {
    var y = m.target.error && m.target.error.message;
    y ? y.indexOf("stored database is a higher version") !== -1 && (y = new Error('This DB was created with the newer "indexeddb" adapter, but you are trying to open it with the older "idb" adapter')) : y = "Failed to open indexedDB, are you in private browsing mode?", jt("error", y), n(le(el, y));
  };
}
cg.valid = function() {
  try {
    return typeof indexedDB < "u" && typeof IDBKeyRange < "u";
  } catch {
    return !1;
  }
};
function sT(t) {
  t.adapter("idb", cg, !0);
}
function oT(t, e) {
  return new Promise(function(n, r) {
    var i = 0, s = 0, o = 0, c = t.length, u;
    function l() {
      i++, t[s++]().then(h, _);
    }
    function f() {
      ++o === c ? u ? r(u) : n() : b();
    }
    function h() {
      i--, f();
    }
    function _(I) {
      i--, u = u || I, f();
    }
    function b() {
      for (; i < e && s < c; )
        l();
    }
    b();
  });
}
const aT = 25, cT = 50, oo = 5e3, uT = 1e4, gc = {};
function yc(t) {
  const e = t.doc || t.ok, n = e && e._attachments;
  n && Object.keys(n).forEach(function(r) {
    const i = n[r];
    i.data = ol(i.data, i.content_type);
  });
}
function ir(t) {
  return /^_design/.test(t) ? "_design/" + encodeURIComponent(t.slice(8)) : t.startsWith("_local/") ? "_local/" + encodeURIComponent(t.slice(7)) : encodeURIComponent(t);
}
function Vf(t) {
  return !t._attachments || !Object.keys(t._attachments) ? Promise.resolve() : Promise.all(Object.keys(t._attachments).map(function(e) {
    const n = t._attachments[e];
    if (n.data && typeof n.data != "string")
      return new Promise(function(r) {
        al(n.data, r);
      }).then(function(r) {
        n.data = r;
      });
  }));
}
function lT(t) {
  if (!t.prefix)
    return !1;
  const e = Um(t.prefix).protocol;
  return e === "http" || e === "https";
}
function hT(t, e) {
  if (lT(e)) {
    const i = e.name.substr(e.prefix.length);
    t = e.prefix.replace(/\/?$/, "/") + encodeURIComponent(i);
  }
  const n = Um(t);
  (n.user || n.password) && (n.auth = { username: n.user, password: n.password });
  const r = n.path.replace(/(^\/|\/$)/g, "").split("/");
  return n.db = r.pop(), n.db.indexOf("%") === -1 && (n.db = encodeURIComponent(n.db)), n.path = r.join("/"), n;
}
function Xe(t, e) {
  return Io(t, t.db + "/" + e);
}
function Io(t, e) {
  const n = t.path ? "/" : "";
  return t.protocol + "://" + t.host + (t.port ? ":" + t.port : "") + "/" + t.path + n + e;
}
function ao(t) {
  const e = Object.keys(t);
  return e.length === 0 ? "" : "?" + e.map((n) => n + "=" + encodeURIComponent(t[n])).join("&");
}
function fT(t) {
  const e = typeof navigator < "u" && navigator.userAgent ? navigator.userAgent.toLowerCase() : "", n = e.indexOf("msie") !== -1, r = e.indexOf("trident") !== -1, i = e.indexOf("edge") !== -1, s = !("method" in t) || t.method === "GET";
  return (n || r || i) && s;
}
function su(t, e) {
  const n = this, r = hT(t.name, t), i = Xe(r, "");
  t = Ze(t);
  const s = async function(h, _) {
    if (_ = _ || {}, _.headers = _.headers || new Qr(), _.credentials = "include", t.auth || r.auth) {
      const C = t.auth || r.auth, m = C.username + ":" + C.password, y = Ss(unescape(encodeURIComponent(m)));
      _.headers.set("Authorization", "Basic " + y);
    }
    const b = t.headers || {};
    return Object.keys(b).forEach(function(C) {
      _.headers.append(C, b[C]);
    }), fT(_) && (h += (h.indexOf("?") === -1 ? "?" : "&") + "_nonce=" + Date.now()), await (t.fetch || Ym)(h, _);
  };
  function o(h, _) {
    return ze(h, function(...b) {
      l().then(function() {
        return _.apply(this, b);
      }).catch(function(I) {
        b.pop()(I);
      });
    }).bind(n);
  }
  async function c(h, _) {
    const b = {};
    _ = _ || {}, _.headers = _.headers || new Qr(), _.headers.get("Content-Type") || _.headers.set("Content-Type", "application/json"), _.headers.get("Accept") || _.headers.set("Accept", "application/json");
    const I = await s(h, _);
    b.ok = I.ok, b.status = I.status;
    const C = await I.json();
    if (b.data = C, !b.ok)
      throw b.data.status = b.status, ni(b.data);
    return Array.isArray(b.data) && (b.data = b.data.map(function(m) {
      return m.error || m.missing ? ni(m) : m;
    })), b;
  }
  let u;
  async function l() {
    return t.skip_setup ? Promise.resolve() : u || (u = c(i).catch(function(h) {
      return h && h.status && h.status === 404 ? (Qc(404, "PouchDB is just detecting if the remote exists."), c(i, { method: "PUT" })) : Promise.reject(h);
    }).catch(function(h) {
      return h && h.status && h.status === 412 ? !0 : Promise.reject(h);
    }), u.catch(function() {
      u = null;
    }), u);
  }
  an(function() {
    e(null, n);
  }), n._remote = !0, n.type = function() {
    return "http";
  }, n.id = o("id", async function(h) {
    let _;
    try {
      _ = await (await s(Io(r, ""))).json();
    } catch {
      _ = {};
    }
    const b = _ && _.uuid ? _.uuid + r.db : Xe(r, "");
    h(null, b);
  }), n.compact = o("compact", async function(h, _) {
    typeof h == "function" && (_ = h, h = {}), h = Ze(h), await c(Xe(r, "_compact"), { method: "POST" });
    function b() {
      n.info(function(I, C) {
        C && !C.compact_running ? _(null, { ok: !0 }) : setTimeout(b, h.interval || 200);
      });
    }
    b();
  }), n.bulkGet = ze("bulkGet", function(h, _) {
    const b = this;
    async function I(E) {
      const p = {};
      h.revs && (p.revs = !0), h.attachments && (p.attachments = !0), h.latest && (p.latest = !0);
      try {
        const g = await c(Xe(r, "_bulk_get" + ao(p)), {
          method: "POST",
          body: JSON.stringify({ docs: h.docs })
        });
        h.attachments && h.binary && g.data.results.forEach(function(w) {
          w.docs.forEach(yc);
        }), E(null, g.data);
      } catch (g) {
        E(g);
      }
    }
    function C() {
      const E = cT, p = Math.ceil(h.docs.length / E);
      let g = 0;
      const w = new Array(p);
      function S(R) {
        return function(T, A) {
          w[R] = A.results, ++g === p && _(null, { results: w.flat() });
        };
      }
      for (let R = 0; R < p; R++) {
        const T = Is(h, ["revs", "attachments", "binary", "latest"]);
        T.docs = h.docs.slice(
          R * E,
          Math.min(h.docs.length, (R + 1) * E)
        ), Lm(b, T, S(R));
      }
    }
    const m = Io(r, ""), y = gc[m];
    typeof y != "boolean" ? I(function(E, p) {
      E ? (gc[m] = !1, Qc(
        E.status,
        "PouchDB is just detecting if the remote supports the _bulk_get API."
      ), C()) : (gc[m] = !0, _(null, p));
    }) : y ? I(_) : C();
  }), n._info = async function(h) {
    try {
      await l();
      const b = await (await s(Xe(r, ""))).json();
      b.host = Xe(r, ""), h(null, b);
    } catch (_) {
      h(_);
    }
  }, n.fetch = async function(h, _) {
    await l();
    const b = h.substring(0, 1) === "/" ? Io(r, h.substring(1)) : Xe(r, h);
    return s(b, _);
  }, n.get = o("get", async function(h, _, b) {
    typeof _ == "function" && (b = _, _ = {}), _ = Ze(_);
    const I = {};
    _.revs && (I.revs = !0), _.revs_info && (I.revs_info = !0), _.latest && (I.latest = !0), _.open_revs && (_.open_revs !== "all" && (_.open_revs = JSON.stringify(_.open_revs)), I.open_revs = _.open_revs), _.rev && (I.rev = _.rev), _.conflicts && (I.conflicts = _.conflicts), _.update_seq && (I.update_seq = _.update_seq), h = ir(h);
    function C(E) {
      const p = E._attachments, g = p && Object.keys(p);
      if (!p || !g.length)
        return;
      async function w(R) {
        const T = p[R], A = ir(E._id) + "/" + f(R) + "?rev=" + E._rev, O = await s(Xe(r, A));
        let N;
        "buffer" in O ? N = await O.buffer() : N = await O.blob();
        let D;
        if (_.binary) {
          const k = Object.getOwnPropertyDescriptor(N.__proto__, "type");
          (!k || k.set) && (N.type = T.content_type), D = N;
        } else
          D = await new Promise(function(k) {
            al(N, k);
          });
        delete T.stub, delete T.length, T.data = D;
      }
      const S = g.map(function(R) {
        return function() {
          return w(R);
        };
      });
      return oT(S, 5);
    }
    function m(E) {
      return Array.isArray(E) ? Promise.all(E.map(function(p) {
        if (p.ok)
          return C(p.ok);
      })) : C(E);
    }
    const y = Xe(r, h + ao(I));
    try {
      const E = await c(y);
      _.attachments && await m(E.data), b(null, E.data);
    } catch (E) {
      E.docId = h, b(E);
    }
  }), n.remove = o("remove", async function(h, _, b, I) {
    let C;
    typeof _ == "string" ? (C = {
      _id: h,
      _rev: _
    }, typeof b == "function" && (I = b, b = {})) : (C = h, typeof _ == "function" ? (I = _, b = {}) : (I = b, b = _));
    const m = C._rev || b.rev, y = Xe(r, ir(C._id)) + "?rev=" + m;
    try {
      const E = await c(y, { method: "DELETE" });
      I(null, E.data);
    } catch (E) {
      I(E);
    }
  });
  function f(h) {
    return h.split("/").map(encodeURIComponent).join("/");
  }
  n.getAttachment = o("getAttachment", async function(h, _, b, I) {
    typeof b == "function" && (I = b, b = {});
    const C = b.rev ? "?rev=" + b.rev : "", m = Xe(r, ir(h)) + "/" + f(_) + C;
    let y;
    try {
      const E = await s(m, { method: "GET" });
      if (!E.ok)
        throw E;
      y = E.headers.get("content-type");
      let p;
      if (typeof process < "u" && !process.browser && typeof E.buffer == "function" ? p = await E.buffer() : p = await E.blob(), typeof process < "u" && !process.browser) {
        const g = Object.getOwnPropertyDescriptor(p.__proto__, "type");
        (!g || g.set) && (p.type = y);
      }
      I(null, p);
    } catch (E) {
      I(E);
    }
  }), n.removeAttachment = o("removeAttachment", async function(h, _, b, I) {
    const C = Xe(r, ir(h) + "/" + f(_)) + "?rev=" + b;
    try {
      const m = await c(C, { method: "DELETE" });
      I(null, m.data);
    } catch (m) {
      I(m);
    }
  }), n.putAttachment = o("putAttachment", async function(h, _, b, I, C, m) {
    typeof C == "function" && (m = C, C = I, I = b, b = null);
    const y = ir(h) + "/" + f(_);
    let E = Xe(r, y);
    if (b && (E += "?rev=" + b), typeof I == "string") {
      let p;
      try {
        p = rl(I);
      } catch {
        return m(le(
          Vm,
          "Attachment is not a valid base64 string"
        ));
      }
      I = p ? sl(p, C) : "";
    }
    try {
      const p = await c(E, {
        headers: new Qr({ "Content-Type": C }),
        method: "PUT",
        body: I
      });
      m(null, p.data);
    } catch (p) {
      m(p);
    }
  }), n._bulkDocs = async function(h, _, b) {
    h.new_edits = _.new_edits;
    try {
      await l(), await Promise.all(h.docs.map(Vf));
      const I = await c(Xe(r, "_bulk_docs"), {
        method: "POST",
        body: JSON.stringify(h)
      });
      b(null, I.data);
    } catch (I) {
      b(I);
    }
  }, n._put = async function(h, _, b) {
    try {
      await l(), await Vf(h);
      const I = await c(Xe(r, ir(h._id)), {
        method: "PUT",
        body: JSON.stringify(h)
      });
      b(null, I.data);
    } catch (I) {
      I.docId = h && h._id, b(I);
    }
  }, n.allDocs = o("allDocs", async function(h, _) {
    typeof h == "function" && (_ = h, h = {}), h = Ze(h);
    const b = {};
    let I, C = "GET";
    h.conflicts && (b.conflicts = !0), h.update_seq && (b.update_seq = !0), h.descending && (b.descending = !0), h.include_docs && (b.include_docs = !0), h.attachments && (b.attachments = !0), h.key && (b.key = JSON.stringify(h.key)), h.start_key && (h.startkey = h.start_key), h.startkey && (b.startkey = JSON.stringify(h.startkey)), h.end_key && (h.endkey = h.end_key), h.endkey && (b.endkey = JSON.stringify(h.endkey)), typeof h.inclusive_end < "u" && (b.inclusive_end = !!h.inclusive_end), typeof h.limit < "u" && (b.limit = h.limit), typeof h.skip < "u" && (b.skip = h.skip);
    const m = ao(b);
    typeof h.keys < "u" && (C = "POST", I = { keys: h.keys });
    try {
      const y = await c(Xe(r, "_all_docs" + m), {
        method: C,
        body: JSON.stringify(I)
      });
      h.include_docs && h.attachments && h.binary && y.data.rows.forEach(yc), _(null, y.data);
    } catch (y) {
      _(y);
    }
  }), n._changes = function(h) {
    const _ = "batch_size" in h ? h.batch_size : aT;
    h = Ze(h), h.continuous && !("heartbeat" in h) && (h.heartbeat = uT);
    let b = "timeout" in h ? h.timeout : 30 * 1e3;
    "timeout" in h && h.timeout && b - h.timeout < oo && (b = h.timeout + oo), "heartbeat" in h && h.heartbeat && b - h.heartbeat < oo && (b = h.heartbeat + oo);
    const I = {};
    "timeout" in h && h.timeout && (I.timeout = h.timeout);
    const C = typeof h.limit < "u" ? h.limit : !1;
    let m = C;
    if (h.style && (I.style = h.style), (h.include_docs || h.filter && typeof h.filter == "function") && (I.include_docs = !0), h.attachments && (I.attachments = !0), h.continuous && (I.feed = "longpoll"), h.seq_interval && (I.seq_interval = h.seq_interval), h.conflicts && (I.conflicts = !0), h.descending && (I.descending = !0), h.update_seq && (I.update_seq = !0), "heartbeat" in h && h.heartbeat && (I.heartbeat = h.heartbeat), h.filter && typeof h.filter == "string" && (I.filter = h.filter), h.view && typeof h.view == "string" && (I.filter = "_view", I.view = h.view), h.query_params && typeof h.query_params == "object")
      for (const T in h.query_params)
        Object.prototype.hasOwnProperty.call(h.query_params, T) && (I[T] = h.query_params[T]);
    let y = "GET", E;
    h.doc_ids ? (I.filter = "_doc_ids", y = "POST", E = { doc_ids: h.doc_ids }) : h.selector && (I.filter = "_selector", y = "POST", E = { selector: h.selector });
    const p = new AbortController();
    let g;
    const w = async function(T, A) {
      if (h.aborted)
        return;
      I.since = T, typeof I.since == "object" && (I.since = JSON.stringify(I.since)), h.descending ? C && (I.limit = m) : I.limit = !C || m > _ ? _ : m;
      const O = Xe(r, "_changes" + ao(I)), N = {
        signal: p.signal,
        method: y,
        body: JSON.stringify(E)
      };
      if (g = T, !h.aborted)
        try {
          await l();
          const D = await c(O, N);
          A(null, D.data);
        } catch (D) {
          A(D);
        }
    }, S = { results: [] }, R = function(T, A) {
      if (h.aborted)
        return;
      let O = 0;
      if (A && A.results) {
        O = A.results.length, S.last_seq = A.last_seq;
        let D = null, k = null;
        typeof A.pending == "number" && (D = A.pending), (typeof S.last_seq == "string" || typeof S.last_seq == "number") && (k = S.last_seq), h.query_params, A.results = A.results.filter(function(Y) {
          m--;
          const oe = tl(h)(Y);
          return oe && (h.include_docs && h.attachments && h.binary && yc(Y), h.return_docs && S.results.push(Y), h.onChange(Y, D, k)), oe;
        });
      } else if (T) {
        h.aborted = !0, h.complete(T);
        return;
      }
      A && A.last_seq && (g = A.last_seq);
      const N = C && m <= 0 || A && O < _ || h.descending;
      h.continuous && !(C && m <= 0) || !N ? an(function() {
        w(g, R);
      }) : h.complete(null, S);
    };
    return w(h.since || 0, R), {
      cancel: function() {
        h.aborted = !0, p.abort();
      }
    };
  }, n.revsDiff = o("revsDiff", async function(h, _, b) {
    typeof _ == "function" && (b = _, _ = {});
    try {
      const I = await c(Xe(r, "_revs_diff"), {
        method: "POST",
        body: JSON.stringify(h)
      });
      b(null, I.data);
    } catch (I) {
      b(I);
    }
  }), n._close = function(h) {
    h();
  }, n._destroy = async function(h, _) {
    try {
      const b = await c(Xe(r, ""), { method: "DELETE" });
      _(null, b);
    } catch (b) {
      b.status === 404 ? _(null, { ok: !0 }) : _(b);
    }
  };
}
su.valid = function() {
  return !0;
};
function dT(t) {
  t.adapter("http", su, !1), t.adapter("https", su, !1);
}
class ar extends Error {
  constructor(e) {
    super(), this.status = 400, this.name = "query_parse_error", this.message = e, this.error = !0;
    try {
      Error.captureStackTrace(this, ar);
    } catch {
    }
  }
}
class va extends Error {
  constructor(e) {
    super(), this.status = 404, this.name = "not_found", this.message = e, this.error = !0;
    try {
      Error.captureStackTrace(this, va);
    } catch {
    }
  }
}
class wa extends Error {
  constructor(e) {
    super(), this.status = 500, this.name = "invalid_value", this.message = e, this.error = !0;
    try {
      Error.captureStackTrace(this, wa);
    } catch {
    }
  }
}
function ug(t, e) {
  return e && t.then(function(n) {
    an(function() {
      e(null, n);
    });
  }, function(n) {
    an(function() {
      e(n);
    });
  }), t;
}
function pT(t) {
  return function(...e) {
    var n = e.pop(), r = t.apply(this, e);
    return typeof n == "function" && ug(r, n), r;
  };
}
function mT(t, e) {
  return t.then(function(n) {
    return e().then(function() {
      return n;
    });
  }, function(n) {
    return e().then(function() {
      throw n;
    });
  });
}
function _c(t, e) {
  return function() {
    var n = arguments, r = this;
    return t.add(function() {
      return e.apply(r, n);
    });
  };
}
function Ff(t) {
  var e = new Set(t), n = new Array(e.size), r = -1;
  return e.forEach(function(i) {
    n[++r] = i;
  }), n;
}
function vc(t) {
  var e = new Array(t.size), n = -1;
  return t.forEach(function(r, i) {
    e[++n] = i;
  }), e;
}
function Uf(t) {
  var e = "builtin " + t + " function requires map values to be numbers or number arrays";
  return new wa(e);
}
function ou(t) {
  for (var e = 0, n = 0, r = t.length; n < r; n++) {
    var i = t[n];
    if (typeof i != "number")
      if (Array.isArray(i)) {
        e = typeof e == "number" ? [e] : e;
        for (var s = 0, o = i.length; s < o; s++) {
          var c = i[s];
          if (typeof c != "number")
            throw Uf("_sum");
          typeof e[s] > "u" ? e.push(c) : e[s] += c;
        }
      } else
        throw Uf("_sum");
    else typeof e == "number" ? e += i : e[0] += i;
  }
  return e;
}
var gT = jt.bind(null, "log"), yT = Array.isArray, _T = JSON.parse;
function lg(t, e) {
  return nl(
    "return (" + t.replace(/;\s*$/, "") + ");",
    {
      emit: e,
      sum: ou,
      log: gT,
      isArray: yT,
      toJSON: _T
    }
  );
}
class au {
  constructor() {
    this.promise = Promise.resolve();
  }
  add(e) {
    return this.promise = this.promise.catch(() => {
    }).then(() => e()), this.promise;
  }
  finish() {
    return this.promise;
  }
}
function jf(t) {
  if (!t)
    return "undefined";
  switch (typeof t) {
    case "function":
      return t.toString();
    case "string":
      return t.toString();
    default:
      return JSON.stringify(t);
  }
}
function vT(t, e) {
  return jf(t) + jf(e) + "undefined";
}
async function Bf(t, e, n, r, i, s) {
  const o = vT(n, r);
  let c;
  if (!i && (c = t._cachedViews = t._cachedViews || {}, c[o]))
    return c[o];
  const u = t.info().then(async function(l) {
    const f = l.db_name + "-mrview-" + (i ? "temp" : $m(o));
    function h(m) {
      m.views = m.views || {};
      let y = e;
      y.indexOf("/") === -1 && (y = e + "/" + e);
      const E = m.views[y] = m.views[y] || {};
      if (!E[f])
        return E[f] = !0, m;
    }
    await Fo(t, "_local/" + s, h);
    const b = (await t.registerDependentDatabase(f)).db;
    b.auto_compaction = !0;
    const I = {
      name: f,
      db: b,
      sourceDB: t,
      adapter: t.adapter,
      mapFun: n,
      reduceFun: r
    };
    let C;
    try {
      C = await I.db.get("_local/lastSeq");
    } catch (m) {
      if (m.status !== 404)
        throw m;
    }
    return I.seq = C ? C.seq : 0, c && I.db.once("destroyed", function() {
      delete c[o];
    }), I;
  });
  return c && (c[o] = u), u;
}
const $f = {}, qf = new au(), wT = 50;
function wc(t) {
  return t.indexOf("/") === -1 ? [t, t] : t.split("/");
}
function ET(t) {
  return t.length === 1 && /^1-/.test(t[0].rev);
}
function zf(t, e, n) {
  try {
    t.emit("error", e);
  } catch {
    jt(
      "error",
      `The user's map/reduce function threw an uncaught error.
You can debug this error by doing:
myDatabase.on('error', function (err) { debugger; });
Please double-check your map/reduce function.`
    ), jt("error", e, n);
  }
}
function bT(t, e, n, r) {
  function i(x, L, B) {
    try {
      L(B);
    } catch (U) {
      zf(x, U, { fun: L, doc: B });
    }
  }
  function s(x, L, B, U, q) {
    try {
      return { output: L(B, U, q) };
    } catch (H) {
      return zf(x, H, { fun: L, keys: B, values: U, rereduce: q }), { error: H };
    }
  }
  function o(x, L) {
    const B = He(x.key, L.key);
    return B !== 0 ? B : He(x.value, L.value);
  }
  function c(x, L, B) {
    return B = B || 0, typeof L == "number" ? x.slice(B, L + B) : B > 0 ? x.slice(B) : x;
  }
  function u(x) {
    const L = x.value;
    return L && typeof L == "object" && L._id || x.id;
  }
  function l(x) {
    for (const L of x.rows) {
      const B = L.doc && L.doc._attachments;
      if (B)
        for (const U of Object.keys(B)) {
          const q = B[U];
          B[U].data = ol(q.data, q.content_type);
        }
    }
  }
  function f(x) {
    return function(L) {
      return x.include_docs && x.attachments && x.binary && l(L), L;
    };
  }
  function h(x, L, B, U) {
    let q = L[x];
    typeof q < "u" && (U && (q = encodeURIComponent(JSON.stringify(q))), B.push(x + "=" + q));
  }
  function _(x) {
    if (typeof x < "u") {
      const L = Number(x);
      return !isNaN(L) && L === parseInt(x, 10) ? L : x;
    }
  }
  function b(x) {
    return x.group_level = _(x.group_level), x.limit = _(x.limit), x.skip = _(x.skip), x;
  }
  function I(x) {
    if (x) {
      if (typeof x != "number")
        return new ar(`Invalid value for integer: "${x}"`);
      if (x < 0)
        return new ar(`Invalid value for positive integer: "${x}"`);
    }
  }
  function C(x, L) {
    const B = x.descending ? "endkey" : "startkey", U = x.descending ? "startkey" : "endkey";
    if (typeof x[B] < "u" && typeof x[U] < "u" && He(x[B], x[U]) > 0)
      throw new ar("No rows can match your key range, reverse your start_key and end_key or set {descending : true}");
    if (L.reduce && x.reduce !== !1) {
      if (x.include_docs)
        throw new ar("{include_docs:true} is invalid for reduce");
      if (x.keys && x.keys.length > 1 && !x.group && !x.group_level)
        throw new ar("Multi-key fetches for reduce views must use {group: true}");
    }
    for (const q of ["group_level", "limit", "skip"]) {
      const H = I(x[q]);
      if (H)
        throw H;
    }
  }
  async function m(x, L, B) {
    let U = [], q, H = "GET", ie;
    if (h("reduce", B, U), h("include_docs", B, U), h("attachments", B, U), h("limit", B, U), h("descending", B, U), h("group", B, U), h("group_level", B, U), h("skip", B, U), h("stale", B, U), h("conflicts", B, U), h("startkey", B, U, !0), h("start_key", B, U, !0), h("endkey", B, U, !0), h("end_key", B, U, !0), h("inclusive_end", B, U), h("key", B, U, !0), h("update_seq", B, U), U = U.join("&"), U = U === "" ? "" : "?" + U, typeof B.keys < "u") {
      const Q = `keys=${encodeURIComponent(JSON.stringify(B.keys))}`;
      Q.length + U.length + 1 <= 2e3 ? U += (U[0] === "?" ? "&" : "?") + Q : (H = "POST", typeof L == "string" ? q = { keys: B.keys } : L.keys = B.keys);
    }
    if (typeof L == "string") {
      const j = wc(L), Q = await x.fetch("_design/" + j[0] + "/_view/" + j[1] + U, {
        headers: new Qr({ "Content-Type": "application/json" }),
        method: H,
        body: JSON.stringify(q)
      });
      ie = Q.ok;
      const Z = await Q.json();
      if (!ie)
        throw Z.status = Q.status, ni(Z);
      for (const te of Z.rows)
        if (te.value && te.value.error && te.value.error === "builtin_reduce_error")
          throw new Error(te.reason);
      return new Promise(function(te) {
        te(Z);
      }).then(f(B));
    }
    q = q || {};
    for (const j of Object.keys(L))
      Array.isArray(L[j]) ? q[j] = L[j] : q[j] = L[j].toString();
    const K = await x.fetch("_temp_view" + U, {
      headers: new Qr({ "Content-Type": "application/json" }),
      method: "POST",
      body: JSON.stringify(q)
    });
    ie = K.ok;
    const V = await K.json();
    if (!ie)
      throw V.status = K.status, ni(V);
    return new Promise(function(j) {
      j(V);
    }).then(f(B));
  }
  function y(x, L, B) {
    return new Promise(function(U, q) {
      x._query(L, B, function(H, ie) {
        if (H)
          return q(H);
        U(ie);
      });
    });
  }
  function E(x) {
    return new Promise(function(L, B) {
      x._viewCleanup(function(U, q) {
        if (U)
          return B(U);
        L(q);
      });
    });
  }
  function p(x) {
    return function(L) {
      if (L.status === 404)
        return x;
      throw L;
    };
  }
  async function g(x, L, B) {
    const U = "_local/doc_" + x, q = { _id: U, keys: [] }, H = B.get(x), ie = H[0], K = H[1];
    function V() {
      return ET(K) ? Promise.resolve(q) : L.db.get(U).catch(p(q));
    }
    function j(ge) {
      return ge.keys.length ? L.db.allDocs({
        keys: ge.keys,
        include_docs: !0
      }) : Promise.resolve({ rows: [] });
    }
    function Q(ge, G) {
      const Te = [], J = /* @__PURE__ */ new Set();
      for (const me of G.rows) {
        const ye = me.doc;
        if (ye && (Te.push(ye), J.add(ye._id), ye._deleted = !ie.has(ye._id), !ye._deleted)) {
          const Ie = ie.get(ye._id);
          "value" in Ie && (ye.value = Ie.value);
        }
      }
      const $e = vc(ie);
      for (const me of $e)
        if (!J.has(me)) {
          const ye = {
            _id: me
          }, Ie = ie.get(me);
          "value" in Ie && (ye.value = Ie.value), Te.push(ye);
        }
      return ge.keys = Ff($e.concat(ge.keys)), Te.push(ge), Te;
    }
    const Z = await V(), te = await j(Z);
    return Q(Z, te);
  }
  function w(x) {
    return x.sourceDB.get("_local/purges").then(function(L) {
      const B = L.purgeSeq;
      return x.db.get("_local/purgeSeq").then(function(U) {
        return U._rev;
      }).catch(p(void 0)).then(function(U) {
        return x.db.put({
          _id: "_local/purgeSeq",
          _rev: U,
          purgeSeq: B
        });
      });
    }).catch(function(L) {
      if (L.status !== 404)
        throw L;
    });
  }
  function S(x, L, B) {
    var U = "_local/lastSeq";
    return x.db.get(U).catch(p({ _id: U, seq: 0 })).then(function(q) {
      var H = vc(L);
      return Promise.all(H.map(function(ie) {
        return g(ie, x, L);
      })).then(function(ie) {
        var K = ie.flat();
        return q.seq = B, K.push(q), x.db.bulkDocs({ docs: K });
      }).then(() => w(x));
    });
  }
  function R(x) {
    const L = typeof x == "string" ? x : x.name;
    let B = $f[L];
    return B || (B = $f[L] = new au()), B;
  }
  async function T(x, L) {
    return _c(R(x), function() {
      return A(x, L);
    })();
  }
  async function A(x, L) {
    let B, U, q;
    function H(me, ye) {
      const Ie = { id: U._id, key: wr(me) };
      typeof ye < "u" && ye !== null && (Ie.value = wr(ye)), B.push(Ie);
    }
    const ie = e(x.mapFun, H);
    let K = x.seq || 0;
    function V() {
      return x.sourceDB.info().then(function(me) {
        q = x.sourceDB.activeTasks.add({
          name: "view_indexing",
          total_items: me.update_seq - K
        });
      });
    }
    function j(me, ye) {
      return function() {
        return S(x, me, ye);
      };
    }
    let Q = 0;
    const Z = {
      view: x.name,
      indexed_docs: Q
    };
    x.sourceDB.emit("indexing", Z);
    const te = new au();
    async function ge() {
      const me = await x.sourceDB.changes({
        return_docs: !0,
        conflicts: !0,
        include_docs: !0,
        style: "all_docs",
        since: K,
        limit: L.changes_batch_size
      }), ye = await G();
      return Te(me, ye);
    }
    function G() {
      return x.db.get("_local/purgeSeq").then(function(me) {
        return me.purgeSeq;
      }).catch(p(-1)).then(function(me) {
        return x.sourceDB.get("_local/purges").then(function(ye) {
          const Ie = ye.purges.filter(function(ft, qe) {
            return qe > me;
          }).map((ft) => ft.docId), Ct = Ie.filter(function(ft, qe) {
            return Ie.indexOf(ft) === qe;
          });
          return Promise.all(Ct.map(function(ft) {
            return x.sourceDB.get(ft).then(function(qe) {
              return { docId: ft, doc: qe };
            }).catch(p({ docId: ft }));
          }));
        }).catch(p([]));
      });
    }
    function Te(me, ye) {
      const Ie = me.results;
      if (!Ie.length && !ye.length)
        return;
      for (const qe of ye)
        if (Ie.findIndex(function(dn) {
          return dn.id === qe.docId;
        }) < 0) {
          const dn = {
            _id: qe.docId,
            doc: {
              _id: qe.docId,
              _deleted: 1
            },
            changes: []
          };
          qe.doc && (dn.doc = qe.doc, dn.changes.push({ rev: qe.doc._rev })), Ie.push(dn);
        }
      const Ct = J(Ie);
      te.add(j(Ct, K)), Q = Q + Ie.length;
      const ft = {
        view: x.name,
        last_seq: me.last_seq,
        results_count: Ie.length,
        indexed_docs: Q
      };
      if (x.sourceDB.emit("indexing", ft), x.sourceDB.activeTasks.update(q, { completed_items: Q }), !(Ie.length < L.changes_batch_size))
        return ge();
    }
    function J(me) {
      const ye = /* @__PURE__ */ new Map();
      for (const Ie of me) {
        if (Ie.doc._id[0] !== "_") {
          B = [], U = Ie.doc, U._deleted || i(x.sourceDB, ie, U), B.sort(o);
          const Ct = $e(B);
          ye.set(Ie.doc._id, [
            Ct,
            Ie.changes
          ]);
        }
        K = Ie.seq;
      }
      return ye;
    }
    function $e(me) {
      const ye = /* @__PURE__ */ new Map();
      let Ie;
      for (let Ct = 0, ft = me.length; Ct < ft; Ct++) {
        const qe = me[Ct], Si = [qe.key, qe.id];
        Ct > 0 && He(qe.key, Ie) === 0 && Si.push(Ct), ye.set(Kt(Si), qe), Ie = qe.key;
      }
      return ye;
    }
    try {
      await V(), await ge(), await te.finish(), x.seq = K, x.sourceDB.activeTasks.remove(q);
    } catch (me) {
      x.sourceDB.activeTasks.remove(q, me);
    }
  }
  function O(x, L, B) {
    B.group_level === 0 && delete B.group_level;
    const U = B.group || B.group_level, q = n(x.reduceFun), H = [], ie = isNaN(B.group_level) ? Number.POSITIVE_INFINITY : B.group_level;
    for (const K of L) {
      const V = H[H.length - 1];
      let j = U ? K.key : null;
      if (U && Array.isArray(j) && (j = j.slice(0, ie)), V && He(V.groupKey, j) === 0) {
        V.keys.push([K.key, K.id]), V.values.push(K.value);
        continue;
      }
      H.push({
        keys: [[K.key, K.id]],
        values: [K.value],
        groupKey: j
      });
    }
    L = [];
    for (const K of H) {
      const V = s(x.sourceDB, q, K.keys, K.values, !1);
      if (V.error && V.error instanceof wa)
        throw V.error;
      L.push({
        // CouchDB just sets the value to null if a non-built-in errors out
        value: V.error ? null : V.output,
        key: K.groupKey
      });
    }
    return { rows: c(L, B.limit, B.skip) };
  }
  function N(x, L) {
    return _c(R(x), function() {
      return D(x, L);
    })();
  }
  async function D(x, L) {
    let B;
    const U = x.reduceFun && L.reduce !== !1, q = L.skip || 0;
    typeof L.keys < "u" && !L.keys.length && (L.limit = 0, delete L.keys);
    async function H(K) {
      K.include_docs = !0;
      const V = await x.db.allDocs(K);
      return B = V.total_rows, V.rows.map(function(j) {
        if ("value" in j.doc && typeof j.doc.value == "object" && j.doc.value !== null) {
          const Z = Object.keys(j.doc.value).sort(), te = ["id", "key", "value"];
          if (!(Z < te || Z > te))
            return j.doc.value;
        }
        const Q = db(j.doc._id);
        return {
          key: Q[0],
          id: Q[1],
          value: "value" in j.doc ? j.doc.value : null
        };
      });
    }
    async function ie(K) {
      let V;
      if (U ? V = O(x, K, L) : typeof L.keys > "u" ? V = {
        total_rows: B,
        offset: q,
        rows: K
      } : V = {
        total_rows: B,
        offset: q,
        rows: c(K, L.limit, L.skip)
      }, L.update_seq && (V.update_seq = x.seq), L.include_docs) {
        const j = Ff(K.map(u)), Q = await x.sourceDB.allDocs({
          keys: j,
          include_docs: !0,
          conflicts: L.conflicts,
          attachments: L.attachments,
          binary: L.binary
        }), Z = /* @__PURE__ */ new Map();
        for (const te of Q.rows)
          Z.set(te.id, te.doc);
        for (const te of K) {
          const ge = u(te), G = Z.get(ge);
          G && (te.doc = G);
        }
      }
      return V;
    }
    if (typeof L.keys < "u") {
      const V = L.keys.map(function(Z) {
        const te = {
          startkey: Kt([Z]),
          endkey: Kt([Z, {}])
        };
        return L.update_seq && (te.update_seq = !0), H(te);
      }), Q = (await Promise.all(V)).flat();
      return ie(Q);
    } else {
      const K = {
        descending: L.descending
      };
      L.update_seq && (K.update_seq = !0);
      let V, j;
      if ("start_key" in L && (V = L.start_key), "startkey" in L && (V = L.startkey), "end_key" in L && (j = L.end_key), "endkey" in L && (j = L.endkey), typeof V < "u" && (K.startkey = L.descending ? Kt([V, {}]) : Kt([V])), typeof j < "u") {
        let Z = L.inclusive_end !== !1;
        L.descending && (Z = !Z), K.endkey = Kt(
          Z ? [j, {}] : [j]
        );
      }
      if (typeof L.key < "u") {
        const Z = Kt([L.key]), te = Kt([L.key, {}]);
        K.descending ? (K.endkey = Z, K.startkey = te) : (K.startkey = Z, K.endkey = te);
      }
      U || (typeof L.limit == "number" && (K.limit = L.limit), K.skip = q);
      const Q = await H(K);
      return ie(Q);
    }
  }
  async function k(x) {
    return (await x.fetch("_view_cleanup", {
      headers: new Qr({ "Content-Type": "application/json" }),
      method: "POST"
    })).json();
  }
  async function Y(x) {
    try {
      const L = await x.get("_local/" + t), B = /* @__PURE__ */ new Map();
      for (const V of Object.keys(L.views)) {
        const j = wc(V), Q = "_design/" + j[0], Z = j[1];
        let te = B.get(Q);
        te || (te = /* @__PURE__ */ new Set(), B.set(Q, te)), te.add(Z);
      }
      const U = {
        keys: vc(B),
        include_docs: !0
      }, q = await x.allDocs(U), H = {};
      for (const V of q.rows) {
        const j = V.key.substring(8);
        for (const Q of B.get(V.key)) {
          let Z = j + "/" + Q;
          L.views[Z] || (Z = Q);
          const te = Object.keys(L.views[Z]), ge = V.doc && V.doc.views && V.doc.views[Q];
          for (const G of te)
            H[G] = H[G] || ge;
        }
      }
      const K = Object.keys(H).filter(function(V) {
        return !H[V];
      }).map(function(V) {
        return _c(R(V), function() {
          return new x.constructor(V, x.__opts).destroy();
        })();
      });
      return Promise.all(K).then(function() {
        return { ok: !0 };
      });
    } catch (L) {
      if (L.status === 404)
        return { ok: !0 };
      throw L;
    }
  }
  async function oe(x, L, B) {
    if (typeof x._query == "function")
      return y(x, L, B);
    if (tn(x))
      return m(x, L, B);
    const U = {
      changes_batch_size: x.__opts.view_update_changes_batch_size || wT
    };
    if (typeof L != "string")
      return C(B, L), qf.add(async function() {
        const q = await Bf(
          /* sourceDB */
          x,
          /* viewName */
          "temp_view/temp_view",
          /* mapFun */
          L.map,
          /* reduceFun */
          L.reduce,
          /* temporary */
          !0,
          /* localDocName */
          t
        );
        return mT(
          T(q, U).then(
            function() {
              return N(q, B);
            }
          ),
          function() {
            return q.db.destroy();
          }
        );
      }), qf.finish();
    {
      const q = L, H = wc(q), ie = H[0], K = H[1], V = await x.get("_design/" + ie);
      if (L = V.views && V.views[K], !L)
        throw new va(`ddoc ${V._id} has no view named ${K}`);
      r(V, K), C(B, L);
      const j = await Bf(
        /* sourceDB */
        x,
        /* viewName */
        q,
        /* mapFun */
        L.map,
        /* reduceFun */
        L.reduce,
        /* temporary */
        !1,
        /* localDocName */
        t
      );
      return B.stale === "ok" || B.stale === "update_after" ? (B.stale === "update_after" && an(function() {
        T(j, U);
      }), N(j, B)) : (await T(j, U), N(j, B));
    }
  }
  function ue(x, L, B) {
    const U = this;
    typeof L == "function" && (B = L, L = {}), L = L ? b(L) : {}, typeof x == "function" && (x = { map: x });
    const q = Promise.resolve().then(function() {
      return oe(U, x, L);
    });
    return ug(q, B), q;
  }
  const ae = pT(function() {
    const x = this;
    return typeof x._viewCleanup == "function" ? E(x) : tn(x) ? k(x) : Y(x);
  });
  return {
    query: ue,
    viewCleanup: ae
  };
}
var Ec = {
  _sum: function(t, e) {
    return ou(e);
  },
  _count: function(t, e) {
    return e.length;
  },
  _stats: function(t, e) {
    function n(r) {
      for (var i = 0, s = 0, o = r.length; s < o; s++) {
        var c = r[s];
        i += c * c;
      }
      return i;
    }
    return {
      sum: ou(e),
      min: Math.min.apply(null, e),
      max: Math.max.apply(null, e),
      count: e.length,
      sumsqr: n(e)
    };
  }
};
function TT(t) {
  if (/^_sum/.test(t))
    return Ec._sum;
  if (/^_count/.test(t))
    return Ec._count;
  if (/^_stats/.test(t))
    return Ec._stats;
  if (/^_/.test(t))
    throw new Error(t + " is not a supported reduce function.");
}
function IT(t, e) {
  if (typeof t == "function" && t.length === 2) {
    var n = t;
    return function(r) {
      return n(r, e);
    };
  } else
    return lg(t.toString(), e);
}
function ST(t) {
  var e = t.toString(), n = TT(e);
  return n || lg(e);
}
function AT(t, e) {
  var n = t.views && t.views[e];
  if (typeof n.map != "string")
    throw new va("ddoc " + t._id + " has no string view named " + e + ", instead found object of type: " + typeof n.map);
}
var RT = "mrviews", hg = bT(RT, IT, ST, AT);
function CT(t, e, n) {
  return hg.query.call(this, t, e, n);
}
function PT(t) {
  return hg.viewCleanup.call(this, t);
}
var kT = {
  query: CT,
  viewCleanup: PT
};
function OT(t, e, n) {
  return !t._attachments || !t._attachments[n] || t._attachments[n].digest !== e._attachments[n].digest;
}
function Kf(t, e) {
  var n = Object.keys(e._attachments);
  return Promise.all(n.map(function(r) {
    return t.getAttachment(e._id, r, { rev: e._rev });
  }));
}
function NT(t, e, n) {
  var r = tn(e) && !tn(t), i = Object.keys(n._attachments);
  return r ? t.get(n._id).then(function(s) {
    return Promise.all(i.map(function(o) {
      return OT(s, n, o) ? e.getAttachment(n._id, o) : t.getAttachment(s._id, o);
    }));
  }).catch(function(s) {
    if (s.status !== 404)
      throw s;
    return Kf(e, n);
  }) : Kf(e, n);
}
function DT(t) {
  var e = [];
  return Object.keys(t).forEach(function(n) {
    var r = t[n].missing;
    r.forEach(function(i) {
      e.push({
        id: n,
        rev: i
      });
    });
  }), {
    docs: e,
    revs: !0,
    latest: !0
  };
}
function xT(t, e, n, r) {
  n = Ze(n);
  var i = [], s = !0;
  function o() {
    var u = DT(n);
    if (u.docs.length)
      return t.bulkGet(u).then(function(l) {
        if (r.cancelled)
          throw new Error("cancelled");
        return Promise.all(l.results.map(function(f) {
          return Promise.all(f.docs.map(function(h) {
            var _ = h.ok;
            return h.error && (s = !1), !_ || !_._attachments ? _ : NT(e, t, _).then((b) => {
              var I = Object.keys(_._attachments);
              return b.forEach(function(C, m) {
                var y = _._attachments[I[m]];
                delete y.stub, delete y.length, y.data = C;
              }), _;
            });
          }));
        })).then(function(f) {
          i = i.concat(f.flat().filter(Boolean));
        });
      });
  }
  function c() {
    return { ok: s, docs: i };
  }
  return Promise.resolve().then(o).then(c);
}
var Hf = 1, Gf = "pouchdb", LT = 5, zt = 0;
function cu(t, e, n, r, i) {
  return t.get(e).catch(function(s) {
    if (s.status === 404)
      return (t.adapter === "http" || t.adapter === "https") && Qc(
        404,
        "PouchDB is just checking if a remote checkpoint exists."
      ), {
        session_id: r,
        _id: e,
        history: [],
        replicator: Gf,
        version: Hf
      };
    throw s;
  }).then(function(s) {
    if (!i.cancelled && s.last_seq !== n)
      return s.history = (s.history || []).filter(function(o) {
        return o.session_id !== r;
      }), s.history.unshift({
        last_seq: n,
        session_id: r
      }), s.history = s.history.slice(0, LT), s.version = Hf, s.replicator = Gf, s.session_id = r, s.last_seq = n, t.put(s).catch(function(o) {
        if (o.status === 409)
          return cu(t, e, n, r, i);
        throw o;
      });
  });
}
class Wf {
  constructor(e, n, r, i, s = {
    writeSourceCheckpoint: !0,
    writeTargetCheckpoint: !0
  }) {
    this.src = e, this.target = n, this.id = r, this.returnValue = i, this.opts = s, typeof s.writeSourceCheckpoint > "u" && (s.writeSourceCheckpoint = !0), typeof s.writeTargetCheckpoint > "u" && (s.writeTargetCheckpoint = !0);
  }
  writeCheckpoint(e, n) {
    var r = this;
    return this.updateTarget(e, n).then(function() {
      return r.updateSource(e, n);
    });
  }
  updateTarget(e, n) {
    return this.opts.writeTargetCheckpoint ? cu(
      this.target,
      this.id,
      e,
      n,
      this.returnValue
    ) : Promise.resolve(!0);
  }
  updateSource(e, n) {
    if (this.opts.writeSourceCheckpoint) {
      var r = this;
      return cu(
        this.src,
        this.id,
        e,
        n,
        this.returnValue
      ).catch(function(i) {
        if (Yf(i))
          return r.opts.writeSourceCheckpoint = !1, !0;
        throw i;
      });
    } else
      return Promise.resolve(!0);
  }
  getCheckpoint() {
    var e = this;
    return !e.opts.writeSourceCheckpoint && !e.opts.writeTargetCheckpoint ? Promise.resolve(zt) : e.opts && e.opts.writeSourceCheckpoint && !e.opts.writeTargetCheckpoint ? e.src.get(e.id).then(function(n) {
      return n.last_seq || zt;
    }).catch(function(n) {
      if (n.status !== 404)
        throw n;
      return zt;
    }) : e.target.get(e.id).then(function(n) {
      return e.opts && e.opts.writeTargetCheckpoint && !e.opts.writeSourceCheckpoint ? n.last_seq || zt : e.src.get(e.id).then(function(r) {
        if (n.version !== r.version)
          return zt;
        var i;
        return n.version ? i = n.version.toString() : i = "undefined", i in Qf ? Qf[i](n, r) : zt;
      }, function(r) {
        if (r.status === 404 && n.last_seq)
          return e.src.put({
            _id: e.id,
            last_seq: zt
          }).then(function() {
            return zt;
          }, function(i) {
            return Yf(i) ? (e.opts.writeSourceCheckpoint = !1, n.last_seq) : zt;
          });
        throw r;
      });
    }).catch(function(n) {
      if (n.status !== 404)
        throw n;
      return zt;
    });
  }
}
var Qf = {
  undefined: function(t, e) {
    return He(t.last_seq, e.last_seq) === 0 ? e.last_seq : 0;
  },
  1: function(t, e) {
    return MT(e, t).last_seq;
  }
};
function MT(t, e) {
  return t.session_id === e.session_id ? {
    last_seq: t.last_seq,
    history: t.history
  } : fg(t.history, e.history);
}
function fg(t, e) {
  var n = t[0], r = t.slice(1), i = e[0], s = e.slice(1);
  if (!n || e.length === 0)
    return {
      last_seq: zt,
      history: []
    };
  var o = n.session_id;
  if (uu(o, e))
    return {
      last_seq: n.last_seq,
      history: t
    };
  var c = i.session_id;
  return uu(c, r) ? {
    last_seq: i.last_seq,
    history: s
  } : fg(r, s);
}
function uu(t, e) {
  var n = e[0], r = e.slice(1);
  return !t || e.length === 0 ? !1 : t === n.session_id ? !0 : uu(t, r);
}
function Yf(t) {
  return typeof t.status == "number" && Math.floor(t.status / 100) === 4;
}
function dg(t, e, n, r, i) {
  return this instanceof Wf ? dg : new Wf(t, e, n, r, i);
}
var Jf = 0;
function VT(t, e, n, r) {
  if (t.retry === !1) {
    e.emit("error", n), e.removeAllListeners();
    return;
  }
  if (typeof t.back_off_function != "function" && (t.back_off_function = oE), e.emit("requestError", n), e.state === "active" || e.state === "pending") {
    e.emit("paused", n), e.state = "stopped";
    var i = function() {
      t.current_back_off = Jf;
    }, s = function() {
      e.removeListener("active", i);
    };
    e.once("paused", s), e.once("active", i);
  }
  t.current_back_off = t.current_back_off || Jf, t.current_back_off = t.back_off_function(t.current_back_off), setTimeout(r, t.current_back_off);
}
function FT(t) {
  return Object.keys(t).sort(He).reduce(function(e, n) {
    return e[n] = t[n], e;
  }, {});
}
function UT(t, e, n) {
  var r = n.doc_ids ? n.doc_ids.sort(He) : "", i = n.filter ? n.filter.toString() : "", s = "", o = "", c = "";
  return n.selector && (c = JSON.stringify(n.selector)), n.filter && n.query_params && (s = JSON.stringify(FT(n.query_params))), n.filter && n.filter === "_view" && (o = n.view.toString()), Promise.all([t.id(), e.id()]).then(function(u) {
    var l = u[0] + u[1] + i + o + s + r + c;
    return new Promise(function(f) {
      cl(l, f);
    });
  }).then(function(u) {
    return u = u.replace(/\//g, ".").replace(/\+/g, "_"), "_local/" + u;
  });
}
function pg(t, e, n, r, i) {
  var s = [], o, c = {
    seq: 0,
    changes: [],
    docs: []
  }, u = !1, l = !1, f = !1, h = 0, _ = 0, b = n.continuous || n.live || !1, I = n.batch_size || 100, C = n.batches_limit || 10, m = n.style || "all_docs", y = !1, E = n.doc_ids, p = n.selector, g, w, S = [], R = _a(), T;
  i = i || {
    ok: !0,
    start_time: (/* @__PURE__ */ new Date()).toISOString(),
    docs_read: 0,
    docs_written: 0,
    doc_write_failures: 0,
    errors: []
  };
  var A = {};
  r.ready(t, e);
  function O() {
    return w ? Promise.resolve() : UT(t, e, n).then(function(V) {
      g = V;
      var j = {};
      n.checkpoint === !1 ? j = { writeSourceCheckpoint: !1, writeTargetCheckpoint: !1 } : n.checkpoint === "source" ? j = { writeSourceCheckpoint: !0, writeTargetCheckpoint: !1 } : n.checkpoint === "target" ? j = { writeSourceCheckpoint: !1, writeTargetCheckpoint: !0 } : j = { writeSourceCheckpoint: !0, writeTargetCheckpoint: !0 }, w = new dg(t, e, g, r, j);
    });
  }
  function N() {
    if (S = [], o.docs.length !== 0) {
      var V = o.docs, j = { timeout: n.timeout };
      return e.bulkDocs({ docs: V, new_edits: !1 }, j).then(function(Q) {
        if (r.cancelled)
          throw x(), new Error("cancelled");
        var Z = /* @__PURE__ */ Object.create(null);
        Q.forEach(function(ge) {
          ge.error && (Z[ge.id] = ge);
        });
        var te = Object.keys(Z).length;
        i.doc_write_failures += te, i.docs_written += V.length - te, V.forEach(function(ge) {
          var G = Z[ge._id];
          if (G) {
            i.errors.push(G);
            var Te = (G.name || "").toLowerCase();
            if (Te === "unauthorized" || Te === "forbidden")
              r.emit("denied", Ze(G));
            else
              throw G;
          } else
            S.push(ge);
        });
      }, function(Q) {
        throw i.doc_write_failures += V.length, Q;
      });
    }
  }
  function D() {
    if (o.error)
      throw new Error("There was a problem getting docs.");
    i.last_seq = _ = o.seq;
    var V = Ze(i);
    return S.length && (V.docs = S, typeof o.pending == "number" && (V.pending = o.pending, delete o.pending), r.emit("change", V)), u = !0, t.info().then(function(j) {
      var Q = t.activeTasks.get(T);
      if (!(!o || !Q)) {
        var Z = Q.completed_items || 0, te = parseInt(j.update_seq, 10) - parseInt(h, 10);
        t.activeTasks.update(T, {
          completed_items: Z + o.changes.length,
          total_items: te
        });
      }
    }), w.writeCheckpoint(
      o.seq,
      R
    ).then(function() {
      if (r.emit("checkpoint", { checkpoint: o.seq }), u = !1, r.cancelled)
        throw x(), new Error("cancelled");
      o = void 0, q();
    }).catch(function(j) {
      throw K(j), j;
    });
  }
  function k() {
    var V = {};
    return o.changes.forEach(function(j) {
      r.emit("checkpoint", { revs_diff: j }), j.id !== "_user/" && (V[j.id] = j.changes.map(function(Q) {
        return Q.rev;
      }));
    }), e.revsDiff(V).then(function(j) {
      if (r.cancelled)
        throw x(), new Error("cancelled");
      o.diffs = j;
    });
  }
  function Y() {
    return xT(t, e, o.diffs, r).then(function(V) {
      o.error = !V.ok, V.docs.forEach(function(j) {
        delete o.diffs[j._id], i.docs_read++, o.docs.push(j);
      });
    });
  }
  function oe() {
    if (!(r.cancelled || o)) {
      if (s.length === 0) {
        ue(!0);
        return;
      }
      o = s.shift(), r.emit("checkpoint", { start_next_batch: o.seq }), k().then(Y).then(N).then(D).then(oe).catch(function(V) {
        ae("batch processing terminated with error", V);
      });
    }
  }
  function ue(V) {
    if (c.changes.length === 0) {
      s.length === 0 && !o && ((b && A.live || l) && (r.state = "pending", r.emit("paused")), l && x());
      return;
    }
    (V || l || c.changes.length >= I) && (s.push(c), c = {
      seq: 0,
      changes: [],
      docs: []
    }, (r.state === "pending" || r.state === "stopped") && (r.state = "active", r.emit("active")), oe());
  }
  function ae(V, j) {
    f || (j.message || (j.message = V), i.ok = !1, i.status = "aborting", s = [], c = {
      seq: 0,
      changes: [],
      docs: []
    }, x(j));
  }
  function x(V) {
    if (!f && !(r.cancelled && (i.status = "cancelled", u)))
      if (i.status = i.status || "complete", i.end_time = (/* @__PURE__ */ new Date()).toISOString(), i.last_seq = _, f = !0, t.activeTasks.remove(T, V), V) {
        V = le(V), V.result = i;
        var j = (V.name || "").toLowerCase();
        j === "unauthorized" || j === "forbidden" ? (r.emit("error", V), r.removeAllListeners()) : VT(n, r, V, function() {
          pg(t, e, n, r);
        });
      } else
        r.emit("complete", i), r.removeAllListeners();
  }
  function L(V, j, Q) {
    if (r.cancelled)
      return x();
    typeof j == "number" && (c.pending = j);
    var Z = tl(n)(V);
    if (!Z) {
      var te = t.activeTasks.get(T);
      if (te) {
        var ge = te.completed_items || 0;
        t.activeTasks.update(T, { completed_items: ++ge });
      }
      return;
    }
    c.seq = V.seq || Q, c.changes.push(V), r.emit("checkpoint", { pending_batch: c.seq }), an(function() {
      ue(s.length === 0 && A.live);
    });
  }
  function B(V) {
    if (y = !1, r.cancelled)
      return x();
    if (V.results.length > 0)
      A.since = V.results[V.results.length - 1].seq, q(), ue(!0);
    else {
      var j = function() {
        b ? (A.live = !0, q()) : l = !0, ue(!0);
      };
      !o && V.results.length === 0 ? (u = !0, w.writeCheckpoint(
        V.last_seq,
        R
      ).then(function() {
        if (u = !1, i.last_seq = _ = V.last_seq, r.cancelled)
          throw x(), new Error("cancelled");
        j();
      }).catch(K)) : j();
    }
  }
  function U(V) {
    if (y = !1, r.cancelled)
      return x();
    ae("changes rejected", V);
  }
  function q() {
    if (!(!y && !l && s.length < C))
      return;
    y = !0;
    function V() {
      Q.cancel();
    }
    function j() {
      r.removeListener("cancel", V);
    }
    r._changes && (r.removeListener("cancel", r._abortChanges), r._changes.cancel()), r.once("cancel", V);
    var Q = t.changes(A).on("change", L);
    Q.then(j, j), Q.then(B).catch(U), n.retry && (r._changes = Q, r._abortChanges = V);
  }
  function H(V) {
    return t.info().then(function(j) {
      var Q = typeof n.since > "u" ? parseInt(j.update_seq, 10) - parseInt(V, 10) : parseInt(j.update_seq, 10);
      return T = t.activeTasks.add({
        name: `${b ? "continuous " : ""}replication from ${j.db_name}`,
        total_items: Q
      }), V;
    });
  }
  function ie() {
    O().then(function() {
      if (r.cancelled) {
        x();
        return;
      }
      return w.getCheckpoint().then(H).then(function(V) {
        _ = V, h = V, A = {
          since: _,
          limit: I,
          batch_size: I,
          style: m,
          doc_ids: E,
          selector: p,
          return_docs: !0
          // required so we know when we're done
        }, n.filter && (typeof n.filter != "string" ? A.include_docs = !0 : A.filter = n.filter), "heartbeat" in n && (A.heartbeat = n.heartbeat), "timeout" in n && (A.timeout = n.timeout), n.query_params && (A.query_params = n.query_params), n.view && (A.view = n.view), q();
      });
    }).catch(function(V) {
      ae("getCheckpoint rejected with ", V);
    });
  }
  function K(V) {
    u = !1, ae("writeCheckpoint completed with error", V);
  }
  if (r.cancelled) {
    x();
    return;
  }
  r._addedListeners || (r.once("cancel", x), typeof n.complete == "function" && (r.once("error", n.complete), r.once("complete", function(V) {
    n.complete(null, V);
  })), r._addedListeners = !0), typeof n.since > "u" ? ie() : O().then(function() {
    return u = !0, w.writeCheckpoint(n.since, R);
  }).then(function() {
    if (u = !1, r.cancelled) {
      x();
      return;
    }
    _ = n.since, ie();
  }).catch(K);
}
class jT extends bn {
  constructor() {
    super(), this.cancelled = !1, this.state = "pending";
    const e = new Promise((n, r) => {
      this.once("complete", n), this.once("error", r);
    });
    this.then = function(n, r) {
      return e.then(n, r);
    }, this.catch = function(n) {
      return e.catch(n);
    }, this.catch(function() {
    });
  }
  cancel() {
    this.cancelled = !0, this.state = "cancelled", this.emit("cancel");
  }
  ready(e, n) {
    if (this._readyCalled)
      return;
    this._readyCalled = !0;
    const r = () => {
      this.cancel();
    };
    e.once("destroyed", r), n.once("destroyed", r);
    function i() {
      e.removeListener("destroyed", r), n.removeListener("destroyed", r);
    }
    this.once("complete", i), this.once("error", i);
  }
}
function Bo(t, e) {
  var n = e.PouchConstructor;
  return typeof t == "string" ? new n(t, e) : t;
}
function lu(t, e, n, r) {
  if (typeof n == "function" && (r = n, n = {}), typeof n > "u" && (n = {}), n.doc_ids && !Array.isArray(n.doc_ids))
    throw le(
      ya,
      "`doc_ids` filter parameter is not a list."
    );
  n.complete = r, n = Ze(n), n.continuous = n.continuous || n.live, n.retry = "retry" in n ? n.retry : !1, n.PouchConstructor = n.PouchConstructor || this;
  var i = new jT(n), s = Bo(t, n), o = Bo(e, n);
  return pg(s, o, n, i), i;
}
function BT(t, e, n, r) {
  return typeof n == "function" && (r = n, n = {}), typeof n > "u" && (n = {}), n = Ze(n), n.PouchConstructor = n.PouchConstructor || this, t = Bo(t, n), e = Bo(e, n), new $T(t, e, n, r);
}
class $T extends bn {
  constructor(e, n, r, i) {
    super(), this.canceled = !1;
    const s = r.push ? Object.assign({}, r, r.push) : r, o = r.pull ? Object.assign({}, r, r.pull) : r;
    this.push = lu(e, n, s), this.pull = lu(n, e, o), this.pushPaused = !0, this.pullPaused = !0;
    const c = (p) => {
      this.emit("change", {
        direction: "pull",
        change: p
      });
    }, u = (p) => {
      this.emit("change", {
        direction: "push",
        change: p
      });
    }, l = (p) => {
      this.emit("denied", {
        direction: "push",
        doc: p
      });
    }, f = (p) => {
      this.emit("denied", {
        direction: "pull",
        doc: p
      });
    }, h = () => {
      this.pushPaused = !0, this.pullPaused && this.emit("paused");
    }, _ = () => {
      this.pullPaused = !0, this.pushPaused && this.emit("paused");
    }, b = () => {
      this.pushPaused = !1, this.pullPaused && this.emit("active", {
        direction: "push"
      });
    }, I = () => {
      this.pullPaused = !1, this.pushPaused && this.emit("active", {
        direction: "pull"
      });
    };
    let C = {};
    const m = (p) => (g, w) => {
      (g === "change" && (w === c || w === u) || g === "denied" && (w === f || w === l) || g === "paused" && (w === _ || w === h) || g === "active" && (w === I || w === b)) && (g in C || (C[g] = {}), C[g][p] = !0, Object.keys(C[g]).length === 2 && this.removeAllListeners(g));
    };
    r.live && (this.push.on("complete", this.pull.cancel.bind(this.pull)), this.pull.on("complete", this.push.cancel.bind(this.push)));
    function y(p, g, w) {
      p.listeners(g).indexOf(w) == -1 && p.on(g, w);
    }
    this.on("newListener", function(p) {
      p === "change" ? (y(this.pull, "change", c), y(this.push, "change", u)) : p === "denied" ? (y(this.pull, "denied", f), y(this.push, "denied", l)) : p === "active" ? (y(this.pull, "active", I), y(this.push, "active", b)) : p === "paused" && (y(this.pull, "paused", _), y(this.push, "paused", h));
    }), this.on("removeListener", function(p) {
      p === "change" ? (this.pull.removeListener("change", c), this.push.removeListener("change", u)) : p === "denied" ? (this.pull.removeListener("denied", f), this.push.removeListener("denied", l)) : p === "active" ? (this.pull.removeListener("active", I), this.push.removeListener("active", b)) : p === "paused" && (this.pull.removeListener("paused", _), this.push.removeListener("paused", h));
    }), this.pull.on("removeListener", m("pull")), this.push.on("removeListener", m("push"));
    const E = Promise.all([
      this.push,
      this.pull
    ]).then((p) => {
      const g = {
        push: p[0],
        pull: p[1]
      };
      return this.emit("complete", g), i && i(null, g), this.removeAllListeners(), g;
    }, (p) => {
      if (this.cancel(), i ? i(p) : this.emit("error", p), this.removeAllListeners(), i)
        throw p;
    });
    this.then = function(p, g) {
      return E.then(p, g);
    }, this.catch = function(p) {
      return E.catch(p);
    };
  }
  cancel() {
    this.canceled || (this.canceled = !0, this.push.cancel(), this.pull.cancel());
  }
}
function qT(t) {
  t.replicate = lu, t.sync = BT, Object.defineProperty(t.prototype, "replicate", {
    get: function() {
      var e = this;
      return typeof this.replicateMethods > "u" && (this.replicateMethods = {
        from: function(n, r, i) {
          return e.constructor.replicate(n, e, r, i);
        },
        to: function(n, r, i) {
          return e.constructor.replicate(e, n, r, i);
        }
      }), this.replicateMethods;
    }
  }), t.prototype.sync = function(e, n, r) {
    return this.constructor.sync(this, e, n, r);
  };
}
pe.plugin(sT).plugin(dT).plugin(kT).plugin(qT);
function st(t) {
  return `Minified Redux error #${t}; visit https://redux.js.org/Errors?code=${t} for the full message or use the non-minified dev environment for full errors. `;
}
var zT = typeof Symbol == "function" && Symbol.observable || "@@observable", Xf = zT, bc = () => Math.random().toString(36).substring(7).split("").join("."), KT = {
  INIT: `@@redux/INIT${/* @__PURE__ */ bc()}`,
  REPLACE: `@@redux/REPLACE${/* @__PURE__ */ bc()}`,
  PROBE_UNKNOWN_ACTION: () => `@@redux/PROBE_UNKNOWN_ACTION${bc()}`
}, pr = KT;
function As(t) {
  if (typeof t != "object" || t === null)
    return !1;
  let e = t;
  for (; Object.getPrototypeOf(e) !== null; )
    e = Object.getPrototypeOf(e);
  return Object.getPrototypeOf(t) === e || Object.getPrototypeOf(t) === null;
}
function HT(t) {
  if (t === void 0)
    return "undefined";
  if (t === null)
    return "null";
  const e = typeof t;
  switch (e) {
    case "boolean":
    case "string":
    case "number":
    case "symbol":
    case "function":
      return e;
  }
  if (Array.isArray(t))
    return "array";
  if (QT(t))
    return "date";
  if (WT(t))
    return "error";
  const n = GT(t);
  switch (n) {
    case "Symbol":
    case "Promise":
    case "WeakMap":
    case "WeakSet":
    case "Map":
    case "Set":
      return n;
  }
  return Object.prototype.toString.call(t).slice(8, -1).toLowerCase().replace(/\s/g, "");
}
function GT(t) {
  return typeof t.constructor == "function" ? t.constructor.name : null;
}
function WT(t) {
  return t instanceof Error || typeof t.message == "string" && t.constructor && typeof t.constructor.stackTraceLimit == "number";
}
function QT(t) {
  return t instanceof Date ? !0 : typeof t.toDateString == "function" && typeof t.getDate == "function" && typeof t.setDate == "function";
}
function xn(t) {
  let e = typeof t;
  return process.env.NODE_ENV !== "production" && (e = HT(t)), e;
}
function mg(t, e, n) {
  if (typeof t != "function")
    throw new Error(process.env.NODE_ENV === "production" ? st(2) : `Expected the root reducer to be a function. Instead, received: '${xn(t)}'`);
  if (typeof e == "function" && typeof n == "function" || typeof n == "function" && typeof arguments[3] == "function")
    throw new Error(process.env.NODE_ENV === "production" ? st(0) : "It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
  if (typeof e == "function" && typeof n > "u" && (n = e, e = void 0), typeof n < "u") {
    if (typeof n != "function")
      throw new Error(process.env.NODE_ENV === "production" ? st(1) : `Expected the enhancer to be a function. Instead, received: '${xn(n)}'`);
    return n(mg)(t, e);
  }
  let r = t, i = e, s = /* @__PURE__ */ new Map(), o = s, c = 0, u = !1;
  function l() {
    o === s && (o = /* @__PURE__ */ new Map(), s.forEach((m, y) => {
      o.set(y, m);
    }));
  }
  function f() {
    if (u)
      throw new Error(process.env.NODE_ENV === "production" ? st(3) : "You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
    return i;
  }
  function h(m) {
    if (typeof m != "function")
      throw new Error(process.env.NODE_ENV === "production" ? st(4) : `Expected the listener to be a function. Instead, received: '${xn(m)}'`);
    if (u)
      throw new Error(process.env.NODE_ENV === "production" ? st(5) : "You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.");
    let y = !0;
    l();
    const E = c++;
    return o.set(E, m), function() {
      if (y) {
        if (u)
          throw new Error(process.env.NODE_ENV === "production" ? st(6) : "You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.");
        y = !1, l(), o.delete(E), s = null;
      }
    };
  }
  function _(m) {
    if (!As(m))
      throw new Error(process.env.NODE_ENV === "production" ? st(7) : `Actions must be plain objects. Instead, the actual type was: '${xn(m)}'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`);
    if (typeof m.type > "u")
      throw new Error(process.env.NODE_ENV === "production" ? st(8) : 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
    if (typeof m.type != "string")
      throw new Error(process.env.NODE_ENV === "production" ? st(17) : `Action "type" property must be a string. Instead, the actual type was: '${xn(m.type)}'. Value was: '${m.type}' (stringified)`);
    if (u)
      throw new Error(process.env.NODE_ENV === "production" ? st(9) : "Reducers may not dispatch actions.");
    try {
      u = !0, i = r(i, m);
    } finally {
      u = !1;
    }
    return (s = o).forEach((E) => {
      E();
    }), m;
  }
  function b(m) {
    if (typeof m != "function")
      throw new Error(process.env.NODE_ENV === "production" ? st(10) : `Expected the nextReducer to be a function. Instead, received: '${xn(m)}`);
    r = m, _({
      type: pr.REPLACE
    });
  }
  function I() {
    const m = h;
    return {
      /**
       * The minimal observable subscription method.
       * @param observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
      subscribe(y) {
        if (typeof y != "object" || y === null)
          throw new Error(process.env.NODE_ENV === "production" ? st(11) : `Expected the observer to be an object. Instead, received: '${xn(y)}'`);
        function E() {
          const g = y;
          g.next && g.next(f());
        }
        return E(), {
          unsubscribe: m(E)
        };
      },
      [Xf]() {
        return this;
      }
    };
  }
  return _({
    type: pr.INIT
  }), {
    dispatch: _,
    subscribe: h,
    getState: f,
    replaceReducer: b,
    [Xf]: I
  };
}
function Zf(t) {
  typeof console < "u" && typeof console.error == "function" && console.error(t);
  try {
    throw new Error(t);
  } catch {
  }
}
function YT(t, e, n, r) {
  const i = Object.keys(e), s = n && n.type === pr.INIT ? "preloadedState argument passed to createStore" : "previous state received by the reducer";
  if (i.length === 0)
    return "Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.";
  if (!As(t))
    return `The ${s} has unexpected type of "${xn(t)}". Expected argument to be an object with the following keys: "${i.join('", "')}"`;
  const o = Object.keys(t).filter((c) => !e.hasOwnProperty(c) && !r[c]);
  if (o.forEach((c) => {
    r[c] = !0;
  }), !(n && n.type === pr.REPLACE) && o.length > 0)
    return `Unexpected ${o.length > 1 ? "keys" : "key"} "${o.join('", "')}" found in ${s}. Expected to find one of the known reducer keys instead: "${i.join('", "')}". Unexpected keys will be ignored.`;
}
function JT(t) {
  Object.keys(t).forEach((e) => {
    const n = t[e];
    if (typeof n(void 0, {
      type: pr.INIT
    }) > "u")
      throw new Error(process.env.NODE_ENV === "production" ? st(12) : `The slice reducer for key "${e}" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.`);
    if (typeof n(void 0, {
      type: pr.PROBE_UNKNOWN_ACTION()
    }) > "u")
      throw new Error(process.env.NODE_ENV === "production" ? st(13) : `The slice reducer for key "${e}" returned undefined when probed with a random type. Don't try to handle '${pr.INIT}' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.`);
  });
}
function XT(t) {
  const e = Object.keys(t), n = {};
  for (let o = 0; o < e.length; o++) {
    const c = e[o];
    process.env.NODE_ENV !== "production" && typeof t[c] > "u" && Zf(`No reducer provided for key "${c}"`), typeof t[c] == "function" && (n[c] = t[c]);
  }
  const r = Object.keys(n);
  let i;
  process.env.NODE_ENV !== "production" && (i = {});
  let s;
  try {
    JT(n);
  } catch (o) {
    s = o;
  }
  return function(c = {}, u) {
    if (s)
      throw s;
    if (process.env.NODE_ENV !== "production") {
      const h = YT(c, n, u, i);
      h && Zf(h);
    }
    let l = !1;
    const f = {};
    for (let h = 0; h < r.length; h++) {
      const _ = r[h], b = n[_], I = c[_], C = b(I, u);
      if (typeof C > "u") {
        const m = u && u.type;
        throw new Error(process.env.NODE_ENV === "production" ? st(14) : `When called with an action of type ${m ? `"${String(m)}"` : "(unknown type)"}, the slice reducer for key "${_}" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.`);
      }
      f[_] = C, l = l || C !== I;
    }
    return l = l || r.length !== Object.keys(c).length, l ? f : c;
  };
}
function $o(...t) {
  return t.length === 0 ? (e) => e : t.length === 1 ? t[0] : t.reduce((e, n) => (...r) => e(n(...r)));
}
function ZT(...t) {
  return (e) => (n, r) => {
    const i = e(n, r);
    let s = () => {
      throw new Error(process.env.NODE_ENV === "production" ? st(15) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
    };
    const o = {
      getState: i.getState,
      dispatch: (u, ...l) => s(u, ...l)
    }, c = t.map((u) => u(o));
    return s = $o(...c)(i.dispatch), {
      ...i,
      dispatch: s
    };
  };
}
function dl(t) {
  return As(t) && "type" in t && typeof t.type == "string";
}
var gg = Symbol.for("immer-nothing"), ed = Symbol.for("immer-draftable"), xt = Symbol.for("immer-state"), eI = process.env.NODE_ENV !== "production" ? [
  // All error codes, starting by 0:
  function(t) {
    return `The plugin for '${t}' has not been loaded into Immer. To enable the plugin, import and call \`enable${t}()\` when initializing your application.`;
  },
  function(t) {
    return `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${t}'`;
  },
  "This object has been frozen and should not be mutated",
  function(t) {
    return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + t;
  },
  "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.",
  "Immer forbids circular references",
  "The first or second argument to `produce` must be a function",
  "The third argument to `produce` must be a function or undefined",
  "First argument to `createDraft` must be a plain object, an array, or an immerable object",
  "First argument to `finishDraft` must be a draft returned by `createDraft`",
  function(t) {
    return `'current' expects a draft, got: ${t}`;
  },
  "Object.defineProperty() cannot be used on an Immer draft",
  "Object.setPrototypeOf() cannot be used on an Immer draft",
  "Immer only supports deleting array indices",
  "Immer only supports setting array indices and the 'length' property",
  function(t) {
    return `'original' expects a draft, got: ${t}`;
  }
  // Note: if more errors are added, the errorOffset in Patches.ts should be increased
  // See Patches.ts for additional errors
] : [];
function Pt(t, ...e) {
  if (process.env.NODE_ENV !== "production") {
    const n = eI[t], r = typeof n == "function" ? n.apply(null, e) : n;
    throw new Error(`[Immer] ${r}`);
  }
  throw new Error(
    `[Immer] minified error nr: ${t}. Full error at: https://bit.ly/3cXEKWf`
  );
}
var ri = Object.getPrototypeOf;
function cn(t) {
  return !!t && !!t[xt];
}
function Tn(t) {
  var e;
  return t ? yg(t) || Array.isArray(t) || !!t[ed] || !!((e = t.constructor) != null && e[ed]) || ba(t) || Ta(t) : !1;
}
var tI = Object.prototype.constructor.toString();
function yg(t) {
  if (!t || typeof t != "object")
    return !1;
  const e = ri(t);
  if (e === null)
    return !0;
  const n = Object.hasOwnProperty.call(e, "constructor") && e.constructor;
  return n === Object ? !0 : typeof n == "function" && Function.toString.call(n) === tI;
}
function qo(t, e) {
  Ea(t) === 0 ? Reflect.ownKeys(t).forEach((n) => {
    e(n, t[n], t);
  }) : t.forEach((n, r) => e(r, n, t));
}
function Ea(t) {
  const e = t[xt];
  return e ? e.type_ : Array.isArray(t) ? 1 : ba(t) ? 2 : Ta(t) ? 3 : 0;
}
function hu(t, e) {
  return Ea(t) === 2 ? t.has(e) : Object.prototype.hasOwnProperty.call(t, e);
}
function _g(t, e, n) {
  const r = Ea(t);
  r === 2 ? t.set(e, n) : r === 3 ? t.add(n) : t[e] = n;
}
function nI(t, e) {
  return t === e ? t !== 0 || 1 / t === 1 / e : t !== t && e !== e;
}
function ba(t) {
  return t instanceof Map;
}
function Ta(t) {
  return t instanceof Set;
}
function sr(t) {
  return t.copy_ || t.base_;
}
function fu(t, e) {
  if (ba(t))
    return new Map(t);
  if (Ta(t))
    return new Set(t);
  if (Array.isArray(t))
    return Array.prototype.slice.call(t);
  const n = yg(t);
  if (e === !0 || e === "class_only" && !n) {
    const r = Object.getOwnPropertyDescriptors(t);
    delete r[xt];
    let i = Reflect.ownKeys(r);
    for (let s = 0; s < i.length; s++) {
      const o = i[s], c = r[o];
      c.writable === !1 && (c.writable = !0, c.configurable = !0), (c.get || c.set) && (r[o] = {
        configurable: !0,
        writable: !0,
        // could live with !!desc.set as well here...
        enumerable: c.enumerable,
        value: t[o]
      });
    }
    return Object.create(ri(t), r);
  } else {
    const r = ri(t);
    if (r !== null && n)
      return { ...t };
    const i = Object.create(r);
    return Object.assign(i, t);
  }
}
function pl(t, e = !1) {
  return Ia(t) || cn(t) || !Tn(t) || (Ea(t) > 1 && (t.set = t.add = t.clear = t.delete = rI), Object.freeze(t), e && Object.entries(t).forEach(([n, r]) => pl(r, !0))), t;
}
function rI() {
  Pt(2);
}
function Ia(t) {
  return Object.isFrozen(t);
}
var iI = {};
function Er(t) {
  const e = iI[t];
  return e || Pt(0, t), e;
}
var us;
function vg() {
  return us;
}
function sI(t, e) {
  return {
    drafts_: [],
    parent_: t,
    immer_: e,
    // Whenever the modified draft contains a draft from another scope, we
    // need to prevent auto-freezing so the unowned draft can be finalized.
    canAutoFreeze_: !0,
    unfinalizedDrafts_: 0
  };
}
function td(t, e) {
  e && (Er("Patches"), t.patches_ = [], t.inversePatches_ = [], t.patchListener_ = e);
}
function du(t) {
  pu(t), t.drafts_.forEach(oI), t.drafts_ = null;
}
function pu(t) {
  t === us && (us = t.parent_);
}
function nd(t) {
  return us = sI(us, t);
}
function oI(t) {
  const e = t[xt];
  e.type_ === 0 || e.type_ === 1 ? e.revoke_() : e.revoked_ = !0;
}
function rd(t, e) {
  e.unfinalizedDrafts_ = e.drafts_.length;
  const n = e.drafts_[0];
  return t !== void 0 && t !== n ? (n[xt].modified_ && (du(e), Pt(4)), Tn(t) && (t = zo(e, t), e.parent_ || Ko(e, t)), e.patches_ && Er("Patches").generateReplacementPatches_(
    n[xt].base_,
    t,
    e.patches_,
    e.inversePatches_
  )) : t = zo(e, n, []), du(e), e.patches_ && e.patchListener_(e.patches_, e.inversePatches_), t !== gg ? t : void 0;
}
function zo(t, e, n) {
  if (Ia(e))
    return e;
  const r = e[xt];
  if (!r)
    return qo(
      e,
      (i, s) => id(t, r, e, i, s, n)
    ), e;
  if (r.scope_ !== t)
    return e;
  if (!r.modified_)
    return Ko(t, r.base_, !0), r.base_;
  if (!r.finalized_) {
    r.finalized_ = !0, r.scope_.unfinalizedDrafts_--;
    const i = r.copy_;
    let s = i, o = !1;
    r.type_ === 3 && (s = new Set(i), i.clear(), o = !0), qo(
      s,
      (c, u) => id(t, r, i, c, u, n, o)
    ), Ko(t, i, !1), n && t.patches_ && Er("Patches").generatePatches_(
      r,
      n,
      t.patches_,
      t.inversePatches_
    );
  }
  return r.copy_;
}
function id(t, e, n, r, i, s, o) {
  if (process.env.NODE_ENV !== "production" && i === n && Pt(5), cn(i)) {
    const c = s && e && e.type_ !== 3 && // Set objects are atomic since they have no keys.
    !hu(e.assigned_, r) ? s.concat(r) : void 0, u = zo(t, i, c);
    if (_g(n, r, u), cn(u))
      t.canAutoFreeze_ = !1;
    else
      return;
  } else o && n.add(i);
  if (Tn(i) && !Ia(i)) {
    if (!t.immer_.autoFreeze_ && t.unfinalizedDrafts_ < 1)
      return;
    zo(t, i), (!e || !e.scope_.parent_) && typeof r != "symbol" && Object.prototype.propertyIsEnumerable.call(n, r) && Ko(t, i);
  }
}
function Ko(t, e, n = !1) {
  !t.parent_ && t.immer_.autoFreeze_ && t.canAutoFreeze_ && pl(e, n);
}
function aI(t, e) {
  const n = Array.isArray(t), r = {
    type_: n ? 1 : 0,
    // Track which produce call this is associated with.
    scope_: e ? e.scope_ : vg(),
    // True for both shallow and deep changes.
    modified_: !1,
    // Used during finalization.
    finalized_: !1,
    // Track which properties have been assigned (true) or deleted (false).
    assigned_: {},
    // The parent draft state.
    parent_: e,
    // The base state.
    base_: t,
    // The base proxy.
    draft_: null,
    // set below
    // The base copy with any updated values.
    copy_: null,
    // Called by the `produce` function.
    revoke_: null,
    isManual_: !1
  };
  let i = r, s = ml;
  n && (i = [r], s = ls);
  const { revoke: o, proxy: c } = Proxy.revocable(i, s);
  return r.draft_ = c, r.revoke_ = o, c;
}
var ml = {
  get(t, e) {
    if (e === xt)
      return t;
    const n = sr(t);
    if (!hu(n, e))
      return cI(t, n, e);
    const r = n[e];
    return t.finalized_ || !Tn(r) ? r : r === Tc(t.base_, e) ? (Ic(t), t.copy_[e] = gu(r, t)) : r;
  },
  has(t, e) {
    return e in sr(t);
  },
  ownKeys(t) {
    return Reflect.ownKeys(sr(t));
  },
  set(t, e, n) {
    const r = wg(sr(t), e);
    if (r != null && r.set)
      return r.set.call(t.draft_, n), !0;
    if (!t.modified_) {
      const i = Tc(sr(t), e), s = i == null ? void 0 : i[xt];
      if (s && s.base_ === n)
        return t.copy_[e] = n, t.assigned_[e] = !1, !0;
      if (nI(n, i) && (n !== void 0 || hu(t.base_, e)))
        return !0;
      Ic(t), mu(t);
    }
    return t.copy_[e] === n && // special case: handle new props with value 'undefined'
    (n !== void 0 || e in t.copy_) || // special case: NaN
    Number.isNaN(n) && Number.isNaN(t.copy_[e]) || (t.copy_[e] = n, t.assigned_[e] = !0), !0;
  },
  deleteProperty(t, e) {
    return Tc(t.base_, e) !== void 0 || e in t.base_ ? (t.assigned_[e] = !1, Ic(t), mu(t)) : delete t.assigned_[e], t.copy_ && delete t.copy_[e], !0;
  },
  // Note: We never coerce `desc.value` into an Immer draft, because we can't make
  // the same guarantee in ES5 mode.
  getOwnPropertyDescriptor(t, e) {
    const n = sr(t), r = Reflect.getOwnPropertyDescriptor(n, e);
    return r && {
      writable: !0,
      configurable: t.type_ !== 1 || e !== "length",
      enumerable: r.enumerable,
      value: n[e]
    };
  },
  defineProperty() {
    Pt(11);
  },
  getPrototypeOf(t) {
    return ri(t.base_);
  },
  setPrototypeOf() {
    Pt(12);
  }
}, ls = {};
qo(ml, (t, e) => {
  ls[t] = function() {
    return arguments[0] = arguments[0][0], e.apply(this, arguments);
  };
});
ls.deleteProperty = function(t, e) {
  return process.env.NODE_ENV !== "production" && isNaN(parseInt(e)) && Pt(13), ls.set.call(this, t, e, void 0);
};
ls.set = function(t, e, n) {
  return process.env.NODE_ENV !== "production" && e !== "length" && isNaN(parseInt(e)) && Pt(14), ml.set.call(this, t[0], e, n, t[0]);
};
function Tc(t, e) {
  const n = t[xt];
  return (n ? sr(n) : t)[e];
}
function cI(t, e, n) {
  var i;
  const r = wg(e, n);
  return r ? "value" in r ? r.value : (
    // This is a very special case, if the prop is a getter defined by the
    // prototype, we should invoke it with the draft as context!
    (i = r.get) == null ? void 0 : i.call(t.draft_)
  ) : void 0;
}
function wg(t, e) {
  if (!(e in t))
    return;
  let n = ri(t);
  for (; n; ) {
    const r = Object.getOwnPropertyDescriptor(n, e);
    if (r)
      return r;
    n = ri(n);
  }
}
function mu(t) {
  t.modified_ || (t.modified_ = !0, t.parent_ && mu(t.parent_));
}
function Ic(t) {
  t.copy_ || (t.copy_ = fu(
    t.base_,
    t.scope_.immer_.useStrictShallowCopy_
  ));
}
var uI = class {
  constructor(t) {
    this.autoFreeze_ = !0, this.useStrictShallowCopy_ = !1, this.produce = (e, n, r) => {
      if (typeof e == "function" && typeof n != "function") {
        const s = n;
        n = e;
        const o = this;
        return function(u = s, ...l) {
          return o.produce(u, (f) => n.call(this, f, ...l));
        };
      }
      typeof n != "function" && Pt(6), r !== void 0 && typeof r != "function" && Pt(7);
      let i;
      if (Tn(e)) {
        const s = nd(this), o = gu(e, void 0);
        let c = !0;
        try {
          i = n(o), c = !1;
        } finally {
          c ? du(s) : pu(s);
        }
        return td(s, r), rd(i, s);
      } else if (!e || typeof e != "object") {
        if (i = n(e), i === void 0 && (i = e), i === gg && (i = void 0), this.autoFreeze_ && pl(i, !0), r) {
          const s = [], o = [];
          Er("Patches").generateReplacementPatches_(e, i, s, o), r(s, o);
        }
        return i;
      } else
        Pt(1, e);
    }, this.produceWithPatches = (e, n) => {
      if (typeof e == "function")
        return (o, ...c) => this.produceWithPatches(o, (u) => e(u, ...c));
      let r, i;
      return [this.produce(e, n, (o, c) => {
        r = o, i = c;
      }), r, i];
    }, typeof (t == null ? void 0 : t.autoFreeze) == "boolean" && this.setAutoFreeze(t.autoFreeze), typeof (t == null ? void 0 : t.useStrictShallowCopy) == "boolean" && this.setUseStrictShallowCopy(t.useStrictShallowCopy);
  }
  createDraft(t) {
    Tn(t) || Pt(8), cn(t) && (t = Sa(t));
    const e = nd(this), n = gu(t, void 0);
    return n[xt].isManual_ = !0, pu(e), n;
  }
  finishDraft(t, e) {
    const n = t && t[xt];
    (!n || !n.isManual_) && Pt(9);
    const { scope_: r } = n;
    return td(r, e), rd(void 0, r);
  }
  /**
   * Pass true to automatically freeze all copies created by Immer.
   *
   * By default, auto-freezing is enabled.
   */
  setAutoFreeze(t) {
    this.autoFreeze_ = t;
  }
  /**
   * Pass true to enable strict shallow copy.
   *
   * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.
   */
  setUseStrictShallowCopy(t) {
    this.useStrictShallowCopy_ = t;
  }
  applyPatches(t, e) {
    let n;
    for (n = e.length - 1; n >= 0; n--) {
      const i = e[n];
      if (i.path.length === 0 && i.op === "replace") {
        t = i.value;
        break;
      }
    }
    n > -1 && (e = e.slice(n + 1));
    const r = Er("Patches").applyPatches_;
    return cn(t) ? r(t, e) : this.produce(
      t,
      (i) => r(i, e)
    );
  }
};
function gu(t, e) {
  const n = ba(t) ? Er("MapSet").proxyMap_(t, e) : Ta(t) ? Er("MapSet").proxySet_(t, e) : aI(t, e);
  return (e ? e.scope_ : vg()).drafts_.push(n), n;
}
function Sa(t) {
  return cn(t) || Pt(10, t), Eg(t);
}
function Eg(t) {
  if (!Tn(t) || Ia(t))
    return t;
  const e = t[xt];
  let n;
  if (e) {
    if (!e.modified_)
      return e.base_;
    e.finalized_ = !0, n = fu(t, e.scope_.immer_.useStrictShallowCopy_);
  } else
    n = fu(t, !0);
  return qo(n, (r, i) => {
    _g(n, r, Eg(i));
  }), e && (e.finalized_ = !1), n;
}
var Lt = new uI(), gl = Lt.produce;
Lt.produceWithPatches.bind(
  Lt
);
Lt.setAutoFreeze.bind(Lt);
Lt.setUseStrictShallowCopy.bind(Lt);
Lt.applyPatches.bind(Lt);
Lt.createDraft.bind(Lt);
Lt.finishDraft.bind(Lt);
var lI = (t, e, n) => {
  if (e.length === 1 && e[0] === n) {
    let r = !1;
    try {
      const i = {};
      t(i) === i && (r = !0);
    } catch {
    }
    if (r) {
      let i;
      try {
        throw new Error();
      } catch (s) {
        ({ stack: i } = s);
      }
      console.warn(
        `The result function returned its own inputs without modification. e.g
\`createSelector([state => state.todos], todos => todos)\`
This could lead to inefficient memoization and unnecessary re-renders.
Ensure transformation logic is in the result function, and extraction logic is in the input selectors.`,
        { stack: i }
      );
    }
  }
}, hI = (t, e, n) => {
  const { memoize: r, memoizeOptions: i } = e, { inputSelectorResults: s, inputSelectorResultsCopy: o } = t, c = r(() => ({}), ...i);
  if (!(c.apply(null, s) === c.apply(null, o))) {
    let l;
    try {
      throw new Error();
    } catch (f) {
      ({ stack: l } = f);
    }
    console.warn(
      `An input selector returned a different result when passed same arguments.
This means your output selector will likely run more frequently than intended.
Avoid returning a new reference inside your input selector, e.g.
\`createSelector([state => state.todos.map(todo => todo.id)], todoIds => todoIds.length)\``,
      {
        arguments: n,
        firstInputs: s,
        secondInputs: o,
        stack: l
      }
    );
  }
}, fI = {
  inputStabilityCheck: "once",
  identityFunctionCheck: "once"
};
function dI(t, e = `expected a function, instead received ${typeof t}`) {
  if (typeof t != "function")
    throw new TypeError(e);
}
function pI(t, e = `expected an object, instead received ${typeof t}`) {
  if (typeof t != "object")
    throw new TypeError(e);
}
function mI(t, e = "expected all items to be functions, instead received the following types: ") {
  if (!t.every((n) => typeof n == "function")) {
    const n = t.map(
      (r) => typeof r == "function" ? `function ${r.name || "unnamed"}()` : typeof r
    ).join(", ");
    throw new TypeError(`${e}[${n}]`);
  }
}
var sd = (t) => Array.isArray(t) ? t : [t];
function gI(t) {
  const e = Array.isArray(t[0]) ? t[0] : t;
  return mI(
    e,
    "createSelector expects all input-selectors to be functions, but received the following types: "
  ), e;
}
function od(t, e) {
  const n = [], { length: r } = t;
  for (let i = 0; i < r; i++)
    n.push(t[i].apply(null, e));
  return n;
}
var yI = (t, e) => {
  const { identityFunctionCheck: n, inputStabilityCheck: r } = {
    ...fI,
    ...e
  };
  return {
    identityFunctionCheck: {
      shouldRun: n === "always" || n === "once" && t,
      run: lI
    },
    inputStabilityCheck: {
      shouldRun: r === "always" || r === "once" && t,
      run: hI
    }
  };
}, _I = class {
  constructor(t) {
    this.value = t;
  }
  deref() {
    return this.value;
  }
}, vI = typeof WeakRef < "u" ? WeakRef : _I, wI = 0, ad = 1;
function co() {
  return {
    s: wI,
    v: void 0,
    o: null,
    p: null
  };
}
function yl(t, e = {}) {
  let n = co();
  const { resultEqualityCheck: r } = e;
  let i, s = 0;
  function o() {
    var h;
    let c = n;
    const { length: u } = arguments;
    for (let _ = 0, b = u; _ < b; _++) {
      const I = arguments[_];
      if (typeof I == "function" || typeof I == "object" && I !== null) {
        let C = c.o;
        C === null && (c.o = C = /* @__PURE__ */ new WeakMap());
        const m = C.get(I);
        m === void 0 ? (c = co(), C.set(I, c)) : c = m;
      } else {
        let C = c.p;
        C === null && (c.p = C = /* @__PURE__ */ new Map());
        const m = C.get(I);
        m === void 0 ? (c = co(), C.set(I, c)) : c = m;
      }
    }
    const l = c;
    let f;
    if (c.s === ad ? f = c.v : (f = t.apply(null, arguments), s++), l.s = ad, r) {
      const _ = ((h = i == null ? void 0 : i.deref) == null ? void 0 : h.call(i)) ?? i;
      _ != null && r(_, f) && (f = _, s !== 0 && s--), i = typeof f == "object" && f !== null || typeof f == "function" ? new vI(f) : f;
    }
    return l.v = f, f;
  }
  return o.clearCache = () => {
    n = co(), o.resetResultsCount();
  }, o.resultsCount = () => s, o.resetResultsCount = () => {
    s = 0;
  }, o;
}
function bg(t, ...e) {
  const n = typeof t == "function" ? {
    memoize: t,
    memoizeOptions: e
  } : t, r = (...i) => {
    let s = 0, o = 0, c, u = {}, l = i.pop();
    typeof l == "object" && (u = l, l = i.pop()), dI(
      l,
      `createSelector expects an output function after the inputs, but received: [${typeof l}]`
    );
    const f = {
      ...n,
      ...u
    }, {
      memoize: h,
      memoizeOptions: _ = [],
      argsMemoize: b = yl,
      argsMemoizeOptions: I = [],
      devModeChecks: C = {}
    } = f, m = sd(_), y = sd(I), E = gI(i), p = h(function() {
      return s++, l.apply(
        null,
        arguments
      );
    }, ...m);
    let g = !0;
    const w = b(function() {
      o++;
      const R = od(
        E,
        arguments
      );
      if (c = p.apply(null, R), process.env.NODE_ENV !== "production") {
        const { identityFunctionCheck: T, inputStabilityCheck: A } = yI(g, C);
        if (T.shouldRun && T.run(
          l,
          R,
          c
        ), A.shouldRun) {
          const O = od(
            E,
            arguments
          );
          A.run(
            { inputSelectorResults: R, inputSelectorResultsCopy: O },
            { memoize: h, memoizeOptions: m },
            arguments
          );
        }
        g && (g = !1);
      }
      return c;
    }, ...y);
    return Object.assign(w, {
      resultFunc: l,
      memoizedResultFunc: p,
      dependencies: E,
      dependencyRecomputations: () => o,
      resetDependencyRecomputations: () => {
        o = 0;
      },
      lastResult: () => c,
      recomputations: () => s,
      resetRecomputations: () => {
        s = 0;
      },
      memoize: h,
      argsMemoize: b
    });
  };
  return Object.assign(r, {
    withTypes: () => r
  }), r;
}
var EI = /* @__PURE__ */ bg(yl), bI = Object.assign(
  (t, e = EI) => {
    pI(
      t,
      `createStructuredSelector expects first argument to be an object where each property is a selector, instead received a ${typeof t}`
    );
    const n = Object.keys(t), r = n.map(
      (s) => t[s]
    );
    return e(
      r,
      (...s) => s.reduce((o, c, u) => (o[n[u]] = c, o), {})
    );
  },
  { withTypes: () => bI }
);
function Tg(t) {
  return ({ dispatch: n, getState: r }) => (i) => (s) => typeof s == "function" ? s(n, r, t) : i(s);
}
var TI = Tg(), II = Tg, SI = (...t) => {
  const e = bg(...t), n = Object.assign((...r) => {
    const i = e(...r), s = (o, ...c) => i(cn(o) ? Sa(o) : o, ...c);
    return Object.assign(s, i), s;
  }, {
    withTypes: () => n
  });
  return n;
}, AI = SI(yl), RI = typeof window < "u" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function() {
  if (arguments.length !== 0)
    return typeof arguments[0] == "object" ? $o : $o.apply(null, arguments);
}, CI = (t) => t && typeof t.match == "function";
function ii(t, e) {
  function n(...r) {
    if (e) {
      let i = e(...r);
      if (!i)
        throw new Error(process.env.NODE_ENV === "production" ? Pe(0) : "prepareAction did not return an object");
      return {
        type: t,
        payload: i.payload,
        ..."meta" in i && {
          meta: i.meta
        },
        ..."error" in i && {
          error: i.error
        }
      };
    }
    return {
      type: t,
      payload: r[0]
    };
  }
  return n.toString = () => `${t}`, n.type = t, n.match = (r) => dl(r) && r.type === t, n;
}
function PI(t) {
  return typeof t == "function" && "type" in t && // hasMatchFunction only wants Matchers but I don't see the point in rewriting it
  CI(t);
}
function kI(t) {
  return dl(t) && Object.keys(t).every(OI);
}
function OI(t) {
  return ["type", "payload", "error", "meta"].indexOf(t) > -1;
}
function NI(t) {
  const e = t ? `${t}`.split("/") : [], n = e[e.length - 1] || "actionCreator";
  return `Detected an action creator with type "${t || "unknown"}" being dispatched. 
Make sure you're calling the action creator before dispatching, i.e. \`dispatch(${n}())\` instead of \`dispatch(${n})\`. This is necessary even if the action has no payload.`;
}
function DI(t = {}) {
  if (process.env.NODE_ENV === "production")
    return () => (n) => (r) => n(r);
  const {
    isActionCreator: e = PI
  } = t;
  return () => (n) => (r) => (e(r) && console.warn(NI(r.type)), n(r));
}
function Ig(t, e) {
  let n = 0;
  return {
    measureTime(r) {
      const i = Date.now();
      try {
        return r();
      } finally {
        const s = Date.now();
        n += s - i;
      }
    },
    warnIfExceeded() {
      n > t && console.warn(`${e} took ${n}ms, which is more than the warning threshold of ${t}ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.`);
    }
  };
}
var Sg = class Ki extends Array {
  constructor(...e) {
    super(...e), Object.setPrototypeOf(this, Ki.prototype);
  }
  static get [Symbol.species]() {
    return Ki;
  }
  concat(...e) {
    return super.concat.apply(this, e);
  }
  prepend(...e) {
    return e.length === 1 && Array.isArray(e[0]) ? new Ki(...e[0].concat(this)) : new Ki(...e.concat(this));
  }
};
function cd(t) {
  return Tn(t) ? gl(t, () => {
  }) : t;
}
function ud(t, e, n) {
  if (t.has(e)) {
    let i = t.get(e);
    return n.update && (i = n.update(i, e, t), t.set(e, i)), i;
  }
  if (!n.insert)
    throw new Error(process.env.NODE_ENV === "production" ? Pe(10) : "No insert provided for key not already in map");
  const r = n.insert(e, t);
  return t.set(e, r), r;
}
function xI(t) {
  return typeof t != "object" || t == null || Object.isFrozen(t);
}
function LI(t, e, n) {
  const r = Ag(t, e, n);
  return {
    detectMutations() {
      return Rg(t, e, r, n);
    }
  };
}
function Ag(t, e = [], n, r = "", i = /* @__PURE__ */ new Set()) {
  const s = {
    value: n
  };
  if (!t(n) && !i.has(n)) {
    i.add(n), s.children = {};
    for (const o in n) {
      const c = r ? r + "." + o : o;
      e.length && e.indexOf(c) !== -1 || (s.children[o] = Ag(t, e, n[o], c));
    }
  }
  return s;
}
function Rg(t, e = [], n, r, i = !1, s = "") {
  const o = n ? n.value : void 0, c = o === r;
  if (i && !c && !Number.isNaN(r))
    return {
      wasMutated: !0,
      path: s
    };
  if (t(o) || t(r))
    return {
      wasMutated: !1
    };
  const u = {};
  for (let f in n.children)
    u[f] = !0;
  for (let f in r)
    u[f] = !0;
  const l = e.length > 0;
  for (let f in u) {
    const h = s ? s + "." + f : f;
    if (l && e.some((I) => I instanceof RegExp ? I.test(h) : h === I))
      continue;
    const _ = Rg(t, e, n.children[f], r[f], c, h);
    if (_.wasMutated)
      return _;
  }
  return {
    wasMutated: !1
  };
}
function MI(t = {}) {
  if (process.env.NODE_ENV === "production")
    return () => (e) => (n) => e(n);
  {
    let e = function(c, u, l, f) {
      return JSON.stringify(c, n(u, f), l);
    }, n = function(c, u) {
      let l = [], f = [];
      return u || (u = function(h, _) {
        return l[0] === _ ? "[Circular ~]" : "[Circular ~." + f.slice(0, l.indexOf(_)).join(".") + "]";
      }), function(h, _) {
        if (l.length > 0) {
          var b = l.indexOf(this);
          ~b ? l.splice(b + 1) : l.push(this), ~b ? f.splice(b, 1 / 0, h) : f.push(h), ~l.indexOf(_) && (_ = u.call(this, h, _));
        } else
          l.push(_);
        return c == null ? _ : c.call(this, h, _);
      };
    }, {
      isImmutable: r = xI,
      ignoredPaths: i,
      warnAfter: s = 32
    } = t;
    const o = LI.bind(null, r, i);
    return ({
      getState: c
    }) => {
      let u = c(), l = o(u), f;
      return (h) => (_) => {
        const b = Ig(s, "ImmutableStateInvariantMiddleware");
        b.measureTime(() => {
          if (u = c(), f = l.detectMutations(), l = o(u), f.wasMutated)
            throw new Error(process.env.NODE_ENV === "production" ? Pe(19) : `A state mutation was detected between dispatches, in the path '${f.path || ""}'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`);
        });
        const I = h(_);
        return b.measureTime(() => {
          if (u = c(), f = l.detectMutations(), l = o(u), f.wasMutated)
            throw new Error(process.env.NODE_ENV === "production" ? Pe(20) : `A state mutation was detected inside a dispatch, in the path: ${f.path || ""}. Take a look at the reducer(s) handling the action ${e(_)}. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`);
        }), b.warnIfExceeded(), I;
      };
    };
  }
}
function Cg(t) {
  const e = typeof t;
  return t == null || e === "string" || e === "boolean" || e === "number" || Array.isArray(t) || As(t);
}
function yu(t, e = "", n = Cg, r, i = [], s) {
  let o;
  if (!n(t))
    return {
      keyPath: e || "<root>",
      value: t
    };
  if (typeof t != "object" || t === null || s != null && s.has(t))
    return !1;
  const c = r != null ? r(t) : Object.entries(t), u = i.length > 0;
  for (const [l, f] of c) {
    const h = e ? e + "." + l : l;
    if (!(u && i.some((b) => b instanceof RegExp ? b.test(h) : h === b))) {
      if (!n(f))
        return {
          keyPath: h,
          value: f
        };
      if (typeof f == "object" && (o = yu(f, h, n, r, i, s), o))
        return o;
    }
  }
  return s && Pg(t) && s.add(t), !1;
}
function Pg(t) {
  if (!Object.isFrozen(t))
    return !1;
  for (const e of Object.values(t))
    if (!(typeof e != "object" || e === null) && !Pg(e))
      return !1;
  return !0;
}
function VI(t = {}) {
  if (process.env.NODE_ENV === "production")
    return () => (e) => (n) => e(n);
  {
    const {
      isSerializable: e = Cg,
      getEntries: n,
      ignoredActions: r = [],
      ignoredActionPaths: i = ["meta.arg", "meta.baseQueryMeta"],
      ignoredPaths: s = [],
      warnAfter: o = 32,
      ignoreState: c = !1,
      ignoreActions: u = !1,
      disableCache: l = !1
    } = t, f = !l && WeakSet ? /* @__PURE__ */ new WeakSet() : void 0;
    return (h) => (_) => (b) => {
      if (!dl(b))
        return _(b);
      const I = _(b), C = Ig(o, "SerializableStateInvariantMiddleware");
      return !u && !(r.length && r.indexOf(b.type) !== -1) && C.measureTime(() => {
        const m = yu(b, "", e, n, i, f);
        if (m) {
          const {
            keyPath: y,
            value: E
          } = m;
          console.error(`A non-serializable value was detected in an action, in the path: \`${y}\`. Value:`, E, `
Take a look at the logic that dispatched this action: `, b, `
(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)`, `
(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)`);
        }
      }), c || (C.measureTime(() => {
        const m = h.getState(), y = yu(m, "", e, n, s, f);
        if (y) {
          const {
            keyPath: E,
            value: p
          } = y;
          console.error(`A non-serializable value was detected in the state, in the path: \`${E}\`. Value:`, p, `
Take a look at the reducer(s) handling this action type: ${b.type}.
(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)`);
        }
      }), C.warnIfExceeded()), I;
    };
  }
}
function uo(t) {
  return typeof t == "boolean";
}
var FI = () => function(e) {
  const {
    thunk: n = !0,
    immutableCheck: r = !0,
    serializableCheck: i = !0,
    actionCreatorCheck: s = !0
  } = e ?? {};
  let o = new Sg();
  if (n && (uo(n) ? o.push(TI) : o.push(II(n.extraArgument))), process.env.NODE_ENV !== "production") {
    if (r) {
      let c = {};
      uo(r) || (c = r), o.unshift(MI(c));
    }
    if (i) {
      let c = {};
      uo(i) || (c = i), o.push(VI(c));
    }
    if (s) {
      let c = {};
      uo(s) || (c = s), o.unshift(DI(c));
    }
  }
  return o;
}, UI = "RTK_autoBatch", kg = (t) => (e) => {
  setTimeout(e, t);
}, jI = typeof window < "u" && window.requestAnimationFrame ? window.requestAnimationFrame : kg(10), BI = (t = {
  type: "raf"
}) => (e) => (...n) => {
  const r = e(...n);
  let i = !0, s = !1, o = !1;
  const c = /* @__PURE__ */ new Set(), u = t.type === "tick" ? queueMicrotask : t.type === "raf" ? jI : t.type === "callback" ? t.queueNotification : kg(t.timeout), l = () => {
    o = !1, s && (s = !1, c.forEach((f) => f()));
  };
  return Object.assign({}, r, {
    // Override the base `store.subscribe` method to keep original listeners
    // from running if we're delaying notifications
    subscribe(f) {
      const h = () => i && f(), _ = r.subscribe(h);
      return c.add(f), () => {
        _(), c.delete(f);
      };
    },
    // Override the base `store.dispatch` method so that we can check actions
    // for the `shouldAutoBatch` flag and determine if batching is active
    dispatch(f) {
      var h;
      try {
        return i = !((h = f == null ? void 0 : f.meta) != null && h[UI]), s = !i, s && (o || (o = !0, u(l))), r.dispatch(f);
      } finally {
        i = !0;
      }
    }
  });
}, $I = (t) => function(n) {
  const {
    autoBatch: r = !0
  } = n ?? {};
  let i = new Sg(t);
  return r && i.push(BI(typeof r == "object" ? r : void 0)), i;
}, Nn = process.env.NODE_ENV === "production";
function qI(t) {
  const e = FI(), {
    reducer: n = void 0,
    middleware: r,
    devTools: i = !0,
    preloadedState: s = void 0,
    enhancers: o = void 0
  } = t || {};
  let c;
  if (typeof n == "function")
    c = n;
  else if (As(n))
    c = XT(n);
  else
    throw new Error(process.env.NODE_ENV === "production" ? Pe(1) : "`reducer` is a required argument, and must be a function or an object of functions that can be passed to combineReducers");
  if (!Nn && r && typeof r != "function")
    throw new Error(process.env.NODE_ENV === "production" ? Pe(2) : "`middleware` field must be a callback");
  let u;
  if (typeof r == "function") {
    if (u = r(e), !Nn && !Array.isArray(u))
      throw new Error(process.env.NODE_ENV === "production" ? Pe(3) : "when using a middleware builder function, an array of middleware must be returned");
  } else
    u = e();
  if (!Nn && u.some((I) => typeof I != "function"))
    throw new Error(process.env.NODE_ENV === "production" ? Pe(4) : "each middleware provided to configureStore must be a function");
  let l = $o;
  i && (l = RI({
    // Enable capture of stack traces for dispatched Redux actions
    trace: !Nn,
    ...typeof i == "object" && i
  }));
  const f = ZT(...u), h = $I(f);
  if (!Nn && o && typeof o != "function")
    throw new Error(process.env.NODE_ENV === "production" ? Pe(5) : "`enhancers` field must be a callback");
  let _ = typeof o == "function" ? o(h) : h();
  if (!Nn && !Array.isArray(_))
    throw new Error(process.env.NODE_ENV === "production" ? Pe(6) : "`enhancers` callback must return an array");
  if (!Nn && _.some((I) => typeof I != "function"))
    throw new Error(process.env.NODE_ENV === "production" ? Pe(7) : "each enhancer provided to configureStore must be a function");
  !Nn && u.length && !_.includes(f) && console.error("middlewares were provided, but middleware enhancer was not included in final enhancers - make sure to call `getDefaultEnhancers`");
  const b = l(..._);
  return mg(c, s, b);
}
function Og(t) {
  const e = {}, n = [];
  let r;
  const i = {
    addCase(s, o) {
      if (process.env.NODE_ENV !== "production") {
        if (n.length > 0)
          throw new Error(process.env.NODE_ENV === "production" ? Pe(26) : "`builder.addCase` should only be called before calling `builder.addMatcher`");
        if (r)
          throw new Error(process.env.NODE_ENV === "production" ? Pe(27) : "`builder.addCase` should only be called before calling `builder.addDefaultCase`");
      }
      const c = typeof s == "string" ? s : s.type;
      if (!c)
        throw new Error(process.env.NODE_ENV === "production" ? Pe(28) : "`builder.addCase` cannot be called with an empty action type");
      if (c in e)
        throw new Error(process.env.NODE_ENV === "production" ? Pe(29) : `\`builder.addCase\` cannot be called with two reducers for the same action type '${c}'`);
      return e[c] = o, i;
    },
    addMatcher(s, o) {
      if (process.env.NODE_ENV !== "production" && r)
        throw new Error(process.env.NODE_ENV === "production" ? Pe(30) : "`builder.addMatcher` should only be called before calling `builder.addDefaultCase`");
      return n.push({
        matcher: s,
        reducer: o
      }), i;
    },
    addDefaultCase(s) {
      if (process.env.NODE_ENV !== "production" && r)
        throw new Error(process.env.NODE_ENV === "production" ? Pe(31) : "`builder.addDefaultCase` can only be called once");
      return r = s, i;
    }
  };
  return t(i), [e, n, r];
}
function zI(t) {
  return typeof t == "function";
}
function KI(t, e) {
  if (process.env.NODE_ENV !== "production" && typeof e == "object")
    throw new Error(process.env.NODE_ENV === "production" ? Pe(8) : "The object notation for `createReducer` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createReducer");
  let [n, r, i] = Og(e), s;
  if (zI(t))
    s = () => cd(t());
  else {
    const c = cd(t);
    s = () => c;
  }
  function o(c = s(), u) {
    let l = [n[u.type], ...r.filter(({
      matcher: f
    }) => f(u)).map(({
      reducer: f
    }) => f)];
    return l.filter((f) => !!f).length === 0 && (l = [i]), l.reduce((f, h) => {
      if (h)
        if (cn(f)) {
          const b = h(f, u);
          return b === void 0 ? f : b;
        } else {
          if (Tn(f))
            return gl(f, (_) => h(_, u));
          {
            const _ = h(f, u);
            if (_ === void 0) {
              if (f === null)
                return f;
              throw new Error(process.env.NODE_ENV === "production" ? Pe(9) : "A case reducer on a non-draftable value must not return undefined");
            }
            return _;
          }
        }
      return f;
    }, c);
  }
  return o.getInitialState = s, o;
}
var HI = "ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW", Et = (t = 21) => {
  let e = "", n = t;
  for (; n--; )
    e += HI[Math.random() * 64 | 0];
  return e;
}, GI = /* @__PURE__ */ Symbol.for("rtk-slice-createasyncthunk");
function WI(t, e) {
  return `${t}/${e}`;
}
function QI({
  creators: t
} = {}) {
  var n;
  const e = (n = t == null ? void 0 : t.asyncThunk) == null ? void 0 : n[GI];
  return function(i) {
    const {
      name: s,
      reducerPath: o = s
    } = i;
    if (!s)
      throw new Error(process.env.NODE_ENV === "production" ? Pe(11) : "`name` is a required option for createSlice");
    typeof process < "u" && process.env.NODE_ENV === "development" && i.initialState === void 0 && console.error("You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`");
    const c = (typeof i.reducers == "function" ? i.reducers(JI()) : i.reducers) || {}, u = Object.keys(c), l = {
      sliceCaseReducersByName: {},
      sliceCaseReducersByType: {},
      actionCreators: {},
      sliceMatchers: []
    }, f = {
      addCase(p, g) {
        const w = typeof p == "string" ? p : p.type;
        if (!w)
          throw new Error(process.env.NODE_ENV === "production" ? Pe(12) : "`context.addCase` cannot be called with an empty action type");
        if (w in l.sliceCaseReducersByType)
          throw new Error(process.env.NODE_ENV === "production" ? Pe(13) : "`context.addCase` cannot be called with two reducers for the same action type: " + w);
        return l.sliceCaseReducersByType[w] = g, f;
      },
      addMatcher(p, g) {
        return l.sliceMatchers.push({
          matcher: p,
          reducer: g
        }), f;
      },
      exposeAction(p, g) {
        return l.actionCreators[p] = g, f;
      },
      exposeCaseReducer(p, g) {
        return l.sliceCaseReducersByName[p] = g, f;
      }
    };
    u.forEach((p) => {
      const g = c[p], w = {
        reducerName: p,
        type: WI(s, p),
        createNotation: typeof i.reducers == "function"
      };
      ZI(g) ? t0(w, g, f, e) : XI(w, g, f);
    });
    function h() {
      if (process.env.NODE_ENV !== "production" && typeof i.extraReducers == "object")
        throw new Error(process.env.NODE_ENV === "production" ? Pe(14) : "The object notation for `createSlice.extraReducers` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createSlice");
      const [p = {}, g = [], w = void 0] = typeof i.extraReducers == "function" ? Og(i.extraReducers) : [i.extraReducers], S = {
        ...p,
        ...l.sliceCaseReducersByType
      };
      return KI(i.initialState, (R) => {
        for (let T in S)
          R.addCase(T, S[T]);
        for (let T of l.sliceMatchers)
          R.addMatcher(T.matcher, T.reducer);
        for (let T of g)
          R.addMatcher(T.matcher, T.reducer);
        w && R.addDefaultCase(w);
      });
    }
    const _ = (p) => p, b = /* @__PURE__ */ new Map();
    let I;
    function C(p, g) {
      return I || (I = h()), I(p, g);
    }
    function m() {
      return I || (I = h()), I.getInitialState();
    }
    function y(p, g = !1) {
      function w(R) {
        let T = R[p];
        if (typeof T > "u") {
          if (g)
            T = m();
          else if (process.env.NODE_ENV !== "production")
            throw new Error(process.env.NODE_ENV === "production" ? Pe(15) : "selectSlice returned undefined for an uninjected slice reducer");
        }
        return T;
      }
      function S(R = _) {
        const T = ud(b, g, {
          insert: () => /* @__PURE__ */ new WeakMap()
        });
        return ud(T, R, {
          insert: () => {
            const A = {};
            for (const [O, N] of Object.entries(i.selectors ?? {}))
              A[O] = YI(N, R, m, g);
            return A;
          }
        });
      }
      return {
        reducerPath: p,
        getSelectors: S,
        get selectors() {
          return S(w);
        },
        selectSlice: w
      };
    }
    const E = {
      name: s,
      reducer: C,
      actions: l.actionCreators,
      caseReducers: l.sliceCaseReducersByName,
      getInitialState: m,
      ...y(o),
      injectInto(p, {
        reducerPath: g,
        ...w
      } = {}) {
        const S = g ?? o;
        return p.inject({
          reducerPath: S,
          reducer: C
        }, w), {
          ...E,
          ...y(S, !0)
        };
      }
    };
    return E;
  };
}
function YI(t, e, n, r) {
  function i(s, ...o) {
    let c = e(s);
    if (typeof c > "u") {
      if (r)
        c = n();
      else if (process.env.NODE_ENV !== "production")
        throw new Error(process.env.NODE_ENV === "production" ? Pe(16) : "selectState returned undefined for an uninjected slice reducer");
    }
    return t(c, ...o);
  }
  return i.unwrapped = t, i;
}
var Aa = /* @__PURE__ */ QI();
function JI() {
  function t(e, n) {
    return {
      _reducerDefinitionType: "asyncThunk",
      payloadCreator: e,
      ...n
    };
  }
  return t.withTypes = () => t, {
    reducer(e) {
      return Object.assign({
        // hack so the wrapping function has the same name as the original
        // we need to create a wrapper so the `reducerDefinitionType` is not assigned to the original
        [e.name](...n) {
          return e(...n);
        }
      }[e.name], {
        _reducerDefinitionType: "reducer"
        /* reducer */
      });
    },
    preparedReducer(e, n) {
      return {
        _reducerDefinitionType: "reducerWithPrepare",
        prepare: e,
        reducer: n
      };
    },
    asyncThunk: t
  };
}
function XI({
  type: t,
  reducerName: e,
  createNotation: n
}, r, i) {
  let s, o;
  if ("reducer" in r) {
    if (n && !e0(r))
      throw new Error(process.env.NODE_ENV === "production" ? Pe(17) : "Please use the `create.preparedReducer` notation for prepared action creators with the `create` notation.");
    s = r.reducer, o = r.prepare;
  } else
    s = r;
  i.addCase(t, s).exposeCaseReducer(e, s).exposeAction(e, o ? ii(t, o) : ii(t));
}
function ZI(t) {
  return t._reducerDefinitionType === "asyncThunk";
}
function e0(t) {
  return t._reducerDefinitionType === "reducerWithPrepare";
}
function t0({
  type: t,
  reducerName: e
}, n, r, i) {
  if (!i)
    throw new Error(process.env.NODE_ENV === "production" ? Pe(18) : "Cannot use `create.asyncThunk` in the built-in `createSlice`. Use `buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })` to create a customised version of `createSlice`.");
  const {
    payloadCreator: s,
    fulfilled: o,
    pending: c,
    rejected: u,
    settled: l,
    options: f
  } = n, h = i(t, s, f);
  r.exposeAction(e, h), o && r.addCase(h.fulfilled, o), c && r.addCase(h.pending, c), u && r.addCase(h.rejected, u), l && r.addMatcher(h.settled, l), r.exposeCaseReducer(e, {
    fulfilled: o || lo,
    pending: c || lo,
    rejected: u || lo,
    settled: l || lo
  });
}
function lo() {
}
function n0() {
  return {
    ids: [],
    entities: {}
  };
}
function r0(t) {
  function e(n = {}, r) {
    const i = Object.assign(n0(), n);
    return r ? t.setAll(i, r) : i;
  }
  return {
    getInitialState: e
  };
}
function i0() {
  function t(e, n = {}) {
    const {
      createSelector: r = AI
    } = n, i = (h) => h.ids, s = (h) => h.entities, o = r(i, s, (h, _) => h.map((b) => _[b])), c = (h, _) => _, u = (h, _) => h[_], l = r(i, (h) => h.length);
    if (!e)
      return {
        selectIds: i,
        selectEntities: s,
        selectAll: o,
        selectTotal: l,
        selectById: r(s, c, u)
      };
    const f = r(e, s);
    return {
      selectIds: r(e, i),
      selectEntities: f,
      selectAll: r(e, o),
      selectTotal: r(e, l),
      selectById: r(f, c, u)
    };
  }
  return {
    getSelectors: t
  };
}
var s0 = cn;
function o0(t) {
  const e = Ke((n, r) => t(r));
  return function(r) {
    return e(r, void 0);
  };
}
function Ke(t) {
  return function(n, r) {
    function i(o) {
      return kI(o);
    }
    const s = (o) => {
      i(r) ? t(r.payload, o) : t(r, o);
    };
    return s0(n) ? (s(n), n) : gl(n, s);
  };
}
function Hr(t, e) {
  const n = e(t);
  return process.env.NODE_ENV !== "production" && n === void 0 && console.warn("The entity passed to the `selectId` implementation returned undefined.", "You should probably provide your own `selectId` implementation.", "The entity that was passed:", t, "The `selectId` implementation:", e.toString()), n;
}
function mr(t) {
  return Array.isArray(t) || (t = Object.values(t)), t;
}
function _u(t) {
  return cn(t) ? Sa(t) : t;
}
function Ng(t, e, n) {
  t = mr(t);
  const r = _u(n.ids), i = new Set(r), s = [], o = [];
  for (const c of t) {
    const u = Hr(c, e);
    i.has(u) ? o.push({
      id: u,
      changes: c
    }) : s.push(c);
  }
  return [s, o, r];
}
function Dg(t) {
  function e(I, C) {
    const m = Hr(I, t);
    m in C.entities || (C.ids.push(m), C.entities[m] = I);
  }
  function n(I, C) {
    I = mr(I);
    for (const m of I)
      e(m, C);
  }
  function r(I, C) {
    const m = Hr(I, t);
    m in C.entities || C.ids.push(m), C.entities[m] = I;
  }
  function i(I, C) {
    I = mr(I);
    for (const m of I)
      r(m, C);
  }
  function s(I, C) {
    I = mr(I), C.ids = [], C.entities = {}, n(I, C);
  }
  function o(I, C) {
    return c([I], C);
  }
  function c(I, C) {
    let m = !1;
    I.forEach((y) => {
      y in C.entities && (delete C.entities[y], m = !0);
    }), m && (C.ids = C.ids.filter((y) => y in C.entities));
  }
  function u(I) {
    Object.assign(I, {
      ids: [],
      entities: {}
    });
  }
  function l(I, C, m) {
    const y = m.entities[C.id];
    if (y === void 0)
      return !1;
    const E = Object.assign({}, y, C.changes), p = Hr(E, t), g = p !== C.id;
    return g && (I[C.id] = p, delete m.entities[C.id]), m.entities[p] = E, g;
  }
  function f(I, C) {
    return h([I], C);
  }
  function h(I, C) {
    const m = {}, y = {};
    I.forEach((p) => {
      p.id in C.entities && (y[p.id] = {
        id: p.id,
        // Spreads ignore falsy values, so this works even if there isn't
        // an existing update already at this key
        changes: {
          ...y[p.id] ? y[p.id].changes : null,
          ...p.changes
        }
      });
    }), I = Object.values(y), I.length > 0 && I.filter((g) => l(m, g, C)).length > 0 && (C.ids = Object.values(C.entities).map((g) => Hr(g, t)));
  }
  function _(I, C) {
    return b([I], C);
  }
  function b(I, C) {
    const [m, y] = Ng(I, t, C);
    h(y, C), n(m, C);
  }
  return {
    removeAll: o0(u),
    addOne: Ke(e),
    addMany: Ke(n),
    setOne: Ke(r),
    setMany: Ke(i),
    setAll: Ke(s),
    updateOne: Ke(f),
    updateMany: Ke(h),
    upsertOne: Ke(_),
    upsertMany: Ke(b),
    removeOne: Ke(o),
    removeMany: Ke(c)
  };
}
function a0(t, e, n) {
  let r = 0, i = t.length;
  for (; r < i; ) {
    let s = r + i >>> 1;
    const o = t[s];
    n(e, o) >= 0 ? r = s + 1 : i = s;
  }
  return r;
}
function c0(t, e, n) {
  const r = a0(t, e, n);
  return t.splice(r, 0, e), t;
}
function u0(t, e) {
  const {
    removeOne: n,
    removeMany: r,
    removeAll: i
  } = Dg(t);
  function s(y, E) {
    return o([y], E);
  }
  function o(y, E, p) {
    y = mr(y);
    const g = new Set(p ?? Sa(E.ids)), w = y.filter((S) => !g.has(Hr(S, t)));
    w.length !== 0 && m(E, w);
  }
  function c(y, E) {
    return u([y], E);
  }
  function u(y, E) {
    if (y = mr(y), y.length !== 0) {
      for (const p of y)
        delete E.entities[t(p)];
      m(E, y);
    }
  }
  function l(y, E) {
    y = mr(y), E.entities = {}, E.ids = [], o(y, E, []);
  }
  function f(y, E) {
    return h([y], E);
  }
  function h(y, E) {
    let p = !1, g = !1;
    for (let w of y) {
      const S = E.entities[w.id];
      if (!S)
        continue;
      p = !0, Object.assign(S, w.changes);
      const R = t(S);
      if (w.id !== R) {
        g = !0, delete E.entities[w.id];
        const T = E.ids.indexOf(w.id);
        E.ids[T] = R, E.entities[R] = S;
      }
    }
    p && m(E, [], p, g);
  }
  function _(y, E) {
    return b([y], E);
  }
  function b(y, E) {
    const [p, g, w] = Ng(y, t, E);
    g.length && h(g, E), p.length && o(p, E, w);
  }
  function I(y, E) {
    if (y.length !== E.length)
      return !1;
    for (let p = 0; p < y.length && p < E.length; p++)
      if (y[p] !== E[p])
        return !1;
    return !0;
  }
  const m = (y, E, p, g) => {
    const w = _u(y.entities), S = _u(y.ids), R = y.entities;
    let T = S;
    g && (T = Array.from(new Set(S)));
    let A = [];
    for (const D of T) {
      const k = w[D];
      k && A.push(k);
    }
    const O = A.length === 0;
    for (const D of E)
      R[t(D)] = D, O || c0(A, D, e);
    O ? A = E.slice().sort(e) : p && A.sort(e);
    const N = A.map(t);
    I(S, N) || (y.ids = N);
  };
  return {
    removeOne: n,
    removeMany: r,
    removeAll: i,
    addOne: Ke(s),
    updateOne: Ke(f),
    upsertOne: Ke(_),
    setOne: Ke(c),
    setMany: Ke(u),
    setAll: Ke(l),
    addMany: Ke(o),
    updateMany: Ke(h),
    upsertMany: Ke(b)
  };
}
function l0(t = {}) {
  const {
    selectId: e,
    sortComparer: n
  } = {
    sortComparer: !1,
    selectId: (o) => o.id,
    ...t
  }, r = n ? u0(e, n) : Dg(e), i = r0(r), s = i0();
  return {
    selectId: e,
    sortComparer: n,
    ...i,
    ...s,
    ...r
  };
}
var h0 = (t, e) => {
  if (typeof t != "function")
    throw new Error(process.env.NODE_ENV === "production" ? Pe(32) : `${e} is not a function`);
}, _l = "listenerMiddleware", f0 = (t) => {
  let {
    type: e,
    actionCreator: n,
    matcher: r,
    predicate: i,
    effect: s
  } = t;
  if (e)
    i = ii(e).match;
  else if (n)
    e = n.type, i = n.match;
  else if (r)
    i = r;
  else if (!i) throw new Error(process.env.NODE_ENV === "production" ? Pe(21) : "Creating or removing a listener requires one of the known fields for matching an action");
  return h0(s, "options.listener"), {
    predicate: i,
    type: e,
    effect: s
  };
}, d0 = Object.assign((t) => {
  const {
    type: e,
    predicate: n,
    effect: r
  } = f0(t);
  return {
    id: Et(),
    effect: r,
    type: e,
    predicate: n,
    pending: /* @__PURE__ */ new Set(),
    unsubscribe: () => {
      throw new Error(process.env.NODE_ENV === "production" ? Pe(22) : "Unsubscribe not initialized");
    }
  };
}, {
  withTypes: () => d0
}), p0 = Object.assign(ii(`${_l}/add`), {
  withTypes: () => p0
});
ii(`${_l}/removeAll`);
var m0 = Object.assign(ii(`${_l}/remove`), {
  withTypes: () => m0
});
function Pe(t) {
  return `Minified Redux Toolkit error #${t}; visit https://redux-toolkit.js.org/Errors?code=${t} for the full message or use the non-minified dev environment for full errors. `;
}
var vu = { exports: {} }, Sc = {};
/**
 * @license React
 * use-sync-external-store-shim.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var ld;
function g0() {
  if (ld) return Sc;
  ld = 1;
  var t = re;
  function e(h, _) {
    return h === _ && (h !== 0 || 1 / h === 1 / _) || h !== h && _ !== _;
  }
  var n = typeof Object.is == "function" ? Object.is : e, r = t.useState, i = t.useEffect, s = t.useLayoutEffect, o = t.useDebugValue;
  function c(h, _) {
    var b = _(), I = r({ inst: { value: b, getSnapshot: _ } }), C = I[0].inst, m = I[1];
    return s(function() {
      C.value = b, C.getSnapshot = _, u(C) && m({ inst: C });
    }, [h, b, _]), i(function() {
      return u(C) && m({ inst: C }), h(function() {
        u(C) && m({ inst: C });
      });
    }, [h]), o(b), b;
  }
  function u(h) {
    var _ = h.getSnapshot;
    h = h.value;
    try {
      var b = _();
      return !n(h, b);
    } catch {
      return !0;
    }
  }
  function l(h, _) {
    return _();
  }
  var f = typeof window > "u" || typeof window.document > "u" || typeof window.document.createElement > "u" ? l : c;
  return Sc.useSyncExternalStore = t.useSyncExternalStore !== void 0 ? t.useSyncExternalStore : f, Sc;
}
var Ac = {}, hd;
function y0() {
  if (hd) return Ac;
  hd = 1;
  /**
   * @license React
   * use-sync-external-store-shim.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  return process.env.NODE_ENV !== "production" && function() {
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var t = re, e = t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function n(p) {
      {
        for (var g = arguments.length, w = new Array(g > 1 ? g - 1 : 0), S = 1; S < g; S++)
          w[S - 1] = arguments[S];
        r("error", p, w);
      }
    }
    function r(p, g, w) {
      {
        var S = e.ReactDebugCurrentFrame, R = S.getStackAddendum();
        R !== "" && (g += "%s", w = w.concat([R]));
        var T = w.map(function(A) {
          return String(A);
        });
        T.unshift("Warning: " + g), Function.prototype.apply.call(console[p], console, T);
      }
    }
    function i(p, g) {
      return p === g && (p !== 0 || 1 / p === 1 / g) || p !== p && g !== g;
    }
    var s = typeof Object.is == "function" ? Object.is : i, o = t.useState, c = t.useEffect, u = t.useLayoutEffect, l = t.useDebugValue, f = !1, h = !1;
    function _(p, g, w) {
      f || t.startTransition !== void 0 && (f = !0, n("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release."));
      var S = g();
      if (!h) {
        var R = g();
        s(S, R) || (n("The result of getSnapshot should be cached to avoid an infinite loop"), h = !0);
      }
      var T = o({
        inst: {
          value: S,
          getSnapshot: g
        }
      }), A = T[0].inst, O = T[1];
      return u(function() {
        A.value = S, A.getSnapshot = g, b(A) && O({
          inst: A
        });
      }, [p, S, g]), c(function() {
        b(A) && O({
          inst: A
        });
        var N = function() {
          b(A) && O({
            inst: A
          });
        };
        return p(N);
      }, [p]), l(S), S;
    }
    function b(p) {
      var g = p.getSnapshot, w = p.value;
      try {
        var S = g();
        return !s(w, S);
      } catch {
        return !0;
      }
    }
    function I(p, g, w) {
      return g();
    }
    var C = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u", m = !C, y = m ? I : _, E = t.useSyncExternalStore !== void 0 ? t.useSyncExternalStore : y;
    Ac.useSyncExternalStore = E, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
  }(), Ac;
}
process.env.NODE_ENV === "production" ? vu.exports = g0() : vu.exports = y0();
var xg = vu.exports, wu = { exports: {} }, Rc = {};
/**
 * @license React
 * use-sync-external-store-shim/with-selector.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var fd;
function _0() {
  if (fd) return Rc;
  fd = 1;
  var t = re, e = xg;
  function n(l, f) {
    return l === f && (l !== 0 || 1 / l === 1 / f) || l !== l && f !== f;
  }
  var r = typeof Object.is == "function" ? Object.is : n, i = e.useSyncExternalStore, s = t.useRef, o = t.useEffect, c = t.useMemo, u = t.useDebugValue;
  return Rc.useSyncExternalStoreWithSelector = function(l, f, h, _, b) {
    var I = s(null);
    if (I.current === null) {
      var C = { hasValue: !1, value: null };
      I.current = C;
    } else C = I.current;
    I = c(function() {
      function y(S) {
        if (!E) {
          if (E = !0, p = S, S = _(S), b !== void 0 && C.hasValue) {
            var R = C.value;
            if (b(R, S)) return g = R;
          }
          return g = S;
        }
        if (R = g, r(p, S)) return R;
        var T = _(S);
        return b !== void 0 && b(R, T) ? R : (p = S, g = T);
      }
      var E = !1, p, g, w = h === void 0 ? null : h;
      return [function() {
        return y(f());
      }, w === null ? void 0 : function() {
        return y(w());
      }];
    }, [f, h, _, b]);
    var m = i(l, I[0], I[1]);
    return o(function() {
      C.hasValue = !0, C.value = m;
    }, [m]), u(m), m;
  }, Rc;
}
var Cc = {}, dd;
function v0() {
  if (dd) return Cc;
  dd = 1;
  /**
   * @license React
   * use-sync-external-store-shim/with-selector.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  return process.env.NODE_ENV !== "production" && function() {
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var t = re, e = xg;
    function n(f, h) {
      return f === h && (f !== 0 || 1 / f === 1 / h) || f !== f && h !== h;
    }
    var r = typeof Object.is == "function" ? Object.is : n, i = e.useSyncExternalStore, s = t.useRef, o = t.useEffect, c = t.useMemo, u = t.useDebugValue;
    function l(f, h, _, b, I) {
      var C = s(null), m;
      C.current === null ? (m = {
        hasValue: !1,
        value: null
      }, C.current = m) : m = C.current;
      var y = c(function() {
        var w = !1, S, R, T = function(D) {
          if (!w) {
            w = !0, S = D;
            var k = b(D);
            if (I !== void 0 && m.hasValue) {
              var Y = m.value;
              if (I(Y, k))
                return R = Y, Y;
            }
            return R = k, k;
          }
          var oe = S, ue = R;
          if (r(oe, D))
            return ue;
          var ae = b(D);
          return I !== void 0 && I(ue, ae) ? ue : (S = D, R = ae, ae);
        }, A = _ === void 0 ? null : _, O = function() {
          return T(h());
        }, N = A === null ? void 0 : function() {
          return T(A());
        };
        return [O, N];
      }, [h, _, b, I]), E = y[0], p = y[1], g = i(f, E, p);
      return o(function() {
        m.hasValue = !0, m.value = g;
      }, [g]), u(g), g;
    }
    Cc.useSyncExternalStoreWithSelector = l, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
  }(), Cc;
}
process.env.NODE_ENV === "production" ? wu.exports = _0() : wu.exports = v0();
var w0 = wu.exports;
function E0(t) {
  t();
}
let Lg = E0;
const b0 = (t) => Lg = t, L1 = () => Lg, pd = Symbol.for("react-redux-context"), md = typeof globalThis < "u" ? globalThis : (
  /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */
  {}
);
function T0() {
  var t;
  if (!ro.createContext) return {};
  const e = (t = md[pd]) != null ? t : md[pd] = /* @__PURE__ */ new Map();
  let n = e.get(ro.createContext);
  return n || (n = ro.createContext(null), process.env.NODE_ENV !== "production" && (n.displayName = "ReactRedux"), e.set(ro.createContext, n)), n;
}
const Eu = /* @__PURE__ */ T0();
function Mg(t = Eu) {
  return function() {
    const n = fw(t);
    if (process.env.NODE_ENV !== "production" && !n)
      throw new Error("could not find react-redux context value; please ensure the component is wrapped in a <Provider>");
    return n;
  };
}
const I0 = /* @__PURE__ */ Mg(), S0 = () => {
  throw new Error("uSES not initialized!");
};
let Vg = S0;
const A0 = (t) => {
  Vg = t;
}, R0 = (t, e) => t === e;
function C0(t = Eu) {
  const e = t === Eu ? I0 : Mg(t);
  return function(r, i = {}) {
    const {
      equalityFn: s = R0,
      stabilityCheck: o = void 0,
      noopCheck: c = void 0
    } = typeof i == "function" ? {
      equalityFn: i
    } : i;
    if (process.env.NODE_ENV !== "production") {
      if (!r)
        throw new Error("You must pass a selector to useSelector");
      if (typeof r != "function")
        throw new Error("You must pass a function as a selector to useSelector");
      if (typeof s != "function")
        throw new Error("You must pass a function as an equality function to useSelector");
    }
    const {
      store: u,
      subscription: l,
      getServerState: f,
      stabilityCheck: h,
      noopCheck: _
    } = e(), b = dw(!0), I = pw({
      [r.name](m) {
        const y = r(m);
        if (process.env.NODE_ENV !== "production") {
          const E = typeof o > "u" ? h : o;
          if (E === "always" || E === "once" && b.current) {
            const g = r(m);
            if (!s(y, g)) {
              let w;
              try {
                throw new Error();
              } catch (S) {
                ({
                  stack: w
                } = S);
              }
              console.warn("Selector " + (r.name || "unknown") + ` returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization`, {
                state: m,
                selected: y,
                selected2: g,
                stack: w
              });
            }
          }
          const p = typeof c > "u" ? _ : c;
          if ((p === "always" || p === "once" && b.current) && y === m) {
            let g;
            try {
              throw new Error();
            } catch (w) {
              ({
                stack: g
              } = w);
            }
            console.warn("Selector " + (r.name || "unknown") + ` returned the root state when called. This can lead to unnecessary rerenders.
Selectors that return the entire state are almost certainly a mistake, as they will cause a rerender whenever *anything* in state changes.`, {
              stack: g
            });
          }
          b.current && (b.current = !1);
        }
        return y;
      }
    }[r.name], [r, h, o]), C = Vg(l.addNestedSub, u.getState, f || u.getState, I, s);
    return mw(C), C;
  };
}
const Fe = /* @__PURE__ */ C0();
var ho = { exports: {} }, Se = {};
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var gd;
function P0() {
  if (gd) return Se;
  gd = 1;
  var t = typeof Symbol == "function" && Symbol.for, e = t ? Symbol.for("react.element") : 60103, n = t ? Symbol.for("react.portal") : 60106, r = t ? Symbol.for("react.fragment") : 60107, i = t ? Symbol.for("react.strict_mode") : 60108, s = t ? Symbol.for("react.profiler") : 60114, o = t ? Symbol.for("react.provider") : 60109, c = t ? Symbol.for("react.context") : 60110, u = t ? Symbol.for("react.async_mode") : 60111, l = t ? Symbol.for("react.concurrent_mode") : 60111, f = t ? Symbol.for("react.forward_ref") : 60112, h = t ? Symbol.for("react.suspense") : 60113, _ = t ? Symbol.for("react.suspense_list") : 60120, b = t ? Symbol.for("react.memo") : 60115, I = t ? Symbol.for("react.lazy") : 60116, C = t ? Symbol.for("react.block") : 60121, m = t ? Symbol.for("react.fundamental") : 60117, y = t ? Symbol.for("react.responder") : 60118, E = t ? Symbol.for("react.scope") : 60119;
  function p(w) {
    if (typeof w == "object" && w !== null) {
      var S = w.$$typeof;
      switch (S) {
        case e:
          switch (w = w.type, w) {
            case u:
            case l:
            case r:
            case s:
            case i:
            case h:
              return w;
            default:
              switch (w = w && w.$$typeof, w) {
                case c:
                case f:
                case I:
                case b:
                case o:
                  return w;
                default:
                  return S;
              }
          }
        case n:
          return S;
      }
    }
  }
  function g(w) {
    return p(w) === l;
  }
  return Se.AsyncMode = u, Se.ConcurrentMode = l, Se.ContextConsumer = c, Se.ContextProvider = o, Se.Element = e, Se.ForwardRef = f, Se.Fragment = r, Se.Lazy = I, Se.Memo = b, Se.Portal = n, Se.Profiler = s, Se.StrictMode = i, Se.Suspense = h, Se.isAsyncMode = function(w) {
    return g(w) || p(w) === u;
  }, Se.isConcurrentMode = g, Se.isContextConsumer = function(w) {
    return p(w) === c;
  }, Se.isContextProvider = function(w) {
    return p(w) === o;
  }, Se.isElement = function(w) {
    return typeof w == "object" && w !== null && w.$$typeof === e;
  }, Se.isForwardRef = function(w) {
    return p(w) === f;
  }, Se.isFragment = function(w) {
    return p(w) === r;
  }, Se.isLazy = function(w) {
    return p(w) === I;
  }, Se.isMemo = function(w) {
    return p(w) === b;
  }, Se.isPortal = function(w) {
    return p(w) === n;
  }, Se.isProfiler = function(w) {
    return p(w) === s;
  }, Se.isStrictMode = function(w) {
    return p(w) === i;
  }, Se.isSuspense = function(w) {
    return p(w) === h;
  }, Se.isValidElementType = function(w) {
    return typeof w == "string" || typeof w == "function" || w === r || w === l || w === s || w === i || w === h || w === _ || typeof w == "object" && w !== null && (w.$$typeof === I || w.$$typeof === b || w.$$typeof === o || w.$$typeof === c || w.$$typeof === f || w.$$typeof === m || w.$$typeof === y || w.$$typeof === E || w.$$typeof === C);
  }, Se.typeOf = p, Se;
}
var Ae = {};
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var yd;
function k0() {
  return yd || (yd = 1, process.env.NODE_ENV !== "production" && function() {
    var t = typeof Symbol == "function" && Symbol.for, e = t ? Symbol.for("react.element") : 60103, n = t ? Symbol.for("react.portal") : 60106, r = t ? Symbol.for("react.fragment") : 60107, i = t ? Symbol.for("react.strict_mode") : 60108, s = t ? Symbol.for("react.profiler") : 60114, o = t ? Symbol.for("react.provider") : 60109, c = t ? Symbol.for("react.context") : 60110, u = t ? Symbol.for("react.async_mode") : 60111, l = t ? Symbol.for("react.concurrent_mode") : 60111, f = t ? Symbol.for("react.forward_ref") : 60112, h = t ? Symbol.for("react.suspense") : 60113, _ = t ? Symbol.for("react.suspense_list") : 60120, b = t ? Symbol.for("react.memo") : 60115, I = t ? Symbol.for("react.lazy") : 60116, C = t ? Symbol.for("react.block") : 60121, m = t ? Symbol.for("react.fundamental") : 60117, y = t ? Symbol.for("react.responder") : 60118, E = t ? Symbol.for("react.scope") : 60119;
    function p(G) {
      return typeof G == "string" || typeof G == "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      G === r || G === l || G === s || G === i || G === h || G === _ || typeof G == "object" && G !== null && (G.$$typeof === I || G.$$typeof === b || G.$$typeof === o || G.$$typeof === c || G.$$typeof === f || G.$$typeof === m || G.$$typeof === y || G.$$typeof === E || G.$$typeof === C);
    }
    function g(G) {
      if (typeof G == "object" && G !== null) {
        var Te = G.$$typeof;
        switch (Te) {
          case e:
            var J = G.type;
            switch (J) {
              case u:
              case l:
              case r:
              case s:
              case i:
              case h:
                return J;
              default:
                var $e = J && J.$$typeof;
                switch ($e) {
                  case c:
                  case f:
                  case I:
                  case b:
                  case o:
                    return $e;
                  default:
                    return Te;
                }
            }
          case n:
            return Te;
        }
      }
    }
    var w = u, S = l, R = c, T = o, A = e, O = f, N = r, D = I, k = b, Y = n, oe = s, ue = i, ae = h, x = !1;
    function L(G) {
      return x || (x = !0, console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.")), B(G) || g(G) === u;
    }
    function B(G) {
      return g(G) === l;
    }
    function U(G) {
      return g(G) === c;
    }
    function q(G) {
      return g(G) === o;
    }
    function H(G) {
      return typeof G == "object" && G !== null && G.$$typeof === e;
    }
    function ie(G) {
      return g(G) === f;
    }
    function K(G) {
      return g(G) === r;
    }
    function V(G) {
      return g(G) === I;
    }
    function j(G) {
      return g(G) === b;
    }
    function Q(G) {
      return g(G) === n;
    }
    function Z(G) {
      return g(G) === s;
    }
    function te(G) {
      return g(G) === i;
    }
    function ge(G) {
      return g(G) === h;
    }
    Ae.AsyncMode = w, Ae.ConcurrentMode = S, Ae.ContextConsumer = R, Ae.ContextProvider = T, Ae.Element = A, Ae.ForwardRef = O, Ae.Fragment = N, Ae.Lazy = D, Ae.Memo = k, Ae.Portal = Y, Ae.Profiler = oe, Ae.StrictMode = ue, Ae.Suspense = ae, Ae.isAsyncMode = L, Ae.isConcurrentMode = B, Ae.isContextConsumer = U, Ae.isContextProvider = q, Ae.isElement = H, Ae.isForwardRef = ie, Ae.isFragment = K, Ae.isLazy = V, Ae.isMemo = j, Ae.isPortal = Q, Ae.isProfiler = Z, Ae.isStrictMode = te, Ae.isSuspense = ge, Ae.isValidElementType = p, Ae.typeOf = g;
  }()), Ae;
}
var _d;
function O0() {
  return _d || (_d = 1, process.env.NODE_ENV === "production" ? ho.exports = P0() : ho.exports = k0()), ho.exports;
}
var Fg = O0(), N0 = {
  $$typeof: !0,
  render: !0,
  defaultProps: !0,
  displayName: !0,
  propTypes: !0
}, D0 = {
  $$typeof: !0,
  compare: !0,
  defaultProps: !0,
  displayName: !0,
  propTypes: !0,
  type: !0
}, Ug = {};
Ug[Fg.ForwardRef] = N0;
Ug[Fg.Memo] = D0;
var Re = {};
/**
 * @license React
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var vd;
function x0() {
  if (vd) return Re;
  vd = 1;
  var t = Symbol.for("react.element"), e = Symbol.for("react.portal"), n = Symbol.for("react.fragment"), r = Symbol.for("react.strict_mode"), i = Symbol.for("react.profiler"), s = Symbol.for("react.provider"), o = Symbol.for("react.context"), c = Symbol.for("react.server_context"), u = Symbol.for("react.forward_ref"), l = Symbol.for("react.suspense"), f = Symbol.for("react.suspense_list"), h = Symbol.for("react.memo"), _ = Symbol.for("react.lazy"), b = Symbol.for("react.offscreen"), I;
  I = Symbol.for("react.module.reference");
  function C(m) {
    if (typeof m == "object" && m !== null) {
      var y = m.$$typeof;
      switch (y) {
        case t:
          switch (m = m.type, m) {
            case n:
            case i:
            case r:
            case l:
            case f:
              return m;
            default:
              switch (m = m && m.$$typeof, m) {
                case c:
                case o:
                case u:
                case _:
                case h:
                case s:
                  return m;
                default:
                  return y;
              }
          }
        case e:
          return y;
      }
    }
  }
  return Re.ContextConsumer = o, Re.ContextProvider = s, Re.Element = t, Re.ForwardRef = u, Re.Fragment = n, Re.Lazy = _, Re.Memo = h, Re.Portal = e, Re.Profiler = i, Re.StrictMode = r, Re.Suspense = l, Re.SuspenseList = f, Re.isAsyncMode = function() {
    return !1;
  }, Re.isConcurrentMode = function() {
    return !1;
  }, Re.isContextConsumer = function(m) {
    return C(m) === o;
  }, Re.isContextProvider = function(m) {
    return C(m) === s;
  }, Re.isElement = function(m) {
    return typeof m == "object" && m !== null && m.$$typeof === t;
  }, Re.isForwardRef = function(m) {
    return C(m) === u;
  }, Re.isFragment = function(m) {
    return C(m) === n;
  }, Re.isLazy = function(m) {
    return C(m) === _;
  }, Re.isMemo = function(m) {
    return C(m) === h;
  }, Re.isPortal = function(m) {
    return C(m) === e;
  }, Re.isProfiler = function(m) {
    return C(m) === i;
  }, Re.isStrictMode = function(m) {
    return C(m) === r;
  }, Re.isSuspense = function(m) {
    return C(m) === l;
  }, Re.isSuspenseList = function(m) {
    return C(m) === f;
  }, Re.isValidElementType = function(m) {
    return typeof m == "string" || typeof m == "function" || m === n || m === i || m === r || m === l || m === f || m === b || typeof m == "object" && m !== null && (m.$$typeof === _ || m.$$typeof === h || m.$$typeof === s || m.$$typeof === o || m.$$typeof === u || m.$$typeof === I || m.getModuleId !== void 0);
  }, Re.typeOf = C, Re;
}
var Ce = {};
/**
 * @license React
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var wd;
function L0() {
  return wd || (wd = 1, process.env.NODE_ENV !== "production" && function() {
    var t = Symbol.for("react.element"), e = Symbol.for("react.portal"), n = Symbol.for("react.fragment"), r = Symbol.for("react.strict_mode"), i = Symbol.for("react.profiler"), s = Symbol.for("react.provider"), o = Symbol.for("react.context"), c = Symbol.for("react.server_context"), u = Symbol.for("react.forward_ref"), l = Symbol.for("react.suspense"), f = Symbol.for("react.suspense_list"), h = Symbol.for("react.memo"), _ = Symbol.for("react.lazy"), b = Symbol.for("react.offscreen"), I = !1, C = !1, m = !1, y = !1, E = !1, p;
    p = Symbol.for("react.module.reference");
    function g(J) {
      return !!(typeof J == "string" || typeof J == "function" || J === n || J === i || E || J === r || J === l || J === f || y || J === b || I || C || m || typeof J == "object" && J !== null && (J.$$typeof === _ || J.$$typeof === h || J.$$typeof === s || J.$$typeof === o || J.$$typeof === u || // This needs to include all possible module reference object
      // types supported by any Flight configuration anywhere since
      // we don't know which Flight build this will end up being used
      // with.
      J.$$typeof === p || J.getModuleId !== void 0));
    }
    function w(J) {
      if (typeof J == "object" && J !== null) {
        var $e = J.$$typeof;
        switch ($e) {
          case t:
            var me = J.type;
            switch (me) {
              case n:
              case i:
              case r:
              case l:
              case f:
                return me;
              default:
                var ye = me && me.$$typeof;
                switch (ye) {
                  case c:
                  case o:
                  case u:
                  case _:
                  case h:
                  case s:
                    return ye;
                  default:
                    return $e;
                }
            }
          case e:
            return $e;
        }
      }
    }
    var S = o, R = s, T = t, A = u, O = n, N = _, D = h, k = e, Y = i, oe = r, ue = l, ae = f, x = !1, L = !1;
    function B(J) {
      return x || (x = !0, console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.")), !1;
    }
    function U(J) {
      return L || (L = !0, console.warn("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.")), !1;
    }
    function q(J) {
      return w(J) === o;
    }
    function H(J) {
      return w(J) === s;
    }
    function ie(J) {
      return typeof J == "object" && J !== null && J.$$typeof === t;
    }
    function K(J) {
      return w(J) === u;
    }
    function V(J) {
      return w(J) === n;
    }
    function j(J) {
      return w(J) === _;
    }
    function Q(J) {
      return w(J) === h;
    }
    function Z(J) {
      return w(J) === e;
    }
    function te(J) {
      return w(J) === i;
    }
    function ge(J) {
      return w(J) === r;
    }
    function G(J) {
      return w(J) === l;
    }
    function Te(J) {
      return w(J) === f;
    }
    Ce.ContextConsumer = S, Ce.ContextProvider = R, Ce.Element = T, Ce.ForwardRef = A, Ce.Fragment = O, Ce.Lazy = N, Ce.Memo = D, Ce.Portal = k, Ce.Profiler = Y, Ce.StrictMode = oe, Ce.Suspense = ue, Ce.SuspenseList = ae, Ce.isAsyncMode = B, Ce.isConcurrentMode = U, Ce.isContextConsumer = q, Ce.isContextProvider = H, Ce.isElement = ie, Ce.isForwardRef = K, Ce.isFragment = V, Ce.isLazy = j, Ce.isMemo = Q, Ce.isPortal = Z, Ce.isProfiler = te, Ce.isStrictMode = ge, Ce.isSuspense = G, Ce.isSuspenseList = Te, Ce.isValidElementType = g, Ce.typeOf = w;
  }()), Ce;
}
process.env.NODE_ENV === "production" ? x0() : L0();
A0(w0.useSyncExternalStoreWithSelector);
b0(Ew);
function Rt(t) {
  const { name: e, default: n, id: r, actions: i, uniques: s = [], onSave: o, onRead: c } = t, u = l0({
    selectId: (m) => m[r]
  }), l = u.getSelectors(), f = u.getInitialState({
    saved: !0,
    status: "idle",
    writeStatus: "ready",
    id: r,
    name: e,
    loadingTime: 600,
    changed: !1
  });
  function h(m, y) {
    const E = Object.values(y), p = Object.values(m).map((w) => {
      const S = typeof n == "function" ? n(y, w) : n;
      return mm(w, S || {});
    });
    if (!s.length)
      return p;
    const g = [...E, ...p.filter(Boolean)];
    return p.filter((w, S) => !g.slice(0, S).find((A) => s.some((O) => Array.isArray(O) ? O.every((N) => (A == null ? void 0 : A[N]) == (w == null ? void 0 : w[N])) : (A == null ? void 0 : A[O]) == w[O])));
  }
  const _ = Aa({
    name: e,
    initialState: f,
    reducers: {
      set(m, { payload: y = [] }) {
        u.setAll(m, h(y, m));
      },
      add(m, { payload: y = [] }) {
        const E = h(y, m);
        u.addMany(m, E), E.length && (m.changed = !0);
      },
      remove(m, { payload: y = [] }) {
        y.some((p) => m.ids.includes(p)) && (m.changed = !0), u.removeMany(m, y);
      },
      update(m, { payload: y = [] }) {
        y.map(({ id: g }) => g).some((g) => m.ids.includes(g)) && (m.changed = !0), u.updateMany(m, y);
      },
      reset(m) {
        m.ids.length || (m.changed = !0), u.removeAll(m);
      },
      upsert(m, { payload: y = [] }) {
        u.upsertMany(m, y), m.changed = !0;
      },
      changeStatus(m, { payload: y }) {
        m.status = y;
      },
      setLoadingTime(m, { payload: y }) {
        m.loadingTime = y;
      },
      setChanged(m, { payload: y }) {
        m.changed = y;
      },
      changeWriteStatus(m, { payload: y }) {
        m.writeStatus = y;
      },
      ...i
    }
  }), b = {
    getFull() {
      return Fe((y) => y[e]);
    },
    getIds() {
      return Fe((y) => l.selectIds(y[e]));
    },
    getId() {
      return Fe((y) => y[e].id);
    },
    remove(m) {
      de.dispatch(_.actions.remove(m));
    },
    add(m) {
      de.dispatch(_.actions.add(m));
    },
    upsert(m) {
      de.dispatch(_.actions.upsert(m));
    },
    getOne(m) {
      return Fe((y) => {
        const E = l.selectById(y[e], m);
        return typeof E > "u" ? void 0 : E;
      });
    },
    setOne(m, y) {
      de.dispatch(
        _.actions.update([
          {
            id: m,
            changes: y
          }
        ])
      );
    },
    setWriteStatus(m = "ready") {
      de.dispatch(_.actions.changeWriteStatus(m));
    },
    useOne(m) {
      const y = b.getOne(m);
      return pm(
        y,
        (E) => E !== void 0 && b.setOne(m, E),
        (E) => E ?? void 0
      );
    },
    getOneFeild(m, y) {
      return Fe((p) => {
        var w;
        const g = (w = l.selectById(p[e], m)) == null ? void 0 : w[y];
        return typeof g > "u" ? void 0 : g;
      });
    },
    setOneFeild(m, y, E) {
      de.dispatch(
        _.actions.update([
          {
            id: m,
            changes: {
              [y]: E
            }
          }
        ])
      );
    },
    useOneFeild(m, y) {
      const E = b.getOneFeild(m, y);
      return pm(
        E,
        (g) => {
          g != null && b.setOneFeild(m, y, g);
        },
        (g) => g
      );
    },
    getOneFeilds(m, y) {
      return Fe((p) => {
        const g = l.selectById(p[e], m);
        if (!g)
          return;
        const w = {};
        return y.forEach((S) => {
          w[S] = g[S];
        }), w;
      });
    },
    getAll() {
      return Fe((y) => l.selectAll(y[e]));
    },
    setAll(m) {
      de.dispatch(_.actions.set(m));
    },
    useAll() {
      const m = b.getAll(), y = vt(m);
      return re.useEffect(() => {
        b.setAll(y.get);
      }, [y.get]), re.useEffect(() => {
        y.set(m);
      }, [m]), y;
    },
    getWriteStatus() {
      return Fe((y) => y[e].writeStatus);
    },
    useWriteStatus() {
      const m = b.getWriteStatus(), y = vt(m);
      return re.useEffect(() => {
        b.setWriteStatus(y.get);
      }, [y.get]), re.useEffect(() => {
        y.set(m);
      }, [m]), y;
    },
    getStatus() {
      return Fe((y) => y[e].status);
    },
    setStatus(m) {
      de.dispatch(_.actions.changeStatus(m));
    },
    useStatus() {
      const m = b.getStatus(), y = vt(m);
      return re.useEffect(() => {
        b.setStatus(y.get);
      }, [y.get]), re.useEffect(() => {
        y.set(m);
      }, [m]), y;
    },
    getEntity() {
      return Fe((y) => l.selectEntities(y[e]));
    },
    getLoadingTime() {
      return Fe((y) => y[e].loadingTime);
    },
    setLoadingTime(m) {
      de.dispatch(_.actions.setLoadingTime(m));
    },
    useLoadingTime() {
      const m = b.getLoadingTime(), y = vt(m);
      re.useEffect(() => {
        b.setLoadingTime(y.get);
      }, [y.get]), re.useEffect(() => {
        y.set(m);
      }, [m]);
    },
    getChanged() {
      return Fe((y) => y[e].changed);
    },
    setChanged(m) {
      de.dispatch(_.actions.setChanged(m));
    },
    useChanged() {
      const m = b.getChanged(), y = vt(m);
      re.useEffect(() => {
        b.setChanged(y.get);
      }, [y.get]), re.useEffect(() => {
        y.set(m);
      }, [m]);
    }
  };
  function I() {
    const m = b.getStatus(), y = b.getId(), E = b.getWriteStatus(), p = b.getLoadingTime();
    return pi(async () => {
      if (m == "idle") {
        const g = new fa();
        g.clear(), b.setStatus("loading"), await g.start(p);
        try {
          if (!c)
            return;
          let w = c();
          w instanceof Promise && (w = await w), b.setChanged(!1), b.setStatus("success"), b.setAll(w);
        } catch {
          b.setAll([]), b.setStatus("error");
        }
      }
    }, [m]), pi(async () => {
      if (E == "idle") {
        b.setWriteStatus("loading");
        const g = {};
        try {
          const w = de.getState(), { [e]: S } = w;
          Object.values(S.entities).forEach((T) => {
            if (!T)
              return;
            const { [y]: A, ...O } = T;
            g[A] = O;
          });
          const R = o == null ? void 0 : o(g, t, w);
          R instanceof Promise && await R, b.setWriteStatus("success"), b.setWriteStatus("ready");
        } catch {
          b.setWriteStatus("error");
        }
      }
    }, [E]), re.useEffect(() => {
      const g = Object.entries(t.data || {}).map(([w, S]) => ({
        [y]: w,
        ...S
      }));
      b.setAll(g);
    }, []), { id: y, saved: E, status: m, timeLoading: p };
  }
  return {
    slice: _,
    entity: u,
    hooks: b,
    entitySelect: l,
    initialState: f,
    init: I,
    select: (m) => m[e]
  };
}
const M0 = {
  data: {
    settings: {
      focused: "user",
      label: "settings controler",
      tabs: {
        user: {
          icon: {
            value: "faTools"
          }
        },
        keyboardShortcuts: {
          icon: {
            value: "faKeyboard"
          },
          news: {
            value: "faKeyboard"
          }
        },
        icons: {
          icon: { value: "faIcons" }
        },
        colors: {
          icon: {
            value: "faPenRuler",
            type: "solid"
          }
        }
      }
    },
    "settings.viewType": {
      focused: "list",
      label: "settings layout",
      tab: {
        list: {},
        tree: {}
      }
    }
  }
}, { data: V0 } = M0, F0 = {
  name: "views",
  id: "viewId",
  default(t, e) {
    const n = e.tabs || {};
    for (const r in n)
      n[r].label || (n[r].label = r);
    return {
      viewId: Et(),
      focused: null,
      tabs: n
    };
  },
  data: V0
}, { hooks: jg, slice: Ed, init: M1, select: V1 } = Rt(F0);
function F1(t) {
  const e = jg.getOne(t);
  return re.useMemo(() => {
    var n;
    return typeof (e == null ? void 0 : e.focused) == "number" ? (n = e == null ? void 0 : e.tabs) == null ? void 0 : n[e.focused] : null;
  }, [e]);
}
const U0 = {
  id: "treeId",
  name: "tree",
  default: {
    expanded: {},
    separator: "/"
  },
  actions: {
    next(t, { payload: e }) {
      t.entities[e];
    },
    back(t, { payload: e }) {
      t.entities[e];
    },
    toggleExpand(t, { payload: e }) {
      var r;
      const n = t.entities[e];
      n && n.focused && (n.expanded = {
        ...n.expanded || {},
        [n.focused]: !((r = n.expanded) != null && r[n.focused])
      });
    },
    expandMore(t, { payload: e }) {
      const n = t.entities[e];
      n && n.focused && (n.expanded = {
        ...n.expanded || {},
        [n.focused]: !0
      });
    },
    expandLess(t, { payload: e }) {
      const n = t.entities[e];
      n && n.focused && (n.expanded = {
        ...n.expanded || {},
        [n.focused]: !1
      });
    },
    focusParent(t, { payload: e }) {
      const n = t.entities[e];
      if (n && n.focused && n.separator) {
        const r = n.focused.split(n.separator).slice(0, -1).join(n.separator);
        n.focused = r || null;
      }
    },
    focusLeft(t, { payload: e }) {
      var r;
      const n = t.entities[e];
      if (n && n.focused && n.separator)
        if ((r = n.expanded) == null ? void 0 : r[n.focused])
          n.expanded = {
            ...n.expanded || {},
            [n.focused]: !1
          };
        else {
          const s = n.focused.split(n.separator).slice(0, -1).join(n.separator);
          n.focused = s || null;
        }
    },
    focusRight(t, { payload: e }) {
      var r;
      const n = t.entities[e];
      if (n && n.focused && n.separator)
        if (!((r = n.expanded) == null ? void 0 : r[n.focused]))
          n.expanded = {
            ...n.expanded || {},
            [n.focused]: !0
          };
        else {
          const s = [...n.focused.split(n.separator), "0"].join(n.separator);
          n.focused = s;
        }
    }
  },
  data: {}
}, { init: U1, hooks: bd, slice: Td } = Rt(U0);
function j1(t) {
  const e = bd.getOne(t);
  re.useEffect(() => {
    e || bd.add([
      {
        treeId: t,
        ends: []
      }
    ]);
  }, [e]);
}
const j0 = {
  content: null,
  position: null,
  x: "left",
  y: "bottom"
}, si = Aa({
  initialState: j0,
  name: "title",
  reducers: {
    // actions
    setContent(t, { payload: e }) {
      t.content = e;
    },
    setPosition(t, { payload: e }) {
      t.position = e;
    },
    setX(t, { payload: e }) {
      t.x = e;
    },
    setY(t, { payload: e }) {
      t.y = e;
    }
  }
});
function B1(t) {
  de.dispatch(si.actions.setContent(t));
}
function $1() {
  return Fe((e) => e.title.content, Xn);
}
function q1(t) {
  de.dispatch(si.actions.setPosition(t));
}
function z1() {
  return Fe((e) => e.title.position, Xn);
}
function K1(t = "left") {
  de.dispatch(si.actions.setX(t));
}
function H1() {
  return Fe((e) => e.title.x, Xn);
}
function G1(t = "bottom") {
  de.dispatch(si.actions.setY(t));
}
function W1() {
  return Fe((e) => e.title.y, Xn);
}
const B0 = {
  id: "id",
  name: "toasts",
  default: () => ({
    id: Et(),
    type: "info"
  })
}, { hooks: $0, init: Q1, select: Y1, slice: Id, entity: J1 } = Rt(B0), Nr = {
  id: "slotId",
  name: "slot",
  default: {
    slotId: Et(14),
    focused: null,
    submited: null,
    selected: {},
    skiped: {},
    length: 0,
    direction: null,
    redirect: !0
  },
  actions: {
    changeSelectIndexs(t, {
      payload: { name: e, items: n = {} }
    }) {
      const r = t.entities[e];
      r && (r.selected = { ...n });
    },
    removeSelection(t, { payload: e }) {
      t.entities[e] && q0.updateOne(t, {
        id: e,
        changes: {
          ...t.entities[e],
          selected: {}
        }
      });
    },
    next(t, { payload: e }) {
      var i;
      const n = t.entities[e];
      if (!n || !n.length) {
        n && (n.focused = null);
        return;
      }
      const { redirect: r = !0 } = n;
      n.direction = "forward", typeof n.focused != "number" && (n.focused = -1);
      do
        n.focused++, r ? n.focused = Math.abs(n.focused) % n.length : n.focused >= n.length && n.focused--;
      while ((i = n.skiped) != null && i[n.focused]);
    },
    back(t, { payload: e }) {
      var i;
      const n = t.entities[e];
      if (!n || !n.length) {
        n && (n.focused = null);
        return;
      }
      const { redirect: r = !0 } = n;
      n.direction = "backward", typeof n.focused != "number" && (n.focused = n.length);
      do
        n.focused--, n.focused < 0 && r ? n.focused = n.length - 1 : n.focused < 0 && (n.focused = 0);
      while ((i = n.skiped) != null && i[n.focused]);
    },
    submit(t, { payload: e }) {
      const n = t.entities[e];
      n && (n.submited = n.focused);
    },
    submitNext(t, { payload: e }) {
      var i;
      const n = t.entities[e];
      if (!n || !n.length) {
        n && (n.submited = null);
        return;
      }
      const { redirect: r = !0 } = n;
      n.direction = "forward", typeof n.submited != "number" && (n.submited = -1);
      do
        n.submited++, r && (n.submited = n.submited % n.length);
      while ((i = n.skiped) != null && i[n.submited]);
    },
    submitBack(t, { payload: e }) {
      var i;
      const n = t.entities[e];
      if (!n || !n.length) {
        n && (n.submited = null);
        return;
      }
      const { redirect: r = !0 } = n;
      n.direction = "backward", typeof n.submited != "number" && (n.submited = n.length);
      do
        n.submited--, r && (n.submited = n.submited % n.length), n.submited < 0 && (n.submited = n.length - 1);
      while ((i = n.skiped) != null && i[n.submited]);
    },
    submitForce(t, { payload: { name: e, index: n = null } }) {
      const r = t.entities[e];
      r && (r.focused = n, r.submited = n);
    },
    escape(t, { payload: e }) {
      const n = t.entities[e];
      n && (n.selected = {}, n.focused = null, n.direction = null, n.submited = null);
    },
    selectAll(t, { payload: e }) {
      const n = t.entities[e];
      if (!n)
        return;
      const r = {};
      gw(0, Number(n.length) - 1, 1).forEach((i) => {
        r[i] = !0;
      }), n.selected = r, n.direction = null;
    }
  }
}, { hooks: So, slice: Sd, entity: q0, init: X1 } = Rt(Nr);
function Z1(t) {
  de.dispatch({
    type: `${Nr.name}/next`,
    payload: t
  });
}
function ex(t) {
  return de.dispatch({
    type: `${Nr.name}/back`,
    payload: t
  });
}
function tx(t) {
  return de.dispatch({
    type: `${Nr.name}/escape`,
    payload: t
  });
}
function nx(t) {
  de.dispatch({ type: `${Nr.name}/submit`, payload: t });
}
function rx(t) {
  de.dispatch({ type: `${Nr.name}/submitNext`, payload: t });
}
function ix(t) {
  de.dispatch({ type: `${Nr.name}/submitBack`, payload: t });
}
function sx(t, e) {
  const n = So.getOne(t);
  re.useEffect(() => {
    n || So.upsert([
      {
        slotId: t,
        length: e.length
      }
    ]);
  }, [n, e]), re.useEffect(() => {
    So.setOneFeild(t, "length", e.length);
  }, [e]);
}
function ox(t, e, n = "submited") {
  const r = So.getOneFeild(e, n);
  return re.useMemo(() => typeof r != "number" ? null : t[r] || null, [r, t]);
}
const z0 = {
  data: {
    "preferences/animation.boolean": {
      def: !0,
      desc: "animation in the preferences",
      name: "animation in preferences"
    },
    "preferences/fastScrollKey.enum": {
      config: {
        list: [
          {
            value: "alt"
          },
          {
            value: "control"
          },
          {
            value: "shift"
          }
        ]
      },
      def: "alt",
      desc: "is one between this keys ${state.settings.entities['preferences/fastScrollKey.enum']?.config.list.map(({ value })=> '**' + value + '**').join(' , ')} and when press one of them the scrolling gona be faster",
      name: "speed scrolling meta key"
    },
    "preferences/font.enum": {
      config: {
        list: [
          {
            content: "Outfit",
            value: "Outfit"
          },
          {
            content: "Karla",
            value: "Karla"
          },
          {
            content: "arial",
            value: "arial"
          },
          {
            content: "times new roman",
            value: "times new roman"
          },
          {
            content: "verdana",
            value: "verdana"
          },
          {
            content: "tahoma",
            value: "tahoma"
          },
          {
            content: "georgia",
            value: "georgia"
          },
          {
            content: "courier new",
            value: "courier new"
          },
          {
            content: "lucida console",
            value: "lucida console"
          },
          {
            content: "impact",
            value: "impact"
          },
          {
            content: "comic sans ms",
            value: "comic sans ms"
          },
          {
            content: "system ui",
            value: "system-ui"
          }
        ]
      },
      def: "Outfit",
      desc: "change one between this fonts ${state.settings.entities['preferences/font.enum']?.config.list.map(({ content })=> '`' + content + '`').join(' , ')}",
      name: "change font of app"
    },
    "preferences/toastTime.number": {
      config: {
        max: 10,
        min: 1
      },
      def: 6,
      desc: "is in `second`",
      name: "time of toast done"
    },
    "settings/findBy.enum": {
      config: {
        list: [
          {
            content: "setting id",
            value: "settingId"
          },
          {
            value: "setting"
          },
          {
            value: "name"
          }
        ]
      },
      def: "name",
      desc: "the method of how to find \\`setting\\` using one of this:\n${state.settings.entities['settings/findBy.enum']?.config?.list?.map((item)=> '**' + item + '**' ).join(' or ')}",
      name: "find settings using ?"
    },
    "toast/position.enum": {
      config: {
        list: [
          {
            content: "top",
            value: "top"
          },
          {
            content: "bottom",
            value: "bottom"
          }
        ]
      },
      def: "top",
      desc: "the position of the toast is one between ${state.settings.entities['toast/position.enum']?.config.list.map(({ content })=> '`' + content + '`').join(' , ')}",
      name: "toast position"
    },
    "visibility/configurations.boolean": {
      def: !1,
      desc: "hide or visible the configurations view",
      name: "visibility of configurations view",
      private: !0
    },
    "visibility/header.boolean": {
      def: !0,
      name: "header view visibility"
    },
    "visibility/headerNotifays.boolean": {
      def: !1,
      name: "header panel notifications visibility",
      private: !0
    },
    "visibility/keyPanding/form.boolean": {
      def: !1,
      private: !0
    },
    "visibility/leftSide.boolean": {
      def: !1,
      desc: "viibility of **left side**  component",
      name: "left side visibility"
    },
    "visibility/notifays.boolean": {
      def: !1,
      desc: "visibility of **notification** view",
      name: "notification visibility",
      private: !0
    },
    "visibility/notifays/nots.boolean": {
      def: !1,
      private: !0
    },
    "visibility/rightSide.boolean": {
      def: !1,
      desc: "visibility of **right side** component",
      name: "right side visibility"
    },
    "window/dark.boolean": {
      config: {
        style: "checkbox"
      },
      def: !1,
      desc: "change the theme of the app to dark mode",
      name: "dark mode"
    },
    "window/lang.enum": {
      config: {
        list: [
          {
            content: "arabic",
            value: "ar"
          },
          {
            content: "france",
            value: "fr"
          },
          {
            content: "englich",
            value: "en"
          },
          {
            content: "espaniche",
            value: "es"
          },
          {
            content: "india",
            value: "hi"
          },
          {
            content: "japanese",
            value: "ja"
          },
          {
            content: "russian",
            value: "ru"
          }
        ]
      },
      def: "en",
      desc: "change one between this langs ${state.settings.entities['window/lang.enum']?.config.list.map(({ content })=> '`' + content + '`').join(' , ')}",
      name: "change lang of app"
    },
    "preferences/scrollAnimation.boolean.boolean": {
      def: !1,
      desc: "scrolling with animation",
      name: "scroll animation"
    },
    "visibility/keyboard.boolean": {
      name: "Keyboard Visibility",
      desc: "The Visibility Of Keyboard Screen",
      def: !1
    },
    "notification/clearAllConfirmation.boolean": {
      name: "clear all notifications",
      desc: "ask before clearing all notifications",
      def: !0
    }
  }
}, { data: K0 } = z0, H0 = {
  name: "settings",
  id: "settingId",
  default(t, { def: e }) {
    return {
      private: !1,
      deperacted: !1,
      config: {},
      value: e
    };
  },
  actions: {
    toggle(t, { payload: e }) {
      const n = t.entities[e];
      n && (n.value = !n.value);
    }
  },
  data: K0
}, { hooks: Yt, slice: Ad, init: ax, entitySelect: cx } = Rt(H0), G0 = {
  name: "positions",
  id: "positionId",
  default: {
    bottom: 0,
    left: 0,
    right: 0,
    top: 0,
    x: 0,
    y: 0,
    width: 0,
    height: 0
  }
}, { entity: ux, slice: Rd, hooks: lx, entitySelect: hx, init: fx } = Rt(G0), W0 = "object", Q0 = {
  data: {},
  settings: {
    saved: !0,
    status: "idle",
    reloaded: !0,
    watch: !0,
    ignoreAccess: []
  }
}, br = Aa({
  initialState: Q0,
  name: W0,
  reducers: {
    setValue(t, { payload: e }) {
      const n = t.settings.ignoreAccess.find(({ dir: o }) => e.direction == o);
      if (n && n.pass != e.pass) {
        Gt.warn(`Cannot Access Direction ${e.direction}`);
        return;
      }
      const r = e.direction.split(".").filter(Boolean);
      if (!r.length) {
        t.data = e.value;
        return;
      }
      let i = t.data;
      r.slice(0, -1).forEach((o) => {
        let c = i[o];
        c == null && e.force && (i[o] = {}, c = i[o]), i = c;
      });
      const s = r.at(-1);
      i[s] = e.value;
    },
    save(t, { payload: e = !1 }) {
      t.settings.saved = e;
    },
    reload(t, { payload: e = !1 }) {
      t.settings.reloaded = e;
    },
    addIgnoreAccess(t, { payload: e }) {
      e.forEach(({ dir: n, pass: r }) => {
        t.settings.ignoreAccess.find((s) => s.dir == n && r == s.pass) || t.settings.ignoreAccess.push({
          dir: n,
          pass: r
        });
      });
    },
    removeIgnoreAccess(t, { payload: e }) {
      e.forEach(({ dir: n, pass: r }) => {
        const i = t.settings.ignoreAccess.findIndex((s) => s.dir == n && r == s.pass);
        i >= 0 && t.settings.ignoreAccess.splice(i, 1);
      });
    }
  }
}), dx = () => Fe((e) => e.object.settings.saved), px = () => Fe((e) => e.object.settings.watch), mx = () => Fe((e) => e.object.settings.reloaded), gx = () => Fe((e) => e.object.settings.status), yx = () => {
  de.dispatch(br.actions.reload(!1));
}, _x = () => {
  de.dispatch(br.actions.reload(!0));
}, vx = () => {
  de.dispatch(br.actions.save(!1));
}, wx = () => {
  de.dispatch(br.actions.save(!0));
};
function Rs(t) {
  return Fe((n) => {
    const { isValide: r, value: i } = da(n.object.data, t);
    return r ? i : null;
  }, Xn);
}
function yn(t, e) {
  de.dispatch(
    br.actions.setValue({
      value: e,
      direction: t,
      force: !0
    })
  );
}
function Y0(t) {
  const e = Rs(t), n = vt(e);
  return re.useEffect(() => {
    yn(t, n.get);
  }, [n.get]), re.useEffect(() => {
    n.set(e);
  }, [e]), n;
}
function J0(t, e) {
  const n = (e || de.getState()).object.data, { isValide: r, value: i } = da(n, t);
  return r ? i : null;
}
const X0 = {
  data: {}
}, { data: Z0 } = X0, eS = {
  id: "id",
  name: "notifications",
  default: () => ({
    id: Et(),
    desc: void 0,
    removable: !0,
    status: "idle",
    showDesc: !1,
    type: "info",
    buttons: []
  }),
  data: Z0
}, { hooks: hs, init: Ex, select: bx, slice: Cd, entity: Tx } = Rt(eS);
function Bg() {
  Yt.setOneFeild("visibility/notifays.boolean", "value", !0), Yt.setOneFeild("visibility/notifays/nots.boolean", "value", !0);
}
function $g() {
  Yt.setOneFeild("visibility/notifays.boolean", "value", !1), Yt.setOneFeild("visibility/notifays/nots.boolean", "value", !1);
}
async function Ix(t, e = {}) {
  const n = mm(e, {
    open: !0,
    close: !0,
    time: 2e3
  });
  n != null && n.open && Bg();
  const r = {
    id: Et(),
    title: " - ",
    ...t
  };
  hs.upsert([r]), await gm(n.time), hs.remove([r.id]), n != null && n.close && $g();
}
async function Sx(t, e) {
  const n = e();
  return n instanceof Promise ? new Promise(async (r, i) => {
    Bg(), hs.upsert([t]), n.then(r).catch(i).finally(() => {
      hs.remove([t.id]), $g();
    });
  }) : n;
}
const tS = {
  id: "logId",
  name: "logs",
  data: {},
  default: () => ({
    logId: Et(10),
    desc: "",
    type: "INFO",
    category: "window",
    showDesc: !1,
    createdAt: (/* @__PURE__ */ new Date()).toISOString()
  })
}, { entity: Ax, slice: Pd, init: Rx, hooks: Cx } = Rt(tS), nS = {
  id: "word",
  name: "langs"
}, Px = () => qg.setWriteStatus("idle"), { init: kx, hooks: qg, entity: Ox, slice: kd } = Rt(nS), rS = {
  data: {
    "camera-take": {
      commands: [
        {
          payload: ["camera-take"],
          type: "actions/exec"
        }
      ]
    },
    "colors-list-back": {
      commands: [
        {
          payload: "colors-list",
          type: "slot/back"
        }
      ]
    },
    "colors-list-next": {
      commands: [
        {
          payload: "colors-list",
          type: "slot/next"
        }
      ]
    },
    "colors-list-submit": {
      commands: [
        {
          payload: "colors-list",
          type: "slot/submit"
        }
      ]
    },
    "commands.back": {
      commands: [
        {
          payload: "cmds/list",
          type: "slot/back"
        }
      ],
      label: "commands : back"
    },
    "commands.close": {
      commands: [
        {
          payload: {
            direction: "commandId",
            force: !0,
            value: null
          },
          type: "object/setValue"
        }
      ],
      label: "view : close commands"
    },
    "commands.next": {
      commands: [
        {
          payload: "cmds/list",
          type: "slot/next"
        }
      ],
      label: "commands : next"
    },
    "commands.open": {
      commands: [
        {
          payload: {
            direction: "commandId",
            force: !0,
            value: "commands"
          },
          type: "object/setValue"
        }
      ],
      label: "view : open commands"
    },
    "commands.submit": {
      commands: [
        {
          payload: "cmds/list",
          type: "slot/submit"
        }
      ],
      label: "commands : run"
    },
    "configurations.back": {
      commands: [
        {
          payload: "configurations",
          type: "slot/back"
        }
      ],
      label: "settings : back"
    },
    "configurations.next": {
      commands: [
        {
          payload: "configurations",
          type: "slot/next"
        }
      ],
      label: "settings : next"
    },
    "configurations.settings.layout.submit": {
      commands: [
        {
          payload: "settings.layout.tools",
          type: "slot/submit"
        }
      ],
      label: "settings layout : change"
    },
    "configurations.settings.layouts.next": {
      commands: [
        {
          payload: "settings.layout.tools",
          type: "slot/next"
        }
      ],
      label: "settings layout : next"
    },
    "configurations.settings.layouts.previous": {
      commands: [
        {
          payload: "settings.layout.tools",
          type: "slot/back"
        }
      ],
      label: "settings layout : previous"
    },
    "configurations.submit": {
      commands: [
        {
          payload: "configurations",
          type: "slot/submit"
        }
      ],
      label: "settings : submit"
    },
    "defaultCommand.ignore": {
      commands: [],
      private: !0
    },
    "dialog.clickOnButton": {
      commands: [
        {
          payload: "dialog-list",
          type: "slot/submit"
        }
      ],
      label: "Dialog : Click And Submit"
    },
    "dialog.escape": {
      commands: [
        {
          payload: ["dialog.cancel"],
          type: "actions/exec"
        }
      ],
      label: "Dialog : Escape"
    },
    "dialog.goToNextButton": {
      commands: [
        {
          payload: "dialog-list",
          type: "slot/next"
        }
      ],
      label: "Dialog : Next Button"
    },
    "dialog.goToPreviousButton": {
      commands: [
        {
          payload: "dialog-list",
          type: "slot/back"
        }
      ],
      label: "Dialog : Previous Button"
    },
    "feedback/add": {
      commands: [
        {
          payload: ["feedback/add"],
          type: "actions/exec"
        }
      ],
      label: "help : add new feedback"
    },
    "header.toggle": {
      commands: [
        {
          payload: "visibility/header.boolean",
          type: "settings/toggle"
        }
      ],
      label: "view : toggle header"
    },
    "headerNotifays.toggleExpand": {
      commands: [
        {
          payload: "visibility/headerNotifays.boolean",
          type: "settings/toggle"
        }
      ],
      label: "view : toggle header notifications"
    },
    "input.addLineBellow": {
      commands: [
        {
          payload: ["input.addLineBellow"],
          type: "actions/exec"
        }
      ],
      label: "input : add line bellow"
    },
    "input.completeWord": {
      commands: [
        {
          payload: ["input.completeWord"],
          type: "actions/exec"
        }
      ],
      label: "input : complete word"
    },
    "input.selectLine": {
      commands: [
        {
          payload: ["input.selectLine"],
          type: "actions/exec"
        }
      ],
      label: "input : select line"
    },
    "input.tab": {
      commands: [
        {
          payload: ["input.tab"],
          type: "actions/exec"
        }
      ],
      label: "input : tab space"
    },
    "keyboard/update": {
      commands: [
        {
          payload: ["keyboard/update"],
          type: "actions/exec"
        }
      ]
    },
    "keyboardShortcuts.focusNextKeyPanding": {
      commands: [
        {
          payload: "keyboardShortcuts",
          type: "slot/next"
        }
      ],
      label: "keyboard shortcuts : focus next"
    },
    "keyboardShortcuts.focusPreviousKeyPanding": {
      commands: [
        {
          payload: "keyboardShortcuts",
          type: "slot/back"
        }
      ],
      label: "keyboard shortcuts : focus previous"
    },
    "keyboardShortcuts.submitCurrentKeyPanding": {
      commands: [
        {
          payload: "keyboardShortcuts",
          type: "slot/submit"
        }
      ],
      label: "keyboard shortcuts : submit current"
    },
    "menu.back": {
      commands: [
        {
          payload: "menu-list",
          type: "slot/back"
        }
      ]
    },
    "menu.escape": {
      commands: [
        {
          payload: {
            direction: "menu.id",
            force: !0,
            value: null
          },
          type: "object/setValue"
        }
      ]
    },
    "menu.next": {
      commands: [
        {
          payload: "menu-list",
          type: "slot/next"
        }
      ]
    },
    "menu.submit": {
      commands: [
        {
          payload: "menu-list",
          type: "slot/submit"
        }
      ]
    },
    "notifays.toggleExpandNotifay": {
      commands: [
        {
          payload: ["toggleExpandNotifay", null],
          type: "actions/exec"
        }
      ],
      label: "notifications : toggle expand notifications"
    },
    "notification.close": {
      commands: [
        {
          payload: [
            {
              changes: {
                value: !1
              },
              id: "visibility/notifays.boolean"
            }
          ],
          type: "settings/update"
        }
      ],
      label: "view : close notifications"
    },
    "notification.closeAndExpandLess": {
      commands: [
        "notification.close",
        {
          payload: [
            {
              changes: {
                value: !1
              },
              id: "visibility/notifays/notes.boolean"
            }
          ],
          type: "settings/update"
        }
      ],
      label: "view : close notifications and expand less"
    },
    "notification.deleteFocus": {
      commands: [
        {
          payload: ["notification.deleteFocus"],
          type: "actions/exec"
        }
      ],
      label: "notifications : delete the focused notification"
    },
    "notification.focusNext": {
      commands: [
        {
          payload: "notification",
          type: "slot/next"
        }
      ],
      label: "notifications : go next"
    },
    "notification.focusPrevious": {
      commands: [
        {
          payload: "notification",
          type: "slot/back"
        }
      ],
      label: "notifications: go back"
    },
    "notification.open": {
      commands: [
        {
          payload: [
            {
              changes: {
                value: !0
              },
              id: "visibility/notifays.boolean"
            }
          ],
          type: "settings/update"
        }
      ],
      label: "notifications : open"
    },
    "notification.openAndExpandMoreAndFocus": {
      commands: [
        "notification.open",
        {
          payload: [
            {
              changes: {
                value: !0
              },
              id: "visibility/notifays/notes.boolean"
            }
          ],
          type: "settings/update"
        },
        {
          payload: ["focus", "notifications"],
          type: "actions/exec"
        }
      ],
      label: "notifications : open and expand more and focus"
    },
    "notification.submitCurrent": {
      commands: [
        {
          payload: "notification",
          type: "slot/submit"
        }
      ],
      label: "notifications : submit current"
    },
    "notification.toggle": {
      commands: [
        {
          payload: "visibility/notifays.boolean",
          type: "settings/toggle"
        }
      ],
      label: "view : toggle notifications"
    },
    "search.history.clear": {
      commands: [
        {
          payload: ["search.history.clear"],
          type: "actions/exec"
        }
      ],
      label: "search : clear history"
    },
    "settings.colors.show": {
      commands: [
        {
          payload: [
            {
              changes: {
                focused: "colors"
              },
              id: "settings"
            }
          ],
          type: "views/update"
        }
      ]
    },
    "settings.focusNext": {
      commands: [
        {
          payload: "settings",
          type: "slot/next"
        }
      ]
    },
    "settings.focusPrevious": {
      commands: [
        {
          payload: "settings",
          type: "slot/back"
        }
      ]
    },
    "settings.icons.back": {
      commands: [
        {
          payload: "icons-list",
          type: "slot/back"
        }
      ]
    },
    "settings.icons.next": {
      commands: [
        {
          payload: "icons-list",
          type: "slot/next"
        }
      ]
    },
    "settings.icons.show": {
      commands: [
        {
          payload: [
            {
              changes: {
                focused: "icons"
              },
              id: "settings"
            }
          ],
          type: "views/update"
        }
      ]
    },
    "settings.icons.submit": {
      commands: [
        {
          payload: "icons-list",
          type: "slot/submit"
        }
      ]
    },
    "settings.keyboardShortcuts.show": {
      commands: [
        {
          payload: [
            {
              changes: {
                focused: "keyboardShortcuts"
              },
              id: "settings"
            }
          ],
          type: "views/update"
        }
      ]
    },
    "settings.tree.expandLess": {
      commands: [
        {
          payload: "setting-tree-layout",
          type: "tree/expandLess"
        }
      ]
    },
    "settings.tree.expandMore": {
      commands: [
        {
          payload: "setting-tree-layout",
          type: "tree/expandMore"
        }
      ]
    },
    "settings.tree.toggleExpand": {
      commands: [
        {
          payload: "setting-tree-layout",
          type: "tree/toggleExpand"
        }
      ]
    },
    "settings.user.show": {
      commands: [
        {
          payload: [
            {
              changes: {
                focused: "user"
              },
              id: "settings"
            }
          ],
          type: "views/update"
        }
      ]
    },
    "show.submit.setting": {
      commands: [
        {
          payload: ["showSubmitSetting", null],
          type: "actions/exec"
        }
      ]
    },
    "string.cancel": {
      commands: [
        {
          payload: ["string.cancel"],
          type: "actions/exec"
        }
      ],
      private: !0
    },
    "string.change": {
      commands: [
        {
          payload: ["string.change"],
          type: "actions/exec"
        }
      ],
      private: !0
    },
    "tools.tip.click": {
      commands: [
        {
          payload: ["tip.click"],
          type: "actions/exec"
        }
      ]
    },
    "view.leftSide.close": {
      commands: [
        {
          payload: [
            {
              changes: {
                value: !1
              },
              id: "visibility/leftSide.boolean"
            }
          ],
          type: "settings/update"
        }
      ],
      label: "leftSide : close"
    },
    "view.leftSide.open": {
      commands: [
        {
          payload: [
            {
              changes: {
                value: !0
              },
              id: "visibility/leftSide.boolean"
            }
          ],
          type: "settings/update"
        }
      ]
    },
    "view.leftSide.toggle": {
      commands: [
        {
          payload: "visibility/leftSide.boolean",
          type: "settings/toggle"
        }
      ]
    },
    "view.rightSide.close": {
      commands: [
        {
          payload: [
            {
              changes: {
                value: !1
              },
              id: "visibility/rightSide.boolean"
            }
          ],
          type: "settings/update"
        }
      ]
    },
    "view.rightSide.open": {
      commands: [
        {
          payload: [
            {
              changes: {
                value: !0
              },
              id: "visibility/rightSide.boolean"
            }
          ],
          type: "settings/update"
        }
      ]
    },
    "view.rightSide.toggle": {
      commands: [
        {
          payload: "visibility/rightSide.boolean",
          type: "settings/toggle"
        }
      ]
    },
    "view.settings.hide": {
      commands: [
        {
          payload: [
            {
              changes: {
                value: !1
              },
              id: "visibility/configurations.boolean"
            }
          ],
          type: "settings/update"
        }
      ],
      label: "view : hide settings view"
    },
    "view.settings.show": {
      commands: [
        {
          payload: [
            {
              changes: {
                value: !0
              },
              id: "visibility/configurations.boolean"
            }
          ],
          type: "settings/update"
        },
        {
          payload: [
            {
              changes: {
                value: ""
              },
              id: "findConfigurations-local"
            }
          ],
          type: "fields/update"
        },
        {
          payload: ["focus", "findConfigurations-local"],
          type: "actions/exec"
        }
      ],
      label: "view : show settings view"
    },
    "view.settings.update.hide": {
      commands: [
        {
          payload: {
            direction: "view.settings",
            force: !0,
            value: null
          },
          type: "object/setValue"
        },
        {
          payload: ["focus", "findConfigurations-local"],
          type: "actions/exec"
        }
      ],
      label: "view : hide settings update view"
    },
    "window.toggleMode": {
      commands: [
        {
          payload: "window/dark.boolean",
          type: "settings/toggle"
        }
      ],
      label: "window : toggle between (light/dark) mode"
    },
    "enum/next": {
      commands: [
        {
          type: "slot/next",
          payload: "enum-list"
        }
      ],
      label: "enum : go to next"
    },
    "enum/back": {
      commands: [
        {
          type: "slot/back",
          payload: "enum-list"
        }
      ],
      label: "enum : go to back"
    },
    "enum/submit": {
      commands: [
        {
          type: "slot/submit",
          payload: "enum-list"
        }
      ],
      label: "enum : select"
    },
    "enum/escape": {
      commands: [
        {
          payload: {
            direction: "enum.id",
            force: !0,
            value: null
          },
          type: "object/setValue"
        }
      ],
      label: "enum : escape"
    }
  }
}, { data: iS } = rS, sS = "commands";
function zg(t, e = de.getState()) {
  const { [sS]: n } = e, r = [], i = n.entities[t], s = i == null ? void 0 : i.commands;
  return i != null && i.blocked ? [] : (s == null || s.forEach((o) => {
    typeof o == "string" ? r.push(...zg(o)) : typeof o != "number" && r.push(o);
  }), r);
}
function oS(t, e = de.getState()) {
  return !!(e != null && e.commands.entities[t]);
}
async function aS(t, e = de.getState()) {
  const n = t.toString();
  Gt.inf("start invoke command : ", n), e = e || de.getState();
  const r = zg(t, e), i = new fa();
  for (let s = 0; s < r.length; s++) {
    const o = r[s];
    typeof o == "number" ? await i.start(o) : de.dispatch(o);
  }
  Gt.succ("end invoking command : ", n);
}
const cS = {
  id: "commandId",
  name: "commands",
  data: iS,
  default: (t, e) => {
    if (!e.commandId)
      return {};
    const [n = "", ...r] = e.commandId.split(".");
    return {
      label: `${zc(n, "camel", "normal")} : ${r.map((s) => zc(s, void 0, "normal")).join(" ")}`
    };
  }
}, { hooks: uS, slice: Od, entitySelect: Nx, init: Dx } = Rt(cS), lS = {
  data: [
    {
      command: "dialog.goToNextButton",
      value: "arrowdown",
      when: "state.object.data.dialog.id"
    },
    {
      command: "dialog.goToNextButton",
      value: "arrowright",
      when: "state.object.data.dialog.id"
    },
    {
      command: "dialog.goToPreviousButton",
      value: "arrowleft",
      when: "state.object.data.dialog.id"
    },
    {
      command: "dialog.goToPreviousButton",
      value: "arrowup",
      when: "state.object.data.dialog.id"
    },
    {
      command: "dialog.escape",
      value: "escape",
      when: "state.object.data.dialog.id"
    },
    {
      command: "dialog.clickOnButton",
      value: "enter",
      when: "state.object.data.dialog.id"
    },
    {
      command: "dialog.clickOnButton",
      value: "space",
      when: "state.object.data.dialog.id"
    },
    {
      command: "settings.colors.show",
      value: "control+shift+c",
      when: "state.views.entities.settings.focused == 'colors'"
    },
    {
      command: "menu.next",
      when: "state.object.data.menu.id",
      value: "arrowdown"
    },
    {
      command: "menu.back",
      when: "state.object.data.menu.id",
      value: "arrowup"
    },
    {
      command: "menu.submit",
      when: "state.object.data.menu.id",
      value: "enter"
    },
    {
      command: "menu.escape",
      when: "state.object.data.menu.id",
      value: "escape"
    },
    {
      value: "tab",
      command: "input.completeWord",
      when: "state.object.data.input.focusedHasProposition",
      type: "up"
    },
    {
      value: "tab",
      command: "defaultCommand.ignore",
      when: "state.object.data.input.focusedHasProposition"
    },
    {
      value: "tab",
      command: "input.tab",
      when: "state.object.data.input.supportTab"
    },
    {
      value: "control+l",
      command: "input.selectLine",
      when: "focused"
    },
    {
      value: "shift+alt+arrowdown",
      command: "input.addLineBellow",
      when: "focused"
    },
    {
      command: "string.change",
      when: "focused && state.fields.ids.includes(focused + ':input')",
      value: "enter"
    },
    {
      command: "string.cancel",
      when: "focused && state.fields.ids.includes(focused + ':input')",
      value: "escape"
    },
    {
      when: "focused == 'feedback' && state.fields.entities['feedback']?.value",
      command: "feedback/add",
      value: "control+enter",
      private: !0
    },
    {
      command: "commands.next",
      when: "focused == 'cmds/list' || focused == 'findCommand'",
      value: "arrowdown"
    },
    {
      command: "commands.back",
      when: "focused == 'cmds/list' || focused == 'findCommand'",
      value: "arrowup"
    },
    {
      command: "commands.submit",
      when: "focused == 'cmds/list' || focused == 'findCommand'",
      value: "enter"
    },
    {
      repeation: !1,
      command: "activity.focus",
      value: "alt",
      when: "focused != 'activity'"
    },
    {
      command: "activity.views.back",
      value: "arrowup",
      when: "focused == 'activity'"
    },
    {
      command: "activity.views.back",
      value: "arrowleft",
      when: "focused == 'activity'"
    },
    {
      command: "activity.views.next",
      value: "arrowdown",
      when: "focused == 'activity'"
    },
    {
      command: "activity.views.next",
      value: "arrowright",
      when: "focused == 'activity'"
    },
    {
      repeation: !1,
      command: "activity.views.submit",
      value: "enter",
      when: "focused == 'activity'"
    },
    {
      command: "commands.open",
      when: "focused != 'findCommand' || !state.object.data.commandId",
      value: "control+shift+p"
    },
    {
      repeation: !1,
      command: "notification.openAndExpandMoreAndFocus",
      when: "focused != 'notifications'",
      value: "shift+alt+n"
    },
    {
      command: "view.activity.toggle",
      value: "control+alt+a"
    },
    {
      command: "view.leftSide.toggle",
      value: "control+b"
    },
    {
      command: "view.rightSide.toggle",
      value: "control+alt+b"
    },
    {
      command: "view.settings.show",
      when: "focused != 'findConfigurations-local' || !state.settings.entities['visibility/configurations.boolean']?.value",
      value: "control+,"
    },
    {
      repeation: !1,
      command: "settings.keyboardShortcuts.show",
      when: "state.settings.entities['visibility/configurations.boolean']?.value",
      value: "control+k"
    },
    {
      repeation: !1,
      command: "settings.user.show",
      when: "state.settings.entities['visibility/configurations.boolean']?.value",
      value: "control+u"
    },
    {
      repeation: !1,
      command: "settings.icons.show",
      when: "state.settings.entities['visibility/configurations.boolean']?.value",
      value: "control+i"
    },
    {
      command: "layout.zoom.in",
      value: "control+="
    },
    {
      command: "layout.zoom.in",
      value: "control+plus"
    },
    {
      command: "layout.zoom.out",
      value: "control+-"
    },
    {
      command: "layout.zoom.reset",
      value: "control+0"
    },
    {
      repeation: !1,
      command: "keyboardShortcuts.submitCurrentKeyPanding",
      value: "enter",
      when: "['findConfigurations-local','keyboardShortcuts'].includes(focused) && state.views.entities.settings.focused == 'keyboardShortcuts'"
    },
    {
      command: "keyboard/update",
      value: "f2",
      when: "['findConfigurations-local','keyboardShortcuts'].includes(focused) && state.views.entities.settings.focused == 'keyboardShortcuts'"
    },
    {
      command: "keyboardShortcuts.focusNextKeyPanding",
      value: "arrowdown",
      when: "['findConfigurations-local','keyboardShortcuts'].includes(focused) && state.views.entities.settings.focused == 'keyboardShortcuts'"
    },
    {
      command: "keyboardShortcuts.focusPreviousKeyPanding",
      value: "arrowup",
      when: "['findConfigurations-local','keyboardShortcuts'].includes(focused) && state.views.entities.settings.focused == 'keyboardShortcuts'"
    },
    {
      value: "arrowdown",
      command: "colors-list-next",
      when: "['findConfigurations-local','color-list'].includes(focused) && state.views.entities.settings.focused == 'colors'"
    },
    {
      value: "arrowup",
      command: "colors-list-back",
      when: "['findConfigurations-local','color-list'].includes(focused) && state.views.entities.settings.focused == 'colors'"
    },
    {
      value: "enter",
      command: "colors-list-submit",
      when: "['findConfigurations-local','color-list'].includes(focused) && state.views.entities.settings.focused == 'colors'"
    },
    {
      command: "savePanel.open",
      value: "control+s",
      when: "focused != 'savePanelView'"
    },
    {
      command: "savePanel.next",
      value: "arrowdown",
      when: "focused == 'savePanelView'"
    },
    {
      command: "savePanel.back",
      value: "arrowup",
      when: "focused == 'savePanelView'"
    },
    {
      command: "savePanel.close",
      value: "backspace",
      when: "state.settings.entities['visibility/savePanel.boolean']?.value"
    },
    {
      command: "savePanel.toggleCheckedSubmit",
      value: "space",
      when: "focused == 'savePanelView'"
    },
    {
      command: "savePanel.toggleCheckedSubmit",
      value: "enter",
      when: "focused == 'savePanelView'"
    },
    {
      command: "configurations.next",
      value: "arrowdown",
      when: "focused == 'findConfigurations-local' && state.views.entities.settings.focused == 'user'"
    },
    {
      command: "configurations.back",
      value: "arrowup",
      when: "focused == 'findConfigurations-local' && state.views.entities.settings.focused == 'user'"
    },
    {
      repeation: !1,
      command: "configurations.submit",
      value: "enter",
      when: "focused == 'findConfigurations-local' && state.views.entities.settings.focused == 'user'"
    },
    {
      command: "setup.nextPage",
      when: "!state.object.data.setup.user.inited && (!focused || ['setup-controller','setup.btn.previous','setup.btn.next'].includes(focused))",
      value: "arrowright"
    },
    {
      command: "setup.previousPage",
      when: "!state.object.data.setup.user.inited && (!focused || ['setup-controller','setup.btn.previous','setup.btn.next'].includes(focused))",
      value: "arrowleft"
    },
    {
      command: "savePanel.save",
      when: "state.settings.entities['visibility/savePanel.boolean']?.value",
      value: "control+enter"
    },
    {
      command: "notification.submitCurrent",
      when: "focused == 'notifications'",
      value: "enter"
    },
    {
      command: "notification.focusNext",
      when: "focused == 'notifications'",
      value: "arrowdown"
    },
    {
      command: "notification.focusPrevious",
      when: "focused == 'notifications'",
      value: "arrowup"
    },
    {
      command: "notification.deleteFocus",
      when: "focused == 'notifications'",
      value: "delete"
    },
    {
      command: "notifays.toggleExpandNotifay",
      when: "focused == 'notifications'",
      value: "space"
    },
    {
      command: "enum/next",
      value: "arrowdown",
      when: "state.object.data.enum.id"
    },
    {
      command: "enum/next",
      value: "arrowright",
      when: "state.object.data.enum.id"
    },
    {
      command: "enum/back",
      value: "arrowleft",
      when: "state.object.data.enum.id"
    },
    {
      command: "enum/back",
      value: "arrowup",
      when: "state.object.data.enum.id"
    },
    {
      repeation: !1,
      command: "enum/submit",
      value: "space",
      when: "!state.object.data.enumIsLoading && state.object.data.enum.id"
    },
    {
      repeation: !1,
      command: "enum/submit",
      value: "enter",
      when: "!state.object.data.enumIsLoading && state.object.data.enum.id"
    },
    {
      repeation: !1,
      command: "enum/escape",
      value: "escape",
      when: "state.object.data.enum.id"
    },
    {
      repeation: !1,
      command: "show.submit.setting",
      value: "f2",
      when: "focused == 'findConfigurations-local'"
    },
    {
      command: "commands.close",
      when: "state.object.data.commandId",
      value: "escape"
    },
    {
      repeation: !1,
      command: "activity.escape",
      value: "escape",
      when: "focused == 'activity'"
    },
    {
      command: "savePanel.close",
      value: "escape",
      repeation: !1,
      when: "state.settings.entities['visibility/savePanel.boolean']?.value"
    },
    {
      command: "userProfile.hide",
      value: "escape",
      repeation: !1,
      when: "state.settings.entities['visibility/profile.boolean']?.value"
    },
    {
      command: "view.settings.update.hide",
      when: "state.object.data.view.settings",
      value: "escape"
    },
    {
      command: "view.settings.hide",
      when: "state.settings.entities['visibility/configurations.boolean']?.value",
      value: "escape"
    },
    {
      repeation: !1,
      command: "creditBox.close",
      when: "state.object.data.visibility.credit",
      value: "escape"
    },
    {
      repeation: !1,
      command: "notification.closeAndExpandLess",
      when: "state.settings.entities['visibility/notifays.boolean']?.value",
      value: "escape"
    },
    {
      command: "configurations.settings.layouts.next",
      when: "focused == 'settings.layouts'",
      value: "arrowright"
    },
    {
      command: "configurations.settings.layouts.previous",
      when: "focused == 'settings.layouts'",
      value: "arrowleft"
    },
    {
      command: "configurations.settings.layout.submit",
      when: "focused == 'settings.layouts'",
      value: "enter"
    },
    {
      when: "focused == 'settings.tree.view'",
      value: "space",
      command: "settings.tree.toggleExpand"
    },
    {
      when: "focused == 'settings.tree.view'",
      value: "arrowright",
      command: "settings.tree.expandMore"
    },
    {
      when: "focused == 'settings.tree.view'",
      value: "arrowleft",
      command: "settings.tree.expandLess"
    },
    {
      command: "header.toggle",
      value: "control+h"
    },
    {
      command: "settings.icons.next",
      when: "['findConfigurations-local','icons-list'].includes(focused) && state.views.entities.settings.focused == 'icons'",
      value: "arrowdown"
    },
    {
      command: "settings.icons.back",
      when: "['findConfigurations-local','icons-list'].includes(focused) && state.views.entities.settings.focused == 'icons'",
      value: "arrowup"
    },
    {
      command: "settings.icons.submit",
      when: "['findConfigurations-local','icons-list'].includes(focused) && state.views.entities.settings.focused == 'icons'",
      value: "enter"
    },
    {
      command: "camera-take",
      value: "enter",
      when: "state.object.data?.camera?.id"
    },
    {
      command: "window.toggleMode",
      value: "control+d"
    }
  ]
}, { data: hS } = lS, fS = {
  name: "keys",
  id: "keyId",
  data: Object.entries(hS).map(([t, e]) => ({
    keyId: t,
    ...e
  })),
  default: () => ({
    repeation: !0,
    type: "down",
    only: !0,
    preventDefault: !0,
    keyId: `key_${Et()}`
  })
}, { init: dS, hooks: vl, slice: Nd } = Rt(fS), fo = "_" + Et().replaceAll(/[^0-9A-Za-z$_]+/gi, "_");
function pS(t) {
  return Function(`
    return ({ state , focused })=> {
      ${fo}_window = window;
      window = null;
      let ${fo} = ${t};
      window = ${fo}_window;
      return ${fo}
    }
  `)();
}
function xx() {
  dS();
  const t = vl.getAll(), e = Rs("commands.isBlocked"), n = re.useMemo(() => e ? [] : t.filter(({ value: r, command: i }) => r && i).map((r) => {
    const { value: i = "", when: s, repeation: o = !0, type: c = "down", only: u = !0, preventDefault: l = !0 } = r, f = new yw(i);
    return {
      fn: async (_) => {
        if (!o && _.repeat || !f.test(_))
          return;
        const b = de.getState();
        if (s) {
          const I = _w(), C = pS(s);
          try {
            if (!C({ state: b, focused: I }))
              return;
          } catch {
            return;
          }
        }
        u && _.stopImmediatePropagation(), l && _.preventDefault(), Gt.inf(`KEYID       = ${r.keyId}`), Gt.inf(`RUN         = ${r.command || "no command run"}`), Gt.inf(`COMB        = (${r.value})`), Gt.inf(`WHEN        = ${r.when || "no provide"}`), r.command && oS(r.command, b) ? Gt.succ("EXISTS") : Gt.warn("COMMAND NOT FOUND"), aS(r.command, b);
      },
      type: c
    };
  }), [t, e]);
  v1(
    () => (n.forEach(({ fn: r, type: i }) => {
      document.addEventListener(`key${i}`, r);
    }), () => {
      n.forEach(({ fn: r, type: i }) => {
        document.removeEventListener(`key${i}`, r);
      });
    }),
    [n],
    1e3
  );
}
const Kg = "keyboard", mS = {
  Shift: !1,
  Alt: !1,
  Control: !1,
  SymbolLock: !1,
  AltGraph: !1,
  CapsLock: !1,
  Fn: !1,
  FnLock: !1,
  Hyper: !1,
  Meta: !1,
  NumLock: !1,
  Super: !1,
  ScrollLock: !1,
  Symbol: !1,
  Key: void 0
}, gS = (t) => t[Kg], Dd = Aa({
  name: Kg,
  initialState: mS,
  reducers: {
    // actions
    setModifier(t, { payload: e }) {
      try {
        t[e.modifierName] = e.value;
      } catch {
      }
    }
  }
});
function Lx(t) {
  return Fe(gS, (n, r) => Xn(n[t], r[t]))[t];
}
const yS = {
  data: {
    appPassword: {},
    colorDarkValue: {},
    colorDefaultValue: {},
    colorLightValue: {},
    colorName: {},
    findCommand: {},
    "findConfigurations-local": {},
    number: {},
    "password/def": {},
    "setting/number": {},
    updateConfigSetting: {},
    "window/password": {}
  }
}, { data: _S } = yS, vS = {
  name: "fields",
  id: "fieldId",
  default: () => ({
    selection: {
      direction: "forward",
      end: 0,
      start: 0
    },
    value: ""
  }),
  data: _S
}, { entity: Mx, slice: xd, hooks: Bt, entitySelect: Vx, init: Fx } = Rt(vS), wS = {
  data: {
    autoCompleteInput: {
      default: "#888A"
    },
    "bg.selection": {
      dark: "#fff",
      light: "#000"
    },
    "black.opacity": {
      dark: "#0006",
      light: "#0003"
    },
    borders: {
      dark: "#333",
      light: "#bebebe"
    },
    "checkbox.background": {
      default: "#8884"
    },
    "checkbox.false": {
      default: "#F33"
    },
    "checkbox.true": {
      default: "#393"
    },
    error: {
      default: "#F33"
    },
    "error.border": {
      default: "#733"
    },
    "error.content": {
      default: "white"
    },
    "error.text": {
      default: "#F33"
    },
    "facebook-icon": {
      default: "#014DE4"
    },
    "field.background": {
      default: "rgba(160 160 160 / 0.2)"
    },
    "focus.text": {
      default: "#F33"
    },
    "google-icon": {
      default: "#E53"
    },
    "gray.opacity": {
      default: "#8884"
    },
    "gray.opacity.2": {
      default: "#8887"
    },
    "gray.opacity.toLight": {
      default: "#eee4"
    },
    htmlContentHover: {
      default: "#27F5"
    },
    "info.text": {
      default: "#37F"
    },
    locationIconSetup: {
      default: "yellow"
    },
    "log.error.color": {
      default: "#F33"
    },
    "log.info.color": {
      default: "#27F"
    },
    "log.secuess.color": {
      default: "#393"
    },
    "log.warning.color": {
      default: "rgb(227 138 32)"
    },
    "microsoft-icon": {
      default: "#F25022"
    },
    "notifay.error": {
      default: "#e61a1a"
    },
    "notifay.info": {
      default: "#2e7aec"
    },
    "notifay.success": {
      default: "#2b8817"
    },
    "notifay.warning": {
      default: "#e7a428"
    },
    primary: {
      dark: "#0078d4",
      light: "#46A"
    },
    "primary.background": {
      dark: "#111",
      light: "#ececec"
    },
    "primary.content": {
      dark: "#fff",
      light: "#fff"
    },
    "primary.hover.background": {
      dark: "#222",
      light: "#e1e1e1"
    },
    "qrCode.detection.secuess": {
      dark: "#0F4",
      light: "#0A3"
    },
    "qrCode.detection.secuess.content": {
      default: "white"
    },
    secondary: {
      dark: "#043853",
      light: "#0d8c9c"
    },
    "secondary.background": {
      dark: "#171717",
      light: "#e1e1e1"
    },
    "secondary.content": {
      default: "#fff"
    },
    selectedTextBackgroundBlured: {
      default: "#8885"
    },
    selectedTextBackgroundFocused: {
      default: "#26F6"
    },
    selectedTextColorBlur: {
      default: "#222"
    },
    selectedTextColorFocused: {
      default: "#fff"
    },
    "shadow.background.from": {
      default: "transparent"
    },
    "shadow.background.to": {
      dark: "#000",
      light: "#999"
    },
    "shadow.color": {
      dark: "#0008",
      light: "#4444"
    },
    "starts.color": {
      dark: "#FA0",
      light: "#E90"
    },
    "status.content": {
      default: "white"
    },
    "submit.background": {
      default: "#9994"
    },
    "success.text": {
      default: "#14B85B"
    },
    "text.color": {
      dark: "#ccc",
      light: "#333"
    },
    "text.selection": {
      dark: "#000",
      light: "#fff"
    },
    "toast.background": {
      dark: "#333",
      light: "#eee"
    },
    transparent: {
      default: "transparent"
    },
    userIconSetup: {
      default: "#27C"
    },
    "warning.text": {
      default: "rgb(227 138 32)"
    },
    wifiIconSetup: {
      default: "#2C6F"
    },
    "window.inWindows.close": {
      default: "red"
    },
    opacity: {
      dark: "#fff2",
      light: "#0002"
    }
  }
}, { data: ES } = wS, bS = {
  id: "colorId",
  name: "color",
  data: ES
}, { hooks: wl, slice: Ld, init: Ux, select: jx, entity: Bx, entitySelect: $x } = Rt(bS), TS = {
  data: {}
}, { data: IS } = TS, SS = {
  id: "linkId",
  name: "cahser",
  data: IS,
  default() {
    return {
      status: "idle"
    };
  }
}, { init: qx, hooks: zx, slice: Md } = Rt(SS), Ao = {
  name: "actions",
  id: "actionId",
  data: {},
  default() {
    return {
      status: "ready",
      args: null
    };
  },
  actions: {
    exec(t, { payload: e }) {
      const [n, r] = e, i = t.entities[n];
      i && (i.args = r, i.status = "idle");
    }
  }
}, { entity: Kx, slice: Vd, hooks: Zt, entitySelect: Hx } = Rt(Ao);
function AS(t) {
  const e = Zt.getOne(t);
  re.useEffect(() => {
    e || Zt.upsert([
      {
        actionId: t,
        status: "ready",
        args: null
      }
    ]);
  }, [e]);
}
function Gx(t, e, n = []) {
  re.useEffect(() => () => {
    Zt.remove([t]);
  }, []), AS(t);
  const r = Zt.getOne(t);
  return pi(async () => {
    if (!r)
      return;
    const { status: i } = r;
    if (i == "idle") {
      const { args: s } = r;
      Zt.setOneFeild(t, "status", "loading");
      try {
        let o = null, c = null;
        o = e(s), o instanceof Promise ? c = await o : c = o, Zt.setOneFeild(t, "output", c), Zt.setOneFeild(t, "status", "success");
      } catch (o) {
        Gt.err(o), Zt.setOneFeild(t, "output", null), Zt.setOneFeild(t, "status", "error");
      }
      Zt.setOneFeild(t, "args", null);
    }
  }, [r, ...n]), r;
}
function Wx(t, e) {
  return new Promise((n, r) => {
    de.dispatch({ type: "actions/exec", payload: [t, e] });
    const i = Qu(`${Ao.name}.entities.` + t + ".status", "success", (o) => {
      s(), n({
        output: o[Ao.name].entities[t].output,
        state: o
      });
    }), s = Qu(`${Ao.name}.entities.` + t + ".status", "error", (o) => {
      i(), r(o);
    });
  });
}
const de = qI({
  reducer: {
    // normal reducers
    [Dd.name]: Dd.reducer,
    [br.name]: br.reducer,
    [si.name]: si.reducer,
    // system space
    [Od.name]: Od.reducer,
    [Nd.name]: Nd.reducer,
    [Cd.name]: Cd.reducer,
    [Ed.name]: Ed.reducer,
    [Rd.name]: Rd.reducer,
    [Sd.name]: Sd.reducer,
    [Ad.name]: Ad.reducer,
    [xd.name]: xd.reducer,
    [Vd.name]: Vd.reducer,
    [Ld.name]: Ld.reducer,
    [Td.name]: Td.reducer,
    [Pd.name]: Pd.reducer,
    [kd.name]: kd.reducer,
    [Md.name]: Md.reducer,
    [Id.name]: Id.reducer
    /* main database */
  }
}), Gr = class Gr {
  constructor(e, n = null) {
    if (this.name = e, this.parent = n, this.name.includes(".") || Gr.allTemps[this.name])
      throw `temp name ${this.name} exists before`;
    Gr.allTemps[this.name] = this;
  }
  getTemp(e) {
    return Rs([this.name, e].join("."));
  }
  getTempFromStore(e, n) {
    return J0([this.name, e].join("."), n);
  }
  setTemp(e, n) {
    yn([this.name, e].join("."), n);
  }
  useTemp(e) {
    return Y0([this.name, e].join("."));
  }
  get childsTemps() {
    return Object.values(Gr.allTemps).filter(({ parent: e }) => e == this);
  }
};
On(Gr, "allTemps", {});
let tt = Gr;
const Qx = new tt("path"), Yx = new tt("window"), gi = new tt("view"), Jx = new tt("toast"), Fd = new tt("dialog"), Xx = new tt("loading"), Ud = new tt("progress"), Zx = new tt("password"), $r = new tt("menu"), eL = new tt("news"), tL = new tt("visibility"), nL = new tt("ipinfo"), rL = new tt("submited"), cr = new tt("camera"), RS = new tt("recaptcha"), Ho = new tt("iframe"), iL = new tt("enum");
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Hg = function(t) {
  const e = [];
  let n = 0;
  for (let r = 0; r < t.length; r++) {
    let i = t.charCodeAt(r);
    i < 128 ? e[n++] = i : i < 2048 ? (e[n++] = i >> 6 | 192, e[n++] = i & 63 | 128) : (i & 64512) === 55296 && r + 1 < t.length && (t.charCodeAt(r + 1) & 64512) === 56320 ? (i = 65536 + ((i & 1023) << 10) + (t.charCodeAt(++r) & 1023), e[n++] = i >> 18 | 240, e[n++] = i >> 12 & 63 | 128, e[n++] = i >> 6 & 63 | 128, e[n++] = i & 63 | 128) : (e[n++] = i >> 12 | 224, e[n++] = i >> 6 & 63 | 128, e[n++] = i & 63 | 128);
  }
  return e;
}, CS = function(t) {
  const e = [];
  let n = 0, r = 0;
  for (; n < t.length; ) {
    const i = t[n++];
    if (i < 128)
      e[r++] = String.fromCharCode(i);
    else if (i > 191 && i < 224) {
      const s = t[n++];
      e[r++] = String.fromCharCode((i & 31) << 6 | s & 63);
    } else if (i > 239 && i < 365) {
      const s = t[n++], o = t[n++], c = t[n++], u = ((i & 7) << 18 | (s & 63) << 12 | (o & 63) << 6 | c & 63) - 65536;
      e[r++] = String.fromCharCode(55296 + (u >> 10)), e[r++] = String.fromCharCode(56320 + (u & 1023));
    } else {
      const s = t[n++], o = t[n++];
      e[r++] = String.fromCharCode((i & 15) << 12 | (s & 63) << 6 | o & 63);
    }
  }
  return e.join("");
}, Gg = {
  /**
   * Maps bytes to characters.
   */
  byteToCharMap_: null,
  /**
   * Maps characters to bytes.
   */
  charToByteMap_: null,
  /**
   * Maps bytes to websafe characters.
   * @private
   */
  byteToCharMapWebSafe_: null,
  /**
   * Maps websafe characters to bytes.
   * @private
   */
  charToByteMapWebSafe_: null,
  /**
   * Our default alphabet, shared between
   * ENCODED_VALS and ENCODED_VALS_WEBSAFE
   */
  ENCODED_VALS_BASE: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
  /**
   * Our default alphabet. Value 64 (=) is special; it means "nothing."
   */
  get ENCODED_VALS() {
    return this.ENCODED_VALS_BASE + "+/=";
  },
  /**
   * Our websafe alphabet.
   */
  get ENCODED_VALS_WEBSAFE() {
    return this.ENCODED_VALS_BASE + "-_.";
  },
  /**
   * Whether this browser supports the atob and btoa functions. This extension
   * started at Mozilla but is now implemented by many browsers. We use the
   * ASSUME_* variables to avoid pulling in the full useragent detection library
   * but still allowing the standard per-browser compilations.
   *
   */
  HAS_NATIVE_SUPPORT: typeof atob == "function",
  /**
   * Base64-encode an array of bytes.
   *
   * @param input An array of bytes (numbers with
   *     value in [0, 255]) to encode.
   * @param webSafe Boolean indicating we should use the
   *     alternative alphabet.
   * @return The base64 encoded string.
   */
  encodeByteArray(t, e) {
    if (!Array.isArray(t))
      throw Error("encodeByteArray takes an array as a parameter");
    this.init_();
    const n = e ? this.byteToCharMapWebSafe_ : this.byteToCharMap_, r = [];
    for (let i = 0; i < t.length; i += 3) {
      const s = t[i], o = i + 1 < t.length, c = o ? t[i + 1] : 0, u = i + 2 < t.length, l = u ? t[i + 2] : 0, f = s >> 2, h = (s & 3) << 4 | c >> 4;
      let _ = (c & 15) << 2 | l >> 6, b = l & 63;
      u || (b = 64, o || (_ = 64)), r.push(n[f], n[h], n[_], n[b]);
    }
    return r.join("");
  },
  /**
   * Base64-encode a string.
   *
   * @param input A string to encode.
   * @param webSafe If true, we should use the
   *     alternative alphabet.
   * @return The base64 encoded string.
   */
  encodeString(t, e) {
    return this.HAS_NATIVE_SUPPORT && !e ? btoa(t) : this.encodeByteArray(Hg(t), e);
  },
  /**
   * Base64-decode a string.
   *
   * @param input to decode.
   * @param webSafe True if we should use the
   *     alternative alphabet.
   * @return string representing the decoded value.
   */
  decodeString(t, e) {
    return this.HAS_NATIVE_SUPPORT && !e ? atob(t) : CS(this.decodeStringToByteArray(t, e));
  },
  /**
   * Base64-decode a string.
   *
   * In base-64 decoding, groups of four characters are converted into three
   * bytes.  If the encoder did not apply padding, the input length may not
   * be a multiple of 4.
   *
   * In this case, the last group will have fewer than 4 characters, and
   * padding will be inferred.  If the group has one or two characters, it decodes
   * to one byte.  If the group has three characters, it decodes to two bytes.
   *
   * @param input Input to decode.
   * @param webSafe True if we should use the web-safe alphabet.
   * @return bytes representing the decoded value.
   */
  decodeStringToByteArray(t, e) {
    this.init_();
    const n = e ? this.charToByteMapWebSafe_ : this.charToByteMap_, r = [];
    for (let i = 0; i < t.length; ) {
      const s = n[t.charAt(i++)], c = i < t.length ? n[t.charAt(i)] : 0;
      ++i;
      const l = i < t.length ? n[t.charAt(i)] : 64;
      ++i;
      const h = i < t.length ? n[t.charAt(i)] : 64;
      if (++i, s == null || c == null || l == null || h == null)
        throw new PS();
      const _ = s << 2 | c >> 4;
      if (r.push(_), l !== 64) {
        const b = c << 4 & 240 | l >> 2;
        if (r.push(b), h !== 64) {
          const I = l << 6 & 192 | h;
          r.push(I);
        }
      }
    }
    return r;
  },
  /**
   * Lazy static initialization function. Called before
   * accessing any of the static map variables.
   * @private
   */
  init_() {
    if (!this.byteToCharMap_) {
      this.byteToCharMap_ = {}, this.charToByteMap_ = {}, this.byteToCharMapWebSafe_ = {}, this.charToByteMapWebSafe_ = {};
      for (let t = 0; t < this.ENCODED_VALS.length; t++)
        this.byteToCharMap_[t] = this.ENCODED_VALS.charAt(t), this.charToByteMap_[this.byteToCharMap_[t]] = t, this.byteToCharMapWebSafe_[t] = this.ENCODED_VALS_WEBSAFE.charAt(t), this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[t]] = t, t >= this.ENCODED_VALS_BASE.length && (this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(t)] = t, this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(t)] = t);
    }
  }
};
class PS extends Error {
  constructor() {
    super(...arguments), this.name = "DecodeBase64StringError";
  }
}
const kS = function(t) {
  const e = Hg(t);
  return Gg.encodeByteArray(e, !0);
}, Go = function(t) {
  return kS(t).replace(/\./g, "");
}, Wg = function(t) {
  try {
    return Gg.decodeString(t, !0);
  } catch (e) {
    console.error("base64Decode failed: ", e);
  }
  return null;
};
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function OS() {
  if (typeof self < "u")
    return self;
  if (typeof window < "u")
    return window;
  if (typeof globalThis < "u")
    return globalThis;
  throw new Error("Unable to locate global object.");
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const NS = () => OS().__FIREBASE_DEFAULTS__, DS = () => {
  if (typeof process > "u" || typeof process.env > "u")
    return;
  const t = process.env.__FIREBASE_DEFAULTS__;
  if (t)
    return JSON.parse(t);
}, xS = () => {
  if (typeof document > "u")
    return;
  let t;
  try {
    t = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);
  } catch {
    return;
  }
  const e = t && Wg(t[1]);
  return e && JSON.parse(e);
}, Ra = () => {
  try {
    return NS() || DS() || xS();
  } catch (t) {
    console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${t}`);
    return;
  }
}, Qg = (t) => {
  var e, n;
  return (n = (e = Ra()) === null || e === void 0 ? void 0 : e.emulatorHosts) === null || n === void 0 ? void 0 : n[t];
}, Yg = (t) => {
  const e = Qg(t);
  if (!e)
    return;
  const n = e.lastIndexOf(":");
  if (n <= 0 || n + 1 === e.length)
    throw new Error(`Invalid host ${e} with no separate hostname and port!`);
  const r = parseInt(e.substring(n + 1), 10);
  return e[0] === "[" ? [e.substring(1, n - 1), r] : [e.substring(0, n), r];
}, Jg = () => {
  var t;
  return (t = Ra()) === null || t === void 0 ? void 0 : t.config;
}, Xg = (t) => {
  var e;
  return (e = Ra()) === null || e === void 0 ? void 0 : e[`_${t}`];
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class LS {
  constructor() {
    this.reject = () => {
    }, this.resolve = () => {
    }, this.promise = new Promise((e, n) => {
      this.resolve = e, this.reject = n;
    });
  }
  /**
   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
   * and returns a node-style callback which will resolve or reject the Deferred's promise.
   */
  wrapCallback(e) {
    return (n, r) => {
      n ? this.reject(n) : this.resolve(r), typeof e == "function" && (this.promise.catch(() => {
      }), e.length === 1 ? e(n) : e(n, r));
    };
  }
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Zg(t, e) {
  if (t.uid)
    throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');
  const n = {
    alg: "none",
    type: "JWT"
  }, r = e || "demo-project", i = t.iat || 0, s = t.sub || t.user_id;
  if (!s)
    throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");
  const o = Object.assign({
    // Set all required fields to decent defaults
    iss: `https://securetoken.google.com/${r}`,
    aud: r,
    iat: i,
    exp: i + 3600,
    auth_time: i,
    sub: s,
    user_id: s,
    firebase: {
      sign_in_provider: "custom",
      identities: {}
    }
  }, t);
  return [
    Go(JSON.stringify(n)),
    Go(JSON.stringify(o)),
    ""
  ].join(".");
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function lt() {
  return typeof navigator < "u" && typeof navigator.userAgent == "string" ? navigator.userAgent : "";
}
function MS() {
  return typeof window < "u" && // @ts-ignore Setting up an broadly applicable index signature for Window
  // just to deal with this case would probably be a bad idea.
  !!(window.cordova || window.phonegap || window.PhoneGap) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(lt());
}
function VS() {
  var t;
  const e = (t = Ra()) === null || t === void 0 ? void 0 : t.forceEnvironment;
  if (e === "node")
    return !0;
  if (e === "browser")
    return !1;
  try {
    return Object.prototype.toString.call(globalThis.process) === "[object process]";
  } catch {
    return !1;
  }
}
function FS() {
  const t = typeof chrome == "object" ? chrome.runtime : typeof browser == "object" ? browser.runtime : void 0;
  return typeof t == "object" && t.id !== void 0;
}
function US() {
  return typeof navigator == "object" && navigator.product === "ReactNative";
}
function jS() {
  const t = lt();
  return t.indexOf("MSIE ") >= 0 || t.indexOf("Trident/") >= 0;
}
function BS() {
  return !VS() && !!navigator.userAgent && navigator.userAgent.includes("Safari") && !navigator.userAgent.includes("Chrome");
}
function $S() {
  try {
    return typeof indexedDB == "object";
  } catch {
    return !1;
  }
}
function qS() {
  return new Promise((t, e) => {
    try {
      let n = !0;
      const r = "validate-browser-context-for-indexeddb-analytics-module", i = self.indexedDB.open(r);
      i.onsuccess = () => {
        i.result.close(), n || self.indexedDB.deleteDatabase(r), t(!0);
      }, i.onupgradeneeded = () => {
        n = !1;
      }, i.onerror = () => {
        var s;
        e(((s = i.error) === null || s === void 0 ? void 0 : s.message) || "");
      };
    } catch (n) {
      e(n);
    }
  });
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const zS = "FirebaseError";
class ln extends Error {
  constructor(e, n, r) {
    super(n), this.code = e, this.customData = r, this.name = zS, Object.setPrototypeOf(this, ln.prototype), Error.captureStackTrace && Error.captureStackTrace(this, Cs.prototype.create);
  }
}
class Cs {
  constructor(e, n, r) {
    this.service = e, this.serviceName = n, this.errors = r;
  }
  create(e, ...n) {
    const r = n[0] || {}, i = `${this.service}/${e}`, s = this.errors[e], o = s ? KS(s, r) : "Error", c = `${this.serviceName}: ${o} (${i}).`;
    return new ln(i, c, r);
  }
}
function KS(t, e) {
  return t.replace(HS, (n, r) => {
    const i = e[r];
    return i != null ? String(i) : `<${r}?>`;
  });
}
const HS = /\{\$([^}]+)}/g;
function GS(t) {
  for (const e in t)
    if (Object.prototype.hasOwnProperty.call(t, e))
      return !1;
  return !0;
}
function Wo(t, e) {
  if (t === e)
    return !0;
  const n = Object.keys(t), r = Object.keys(e);
  for (const i of n) {
    if (!r.includes(i))
      return !1;
    const s = t[i], o = e[i];
    if (jd(s) && jd(o)) {
      if (!Wo(s, o))
        return !1;
    } else if (s !== o)
      return !1;
  }
  for (const i of r)
    if (!n.includes(i))
      return !1;
  return !0;
}
function jd(t) {
  return t !== null && typeof t == "object";
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function yi(t) {
  const e = [];
  for (const [n, r] of Object.entries(t))
    Array.isArray(r) ? r.forEach((i) => {
      e.push(encodeURIComponent(n) + "=" + encodeURIComponent(i));
    }) : e.push(encodeURIComponent(n) + "=" + encodeURIComponent(r));
  return e.length ? "&" + e.join("&") : "";
}
function Hi(t) {
  const e = {};
  return t.replace(/^\?/, "").split("&").forEach((r) => {
    if (r) {
      const [i, s] = r.split("=");
      e[decodeURIComponent(i)] = decodeURIComponent(s);
    }
  }), e;
}
function Gi(t) {
  const e = t.indexOf("?");
  if (!e)
    return "";
  const n = t.indexOf("#", e);
  return t.substring(e, n > 0 ? n : void 0);
}
function WS(t, e) {
  const n = new QS(t, e);
  return n.subscribe.bind(n);
}
class QS {
  /**
   * @param executor Function which can make calls to a single Observer
   *     as a proxy.
   * @param onNoObservers Callback when count of Observers goes to zero.
   */
  constructor(e, n) {
    this.observers = [], this.unsubscribes = [], this.observerCount = 0, this.task = Promise.resolve(), this.finalized = !1, this.onNoObservers = n, this.task.then(() => {
      e(this);
    }).catch((r) => {
      this.error(r);
    });
  }
  next(e) {
    this.forEachObserver((n) => {
      n.next(e);
    });
  }
  error(e) {
    this.forEachObserver((n) => {
      n.error(e);
    }), this.close(e);
  }
  complete() {
    this.forEachObserver((e) => {
      e.complete();
    }), this.close();
  }
  /**
   * Subscribe function that can be used to add an Observer to the fan-out list.
   *
   * - We require that no event is sent to a subscriber sychronously to their
   *   call to subscribe().
   */
  subscribe(e, n, r) {
    let i;
    if (e === void 0 && n === void 0 && r === void 0)
      throw new Error("Missing Observer.");
    YS(e, [
      "next",
      "error",
      "complete"
    ]) ? i = e : i = {
      next: e,
      error: n,
      complete: r
    }, i.next === void 0 && (i.next = Pc), i.error === void 0 && (i.error = Pc), i.complete === void 0 && (i.complete = Pc);
    const s = this.unsubscribeOne.bind(this, this.observers.length);
    return this.finalized && this.task.then(() => {
      try {
        this.finalError ? i.error(this.finalError) : i.complete();
      } catch {
      }
    }), this.observers.push(i), s;
  }
  // Unsubscribe is synchronous - we guarantee that no events are sent to
  // any unsubscribed Observer.
  unsubscribeOne(e) {
    this.observers === void 0 || this.observers[e] === void 0 || (delete this.observers[e], this.observerCount -= 1, this.observerCount === 0 && this.onNoObservers !== void 0 && this.onNoObservers(this));
  }
  forEachObserver(e) {
    if (!this.finalized)
      for (let n = 0; n < this.observers.length; n++)
        this.sendOne(n, e);
  }
  // Call the Observer via one of it's callback function. We are careful to
  // confirm that the observe has not been unsubscribed since this asynchronous
  // function had been queued.
  sendOne(e, n) {
    this.task.then(() => {
      if (this.observers !== void 0 && this.observers[e] !== void 0)
        try {
          n(this.observers[e]);
        } catch (r) {
          typeof console < "u" && console.error && console.error(r);
        }
    });
  }
  close(e) {
    this.finalized || (this.finalized = !0, e !== void 0 && (this.finalError = e), this.task.then(() => {
      this.observers = void 0, this.onNoObservers = void 0;
    }));
  }
}
function YS(t, e) {
  if (typeof t != "object" || t === null)
    return !1;
  for (const n of e)
    if (n in t && typeof t[n] == "function")
      return !0;
  return !1;
}
function Pc() {
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Ue(t) {
  return t && t._delegate ? t._delegate : t;
}
class Gn {
  /**
   *
   * @param name The public service name, e.g. app, auth, firestore, database
   * @param instanceFactory Service factory responsible for creating the public interface
   * @param type whether the service provided by the component is public or private
   */
  constructor(e, n, r) {
    this.name = e, this.instanceFactory = n, this.type = r, this.multipleInstances = !1, this.serviceProps = {}, this.instantiationMode = "LAZY", this.onInstanceCreated = null;
  }
  setInstantiationMode(e) {
    return this.instantiationMode = e, this;
  }
  setMultipleInstances(e) {
    return this.multipleInstances = e, this;
  }
  setServiceProps(e) {
    return this.serviceProps = e, this;
  }
  setInstanceCreatedCallback(e) {
    return this.onInstanceCreated = e, this;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const or = "[DEFAULT]";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class JS {
  constructor(e, n) {
    this.name = e, this.container = n, this.component = null, this.instances = /* @__PURE__ */ new Map(), this.instancesDeferred = /* @__PURE__ */ new Map(), this.instancesOptions = /* @__PURE__ */ new Map(), this.onInitCallbacks = /* @__PURE__ */ new Map();
  }
  /**
   * @param identifier A provider can provide mulitple instances of a service
   * if this.component.multipleInstances is true.
   */
  get(e) {
    const n = this.normalizeInstanceIdentifier(e);
    if (!this.instancesDeferred.has(n)) {
      const r = new LS();
      if (this.instancesDeferred.set(n, r), this.isInitialized(n) || this.shouldAutoInitialize())
        try {
          const i = this.getOrInitializeService({
            instanceIdentifier: n
          });
          i && r.resolve(i);
        } catch {
        }
    }
    return this.instancesDeferred.get(n).promise;
  }
  getImmediate(e) {
    var n;
    const r = this.normalizeInstanceIdentifier(e == null ? void 0 : e.identifier), i = (n = e == null ? void 0 : e.optional) !== null && n !== void 0 ? n : !1;
    if (this.isInitialized(r) || this.shouldAutoInitialize())
      try {
        return this.getOrInitializeService({
          instanceIdentifier: r
        });
      } catch (s) {
        if (i)
          return null;
        throw s;
      }
    else {
      if (i)
        return null;
      throw Error(`Service ${this.name} is not available`);
    }
  }
  getComponent() {
    return this.component;
  }
  setComponent(e) {
    if (e.name !== this.name)
      throw Error(`Mismatching Component ${e.name} for Provider ${this.name}.`);
    if (this.component)
      throw Error(`Component for ${this.name} has already been provided`);
    if (this.component = e, !!this.shouldAutoInitialize()) {
      if (ZS(e))
        try {
          this.getOrInitializeService({ instanceIdentifier: or });
        } catch {
        }
      for (const [n, r] of this.instancesDeferred.entries()) {
        const i = this.normalizeInstanceIdentifier(n);
        try {
          const s = this.getOrInitializeService({
            instanceIdentifier: i
          });
          r.resolve(s);
        } catch {
        }
      }
    }
  }
  clearInstance(e = or) {
    this.instancesDeferred.delete(e), this.instancesOptions.delete(e), this.instances.delete(e);
  }
  // app.delete() will call this method on every provider to delete the services
  // TODO: should we mark the provider as deleted?
  async delete() {
    const e = Array.from(this.instances.values());
    await Promise.all([
      ...e.filter((n) => "INTERNAL" in n).map((n) => n.INTERNAL.delete()),
      ...e.filter((n) => "_delete" in n).map((n) => n._delete())
    ]);
  }
  isComponentSet() {
    return this.component != null;
  }
  isInitialized(e = or) {
    return this.instances.has(e);
  }
  getOptions(e = or) {
    return this.instancesOptions.get(e) || {};
  }
  initialize(e = {}) {
    const { options: n = {} } = e, r = this.normalizeInstanceIdentifier(e.instanceIdentifier);
    if (this.isInitialized(r))
      throw Error(`${this.name}(${r}) has already been initialized`);
    if (!this.isComponentSet())
      throw Error(`Component ${this.name} has not been registered yet`);
    const i = this.getOrInitializeService({
      instanceIdentifier: r,
      options: n
    });
    for (const [s, o] of this.instancesDeferred.entries()) {
      const c = this.normalizeInstanceIdentifier(s);
      r === c && o.resolve(i);
    }
    return i;
  }
  /**
   *
   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().
   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.
   *
   * @param identifier An optional instance identifier
   * @returns a function to unregister the callback
   */
  onInit(e, n) {
    var r;
    const i = this.normalizeInstanceIdentifier(n), s = (r = this.onInitCallbacks.get(i)) !== null && r !== void 0 ? r : /* @__PURE__ */ new Set();
    s.add(e), this.onInitCallbacks.set(i, s);
    const o = this.instances.get(i);
    return o && e(o, i), () => {
      s.delete(e);
    };
  }
  /**
   * Invoke onInit callbacks synchronously
   * @param instance the service instance`
   */
  invokeOnInitCallbacks(e, n) {
    const r = this.onInitCallbacks.get(n);
    if (r)
      for (const i of r)
        try {
          i(e, n);
        } catch {
        }
  }
  getOrInitializeService({ instanceIdentifier: e, options: n = {} }) {
    let r = this.instances.get(e);
    if (!r && this.component && (r = this.component.instanceFactory(this.container, {
      instanceIdentifier: XS(e),
      options: n
    }), this.instances.set(e, r), this.instancesOptions.set(e, n), this.invokeOnInitCallbacks(r, e), this.component.onInstanceCreated))
      try {
        this.component.onInstanceCreated(this.container, e, r);
      } catch {
      }
    return r || null;
  }
  normalizeInstanceIdentifier(e = or) {
    return this.component ? this.component.multipleInstances ? e : or : e;
  }
  shouldAutoInitialize() {
    return !!this.component && this.component.instantiationMode !== "EXPLICIT";
  }
}
function XS(t) {
  return t === or ? void 0 : t;
}
function ZS(t) {
  return t.instantiationMode === "EAGER";
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class eA {
  constructor(e) {
    this.name = e, this.providers = /* @__PURE__ */ new Map();
  }
  /**
   *
   * @param component Component being added
   * @param overwrite When a component with the same name has already been registered,
   * if overwrite is true: overwrite the existing component with the new component and create a new
   * provider with the new component. It can be useful in tests where you want to use different mocks
   * for different tests.
   * if overwrite is false: throw an exception
   */
  addComponent(e) {
    const n = this.getProvider(e.name);
    if (n.isComponentSet())
      throw new Error(`Component ${e.name} has already been registered with ${this.name}`);
    n.setComponent(e);
  }
  addOrOverwriteComponent(e) {
    this.getProvider(e.name).isComponentSet() && this.providers.delete(e.name), this.addComponent(e);
  }
  /**
   * getProvider provides a type safe interface where it can only be called with a field name
   * present in NameServiceMapping interface.
   *
   * Firebase SDKs providing services should extend NameServiceMapping interface to register
   * themselves.
   */
  getProvider(e) {
    if (this.providers.has(e))
      return this.providers.get(e);
    const n = new JS(e, this);
    return this.providers.set(e, n), n;
  }
  getProviders() {
    return Array.from(this.providers.values());
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ve;
(function(t) {
  t[t.DEBUG = 0] = "DEBUG", t[t.VERBOSE = 1] = "VERBOSE", t[t.INFO = 2] = "INFO", t[t.WARN = 3] = "WARN", t[t.ERROR = 4] = "ERROR", t[t.SILENT = 5] = "SILENT";
})(ve || (ve = {}));
const tA = {
  debug: ve.DEBUG,
  verbose: ve.VERBOSE,
  info: ve.INFO,
  warn: ve.WARN,
  error: ve.ERROR,
  silent: ve.SILENT
}, nA = ve.INFO, rA = {
  [ve.DEBUG]: "log",
  [ve.VERBOSE]: "log",
  [ve.INFO]: "info",
  [ve.WARN]: "warn",
  [ve.ERROR]: "error"
}, iA = (t, e, ...n) => {
  if (e < t.logLevel)
    return;
  const r = (/* @__PURE__ */ new Date()).toISOString(), i = rA[e];
  if (i)
    console[i](`[${r}]  ${t.name}:`, ...n);
  else
    throw new Error(`Attempted to log a message with an invalid logType (value: ${e})`);
};
class El {
  /**
   * Gives you an instance of a Logger to capture messages according to
   * Firebase's logging scheme.
   *
   * @param name The name that the logs will be associated with
   */
  constructor(e) {
    this.name = e, this._logLevel = nA, this._logHandler = iA, this._userLogHandler = null;
  }
  get logLevel() {
    return this._logLevel;
  }
  set logLevel(e) {
    if (!(e in ve))
      throw new TypeError(`Invalid value "${e}" assigned to \`logLevel\``);
    this._logLevel = e;
  }
  // Workaround for setter/getter having to be the same type.
  setLogLevel(e) {
    this._logLevel = typeof e == "string" ? tA[e] : e;
  }
  get logHandler() {
    return this._logHandler;
  }
  set logHandler(e) {
    if (typeof e != "function")
      throw new TypeError("Value assigned to `logHandler` must be a function");
    this._logHandler = e;
  }
  get userLogHandler() {
    return this._userLogHandler;
  }
  set userLogHandler(e) {
    this._userLogHandler = e;
  }
  /**
   * The functions below are all based on the `console` interface
   */
  debug(...e) {
    this._userLogHandler && this._userLogHandler(this, ve.DEBUG, ...e), this._logHandler(this, ve.DEBUG, ...e);
  }
  log(...e) {
    this._userLogHandler && this._userLogHandler(this, ve.VERBOSE, ...e), this._logHandler(this, ve.VERBOSE, ...e);
  }
  info(...e) {
    this._userLogHandler && this._userLogHandler(this, ve.INFO, ...e), this._logHandler(this, ve.INFO, ...e);
  }
  warn(...e) {
    this._userLogHandler && this._userLogHandler(this, ve.WARN, ...e), this._logHandler(this, ve.WARN, ...e);
  }
  error(...e) {
    this._userLogHandler && this._userLogHandler(this, ve.ERROR, ...e), this._logHandler(this, ve.ERROR, ...e);
  }
}
const sA = (t, e) => e.some((n) => t instanceof n);
let Bd, $d;
function oA() {
  return Bd || (Bd = [
    IDBDatabase,
    IDBObjectStore,
    IDBIndex,
    IDBCursor,
    IDBTransaction
  ]);
}
function aA() {
  return $d || ($d = [
    IDBCursor.prototype.advance,
    IDBCursor.prototype.continue,
    IDBCursor.prototype.continuePrimaryKey
  ]);
}
const ey = /* @__PURE__ */ new WeakMap(), bu = /* @__PURE__ */ new WeakMap(), ty = /* @__PURE__ */ new WeakMap(), kc = /* @__PURE__ */ new WeakMap(), bl = /* @__PURE__ */ new WeakMap();
function cA(t) {
  const e = new Promise((n, r) => {
    const i = () => {
      t.removeEventListener("success", s), t.removeEventListener("error", o);
    }, s = () => {
      n($n(t.result)), i();
    }, o = () => {
      r(t.error), i();
    };
    t.addEventListener("success", s), t.addEventListener("error", o);
  });
  return e.then((n) => {
    n instanceof IDBCursor && ey.set(n, t);
  }).catch(() => {
  }), bl.set(e, t), e;
}
function uA(t) {
  if (bu.has(t))
    return;
  const e = new Promise((n, r) => {
    const i = () => {
      t.removeEventListener("complete", s), t.removeEventListener("error", o), t.removeEventListener("abort", o);
    }, s = () => {
      n(), i();
    }, o = () => {
      r(t.error || new DOMException("AbortError", "AbortError")), i();
    };
    t.addEventListener("complete", s), t.addEventListener("error", o), t.addEventListener("abort", o);
  });
  bu.set(t, e);
}
let Tu = {
  get(t, e, n) {
    if (t instanceof IDBTransaction) {
      if (e === "done")
        return bu.get(t);
      if (e === "objectStoreNames")
        return t.objectStoreNames || ty.get(t);
      if (e === "store")
        return n.objectStoreNames[1] ? void 0 : n.objectStore(n.objectStoreNames[0]);
    }
    return $n(t[e]);
  },
  set(t, e, n) {
    return t[e] = n, !0;
  },
  has(t, e) {
    return t instanceof IDBTransaction && (e === "done" || e === "store") ? !0 : e in t;
  }
};
function lA(t) {
  Tu = t(Tu);
}
function hA(t) {
  return t === IDBDatabase.prototype.transaction && !("objectStoreNames" in IDBTransaction.prototype) ? function(e, ...n) {
    const r = t.call(Oc(this), e, ...n);
    return ty.set(r, e.sort ? e.sort() : [e]), $n(r);
  } : aA().includes(t) ? function(...e) {
    return t.apply(Oc(this), e), $n(ey.get(this));
  } : function(...e) {
    return $n(t.apply(Oc(this), e));
  };
}
function fA(t) {
  return typeof t == "function" ? hA(t) : (t instanceof IDBTransaction && uA(t), sA(t, oA()) ? new Proxy(t, Tu) : t);
}
function $n(t) {
  if (t instanceof IDBRequest)
    return cA(t);
  if (kc.has(t))
    return kc.get(t);
  const e = fA(t);
  return e !== t && (kc.set(t, e), bl.set(e, t)), e;
}
const Oc = (t) => bl.get(t);
function dA(t, e, { blocked: n, upgrade: r, blocking: i, terminated: s } = {}) {
  const o = indexedDB.open(t, e), c = $n(o);
  return r && o.addEventListener("upgradeneeded", (u) => {
    r($n(o.result), u.oldVersion, u.newVersion, $n(o.transaction), u);
  }), n && o.addEventListener("blocked", (u) => n(
    // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
    u.oldVersion,
    u.newVersion,
    u
  )), c.then((u) => {
    s && u.addEventListener("close", () => s()), i && u.addEventListener("versionchange", (l) => i(l.oldVersion, l.newVersion, l));
  }).catch(() => {
  }), c;
}
const pA = ["get", "getKey", "getAll", "getAllKeys", "count"], mA = ["put", "add", "delete", "clear"], Nc = /* @__PURE__ */ new Map();
function qd(t, e) {
  if (!(t instanceof IDBDatabase && !(e in t) && typeof e == "string"))
    return;
  if (Nc.get(e))
    return Nc.get(e);
  const n = e.replace(/FromIndex$/, ""), r = e !== n, i = mA.includes(n);
  if (
    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
    !(n in (r ? IDBIndex : IDBObjectStore).prototype) || !(i || pA.includes(n))
  )
    return;
  const s = async function(o, ...c) {
    const u = this.transaction(o, i ? "readwrite" : "readonly");
    let l = u.store;
    return r && (l = l.index(c.shift())), (await Promise.all([
      l[n](...c),
      i && u.done
    ]))[0];
  };
  return Nc.set(e, s), s;
}
lA((t) => ({
  ...t,
  get: (e, n, r) => qd(e, n) || t.get(e, n, r),
  has: (e, n) => !!qd(e, n) || t.has(e, n)
}));
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class gA {
  constructor(e) {
    this.container = e;
  }
  // In initial implementation, this will be called by installations on
  // auth token refresh, and installations will send this string.
  getPlatformInfoString() {
    return this.container.getProviders().map((n) => {
      if (yA(n)) {
        const r = n.getImmediate();
        return `${r.library}/${r.version}`;
      } else
        return null;
    }).filter((n) => n).join(" ");
  }
}
function yA(t) {
  const e = t.getComponent();
  return (e == null ? void 0 : e.type) === "VERSION";
}
const Iu = "@firebase/app", zd = "0.10.8";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Tr = new El("@firebase/app"), _A = "@firebase/app-compat", vA = "@firebase/analytics-compat", wA = "@firebase/analytics", EA = "@firebase/app-check-compat", bA = "@firebase/app-check", TA = "@firebase/auth", IA = "@firebase/auth-compat", SA = "@firebase/database", AA = "@firebase/database-compat", RA = "@firebase/functions", CA = "@firebase/functions-compat", PA = "@firebase/installations", kA = "@firebase/installations-compat", OA = "@firebase/messaging", NA = "@firebase/messaging-compat", DA = "@firebase/performance", xA = "@firebase/performance-compat", LA = "@firebase/remote-config", MA = "@firebase/remote-config-compat", VA = "@firebase/storage", FA = "@firebase/storage-compat", UA = "@firebase/firestore", jA = "@firebase/vertexai-preview", BA = "@firebase/firestore-compat", $A = "firebase", qA = "10.12.5";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Su = "[DEFAULT]", zA = {
  [Iu]: "fire-core",
  [_A]: "fire-core-compat",
  [wA]: "fire-analytics",
  [vA]: "fire-analytics-compat",
  [bA]: "fire-app-check",
  [EA]: "fire-app-check-compat",
  [TA]: "fire-auth",
  [IA]: "fire-auth-compat",
  [SA]: "fire-rtdb",
  [AA]: "fire-rtdb-compat",
  [RA]: "fire-fn",
  [CA]: "fire-fn-compat",
  [PA]: "fire-iid",
  [kA]: "fire-iid-compat",
  [OA]: "fire-fcm",
  [NA]: "fire-fcm-compat",
  [DA]: "fire-perf",
  [xA]: "fire-perf-compat",
  [LA]: "fire-rc",
  [MA]: "fire-rc-compat",
  [VA]: "fire-gcs",
  [FA]: "fire-gcs-compat",
  [UA]: "fire-fst",
  [BA]: "fire-fst-compat",
  [jA]: "fire-vertex",
  "fire-js": "fire-js",
  [$A]: "fire-js-all"
};
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Qo = /* @__PURE__ */ new Map(), KA = /* @__PURE__ */ new Map(), Au = /* @__PURE__ */ new Map();
function Kd(t, e) {
  try {
    t.container.addComponent(e);
  } catch (n) {
    Tr.debug(`Component ${e.name} failed to register with FirebaseApp ${t.name}`, n);
  }
}
function Ir(t) {
  const e = t.name;
  if (Au.has(e))
    return Tr.debug(`There were multiple attempts to register component ${e}.`), !1;
  Au.set(e, t);
  for (const n of Qo.values())
    Kd(n, t);
  for (const n of KA.values())
    Kd(n, t);
  return !0;
}
function Ca(t, e) {
  const n = t.container.getProvider("heartbeat").getImmediate({ optional: !0 });
  return n && n.triggerHeartbeat(), t.container.getProvider(e);
}
function Ut(t) {
  return t.settings !== void 0;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const HA = {
  "no-app": "No Firebase App '{$appName}' has been created - call initializeApp() first",
  "bad-app-name": "Illegal App name: '{$appName}'",
  "duplicate-app": "Firebase App named '{$appName}' already exists with different options or config",
  "app-deleted": "Firebase App named '{$appName}' already deleted",
  "server-app-deleted": "Firebase Server App has been deleted",
  "no-options": "Need to provide options, when not being deployed to hosting via source.",
  "invalid-app-argument": "firebase.{$appName}() takes either no argument or a Firebase App instance.",
  "invalid-log-argument": "First argument to `onLog` must be null or a function.",
  "idb-open": "Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.",
  "idb-get": "Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.",
  "idb-set": "Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.",
  "idb-delete": "Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.",
  "finalization-registry-not-supported": "FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.",
  "invalid-server-app-environment": "FirebaseServerApp is not for use in browser environments."
}, qn = new Cs("app", "Firebase", HA);
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class GA {
  constructor(e, n, r) {
    this._isDeleted = !1, this._options = Object.assign({}, e), this._config = Object.assign({}, n), this._name = n.name, this._automaticDataCollectionEnabled = n.automaticDataCollectionEnabled, this._container = r, this.container.addComponent(new Gn(
      "app",
      () => this,
      "PUBLIC"
      /* ComponentType.PUBLIC */
    ));
  }
  get automaticDataCollectionEnabled() {
    return this.checkDestroyed(), this._automaticDataCollectionEnabled;
  }
  set automaticDataCollectionEnabled(e) {
    this.checkDestroyed(), this._automaticDataCollectionEnabled = e;
  }
  get name() {
    return this.checkDestroyed(), this._name;
  }
  get options() {
    return this.checkDestroyed(), this._options;
  }
  get config() {
    return this.checkDestroyed(), this._config;
  }
  get container() {
    return this._container;
  }
  get isDeleted() {
    return this._isDeleted;
  }
  set isDeleted(e) {
    this._isDeleted = e;
  }
  /**
   * This function will throw an Error if the App has already been deleted -
   * use before performing API actions on the App.
   */
  checkDestroyed() {
    if (this.isDeleted)
      throw qn.create("app-deleted", { appName: this._name });
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Dr = qA;
function ny(t, e = {}) {
  let n = t;
  typeof e != "object" && (e = { name: e });
  const r = Object.assign({ name: Su, automaticDataCollectionEnabled: !1 }, e), i = r.name;
  if (typeof i != "string" || !i)
    throw qn.create("bad-app-name", {
      appName: String(i)
    });
  if (n || (n = Jg()), !n)
    throw qn.create(
      "no-options"
      /* AppError.NO_OPTIONS */
    );
  const s = Qo.get(i);
  if (s) {
    if (Wo(n, s.options) && Wo(r, s.config))
      return s;
    throw qn.create("duplicate-app", { appName: i });
  }
  const o = new eA(i);
  for (const u of Au.values())
    o.addComponent(u);
  const c = new GA(n, r, o);
  return Qo.set(i, c), c;
}
function Tl(t = Su) {
  const e = Qo.get(t);
  if (!e && t === Su && Jg())
    return ny();
  if (!e)
    throw qn.create("no-app", { appName: t });
  return e;
}
function nn(t, e, n) {
  var r;
  let i = (r = zA[t]) !== null && r !== void 0 ? r : t;
  n && (i += `-${n}`);
  const s = i.match(/\s|\//), o = e.match(/\s|\//);
  if (s || o) {
    const c = [
      `Unable to register library "${i}" with version "${e}":`
    ];
    s && c.push(`library name "${i}" contains illegal characters (whitespace or "/")`), s && o && c.push("and"), o && c.push(`version name "${e}" contains illegal characters (whitespace or "/")`), Tr.warn(c.join(" "));
    return;
  }
  Ir(new Gn(
    `${i}-version`,
    () => ({ library: i, version: e }),
    "VERSION"
    /* ComponentType.VERSION */
  ));
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const WA = "firebase-heartbeat-database", QA = 1, fs = "firebase-heartbeat-store";
let Dc = null;
function ry() {
  return Dc || (Dc = dA(WA, QA, {
    upgrade: (t, e) => {
      switch (e) {
        case 0:
          try {
            t.createObjectStore(fs);
          } catch (n) {
            console.warn(n);
          }
      }
    }
  }).catch((t) => {
    throw qn.create("idb-open", {
      originalErrorMessage: t.message
    });
  })), Dc;
}
async function YA(t) {
  try {
    const n = (await ry()).transaction(fs), r = await n.objectStore(fs).get(iy(t));
    return await n.done, r;
  } catch (e) {
    if (e instanceof ln)
      Tr.warn(e.message);
    else {
      const n = qn.create("idb-get", {
        originalErrorMessage: e == null ? void 0 : e.message
      });
      Tr.warn(n.message);
    }
  }
}
async function Hd(t, e) {
  try {
    const r = (await ry()).transaction(fs, "readwrite");
    await r.objectStore(fs).put(e, iy(t)), await r.done;
  } catch (n) {
    if (n instanceof ln)
      Tr.warn(n.message);
    else {
      const r = qn.create("idb-set", {
        originalErrorMessage: n == null ? void 0 : n.message
      });
      Tr.warn(r.message);
    }
  }
}
function iy(t) {
  return `${t.name}!${t.options.appId}`;
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const JA = 1024, XA = 30 * 24 * 60 * 60 * 1e3;
class ZA {
  constructor(e) {
    this.container = e, this._heartbeatsCache = null;
    const n = this.container.getProvider("app").getImmediate();
    this._storage = new tR(n), this._heartbeatsCachePromise = this._storage.read().then((r) => (this._heartbeatsCache = r, r));
  }
  /**
   * Called to report a heartbeat. The function will generate
   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it
   * to IndexedDB.
   * Note that we only store one heartbeat per day. So if a heartbeat for today is
   * already logged, subsequent calls to this function in the same day will be ignored.
   */
  async triggerHeartbeat() {
    var e, n;
    const i = this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(), s = Gd();
    if (!(((e = this._heartbeatsCache) === null || e === void 0 ? void 0 : e.heartbeats) == null && (this._heartbeatsCache = await this._heartbeatsCachePromise, ((n = this._heartbeatsCache) === null || n === void 0 ? void 0 : n.heartbeats) == null)) && !(this._heartbeatsCache.lastSentHeartbeatDate === s || this._heartbeatsCache.heartbeats.some((o) => o.date === s)))
      return this._heartbeatsCache.heartbeats.push({ date: s, agent: i }), this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter((o) => {
        const c = new Date(o.date).valueOf();
        return Date.now() - c <= XA;
      }), this._storage.overwrite(this._heartbeatsCache);
  }
  /**
   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.
   * It also clears all heartbeats from memory as well as in IndexedDB.
   *
   * NOTE: Consuming product SDKs should not send the header if this method
   * returns an empty string.
   */
  async getHeartbeatsHeader() {
    var e;
    if (this._heartbeatsCache === null && await this._heartbeatsCachePromise, ((e = this._heartbeatsCache) === null || e === void 0 ? void 0 : e.heartbeats) == null || this._heartbeatsCache.heartbeats.length === 0)
      return "";
    const n = Gd(), { heartbeatsToSend: r, unsentEntries: i } = eR(this._heartbeatsCache.heartbeats), s = Go(JSON.stringify({ version: 2, heartbeats: r }));
    return this._heartbeatsCache.lastSentHeartbeatDate = n, i.length > 0 ? (this._heartbeatsCache.heartbeats = i, await this._storage.overwrite(this._heartbeatsCache)) : (this._heartbeatsCache.heartbeats = [], this._storage.overwrite(this._heartbeatsCache)), s;
  }
}
function Gd() {
  return (/* @__PURE__ */ new Date()).toISOString().substring(0, 10);
}
function eR(t, e = JA) {
  const n = [];
  let r = t.slice();
  for (const i of t) {
    const s = n.find((o) => o.agent === i.agent);
    if (s) {
      if (s.dates.push(i.date), Wd(n) > e) {
        s.dates.pop();
        break;
      }
    } else if (n.push({
      agent: i.agent,
      dates: [i.date]
    }), Wd(n) > e) {
      n.pop();
      break;
    }
    r = r.slice(1);
  }
  return {
    heartbeatsToSend: n,
    unsentEntries: r
  };
}
class tR {
  constructor(e) {
    this.app = e, this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();
  }
  async runIndexedDBEnvironmentCheck() {
    return $S() ? qS().then(() => !0).catch(() => !1) : !1;
  }
  /**
   * Read all heartbeats.
   */
  async read() {
    if (await this._canUseIndexedDBPromise) {
      const n = await YA(this.app);
      return n != null && n.heartbeats ? n : { heartbeats: [] };
    } else
      return { heartbeats: [] };
  }
  // overwrite the storage with the provided heartbeats
  async overwrite(e) {
    var n;
    if (await this._canUseIndexedDBPromise) {
      const i = await this.read();
      return Hd(this.app, {
        lastSentHeartbeatDate: (n = e.lastSentHeartbeatDate) !== null && n !== void 0 ? n : i.lastSentHeartbeatDate,
        heartbeats: e.heartbeats
      });
    } else
      return;
  }
  // add heartbeats
  async add(e) {
    var n;
    if (await this._canUseIndexedDBPromise) {
      const i = await this.read();
      return Hd(this.app, {
        lastSentHeartbeatDate: (n = e.lastSentHeartbeatDate) !== null && n !== void 0 ? n : i.lastSentHeartbeatDate,
        heartbeats: [
          ...i.heartbeats,
          ...e.heartbeats
        ]
      });
    } else
      return;
  }
}
function Wd(t) {
  return Go(
    // heartbeatsCache wrapper properties
    JSON.stringify({ version: 2, heartbeats: t })
  ).length;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function nR(t) {
  Ir(new Gn(
    "platform-logger",
    (e) => new gA(e),
    "PRIVATE"
    /* ComponentType.PRIVATE */
  )), Ir(new Gn(
    "heartbeat",
    (e) => new ZA(e),
    "PRIVATE"
    /* ComponentType.PRIVATE */
  )), nn(Iu, zd, t), nn(Iu, zd, "esm2017"), nn("fire-js", "");
}
nR("");
var rR = "firebase", iR = "10.12.5";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
nn(rR, iR, "app");
function Il(t, e) {
  var n = {};
  for (var r in t) Object.prototype.hasOwnProperty.call(t, r) && e.indexOf(r) < 0 && (n[r] = t[r]);
  if (t != null && typeof Object.getOwnPropertySymbols == "function")
    for (var i = 0, r = Object.getOwnPropertySymbols(t); i < r.length; i++)
      e.indexOf(r[i]) < 0 && Object.prototype.propertyIsEnumerable.call(t, r[i]) && (n[r[i]] = t[r[i]]);
  return n;
}
function sy() {
  return {
    "dependent-sdk-initialized-before-auth": "Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."
  };
}
const sR = sy, oy = new Cs("auth", "Firebase", sy());
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Yo = new El("@firebase/auth");
function oR(t, ...e) {
  Yo.logLevel <= ve.WARN && Yo.warn(`Auth (${Dr}): ${t}`, ...e);
}
function Ro(t, ...e) {
  Yo.logLevel <= ve.ERROR && Yo.error(`Auth (${Dr}): ${t}`, ...e);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function $t(t, ...e) {
  throw Al(t, ...e);
}
function kt(t, ...e) {
  return Al(t, ...e);
}
function Sl(t, e, n) {
  const r = Object.assign(Object.assign({}, sR()), { [e]: n });
  return new Cs("auth", "Firebase", r).create(e, {
    appName: t.name
  });
}
function rn(t) {
  return Sl(t, "operation-not-supported-in-this-environment", "Operations that alter the current user are not supported in conjunction with FirebaseServerApp");
}
function aR(t, e, n) {
  const r = n;
  if (!(e instanceof r))
    throw r.name !== e.constructor.name && $t(
      t,
      "argument-error"
      /* AuthErrorCode.ARGUMENT_ERROR */
    ), Sl(t, "argument-error", `Type of ${e.constructor.name} does not match expected instance.Did you pass a reference from a different Auth SDK?`);
}
function Al(t, ...e) {
  if (typeof t != "string") {
    const n = e[0], r = [...e.slice(1)];
    return r[0] && (r[0].appName = t.name), t._errorFactory.create(n, ...r);
  }
  return oy.create(t, ...e);
}
function ne(t, e, ...n) {
  if (!t)
    throw Al(e, ...n);
}
function _n(t) {
  const e = "INTERNAL ASSERTION FAILED: " + t;
  throw Ro(e), new Error(e);
}
function In(t, e) {
  t || _n(e);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Ru() {
  var t;
  return typeof self < "u" && ((t = self.location) === null || t === void 0 ? void 0 : t.href) || "";
}
function ay() {
  return Qd() === "http:" || Qd() === "https:";
}
function Qd() {
  var t;
  return typeof self < "u" && ((t = self.location) === null || t === void 0 ? void 0 : t.protocol) || null;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function cR() {
  return typeof navigator < "u" && navigator && "onLine" in navigator && typeof navigator.onLine == "boolean" && // Apply only for traditional web apps and Chrome extensions.
  // This is especially true for Cordova apps which have unreliable
  // navigator.onLine behavior unless cordova-plugin-network-information is
  // installed which overwrites the native navigator.onLine value and
  // defines navigator.connection.
  (ay() || FS() || "connection" in navigator) ? navigator.onLine : !0;
}
function uR() {
  if (typeof navigator > "u")
    return null;
  const t = navigator;
  return (
    // Most reliable, but only supported in Chrome/Firefox.
    t.languages && t.languages[0] || // Supported in most browsers, but returns the language of the browser
    // UI, not the language set in browser settings.
    t.language || // Couldn't determine language.
    null
  );
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Ps {
  constructor(e, n) {
    this.shortDelay = e, this.longDelay = n, In(n > e, "Short delay should be less than long delay!"), this.isMobile = MS() || US();
  }
  get() {
    return cR() ? this.isMobile ? this.longDelay : this.shortDelay : Math.min(5e3, this.shortDelay);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Rl(t, e) {
  In(t.emulator, "Emulator should always be set here");
  const { url: n } = t.emulator;
  return e ? `${n}${e.startsWith("/") ? e.slice(1) : e}` : n;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class cy {
  static initialize(e, n, r) {
    this.fetchImpl = e, n && (this.headersImpl = n), r && (this.responseImpl = r);
  }
  static fetch() {
    if (this.fetchImpl)
      return this.fetchImpl;
    if (typeof self < "u" && "fetch" in self)
      return self.fetch;
    if (typeof globalThis < "u" && globalThis.fetch)
      return globalThis.fetch;
    if (typeof fetch < "u")
      return fetch;
    _n("Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
  }
  static headers() {
    if (this.headersImpl)
      return this.headersImpl;
    if (typeof self < "u" && "Headers" in self)
      return self.Headers;
    if (typeof globalThis < "u" && globalThis.Headers)
      return globalThis.Headers;
    if (typeof Headers < "u")
      return Headers;
    _n("Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
  }
  static response() {
    if (this.responseImpl)
      return this.responseImpl;
    if (typeof self < "u" && "Response" in self)
      return self.Response;
    if (typeof globalThis < "u" && globalThis.Response)
      return globalThis.Response;
    if (typeof Response < "u")
      return Response;
    _n("Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const lR = {
  // Custom token errors.
  CREDENTIAL_MISMATCH: "custom-token-mismatch",
  // This can only happen if the SDK sends a bad request.
  MISSING_CUSTOM_TOKEN: "internal-error",
  // Create Auth URI errors.
  INVALID_IDENTIFIER: "invalid-email",
  // This can only happen if the SDK sends a bad request.
  MISSING_CONTINUE_URI: "internal-error",
  // Sign in with email and password errors (some apply to sign up too).
  INVALID_PASSWORD: "wrong-password",
  // This can only happen if the SDK sends a bad request.
  MISSING_PASSWORD: "missing-password",
  // Thrown if Email Enumeration Protection is enabled in the project and the email or password is
  // invalid.
  INVALID_LOGIN_CREDENTIALS: "invalid-credential",
  // Sign up with email and password errors.
  EMAIL_EXISTS: "email-already-in-use",
  PASSWORD_LOGIN_DISABLED: "operation-not-allowed",
  // Verify assertion for sign in with credential errors:
  INVALID_IDP_RESPONSE: "invalid-credential",
  INVALID_PENDING_TOKEN: "invalid-credential",
  FEDERATED_USER_ID_ALREADY_LINKED: "credential-already-in-use",
  // This can only happen if the SDK sends a bad request.
  MISSING_REQ_TYPE: "internal-error",
  // Send Password reset email errors:
  EMAIL_NOT_FOUND: "user-not-found",
  RESET_PASSWORD_EXCEED_LIMIT: "too-many-requests",
  EXPIRED_OOB_CODE: "expired-action-code",
  INVALID_OOB_CODE: "invalid-action-code",
  // This can only happen if the SDK sends a bad request.
  MISSING_OOB_CODE: "internal-error",
  // Operations that require ID token in request:
  CREDENTIAL_TOO_OLD_LOGIN_AGAIN: "requires-recent-login",
  INVALID_ID_TOKEN: "invalid-user-token",
  TOKEN_EXPIRED: "user-token-expired",
  USER_NOT_FOUND: "user-token-expired",
  // Other errors.
  TOO_MANY_ATTEMPTS_TRY_LATER: "too-many-requests",
  PASSWORD_DOES_NOT_MEET_REQUIREMENTS: "password-does-not-meet-requirements",
  // Phone Auth related errors.
  INVALID_CODE: "invalid-verification-code",
  INVALID_SESSION_INFO: "invalid-verification-id",
  INVALID_TEMPORARY_PROOF: "invalid-credential",
  MISSING_SESSION_INFO: "missing-verification-id",
  SESSION_EXPIRED: "code-expired",
  // Other action code errors when additional settings passed.
  // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.
  // This is OK as this error will be caught by client side validation.
  MISSING_ANDROID_PACKAGE_NAME: "missing-android-pkg-name",
  UNAUTHORIZED_DOMAIN: "unauthorized-continue-uri",
  // getProjectConfig errors when clientId is passed.
  INVALID_OAUTH_CLIENT_ID: "invalid-oauth-client-id",
  // User actions (sign-up or deletion) disabled errors.
  ADMIN_ONLY_OPERATION: "admin-restricted-operation",
  // Multi factor related errors.
  INVALID_MFA_PENDING_CREDENTIAL: "invalid-multi-factor-session",
  MFA_ENROLLMENT_NOT_FOUND: "multi-factor-info-not-found",
  MISSING_MFA_ENROLLMENT_ID: "missing-multi-factor-info",
  MISSING_MFA_PENDING_CREDENTIAL: "missing-multi-factor-session",
  SECOND_FACTOR_EXISTS: "second-factor-already-in-use",
  SECOND_FACTOR_LIMIT_EXCEEDED: "maximum-second-factor-count-exceeded",
  // Blocking functions related errors.
  BLOCKING_FUNCTION_ERROR_RESPONSE: "internal-error",
  // Recaptcha related errors.
  RECAPTCHA_NOT_ENABLED: "recaptcha-not-enabled",
  MISSING_RECAPTCHA_TOKEN: "missing-recaptcha-token",
  INVALID_RECAPTCHA_TOKEN: "invalid-recaptcha-token",
  INVALID_RECAPTCHA_ACTION: "invalid-recaptcha-action",
  MISSING_CLIENT_TYPE: "missing-client-type",
  MISSING_RECAPTCHA_VERSION: "missing-recaptcha-version",
  INVALID_RECAPTCHA_VERSION: "invalid-recaptcha-version",
  INVALID_REQ_TYPE: "invalid-req-type"
  /* AuthErrorCode.INVALID_REQ_TYPE */
};
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const hR = new Ps(3e4, 6e4);
function Rn(t, e) {
  return t.tenantId && !e.tenantId ? Object.assign(Object.assign({}, e), { tenantId: t.tenantId }) : e;
}
async function hn(t, e, n, r, i = {}) {
  return uy(t, i, async () => {
    let s = {}, o = {};
    r && (e === "GET" ? o = r : s = {
      body: JSON.stringify(r)
    });
    const c = yi(Object.assign({ key: t.config.apiKey }, o)).slice(1), u = await t._getAdditionalHeaders();
    return u[
      "Content-Type"
      /* HttpHeader.CONTENT_TYPE */
    ] = "application/json", t.languageCode && (u[
      "X-Firebase-Locale"
      /* HttpHeader.X_FIREBASE_LOCALE */
    ] = t.languageCode), cy.fetch()(ly(t, t.config.apiHost, n, c), Object.assign({
      method: e,
      headers: u,
      referrerPolicy: "no-referrer"
    }, s));
  });
}
async function uy(t, e, n) {
  t._canInitEmulator = !1;
  const r = Object.assign(Object.assign({}, lR), e);
  try {
    const i = new dR(t), s = await Promise.race([
      n(),
      i.promise
    ]);
    i.clearNetworkTimeout();
    const o = await s.json();
    if ("needConfirmation" in o)
      throw po(t, "account-exists-with-different-credential", o);
    if (s.ok && !("errorMessage" in o))
      return o;
    {
      const c = s.ok ? o.errorMessage : o.error.message, [u, l] = c.split(" : ");
      if (u === "FEDERATED_USER_ID_ALREADY_LINKED")
        throw po(t, "credential-already-in-use", o);
      if (u === "EMAIL_EXISTS")
        throw po(t, "email-already-in-use", o);
      if (u === "USER_DISABLED")
        throw po(t, "user-disabled", o);
      const f = r[u] || u.toLowerCase().replace(/[_\s]+/g, "-");
      if (l)
        throw Sl(t, f, l);
      $t(t, f);
    }
  } catch (i) {
    if (i instanceof ln)
      throw i;
    $t(t, "network-request-failed", { message: String(i) });
  }
}
async function _i(t, e, n, r, i = {}) {
  const s = await hn(t, e, n, r, i);
  return "mfaPendingCredential" in s && $t(t, "multi-factor-auth-required", {
    _serverResponse: s
  }), s;
}
function ly(t, e, n, r) {
  const i = `${e}${n}?${r}`;
  return t.config.emulator ? Rl(t.config, i) : `${t.config.apiScheme}://${i}`;
}
function fR(t) {
  switch (t) {
    case "ENFORCE":
      return "ENFORCE";
    case "AUDIT":
      return "AUDIT";
    case "OFF":
      return "OFF";
    default:
      return "ENFORCEMENT_STATE_UNSPECIFIED";
  }
}
class dR {
  constructor(e) {
    this.auth = e, this.timer = null, this.promise = new Promise((n, r) => {
      this.timer = setTimeout(() => r(kt(
        this.auth,
        "network-request-failed"
        /* AuthErrorCode.NETWORK_REQUEST_FAILED */
      )), hR.get());
    });
  }
  clearNetworkTimeout() {
    clearTimeout(this.timer);
  }
}
function po(t, e, n) {
  const r = {
    appName: t.name
  };
  n.email && (r.email = n.email), n.phoneNumber && (r.phoneNumber = n.phoneNumber);
  const i = kt(t, e, r);
  return i.customData._tokenResponse = n, i;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Yd(t) {
  return t !== void 0 && t.getResponse !== void 0;
}
function Jd(t) {
  return t !== void 0 && t.enterprise !== void 0;
}
class pR {
  constructor(e) {
    if (this.siteKey = "", this.recaptchaEnforcementState = [], e.recaptchaKey === void 0)
      throw new Error("recaptchaKey undefined");
    this.siteKey = e.recaptchaKey.split("/")[3], this.recaptchaEnforcementState = e.recaptchaEnforcementState;
  }
  /**
   * Returns the reCAPTCHA Enterprise enforcement state for the given provider.
   *
   * @param providerStr - The provider whose enforcement state is to be returned.
   * @returns The reCAPTCHA Enterprise enforcement state for the given provider.
   */
  getProviderEnforcementState(e) {
    if (!this.recaptchaEnforcementState || this.recaptchaEnforcementState.length === 0)
      return null;
    for (const n of this.recaptchaEnforcementState)
      if (n.provider && n.provider === e)
        return fR(n.enforcementState);
    return null;
  }
  /**
   * Returns true if the reCAPTCHA Enterprise enforcement state for the provider is set to ENFORCE or AUDIT.
   *
   * @param providerStr - The provider whose enablement state is to be returned.
   * @returns Whether or not reCAPTCHA Enterprise protection is enabled for the given provider.
   */
  isProviderEnabled(e) {
    return this.getProviderEnforcementState(e) === "ENFORCE" || this.getProviderEnforcementState(e) === "AUDIT";
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function mR(t) {
  return (await hn(
    t,
    "GET",
    "/v1/recaptchaParams"
    /* Endpoint.GET_RECAPTCHA_PARAM */
  )).recaptchaSiteKey || "";
}
async function gR(t, e) {
  return hn(t, "GET", "/v2/recaptchaConfig", Rn(t, e));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function yR(t, e) {
  return hn(t, "POST", "/v1/accounts:delete", e);
}
async function hy(t, e) {
  return hn(t, "POST", "/v1/accounts:lookup", e);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Zi(t) {
  if (t)
    try {
      const e = new Date(Number(t));
      if (!isNaN(e.getTime()))
        return e.toUTCString();
    } catch {
    }
}
async function _R(t, e = !1) {
  const n = Ue(t), r = await n.getIdToken(e), i = Cl(r);
  ne(
    i && i.exp && i.auth_time && i.iat,
    n.auth,
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  );
  const s = typeof i.firebase == "object" ? i.firebase : void 0, o = s == null ? void 0 : s.sign_in_provider;
  return {
    claims: i,
    token: r,
    authTime: Zi(xc(i.auth_time)),
    issuedAtTime: Zi(xc(i.iat)),
    expirationTime: Zi(xc(i.exp)),
    signInProvider: o || null,
    signInSecondFactor: (s == null ? void 0 : s.sign_in_second_factor) || null
  };
}
function xc(t) {
  return Number(t) * 1e3;
}
function Cl(t) {
  const [e, n, r] = t.split(".");
  if (e === void 0 || n === void 0 || r === void 0)
    return Ro("JWT malformed, contained fewer than 3 sections"), null;
  try {
    const i = Wg(n);
    return i ? JSON.parse(i) : (Ro("Failed to decode base64 JWT payload"), null);
  } catch (i) {
    return Ro("Caught error parsing JWT payload as JSON", i == null ? void 0 : i.toString()), null;
  }
}
function Xd(t) {
  const e = Cl(t);
  return ne(
    e,
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  ), ne(
    typeof e.exp < "u",
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  ), ne(
    typeof e.iat < "u",
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  ), Number(e.exp) - Number(e.iat);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function oi(t, e, n = !1) {
  if (n)
    return e;
  try {
    return await e;
  } catch (r) {
    throw r instanceof ln && vR(r) && t.auth.currentUser === t && await t.auth.signOut(), r;
  }
}
function vR({ code: t }) {
  return t === "auth/user-disabled" || t === "auth/user-token-expired";
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class wR {
  constructor(e) {
    this.user = e, this.isRunning = !1, this.timerId = null, this.errorBackoff = 3e4;
  }
  _start() {
    this.isRunning || (this.isRunning = !0, this.schedule());
  }
  _stop() {
    this.isRunning && (this.isRunning = !1, this.timerId !== null && clearTimeout(this.timerId));
  }
  getInterval(e) {
    var n;
    if (e) {
      const r = this.errorBackoff;
      return this.errorBackoff = Math.min(
        this.errorBackoff * 2,
        96e4
        /* Duration.RETRY_BACKOFF_MAX */
      ), r;
    } else {
      this.errorBackoff = 3e4;
      const i = ((n = this.user.stsTokenManager.expirationTime) !== null && n !== void 0 ? n : 0) - Date.now() - 3e5;
      return Math.max(0, i);
    }
  }
  schedule(e = !1) {
    if (!this.isRunning)
      return;
    const n = this.getInterval(e);
    this.timerId = setTimeout(async () => {
      await this.iteration();
    }, n);
  }
  async iteration() {
    try {
      await this.user.getIdToken(!0);
    } catch (e) {
      (e == null ? void 0 : e.code) === "auth/network-request-failed" && this.schedule(
        /* wasError */
        !0
      );
      return;
    }
    this.schedule();
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Cu {
  constructor(e, n) {
    this.createdAt = e, this.lastLoginAt = n, this._initializeTime();
  }
  _initializeTime() {
    this.lastSignInTime = Zi(this.lastLoginAt), this.creationTime = Zi(this.createdAt);
  }
  _copy(e) {
    this.createdAt = e.createdAt, this.lastLoginAt = e.lastLoginAt, this._initializeTime();
  }
  toJSON() {
    return {
      createdAt: this.createdAt,
      lastLoginAt: this.lastLoginAt
    };
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function Jo(t) {
  var e;
  const n = t.auth, r = await t.getIdToken(), i = await oi(t, hy(n, { idToken: r }));
  ne(
    i == null ? void 0 : i.users.length,
    n,
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  );
  const s = i.users[0];
  t._notifyReloadListener(s);
  const o = !((e = s.providerUserInfo) === null || e === void 0) && e.length ? fy(s.providerUserInfo) : [], c = bR(t.providerData, o), u = t.isAnonymous, l = !(t.email && s.passwordHash) && !(c != null && c.length), f = u ? l : !1, h = {
    uid: s.localId,
    displayName: s.displayName || null,
    photoURL: s.photoUrl || null,
    email: s.email || null,
    emailVerified: s.emailVerified || !1,
    phoneNumber: s.phoneNumber || null,
    tenantId: s.tenantId || null,
    providerData: c,
    metadata: new Cu(s.createdAt, s.lastLoginAt),
    isAnonymous: f
  };
  Object.assign(t, h);
}
async function ER(t) {
  const e = Ue(t);
  await Jo(e), await e.auth._persistUserIfCurrent(e), e.auth._notifyListenersIfCurrent(e);
}
function bR(t, e) {
  return [...t.filter((r) => !e.some((i) => i.providerId === r.providerId)), ...e];
}
function fy(t) {
  return t.map((e) => {
    var { providerId: n } = e, r = Il(e, ["providerId"]);
    return {
      providerId: n,
      uid: r.rawId || "",
      displayName: r.displayName || null,
      email: r.email || null,
      phoneNumber: r.phoneNumber || null,
      photoURL: r.photoUrl || null
    };
  });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function TR(t, e) {
  const n = await uy(t, {}, async () => {
    const r = yi({
      grant_type: "refresh_token",
      refresh_token: e
    }).slice(1), { tokenApiHost: i, apiKey: s } = t.config, o = ly(t, i, "/v1/token", `key=${s}`), c = await t._getAdditionalHeaders();
    return c[
      "Content-Type"
      /* HttpHeader.CONTENT_TYPE */
    ] = "application/x-www-form-urlencoded", cy.fetch()(o, {
      method: "POST",
      headers: c,
      body: r
    });
  });
  return {
    accessToken: n.access_token,
    expiresIn: n.expires_in,
    refreshToken: n.refresh_token
  };
}
async function IR(t, e) {
  return hn(t, "POST", "/v2/accounts:revokeToken", Rn(t, e));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Jr {
  constructor() {
    this.refreshToken = null, this.accessToken = null, this.expirationTime = null;
  }
  get isExpired() {
    return !this.expirationTime || Date.now() > this.expirationTime - 3e4;
  }
  updateFromServerResponse(e) {
    ne(
      e.idToken,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), ne(
      typeof e.idToken < "u",
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), ne(
      typeof e.refreshToken < "u",
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    );
    const n = "expiresIn" in e && typeof e.expiresIn < "u" ? Number(e.expiresIn) : Xd(e.idToken);
    this.updateTokensAndExpiration(e.idToken, e.refreshToken, n);
  }
  updateFromIdToken(e) {
    ne(
      e.length !== 0,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    );
    const n = Xd(e);
    this.updateTokensAndExpiration(e, null, n);
  }
  async getToken(e, n = !1) {
    return !n && this.accessToken && !this.isExpired ? this.accessToken : (ne(
      this.refreshToken,
      e,
      "user-token-expired"
      /* AuthErrorCode.TOKEN_EXPIRED */
    ), this.refreshToken ? (await this.refresh(e, this.refreshToken), this.accessToken) : null);
  }
  clearRefreshToken() {
    this.refreshToken = null;
  }
  async refresh(e, n) {
    const { accessToken: r, refreshToken: i, expiresIn: s } = await TR(e, n);
    this.updateTokensAndExpiration(r, i, Number(s));
  }
  updateTokensAndExpiration(e, n, r) {
    this.refreshToken = n || null, this.accessToken = e || null, this.expirationTime = Date.now() + r * 1e3;
  }
  static fromJSON(e, n) {
    const { refreshToken: r, accessToken: i, expirationTime: s } = n, o = new Jr();
    return r && (ne(typeof r == "string", "internal-error", {
      appName: e
    }), o.refreshToken = r), i && (ne(typeof i == "string", "internal-error", {
      appName: e
    }), o.accessToken = i), s && (ne(typeof s == "number", "internal-error", {
      appName: e
    }), o.expirationTime = s), o;
  }
  toJSON() {
    return {
      refreshToken: this.refreshToken,
      accessToken: this.accessToken,
      expirationTime: this.expirationTime
    };
  }
  _assign(e) {
    this.accessToken = e.accessToken, this.refreshToken = e.refreshToken, this.expirationTime = e.expirationTime;
  }
  _clone() {
    return Object.assign(new Jr(), this.toJSON());
  }
  _performRefresh() {
    return _n("not implemented");
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Dn(t, e) {
  ne(typeof t == "string" || typeof t > "u", "internal-error", { appName: e });
}
class vn {
  constructor(e) {
    var { uid: n, auth: r, stsTokenManager: i } = e, s = Il(e, ["uid", "auth", "stsTokenManager"]);
    this.providerId = "firebase", this.proactiveRefresh = new wR(this), this.reloadUserInfo = null, this.reloadListener = null, this.uid = n, this.auth = r, this.stsTokenManager = i, this.accessToken = i.accessToken, this.displayName = s.displayName || null, this.email = s.email || null, this.emailVerified = s.emailVerified || !1, this.phoneNumber = s.phoneNumber || null, this.photoURL = s.photoURL || null, this.isAnonymous = s.isAnonymous || !1, this.tenantId = s.tenantId || null, this.providerData = s.providerData ? [...s.providerData] : [], this.metadata = new Cu(s.createdAt || void 0, s.lastLoginAt || void 0);
  }
  async getIdToken(e) {
    const n = await oi(this, this.stsTokenManager.getToken(this.auth, e));
    return ne(
      n,
      this.auth,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), this.accessToken !== n && (this.accessToken = n, await this.auth._persistUserIfCurrent(this), this.auth._notifyListenersIfCurrent(this)), n;
  }
  getIdTokenResult(e) {
    return _R(this, e);
  }
  reload() {
    return ER(this);
  }
  _assign(e) {
    this !== e && (ne(
      this.uid === e.uid,
      this.auth,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), this.displayName = e.displayName, this.photoURL = e.photoURL, this.email = e.email, this.emailVerified = e.emailVerified, this.phoneNumber = e.phoneNumber, this.isAnonymous = e.isAnonymous, this.tenantId = e.tenantId, this.providerData = e.providerData.map((n) => Object.assign({}, n)), this.metadata._copy(e.metadata), this.stsTokenManager._assign(e.stsTokenManager));
  }
  _clone(e) {
    const n = new vn(Object.assign(Object.assign({}, this), { auth: e, stsTokenManager: this.stsTokenManager._clone() }));
    return n.metadata._copy(this.metadata), n;
  }
  _onReload(e) {
    ne(
      !this.reloadListener,
      this.auth,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), this.reloadListener = e, this.reloadUserInfo && (this._notifyReloadListener(this.reloadUserInfo), this.reloadUserInfo = null);
  }
  _notifyReloadListener(e) {
    this.reloadListener ? this.reloadListener(e) : this.reloadUserInfo = e;
  }
  _startProactiveRefresh() {
    this.proactiveRefresh._start();
  }
  _stopProactiveRefresh() {
    this.proactiveRefresh._stop();
  }
  async _updateTokensIfNecessary(e, n = !1) {
    let r = !1;
    e.idToken && e.idToken !== this.stsTokenManager.accessToken && (this.stsTokenManager.updateFromServerResponse(e), r = !0), n && await Jo(this), await this.auth._persistUserIfCurrent(this), r && this.auth._notifyListenersIfCurrent(this);
  }
  async delete() {
    if (Ut(this.auth.app))
      return Promise.reject(rn(this.auth));
    const e = await this.getIdToken();
    return await oi(this, yR(this.auth, { idToken: e })), this.stsTokenManager.clearRefreshToken(), this.auth.signOut();
  }
  toJSON() {
    return Object.assign(Object.assign({
      uid: this.uid,
      email: this.email || void 0,
      emailVerified: this.emailVerified,
      displayName: this.displayName || void 0,
      isAnonymous: this.isAnonymous,
      photoURL: this.photoURL || void 0,
      phoneNumber: this.phoneNumber || void 0,
      tenantId: this.tenantId || void 0,
      providerData: this.providerData.map((e) => Object.assign({}, e)),
      stsTokenManager: this.stsTokenManager.toJSON(),
      // Redirect event ID must be maintained in case there is a pending
      // redirect event.
      _redirectEventId: this._redirectEventId
    }, this.metadata.toJSON()), {
      // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):
      apiKey: this.auth.config.apiKey,
      appName: this.auth.name
    });
  }
  get refreshToken() {
    return this.stsTokenManager.refreshToken || "";
  }
  static _fromJSON(e, n) {
    var r, i, s, o, c, u, l, f;
    const h = (r = n.displayName) !== null && r !== void 0 ? r : void 0, _ = (i = n.email) !== null && i !== void 0 ? i : void 0, b = (s = n.phoneNumber) !== null && s !== void 0 ? s : void 0, I = (o = n.photoURL) !== null && o !== void 0 ? o : void 0, C = (c = n.tenantId) !== null && c !== void 0 ? c : void 0, m = (u = n._redirectEventId) !== null && u !== void 0 ? u : void 0, y = (l = n.createdAt) !== null && l !== void 0 ? l : void 0, E = (f = n.lastLoginAt) !== null && f !== void 0 ? f : void 0, { uid: p, emailVerified: g, isAnonymous: w, providerData: S, stsTokenManager: R } = n;
    ne(
      p && R,
      e,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    );
    const T = Jr.fromJSON(this.name, R);
    ne(
      typeof p == "string",
      e,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), Dn(h, e.name), Dn(_, e.name), ne(
      typeof g == "boolean",
      e,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), ne(
      typeof w == "boolean",
      e,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), Dn(b, e.name), Dn(I, e.name), Dn(C, e.name), Dn(m, e.name), Dn(y, e.name), Dn(E, e.name);
    const A = new vn({
      uid: p,
      auth: e,
      email: _,
      emailVerified: g,
      displayName: h,
      isAnonymous: w,
      photoURL: I,
      phoneNumber: b,
      tenantId: C,
      stsTokenManager: T,
      createdAt: y,
      lastLoginAt: E
    });
    return S && Array.isArray(S) && (A.providerData = S.map((O) => Object.assign({}, O))), m && (A._redirectEventId = m), A;
  }
  /**
   * Initialize a User from an idToken server response
   * @param auth
   * @param idTokenResponse
   */
  static async _fromIdTokenResponse(e, n, r = !1) {
    const i = new Jr();
    i.updateFromServerResponse(n);
    const s = new vn({
      uid: n.localId,
      auth: e,
      stsTokenManager: i,
      isAnonymous: r
    });
    return await Jo(s), s;
  }
  /**
   * Initialize a User from an idToken server response
   * @param auth
   * @param idTokenResponse
   */
  static async _fromGetAccountInfoResponse(e, n, r) {
    const i = n.users[0];
    ne(
      i.localId !== void 0,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    );
    const s = i.providerUserInfo !== void 0 ? fy(i.providerUserInfo) : [], o = !(i.email && i.passwordHash) && !(s != null && s.length), c = new Jr();
    c.updateFromIdToken(r);
    const u = new vn({
      uid: i.localId,
      auth: e,
      stsTokenManager: c,
      isAnonymous: o
    }), l = {
      uid: i.localId,
      displayName: i.displayName || null,
      photoURL: i.photoUrl || null,
      email: i.email || null,
      emailVerified: i.emailVerified || !1,
      phoneNumber: i.phoneNumber || null,
      tenantId: i.tenantId || null,
      providerData: s,
      metadata: new Cu(i.createdAt, i.lastLoginAt),
      isAnonymous: !(i.email && i.passwordHash) && !(s != null && s.length)
    };
    return Object.assign(u, l), u;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Zd = /* @__PURE__ */ new Map();
function wn(t) {
  In(t instanceof Function, "Expected a class definition");
  let e = Zd.get(t);
  return e ? (In(e instanceof t, "Instance stored in cache mismatched with class"), e) : (e = new t(), Zd.set(t, e), e);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class dy {
  constructor() {
    this.type = "NONE", this.storage = {};
  }
  async _isAvailable() {
    return !0;
  }
  async _set(e, n) {
    this.storage[e] = n;
  }
  async _get(e) {
    const n = this.storage[e];
    return n === void 0 ? null : n;
  }
  async _remove(e) {
    delete this.storage[e];
  }
  _addListener(e, n) {
  }
  _removeListener(e, n) {
  }
}
dy.type = "NONE";
const ep = dy;
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Co(t, e, n) {
  return `firebase:${t}:${e}:${n}`;
}
class Xr {
  constructor(e, n, r) {
    this.persistence = e, this.auth = n, this.userKey = r;
    const { config: i, name: s } = this.auth;
    this.fullUserKey = Co(this.userKey, i.apiKey, s), this.fullPersistenceKey = Co("persistence", i.apiKey, s), this.boundEventHandler = n._onStorageEvent.bind(n), this.persistence._addListener(this.fullUserKey, this.boundEventHandler);
  }
  setCurrentUser(e) {
    return this.persistence._set(this.fullUserKey, e.toJSON());
  }
  async getCurrentUser() {
    const e = await this.persistence._get(this.fullUserKey);
    return e ? vn._fromJSON(this.auth, e) : null;
  }
  removeCurrentUser() {
    return this.persistence._remove(this.fullUserKey);
  }
  savePersistenceForRedirect() {
    return this.persistence._set(this.fullPersistenceKey, this.persistence.type);
  }
  async setPersistence(e) {
    if (this.persistence === e)
      return;
    const n = await this.getCurrentUser();
    if (await this.removeCurrentUser(), this.persistence = e, n)
      return this.setCurrentUser(n);
  }
  delete() {
    this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);
  }
  static async create(e, n, r = "authUser") {
    if (!n.length)
      return new Xr(wn(ep), e, r);
    const i = (await Promise.all(n.map(async (l) => {
      if (await l._isAvailable())
        return l;
    }))).filter((l) => l);
    let s = i[0] || wn(ep);
    const o = Co(r, e.config.apiKey, e.name);
    let c = null;
    for (const l of n)
      try {
        const f = await l._get(o);
        if (f) {
          const h = vn._fromJSON(e, f);
          l !== s && (c = h), s = l;
          break;
        }
      } catch {
      }
    const u = i.filter((l) => l._shouldAllowMigration);
    return !s._shouldAllowMigration || !u.length ? new Xr(s, e, r) : (s = u[0], c && await s._set(o, c.toJSON()), await Promise.all(n.map(async (l) => {
      if (l !== s)
        try {
          await l._remove(o);
        } catch {
        }
    })), new Xr(s, e, r));
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function tp(t) {
  const e = t.toLowerCase();
  if (e.includes("opera/") || e.includes("opr/") || e.includes("opios/"))
    return "Opera";
  if (gy(e))
    return "IEMobile";
  if (e.includes("msie") || e.includes("trident/"))
    return "IE";
  if (e.includes("edge/"))
    return "Edge";
  if (py(e))
    return "Firefox";
  if (e.includes("silk/"))
    return "Silk";
  if (_y(e))
    return "Blackberry";
  if (vy(e))
    return "Webos";
  if (Pl(e))
    return "Safari";
  if ((e.includes("chrome/") || my(e)) && !e.includes("edge/"))
    return "Chrome";
  if (yy(e))
    return "Android";
  {
    const n = /([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/, r = t.match(n);
    if ((r == null ? void 0 : r.length) === 2)
      return r[1];
  }
  return "Other";
}
function py(t = lt()) {
  return /firefox\//i.test(t);
}
function Pl(t = lt()) {
  const e = t.toLowerCase();
  return e.includes("safari/") && !e.includes("chrome/") && !e.includes("crios/") && !e.includes("android");
}
function my(t = lt()) {
  return /crios\//i.test(t);
}
function gy(t = lt()) {
  return /iemobile/i.test(t);
}
function yy(t = lt()) {
  return /android/i.test(t);
}
function _y(t = lt()) {
  return /blackberry/i.test(t);
}
function vy(t = lt()) {
  return /webos/i.test(t);
}
function Pa(t = lt()) {
  return /iphone|ipad|ipod/i.test(t) || /macintosh/i.test(t) && /mobile/i.test(t);
}
function SR(t = lt()) {
  var e;
  return Pa(t) && !!(!((e = window.navigator) === null || e === void 0) && e.standalone);
}
function AR() {
  return jS() && document.documentMode === 10;
}
function wy(t = lt()) {
  return Pa(t) || yy(t) || vy(t) || _y(t) || /windows phone/i.test(t) || gy(t);
}
function RR() {
  try {
    return !!(window && window !== window.top);
  } catch {
    return !1;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Ey(t, e = []) {
  let n;
  switch (t) {
    case "Browser":
      n = tp(lt());
      break;
    case "Worker":
      n = `${tp(lt())}-${t}`;
      break;
    default:
      n = t;
  }
  const r = e.length ? e.join(",") : "FirebaseCore-web";
  return `${n}/JsCore/${Dr}/${r}`;
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class CR {
  constructor(e) {
    this.auth = e, this.queue = [];
  }
  pushCallback(e, n) {
    const r = (s) => new Promise((o, c) => {
      try {
        const u = e(s);
        o(u);
      } catch (u) {
        c(u);
      }
    });
    r.onAbort = n, this.queue.push(r);
    const i = this.queue.length - 1;
    return () => {
      this.queue[i] = () => Promise.resolve();
    };
  }
  async runMiddleware(e) {
    if (this.auth.currentUser === e)
      return;
    const n = [];
    try {
      for (const r of this.queue)
        await r(e), r.onAbort && n.push(r.onAbort);
    } catch (r) {
      n.reverse();
      for (const i of n)
        try {
          i();
        } catch {
        }
      throw this.auth._errorFactory.create("login-blocked", {
        originalMessage: r == null ? void 0 : r.message
      });
    }
  }
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function PR(t, e = {}) {
  return hn(t, "GET", "/v2/passwordPolicy", Rn(t, e));
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const kR = 6;
class OR {
  constructor(e) {
    var n, r, i, s;
    const o = e.customStrengthOptions;
    this.customStrengthOptions = {}, this.customStrengthOptions.minPasswordLength = (n = o.minPasswordLength) !== null && n !== void 0 ? n : kR, o.maxPasswordLength && (this.customStrengthOptions.maxPasswordLength = o.maxPasswordLength), o.containsLowercaseCharacter !== void 0 && (this.customStrengthOptions.containsLowercaseLetter = o.containsLowercaseCharacter), o.containsUppercaseCharacter !== void 0 && (this.customStrengthOptions.containsUppercaseLetter = o.containsUppercaseCharacter), o.containsNumericCharacter !== void 0 && (this.customStrengthOptions.containsNumericCharacter = o.containsNumericCharacter), o.containsNonAlphanumericCharacter !== void 0 && (this.customStrengthOptions.containsNonAlphanumericCharacter = o.containsNonAlphanumericCharacter), this.enforcementState = e.enforcementState, this.enforcementState === "ENFORCEMENT_STATE_UNSPECIFIED" && (this.enforcementState = "OFF"), this.allowedNonAlphanumericCharacters = (i = (r = e.allowedNonAlphanumericCharacters) === null || r === void 0 ? void 0 : r.join("")) !== null && i !== void 0 ? i : "", this.forceUpgradeOnSignin = (s = e.forceUpgradeOnSignin) !== null && s !== void 0 ? s : !1, this.schemaVersion = e.schemaVersion;
  }
  validatePassword(e) {
    var n, r, i, s, o, c;
    const u = {
      isValid: !0,
      passwordPolicy: this
    };
    return this.validatePasswordLengthOptions(e, u), this.validatePasswordCharacterOptions(e, u), u.isValid && (u.isValid = (n = u.meetsMinPasswordLength) !== null && n !== void 0 ? n : !0), u.isValid && (u.isValid = (r = u.meetsMaxPasswordLength) !== null && r !== void 0 ? r : !0), u.isValid && (u.isValid = (i = u.containsLowercaseLetter) !== null && i !== void 0 ? i : !0), u.isValid && (u.isValid = (s = u.containsUppercaseLetter) !== null && s !== void 0 ? s : !0), u.isValid && (u.isValid = (o = u.containsNumericCharacter) !== null && o !== void 0 ? o : !0), u.isValid && (u.isValid = (c = u.containsNonAlphanumericCharacter) !== null && c !== void 0 ? c : !0), u;
  }
  /**
   * Validates that the password meets the length options for the policy.
   *
   * @param password Password to validate.
   * @param status Validation status.
   */
  validatePasswordLengthOptions(e, n) {
    const r = this.customStrengthOptions.minPasswordLength, i = this.customStrengthOptions.maxPasswordLength;
    r && (n.meetsMinPasswordLength = e.length >= r), i && (n.meetsMaxPasswordLength = e.length <= i);
  }
  /**
   * Validates that the password meets the character options for the policy.
   *
   * @param password Password to validate.
   * @param status Validation status.
   */
  validatePasswordCharacterOptions(e, n) {
    this.updatePasswordCharacterOptionsStatuses(
      n,
      /* containsLowercaseCharacter= */
      !1,
      /* containsUppercaseCharacter= */
      !1,
      /* containsNumericCharacter= */
      !1,
      /* containsNonAlphanumericCharacter= */
      !1
    );
    let r;
    for (let i = 0; i < e.length; i++)
      r = e.charAt(i), this.updatePasswordCharacterOptionsStatuses(
        n,
        /* containsLowercaseCharacter= */
        r >= "a" && r <= "z",
        /* containsUppercaseCharacter= */
        r >= "A" && r <= "Z",
        /* containsNumericCharacter= */
        r >= "0" && r <= "9",
        /* containsNonAlphanumericCharacter= */
        this.allowedNonAlphanumericCharacters.includes(r)
      );
  }
  /**
   * Updates the running validation status with the statuses for the character options.
   * Expected to be called each time a character is processed to update each option status
   * based on the current character.
   *
   * @param status Validation status.
   * @param containsLowercaseCharacter Whether the character is a lowercase letter.
   * @param containsUppercaseCharacter Whether the character is an uppercase letter.
   * @param containsNumericCharacter Whether the character is a numeric character.
   * @param containsNonAlphanumericCharacter Whether the character is a non-alphanumeric character.
   */
  updatePasswordCharacterOptionsStatuses(e, n, r, i, s) {
    this.customStrengthOptions.containsLowercaseLetter && (e.containsLowercaseLetter || (e.containsLowercaseLetter = n)), this.customStrengthOptions.containsUppercaseLetter && (e.containsUppercaseLetter || (e.containsUppercaseLetter = r)), this.customStrengthOptions.containsNumericCharacter && (e.containsNumericCharacter || (e.containsNumericCharacter = i)), this.customStrengthOptions.containsNonAlphanumericCharacter && (e.containsNonAlphanumericCharacter || (e.containsNonAlphanumericCharacter = s));
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class NR {
  constructor(e, n, r, i) {
    this.app = e, this.heartbeatServiceProvider = n, this.appCheckServiceProvider = r, this.config = i, this.currentUser = null, this.emulatorConfig = null, this.operations = Promise.resolve(), this.authStateSubscription = new np(this), this.idTokenSubscription = new np(this), this.beforeStateQueue = new CR(this), this.redirectUser = null, this.isProactiveRefreshEnabled = !1, this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION = 1, this._canInitEmulator = !0, this._isInitialized = !1, this._deleted = !1, this._initializationPromise = null, this._popupRedirectResolver = null, this._errorFactory = oy, this._agentRecaptchaConfig = null, this._tenantRecaptchaConfigs = {}, this._projectPasswordPolicy = null, this._tenantPasswordPolicies = {}, this.lastNotifiedUid = void 0, this.languageCode = null, this.tenantId = null, this.settings = { appVerificationDisabledForTesting: !1 }, this.frameworks = [], this.name = e.name, this.clientVersion = i.sdkClientVersion;
  }
  _initializeWithPersistence(e, n) {
    return n && (this._popupRedirectResolver = wn(n)), this._initializationPromise = this.queue(async () => {
      var r, i;
      if (!this._deleted && (this.persistenceManager = await Xr.create(this, e), !this._deleted)) {
        if (!((r = this._popupRedirectResolver) === null || r === void 0) && r._shouldInitProactively)
          try {
            await this._popupRedirectResolver._initialize(this);
          } catch {
          }
        await this.initializeCurrentUser(n), this.lastNotifiedUid = ((i = this.currentUser) === null || i === void 0 ? void 0 : i.uid) || null, !this._deleted && (this._isInitialized = !0);
      }
    }), this._initializationPromise;
  }
  /**
   * If the persistence is changed in another window, the user manager will let us know
   */
  async _onStorageEvent() {
    if (this._deleted)
      return;
    const e = await this.assertedPersistence.getCurrentUser();
    if (!(!this.currentUser && !e)) {
      if (this.currentUser && e && this.currentUser.uid === e.uid) {
        this._currentUser._assign(e), await this.currentUser.getIdToken();
        return;
      }
      await this._updateCurrentUser(
        e,
        /* skipBeforeStateCallbacks */
        !0
      );
    }
  }
  async initializeCurrentUserFromIdToken(e) {
    try {
      const n = await hy(this, { idToken: e }), r = await vn._fromGetAccountInfoResponse(this, n, e);
      await this.directlySetCurrentUser(r);
    } catch (n) {
      console.warn("FirebaseServerApp could not login user with provided authIdToken: ", n), await this.directlySetCurrentUser(null);
    }
  }
  async initializeCurrentUser(e) {
    var n;
    if (Ut(this.app)) {
      const o = this.app.settings.authIdToken;
      return o ? new Promise((c) => {
        setTimeout(() => this.initializeCurrentUserFromIdToken(o).then(c, c));
      }) : this.directlySetCurrentUser(null);
    }
    const r = await this.assertedPersistence.getCurrentUser();
    let i = r, s = !1;
    if (e && this.config.authDomain) {
      await this.getOrInitRedirectPersistenceManager();
      const o = (n = this.redirectUser) === null || n === void 0 ? void 0 : n._redirectEventId, c = i == null ? void 0 : i._redirectEventId, u = await this.tryRedirectSignIn(e);
      (!o || o === c) && (u != null && u.user) && (i = u.user, s = !0);
    }
    if (!i)
      return this.directlySetCurrentUser(null);
    if (!i._redirectEventId) {
      if (s)
        try {
          await this.beforeStateQueue.runMiddleware(i);
        } catch (o) {
          i = r, this._popupRedirectResolver._overrideRedirectResult(this, () => Promise.reject(o));
        }
      return i ? this.reloadAndSetCurrentUserOrClear(i) : this.directlySetCurrentUser(null);
    }
    return ne(
      this._popupRedirectResolver,
      this,
      "argument-error"
      /* AuthErrorCode.ARGUMENT_ERROR */
    ), await this.getOrInitRedirectPersistenceManager(), this.redirectUser && this.redirectUser._redirectEventId === i._redirectEventId ? this.directlySetCurrentUser(i) : this.reloadAndSetCurrentUserOrClear(i);
  }
  async tryRedirectSignIn(e) {
    let n = null;
    try {
      n = await this._popupRedirectResolver._completeRedirectFn(this, e, !0);
    } catch {
      await this._setRedirectUser(null);
    }
    return n;
  }
  async reloadAndSetCurrentUserOrClear(e) {
    try {
      await Jo(e);
    } catch (n) {
      if ((n == null ? void 0 : n.code) !== "auth/network-request-failed")
        return this.directlySetCurrentUser(null);
    }
    return this.directlySetCurrentUser(e);
  }
  useDeviceLanguage() {
    this.languageCode = uR();
  }
  async _delete() {
    this._deleted = !0;
  }
  async updateCurrentUser(e) {
    if (Ut(this.app))
      return Promise.reject(rn(this));
    const n = e ? Ue(e) : null;
    return n && ne(
      n.auth.config.apiKey === this.config.apiKey,
      this,
      "invalid-user-token"
      /* AuthErrorCode.INVALID_AUTH */
    ), this._updateCurrentUser(n && n._clone(this));
  }
  async _updateCurrentUser(e, n = !1) {
    if (!this._deleted)
      return e && ne(
        this.tenantId === e.tenantId,
        this,
        "tenant-id-mismatch"
        /* AuthErrorCode.TENANT_ID_MISMATCH */
      ), n || await this.beforeStateQueue.runMiddleware(e), this.queue(async () => {
        await this.directlySetCurrentUser(e), this.notifyAuthListeners();
      });
  }
  async signOut() {
    return Ut(this.app) ? Promise.reject(rn(this)) : (await this.beforeStateQueue.runMiddleware(null), (this.redirectPersistenceManager || this._popupRedirectResolver) && await this._setRedirectUser(null), this._updateCurrentUser(
      null,
      /* skipBeforeStateCallbacks */
      !0
    ));
  }
  setPersistence(e) {
    return Ut(this.app) ? Promise.reject(rn(this)) : this.queue(async () => {
      await this.assertedPersistence.setPersistence(wn(e));
    });
  }
  _getRecaptchaConfig() {
    return this.tenantId == null ? this._agentRecaptchaConfig : this._tenantRecaptchaConfigs[this.tenantId];
  }
  async validatePassword(e) {
    this._getPasswordPolicyInternal() || await this._updatePasswordPolicy();
    const n = this._getPasswordPolicyInternal();
    return n.schemaVersion !== this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION ? Promise.reject(this._errorFactory.create("unsupported-password-policy-schema-version", {})) : n.validatePassword(e);
  }
  _getPasswordPolicyInternal() {
    return this.tenantId === null ? this._projectPasswordPolicy : this._tenantPasswordPolicies[this.tenantId];
  }
  async _updatePasswordPolicy() {
    const e = await PR(this), n = new OR(e);
    this.tenantId === null ? this._projectPasswordPolicy = n : this._tenantPasswordPolicies[this.tenantId] = n;
  }
  _getPersistence() {
    return this.assertedPersistence.persistence.type;
  }
  _updateErrorMap(e) {
    this._errorFactory = new Cs("auth", "Firebase", e());
  }
  onAuthStateChanged(e, n, r) {
    return this.registerStateListener(this.authStateSubscription, e, n, r);
  }
  beforeAuthStateChanged(e, n) {
    return this.beforeStateQueue.pushCallback(e, n);
  }
  onIdTokenChanged(e, n, r) {
    return this.registerStateListener(this.idTokenSubscription, e, n, r);
  }
  authStateReady() {
    return new Promise((e, n) => {
      if (this.currentUser)
        e();
      else {
        const r = this.onAuthStateChanged(() => {
          r(), e();
        }, n);
      }
    });
  }
  /**
   * Revokes the given access token. Currently only supports Apple OAuth access tokens.
   */
  async revokeAccessToken(e) {
    if (this.currentUser) {
      const n = await this.currentUser.getIdToken(), r = {
        providerId: "apple.com",
        tokenType: "ACCESS_TOKEN",
        token: e,
        idToken: n
      };
      this.tenantId != null && (r.tenantId = this.tenantId), await IR(this, r);
    }
  }
  toJSON() {
    var e;
    return {
      apiKey: this.config.apiKey,
      authDomain: this.config.authDomain,
      appName: this.name,
      currentUser: (e = this._currentUser) === null || e === void 0 ? void 0 : e.toJSON()
    };
  }
  async _setRedirectUser(e, n) {
    const r = await this.getOrInitRedirectPersistenceManager(n);
    return e === null ? r.removeCurrentUser() : r.setCurrentUser(e);
  }
  async getOrInitRedirectPersistenceManager(e) {
    if (!this.redirectPersistenceManager) {
      const n = e && wn(e) || this._popupRedirectResolver;
      ne(
        n,
        this,
        "argument-error"
        /* AuthErrorCode.ARGUMENT_ERROR */
      ), this.redirectPersistenceManager = await Xr.create(
        this,
        [wn(n._redirectPersistence)],
        "redirectUser"
        /* KeyName.REDIRECT_USER */
      ), this.redirectUser = await this.redirectPersistenceManager.getCurrentUser();
    }
    return this.redirectPersistenceManager;
  }
  async _redirectUserForId(e) {
    var n, r;
    return this._isInitialized && await this.queue(async () => {
    }), ((n = this._currentUser) === null || n === void 0 ? void 0 : n._redirectEventId) === e ? this._currentUser : ((r = this.redirectUser) === null || r === void 0 ? void 0 : r._redirectEventId) === e ? this.redirectUser : null;
  }
  async _persistUserIfCurrent(e) {
    if (e === this.currentUser)
      return this.queue(async () => this.directlySetCurrentUser(e));
  }
  /** Notifies listeners only if the user is current */
  _notifyListenersIfCurrent(e) {
    e === this.currentUser && this.notifyAuthListeners();
  }
  _key() {
    return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;
  }
  _startProactiveRefresh() {
    this.isProactiveRefreshEnabled = !0, this.currentUser && this._currentUser._startProactiveRefresh();
  }
  _stopProactiveRefresh() {
    this.isProactiveRefreshEnabled = !1, this.currentUser && this._currentUser._stopProactiveRefresh();
  }
  /** Returns the current user cast as the internal type */
  get _currentUser() {
    return this.currentUser;
  }
  notifyAuthListeners() {
    var e, n;
    if (!this._isInitialized)
      return;
    this.idTokenSubscription.next(this.currentUser);
    const r = (n = (e = this.currentUser) === null || e === void 0 ? void 0 : e.uid) !== null && n !== void 0 ? n : null;
    this.lastNotifiedUid !== r && (this.lastNotifiedUid = r, this.authStateSubscription.next(this.currentUser));
  }
  registerStateListener(e, n, r, i) {
    if (this._deleted)
      return () => {
      };
    const s = typeof n == "function" ? n : n.next.bind(n);
    let o = !1;
    const c = this._isInitialized ? Promise.resolve() : this._initializationPromise;
    if (ne(
      c,
      this,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), c.then(() => {
      o || s(this.currentUser);
    }), typeof n == "function") {
      const u = e.addObserver(n, r, i);
      return () => {
        o = !0, u();
      };
    } else {
      const u = e.addObserver(n);
      return () => {
        o = !0, u();
      };
    }
  }
  /**
   * Unprotected (from race conditions) method to set the current user. This
   * should only be called from within a queued callback. This is necessary
   * because the queue shouldn't rely on another queued callback.
   */
  async directlySetCurrentUser(e) {
    this.currentUser && this.currentUser !== e && this._currentUser._stopProactiveRefresh(), e && this.isProactiveRefreshEnabled && e._startProactiveRefresh(), this.currentUser = e, e ? await this.assertedPersistence.setCurrentUser(e) : await this.assertedPersistence.removeCurrentUser();
  }
  queue(e) {
    return this.operations = this.operations.then(e, e), this.operations;
  }
  get assertedPersistence() {
    return ne(
      this.persistenceManager,
      this,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), this.persistenceManager;
  }
  _logFramework(e) {
    !e || this.frameworks.includes(e) || (this.frameworks.push(e), this.frameworks.sort(), this.clientVersion = Ey(this.config.clientPlatform, this._getFrameworks()));
  }
  _getFrameworks() {
    return this.frameworks;
  }
  async _getAdditionalHeaders() {
    var e;
    const n = {
      "X-Client-Version": this.clientVersion
    };
    this.app.options.appId && (n[
      "X-Firebase-gmpid"
      /* HttpHeader.X_FIREBASE_GMPID */
    ] = this.app.options.appId);
    const r = await ((e = this.heartbeatServiceProvider.getImmediate({
      optional: !0
    })) === null || e === void 0 ? void 0 : e.getHeartbeatsHeader());
    r && (n[
      "X-Firebase-Client"
      /* HttpHeader.X_FIREBASE_CLIENT */
    ] = r);
    const i = await this._getAppCheckToken();
    return i && (n[
      "X-Firebase-AppCheck"
      /* HttpHeader.X_FIREBASE_APP_CHECK */
    ] = i), n;
  }
  async _getAppCheckToken() {
    var e;
    const n = await ((e = this.appCheckServiceProvider.getImmediate({ optional: !0 })) === null || e === void 0 ? void 0 : e.getToken());
    return n != null && n.error && oR(`Error while retrieving App Check token: ${n.error}`), n == null ? void 0 : n.token;
  }
}
function fn(t) {
  return Ue(t);
}
class np {
  constructor(e) {
    this.auth = e, this.observer = null, this.addObserver = WS((n) => this.observer = n);
  }
  get next() {
    return ne(
      this.observer,
      this.auth,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), this.observer.next.bind(this.observer);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
let ks = {
  async loadJS() {
    throw new Error("Unable to load external scripts");
  },
  recaptchaV2Script: "",
  recaptchaEnterpriseScript: "",
  gapiScript: ""
};
function DR(t) {
  ks = t;
}
function kl(t) {
  return ks.loadJS(t);
}
function xR() {
  return ks.recaptchaV2Script;
}
function LR() {
  return ks.recaptchaEnterpriseScript;
}
function MR() {
  return ks.gapiScript;
}
function by(t) {
  return `__${t}${Math.floor(Math.random() * 1e6)}`;
}
const VR = "recaptcha-enterprise", FR = "NO_RECAPTCHA";
class UR {
  /**
   *
   * @param authExtern - The corresponding Firebase {@link Auth} instance.
   *
   */
  constructor(e) {
    this.type = VR, this.auth = fn(e);
  }
  /**
   * Executes the verification process.
   *
   * @returns A Promise for a token that can be used to assert the validity of a request.
   */
  async verify(e = "verify", n = !1) {
    async function r(s) {
      if (!n) {
        if (s.tenantId == null && s._agentRecaptchaConfig != null)
          return s._agentRecaptchaConfig.siteKey;
        if (s.tenantId != null && s._tenantRecaptchaConfigs[s.tenantId] !== void 0)
          return s._tenantRecaptchaConfigs[s.tenantId].siteKey;
      }
      return new Promise(async (o, c) => {
        gR(s, {
          clientType: "CLIENT_TYPE_WEB",
          version: "RECAPTCHA_ENTERPRISE"
          /* RecaptchaVersion.ENTERPRISE */
        }).then((u) => {
          if (u.recaptchaKey === void 0)
            c(new Error("recaptcha Enterprise site key undefined"));
          else {
            const l = new pR(u);
            return s.tenantId == null ? s._agentRecaptchaConfig = l : s._tenantRecaptchaConfigs[s.tenantId] = l, o(l.siteKey);
          }
        }).catch((u) => {
          c(u);
        });
      });
    }
    function i(s, o, c) {
      const u = window.grecaptcha;
      Jd(u) ? u.enterprise.ready(() => {
        u.enterprise.execute(s, { action: e }).then((l) => {
          o(l);
        }).catch(() => {
          o(FR);
        });
      }) : c(Error("No reCAPTCHA enterprise script loaded."));
    }
    return new Promise((s, o) => {
      r(this.auth).then((c) => {
        if (!n && Jd(window.grecaptcha))
          i(c, s, o);
        else {
          if (typeof window > "u") {
            o(new Error("RecaptchaVerifier is only supported in browser"));
            return;
          }
          let u = LR();
          u.length !== 0 && (u += c), kl(u).then(() => {
            i(c, s, o);
          }).catch((l) => {
            o(l);
          });
        }
      }).catch((c) => {
        o(c);
      });
    });
  }
}
async function rp(t, e, n, r = !1) {
  const i = new UR(t);
  let s;
  try {
    s = await i.verify(n);
  } catch {
    s = await i.verify(n, !0);
  }
  const o = Object.assign({}, e);
  return r ? Object.assign(o, { captchaResp: s }) : Object.assign(o, { captchaResponse: s }), Object.assign(o, {
    clientType: "CLIENT_TYPE_WEB"
    /* RecaptchaClientType.WEB */
  }), Object.assign(o, {
    recaptchaVersion: "RECAPTCHA_ENTERPRISE"
    /* RecaptchaVersion.ENTERPRISE */
  }), o;
}
async function Pu(t, e, n, r) {
  var i;
  if (!((i = t._getRecaptchaConfig()) === null || i === void 0) && i.isProviderEnabled(
    "EMAIL_PASSWORD_PROVIDER"
    /* RecaptchaProvider.EMAIL_PASSWORD_PROVIDER */
  )) {
    const s = await rp(
      t,
      e,
      n,
      n === "getOobCode"
      /* RecaptchaActionName.GET_OOB_CODE */
    );
    return r(t, s);
  } else
    return r(t, e).catch(async (s) => {
      if (s.code === "auth/missing-recaptcha-token") {
        console.log(`${n} is protected by reCAPTCHA Enterprise for this project. Automatically triggering the reCAPTCHA flow and restarting the flow.`);
        const o = await rp(
          t,
          e,
          n,
          n === "getOobCode"
          /* RecaptchaActionName.GET_OOB_CODE */
        );
        return r(t, o);
      } else
        return Promise.reject(s);
    });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function jR(t, e) {
  const n = Ca(t, "auth");
  if (n.isInitialized()) {
    const i = n.getImmediate(), s = n.getOptions();
    if (Wo(s, e ?? {}))
      return i;
    $t(
      i,
      "already-initialized"
      /* AuthErrorCode.ALREADY_INITIALIZED */
    );
  }
  return n.initialize({ options: e });
}
function BR(t, e) {
  const n = (e == null ? void 0 : e.persistence) || [], r = (Array.isArray(n) ? n : [n]).map(wn);
  e != null && e.errorMap && t._updateErrorMap(e.errorMap), t._initializeWithPersistence(r, e == null ? void 0 : e.popupRedirectResolver);
}
function $R(t, e, n) {
  const r = fn(t);
  ne(
    r._canInitEmulator,
    r,
    "emulator-config-failed"
    /* AuthErrorCode.EMULATOR_CONFIG_FAILED */
  ), ne(
    /^https?:\/\//.test(e),
    r,
    "invalid-emulator-scheme"
    /* AuthErrorCode.INVALID_EMULATOR_SCHEME */
  );
  const i = !1, s = Ty(e), { host: o, port: c } = qR(e), u = c === null ? "" : `:${c}`;
  r.config.emulator = { url: `${s}//${o}${u}/` }, r.settings.appVerificationDisabledForTesting = !0, r.emulatorConfig = Object.freeze({
    host: o,
    port: c,
    protocol: s.replace(":", ""),
    options: Object.freeze({ disableWarnings: i })
  }), zR();
}
function Ty(t) {
  const e = t.indexOf(":");
  return e < 0 ? "" : t.substr(0, e + 1);
}
function qR(t) {
  const e = Ty(t), n = /(\/\/)?([^?#/]+)/.exec(t.substr(e.length));
  if (!n)
    return { host: "", port: null };
  const r = n[2].split("@").pop() || "", i = /^(\[[^\]]+\])(:|$)/.exec(r);
  if (i) {
    const s = i[1];
    return { host: s, port: ip(r.substr(s.length + 1)) };
  } else {
    const [s, o] = r.split(":");
    return { host: s, port: ip(o) };
  }
}
function ip(t) {
  if (!t)
    return null;
  const e = Number(t);
  return isNaN(e) ? null : e;
}
function zR() {
  function t() {
    const e = document.createElement("p"), n = e.style;
    e.innerText = "Running in emulator mode. Do not use with production credentials.", n.position = "fixed", n.width = "100%", n.backgroundColor = "#ffffff", n.border = ".1em solid #000000", n.color = "#b50000", n.bottom = "0px", n.left = "0px", n.margin = "0px", n.zIndex = "10000", n.textAlign = "center", e.classList.add("firebase-emulator-warning"), document.body.appendChild(e);
  }
  typeof console < "u" && typeof console.info == "function" && console.info("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials."), typeof window < "u" && typeof document < "u" && (document.readyState === "loading" ? window.addEventListener("DOMContentLoaded", t) : t());
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Ol {
  /** @internal */
  constructor(e, n) {
    this.providerId = e, this.signInMethod = n;
  }
  /**
   * Returns a JSON-serializable representation of this object.
   *
   * @returns a JSON-serializable representation of this object.
   */
  toJSON() {
    return _n("not implemented");
  }
  /** @internal */
  _getIdTokenResponse(e) {
    return _n("not implemented");
  }
  /** @internal */
  _linkToIdToken(e, n) {
    return _n("not implemented");
  }
  /** @internal */
  _getReauthenticationResolver(e) {
    return _n("not implemented");
  }
}
async function KR(t, e) {
  return hn(t, "POST", "/v1/accounts:signUp", e);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function HR(t, e) {
  return _i(t, "POST", "/v1/accounts:signInWithPassword", Rn(t, e));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function GR(t, e) {
  return _i(t, "POST", "/v1/accounts:signInWithEmailLink", Rn(t, e));
}
async function WR(t, e) {
  return _i(t, "POST", "/v1/accounts:signInWithEmailLink", Rn(t, e));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ds extends Ol {
  /** @internal */
  constructor(e, n, r, i = null) {
    super("password", r), this._email = e, this._password = n, this._tenantId = i;
  }
  /** @internal */
  static _fromEmailAndPassword(e, n) {
    return new ds(
      e,
      n,
      "password"
      /* SignInMethod.EMAIL_PASSWORD */
    );
  }
  /** @internal */
  static _fromEmailAndCode(e, n, r = null) {
    return new ds(e, n, "emailLink", r);
  }
  /** {@inheritdoc AuthCredential.toJSON} */
  toJSON() {
    return {
      email: this._email,
      password: this._password,
      signInMethod: this.signInMethod,
      tenantId: this._tenantId
    };
  }
  /**
   * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.
   *
   * @param json - Either `object` or the stringified representation of the object. When string is
   * provided, `JSON.parse` would be called first.
   *
   * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.
   */
  static fromJSON(e) {
    const n = typeof e == "string" ? JSON.parse(e) : e;
    if (n != null && n.email && (n != null && n.password)) {
      if (n.signInMethod === "password")
        return this._fromEmailAndPassword(n.email, n.password);
      if (n.signInMethod === "emailLink")
        return this._fromEmailAndCode(n.email, n.password, n.tenantId);
    }
    return null;
  }
  /** @internal */
  async _getIdTokenResponse(e) {
    switch (this.signInMethod) {
      case "password":
        const n = {
          returnSecureToken: !0,
          email: this._email,
          password: this._password,
          clientType: "CLIENT_TYPE_WEB"
          /* RecaptchaClientType.WEB */
        };
        return Pu(e, n, "signInWithPassword", HR);
      case "emailLink":
        return GR(e, {
          email: this._email,
          oobCode: this._password
        });
      default:
        $t(
          e,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
    }
  }
  /** @internal */
  async _linkToIdToken(e, n) {
    switch (this.signInMethod) {
      case "password":
        const r = {
          idToken: n,
          returnSecureToken: !0,
          email: this._email,
          password: this._password,
          clientType: "CLIENT_TYPE_WEB"
          /* RecaptchaClientType.WEB */
        };
        return Pu(e, r, "signUpPassword", KR);
      case "emailLink":
        return WR(e, {
          idToken: n,
          email: this._email,
          oobCode: this._password
        });
      default:
        $t(
          e,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
    }
  }
  /** @internal */
  _getReauthenticationResolver(e) {
    return this._getIdTokenResponse(e);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function Zr(t, e) {
  return _i(t, "POST", "/v1/accounts:signInWithIdp", Rn(t, e));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const QR = "http://localhost";
class Sr extends Ol {
  constructor() {
    super(...arguments), this.pendingToken = null;
  }
  /** @internal */
  static _fromParams(e) {
    const n = new Sr(e.providerId, e.signInMethod);
    return e.idToken || e.accessToken ? (e.idToken && (n.idToken = e.idToken), e.accessToken && (n.accessToken = e.accessToken), e.nonce && !e.pendingToken && (n.nonce = e.nonce), e.pendingToken && (n.pendingToken = e.pendingToken)) : e.oauthToken && e.oauthTokenSecret ? (n.accessToken = e.oauthToken, n.secret = e.oauthTokenSecret) : $t(
      "argument-error"
      /* AuthErrorCode.ARGUMENT_ERROR */
    ), n;
  }
  /** {@inheritdoc AuthCredential.toJSON}  */
  toJSON() {
    return {
      idToken: this.idToken,
      accessToken: this.accessToken,
      secret: this.secret,
      nonce: this.nonce,
      pendingToken: this.pendingToken,
      providerId: this.providerId,
      signInMethod: this.signInMethod
    };
  }
  /**
   * Static method to deserialize a JSON representation of an object into an
   * {@link  AuthCredential}.
   *
   * @param json - Input can be either Object or the stringified representation of the object.
   * When string is provided, JSON.parse would be called first.
   *
   * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.
   */
  static fromJSON(e) {
    const n = typeof e == "string" ? JSON.parse(e) : e, { providerId: r, signInMethod: i } = n, s = Il(n, ["providerId", "signInMethod"]);
    if (!r || !i)
      return null;
    const o = new Sr(r, i);
    return o.idToken = s.idToken || void 0, o.accessToken = s.accessToken || void 0, o.secret = s.secret, o.nonce = s.nonce, o.pendingToken = s.pendingToken || null, o;
  }
  /** @internal */
  _getIdTokenResponse(e) {
    const n = this.buildRequest();
    return Zr(e, n);
  }
  /** @internal */
  _linkToIdToken(e, n) {
    const r = this.buildRequest();
    return r.idToken = n, Zr(e, r);
  }
  /** @internal */
  _getReauthenticationResolver(e) {
    const n = this.buildRequest();
    return n.autoCreate = !1, Zr(e, n);
  }
  buildRequest() {
    const e = {
      requestUri: QR,
      returnSecureToken: !0
    };
    if (this.pendingToken)
      e.pendingToken = this.pendingToken;
    else {
      const n = {};
      this.idToken && (n.id_token = this.idToken), this.accessToken && (n.access_token = this.accessToken), this.secret && (n.oauth_token_secret = this.secret), n.providerId = this.providerId, this.nonce && !this.pendingToken && (n.nonce = this.nonce), e.postBody = yi(n);
    }
    return e;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function YR(t) {
  switch (t) {
    case "recoverEmail":
      return "RECOVER_EMAIL";
    case "resetPassword":
      return "PASSWORD_RESET";
    case "signIn":
      return "EMAIL_SIGNIN";
    case "verifyEmail":
      return "VERIFY_EMAIL";
    case "verifyAndChangeEmail":
      return "VERIFY_AND_CHANGE_EMAIL";
    case "revertSecondFactorAddition":
      return "REVERT_SECOND_FACTOR_ADDITION";
    default:
      return null;
  }
}
function JR(t) {
  const e = Hi(Gi(t)).link, n = e ? Hi(Gi(e)).deep_link_id : null, r = Hi(Gi(t)).deep_link_id;
  return (r ? Hi(Gi(r)).link : null) || r || n || e || t;
}
class Nl {
  /**
   * @param actionLink - The link from which to extract the URL.
   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.
   *
   * @internal
   */
  constructor(e) {
    var n, r, i, s, o, c;
    const u = Hi(Gi(e)), l = (n = u.apiKey) !== null && n !== void 0 ? n : null, f = (r = u.oobCode) !== null && r !== void 0 ? r : null, h = YR((i = u.mode) !== null && i !== void 0 ? i : null);
    ne(
      l && f && h,
      "argument-error"
      /* AuthErrorCode.ARGUMENT_ERROR */
    ), this.apiKey = l, this.operation = h, this.code = f, this.continueUrl = (s = u.continueUrl) !== null && s !== void 0 ? s : null, this.languageCode = (o = u.languageCode) !== null && o !== void 0 ? o : null, this.tenantId = (c = u.tenantId) !== null && c !== void 0 ? c : null;
  }
  /**
   * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,
   * otherwise returns null.
   *
   * @param link  - The email action link string.
   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.
   *
   * @public
   */
  static parseLink(e) {
    const n = JR(e);
    try {
      return new Nl(n);
    } catch {
      return null;
    }
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class vi {
  constructor() {
    this.providerId = vi.PROVIDER_ID;
  }
  /**
   * Initialize an {@link AuthCredential} using an email and password.
   *
   * @example
   * ```javascript
   * const authCredential = EmailAuthProvider.credential(email, password);
   * const userCredential = await signInWithCredential(auth, authCredential);
   * ```
   *
   * @example
   * ```javascript
   * const userCredential = await signInWithEmailAndPassword(auth, email, password);
   * ```
   *
   * @param email - Email address.
   * @param password - User account password.
   * @returns The auth provider credential.
   */
  static credential(e, n) {
    return ds._fromEmailAndPassword(e, n);
  }
  /**
   * Initialize an {@link AuthCredential} using an email and an email link after a sign in with
   * email link operation.
   *
   * @example
   * ```javascript
   * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);
   * const userCredential = await signInWithCredential(auth, authCredential);
   * ```
   *
   * @example
   * ```javascript
   * await sendSignInLinkToEmail(auth, email);
   * // Obtain emailLink from user.
   * const userCredential = await signInWithEmailLink(auth, email, emailLink);
   * ```
   *
   * @param auth - The {@link Auth} instance used to verify the link.
   * @param email - Email address.
   * @param emailLink - Sign-in email link.
   * @returns - The auth provider credential.
   */
  static credentialWithLink(e, n) {
    const r = Nl.parseLink(n);
    return ne(
      r,
      "argument-error"
      /* AuthErrorCode.ARGUMENT_ERROR */
    ), ds._fromEmailAndCode(e, r.code, r.tenantId);
  }
}
vi.PROVIDER_ID = "password";
vi.EMAIL_PASSWORD_SIGN_IN_METHOD = "password";
vi.EMAIL_LINK_SIGN_IN_METHOD = "emailLink";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Dl {
  /**
   * Constructor for generic OAuth providers.
   *
   * @param providerId - Provider for which credentials should be generated.
   */
  constructor(e) {
    this.providerId = e, this.defaultLanguageCode = null, this.customParameters = {};
  }
  /**
   * Set the language gode.
   *
   * @param languageCode - language code
   */
  setDefaultLanguage(e) {
    this.defaultLanguageCode = e;
  }
  /**
   * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in
   * operations.
   *
   * @remarks
   * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,
   * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.
   *
   * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.
   */
  setCustomParameters(e) {
    return this.customParameters = e, this;
  }
  /**
   * Retrieve the current list of {@link CustomParameters}.
   */
  getCustomParameters() {
    return this.customParameters;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Os extends Dl {
  constructor() {
    super(...arguments), this.scopes = [];
  }
  /**
   * Add an OAuth scope to the credential.
   *
   * @param scope - Provider OAuth scope to add.
   */
  addScope(e) {
    return this.scopes.includes(e) || this.scopes.push(e), this;
  }
  /**
   * Retrieve the current list of OAuth scopes.
   */
  getScopes() {
    return [...this.scopes];
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Mn extends Os {
  constructor() {
    super(
      "facebook.com"
      /* ProviderId.FACEBOOK */
    );
  }
  /**
   * Creates a credential for Facebook.
   *
   * @example
   * ```javascript
   * // `event` from the Facebook auth.authResponseChange callback.
   * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);
   * const result = await signInWithCredential(credential);
   * ```
   *
   * @param accessToken - Facebook access token.
   */
  static credential(e) {
    return Sr._fromParams({
      providerId: Mn.PROVIDER_ID,
      signInMethod: Mn.FACEBOOK_SIGN_IN_METHOD,
      accessToken: e
    });
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromResult(e) {
    return Mn.credentialFromTaggedObject(e);
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
   * thrown during a sign-in, link, or reauthenticate operation.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromError(e) {
    return Mn.credentialFromTaggedObject(e.customData || {});
  }
  static credentialFromTaggedObject({ _tokenResponse: e }) {
    if (!e || !("oauthAccessToken" in e) || !e.oauthAccessToken)
      return null;
    try {
      return Mn.credential(e.oauthAccessToken);
    } catch {
      return null;
    }
  }
}
Mn.FACEBOOK_SIGN_IN_METHOD = "facebook.com";
Mn.PROVIDER_ID = "facebook.com";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Vn extends Os {
  constructor() {
    super(
      "google.com"
      /* ProviderId.GOOGLE */
    ), this.addScope("profile");
  }
  /**
   * Creates a credential for Google. At least one of ID token and access token is required.
   *
   * @example
   * ```javascript
   * // \`googleUser\` from the onsuccess Google Sign In callback.
   * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);
   * const result = await signInWithCredential(credential);
   * ```
   *
   * @param idToken - Google ID token.
   * @param accessToken - Google access token.
   */
  static credential(e, n) {
    return Sr._fromParams({
      providerId: Vn.PROVIDER_ID,
      signInMethod: Vn.GOOGLE_SIGN_IN_METHOD,
      idToken: e,
      accessToken: n
    });
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromResult(e) {
    return Vn.credentialFromTaggedObject(e);
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
   * thrown during a sign-in, link, or reauthenticate operation.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromError(e) {
    return Vn.credentialFromTaggedObject(e.customData || {});
  }
  static credentialFromTaggedObject({ _tokenResponse: e }) {
    if (!e)
      return null;
    const { oauthIdToken: n, oauthAccessToken: r } = e;
    if (!n && !r)
      return null;
    try {
      return Vn.credential(n, r);
    } catch {
      return null;
    }
  }
}
Vn.GOOGLE_SIGN_IN_METHOD = "google.com";
Vn.PROVIDER_ID = "google.com";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Fn extends Os {
  constructor() {
    super(
      "github.com"
      /* ProviderId.GITHUB */
    );
  }
  /**
   * Creates a credential for GitHub.
   *
   * @param accessToken - GitHub access token.
   */
  static credential(e) {
    return Sr._fromParams({
      providerId: Fn.PROVIDER_ID,
      signInMethod: Fn.GITHUB_SIGN_IN_METHOD,
      accessToken: e
    });
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromResult(e) {
    return Fn.credentialFromTaggedObject(e);
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
   * thrown during a sign-in, link, or reauthenticate operation.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromError(e) {
    return Fn.credentialFromTaggedObject(e.customData || {});
  }
  static credentialFromTaggedObject({ _tokenResponse: e }) {
    if (!e || !("oauthAccessToken" in e) || !e.oauthAccessToken)
      return null;
    try {
      return Fn.credential(e.oauthAccessToken);
    } catch {
      return null;
    }
  }
}
Fn.GITHUB_SIGN_IN_METHOD = "github.com";
Fn.PROVIDER_ID = "github.com";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Un extends Os {
  constructor() {
    super(
      "twitter.com"
      /* ProviderId.TWITTER */
    );
  }
  /**
   * Creates a credential for Twitter.
   *
   * @param token - Twitter access token.
   * @param secret - Twitter secret.
   */
  static credential(e, n) {
    return Sr._fromParams({
      providerId: Un.PROVIDER_ID,
      signInMethod: Un.TWITTER_SIGN_IN_METHOD,
      oauthToken: e,
      oauthTokenSecret: n
    });
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromResult(e) {
    return Un.credentialFromTaggedObject(e);
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
   * thrown during a sign-in, link, or reauthenticate operation.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromError(e) {
    return Un.credentialFromTaggedObject(e.customData || {});
  }
  static credentialFromTaggedObject({ _tokenResponse: e }) {
    if (!e)
      return null;
    const { oauthAccessToken: n, oauthTokenSecret: r } = e;
    if (!n || !r)
      return null;
    try {
      return Un.credential(n, r);
    } catch {
      return null;
    }
  }
}
Un.TWITTER_SIGN_IN_METHOD = "twitter.com";
Un.PROVIDER_ID = "twitter.com";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function XR(t, e) {
  return _i(t, "POST", "/v1/accounts:signUp", Rn(t, e));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Wn {
  constructor(e) {
    this.user = e.user, this.providerId = e.providerId, this._tokenResponse = e._tokenResponse, this.operationType = e.operationType;
  }
  static async _fromIdTokenResponse(e, n, r, i = !1) {
    const s = await vn._fromIdTokenResponse(e, r, i), o = sp(r);
    return new Wn({
      user: s,
      providerId: o,
      _tokenResponse: r,
      operationType: n
    });
  }
  static async _forOperation(e, n, r) {
    await e._updateTokensIfNecessary(
      r,
      /* reload */
      !0
    );
    const i = sp(r);
    return new Wn({
      user: e,
      providerId: i,
      _tokenResponse: r,
      operationType: n
    });
  }
}
function sp(t) {
  return t.providerId ? t.providerId : "phoneNumber" in t ? "phone" : null;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Xo extends ln {
  constructor(e, n, r, i) {
    var s;
    super(n.code, n.message), this.operationType = r, this.user = i, Object.setPrototypeOf(this, Xo.prototype), this.customData = {
      appName: e.name,
      tenantId: (s = e.tenantId) !== null && s !== void 0 ? s : void 0,
      _serverResponse: n.customData._serverResponse,
      operationType: r
    };
  }
  static _fromErrorAndOperation(e, n, r, i) {
    return new Xo(e, n, r, i);
  }
}
function Iy(t, e, n, r) {
  return (e === "reauthenticate" ? n._getReauthenticationResolver(t) : n._getIdTokenResponse(t)).catch((s) => {
    throw s.code === "auth/multi-factor-auth-required" ? Xo._fromErrorAndOperation(t, s, e, r) : s;
  });
}
async function ZR(t, e, n = !1) {
  const r = await oi(t, e._linkToIdToken(t.auth, await t.getIdToken()), n);
  return Wn._forOperation(t, "link", r);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function eC(t, e, n = !1) {
  const { auth: r } = t;
  if (Ut(r.app))
    return Promise.reject(rn(r));
  const i = "reauthenticate";
  try {
    const s = await oi(t, Iy(r, i, e, t), n);
    ne(
      s.idToken,
      r,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    );
    const o = Cl(s.idToken);
    ne(
      o,
      r,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    );
    const { sub: c } = o;
    return ne(
      t.uid === c,
      r,
      "user-mismatch"
      /* AuthErrorCode.USER_MISMATCH */
    ), Wn._forOperation(t, i, s);
  } catch (s) {
    throw (s == null ? void 0 : s.code) === "auth/user-not-found" && $t(
      r,
      "user-mismatch"
      /* AuthErrorCode.USER_MISMATCH */
    ), s;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function Sy(t, e, n = !1) {
  if (Ut(t.app))
    return Promise.reject(rn(t));
  const r = "signIn", i = await Iy(t, r, e), s = await Wn._fromIdTokenResponse(t, r, i);
  return n || await t._updateCurrentUser(s.user), s;
}
async function tC(t, e) {
  return Sy(fn(t), e);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function nC(t, e) {
  return _i(t, "POST", "/v1/accounts:signInWithCustomToken", Rn(t, e));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function sL(t, e) {
  if (Ut(t.app))
    return Promise.reject(rn(t));
  const n = fn(t), r = await nC(n, {
    token: e,
    returnSecureToken: !0
  }), i = await Wn._fromIdTokenResponse(n, "signIn", r);
  return await n._updateCurrentUser(i.user), i;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function Ay(t) {
  const e = fn(t);
  e._getPasswordPolicyInternal() && await e._updatePasswordPolicy();
}
async function oL(t, e, n) {
  if (Ut(t.app))
    return Promise.reject(rn(t));
  const r = fn(t), o = await Pu(r, {
    returnSecureToken: !0,
    email: e,
    password: n,
    clientType: "CLIENT_TYPE_WEB"
    /* RecaptchaClientType.WEB */
  }, "signUpPassword", XR).catch((u) => {
    throw u.code === "auth/password-does-not-meet-requirements" && Ay(t), u;
  }), c = await Wn._fromIdTokenResponse(r, "signIn", o);
  return await r._updateCurrentUser(c.user), c;
}
function aL(t, e, n) {
  return Ut(t.app) ? Promise.reject(rn(t)) : tC(Ue(t), vi.credential(e, n)).catch(async (r) => {
    throw r.code === "auth/password-does-not-meet-requirements" && Ay(t), r;
  });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function rC(t, e) {
  return hn(t, "POST", "/v1/accounts:update", e);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function iC(t, { displayName: e, photoURL: n }) {
  if (e === void 0 && n === void 0)
    return;
  const r = Ue(t), s = {
    idToken: await r.getIdToken(),
    displayName: e,
    photoUrl: n,
    returnSecureToken: !0
  }, o = await oi(r, rC(r.auth, s));
  r.displayName = o.displayName || null, r.photoURL = o.photoUrl || null;
  const c = r.providerData.find(
    ({ providerId: u }) => u === "password"
    /* ProviderId.PASSWORD */
  );
  c && (c.displayName = r.displayName, c.photoURL = r.photoURL), await r._updateTokensIfNecessary(o);
}
function sC(t, e, n, r) {
  return Ue(t).onIdTokenChanged(e, n, r);
}
function oC(t, e, n) {
  return Ue(t).beforeAuthStateChanged(e, n);
}
function aC(t, e, n, r) {
  return Ue(t).onAuthStateChanged(e, n, r);
}
function cL(t) {
  return Ue(t).signOut();
}
const Zo = "__sak";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Ry {
  constructor(e, n) {
    this.storageRetriever = e, this.type = n;
  }
  _isAvailable() {
    try {
      return this.storage ? (this.storage.setItem(Zo, "1"), this.storage.removeItem(Zo), Promise.resolve(!0)) : Promise.resolve(!1);
    } catch {
      return Promise.resolve(!1);
    }
  }
  _set(e, n) {
    return this.storage.setItem(e, JSON.stringify(n)), Promise.resolve();
  }
  _get(e) {
    const n = this.storage.getItem(e);
    return Promise.resolve(n ? JSON.parse(n) : null);
  }
  _remove(e) {
    return this.storage.removeItem(e), Promise.resolve();
  }
  get storage() {
    return this.storageRetriever();
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function cC() {
  const t = lt();
  return Pl(t) || Pa(t);
}
const uC = 1e3, lC = 10;
class Cy extends Ry {
  constructor() {
    super(
      () => window.localStorage,
      "LOCAL"
      /* PersistenceType.LOCAL */
    ), this.boundEventHandler = (e, n) => this.onStorageEvent(e, n), this.listeners = {}, this.localCache = {}, this.pollTimer = null, this.safariLocalStorageNotSynced = cC() && RR(), this.fallbackToPolling = wy(), this._shouldAllowMigration = !0;
  }
  forAllChangedKeys(e) {
    for (const n of Object.keys(this.listeners)) {
      const r = this.storage.getItem(n), i = this.localCache[n];
      r !== i && e(n, i, r);
    }
  }
  onStorageEvent(e, n = !1) {
    if (!e.key) {
      this.forAllChangedKeys((o, c, u) => {
        this.notifyListeners(o, u);
      });
      return;
    }
    const r = e.key;
    if (n ? this.detachListener() : this.stopPolling(), this.safariLocalStorageNotSynced) {
      const o = this.storage.getItem(r);
      if (e.newValue !== o)
        e.newValue !== null ? this.storage.setItem(r, e.newValue) : this.storage.removeItem(r);
      else if (this.localCache[r] === e.newValue && !n)
        return;
    }
    const i = () => {
      const o = this.storage.getItem(r);
      !n && this.localCache[r] === o || this.notifyListeners(r, o);
    }, s = this.storage.getItem(r);
    AR() && s !== e.newValue && e.newValue !== e.oldValue ? setTimeout(i, lC) : i();
  }
  notifyListeners(e, n) {
    this.localCache[e] = n;
    const r = this.listeners[e];
    if (r)
      for (const i of Array.from(r))
        i(n && JSON.parse(n));
  }
  startPolling() {
    this.stopPolling(), this.pollTimer = setInterval(() => {
      this.forAllChangedKeys((e, n, r) => {
        this.onStorageEvent(
          new StorageEvent("storage", {
            key: e,
            oldValue: n,
            newValue: r
          }),
          /* poll */
          !0
        );
      });
    }, uC);
  }
  stopPolling() {
    this.pollTimer && (clearInterval(this.pollTimer), this.pollTimer = null);
  }
  attachListener() {
    window.addEventListener("storage", this.boundEventHandler);
  }
  detachListener() {
    window.removeEventListener("storage", this.boundEventHandler);
  }
  _addListener(e, n) {
    Object.keys(this.listeners).length === 0 && (this.fallbackToPolling ? this.startPolling() : this.attachListener()), this.listeners[e] || (this.listeners[e] = /* @__PURE__ */ new Set(), this.localCache[e] = this.storage.getItem(e)), this.listeners[e].add(n);
  }
  _removeListener(e, n) {
    this.listeners[e] && (this.listeners[e].delete(n), this.listeners[e].size === 0 && delete this.listeners[e]), Object.keys(this.listeners).length === 0 && (this.detachListener(), this.stopPolling());
  }
  // Update local cache on base operations:
  async _set(e, n) {
    await super._set(e, n), this.localCache[e] = JSON.stringify(n);
  }
  async _get(e) {
    const n = await super._get(e);
    return this.localCache[e] = JSON.stringify(n), n;
  }
  async _remove(e) {
    await super._remove(e), delete this.localCache[e];
  }
}
Cy.type = "LOCAL";
const hC = Cy;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Py extends Ry {
  constructor() {
    super(
      () => window.sessionStorage,
      "SESSION"
      /* PersistenceType.SESSION */
    );
  }
  _addListener(e, n) {
  }
  _removeListener(e, n) {
  }
}
Py.type = "SESSION";
const ky = Py;
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function fC(t) {
  return Promise.all(t.map(async (e) => {
    try {
      return {
        fulfilled: !0,
        value: await e
      };
    } catch (n) {
      return {
        fulfilled: !1,
        reason: n
      };
    }
  }));
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ka {
  constructor(e) {
    this.eventTarget = e, this.handlersMap = {}, this.boundEventHandler = this.handleEvent.bind(this);
  }
  /**
   * Obtain an instance of a Receiver for a given event target, if none exists it will be created.
   *
   * @param eventTarget - An event target (such as window or self) through which the underlying
   * messages will be received.
   */
  static _getInstance(e) {
    const n = this.receivers.find((i) => i.isListeningto(e));
    if (n)
      return n;
    const r = new ka(e);
    return this.receivers.push(r), r;
  }
  isListeningto(e) {
    return this.eventTarget === e;
  }
  /**
   * Fans out a MessageEvent to the appropriate listeners.
   *
   * @remarks
   * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have
   * finished processing.
   *
   * @param event - The MessageEvent.
   *
   */
  async handleEvent(e) {
    const n = e, { eventId: r, eventType: i, data: s } = n.data, o = this.handlersMap[i];
    if (!(o != null && o.size))
      return;
    n.ports[0].postMessage({
      status: "ack",
      eventId: r,
      eventType: i
    });
    const c = Array.from(o).map(async (l) => l(n.origin, s)), u = await fC(c);
    n.ports[0].postMessage({
      status: "done",
      eventId: r,
      eventType: i,
      response: u
    });
  }
  /**
   * Subscribe an event handler for a particular event.
   *
   * @param eventType - Event name to subscribe to.
   * @param eventHandler - The event handler which should receive the events.
   *
   */
  _subscribe(e, n) {
    Object.keys(this.handlersMap).length === 0 && this.eventTarget.addEventListener("message", this.boundEventHandler), this.handlersMap[e] || (this.handlersMap[e] = /* @__PURE__ */ new Set()), this.handlersMap[e].add(n);
  }
  /**
   * Unsubscribe an event handler from a particular event.
   *
   * @param eventType - Event name to unsubscribe from.
   * @param eventHandler - Optional event handler, if none provided, unsubscribe all handlers on this event.
   *
   */
  _unsubscribe(e, n) {
    this.handlersMap[e] && n && this.handlersMap[e].delete(n), (!n || this.handlersMap[e].size === 0) && delete this.handlersMap[e], Object.keys(this.handlersMap).length === 0 && this.eventTarget.removeEventListener("message", this.boundEventHandler);
  }
}
ka.receivers = [];
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function xl(t = "", e = 10) {
  let n = "";
  for (let r = 0; r < e; r++)
    n += Math.floor(Math.random() * 10);
  return t + n;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class dC {
  constructor(e) {
    this.target = e, this.handlers = /* @__PURE__ */ new Set();
  }
  /**
   * Unsubscribe the handler and remove it from our tracking Set.
   *
   * @param handler - The handler to unsubscribe.
   */
  removeMessageHandler(e) {
    e.messageChannel && (e.messageChannel.port1.removeEventListener("message", e.onMessage), e.messageChannel.port1.close()), this.handlers.delete(e);
  }
  /**
   * Send a message to the Receiver located at {@link target}.
   *
   * @remarks
   * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the
   * receiver has had a chance to fully process the event.
   *
   * @param eventType - Type of event to send.
   * @param data - The payload of the event.
   * @param timeout - Timeout for waiting on an ACK from the receiver.
   *
   * @returns An array of settled promises from all the handlers that were listening on the receiver.
   */
  async _send(e, n, r = 50) {
    const i = typeof MessageChannel < "u" ? new MessageChannel() : null;
    if (!i)
      throw new Error(
        "connection_unavailable"
        /* _MessageError.CONNECTION_UNAVAILABLE */
      );
    let s, o;
    return new Promise((c, u) => {
      const l = xl("", 20);
      i.port1.start();
      const f = setTimeout(() => {
        u(new Error(
          "unsupported_event"
          /* _MessageError.UNSUPPORTED_EVENT */
        ));
      }, r);
      o = {
        messageChannel: i,
        onMessage(h) {
          const _ = h;
          if (_.data.eventId === l)
            switch (_.data.status) {
              case "ack":
                clearTimeout(f), s = setTimeout(
                  () => {
                    u(new Error(
                      "timeout"
                      /* _MessageError.TIMEOUT */
                    ));
                  },
                  3e3
                  /* _TimeoutDuration.COMPLETION */
                );
                break;
              case "done":
                clearTimeout(s), c(_.data.response);
                break;
              default:
                clearTimeout(f), clearTimeout(s), u(new Error(
                  "invalid_response"
                  /* _MessageError.INVALID_RESPONSE */
                ));
                break;
            }
        }
      }, this.handlers.add(o), i.port1.addEventListener("message", o.onMessage), this.target.postMessage({
        eventType: e,
        eventId: l,
        data: n
      }, [i.port2]);
    }).finally(() => {
      o && this.removeMessageHandler(o);
    });
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Qe() {
  return window;
}
function pC(t) {
  Qe().location.href = t;
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Ll() {
  return typeof Qe().WorkerGlobalScope < "u" && typeof Qe().importScripts == "function";
}
async function mC() {
  if (!(navigator != null && navigator.serviceWorker))
    return null;
  try {
    return (await navigator.serviceWorker.ready).active;
  } catch {
    return null;
  }
}
function gC() {
  var t;
  return ((t = navigator == null ? void 0 : navigator.serviceWorker) === null || t === void 0 ? void 0 : t.controller) || null;
}
function yC() {
  return Ll() ? self : null;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Oy = "firebaseLocalStorageDb", _C = 1, ea = "firebaseLocalStorage", Ny = "fbase_key";
class Ns {
  constructor(e) {
    this.request = e;
  }
  toPromise() {
    return new Promise((e, n) => {
      this.request.addEventListener("success", () => {
        e(this.request.result);
      }), this.request.addEventListener("error", () => {
        n(this.request.error);
      });
    });
  }
}
function Oa(t, e) {
  return t.transaction([ea], e ? "readwrite" : "readonly").objectStore(ea);
}
function vC() {
  const t = indexedDB.deleteDatabase(Oy);
  return new Ns(t).toPromise();
}
function ku() {
  const t = indexedDB.open(Oy, _C);
  return new Promise((e, n) => {
    t.addEventListener("error", () => {
      n(t.error);
    }), t.addEventListener("upgradeneeded", () => {
      const r = t.result;
      try {
        r.createObjectStore(ea, { keyPath: Ny });
      } catch (i) {
        n(i);
      }
    }), t.addEventListener("success", async () => {
      const r = t.result;
      r.objectStoreNames.contains(ea) ? e(r) : (r.close(), await vC(), e(await ku()));
    });
  });
}
async function op(t, e, n) {
  const r = Oa(t, !0).put({
    [Ny]: e,
    value: n
  });
  return new Ns(r).toPromise();
}
async function wC(t, e) {
  const n = Oa(t, !1).get(e), r = await new Ns(n).toPromise();
  return r === void 0 ? null : r.value;
}
function ap(t, e) {
  const n = Oa(t, !0).delete(e);
  return new Ns(n).toPromise();
}
const EC = 800, bC = 3;
class Dy {
  constructor() {
    this.type = "LOCAL", this._shouldAllowMigration = !0, this.listeners = {}, this.localCache = {}, this.pollTimer = null, this.pendingWrites = 0, this.receiver = null, this.sender = null, this.serviceWorkerReceiverAvailable = !1, this.activeServiceWorker = null, this._workerInitializationPromise = this.initializeServiceWorkerMessaging().then(() => {
    }, () => {
    });
  }
  async _openDb() {
    return this.db ? this.db : (this.db = await ku(), this.db);
  }
  async _withRetries(e) {
    let n = 0;
    for (; ; )
      try {
        const r = await this._openDb();
        return await e(r);
      } catch (r) {
        if (n++ > bC)
          throw r;
        this.db && (this.db.close(), this.db = void 0);
      }
  }
  /**
   * IndexedDB events do not propagate from the main window to the worker context.  We rely on a
   * postMessage interface to send these events to the worker ourselves.
   */
  async initializeServiceWorkerMessaging() {
    return Ll() ? this.initializeReceiver() : this.initializeSender();
  }
  /**
   * As the worker we should listen to events from the main window.
   */
  async initializeReceiver() {
    this.receiver = ka._getInstance(yC()), this.receiver._subscribe("keyChanged", async (e, n) => ({
      keyProcessed: (await this._poll()).includes(n.key)
    })), this.receiver._subscribe("ping", async (e, n) => [
      "keyChanged"
      /* _EventType.KEY_CHANGED */
    ]);
  }
  /**
   * As the main window, we should let the worker know when keys change (set and remove).
   *
   * @remarks
   * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}
   * may not resolve.
   */
  async initializeSender() {
    var e, n;
    if (this.activeServiceWorker = await mC(), !this.activeServiceWorker)
      return;
    this.sender = new dC(this.activeServiceWorker);
    const r = await this.sender._send(
      "ping",
      {},
      800
      /* _TimeoutDuration.LONG_ACK */
    );
    r && !((e = r[0]) === null || e === void 0) && e.fulfilled && !((n = r[0]) === null || n === void 0) && n.value.includes(
      "keyChanged"
      /* _EventType.KEY_CHANGED */
    ) && (this.serviceWorkerReceiverAvailable = !0);
  }
  /**
   * Let the worker know about a changed key, the exact key doesn't technically matter since the
   * worker will just trigger a full sync anyway.
   *
   * @remarks
   * For now, we only support one service worker per page.
   *
   * @param key - Storage key which changed.
   */
  async notifyServiceWorker(e) {
    if (!(!this.sender || !this.activeServiceWorker || gC() !== this.activeServiceWorker))
      try {
        await this.sender._send(
          "keyChanged",
          { key: e },
          // Use long timeout if receiver has previously responded to a ping from us.
          this.serviceWorkerReceiverAvailable ? 800 : 50
          /* _TimeoutDuration.ACK */
        );
      } catch {
      }
  }
  async _isAvailable() {
    try {
      if (!indexedDB)
        return !1;
      const e = await ku();
      return await op(e, Zo, "1"), await ap(e, Zo), !0;
    } catch {
    }
    return !1;
  }
  async _withPendingWrite(e) {
    this.pendingWrites++;
    try {
      await e();
    } finally {
      this.pendingWrites--;
    }
  }
  async _set(e, n) {
    return this._withPendingWrite(async () => (await this._withRetries((r) => op(r, e, n)), this.localCache[e] = n, this.notifyServiceWorker(e)));
  }
  async _get(e) {
    const n = await this._withRetries((r) => wC(r, e));
    return this.localCache[e] = n, n;
  }
  async _remove(e) {
    return this._withPendingWrite(async () => (await this._withRetries((n) => ap(n, e)), delete this.localCache[e], this.notifyServiceWorker(e)));
  }
  async _poll() {
    const e = await this._withRetries((i) => {
      const s = Oa(i, !1).getAll();
      return new Ns(s).toPromise();
    });
    if (!e)
      return [];
    if (this.pendingWrites !== 0)
      return [];
    const n = [], r = /* @__PURE__ */ new Set();
    if (e.length !== 0)
      for (const { fbase_key: i, value: s } of e)
        r.add(i), JSON.stringify(this.localCache[i]) !== JSON.stringify(s) && (this.notifyListeners(i, s), n.push(i));
    for (const i of Object.keys(this.localCache))
      this.localCache[i] && !r.has(i) && (this.notifyListeners(i, null), n.push(i));
    return n;
  }
  notifyListeners(e, n) {
    this.localCache[e] = n;
    const r = this.listeners[e];
    if (r)
      for (const i of Array.from(r))
        i(n);
  }
  startPolling() {
    this.stopPolling(), this.pollTimer = setInterval(async () => this._poll(), EC);
  }
  stopPolling() {
    this.pollTimer && (clearInterval(this.pollTimer), this.pollTimer = null);
  }
  _addListener(e, n) {
    Object.keys(this.listeners).length === 0 && this.startPolling(), this.listeners[e] || (this.listeners[e] = /* @__PURE__ */ new Set(), this._get(e)), this.listeners[e].add(n);
  }
  _removeListener(e, n) {
    this.listeners[e] && (this.listeners[e].delete(n), this.listeners[e].size === 0 && delete this.listeners[e]), Object.keys(this.listeners).length === 0 && this.stopPolling();
  }
}
Dy.type = "LOCAL";
const TC = Dy;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const IC = 500, SC = 6e4, mo = 1e12;
class AC {
  constructor(e) {
    this.auth = e, this.counter = mo, this._widgets = /* @__PURE__ */ new Map();
  }
  render(e, n) {
    const r = this.counter;
    return this._widgets.set(r, new RC(e, this.auth.name, n || {})), this.counter++, r;
  }
  reset(e) {
    var n;
    const r = e || mo;
    (n = this._widgets.get(r)) === null || n === void 0 || n.delete(), this._widgets.delete(r);
  }
  getResponse(e) {
    var n;
    const r = e || mo;
    return ((n = this._widgets.get(r)) === null || n === void 0 ? void 0 : n.getResponse()) || "";
  }
  async execute(e) {
    var n;
    const r = e || mo;
    return (n = this._widgets.get(r)) === null || n === void 0 || n.execute(), "";
  }
}
class RC {
  constructor(e, n, r) {
    this.params = r, this.timerId = null, this.deleted = !1, this.responseToken = null, this.clickHandler = () => {
      this.execute();
    };
    const i = typeof e == "string" ? document.getElementById(e) : e;
    ne(i, "argument-error", { appName: n }), this.container = i, this.isVisible = this.params.size !== "invisible", this.isVisible ? this.execute() : this.container.addEventListener("click", this.clickHandler);
  }
  getResponse() {
    return this.checkIfDeleted(), this.responseToken;
  }
  delete() {
    this.checkIfDeleted(), this.deleted = !0, this.timerId && (clearTimeout(this.timerId), this.timerId = null), this.container.removeEventListener("click", this.clickHandler);
  }
  execute() {
    this.checkIfDeleted(), !this.timerId && (this.timerId = window.setTimeout(() => {
      this.responseToken = CC(50);
      const { callback: e, "expired-callback": n } = this.params;
      if (e)
        try {
          e(this.responseToken);
        } catch {
        }
      this.timerId = window.setTimeout(() => {
        if (this.timerId = null, this.responseToken = null, n)
          try {
            n();
          } catch {
          }
        this.isVisible && this.execute();
      }, SC);
    }, IC));
  }
  checkIfDeleted() {
    if (this.deleted)
      throw new Error("reCAPTCHA mock was already deleted!");
  }
}
function CC(t) {
  const e = [], n = "1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
  for (let r = 0; r < t; r++)
    e.push(n.charAt(Math.floor(Math.random() * n.length)));
  return e.join("");
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Lc = by("rcb"), PC = new Ps(3e4, 6e4);
class kC {
  constructor() {
    var e;
    this.hostLanguage = "", this.counter = 0, this.librarySeparatelyLoaded = !!(!((e = Qe().grecaptcha) === null || e === void 0) && e.render);
  }
  load(e, n = "") {
    return ne(
      OC(n),
      e,
      "argument-error"
      /* AuthErrorCode.ARGUMENT_ERROR */
    ), this.shouldResolveImmediately(n) && Yd(Qe().grecaptcha) ? Promise.resolve(Qe().grecaptcha) : new Promise((r, i) => {
      const s = Qe().setTimeout(() => {
        i(kt(
          e,
          "network-request-failed"
          /* AuthErrorCode.NETWORK_REQUEST_FAILED */
        ));
      }, PC.get());
      Qe()[Lc] = () => {
        Qe().clearTimeout(s), delete Qe()[Lc];
        const c = Qe().grecaptcha;
        if (!c || !Yd(c)) {
          i(kt(
            e,
            "internal-error"
            /* AuthErrorCode.INTERNAL_ERROR */
          ));
          return;
        }
        const u = c.render;
        c.render = (l, f) => {
          const h = u(l, f);
          return this.counter++, h;
        }, this.hostLanguage = n, r(c);
      };
      const o = `${xR()}?${yi({
        onload: Lc,
        render: "explicit",
        hl: n
      })}`;
      kl(o).catch(() => {
        clearTimeout(s), i(kt(
          e,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        ));
      });
    });
  }
  clearedOneInstance() {
    this.counter--;
  }
  shouldResolveImmediately(e) {
    var n;
    return !!(!((n = Qe().grecaptcha) === null || n === void 0) && n.render) && (e === this.hostLanguage || this.counter > 0 || this.librarySeparatelyLoaded);
  }
}
function OC(t) {
  return t.length <= 6 && /^\s*[a-zA-Z0-9\-]*\s*$/.test(t);
}
class NC {
  async load(e) {
    return new AC(e);
  }
  clearedOneInstance() {
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const DC = "recaptcha", xC = {
  theme: "light",
  type: "image"
};
class LC {
  /**
   * @param authExtern - The corresponding Firebase {@link Auth} instance.
   *
   * @param containerOrId - The reCAPTCHA container parameter.
   *
   * @remarks
   * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a
   * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to
   * an element ID. The corresponding element must also must be in the DOM at the time of
   * initialization.
   *
   * @param parameters - The optional reCAPTCHA parameters.
   *
   * @remarks
   * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for
   * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will
   * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value
   * 'invisible'.
   */
  constructor(e, n, r = Object.assign({}, xC)) {
    this.parameters = r, this.type = DC, this.destroyed = !1, this.widgetId = null, this.tokenChangeListeners = /* @__PURE__ */ new Set(), this.renderPromise = null, this.recaptcha = null, this.auth = fn(e), this.isInvisible = this.parameters.size === "invisible", ne(
      typeof document < "u",
      this.auth,
      "operation-not-supported-in-this-environment"
      /* AuthErrorCode.OPERATION_NOT_SUPPORTED */
    );
    const i = typeof n == "string" ? document.getElementById(n) : n;
    ne(
      i,
      this.auth,
      "argument-error"
      /* AuthErrorCode.ARGUMENT_ERROR */
    ), this.container = i, this.parameters.callback = this.makeTokenCallback(this.parameters.callback), this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting ? new NC() : new kC(), this.validateStartingState();
  }
  /**
   * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.
   *
   * @returns A Promise for the reCAPTCHA token.
   */
  async verify() {
    this.assertNotDestroyed();
    const e = await this.render(), n = this.getAssertedRecaptcha(), r = n.getResponse(e);
    return r || new Promise((i) => {
      const s = (o) => {
        o && (this.tokenChangeListeners.delete(s), i(o));
      };
      this.tokenChangeListeners.add(s), this.isInvisible && n.execute(e);
    });
  }
  /**
   * Renders the reCAPTCHA widget on the page.
   *
   * @returns A Promise that resolves with the reCAPTCHA widget ID.
   */
  render() {
    try {
      this.assertNotDestroyed();
    } catch (e) {
      return Promise.reject(e);
    }
    return this.renderPromise ? this.renderPromise : (this.renderPromise = this.makeRenderPromise().catch((e) => {
      throw this.renderPromise = null, e;
    }), this.renderPromise);
  }
  /** @internal */
  _reset() {
    this.assertNotDestroyed(), this.widgetId !== null && this.getAssertedRecaptcha().reset(this.widgetId);
  }
  /**
   * Clears the reCAPTCHA widget from the page and destroys the instance.
   */
  clear() {
    this.assertNotDestroyed(), this.destroyed = !0, this._recaptchaLoader.clearedOneInstance(), this.isInvisible || this.container.childNodes.forEach((e) => {
      this.container.removeChild(e);
    });
  }
  validateStartingState() {
    ne(
      !this.parameters.sitekey,
      this.auth,
      "argument-error"
      /* AuthErrorCode.ARGUMENT_ERROR */
    ), ne(
      this.isInvisible || !this.container.hasChildNodes(),
      this.auth,
      "argument-error"
      /* AuthErrorCode.ARGUMENT_ERROR */
    ), ne(
      typeof document < "u",
      this.auth,
      "operation-not-supported-in-this-environment"
      /* AuthErrorCode.OPERATION_NOT_SUPPORTED */
    );
  }
  makeTokenCallback(e) {
    return (n) => {
      if (this.tokenChangeListeners.forEach((r) => r(n)), typeof e == "function")
        e(n);
      else if (typeof e == "string") {
        const r = Qe()[e];
        typeof r == "function" && r(n);
      }
    };
  }
  assertNotDestroyed() {
    ne(
      !this.destroyed,
      this.auth,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    );
  }
  async makeRenderPromise() {
    if (await this.init(), !this.widgetId) {
      let e = this.container;
      if (!this.isInvisible) {
        const n = document.createElement("div");
        e.appendChild(n), e = n;
      }
      this.widgetId = this.getAssertedRecaptcha().render(e, this.parameters);
    }
    return this.widgetId;
  }
  async init() {
    ne(
      ay() && !Ll(),
      this.auth,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), await MC(), this.recaptcha = await this._recaptchaLoader.load(this.auth, this.auth.languageCode || void 0);
    const e = await mR(this.auth);
    ne(
      e,
      this.auth,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), this.parameters.sitekey = e;
  }
  getAssertedRecaptcha() {
    return ne(
      this.recaptcha,
      this.auth,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), this.recaptcha;
  }
}
function MC() {
  let t = null;
  return new Promise((e) => {
    if (document.readyState === "complete") {
      e();
      return;
    }
    t = () => e(), window.addEventListener("load", t);
  }).catch((e) => {
    throw t && window.removeEventListener("load", t), e;
  });
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function xy(t, e) {
  return e ? wn(e) : (ne(
    t._popupRedirectResolver,
    t,
    "argument-error"
    /* AuthErrorCode.ARGUMENT_ERROR */
  ), t._popupRedirectResolver);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Ml extends Ol {
  constructor(e) {
    super(
      "custom",
      "custom"
      /* ProviderId.CUSTOM */
    ), this.params = e;
  }
  _getIdTokenResponse(e) {
    return Zr(e, this._buildIdpRequest());
  }
  _linkToIdToken(e, n) {
    return Zr(e, this._buildIdpRequest(n));
  }
  _getReauthenticationResolver(e) {
    return Zr(e, this._buildIdpRequest());
  }
  _buildIdpRequest(e) {
    const n = {
      requestUri: this.params.requestUri,
      sessionId: this.params.sessionId,
      postBody: this.params.postBody,
      tenantId: this.params.tenantId,
      pendingToken: this.params.pendingToken,
      returnSecureToken: !0,
      returnIdpCredential: !0
    };
    return e && (n.idToken = e), n;
  }
}
function VC(t) {
  return Sy(t.auth, new Ml(t), t.bypassAuthState);
}
function FC(t) {
  const { auth: e, user: n } = t;
  return ne(
    n,
    e,
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  ), eC(n, new Ml(t), t.bypassAuthState);
}
async function UC(t) {
  const { auth: e, user: n } = t;
  return ne(
    n,
    e,
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  ), ZR(n, new Ml(t), t.bypassAuthState);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Ly {
  constructor(e, n, r, i, s = !1) {
    this.auth = e, this.resolver = r, this.user = i, this.bypassAuthState = s, this.pendingPromise = null, this.eventManager = null, this.filter = Array.isArray(n) ? n : [n];
  }
  execute() {
    return new Promise(async (e, n) => {
      this.pendingPromise = { resolve: e, reject: n };
      try {
        this.eventManager = await this.resolver._initialize(this.auth), await this.onExecution(), this.eventManager.registerConsumer(this);
      } catch (r) {
        this.reject(r);
      }
    });
  }
  async onAuthEvent(e) {
    const { urlResponse: n, sessionId: r, postBody: i, tenantId: s, error: o, type: c } = e;
    if (o) {
      this.reject(o);
      return;
    }
    const u = {
      auth: this.auth,
      requestUri: n,
      sessionId: r,
      tenantId: s || void 0,
      postBody: i || void 0,
      user: this.user,
      bypassAuthState: this.bypassAuthState
    };
    try {
      this.resolve(await this.getIdpTask(c)(u));
    } catch (l) {
      this.reject(l);
    }
  }
  onError(e) {
    this.reject(e);
  }
  getIdpTask(e) {
    switch (e) {
      case "signInViaPopup":
      case "signInViaRedirect":
        return VC;
      case "linkViaPopup":
      case "linkViaRedirect":
        return UC;
      case "reauthViaPopup":
      case "reauthViaRedirect":
        return FC;
      default:
        $t(
          this.auth,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
    }
  }
  resolve(e) {
    In(this.pendingPromise, "Pending promise was never set"), this.pendingPromise.resolve(e), this.unregisterAndCleanUp();
  }
  reject(e) {
    In(this.pendingPromise, "Pending promise was never set"), this.pendingPromise.reject(e), this.unregisterAndCleanUp();
  }
  unregisterAndCleanUp() {
    this.eventManager && this.eventManager.unregisterConsumer(this), this.pendingPromise = null, this.cleanUp();
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const jC = new Ps(2e3, 1e4);
async function uL(t, e, n) {
  if (Ut(t.app))
    return Promise.reject(kt(
      t,
      "operation-not-supported-in-this-environment"
      /* AuthErrorCode.OPERATION_NOT_SUPPORTED */
    ));
  const r = fn(t);
  aR(t, e, Dl);
  const i = xy(r, n);
  return new hr(r, "signInViaPopup", e, i).executeNotNull();
}
class hr extends Ly {
  constructor(e, n, r, i, s) {
    super(e, n, i, s), this.provider = r, this.authWindow = null, this.pollId = null, hr.currentPopupAction && hr.currentPopupAction.cancel(), hr.currentPopupAction = this;
  }
  async executeNotNull() {
    const e = await this.execute();
    return ne(
      e,
      this.auth,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), e;
  }
  async onExecution() {
    In(this.filter.length === 1, "Popup operations only handle one event");
    const e = xl();
    this.authWindow = await this.resolver._openPopup(
      this.auth,
      this.provider,
      this.filter[0],
      // There's always one, see constructor
      e
    ), this.authWindow.associatedEvent = e, this.resolver._originValidation(this.auth).catch((n) => {
      this.reject(n);
    }), this.resolver._isIframeWebStorageSupported(this.auth, (n) => {
      n || this.reject(kt(
        this.auth,
        "web-storage-unsupported"
        /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */
      ));
    }), this.pollUserCancellation();
  }
  get eventId() {
    var e;
    return ((e = this.authWindow) === null || e === void 0 ? void 0 : e.associatedEvent) || null;
  }
  cancel() {
    this.reject(kt(
      this.auth,
      "cancelled-popup-request"
      /* AuthErrorCode.EXPIRED_POPUP_REQUEST */
    ));
  }
  cleanUp() {
    this.authWindow && this.authWindow.close(), this.pollId && window.clearTimeout(this.pollId), this.authWindow = null, this.pollId = null, hr.currentPopupAction = null;
  }
  pollUserCancellation() {
    const e = () => {
      var n, r;
      if (!((r = (n = this.authWindow) === null || n === void 0 ? void 0 : n.window) === null || r === void 0) && r.closed) {
        this.pollId = window.setTimeout(
          () => {
            this.pollId = null, this.reject(kt(
              this.auth,
              "popup-closed-by-user"
              /* AuthErrorCode.POPUP_CLOSED_BY_USER */
            ));
          },
          8e3
          /* _Timeout.AUTH_EVENT */
        );
        return;
      }
      this.pollId = window.setTimeout(e, jC.get());
    };
    e();
  }
}
hr.currentPopupAction = null;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const BC = "pendingRedirect", Po = /* @__PURE__ */ new Map();
class $C extends Ly {
  constructor(e, n, r = !1) {
    super(e, [
      "signInViaRedirect",
      "linkViaRedirect",
      "reauthViaRedirect",
      "unknown"
      /* AuthEventType.UNKNOWN */
    ], n, void 0, r), this.eventId = null;
  }
  /**
   * Override the execute function; if we already have a redirect result, then
   * just return it.
   */
  async execute() {
    let e = Po.get(this.auth._key());
    if (!e) {
      try {
        const r = await qC(this.resolver, this.auth) ? await super.execute() : null;
        e = () => Promise.resolve(r);
      } catch (n) {
        e = () => Promise.reject(n);
      }
      Po.set(this.auth._key(), e);
    }
    return this.bypassAuthState || Po.set(this.auth._key(), () => Promise.resolve(null)), e();
  }
  async onAuthEvent(e) {
    if (e.type === "signInViaRedirect")
      return super.onAuthEvent(e);
    if (e.type === "unknown") {
      this.resolve(null);
      return;
    }
    if (e.eventId) {
      const n = await this.auth._redirectUserForId(e.eventId);
      if (n)
        return this.user = n, super.onAuthEvent(e);
      this.resolve(null);
    }
  }
  async onExecution() {
  }
  cleanUp() {
  }
}
async function qC(t, e) {
  const n = HC(e), r = KC(t);
  if (!await r._isAvailable())
    return !1;
  const i = await r._get(n) === "true";
  return await r._remove(n), i;
}
function zC(t, e) {
  Po.set(t._key(), e);
}
function KC(t) {
  return wn(t._redirectPersistence);
}
function HC(t) {
  return Co(BC, t.config.apiKey, t.name);
}
async function GC(t, e, n = !1) {
  if (Ut(t.app))
    return Promise.reject(rn(t));
  const r = fn(t), i = xy(r, e), o = await new $C(r, i, n).execute();
  return o && !n && (delete o.user._redirectEventId, await r._persistUserIfCurrent(o.user), await r._setRedirectUser(null, e)), o;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const WC = 10 * 60 * 1e3;
class QC {
  constructor(e) {
    this.auth = e, this.cachedEventUids = /* @__PURE__ */ new Set(), this.consumers = /* @__PURE__ */ new Set(), this.queuedRedirectEvent = null, this.hasHandledPotentialRedirect = !1, this.lastProcessedEventTime = Date.now();
  }
  registerConsumer(e) {
    this.consumers.add(e), this.queuedRedirectEvent && this.isEventForConsumer(this.queuedRedirectEvent, e) && (this.sendToConsumer(this.queuedRedirectEvent, e), this.saveEventToCache(this.queuedRedirectEvent), this.queuedRedirectEvent = null);
  }
  unregisterConsumer(e) {
    this.consumers.delete(e);
  }
  onEvent(e) {
    if (this.hasEventBeenHandled(e))
      return !1;
    let n = !1;
    return this.consumers.forEach((r) => {
      this.isEventForConsumer(e, r) && (n = !0, this.sendToConsumer(e, r), this.saveEventToCache(e));
    }), this.hasHandledPotentialRedirect || !YC(e) || (this.hasHandledPotentialRedirect = !0, n || (this.queuedRedirectEvent = e, n = !0)), n;
  }
  sendToConsumer(e, n) {
    var r;
    if (e.error && !My(e)) {
      const i = ((r = e.error.code) === null || r === void 0 ? void 0 : r.split("auth/")[1]) || "internal-error";
      n.onError(kt(this.auth, i));
    } else
      n.onAuthEvent(e);
  }
  isEventForConsumer(e, n) {
    const r = n.eventId === null || !!e.eventId && e.eventId === n.eventId;
    return n.filter.includes(e.type) && r;
  }
  hasEventBeenHandled(e) {
    return Date.now() - this.lastProcessedEventTime >= WC && this.cachedEventUids.clear(), this.cachedEventUids.has(cp(e));
  }
  saveEventToCache(e) {
    this.cachedEventUids.add(cp(e)), this.lastProcessedEventTime = Date.now();
  }
}
function cp(t) {
  return [t.type, t.eventId, t.sessionId, t.tenantId].filter((e) => e).join("-");
}
function My({ type: t, error: e }) {
  return t === "unknown" && (e == null ? void 0 : e.code) === "auth/no-auth-event";
}
function YC(t) {
  switch (t.type) {
    case "signInViaRedirect":
    case "linkViaRedirect":
    case "reauthViaRedirect":
      return !0;
    case "unknown":
      return My(t);
    default:
      return !1;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function JC(t, e = {}) {
  return hn(t, "GET", "/v1/projects", e);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const XC = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/, ZC = /^https?/;
async function eP(t) {
  if (t.config.emulator)
    return;
  const { authorizedDomains: e } = await JC(t);
  for (const n of e)
    try {
      if (tP(n))
        return;
    } catch {
    }
  $t(
    t,
    "unauthorized-domain"
    /* AuthErrorCode.INVALID_ORIGIN */
  );
}
function tP(t) {
  const e = Ru(), { protocol: n, hostname: r } = new URL(e);
  if (t.startsWith("chrome-extension://")) {
    const o = new URL(t);
    return o.hostname === "" && r === "" ? n === "chrome-extension:" && t.replace("chrome-extension://", "") === e.replace("chrome-extension://", "") : n === "chrome-extension:" && o.hostname === r;
  }
  if (!ZC.test(n))
    return !1;
  if (XC.test(t))
    return r === t;
  const i = t.replace(/\./g, "\\.");
  return new RegExp("^(.+\\." + i + "|" + i + ")$", "i").test(r);
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const nP = new Ps(3e4, 6e4);
function up() {
  const t = Qe().___jsl;
  if (t != null && t.H) {
    for (const e of Object.keys(t.H))
      if (t.H[e].r = t.H[e].r || [], t.H[e].L = t.H[e].L || [], t.H[e].r = [...t.H[e].L], t.CP)
        for (let n = 0; n < t.CP.length; n++)
          t.CP[n] = null;
  }
}
function rP(t) {
  return new Promise((e, n) => {
    var r, i, s;
    function o() {
      up(), gapi.load("gapi.iframes", {
        callback: () => {
          e(gapi.iframes.getContext());
        },
        ontimeout: () => {
          up(), n(kt(
            t,
            "network-request-failed"
            /* AuthErrorCode.NETWORK_REQUEST_FAILED */
          ));
        },
        timeout: nP.get()
      });
    }
    if (!((i = (r = Qe().gapi) === null || r === void 0 ? void 0 : r.iframes) === null || i === void 0) && i.Iframe)
      e(gapi.iframes.getContext());
    else if (!((s = Qe().gapi) === null || s === void 0) && s.load)
      o();
    else {
      const c = by("iframefcb");
      return Qe()[c] = () => {
        gapi.load ? o() : n(kt(
          t,
          "network-request-failed"
          /* AuthErrorCode.NETWORK_REQUEST_FAILED */
        ));
      }, kl(`${MR()}?onload=${c}`).catch((u) => n(u));
    }
  }).catch((e) => {
    throw ko = null, e;
  });
}
let ko = null;
function iP(t) {
  return ko = ko || rP(t), ko;
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const sP = new Ps(5e3, 15e3), oP = "__/auth/iframe", aP = "emulator/auth/iframe", cP = {
  style: {
    position: "absolute",
    top: "-100px",
    width: "1px",
    height: "1px"
  },
  "aria-hidden": "true",
  tabindex: "-1"
}, uP = /* @__PURE__ */ new Map([
  ["identitytoolkit.googleapis.com", "p"],
  ["staging-identitytoolkit.sandbox.googleapis.com", "s"],
  ["test-identitytoolkit.sandbox.googleapis.com", "t"]
  // test
]);
function lP(t) {
  const e = t.config;
  ne(
    e.authDomain,
    t,
    "auth-domain-config-required"
    /* AuthErrorCode.MISSING_AUTH_DOMAIN */
  );
  const n = e.emulator ? Rl(e, aP) : `https://${t.config.authDomain}/${oP}`, r = {
    apiKey: e.apiKey,
    appName: t.name,
    v: Dr
  }, i = uP.get(t.config.apiHost);
  i && (r.eid = i);
  const s = t._getFrameworks();
  return s.length && (r.fw = s.join(",")), `${n}?${yi(r).slice(1)}`;
}
async function hP(t) {
  const e = await iP(t), n = Qe().gapi;
  return ne(
    n,
    t,
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  ), e.open({
    where: document.body,
    url: lP(t),
    messageHandlersFilter: n.iframes.CROSS_ORIGIN_IFRAMES_FILTER,
    attributes: cP,
    dontclear: !0
  }, (r) => new Promise(async (i, s) => {
    await r.restyle({
      // Prevent iframe from closing on mouse out.
      setHideOnLeave: !1
    });
    const o = kt(
      t,
      "network-request-failed"
      /* AuthErrorCode.NETWORK_REQUEST_FAILED */
    ), c = Qe().setTimeout(() => {
      s(o);
    }, sP.get());
    function u() {
      Qe().clearTimeout(c), i(r);
    }
    r.ping(u).then(u, () => {
      s(o);
    });
  }));
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const fP = {
  location: "yes",
  resizable: "yes",
  statusbar: "yes",
  toolbar: "no"
}, dP = 500, pP = 600, mP = "_blank", gP = "http://localhost";
class lp {
  constructor(e) {
    this.window = e, this.associatedEvent = null;
  }
  close() {
    if (this.window)
      try {
        this.window.close();
      } catch {
      }
  }
}
function yP(t, e, n, r = dP, i = pP) {
  const s = Math.max((window.screen.availHeight - i) / 2, 0).toString(), o = Math.max((window.screen.availWidth - r) / 2, 0).toString();
  let c = "";
  const u = Object.assign(Object.assign({}, fP), {
    width: r.toString(),
    height: i.toString(),
    top: s,
    left: o
  }), l = lt().toLowerCase();
  n && (c = my(l) ? mP : n), py(l) && (e = e || gP, u.scrollbars = "yes");
  const f = Object.entries(u).reduce((_, [b, I]) => `${_}${b}=${I},`, "");
  if (SR(l) && c !== "_self")
    return _P(e || "", c), new lp(null);
  const h = window.open(e || "", c, f);
  ne(
    h,
    t,
    "popup-blocked"
    /* AuthErrorCode.POPUP_BLOCKED */
  );
  try {
    h.focus();
  } catch {
  }
  return new lp(h);
}
function _P(t, e) {
  const n = document.createElement("a");
  n.href = t, n.target = e;
  const r = document.createEvent("MouseEvent");
  r.initMouseEvent("click", !0, !0, window, 1, 0, 0, 0, 0, !1, !1, !1, !1, 1, null), n.dispatchEvent(r);
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const vP = "__/auth/handler", wP = "emulator/auth/handler", EP = encodeURIComponent("fac");
async function hp(t, e, n, r, i, s) {
  ne(
    t.config.authDomain,
    t,
    "auth-domain-config-required"
    /* AuthErrorCode.MISSING_AUTH_DOMAIN */
  ), ne(
    t.config.apiKey,
    t,
    "invalid-api-key"
    /* AuthErrorCode.INVALID_API_KEY */
  );
  const o = {
    apiKey: t.config.apiKey,
    appName: t.name,
    authType: n,
    redirectUrl: r,
    v: Dr,
    eventId: i
  };
  if (e instanceof Dl) {
    e.setDefaultLanguage(t.languageCode), o.providerId = e.providerId || "", GS(e.getCustomParameters()) || (o.customParameters = JSON.stringify(e.getCustomParameters()));
    for (const [f, h] of Object.entries({}))
      o[f] = h;
  }
  if (e instanceof Os) {
    const f = e.getScopes().filter((h) => h !== "");
    f.length > 0 && (o.scopes = f.join(","));
  }
  t.tenantId && (o.tid = t.tenantId);
  const c = o;
  for (const f of Object.keys(c))
    c[f] === void 0 && delete c[f];
  const u = await t._getAppCheckToken(), l = u ? `#${EP}=${encodeURIComponent(u)}` : "";
  return `${bP(t)}?${yi(c).slice(1)}${l}`;
}
function bP({ config: t }) {
  return t.emulator ? Rl(t, wP) : `https://${t.authDomain}/${vP}`;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Mc = "webStorageSupport";
class TP {
  constructor() {
    this.eventManagers = {}, this.iframes = {}, this.originValidationPromises = {}, this._redirectPersistence = ky, this._completeRedirectFn = GC, this._overrideRedirectResult = zC;
  }
  // Wrapping in async even though we don't await anywhere in order
  // to make sure errors are raised as promise rejections
  async _openPopup(e, n, r, i) {
    var s;
    In((s = this.eventManagers[e._key()]) === null || s === void 0 ? void 0 : s.manager, "_initialize() not called before _openPopup()");
    const o = await hp(e, n, r, Ru(), i);
    return yP(e, o, xl());
  }
  async _openRedirect(e, n, r, i) {
    await this._originValidation(e);
    const s = await hp(e, n, r, Ru(), i);
    return pC(s), new Promise(() => {
    });
  }
  _initialize(e) {
    const n = e._key();
    if (this.eventManagers[n]) {
      const { manager: i, promise: s } = this.eventManagers[n];
      return i ? Promise.resolve(i) : (In(s, "If manager is not set, promise should be"), s);
    }
    const r = this.initAndGetManager(e);
    return this.eventManagers[n] = { promise: r }, r.catch(() => {
      delete this.eventManagers[n];
    }), r;
  }
  async initAndGetManager(e) {
    const n = await hP(e), r = new QC(e);
    return n.register("authEvent", (i) => (ne(
      i == null ? void 0 : i.authEvent,
      e,
      "invalid-auth-event"
      /* AuthErrorCode.INVALID_AUTH_EVENT */
    ), {
      status: r.onEvent(i.authEvent) ? "ACK" : "ERROR"
      /* GapiOutcome.ERROR */
    }), gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER), this.eventManagers[e._key()] = { manager: r }, this.iframes[e._key()] = n, r;
  }
  _isIframeWebStorageSupported(e, n) {
    this.iframes[e._key()].send(Mc, { type: Mc }, (i) => {
      var s;
      const o = (s = i == null ? void 0 : i[0]) === null || s === void 0 ? void 0 : s[Mc];
      o !== void 0 && n(!!o), $t(
        e,
        "internal-error"
        /* AuthErrorCode.INTERNAL_ERROR */
      );
    }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
  }
  _originValidation(e) {
    const n = e._key();
    return this.originValidationPromises[n] || (this.originValidationPromises[n] = eP(e)), this.originValidationPromises[n];
  }
  get _shouldInitProactively() {
    return wy() || Pl() || Pa();
  }
}
const IP = TP;
var fp = "@firebase/auth", dp = "1.7.6";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class SP {
  constructor(e) {
    this.auth = e, this.internalListeners = /* @__PURE__ */ new Map();
  }
  getUid() {
    var e;
    return this.assertAuthConfigured(), ((e = this.auth.currentUser) === null || e === void 0 ? void 0 : e.uid) || null;
  }
  async getToken(e) {
    return this.assertAuthConfigured(), await this.auth._initializationPromise, this.auth.currentUser ? { accessToken: await this.auth.currentUser.getIdToken(e) } : null;
  }
  addAuthTokenListener(e) {
    if (this.assertAuthConfigured(), this.internalListeners.has(e))
      return;
    const n = this.auth.onIdTokenChanged((r) => {
      e((r == null ? void 0 : r.stsTokenManager.accessToken) || null);
    });
    this.internalListeners.set(e, n), this.updateProactiveRefresh();
  }
  removeAuthTokenListener(e) {
    this.assertAuthConfigured();
    const n = this.internalListeners.get(e);
    n && (this.internalListeners.delete(e), n(), this.updateProactiveRefresh());
  }
  assertAuthConfigured() {
    ne(
      this.auth._initializationPromise,
      "dependent-sdk-initialized-before-auth"
      /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */
    );
  }
  updateProactiveRefresh() {
    this.internalListeners.size > 0 ? this.auth._startProactiveRefresh() : this.auth._stopProactiveRefresh();
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function AP(t) {
  switch (t) {
    case "Node":
      return "node";
    case "ReactNative":
      return "rn";
    case "Worker":
      return "webworker";
    case "Cordova":
      return "cordova";
    case "WebExtension":
      return "web-extension";
    default:
      return;
  }
}
function RP(t) {
  Ir(new Gn(
    "auth",
    (e, { options: n }) => {
      const r = e.getProvider("app").getImmediate(), i = e.getProvider("heartbeat"), s = e.getProvider("app-check-internal"), { apiKey: o, authDomain: c } = r.options;
      ne(o && !o.includes(":"), "invalid-api-key", { appName: r.name });
      const u = {
        apiKey: o,
        authDomain: c,
        clientPlatform: t,
        apiHost: "identitytoolkit.googleapis.com",
        tokenApiHost: "securetoken.googleapis.com",
        apiScheme: "https",
        sdkClientVersion: Ey(t)
      }, l = new NR(r, i, s, u);
      return BR(l, n), l;
    },
    "PUBLIC"
    /* ComponentType.PUBLIC */
  ).setInstantiationMode(
    "EXPLICIT"
    /* InstantiationMode.EXPLICIT */
  ).setInstanceCreatedCallback((e, n, r) => {
    e.getProvider(
      "auth-internal"
      /* _ComponentName.AUTH_INTERNAL */
    ).initialize();
  })), Ir(new Gn(
    "auth-internal",
    (e) => {
      const n = fn(e.getProvider(
        "auth"
        /* _ComponentName.AUTH */
      ).getImmediate());
      return ((r) => new SP(r))(n);
    },
    "PRIVATE"
    /* ComponentType.PRIVATE */
  ).setInstantiationMode(
    "EXPLICIT"
    /* InstantiationMode.EXPLICIT */
  )), nn(fp, dp, AP(t)), nn(fp, dp, "esm2017");
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const CP = 5 * 60, PP = Xg("authIdTokenMaxAge") || CP;
let pp = null;
const kP = (t) => async (e) => {
  const n = e && await e.getIdTokenResult(), r = n && ((/* @__PURE__ */ new Date()).getTime() - Date.parse(n.issuedAtTime)) / 1e3;
  if (r && r > PP)
    return;
  const i = n == null ? void 0 : n.token;
  pp !== i && (pp = i, await fetch(t, {
    method: i ? "POST" : "DELETE",
    headers: i ? {
      Authorization: `Bearer ${i}`
    } : {}
  }));
};
function OP(t = Tl()) {
  const e = Ca(t, "auth");
  if (e.isInitialized())
    return e.getImmediate();
  const n = jR(t, {
    popupRedirectResolver: IP,
    persistence: [
      TC,
      hC,
      ky
    ]
  }), r = Xg("authTokenSyncURL");
  if (r && typeof isSecureContext == "boolean" && isSecureContext) {
    const s = new URL(r, location.origin);
    if (location.origin === s.origin) {
      const o = kP(s.toString());
      oC(n, o, () => o(n.currentUser)), sC(n, (c) => o(c));
    }
  }
  const i = Qg("auth");
  return i && $R(n, `http://${i}`), n;
}
function NP() {
  var t, e;
  return (e = (t = document.getElementsByTagName("head")) === null || t === void 0 ? void 0 : t[0]) !== null && e !== void 0 ? e : document;
}
DR({
  loadJS(t) {
    return new Promise((e, n) => {
      const r = document.createElement("script");
      r.setAttribute("src", t), r.onload = e, r.onerror = (i) => {
        const s = kt(
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        s.customData = i, n(s);
      }, r.type = "text/javascript", r.charset = "UTF-8", NP().appendChild(r);
    });
  },
  gapiScript: "https://apis.google.com/js/api.js",
  recaptchaV2Script: "https://www.google.com/recaptcha/api.js",
  recaptchaEnterpriseScript: "https://www.google.com/recaptcha/enterprise.js?render="
});
RP(
  "Browser"
  /* ClientPlatform.BROWSER */
);
var mp = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof globalThis < "u" ? globalThis : typeof self < "u" ? self : {};
/** @license
Copyright The Closure Library Authors.
SPDX-License-Identifier: Apache-2.0
*/
var gr, Vy;
(function() {
  var t;
  /** @license
  
   Copyright The Closure Library Authors.
   SPDX-License-Identifier: Apache-2.0
  */
  function e(R, T) {
    function A() {
    }
    A.prototype = T.prototype, R.D = T.prototype, R.prototype = new A(), R.prototype.constructor = R, R.C = function(O, N, D) {
      for (var k = Array(arguments.length - 2), Y = 2; Y < arguments.length; Y++) k[Y - 2] = arguments[Y];
      return T.prototype[N].apply(O, k);
    };
  }
  function n() {
    this.blockSize = -1;
  }
  function r() {
    this.blockSize = -1, this.blockSize = 64, this.g = Array(4), this.B = Array(this.blockSize), this.o = this.h = 0, this.s();
  }
  e(r, n), r.prototype.s = function() {
    this.g[0] = 1732584193, this.g[1] = 4023233417, this.g[2] = 2562383102, this.g[3] = 271733878, this.o = this.h = 0;
  };
  function i(R, T, A) {
    A || (A = 0);
    var O = Array(16);
    if (typeof T == "string") for (var N = 0; 16 > N; ++N) O[N] = T.charCodeAt(A++) | T.charCodeAt(A++) << 8 | T.charCodeAt(A++) << 16 | T.charCodeAt(A++) << 24;
    else for (N = 0; 16 > N; ++N) O[N] = T[A++] | T[A++] << 8 | T[A++] << 16 | T[A++] << 24;
    T = R.g[0], A = R.g[1], N = R.g[2];
    var D = R.g[3], k = T + (D ^ A & (N ^ D)) + O[0] + 3614090360 & 4294967295;
    T = A + (k << 7 & 4294967295 | k >>> 25), k = D + (N ^ T & (A ^ N)) + O[1] + 3905402710 & 4294967295, D = T + (k << 12 & 4294967295 | k >>> 20), k = N + (A ^ D & (T ^ A)) + O[2] + 606105819 & 4294967295, N = D + (k << 17 & 4294967295 | k >>> 15), k = A + (T ^ N & (D ^ T)) + O[3] + 3250441966 & 4294967295, A = N + (k << 22 & 4294967295 | k >>> 10), k = T + (D ^ A & (N ^ D)) + O[4] + 4118548399 & 4294967295, T = A + (k << 7 & 4294967295 | k >>> 25), k = D + (N ^ T & (A ^ N)) + O[5] + 1200080426 & 4294967295, D = T + (k << 12 & 4294967295 | k >>> 20), k = N + (A ^ D & (T ^ A)) + O[6] + 2821735955 & 4294967295, N = D + (k << 17 & 4294967295 | k >>> 15), k = A + (T ^ N & (D ^ T)) + O[7] + 4249261313 & 4294967295, A = N + (k << 22 & 4294967295 | k >>> 10), k = T + (D ^ A & (N ^ D)) + O[8] + 1770035416 & 4294967295, T = A + (k << 7 & 4294967295 | k >>> 25), k = D + (N ^ T & (A ^ N)) + O[9] + 2336552879 & 4294967295, D = T + (k << 12 & 4294967295 | k >>> 20), k = N + (A ^ D & (T ^ A)) + O[10] + 4294925233 & 4294967295, N = D + (k << 17 & 4294967295 | k >>> 15), k = A + (T ^ N & (D ^ T)) + O[11] + 2304563134 & 4294967295, A = N + (k << 22 & 4294967295 | k >>> 10), k = T + (D ^ A & (N ^ D)) + O[12] + 1804603682 & 4294967295, T = A + (k << 7 & 4294967295 | k >>> 25), k = D + (N ^ T & (A ^ N)) + O[13] + 4254626195 & 4294967295, D = T + (k << 12 & 4294967295 | k >>> 20), k = N + (A ^ D & (T ^ A)) + O[14] + 2792965006 & 4294967295, N = D + (k << 17 & 4294967295 | k >>> 15), k = A + (T ^ N & (D ^ T)) + O[15] + 1236535329 & 4294967295, A = N + (k << 22 & 4294967295 | k >>> 10), k = T + (N ^ D & (A ^ N)) + O[1] + 4129170786 & 4294967295, T = A + (k << 5 & 4294967295 | k >>> 27), k = D + (A ^ N & (T ^ A)) + O[6] + 3225465664 & 4294967295, D = T + (k << 9 & 4294967295 | k >>> 23), k = N + (T ^ A & (D ^ T)) + O[11] + 643717713 & 4294967295, N = D + (k << 14 & 4294967295 | k >>> 18), k = A + (D ^ T & (N ^ D)) + O[0] + 3921069994 & 4294967295, A = N + (k << 20 & 4294967295 | k >>> 12), k = T + (N ^ D & (A ^ N)) + O[5] + 3593408605 & 4294967295, T = A + (k << 5 & 4294967295 | k >>> 27), k = D + (A ^ N & (T ^ A)) + O[10] + 38016083 & 4294967295, D = T + (k << 9 & 4294967295 | k >>> 23), k = N + (T ^ A & (D ^ T)) + O[15] + 3634488961 & 4294967295, N = D + (k << 14 & 4294967295 | k >>> 18), k = A + (D ^ T & (N ^ D)) + O[4] + 3889429448 & 4294967295, A = N + (k << 20 & 4294967295 | k >>> 12), k = T + (N ^ D & (A ^ N)) + O[9] + 568446438 & 4294967295, T = A + (k << 5 & 4294967295 | k >>> 27), k = D + (A ^ N & (T ^ A)) + O[14] + 3275163606 & 4294967295, D = T + (k << 9 & 4294967295 | k >>> 23), k = N + (T ^ A & (D ^ T)) + O[3] + 4107603335 & 4294967295, N = D + (k << 14 & 4294967295 | k >>> 18), k = A + (D ^ T & (N ^ D)) + O[8] + 1163531501 & 4294967295, A = N + (k << 20 & 4294967295 | k >>> 12), k = T + (N ^ D & (A ^ N)) + O[13] + 2850285829 & 4294967295, T = A + (k << 5 & 4294967295 | k >>> 27), k = D + (A ^ N & (T ^ A)) + O[2] + 4243563512 & 4294967295, D = T + (k << 9 & 4294967295 | k >>> 23), k = N + (T ^ A & (D ^ T)) + O[7] + 1735328473 & 4294967295, N = D + (k << 14 & 4294967295 | k >>> 18), k = A + (D ^ T & (N ^ D)) + O[12] + 2368359562 & 4294967295, A = N + (k << 20 & 4294967295 | k >>> 12), k = T + (A ^ N ^ D) + O[5] + 4294588738 & 4294967295, T = A + (k << 4 & 4294967295 | k >>> 28), k = D + (T ^ A ^ N) + O[8] + 2272392833 & 4294967295, D = T + (k << 11 & 4294967295 | k >>> 21), k = N + (D ^ T ^ A) + O[11] + 1839030562 & 4294967295, N = D + (k << 16 & 4294967295 | k >>> 16), k = A + (N ^ D ^ T) + O[14] + 4259657740 & 4294967295, A = N + (k << 23 & 4294967295 | k >>> 9), k = T + (A ^ N ^ D) + O[1] + 2763975236 & 4294967295, T = A + (k << 4 & 4294967295 | k >>> 28), k = D + (T ^ A ^ N) + O[4] + 1272893353 & 4294967295, D = T + (k << 11 & 4294967295 | k >>> 21), k = N + (D ^ T ^ A) + O[7] + 4139469664 & 4294967295, N = D + (k << 16 & 4294967295 | k >>> 16), k = A + (N ^ D ^ T) + O[10] + 3200236656 & 4294967295, A = N + (k << 23 & 4294967295 | k >>> 9), k = T + (A ^ N ^ D) + O[13] + 681279174 & 4294967295, T = A + (k << 4 & 4294967295 | k >>> 28), k = D + (T ^ A ^ N) + O[0] + 3936430074 & 4294967295, D = T + (k << 11 & 4294967295 | k >>> 21), k = N + (D ^ T ^ A) + O[3] + 3572445317 & 4294967295, N = D + (k << 16 & 4294967295 | k >>> 16), k = A + (N ^ D ^ T) + O[6] + 76029189 & 4294967295, A = N + (k << 23 & 4294967295 | k >>> 9), k = T + (A ^ N ^ D) + O[9] + 3654602809 & 4294967295, T = A + (k << 4 & 4294967295 | k >>> 28), k = D + (T ^ A ^ N) + O[12] + 3873151461 & 4294967295, D = T + (k << 11 & 4294967295 | k >>> 21), k = N + (D ^ T ^ A) + O[15] + 530742520 & 4294967295, N = D + (k << 16 & 4294967295 | k >>> 16), k = A + (N ^ D ^ T) + O[2] + 3299628645 & 4294967295, A = N + (k << 23 & 4294967295 | k >>> 9), k = T + (N ^ (A | ~D)) + O[0] + 4096336452 & 4294967295, T = A + (k << 6 & 4294967295 | k >>> 26), k = D + (A ^ (T | ~N)) + O[7] + 1126891415 & 4294967295, D = T + (k << 10 & 4294967295 | k >>> 22), k = N + (T ^ (D | ~A)) + O[14] + 2878612391 & 4294967295, N = D + (k << 15 & 4294967295 | k >>> 17), k = A + (D ^ (N | ~T)) + O[5] + 4237533241 & 4294967295, A = N + (k << 21 & 4294967295 | k >>> 11), k = T + (N ^ (A | ~D)) + O[12] + 1700485571 & 4294967295, T = A + (k << 6 & 4294967295 | k >>> 26), k = D + (A ^ (T | ~N)) + O[3] + 2399980690 & 4294967295, D = T + (k << 10 & 4294967295 | k >>> 22), k = N + (T ^ (D | ~A)) + O[10] + 4293915773 & 4294967295, N = D + (k << 15 & 4294967295 | k >>> 17), k = A + (D ^ (N | ~T)) + O[1] + 2240044497 & 4294967295, A = N + (k << 21 & 4294967295 | k >>> 11), k = T + (N ^ (A | ~D)) + O[8] + 1873313359 & 4294967295, T = A + (k << 6 & 4294967295 | k >>> 26), k = D + (A ^ (T | ~N)) + O[15] + 4264355552 & 4294967295, D = T + (k << 10 & 4294967295 | k >>> 22), k = N + (T ^ (D | ~A)) + O[6] + 2734768916 & 4294967295, N = D + (k << 15 & 4294967295 | k >>> 17), k = A + (D ^ (N | ~T)) + O[13] + 1309151649 & 4294967295, A = N + (k << 21 & 4294967295 | k >>> 11), k = T + (N ^ (A | ~D)) + O[4] + 4149444226 & 4294967295, T = A + (k << 6 & 4294967295 | k >>> 26), k = D + (A ^ (T | ~N)) + O[11] + 3174756917 & 4294967295, D = T + (k << 10 & 4294967295 | k >>> 22), k = N + (T ^ (D | ~A)) + O[2] + 718787259 & 4294967295, N = D + (k << 15 & 4294967295 | k >>> 17), k = A + (D ^ (N | ~T)) + O[9] + 3951481745 & 4294967295, R.g[0] = R.g[0] + T & 4294967295, R.g[1] = R.g[1] + (N + (k << 21 & 4294967295 | k >>> 11)) & 4294967295, R.g[2] = R.g[2] + N & 4294967295, R.g[3] = R.g[3] + D & 4294967295;
  }
  r.prototype.u = function(R, T) {
    T === void 0 && (T = R.length);
    for (var A = T - this.blockSize, O = this.B, N = this.h, D = 0; D < T; ) {
      if (N == 0) for (; D <= A; ) i(this, R, D), D += this.blockSize;
      if (typeof R == "string") {
        for (; D < T; )
          if (O[N++] = R.charCodeAt(D++), N == this.blockSize) {
            i(this, O), N = 0;
            break;
          }
      } else for (; D < T; ) if (O[N++] = R[D++], N == this.blockSize) {
        i(this, O), N = 0;
        break;
      }
    }
    this.h = N, this.o += T;
  }, r.prototype.v = function() {
    var R = Array((56 > this.h ? this.blockSize : 2 * this.blockSize) - this.h);
    R[0] = 128;
    for (var T = 1; T < R.length - 8; ++T) R[T] = 0;
    var A = 8 * this.o;
    for (T = R.length - 8; T < R.length; ++T) R[T] = A & 255, A /= 256;
    for (this.u(R), R = Array(16), T = A = 0; 4 > T; ++T) for (var O = 0; 32 > O; O += 8) R[A++] = this.g[T] >>> O & 255;
    return R;
  };
  function s(R, T) {
    var A = c;
    return Object.prototype.hasOwnProperty.call(A, R) ? A[R] : A[R] = T(R);
  }
  function o(R, T) {
    this.h = T;
    for (var A = [], O = !0, N = R.length - 1; 0 <= N; N--) {
      var D = R[N] | 0;
      O && D == T || (A[N] = D, O = !1);
    }
    this.g = A;
  }
  var c = {};
  function u(R) {
    return -128 <= R && 128 > R ? s(R, function(T) {
      return new o([T | 0], 0 > T ? -1 : 0);
    }) : new o([R | 0], 0 > R ? -1 : 0);
  }
  function l(R) {
    if (isNaN(R) || !isFinite(R)) return h;
    if (0 > R) return m(l(-R));
    for (var T = [], A = 1, O = 0; R >= A; O++) T[O] = R / A | 0, A *= 4294967296;
    return new o(T, 0);
  }
  function f(R, T) {
    if (R.length == 0) throw Error("number format error: empty string");
    if (T = T || 10, 2 > T || 36 < T) throw Error("radix out of range: " + T);
    if (R.charAt(0) == "-") return m(f(R.substring(1), T));
    if (0 <= R.indexOf("-")) throw Error('number format error: interior "-" character');
    for (var A = l(Math.pow(T, 8)), O = h, N = 0; N < R.length; N += 8) {
      var D = Math.min(8, R.length - N), k = parseInt(R.substring(N, N + D), T);
      8 > D ? (D = l(Math.pow(T, D)), O = O.j(D).add(l(k))) : (O = O.j(A), O = O.add(l(k)));
    }
    return O;
  }
  var h = u(0), _ = u(1), b = u(16777216);
  t = o.prototype, t.m = function() {
    if (C(this)) return -m(this).m();
    for (var R = 0, T = 1, A = 0; A < this.g.length; A++) {
      var O = this.i(A);
      R += (0 <= O ? O : 4294967296 + O) * T, T *= 4294967296;
    }
    return R;
  }, t.toString = function(R) {
    if (R = R || 10, 2 > R || 36 < R) throw Error("radix out of range: " + R);
    if (I(this)) return "0";
    if (C(this)) return "-" + m(this).toString(R);
    for (var T = l(Math.pow(R, 6)), A = this, O = ""; ; ) {
      var N = g(A, T).g;
      A = y(A, N.j(T));
      var D = ((0 < A.g.length ? A.g[0] : A.h) >>> 0).toString(R);
      if (A = N, I(A)) return D + O;
      for (; 6 > D.length; ) D = "0" + D;
      O = D + O;
    }
  }, t.i = function(R) {
    return 0 > R ? 0 : R < this.g.length ? this.g[R] : this.h;
  };
  function I(R) {
    if (R.h != 0) return !1;
    for (var T = 0; T < R.g.length; T++) if (R.g[T] != 0) return !1;
    return !0;
  }
  function C(R) {
    return R.h == -1;
  }
  t.l = function(R) {
    return R = y(this, R), C(R) ? -1 : I(R) ? 0 : 1;
  };
  function m(R) {
    for (var T = R.g.length, A = [], O = 0; O < T; O++) A[O] = ~R.g[O];
    return new o(A, ~R.h).add(_);
  }
  t.abs = function() {
    return C(this) ? m(this) : this;
  }, t.add = function(R) {
    for (var T = Math.max(this.g.length, R.g.length), A = [], O = 0, N = 0; N <= T; N++) {
      var D = O + (this.i(N) & 65535) + (R.i(N) & 65535), k = (D >>> 16) + (this.i(N) >>> 16) + (R.i(N) >>> 16);
      O = k >>> 16, D &= 65535, k &= 65535, A[N] = k << 16 | D;
    }
    return new o(A, A[A.length - 1] & -2147483648 ? -1 : 0);
  };
  function y(R, T) {
    return R.add(m(T));
  }
  t.j = function(R) {
    if (I(this) || I(R)) return h;
    if (C(this)) return C(R) ? m(this).j(m(R)) : m(m(this).j(R));
    if (C(R)) return m(this.j(m(R)));
    if (0 > this.l(b) && 0 > R.l(b)) return l(this.m() * R.m());
    for (var T = this.g.length + R.g.length, A = [], O = 0; O < 2 * T; O++) A[O] = 0;
    for (O = 0; O < this.g.length; O++) for (var N = 0; N < R.g.length; N++) {
      var D = this.i(O) >>> 16, k = this.i(O) & 65535, Y = R.i(N) >>> 16, oe = R.i(N) & 65535;
      A[2 * O + 2 * N] += k * oe, E(A, 2 * O + 2 * N), A[2 * O + 2 * N + 1] += D * oe, E(A, 2 * O + 2 * N + 1), A[2 * O + 2 * N + 1] += k * Y, E(A, 2 * O + 2 * N + 1), A[2 * O + 2 * N + 2] += D * Y, E(A, 2 * O + 2 * N + 2);
    }
    for (O = 0; O < T; O++) A[O] = A[2 * O + 1] << 16 | A[2 * O];
    for (O = T; O < 2 * T; O++) A[O] = 0;
    return new o(A, 0);
  };
  function E(R, T) {
    for (; (R[T] & 65535) != R[T]; ) R[T + 1] += R[T] >>> 16, R[T] &= 65535, T++;
  }
  function p(R, T) {
    this.g = R, this.h = T;
  }
  function g(R, T) {
    if (I(T)) throw Error("division by zero");
    if (I(R)) return new p(h, h);
    if (C(R)) return T = g(m(R), T), new p(m(T.g), m(T.h));
    if (C(T)) return T = g(R, m(T)), new p(m(T.g), T.h);
    if (30 < R.g.length) {
      if (C(R) || C(T)) throw Error("slowDivide_ only works with positive integers.");
      for (var A = _, O = T; 0 >= O.l(R); ) A = w(A), O = w(O);
      var N = S(A, 1), D = S(O, 1);
      for (O = S(O, 2), A = S(A, 2); !I(O); ) {
        var k = D.add(O);
        0 >= k.l(R) && (N = N.add(A), D = k), O = S(O, 1), A = S(A, 1);
      }
      return T = y(R, N.j(T)), new p(N, T);
    }
    for (N = h; 0 <= R.l(T); ) {
      for (A = Math.max(1, Math.floor(R.m() / T.m())), O = Math.ceil(Math.log(A) / Math.LN2), O = 48 >= O ? 1 : Math.pow(2, O - 48), D = l(A), k = D.j(T); C(k) || 0 < k.l(R); ) A -= O, D = l(A), k = D.j(T);
      I(D) && (D = _), N = N.add(D), R = y(R, k);
    }
    return new p(N, R);
  }
  t.A = function(R) {
    return g(this, R).h;
  }, t.and = function(R) {
    for (var T = Math.max(this.g.length, R.g.length), A = [], O = 0; O < T; O++) A[O] = this.i(O) & R.i(O);
    return new o(A, this.h & R.h);
  }, t.or = function(R) {
    for (var T = Math.max(this.g.length, R.g.length), A = [], O = 0; O < T; O++) A[O] = this.i(O) | R.i(O);
    return new o(A, this.h | R.h);
  }, t.xor = function(R) {
    for (var T = Math.max(this.g.length, R.g.length), A = [], O = 0; O < T; O++) A[O] = this.i(O) ^ R.i(O);
    return new o(A, this.h ^ R.h);
  };
  function w(R) {
    for (var T = R.g.length + 1, A = [], O = 0; O < T; O++) A[O] = R.i(O) << 1 | R.i(O - 1) >>> 31;
    return new o(A, R.h);
  }
  function S(R, T) {
    var A = T >> 5;
    T %= 32;
    for (var O = R.g.length - A, N = [], D = 0; D < O; D++) N[D] = 0 < T ? R.i(D + A) >>> T | R.i(D + A + 1) << 32 - T : R.i(D + A);
    return new o(N, R.h);
  }
  r.prototype.digest = r.prototype.v, r.prototype.reset = r.prototype.s, r.prototype.update = r.prototype.u, Vy = r, o.prototype.add = o.prototype.add, o.prototype.multiply = o.prototype.j, o.prototype.modulo = o.prototype.A, o.prototype.compare = o.prototype.l, o.prototype.toNumber = o.prototype.m, o.prototype.toString = o.prototype.toString, o.prototype.getBits = o.prototype.i, o.fromNumber = l, o.fromString = f, gr = o;
}).apply(typeof mp < "u" ? mp : typeof self < "u" ? self : typeof window < "u" ? window : {});
var go = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof globalThis < "u" ? globalThis : typeof self < "u" ? self : {};
/** @license
Copyright The Closure Library Authors.
SPDX-License-Identifier: Apache-2.0
*/
var Fy, Uy, Wi, jy, Oo, Ou, By, $y, qy;
(function() {
  var t, e = typeof Object.defineProperties == "function" ? Object.defineProperty : function(a, d, v) {
    return a == Array.prototype || a == Object.prototype || (a[d] = v.value), a;
  };
  function n(a) {
    a = [typeof globalThis == "object" && globalThis, a, typeof window == "object" && window, typeof self == "object" && self, typeof go == "object" && go];
    for (var d = 0; d < a.length; ++d) {
      var v = a[d];
      if (v && v.Math == Math) return v;
    }
    throw Error("Cannot find global object");
  }
  var r = n(this);
  function i(a, d) {
    if (d) e: {
      var v = r;
      a = a.split(".");
      for (var P = 0; P < a.length - 1; P++) {
        var M = a[P];
        if (!(M in v)) break e;
        v = v[M];
      }
      a = a[a.length - 1], P = v[a], d = d(P), d != P && d != null && e(v, a, { configurable: !0, writable: !0, value: d });
    }
  }
  function s(a, d) {
    a instanceof String && (a += "");
    var v = 0, P = !1, M = { next: function() {
      if (!P && v < a.length) {
        var F = v++;
        return { value: d(F, a[F]), done: !1 };
      }
      return P = !0, { done: !0, value: void 0 };
    } };
    return M[Symbol.iterator] = function() {
      return M;
    }, M;
  }
  i("Array.prototype.values", function(a) {
    return a || function() {
      return s(this, function(d, v) {
        return v;
      });
    };
  });
  /** @license
  
   Copyright The Closure Library Authors.
   SPDX-License-Identifier: Apache-2.0
  */
  var o = o || {}, c = this || self;
  function u(a) {
    var d = typeof a;
    return d = d != "object" ? d : a ? Array.isArray(a) ? "array" : d : "null", d == "array" || d == "object" && typeof a.length == "number";
  }
  function l(a) {
    var d = typeof a;
    return d == "object" && a != null || d == "function";
  }
  function f(a, d, v) {
    return a.call.apply(a.bind, arguments);
  }
  function h(a, d, v) {
    if (!a) throw Error();
    if (2 < arguments.length) {
      var P = Array.prototype.slice.call(arguments, 2);
      return function() {
        var M = Array.prototype.slice.call(arguments);
        return Array.prototype.unshift.apply(M, P), a.apply(d, M);
      };
    }
    return function() {
      return a.apply(d, arguments);
    };
  }
  function _(a, d, v) {
    return _ = Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1 ? f : h, _.apply(null, arguments);
  }
  function b(a, d) {
    var v = Array.prototype.slice.call(arguments, 1);
    return function() {
      var P = v.slice();
      return P.push.apply(P, arguments), a.apply(this, P);
    };
  }
  function I(a, d) {
    function v() {
    }
    v.prototype = d.prototype, a.aa = d.prototype, a.prototype = new v(), a.prototype.constructor = a, a.Qb = function(P, M, F) {
      for (var W = Array(arguments.length - 2), Oe = 2; Oe < arguments.length; Oe++) W[Oe - 2] = arguments[Oe];
      return d.prototype[M].apply(P, W);
    };
  }
  function C(a) {
    const d = a.length;
    if (0 < d) {
      const v = Array(d);
      for (let P = 0; P < d; P++) v[P] = a[P];
      return v;
    }
    return [];
  }
  function m(a, d) {
    for (let v = 1; v < arguments.length; v++) {
      const P = arguments[v];
      if (u(P)) {
        const M = a.length || 0, F = P.length || 0;
        a.length = M + F;
        for (let W = 0; W < F; W++) a[M + W] = P[W];
      } else a.push(P);
    }
  }
  class y {
    constructor(d, v) {
      this.i = d, this.j = v, this.h = 0, this.g = null;
    }
    get() {
      let d;
      return 0 < this.h ? (this.h--, d = this.g, this.g = d.next, d.next = null) : d = this.i(), d;
    }
  }
  function E(a) {
    return /^[\s\xa0]*$/.test(a);
  }
  function p() {
    var a = c.navigator;
    return a && (a = a.userAgent) ? a : "";
  }
  function g(a) {
    return g[" "](a), a;
  }
  g[" "] = function() {
  };
  var w = p().indexOf("Gecko") != -1 && !(p().toLowerCase().indexOf("webkit") != -1 && p().indexOf("Edge") == -1) && !(p().indexOf("Trident") != -1 || p().indexOf("MSIE") != -1) && p().indexOf("Edge") == -1;
  function S(a, d, v) {
    for (const P in a) d.call(v, a[P], P, a);
  }
  function R(a, d) {
    for (const v in a) d.call(void 0, a[v], v, a);
  }
  function T(a) {
    const d = {};
    for (const v in a) d[v] = a[v];
    return d;
  }
  const A = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
  function O(a, d) {
    let v, P;
    for (let M = 1; M < arguments.length; M++) {
      P = arguments[M];
      for (v in P) a[v] = P[v];
      for (let F = 0; F < A.length; F++) v = A[F], Object.prototype.hasOwnProperty.call(P, v) && (a[v] = P[v]);
    }
  }
  function N(a) {
    var d = 1;
    a = a.split(":");
    const v = [];
    for (; 0 < d && a.length; ) v.push(a.shift()), d--;
    return a.length && v.push(a.join(":")), v;
  }
  function D(a) {
    c.setTimeout(() => {
      throw a;
    }, 0);
  }
  function k() {
    var a = L;
    let d = null;
    return a.g && (d = a.g, a.g = a.g.next, a.g || (a.h = null), d.next = null), d;
  }
  class Y {
    constructor() {
      this.h = this.g = null;
    }
    add(d, v) {
      const P = oe.get();
      P.set(d, v), this.h ? this.h.next = P : this.g = P, this.h = P;
    }
  }
  var oe = new y(() => new ue(), (a) => a.reset());
  class ue {
    constructor() {
      this.next = this.g = this.h = null;
    }
    set(d, v) {
      this.h = d, this.g = v, this.next = null;
    }
    reset() {
      this.next = this.g = this.h = null;
    }
  }
  let ae, x = !1, L = new Y(), B = () => {
    const a = c.Promise.resolve(void 0);
    ae = () => {
      a.then(U);
    };
  };
  var U = () => {
    for (var a; a = k(); ) {
      try {
        a.h.call(a.g);
      } catch (v) {
        D(v);
      }
      var d = oe;
      d.j(a), 100 > d.h && (d.h++, a.next = d.g, d.g = a);
    }
    x = !1;
  };
  function q() {
    this.s = this.s, this.C = this.C;
  }
  q.prototype.s = !1, q.prototype.ma = function() {
    this.s || (this.s = !0, this.N());
  }, q.prototype.N = function() {
    if (this.C) for (; this.C.length; ) this.C.shift()();
  };
  function H(a, d) {
    this.type = a, this.g = this.target = d, this.defaultPrevented = !1;
  }
  H.prototype.h = function() {
    this.defaultPrevented = !0;
  };
  var ie = function() {
    if (!c.addEventListener || !Object.defineProperty) return !1;
    var a = !1, d = Object.defineProperty({}, "passive", { get: function() {
      a = !0;
    } });
    try {
      const v = () => {
      };
      c.addEventListener("test", v, d), c.removeEventListener("test", v, d);
    } catch {
    }
    return a;
  }();
  function K(a, d) {
    if (H.call(this, a ? a.type : ""), this.relatedTarget = this.g = this.target = null, this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0, this.key = "", this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1, this.state = null, this.pointerId = 0, this.pointerType = "", this.i = null, a) {
      var v = this.type = a.type, P = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
      if (this.target = a.target || a.srcElement, this.g = d, d = a.relatedTarget) {
        if (w) {
          e: {
            try {
              g(d.nodeName);
              var M = !0;
              break e;
            } catch {
            }
            M = !1;
          }
          M || (d = null);
        }
      } else v == "mouseover" ? d = a.fromElement : v == "mouseout" && (d = a.toElement);
      this.relatedTarget = d, P ? (this.clientX = P.clientX !== void 0 ? P.clientX : P.pageX, this.clientY = P.clientY !== void 0 ? P.clientY : P.pageY, this.screenX = P.screenX || 0, this.screenY = P.screenY || 0) : (this.clientX = a.clientX !== void 0 ? a.clientX : a.pageX, this.clientY = a.clientY !== void 0 ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0), this.button = a.button, this.key = a.key || "", this.ctrlKey = a.ctrlKey, this.altKey = a.altKey, this.shiftKey = a.shiftKey, this.metaKey = a.metaKey, this.pointerId = a.pointerId || 0, this.pointerType = typeof a.pointerType == "string" ? a.pointerType : V[a.pointerType] || "", this.state = a.state, this.i = a, a.defaultPrevented && K.aa.h.call(this);
    }
  }
  I(K, H);
  var V = { 2: "touch", 3: "pen", 4: "mouse" };
  K.prototype.h = function() {
    K.aa.h.call(this);
    var a = this.i;
    a.preventDefault ? a.preventDefault() : a.returnValue = !1;
  };
  var j = "closure_listenable_" + (1e6 * Math.random() | 0), Q = 0;
  function Z(a, d, v, P, M) {
    this.listener = a, this.proxy = null, this.src = d, this.type = v, this.capture = !!P, this.ha = M, this.key = ++Q, this.da = this.fa = !1;
  }
  function te(a) {
    a.da = !0, a.listener = null, a.proxy = null, a.src = null, a.ha = null;
  }
  function ge(a) {
    this.src = a, this.g = {}, this.h = 0;
  }
  ge.prototype.add = function(a, d, v, P, M) {
    var F = a.toString();
    a = this.g[F], a || (a = this.g[F] = [], this.h++);
    var W = Te(a, d, P, M);
    return -1 < W ? (d = a[W], v || (d.fa = !1)) : (d = new Z(d, this.src, F, !!P, M), d.fa = v, a.push(d)), d;
  };
  function G(a, d) {
    var v = d.type;
    if (v in a.g) {
      var P = a.g[v], M = Array.prototype.indexOf.call(P, d, void 0), F;
      (F = 0 <= M) && Array.prototype.splice.call(P, M, 1), F && (te(d), a.g[v].length == 0 && (delete a.g[v], a.h--));
    }
  }
  function Te(a, d, v, P) {
    for (var M = 0; M < a.length; ++M) {
      var F = a[M];
      if (!F.da && F.listener == d && F.capture == !!v && F.ha == P) return M;
    }
    return -1;
  }
  var J = "closure_lm_" + (1e6 * Math.random() | 0), $e = {};
  function me(a, d, v, P, M) {
    if (Array.isArray(d)) {
      for (var F = 0; F < d.length; F++) me(a, d[F], v, P, M);
      return null;
    }
    return v = wh(v), a && a[j] ? a.K(d, v, l(P) ? !!P.capture : !!P, M) : ye(a, d, v, !1, P, M);
  }
  function ye(a, d, v, P, M, F) {
    if (!d) throw Error("Invalid event type");
    var W = l(M) ? !!M.capture : !!M, Oe = dn(a);
    if (Oe || (a[J] = Oe = new ge(a)), v = Oe.add(d, v, P, W, F), v.proxy) return v;
    if (P = Ie(), v.proxy = P, P.src = a, P.listener = v, a.addEventListener) ie || (M = W), M === void 0 && (M = !1), a.addEventListener(d.toString(), P, M);
    else if (a.attachEvent) a.attachEvent(qe(d.toString()), P);
    else if (a.addListener && a.removeListener) a.addListener(P);
    else throw Error("addEventListener and attachEvent are unavailable.");
    return v;
  }
  function Ie() {
    function a(v) {
      return d.call(a.src, a.listener, v);
    }
    const d = Si;
    return a;
  }
  function Ct(a, d, v, P, M) {
    if (Array.isArray(d)) for (var F = 0; F < d.length; F++) Ct(a, d[F], v, P, M);
    else P = l(P) ? !!P.capture : !!P, v = wh(v), a && a[j] ? (a = a.i, d = String(d).toString(), d in a.g && (F = a.g[d], v = Te(F, v, P, M), -1 < v && (te(F[v]), Array.prototype.splice.call(F, v, 1), F.length == 0 && (delete a.g[d], a.h--)))) : a && (a = dn(a)) && (d = a.g[d.toString()], a = -1, d && (a = Te(d, v, P, M)), (v = -1 < a ? d[a] : null) && ft(v));
  }
  function ft(a) {
    if (typeof a != "number" && a && !a.da) {
      var d = a.src;
      if (d && d[j]) G(d.i, a);
      else {
        var v = a.type, P = a.proxy;
        d.removeEventListener ? d.removeEventListener(v, P, a.capture) : d.detachEvent ? d.detachEvent(qe(v), P) : d.addListener && d.removeListener && d.removeListener(P), (v = dn(d)) ? (G(v, a), v.h == 0 && (v.src = null, d[J] = null)) : te(a);
      }
    }
  }
  function qe(a) {
    return a in $e ? $e[a] : $e[a] = "on" + a;
  }
  function Si(a, d) {
    if (a.da) a = !0;
    else {
      d = new K(d, this);
      var v = a.listener, P = a.ha || a.src;
      a.fa && ft(a), a = v.call(P, d);
    }
    return a;
  }
  function dn(a) {
    return a = a[J], a instanceof ge ? a : null;
  }
  var Ka = "__closure_events_fn_" + (1e9 * Math.random() >>> 0);
  function wh(a) {
    return typeof a == "function" ? a : (a[Ka] || (a[Ka] = function(d) {
      return a.handleEvent(d);
    }), a[Ka]);
  }
  function dt() {
    q.call(this), this.i = new ge(this), this.M = this, this.F = null;
  }
  I(dt, q), dt.prototype[j] = !0, dt.prototype.removeEventListener = function(a, d, v, P) {
    Ct(this, a, d, v, P);
  };
  function bt(a, d) {
    var v, P = a.F;
    if (P) for (v = []; P; P = P.F) v.push(P);
    if (a = a.M, P = d.type || d, typeof d == "string") d = new H(d, a);
    else if (d instanceof H) d.target = d.target || a;
    else {
      var M = d;
      d = new H(P, a), O(d, M);
    }
    if (M = !0, v) for (var F = v.length - 1; 0 <= F; F--) {
      var W = d.g = v[F];
      M = $s(W, P, !0, d) && M;
    }
    if (W = d.g = a, M = $s(W, P, !0, d) && M, M = $s(W, P, !1, d) && M, v) for (F = 0; F < v.length; F++) W = d.g = v[F], M = $s(W, P, !1, d) && M;
  }
  dt.prototype.N = function() {
    if (dt.aa.N.call(this), this.i) {
      var a = this.i, d;
      for (d in a.g) {
        for (var v = a.g[d], P = 0; P < v.length; P++) te(v[P]);
        delete a.g[d], a.h--;
      }
    }
    this.F = null;
  }, dt.prototype.K = function(a, d, v, P) {
    return this.i.add(String(a), d, !1, v, P);
  }, dt.prototype.L = function(a, d, v, P) {
    return this.i.add(String(a), d, !0, v, P);
  };
  function $s(a, d, v, P) {
    if (d = a.i.g[String(d)], !d) return !0;
    d = d.concat();
    for (var M = !0, F = 0; F < d.length; ++F) {
      var W = d[F];
      if (W && !W.da && W.capture == v) {
        var Oe = W.listener, rt = W.ha || W.src;
        W.fa && G(a.i, W), M = Oe.call(rt, P) !== !1 && M;
      }
    }
    return M && !P.defaultPrevented;
  }
  function Eh(a, d, v) {
    if (typeof a == "function") v && (a = _(a, v));
    else if (a && typeof a.handleEvent == "function") a = _(a.handleEvent, a);
    else throw Error("Invalid listener argument");
    return 2147483647 < Number(d) ? -1 : c.setTimeout(a, d || 0);
  }
  function bh(a) {
    a.g = Eh(() => {
      a.g = null, a.i && (a.i = !1, bh(a));
    }, a.l);
    const d = a.h;
    a.h = null, a.m.apply(null, d);
  }
  class Fv extends q {
    constructor(d, v) {
      super(), this.m = d, this.l = v, this.h = null, this.i = !1, this.g = null;
    }
    j(d) {
      this.h = arguments, this.g ? this.i = !0 : bh(this);
    }
    N() {
      super.N(), this.g && (c.clearTimeout(this.g), this.g = null, this.i = !1, this.h = null);
    }
  }
  function Ai(a) {
    q.call(this), this.h = a, this.g = {};
  }
  I(Ai, q);
  var Th = [];
  function Ih(a) {
    S(a.g, function(d, v) {
      this.g.hasOwnProperty(v) && ft(d);
    }, a), a.g = {};
  }
  Ai.prototype.N = function() {
    Ai.aa.N.call(this), Ih(this);
  }, Ai.prototype.handleEvent = function() {
    throw Error("EventHandler.handleEvent not implemented");
  };
  var Ha = c.JSON.stringify, Uv = c.JSON.parse, jv = class {
    stringify(a) {
      return c.JSON.stringify(a, void 0);
    }
    parse(a) {
      return c.JSON.parse(a, void 0);
    }
  };
  function Ga() {
  }
  Ga.prototype.h = null;
  function Sh(a) {
    return a.h || (a.h = a.i());
  }
  function Ah() {
  }
  var Ri = { OPEN: "a", kb: "b", Ja: "c", wb: "d" };
  function Wa() {
    H.call(this, "d");
  }
  I(Wa, H);
  function Qa() {
    H.call(this, "c");
  }
  I(Qa, H);
  var Zn = {}, Rh = null;
  function qs() {
    return Rh = Rh || new dt();
  }
  Zn.La = "serverreachability";
  function Ch(a) {
    H.call(this, Zn.La, a);
  }
  I(Ch, H);
  function Ci(a) {
    const d = qs();
    bt(d, new Ch(d));
  }
  Zn.STAT_EVENT = "statevent";
  function Ph(a, d) {
    H.call(this, Zn.STAT_EVENT, a), this.stat = d;
  }
  I(Ph, H);
  function Tt(a) {
    const d = qs();
    bt(d, new Ph(d, a));
  }
  Zn.Ma = "timingevent";
  function kh(a, d) {
    H.call(this, Zn.Ma, a), this.size = d;
  }
  I(kh, H);
  function Pi(a, d) {
    if (typeof a != "function") throw Error("Fn must not be null and must be a function");
    return c.setTimeout(function() {
      a();
    }, d);
  }
  function ki() {
    this.g = !0;
  }
  ki.prototype.xa = function() {
    this.g = !1;
  };
  function Bv(a, d, v, P, M, F) {
    a.info(function() {
      if (a.g) if (F)
        for (var W = "", Oe = F.split("&"), rt = 0; rt < Oe.length; rt++) {
          var Ee = Oe[rt].split("=");
          if (1 < Ee.length) {
            var pt = Ee[0];
            Ee = Ee[1];
            var mt = pt.split("_");
            W = 2 <= mt.length && mt[1] == "type" ? W + (pt + "=" + Ee + "&") : W + (pt + "=redacted&");
          }
        }
      else W = null;
      else W = F;
      return "XMLHTTP REQ (" + P + ") [attempt " + M + "]: " + d + `
` + v + `
` + W;
    });
  }
  function $v(a, d, v, P, M, F, W) {
    a.info(function() {
      return "XMLHTTP RESP (" + P + ") [ attempt " + M + "]: " + d + `
` + v + `
` + F + " " + W;
    });
  }
  function Mr(a, d, v, P) {
    a.info(function() {
      return "XMLHTTP TEXT (" + d + "): " + zv(a, v) + (P ? " " + P : "");
    });
  }
  function qv(a, d) {
    a.info(function() {
      return "TIMEOUT: " + d;
    });
  }
  ki.prototype.info = function() {
  };
  function zv(a, d) {
    if (!a.g) return d;
    if (!d) return null;
    try {
      var v = JSON.parse(d);
      if (v) {
        for (a = 0; a < v.length; a++) if (Array.isArray(v[a])) {
          var P = v[a];
          if (!(2 > P.length)) {
            var M = P[1];
            if (Array.isArray(M) && !(1 > M.length)) {
              var F = M[0];
              if (F != "noop" && F != "stop" && F != "close") for (var W = 1; W < M.length; W++) M[W] = "";
            }
          }
        }
      }
      return Ha(v);
    } catch {
      return d;
    }
  }
  var zs = { NO_ERROR: 0, gb: 1, tb: 2, sb: 3, nb: 4, rb: 5, ub: 6, Ia: 7, TIMEOUT: 8, xb: 9 }, Oh = { lb: "complete", Hb: "success", Ja: "error", Ia: "abort", zb: "ready", Ab: "readystatechange", TIMEOUT: "timeout", vb: "incrementaldata", yb: "progress", ob: "downloadprogress", Pb: "uploadprogress" }, Ya;
  function Ks() {
  }
  I(Ks, Ga), Ks.prototype.g = function() {
    return new XMLHttpRequest();
  }, Ks.prototype.i = function() {
    return {};
  }, Ya = new Ks();
  function Cn(a, d, v, P) {
    this.j = a, this.i = d, this.l = v, this.R = P || 1, this.U = new Ai(this), this.I = 45e3, this.H = null, this.o = !1, this.m = this.A = this.v = this.L = this.F = this.S = this.B = null, this.D = [], this.g = null, this.C = 0, this.s = this.u = null, this.X = -1, this.J = !1, this.O = 0, this.M = null, this.W = this.K = this.T = this.P = !1, this.h = new Nh();
  }
  function Nh() {
    this.i = null, this.g = "", this.h = !1;
  }
  var Dh = {}, Ja = {};
  function Xa(a, d, v) {
    a.L = 1, a.v = Qs(pn(d)), a.m = v, a.P = !0, xh(a, null);
  }
  function xh(a, d) {
    a.F = Date.now(), Hs(a), a.A = pn(a.v);
    var v = a.A, P = a.R;
    Array.isArray(P) || (P = [String(P)]), Wh(v.i, "t", P), a.C = 0, v = a.j.J, a.h = new Nh(), a.g = df(a.j, v ? d : null, !a.m), 0 < a.O && (a.M = new Fv(_(a.Y, a, a.g), a.O)), d = a.U, v = a.g, P = a.ca;
    var M = "readystatechange";
    Array.isArray(M) || (M && (Th[0] = M.toString()), M = Th);
    for (var F = 0; F < M.length; F++) {
      var W = me(v, M[F], P || d.handleEvent, !1, d.h || d);
      if (!W) break;
      d.g[W.key] = W;
    }
    d = a.H ? T(a.H) : {}, a.m ? (a.u || (a.u = "POST"), d["Content-Type"] = "application/x-www-form-urlencoded", a.g.ea(
      a.A,
      a.u,
      a.m,
      d
    )) : (a.u = "GET", a.g.ea(a.A, a.u, null, d)), Ci(), Bv(a.i, a.u, a.A, a.l, a.R, a.m);
  }
  Cn.prototype.ca = function(a) {
    a = a.target;
    const d = this.M;
    d && mn(a) == 3 ? d.j() : this.Y(a);
  }, Cn.prototype.Y = function(a) {
    try {
      if (a == this.g) e: {
        const mt = mn(this.g);
        var d = this.g.Ba();
        const Ur = this.g.Z();
        if (!(3 > mt) && (mt != 3 || this.g && (this.h.h || this.g.oa() || tf(this.g)))) {
          this.J || mt != 4 || d == 7 || (d == 8 || 0 >= Ur ? Ci(3) : Ci(2)), Za(this);
          var v = this.g.Z();
          this.X = v;
          t: if (Lh(this)) {
            var P = tf(this.g);
            a = "";
            var M = P.length, F = mn(this.g) == 4;
            if (!this.h.i) {
              if (typeof TextDecoder > "u") {
                er(this), Oi(this);
                var W = "";
                break t;
              }
              this.h.i = new c.TextDecoder();
            }
            for (d = 0; d < M; d++) this.h.h = !0, a += this.h.i.decode(P[d], { stream: !(F && d == M - 1) });
            P.length = 0, this.h.g += a, this.C = 0, W = this.h.g;
          } else W = this.g.oa();
          if (this.o = v == 200, $v(this.i, this.u, this.A, this.l, this.R, mt, v), this.o) {
            if (this.T && !this.K) {
              t: {
                if (this.g) {
                  var Oe, rt = this.g;
                  if ((Oe = rt.g ? rt.g.getResponseHeader("X-HTTP-Initial-Response") : null) && !E(Oe)) {
                    var Ee = Oe;
                    break t;
                  }
                }
                Ee = null;
              }
              if (v = Ee) Mr(this.i, this.l, v, "Initial handshake response via X-HTTP-Initial-Response"), this.K = !0, ec(this, v);
              else {
                this.o = !1, this.s = 3, Tt(12), er(this), Oi(this);
                break e;
              }
            }
            if (this.P) {
              v = !0;
              let qt;
              for (; !this.J && this.C < W.length; ) if (qt = Kv(this, W), qt == Ja) {
                mt == 4 && (this.s = 4, Tt(14), v = !1), Mr(this.i, this.l, null, "[Incomplete Response]");
                break;
              } else if (qt == Dh) {
                this.s = 4, Tt(15), Mr(this.i, this.l, W, "[Invalid Chunk]"), v = !1;
                break;
              } else Mr(this.i, this.l, qt, null), ec(this, qt);
              if (Lh(this) && this.C != 0 && (this.h.g = this.h.g.slice(this.C), this.C = 0), mt != 4 || W.length != 0 || this.h.h || (this.s = 1, Tt(16), v = !1), this.o = this.o && v, !v) Mr(this.i, this.l, W, "[Invalid Chunked Response]"), er(this), Oi(this);
              else if (0 < W.length && !this.W) {
                this.W = !0;
                var pt = this.j;
                pt.g == this && pt.ba && !pt.M && (pt.j.info("Great, no buffering proxy detected. Bytes received: " + W.length), oc(pt), pt.M = !0, Tt(11));
              }
            } else Mr(this.i, this.l, W, null), ec(this, W);
            mt == 4 && er(this), this.o && !this.J && (mt == 4 ? uf(this.j, this) : (this.o = !1, Hs(this)));
          } else cw(this.g), v == 400 && 0 < W.indexOf("Unknown SID") ? (this.s = 3, Tt(12)) : (this.s = 0, Tt(13)), er(this), Oi(this);
        }
      }
    } catch {
    } finally {
    }
  };
  function Lh(a) {
    return a.g ? a.u == "GET" && a.L != 2 && a.j.Ca : !1;
  }
  function Kv(a, d) {
    var v = a.C, P = d.indexOf(`
`, v);
    return P == -1 ? Ja : (v = Number(d.substring(v, P)), isNaN(v) ? Dh : (P += 1, P + v > d.length ? Ja : (d = d.slice(P, P + v), a.C = P + v, d)));
  }
  Cn.prototype.cancel = function() {
    this.J = !0, er(this);
  };
  function Hs(a) {
    a.S = Date.now() + a.I, Mh(a, a.I);
  }
  function Mh(a, d) {
    if (a.B != null) throw Error("WatchDog timer not null");
    a.B = Pi(_(a.ba, a), d);
  }
  function Za(a) {
    a.B && (c.clearTimeout(a.B), a.B = null);
  }
  Cn.prototype.ba = function() {
    this.B = null;
    const a = Date.now();
    0 <= a - this.S ? (qv(this.i, this.A), this.L != 2 && (Ci(), Tt(17)), er(this), this.s = 2, Oi(this)) : Mh(this, this.S - a);
  };
  function Oi(a) {
    a.j.G == 0 || a.J || uf(a.j, a);
  }
  function er(a) {
    Za(a);
    var d = a.M;
    d && typeof d.ma == "function" && d.ma(), a.M = null, Ih(a.U), a.g && (d = a.g, a.g = null, d.abort(), d.ma());
  }
  function ec(a, d) {
    try {
      var v = a.j;
      if (v.G != 0 && (v.g == a || tc(v.h, a))) {
        if (!a.K && tc(v.h, a) && v.G == 3) {
          try {
            var P = v.Da.g.parse(d);
          } catch {
            P = null;
          }
          if (Array.isArray(P) && P.length == 3) {
            var M = P;
            if (M[0] == 0) {
              e:
                if (!v.u) {
                  if (v.g) if (v.g.F + 3e3 < a.F) eo(v), Xs(v);
                  else break e;
                  sc(v), Tt(18);
                }
            } else v.za = M[1], 0 < v.za - v.T && 37500 > M[2] && v.F && v.v == 0 && !v.C && (v.C = Pi(_(v.Za, v), 6e3));
            if (1 >= Uh(v.h) && v.ca) {
              try {
                v.ca();
              } catch {
              }
              v.ca = void 0;
            }
          } else nr(v, 11);
        } else if ((a.K || v.g == a) && eo(v), !E(d)) for (M = v.Da.g.parse(d), d = 0; d < M.length; d++) {
          let Ee = M[d];
          if (v.T = Ee[0], Ee = Ee[1], v.G == 2) if (Ee[0] == "c") {
            v.K = Ee[1], v.ia = Ee[2];
            const pt = Ee[3];
            pt != null && (v.la = pt, v.j.info("VER=" + v.la));
            const mt = Ee[4];
            mt != null && (v.Aa = mt, v.j.info("SVER=" + v.Aa));
            const Ur = Ee[5];
            Ur != null && typeof Ur == "number" && 0 < Ur && (P = 1.5 * Ur, v.L = P, v.j.info("backChannelRequestTimeoutMs_=" + P)), P = v;
            const qt = a.g;
            if (qt) {
              const no = qt.g ? qt.g.getResponseHeader("X-Client-Wire-Protocol") : null;
              if (no) {
                var F = P.h;
                F.g || no.indexOf("spdy") == -1 && no.indexOf("quic") == -1 && no.indexOf("h2") == -1 || (F.j = F.l, F.g = /* @__PURE__ */ new Set(), F.h && (nc(F, F.h), F.h = null));
              }
              if (P.D) {
                const ac = qt.g ? qt.g.getResponseHeader("X-HTTP-Session-Id") : null;
                ac && (P.ya = ac, De(P.I, P.D, ac));
              }
            }
            v.G = 3, v.l && v.l.ua(), v.ba && (v.R = Date.now() - a.F, v.j.info("Handshake RTT: " + v.R + "ms")), P = v;
            var W = a;
            if (P.qa = ff(P, P.J ? P.ia : null, P.W), W.K) {
              jh(P.h, W);
              var Oe = W, rt = P.L;
              rt && (Oe.I = rt), Oe.B && (Za(Oe), Hs(Oe)), P.g = W;
            } else af(P);
            0 < v.i.length && Zs(v);
          } else Ee[0] != "stop" && Ee[0] != "close" || nr(v, 7);
          else v.G == 3 && (Ee[0] == "stop" || Ee[0] == "close" ? Ee[0] == "stop" ? nr(v, 7) : ic(v) : Ee[0] != "noop" && v.l && v.l.ta(Ee), v.v = 0);
        }
      }
      Ci(4);
    } catch {
    }
  }
  var Hv = class {
    constructor(a, d) {
      this.g = a, this.map = d;
    }
  };
  function Vh(a) {
    this.l = a || 10, c.PerformanceNavigationTiming ? (a = c.performance.getEntriesByType("navigation"), a = 0 < a.length && (a[0].nextHopProtocol == "hq" || a[0].nextHopProtocol == "h2")) : a = !!(c.chrome && c.chrome.loadTimes && c.chrome.loadTimes() && c.chrome.loadTimes().wasFetchedViaSpdy), this.j = a ? this.l : 1, this.g = null, 1 < this.j && (this.g = /* @__PURE__ */ new Set()), this.h = null, this.i = [];
  }
  function Fh(a) {
    return a.h ? !0 : a.g ? a.g.size >= a.j : !1;
  }
  function Uh(a) {
    return a.h ? 1 : a.g ? a.g.size : 0;
  }
  function tc(a, d) {
    return a.h ? a.h == d : a.g ? a.g.has(d) : !1;
  }
  function nc(a, d) {
    a.g ? a.g.add(d) : a.h = d;
  }
  function jh(a, d) {
    a.h && a.h == d ? a.h = null : a.g && a.g.has(d) && a.g.delete(d);
  }
  Vh.prototype.cancel = function() {
    if (this.i = Bh(this), this.h) this.h.cancel(), this.h = null;
    else if (this.g && this.g.size !== 0) {
      for (const a of this.g.values()) a.cancel();
      this.g.clear();
    }
  };
  function Bh(a) {
    if (a.h != null) return a.i.concat(a.h.D);
    if (a.g != null && a.g.size !== 0) {
      let d = a.i;
      for (const v of a.g.values()) d = d.concat(v.D);
      return d;
    }
    return C(a.i);
  }
  function Gv(a) {
    if (a.V && typeof a.V == "function") return a.V();
    if (typeof Map < "u" && a instanceof Map || typeof Set < "u" && a instanceof Set) return Array.from(a.values());
    if (typeof a == "string") return a.split("");
    if (u(a)) {
      for (var d = [], v = a.length, P = 0; P < v; P++) d.push(a[P]);
      return d;
    }
    d = [], v = 0;
    for (P in a) d[v++] = a[P];
    return d;
  }
  function Wv(a) {
    if (a.na && typeof a.na == "function") return a.na();
    if (!a.V || typeof a.V != "function") {
      if (typeof Map < "u" && a instanceof Map) return Array.from(a.keys());
      if (!(typeof Set < "u" && a instanceof Set)) {
        if (u(a) || typeof a == "string") {
          var d = [];
          a = a.length;
          for (var v = 0; v < a; v++) d.push(v);
          return d;
        }
        d = [], v = 0;
        for (const P in a) d[v++] = P;
        return d;
      }
    }
  }
  function $h(a, d) {
    if (a.forEach && typeof a.forEach == "function") a.forEach(d, void 0);
    else if (u(a) || typeof a == "string") Array.prototype.forEach.call(a, d, void 0);
    else for (var v = Wv(a), P = Gv(a), M = P.length, F = 0; F < M; F++) d.call(void 0, P[F], v && v[F], a);
  }
  var qh = RegExp("^(?:([^:/?#.]+):)?(?://(?:([^\\\\/?#]*)@)?([^\\\\/?#]*?)(?::([0-9]+))?(?=[\\\\/?#]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#([\\s\\S]*))?$");
  function Qv(a, d) {
    if (a) {
      a = a.split("&");
      for (var v = 0; v < a.length; v++) {
        var P = a[v].indexOf("="), M = null;
        if (0 <= P) {
          var F = a[v].substring(0, P);
          M = a[v].substring(P + 1);
        } else F = a[v];
        d(F, M ? decodeURIComponent(M.replace(/\+/g, " ")) : "");
      }
    }
  }
  function tr(a) {
    if (this.g = this.o = this.j = "", this.s = null, this.m = this.l = "", this.h = !1, a instanceof tr) {
      this.h = a.h, Gs(this, a.j), this.o = a.o, this.g = a.g, Ws(this, a.s), this.l = a.l;
      var d = a.i, v = new xi();
      v.i = d.i, d.g && (v.g = new Map(d.g), v.h = d.h), zh(this, v), this.m = a.m;
    } else a && (d = String(a).match(qh)) ? (this.h = !1, Gs(this, d[1] || "", !0), this.o = Ni(d[2] || ""), this.g = Ni(d[3] || "", !0), Ws(this, d[4]), this.l = Ni(d[5] || "", !0), zh(this, d[6] || "", !0), this.m = Ni(d[7] || "")) : (this.h = !1, this.i = new xi(null, this.h));
  }
  tr.prototype.toString = function() {
    var a = [], d = this.j;
    d && a.push(Di(d, Kh, !0), ":");
    var v = this.g;
    return (v || d == "file") && (a.push("//"), (d = this.o) && a.push(Di(d, Kh, !0), "@"), a.push(encodeURIComponent(String(v)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), v = this.s, v != null && a.push(":", String(v))), (v = this.l) && (this.g && v.charAt(0) != "/" && a.push("/"), a.push(Di(v, v.charAt(0) == "/" ? Xv : Jv, !0))), (v = this.i.toString()) && a.push("?", v), (v = this.m) && a.push("#", Di(v, ew)), a.join("");
  };
  function pn(a) {
    return new tr(a);
  }
  function Gs(a, d, v) {
    a.j = v ? Ni(d, !0) : d, a.j && (a.j = a.j.replace(/:$/, ""));
  }
  function Ws(a, d) {
    if (d) {
      if (d = Number(d), isNaN(d) || 0 > d) throw Error("Bad port number " + d);
      a.s = d;
    } else a.s = null;
  }
  function zh(a, d, v) {
    d instanceof xi ? (a.i = d, tw(a.i, a.h)) : (v || (d = Di(d, Zv)), a.i = new xi(d, a.h));
  }
  function De(a, d, v) {
    a.i.set(d, v);
  }
  function Qs(a) {
    return De(a, "zx", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ Date.now()).toString(36)), a;
  }
  function Ni(a, d) {
    return a ? d ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
  }
  function Di(a, d, v) {
    return typeof a == "string" ? (a = encodeURI(a).replace(d, Yv), v && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
  }
  function Yv(a) {
    return a = a.charCodeAt(0), "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
  }
  var Kh = /[#\/\?@]/g, Jv = /[#\?:]/g, Xv = /[#\?]/g, Zv = /[#\?@]/g, ew = /#/g;
  function xi(a, d) {
    this.h = this.g = null, this.i = a || null, this.j = !!d;
  }
  function Pn(a) {
    a.g || (a.g = /* @__PURE__ */ new Map(), a.h = 0, a.i && Qv(a.i, function(d, v) {
      a.add(decodeURIComponent(d.replace(/\+/g, " ")), v);
    }));
  }
  t = xi.prototype, t.add = function(a, d) {
    Pn(this), this.i = null, a = Vr(this, a);
    var v = this.g.get(a);
    return v || this.g.set(a, v = []), v.push(d), this.h += 1, this;
  };
  function Hh(a, d) {
    Pn(a), d = Vr(a, d), a.g.has(d) && (a.i = null, a.h -= a.g.get(d).length, a.g.delete(d));
  }
  function Gh(a, d) {
    return Pn(a), d = Vr(a, d), a.g.has(d);
  }
  t.forEach = function(a, d) {
    Pn(this), this.g.forEach(function(v, P) {
      v.forEach(function(M) {
        a.call(d, M, P, this);
      }, this);
    }, this);
  }, t.na = function() {
    Pn(this);
    const a = Array.from(this.g.values()), d = Array.from(this.g.keys()), v = [];
    for (let P = 0; P < d.length; P++) {
      const M = a[P];
      for (let F = 0; F < M.length; F++) v.push(d[P]);
    }
    return v;
  }, t.V = function(a) {
    Pn(this);
    let d = [];
    if (typeof a == "string") Gh(this, a) && (d = d.concat(this.g.get(Vr(this, a))));
    else {
      a = Array.from(this.g.values());
      for (let v = 0; v < a.length; v++) d = d.concat(a[v]);
    }
    return d;
  }, t.set = function(a, d) {
    return Pn(this), this.i = null, a = Vr(this, a), Gh(this, a) && (this.h -= this.g.get(a).length), this.g.set(a, [d]), this.h += 1, this;
  }, t.get = function(a, d) {
    return a ? (a = this.V(a), 0 < a.length ? String(a[0]) : d) : d;
  };
  function Wh(a, d, v) {
    Hh(a, d), 0 < v.length && (a.i = null, a.g.set(Vr(a, d), C(v)), a.h += v.length);
  }
  t.toString = function() {
    if (this.i) return this.i;
    if (!this.g) return "";
    const a = [], d = Array.from(this.g.keys());
    for (var v = 0; v < d.length; v++) {
      var P = d[v];
      const F = encodeURIComponent(String(P)), W = this.V(P);
      for (P = 0; P < W.length; P++) {
        var M = F;
        W[P] !== "" && (M += "=" + encodeURIComponent(String(W[P]))), a.push(M);
      }
    }
    return this.i = a.join("&");
  };
  function Vr(a, d) {
    return d = String(d), a.j && (d = d.toLowerCase()), d;
  }
  function tw(a, d) {
    d && !a.j && (Pn(a), a.i = null, a.g.forEach(function(v, P) {
      var M = P.toLowerCase();
      P != M && (Hh(this, P), Wh(this, M, v));
    }, a)), a.j = d;
  }
  function nw(a, d) {
    const v = new ki();
    if (c.Image) {
      const P = new Image();
      P.onload = b(kn, v, "TestLoadImage: loaded", !0, d, P), P.onerror = b(kn, v, "TestLoadImage: error", !1, d, P), P.onabort = b(kn, v, "TestLoadImage: abort", !1, d, P), P.ontimeout = b(kn, v, "TestLoadImage: timeout", !1, d, P), c.setTimeout(function() {
        P.ontimeout && P.ontimeout();
      }, 1e4), P.src = a;
    } else d(!1);
  }
  function rw(a, d) {
    const v = new ki(), P = new AbortController(), M = setTimeout(() => {
      P.abort(), kn(v, "TestPingServer: timeout", !1, d);
    }, 1e4);
    fetch(a, { signal: P.signal }).then((F) => {
      clearTimeout(M), F.ok ? kn(v, "TestPingServer: ok", !0, d) : kn(v, "TestPingServer: server error", !1, d);
    }).catch(() => {
      clearTimeout(M), kn(v, "TestPingServer: error", !1, d);
    });
  }
  function kn(a, d, v, P, M) {
    try {
      M && (M.onload = null, M.onerror = null, M.onabort = null, M.ontimeout = null), P(v);
    } catch {
    }
  }
  function iw() {
    this.g = new jv();
  }
  function sw(a, d, v) {
    const P = v || "";
    try {
      $h(a, function(M, F) {
        let W = M;
        l(M) && (W = Ha(M)), d.push(P + F + "=" + encodeURIComponent(W));
      });
    } catch (M) {
      throw d.push(P + "type=" + encodeURIComponent("_badmap")), M;
    }
  }
  function Li(a) {
    this.l = a.Ub || null, this.j = a.eb || !1;
  }
  I(Li, Ga), Li.prototype.g = function() {
    return new Ys(this.l, this.j);
  }, Li.prototype.i = /* @__PURE__ */ function(a) {
    return function() {
      return a;
    };
  }({});
  function Ys(a, d) {
    dt.call(this), this.D = a, this.o = d, this.m = void 0, this.status = this.readyState = 0, this.responseType = this.responseText = this.response = this.statusText = "", this.onreadystatechange = null, this.u = new Headers(), this.h = null, this.B = "GET", this.A = "", this.g = !1, this.v = this.j = this.l = null;
  }
  I(Ys, dt), t = Ys.prototype, t.open = function(a, d) {
    if (this.readyState != 0) throw this.abort(), Error("Error reopening a connection");
    this.B = a, this.A = d, this.readyState = 1, Vi(this);
  }, t.send = function(a) {
    if (this.readyState != 1) throw this.abort(), Error("need to call open() first. ");
    this.g = !0;
    const d = { headers: this.u, method: this.B, credentials: this.m, cache: void 0 };
    a && (d.body = a), (this.D || c).fetch(new Request(this.A, d)).then(this.Sa.bind(this), this.ga.bind(this));
  }, t.abort = function() {
    this.response = this.responseText = "", this.u = new Headers(), this.status = 0, this.j && this.j.cancel("Request was aborted.").catch(() => {
    }), 1 <= this.readyState && this.g && this.readyState != 4 && (this.g = !1, Mi(this)), this.readyState = 0;
  }, t.Sa = function(a) {
    if (this.g && (this.l = a, this.h || (this.status = this.l.status, this.statusText = this.l.statusText, this.h = a.headers, this.readyState = 2, Vi(this)), this.g && (this.readyState = 3, Vi(this), this.g))) if (this.responseType === "arraybuffer") a.arrayBuffer().then(this.Qa.bind(this), this.ga.bind(this));
    else if (typeof c.ReadableStream < "u" && "body" in a) {
      if (this.j = a.body.getReader(), this.o) {
        if (this.responseType) throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');
        this.response = [];
      } else this.response = this.responseText = "", this.v = new TextDecoder();
      Qh(this);
    } else a.text().then(this.Ra.bind(this), this.ga.bind(this));
  };
  function Qh(a) {
    a.j.read().then(a.Pa.bind(a)).catch(a.ga.bind(a));
  }
  t.Pa = function(a) {
    if (this.g) {
      if (this.o && a.value) this.response.push(a.value);
      else if (!this.o) {
        var d = a.value ? a.value : new Uint8Array(0);
        (d = this.v.decode(d, { stream: !a.done })) && (this.response = this.responseText += d);
      }
      a.done ? Mi(this) : Vi(this), this.readyState == 3 && Qh(this);
    }
  }, t.Ra = function(a) {
    this.g && (this.response = this.responseText = a, Mi(this));
  }, t.Qa = function(a) {
    this.g && (this.response = a, Mi(this));
  }, t.ga = function() {
    this.g && Mi(this);
  };
  function Mi(a) {
    a.readyState = 4, a.l = null, a.j = null, a.v = null, Vi(a);
  }
  t.setRequestHeader = function(a, d) {
    this.u.append(a, d);
  }, t.getResponseHeader = function(a) {
    return this.h && this.h.get(a.toLowerCase()) || "";
  }, t.getAllResponseHeaders = function() {
    if (!this.h) return "";
    const a = [], d = this.h.entries();
    for (var v = d.next(); !v.done; ) v = v.value, a.push(v[0] + ": " + v[1]), v = d.next();
    return a.join(`\r
`);
  };
  function Vi(a) {
    a.onreadystatechange && a.onreadystatechange.call(a);
  }
  Object.defineProperty(Ys.prototype, "withCredentials", { get: function() {
    return this.m === "include";
  }, set: function(a) {
    this.m = a ? "include" : "same-origin";
  } });
  function Yh(a) {
    let d = "";
    return S(a, function(v, P) {
      d += P, d += ":", d += v, d += `\r
`;
    }), d;
  }
  function rc(a, d, v) {
    e: {
      for (P in v) {
        var P = !1;
        break e;
      }
      P = !0;
    }
    P || (v = Yh(v), typeof a == "string" ? v != null && encodeURIComponent(String(v)) : De(a, d, v));
  }
  function Ve(a) {
    dt.call(this), this.headers = /* @__PURE__ */ new Map(), this.o = a || null, this.h = !1, this.v = this.g = null, this.D = "", this.m = 0, this.l = "", this.j = this.B = this.u = this.A = !1, this.I = null, this.H = "", this.J = !1;
  }
  I(Ve, dt);
  var ow = /^https?$/i, aw = ["POST", "PUT"];
  t = Ve.prototype, t.Ha = function(a) {
    this.J = a;
  }, t.ea = function(a, d, v, P) {
    if (this.g) throw Error("[goog.net.XhrIo] Object is active with another request=" + this.D + "; newUri=" + a);
    d = d ? d.toUpperCase() : "GET", this.D = a, this.l = "", this.m = 0, this.A = !1, this.h = !0, this.g = this.o ? this.o.g() : Ya.g(), this.v = this.o ? Sh(this.o) : Sh(Ya), this.g.onreadystatechange = _(this.Ea, this);
    try {
      this.B = !0, this.g.open(d, String(a), !0), this.B = !1;
    } catch (F) {
      Jh(this, F);
      return;
    }
    if (a = v || "", v = new Map(this.headers), P) if (Object.getPrototypeOf(P) === Object.prototype) for (var M in P) v.set(M, P[M]);
    else if (typeof P.keys == "function" && typeof P.get == "function") for (const F of P.keys()) v.set(F, P.get(F));
    else throw Error("Unknown input type for opt_headers: " + String(P));
    P = Array.from(v.keys()).find((F) => F.toLowerCase() == "content-type"), M = c.FormData && a instanceof c.FormData, !(0 <= Array.prototype.indexOf.call(aw, d, void 0)) || P || M || v.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
    for (const [F, W] of v) this.g.setRequestHeader(F, W);
    this.H && (this.g.responseType = this.H), "withCredentials" in this.g && this.g.withCredentials !== this.J && (this.g.withCredentials = this.J);
    try {
      ef(this), this.u = !0, this.g.send(a), this.u = !1;
    } catch (F) {
      Jh(this, F);
    }
  };
  function Jh(a, d) {
    a.h = !1, a.g && (a.j = !0, a.g.abort(), a.j = !1), a.l = d, a.m = 5, Xh(a), Js(a);
  }
  function Xh(a) {
    a.A || (a.A = !0, bt(a, "complete"), bt(a, "error"));
  }
  t.abort = function(a) {
    this.g && this.h && (this.h = !1, this.j = !0, this.g.abort(), this.j = !1, this.m = a || 7, bt(this, "complete"), bt(this, "abort"), Js(this));
  }, t.N = function() {
    this.g && (this.h && (this.h = !1, this.j = !0, this.g.abort(), this.j = !1), Js(this, !0)), Ve.aa.N.call(this);
  }, t.Ea = function() {
    this.s || (this.B || this.u || this.j ? Zh(this) : this.bb());
  }, t.bb = function() {
    Zh(this);
  };
  function Zh(a) {
    if (a.h && typeof o < "u" && (!a.v[1] || mn(a) != 4 || a.Z() != 2)) {
      if (a.u && mn(a) == 4) Eh(a.Ea, 0, a);
      else if (bt(a, "readystatechange"), mn(a) == 4) {
        a.h = !1;
        try {
          const W = a.Z();
          e: switch (W) {
            case 200:
            case 201:
            case 202:
            case 204:
            case 206:
            case 304:
            case 1223:
              var d = !0;
              break e;
            default:
              d = !1;
          }
          var v;
          if (!(v = d)) {
            var P;
            if (P = W === 0) {
              var M = String(a.D).match(qh)[1] || null;
              !M && c.self && c.self.location && (M = c.self.location.protocol.slice(0, -1)), P = !ow.test(M ? M.toLowerCase() : "");
            }
            v = P;
          }
          if (v) bt(a, "complete"), bt(a, "success");
          else {
            a.m = 6;
            try {
              var F = 2 < mn(a) ? a.g.statusText : "";
            } catch {
              F = "";
            }
            a.l = F + " [" + a.Z() + "]", Xh(a);
          }
        } finally {
          Js(a);
        }
      }
    }
  }
  function Js(a, d) {
    if (a.g) {
      ef(a);
      const v = a.g, P = a.v[0] ? () => {
      } : null;
      a.g = null, a.v = null, d || bt(a, "ready");
      try {
        v.onreadystatechange = P;
      } catch {
      }
    }
  }
  function ef(a) {
    a.I && (c.clearTimeout(a.I), a.I = null);
  }
  t.isActive = function() {
    return !!this.g;
  };
  function mn(a) {
    return a.g ? a.g.readyState : 0;
  }
  t.Z = function() {
    try {
      return 2 < mn(this) ? this.g.status : -1;
    } catch {
      return -1;
    }
  }, t.oa = function() {
    try {
      return this.g ? this.g.responseText : "";
    } catch {
      return "";
    }
  }, t.Oa = function(a) {
    if (this.g) {
      var d = this.g.responseText;
      return a && d.indexOf(a) == 0 && (d = d.substring(a.length)), Uv(d);
    }
  };
  function tf(a) {
    try {
      if (!a.g) return null;
      if ("response" in a.g) return a.g.response;
      switch (a.H) {
        case "":
        case "text":
          return a.g.responseText;
        case "arraybuffer":
          if ("mozResponseArrayBuffer" in a.g) return a.g.mozResponseArrayBuffer;
      }
      return null;
    } catch {
      return null;
    }
  }
  function cw(a) {
    const d = {};
    a = (a.g && 2 <= mn(a) && a.g.getAllResponseHeaders() || "").split(`\r
`);
    for (let P = 0; P < a.length; P++) {
      if (E(a[P])) continue;
      var v = N(a[P]);
      const M = v[0];
      if (v = v[1], typeof v != "string") continue;
      v = v.trim();
      const F = d[M] || [];
      d[M] = F, F.push(v);
    }
    R(d, function(P) {
      return P.join(", ");
    });
  }
  t.Ba = function() {
    return this.m;
  }, t.Ka = function() {
    return typeof this.l == "string" ? this.l : String(this.l);
  };
  function Fi(a, d, v) {
    return v && v.internalChannelParams && v.internalChannelParams[a] || d;
  }
  function nf(a) {
    this.Aa = 0, this.i = [], this.j = new ki(), this.ia = this.qa = this.I = this.W = this.g = this.ya = this.D = this.H = this.m = this.S = this.o = null, this.Ya = this.U = 0, this.Va = Fi("failFast", !1, a), this.F = this.C = this.u = this.s = this.l = null, this.X = !0, this.za = this.T = -1, this.Y = this.v = this.B = 0, this.Ta = Fi("baseRetryDelayMs", 5e3, a), this.cb = Fi("retryDelaySeedMs", 1e4, a), this.Wa = Fi("forwardChannelMaxRetries", 2, a), this.wa = Fi("forwardChannelRequestTimeoutMs", 2e4, a), this.pa = a && a.xmlHttpFactory || void 0, this.Xa = a && a.Tb || void 0, this.Ca = a && a.useFetchStreams || !1, this.L = void 0, this.J = a && a.supportsCrossDomainXhr || !1, this.K = "", this.h = new Vh(a && a.concurrentRequestLimit), this.Da = new iw(), this.P = a && a.fastHandshake || !1, this.O = a && a.encodeInitMessageHeaders || !1, this.P && this.O && (this.O = !1), this.Ua = a && a.Rb || !1, a && a.xa && this.j.xa(), a && a.forceLongPolling && (this.X = !1), this.ba = !this.P && this.X && a && a.detectBufferingProxy || !1, this.ja = void 0, a && a.longPollingTimeout && 0 < a.longPollingTimeout && (this.ja = a.longPollingTimeout), this.ca = void 0, this.R = 0, this.M = !1, this.ka = this.A = null;
  }
  t = nf.prototype, t.la = 8, t.G = 1, t.connect = function(a, d, v, P) {
    Tt(0), this.W = a, this.H = d || {}, v && P !== void 0 && (this.H.OSID = v, this.H.OAID = P), this.F = this.X, this.I = ff(this, null, this.W), Zs(this);
  };
  function ic(a) {
    if (rf(a), a.G == 3) {
      var d = a.U++, v = pn(a.I);
      if (De(v, "SID", a.K), De(v, "RID", d), De(v, "TYPE", "terminate"), Ui(a, v), d = new Cn(a, a.j, d), d.L = 2, d.v = Qs(pn(v)), v = !1, c.navigator && c.navigator.sendBeacon) try {
        v = c.navigator.sendBeacon(d.v.toString(), "");
      } catch {
      }
      !v && c.Image && (new Image().src = d.v, v = !0), v || (d.g = df(d.j, null), d.g.ea(d.v)), d.F = Date.now(), Hs(d);
    }
    hf(a);
  }
  function Xs(a) {
    a.g && (oc(a), a.g.cancel(), a.g = null);
  }
  function rf(a) {
    Xs(a), a.u && (c.clearTimeout(a.u), a.u = null), eo(a), a.h.cancel(), a.s && (typeof a.s == "number" && c.clearTimeout(a.s), a.s = null);
  }
  function Zs(a) {
    if (!Fh(a.h) && !a.s) {
      a.s = !0;
      var d = a.Ga;
      ae || B(), x || (ae(), x = !0), L.add(d, a), a.B = 0;
    }
  }
  function uw(a, d) {
    return Uh(a.h) >= a.h.j - (a.s ? 1 : 0) ? !1 : a.s ? (a.i = d.D.concat(a.i), !0) : a.G == 1 || a.G == 2 || a.B >= (a.Va ? 0 : a.Wa) ? !1 : (a.s = Pi(_(a.Ga, a, d), lf(a, a.B)), a.B++, !0);
  }
  t.Ga = function(a) {
    if (this.s) if (this.s = null, this.G == 1) {
      if (!a) {
        this.U = Math.floor(1e5 * Math.random()), a = this.U++;
        const M = new Cn(this, this.j, a);
        let F = this.o;
        if (this.S && (F ? (F = T(F), O(F, this.S)) : F = this.S), this.m !== null || this.O || (M.H = F, F = null), this.P) e: {
          for (var d = 0, v = 0; v < this.i.length; v++) {
            t: {
              var P = this.i[v];
              if ("__data__" in P.map && (P = P.map.__data__, typeof P == "string")) {
                P = P.length;
                break t;
              }
              P = void 0;
            }
            if (P === void 0) break;
            if (d += P, 4096 < d) {
              d = v;
              break e;
            }
            if (d === 4096 || v === this.i.length - 1) {
              d = v + 1;
              break e;
            }
          }
          d = 1e3;
        }
        else d = 1e3;
        d = of(this, M, d), v = pn(this.I), De(v, "RID", a), De(v, "CVER", 22), this.D && De(v, "X-HTTP-Session-Id", this.D), Ui(this, v), F && (this.O ? d = "headers=" + encodeURIComponent(String(Yh(F))) + "&" + d : this.m && rc(v, this.m, F)), nc(this.h, M), this.Ua && De(v, "TYPE", "init"), this.P ? (De(v, "$req", d), De(v, "SID", "null"), M.T = !0, Xa(M, v, null)) : Xa(M, v, d), this.G = 2;
      }
    } else this.G == 3 && (a ? sf(this, a) : this.i.length == 0 || Fh(this.h) || sf(this));
  };
  function sf(a, d) {
    var v;
    d ? v = d.l : v = a.U++;
    const P = pn(a.I);
    De(P, "SID", a.K), De(P, "RID", v), De(P, "AID", a.T), Ui(a, P), a.m && a.o && rc(P, a.m, a.o), v = new Cn(a, a.j, v, a.B + 1), a.m === null && (v.H = a.o), d && (a.i = d.D.concat(a.i)), d = of(a, v, 1e3), v.I = Math.round(0.5 * a.wa) + Math.round(0.5 * a.wa * Math.random()), nc(a.h, v), Xa(v, P, d);
  }
  function Ui(a, d) {
    a.H && S(a.H, function(v, P) {
      De(d, P, v);
    }), a.l && $h({}, function(v, P) {
      De(d, P, v);
    });
  }
  function of(a, d, v) {
    v = Math.min(a.i.length, v);
    var P = a.l ? _(a.l.Na, a.l, a) : null;
    e: {
      var M = a.i;
      let F = -1;
      for (; ; ) {
        const W = ["count=" + v];
        F == -1 ? 0 < v ? (F = M[0].g, W.push("ofs=" + F)) : F = 0 : W.push("ofs=" + F);
        let Oe = !0;
        for (let rt = 0; rt < v; rt++) {
          let Ee = M[rt].g;
          const pt = M[rt].map;
          if (Ee -= F, 0 > Ee) F = Math.max(0, M[rt].g - 100), Oe = !1;
          else try {
            sw(pt, W, "req" + Ee + "_");
          } catch {
            P && P(pt);
          }
        }
        if (Oe) {
          P = W.join("&");
          break e;
        }
      }
    }
    return a = a.i.splice(0, v), d.D = a, P;
  }
  function af(a) {
    if (!a.g && !a.u) {
      a.Y = 1;
      var d = a.Fa;
      ae || B(), x || (ae(), x = !0), L.add(d, a), a.v = 0;
    }
  }
  function sc(a) {
    return a.g || a.u || 3 <= a.v ? !1 : (a.Y++, a.u = Pi(_(a.Fa, a), lf(a, a.v)), a.v++, !0);
  }
  t.Fa = function() {
    if (this.u = null, cf(this), this.ba && !(this.M || this.g == null || 0 >= this.R)) {
      var a = 2 * this.R;
      this.j.info("BP detection timer enabled: " + a), this.A = Pi(_(this.ab, this), a);
    }
  }, t.ab = function() {
    this.A && (this.A = null, this.j.info("BP detection timeout reached."), this.j.info("Buffering proxy detected and switch to long-polling!"), this.F = !1, this.M = !0, Tt(10), Xs(this), cf(this));
  };
  function oc(a) {
    a.A != null && (c.clearTimeout(a.A), a.A = null);
  }
  function cf(a) {
    a.g = new Cn(a, a.j, "rpc", a.Y), a.m === null && (a.g.H = a.o), a.g.O = 0;
    var d = pn(a.qa);
    De(d, "RID", "rpc"), De(d, "SID", a.K), De(d, "AID", a.T), De(d, "CI", a.F ? "0" : "1"), !a.F && a.ja && De(d, "TO", a.ja), De(d, "TYPE", "xmlhttp"), Ui(a, d), a.m && a.o && rc(d, a.m, a.o), a.L && (a.g.I = a.L);
    var v = a.g;
    a = a.ia, v.L = 1, v.v = Qs(pn(d)), v.m = null, v.P = !0, xh(v, a);
  }
  t.Za = function() {
    this.C != null && (this.C = null, Xs(this), sc(this), Tt(19));
  };
  function eo(a) {
    a.C != null && (c.clearTimeout(a.C), a.C = null);
  }
  function uf(a, d) {
    var v = null;
    if (a.g == d) {
      eo(a), oc(a), a.g = null;
      var P = 2;
    } else if (tc(a.h, d)) v = d.D, jh(a.h, d), P = 1;
    else return;
    if (a.G != 0) {
      if (d.o) if (P == 1) {
        v = d.m ? d.m.length : 0, d = Date.now() - d.F;
        var M = a.B;
        P = qs(), bt(P, new kh(P, v)), Zs(a);
      } else af(a);
      else if (M = d.s, M == 3 || M == 0 && 0 < d.X || !(P == 1 && uw(a, d) || P == 2 && sc(a))) switch (v && 0 < v.length && (d = a.h, d.i = d.i.concat(v)), M) {
        case 1:
          nr(a, 5);
          break;
        case 4:
          nr(a, 10);
          break;
        case 3:
          nr(a, 6);
          break;
        default:
          nr(a, 2);
      }
    }
  }
  function lf(a, d) {
    let v = a.Ta + Math.floor(Math.random() * a.cb);
    return a.isActive() || (v *= 2), v * d;
  }
  function nr(a, d) {
    if (a.j.info("Error code " + d), d == 2) {
      var v = _(a.fb, a), P = a.Xa;
      const M = !P;
      P = new tr(P || "//www.google.com/images/cleardot.gif"), c.location && c.location.protocol == "http" || Gs(P, "https"), Qs(P), M ? nw(P.toString(), v) : rw(P.toString(), v);
    } else Tt(2);
    a.G = 0, a.l && a.l.sa(d), hf(a), rf(a);
  }
  t.fb = function(a) {
    a ? (this.j.info("Successfully pinged google.com"), Tt(2)) : (this.j.info("Failed to ping google.com"), Tt(1));
  };
  function hf(a) {
    if (a.G = 0, a.ka = [], a.l) {
      const d = Bh(a.h);
      (d.length != 0 || a.i.length != 0) && (m(a.ka, d), m(a.ka, a.i), a.h.i.length = 0, C(a.i), a.i.length = 0), a.l.ra();
    }
  }
  function ff(a, d, v) {
    var P = v instanceof tr ? pn(v) : new tr(v);
    if (P.g != "") d && (P.g = d + "." + P.g), Ws(P, P.s);
    else {
      var M = c.location;
      P = M.protocol, d = d ? d + "." + M.hostname : M.hostname, M = +M.port;
      var F = new tr(null);
      P && Gs(F, P), d && (F.g = d), M && Ws(F, M), v && (F.l = v), P = F;
    }
    return v = a.D, d = a.ya, v && d && De(P, v, d), De(P, "VER", a.la), Ui(a, P), P;
  }
  function df(a, d, v) {
    if (d && !a.J) throw Error("Can't create secondary domain capable XhrIo object.");
    return d = a.Ca && !a.pa ? new Ve(new Li({ eb: v })) : new Ve(a.pa), d.Ha(a.J), d;
  }
  t.isActive = function() {
    return !!this.l && this.l.isActive(this);
  };
  function pf() {
  }
  t = pf.prototype, t.ua = function() {
  }, t.ta = function() {
  }, t.sa = function() {
  }, t.ra = function() {
  }, t.isActive = function() {
    return !0;
  }, t.Na = function() {
  };
  function to() {
  }
  to.prototype.g = function(a, d) {
    return new Ot(a, d);
  };
  function Ot(a, d) {
    dt.call(this), this.g = new nf(d), this.l = a, this.h = d && d.messageUrlParams || null, a = d && d.messageHeaders || null, d && d.clientProtocolHeaderRequired && (a ? a["X-Client-Protocol"] = "webchannel" : a = { "X-Client-Protocol": "webchannel" }), this.g.o = a, a = d && d.initMessageHeaders || null, d && d.messageContentType && (a ? a["X-WebChannel-Content-Type"] = d.messageContentType : a = { "X-WebChannel-Content-Type": d.messageContentType }), d && d.va && (a ? a["X-WebChannel-Client-Profile"] = d.va : a = { "X-WebChannel-Client-Profile": d.va }), this.g.S = a, (a = d && d.Sb) && !E(a) && (this.g.m = a), this.v = d && d.supportsCrossDomainXhr || !1, this.u = d && d.sendRawJson || !1, (d = d && d.httpSessionIdParam) && !E(d) && (this.g.D = d, a = this.h, a !== null && d in a && (a = this.h, d in a && delete a[d])), this.j = new Fr(this);
  }
  I(Ot, dt), Ot.prototype.m = function() {
    this.g.l = this.j, this.v && (this.g.J = !0), this.g.connect(this.l, this.h || void 0);
  }, Ot.prototype.close = function() {
    ic(this.g);
  }, Ot.prototype.o = function(a) {
    var d = this.g;
    if (typeof a == "string") {
      var v = {};
      v.__data__ = a, a = v;
    } else this.u && (v = {}, v.__data__ = Ha(a), a = v);
    d.i.push(new Hv(d.Ya++, a)), d.G == 3 && Zs(d);
  }, Ot.prototype.N = function() {
    this.g.l = null, delete this.j, ic(this.g), delete this.g, Ot.aa.N.call(this);
  };
  function mf(a) {
    Wa.call(this), a.__headers__ && (this.headers = a.__headers__, this.statusCode = a.__status__, delete a.__headers__, delete a.__status__);
    var d = a.__sm__;
    if (d) {
      e: {
        for (const v in d) {
          a = v;
          break e;
        }
        a = void 0;
      }
      (this.i = a) && (a = this.i, d = d !== null && a in d ? d[a] : void 0), this.data = d;
    } else this.data = a;
  }
  I(mf, Wa);
  function gf() {
    Qa.call(this), this.status = 1;
  }
  I(gf, Qa);
  function Fr(a) {
    this.g = a;
  }
  I(Fr, pf), Fr.prototype.ua = function() {
    bt(this.g, "a");
  }, Fr.prototype.ta = function(a) {
    bt(this.g, new mf(a));
  }, Fr.prototype.sa = function(a) {
    bt(this.g, new gf());
  }, Fr.prototype.ra = function() {
    bt(this.g, "b");
  }, to.prototype.createWebChannel = to.prototype.g, Ot.prototype.send = Ot.prototype.o, Ot.prototype.open = Ot.prototype.m, Ot.prototype.close = Ot.prototype.close, qy = function() {
    return new to();
  }, $y = function() {
    return qs();
  }, By = Zn, Ou = { mb: 0, pb: 1, qb: 2, Jb: 3, Ob: 4, Lb: 5, Mb: 6, Kb: 7, Ib: 8, Nb: 9, PROXY: 10, NOPROXY: 11, Gb: 12, Cb: 13, Db: 14, Bb: 15, Eb: 16, Fb: 17, ib: 18, hb: 19, jb: 20 }, zs.NO_ERROR = 0, zs.TIMEOUT = 8, zs.HTTP_ERROR = 6, Oo = zs, Oh.COMPLETE = "complete", jy = Oh, Ah.EventType = Ri, Ri.OPEN = "a", Ri.CLOSE = "b", Ri.ERROR = "c", Ri.MESSAGE = "d", dt.prototype.listen = dt.prototype.K, Wi = Ah, Uy = Li, Ve.prototype.listenOnce = Ve.prototype.L, Ve.prototype.getLastError = Ve.prototype.Ka, Ve.prototype.getLastErrorCode = Ve.prototype.Ba, Ve.prototype.getStatus = Ve.prototype.Z, Ve.prototype.getResponseJson = Ve.prototype.Oa, Ve.prototype.getResponseText = Ve.prototype.oa, Ve.prototype.send = Ve.prototype.ea, Ve.prototype.setWithCredentials = Ve.prototype.Ha, Fy = Ve;
}).apply(typeof go < "u" ? go : typeof self < "u" ? self : typeof window < "u" ? window : {});
const gp = "@firebase/firestore";
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class yt {
  constructor(e) {
    this.uid = e;
  }
  isAuthenticated() {
    return this.uid != null;
  }
  /**
   * Returns a key representing this user, suitable for inclusion in a
   * dictionary.
   */
  toKey() {
    return this.isAuthenticated() ? "uid:" + this.uid : "anonymous-user";
  }
  isEqual(e) {
    return e.uid === this.uid;
  }
}
yt.UNAUTHENTICATED = new yt(null), // TODO(mikelehen): Look into getting a proper uid-equivalent for
// non-FirebaseAuth providers.
yt.GOOGLE_CREDENTIALS = new yt("google-credentials-uid"), yt.FIRST_PARTY = new yt("first-party-uid"), yt.MOCK_USER = new yt("mock-user");
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
let wi = "10.12.5";
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Ar = new El("@firebase/firestore");
function Bi() {
  return Ar.logLevel;
}
function ee(t, ...e) {
  if (Ar.logLevel <= ve.DEBUG) {
    const n = e.map(Vl);
    Ar.debug(`Firestore (${wi}): ${t}`, ...n);
  }
}
function Sn(t, ...e) {
  if (Ar.logLevel <= ve.ERROR) {
    const n = e.map(Vl);
    Ar.error(`Firestore (${wi}): ${t}`, ...n);
  }
}
function ai(t, ...e) {
  if (Ar.logLevel <= ve.WARN) {
    const n = e.map(Vl);
    Ar.warn(`Firestore (${wi}): ${t}`, ...n);
  }
}
function Vl(t) {
  if (typeof t == "string") return t;
  try {
    /**
    * @license
    * Copyright 2020 Google LLC
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    return function(n) {
      return JSON.stringify(n);
    }(t);
  } catch {
    return t;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function ce(t = "Unexpected state") {
  const e = `FIRESTORE (${wi}) INTERNAL ASSERTION FAILED: ` + t;
  throw Sn(e), new Error(e);
}
function Ne(t, e) {
  t || ce();
}
function fe(t, e) {
  return t;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const $ = {
  // Causes are copied from:
  // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
  /** Not an error; returned on success. */
  OK: "ok",
  /** The operation was cancelled (typically by the caller). */
  CANCELLED: "cancelled",
  /** Unknown error or an error from a different error domain. */
  UNKNOWN: "unknown",
  /**
   * Client specified an invalid argument. Note that this differs from
   * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
   * problematic regardless of the state of the system (e.g., a malformed file
   * name).
   */
  INVALID_ARGUMENT: "invalid-argument",
  /**
   * Deadline expired before operation could complete. For operations that
   * change the state of the system, this error may be returned even if the
   * operation has completed successfully. For example, a successful response
   * from a server could have been delayed long enough for the deadline to
   * expire.
   */
  DEADLINE_EXCEEDED: "deadline-exceeded",
  /** Some requested entity (e.g., file or directory) was not found. */
  NOT_FOUND: "not-found",
  /**
   * Some entity that we attempted to create (e.g., file or directory) already
   * exists.
   */
  ALREADY_EXISTS: "already-exists",
  /**
   * The caller does not have permission to execute the specified operation.
   * PERMISSION_DENIED must not be used for rejections caused by exhausting
   * some resource (use RESOURCE_EXHAUSTED instead for those errors).
   * PERMISSION_DENIED must not be used if the caller cannot be identified
   * (use UNAUTHENTICATED instead for those errors).
   */
  PERMISSION_DENIED: "permission-denied",
  /**
   * The request does not have valid authentication credentials for the
   * operation.
   */
  UNAUTHENTICATED: "unauthenticated",
  /**
   * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
   * entire file system is out of space.
   */
  RESOURCE_EXHAUSTED: "resource-exhausted",
  /**
   * Operation was rejected because the system is not in a state required for
   * the operation's execution. For example, directory to be deleted may be
   * non-empty, an rmdir operation is applied to a non-directory, etc.
   *
   * A litmus test that may help a service implementor in deciding
   * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
   *  (a) Use UNAVAILABLE if the client can retry just the failing call.
   *  (b) Use ABORTED if the client should retry at a higher-level
   *      (e.g., restarting a read-modify-write sequence).
   *  (c) Use FAILED_PRECONDITION if the client should not retry until
   *      the system state has been explicitly fixed. E.g., if an "rmdir"
   *      fails because the directory is non-empty, FAILED_PRECONDITION
   *      should be returned since the client should not retry unless
   *      they have first fixed up the directory by deleting files from it.
   *  (d) Use FAILED_PRECONDITION if the client performs conditional
   *      REST Get/Update/Delete on a resource and the resource on the
   *      server does not match the condition. E.g., conflicting
   *      read-modify-write on the same resource.
   */
  FAILED_PRECONDITION: "failed-precondition",
  /**
   * The operation was aborted, typically due to a concurrency issue like
   * sequencer check failures, transaction aborts, etc.
   *
   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
   * and UNAVAILABLE.
   */
  ABORTED: "aborted",
  /**
   * Operation was attempted past the valid range. E.g., seeking or reading
   * past end of file.
   *
   * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
   * if the system state changes. For example, a 32-bit file system will
   * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
   * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
   * an offset past the current file size.
   *
   * There is a fair bit of overlap between FAILED_PRECONDITION and
   * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
   * when it applies so that callers who are iterating through a space can
   * easily look for an OUT_OF_RANGE error to detect when they are done.
   */
  OUT_OF_RANGE: "out-of-range",
  /** Operation is not implemented or not supported/enabled in this service. */
  UNIMPLEMENTED: "unimplemented",
  /**
   * Internal errors. Means some invariants expected by underlying System has
   * been broken. If you see one of these errors, Something is very broken.
   */
  INTERNAL: "internal",
  /**
   * The service is currently unavailable. This is a most likely a transient
   * condition and may be corrected by retrying with a backoff.
   *
   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
   * and UNAVAILABLE.
   */
  UNAVAILABLE: "unavailable",
  /** Unrecoverable data loss or corruption. */
  DATA_LOSS: "data-loss"
};
class X extends ln {
  /** @hideconstructor */
  constructor(e, n) {
    super(e, n), this.code = e, this.message = n, // HACK: We write a toString property directly because Error is not a real
    // class and so inheritance does not work correctly. We could alternatively
    // do the same "back-door inheritance" trick that FirebaseError does.
    this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class zn {
  constructor() {
    this.promise = new Promise((e, n) => {
      this.resolve = e, this.reject = n;
    });
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class zy {
  constructor(e, n) {
    this.user = n, this.type = "OAuth", this.headers = /* @__PURE__ */ new Map(), this.headers.set("Authorization", `Bearer ${e}`);
  }
}
class DP {
  getToken() {
    return Promise.resolve(null);
  }
  invalidateToken() {
  }
  start(e, n) {
    e.enqueueRetryable(() => n(yt.UNAUTHENTICATED));
  }
  shutdown() {
  }
}
class xP {
  constructor(e) {
    this.token = e, /**
    * Stores the listener registered with setChangeListener()
    * This isn't actually necessary since the UID never changes, but we use this
    * to verify the listen contract is adhered to in tests.
    */
    this.changeListener = null;
  }
  getToken() {
    return Promise.resolve(this.token);
  }
  invalidateToken() {
  }
  start(e, n) {
    this.changeListener = n, // Fire with initial user.
    e.enqueueRetryable(() => n(this.token.user));
  }
  shutdown() {
    this.changeListener = null;
  }
}
class LP {
  constructor(e) {
    this.t = e, /** Tracks the current User. */
    this.currentUser = yt.UNAUTHENTICATED, /**
    * Counter used to detect if the token changed while a getToken request was
    * outstanding.
    */
    this.i = 0, this.forceRefresh = !1, this.auth = null;
  }
  start(e, n) {
    let r = this.i;
    const i = (u) => this.i !== r ? (r = this.i, n(u)) : Promise.resolve();
    let s = new zn();
    this.o = () => {
      this.i++, this.currentUser = this.u(), s.resolve(), s = new zn(), e.enqueueRetryable(() => i(this.currentUser));
    };
    const o = () => {
      const u = s;
      e.enqueueRetryable(async () => {
        await u.promise, await i(this.currentUser);
      });
    }, c = (u) => {
      ee("FirebaseAuthCredentialsProvider", "Auth detected"), this.auth = u, this.auth.addAuthTokenListener(this.o), o();
    };
    this.t.onInit((u) => c(u)), // Our users can initialize Auth right after Firestore, so we give it
    // a chance to register itself with the component framework before we
    // determine whether to start up in unauthenticated mode.
    setTimeout(() => {
      if (!this.auth) {
        const u = this.t.getImmediate({
          optional: !0
        });
        u ? c(u) : (
          // If auth is still not available, proceed with `null` user
          (ee("FirebaseAuthCredentialsProvider", "Auth not yet detected"), s.resolve(), s = new zn())
        );
      }
    }, 0), o();
  }
  getToken() {
    const e = this.i, n = this.forceRefresh;
    return this.forceRefresh = !1, this.auth ? this.auth.getToken(n).then((r) => (
      // Cancel the request since the token changed while the request was
      // outstanding so the response is potentially for a previous user (which
      // user, we can't be sure).
      this.i !== e ? (ee("FirebaseAuthCredentialsProvider", "getToken aborted due to token change."), this.getToken()) : r ? (Ne(typeof r.accessToken == "string"), new zy(r.accessToken, this.currentUser)) : null
    )) : Promise.resolve(null);
  }
  invalidateToken() {
    this.forceRefresh = !0;
  }
  shutdown() {
    this.auth && this.auth.removeAuthTokenListener(this.o);
  }
  // Auth.getUid() can return null even with a user logged in. It is because
  // getUid() is synchronous, but the auth code populating Uid is asynchronous.
  // This method should only be called in the AuthTokenListener callback
  // to guarantee to get the actual user.
  u() {
    const e = this.auth && this.auth.getUid();
    return Ne(e === null || typeof e == "string"), new yt(e);
  }
}
class MP {
  constructor(e, n, r) {
    this.l = e, this.h = n, this.P = r, this.type = "FirstParty", this.user = yt.FIRST_PARTY, this.I = /* @__PURE__ */ new Map();
  }
  /**
   * Gets an authorization token, using a provided factory function, or return
   * null.
   */
  T() {
    return this.P ? this.P() : null;
  }
  get headers() {
    this.I.set("X-Goog-AuthUser", this.l);
    const e = this.T();
    return e && this.I.set("Authorization", e), this.h && this.I.set("X-Goog-Iam-Authorization-Token", this.h), this.I;
  }
}
class VP {
  constructor(e, n, r) {
    this.l = e, this.h = n, this.P = r;
  }
  getToken() {
    return Promise.resolve(new MP(this.l, this.h, this.P));
  }
  start(e, n) {
    e.enqueueRetryable(() => n(yt.FIRST_PARTY));
  }
  shutdown() {
  }
  invalidateToken() {
  }
}
class FP {
  constructor(e) {
    this.value = e, this.type = "AppCheck", this.headers = /* @__PURE__ */ new Map(), e && e.length > 0 && this.headers.set("x-firebase-appcheck", this.value);
  }
}
class UP {
  constructor(e) {
    this.A = e, this.forceRefresh = !1, this.appCheck = null, this.R = null;
  }
  start(e, n) {
    const r = (s) => {
      s.error != null && ee("FirebaseAppCheckTokenProvider", `Error getting App Check token; using placeholder token instead. Error: ${s.error.message}`);
      const o = s.token !== this.R;
      return this.R = s.token, ee("FirebaseAppCheckTokenProvider", `Received ${o ? "new" : "existing"} token.`), o ? n(s.token) : Promise.resolve();
    };
    this.o = (s) => {
      e.enqueueRetryable(() => r(s));
    };
    const i = (s) => {
      ee("FirebaseAppCheckTokenProvider", "AppCheck detected"), this.appCheck = s, this.appCheck.addTokenListener(this.o);
    };
    this.A.onInit((s) => i(s)), // Our users can initialize AppCheck after Firestore, so we give it
    // a chance to register itself with the component framework.
    setTimeout(() => {
      if (!this.appCheck) {
        const s = this.A.getImmediate({
          optional: !0
        });
        s ? i(s) : (
          // If AppCheck is still not available, proceed without it.
          ee("FirebaseAppCheckTokenProvider", "AppCheck not yet detected")
        );
      }
    }, 0);
  }
  getToken() {
    const e = this.forceRefresh;
    return this.forceRefresh = !1, this.appCheck ? this.appCheck.getToken(e).then((n) => n ? (Ne(typeof n.token == "string"), this.R = n.token, new FP(n.token)) : null) : Promise.resolve(null);
  }
  invalidateToken() {
    this.forceRefresh = !0;
  }
  shutdown() {
    this.appCheck && this.appCheck.removeTokenListener(this.o);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function jP(t) {
  const e = (
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    typeof self < "u" && (self.crypto || self.msCrypto)
  ), n = new Uint8Array(t);
  if (e && typeof e.getRandomValues == "function") e.getRandomValues(n);
  else
    for (let r = 0; r < t; r++) n[r] = Math.floor(256 * Math.random());
  return n;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Ky {
  static newId() {
    const e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", n = Math.floor(256 / e.length) * e.length;
    let r = "";
    for (; r.length < 20; ) {
      const i = jP(40);
      for (let s = 0; s < i.length; ++s)
        r.length < 20 && i[s] < n && (r += e.charAt(i[s] % e.length));
    }
    return r;
  }
}
function be(t, e) {
  return t < e ? -1 : t > e ? 1 : 0;
}
function ci(t, e, n) {
  return t.length === e.length && t.every((r, i) => n(r, e[i]));
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class et {
  /**
   * Creates a new timestamp.
   *
   * @param seconds - The number of seconds of UTC time since Unix epoch
   *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
   *     9999-12-31T23:59:59Z inclusive.
   * @param nanoseconds - The non-negative fractions of a second at nanosecond
   *     resolution. Negative second values with fractions must still have
   *     non-negative nanoseconds values that count forward in time. Must be
   *     from 0 to 999,999,999 inclusive.
   */
  constructor(e, n) {
    if (this.seconds = e, this.nanoseconds = n, n < 0) throw new X($.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + n);
    if (n >= 1e9) throw new X($.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + n);
    if (e < -62135596800) throw new X($.INVALID_ARGUMENT, "Timestamp seconds out of range: " + e);
    if (e >= 253402300800) throw new X($.INVALID_ARGUMENT, "Timestamp seconds out of range: " + e);
  }
  /**
   * Creates a new timestamp with the current date, with millisecond precision.
   *
   * @returns a new timestamp representing the current date.
   */
  static now() {
    return et.fromMillis(Date.now());
  }
  /**
   * Creates a new timestamp from the given date.
   *
   * @param date - The date to initialize the `Timestamp` from.
   * @returns A new `Timestamp` representing the same point in time as the given
   *     date.
   */
  static fromDate(e) {
    return et.fromMillis(e.getTime());
  }
  /**
   * Creates a new timestamp from the given number of milliseconds.
   *
   * @param milliseconds - Number of milliseconds since Unix epoch
   *     1970-01-01T00:00:00Z.
   * @returns A new `Timestamp` representing the same point in time as the given
   *     number of milliseconds.
   */
  static fromMillis(e) {
    const n = Math.floor(e / 1e3), r = Math.floor(1e6 * (e - 1e3 * n));
    return new et(n, r);
  }
  /**
   * Converts a `Timestamp` to a JavaScript `Date` object. This conversion
   * causes a loss of precision since `Date` objects only support millisecond
   * precision.
   *
   * @returns JavaScript `Date` object representing the same point in time as
   *     this `Timestamp`, with millisecond precision.
   */
  toDate() {
    return new Date(this.toMillis());
  }
  /**
   * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
   * epoch). This operation causes a loss of precision.
   *
   * @returns The point in time corresponding to this timestamp, represented as
   *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
   */
  toMillis() {
    return 1e3 * this.seconds + this.nanoseconds / 1e6;
  }
  _compareTo(e) {
    return this.seconds === e.seconds ? be(this.nanoseconds, e.nanoseconds) : be(this.seconds, e.seconds);
  }
  /**
   * Returns true if this `Timestamp` is equal to the provided one.
   *
   * @param other - The `Timestamp` to compare against.
   * @returns true if this `Timestamp` is equal to the provided one.
   */
  isEqual(e) {
    return e.seconds === this.seconds && e.nanoseconds === this.nanoseconds;
  }
  /** Returns a textual representation of this `Timestamp`. */
  toString() {
    return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
  }
  /** Returns a JSON-serializable representation of this `Timestamp`. */
  toJSON() {
    return {
      seconds: this.seconds,
      nanoseconds: this.nanoseconds
    };
  }
  /**
   * Converts this object to a primitive string, which allows `Timestamp` objects
   * to be compared using the `>`, `<=`, `>=` and `>` operators.
   */
  valueOf() {
    const e = this.seconds - -62135596800;
    return String(e).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class he {
  constructor(e) {
    this.timestamp = e;
  }
  static fromTimestamp(e) {
    return new he(e);
  }
  static min() {
    return new he(new et(0, 0));
  }
  static max() {
    return new he(new et(253402300799, 999999999));
  }
  compareTo(e) {
    return this.timestamp._compareTo(e.timestamp);
  }
  isEqual(e) {
    return this.timestamp.isEqual(e.timestamp);
  }
  /** Returns a number representation of the version for use in spec tests. */
  toMicroseconds() {
    return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
  }
  toString() {
    return "SnapshotVersion(" + this.timestamp.toString() + ")";
  }
  toTimestamp() {
    return this.timestamp;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ps {
  constructor(e, n, r) {
    n === void 0 ? n = 0 : n > e.length && ce(), r === void 0 ? r = e.length - n : r > e.length - n && ce(), this.segments = e, this.offset = n, this.len = r;
  }
  get length() {
    return this.len;
  }
  isEqual(e) {
    return ps.comparator(this, e) === 0;
  }
  child(e) {
    const n = this.segments.slice(this.offset, this.limit());
    return e instanceof ps ? e.forEach((r) => {
      n.push(r);
    }) : n.push(e), this.construct(n);
  }
  /** The index of one past the last segment of the path. */
  limit() {
    return this.offset + this.length;
  }
  popFirst(e) {
    return e = e === void 0 ? 1 : e, this.construct(this.segments, this.offset + e, this.length - e);
  }
  popLast() {
    return this.construct(this.segments, this.offset, this.length - 1);
  }
  firstSegment() {
    return this.segments[this.offset];
  }
  lastSegment() {
    return this.get(this.length - 1);
  }
  get(e) {
    return this.segments[this.offset + e];
  }
  isEmpty() {
    return this.length === 0;
  }
  isPrefixOf(e) {
    if (e.length < this.length) return !1;
    for (let n = 0; n < this.length; n++) if (this.get(n) !== e.get(n)) return !1;
    return !0;
  }
  isImmediateParentOf(e) {
    if (this.length + 1 !== e.length) return !1;
    for (let n = 0; n < this.length; n++) if (this.get(n) !== e.get(n)) return !1;
    return !0;
  }
  forEach(e) {
    for (let n = this.offset, r = this.limit(); n < r; n++) e(this.segments[n]);
  }
  toArray() {
    return this.segments.slice(this.offset, this.limit());
  }
  static comparator(e, n) {
    const r = Math.min(e.length, n.length);
    for (let i = 0; i < r; i++) {
      const s = e.get(i), o = n.get(i);
      if (s < o) return -1;
      if (s > o) return 1;
    }
    return e.length < n.length ? -1 : e.length > n.length ? 1 : 0;
  }
}
class xe extends ps {
  construct(e, n, r) {
    return new xe(e, n, r);
  }
  canonicalString() {
    return this.toArray().join("/");
  }
  toString() {
    return this.canonicalString();
  }
  /**
   * Returns a string representation of this path
   * where each path segment has been encoded with
   * `encodeURIComponent`.
   */
  toUriEncodedString() {
    return this.toArray().map(encodeURIComponent).join("/");
  }
  /**
   * Creates a resource path from the given slash-delimited string. If multiple
   * arguments are provided, all components are combined. Leading and trailing
   * slashes from all components are ignored.
   */
  static fromString(...e) {
    const n = [];
    for (const r of e) {
      if (r.indexOf("//") >= 0) throw new X($.INVALID_ARGUMENT, `Invalid segment (${r}). Paths must not contain // in them.`);
      n.push(...r.split("/").filter((i) => i.length > 0));
    }
    return new xe(n);
  }
  static emptyPath() {
    return new xe([]);
  }
}
const BP = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
class ct extends ps {
  construct(e, n, r) {
    return new ct(e, n, r);
  }
  /**
   * Returns true if the string could be used as a segment in a field path
   * without escaping.
   */
  static isValidIdentifier(e) {
    return BP.test(e);
  }
  canonicalString() {
    return this.toArray().map((e) => (e = e.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), ct.isValidIdentifier(e) || (e = "`" + e + "`"), e)).join(".");
  }
  toString() {
    return this.canonicalString();
  }
  /**
   * Returns true if this field references the key of a document.
   */
  isKeyField() {
    return this.length === 1 && this.get(0) === "__name__";
  }
  /**
   * The field designating the key of a document.
   */
  static keyField() {
    return new ct(["__name__"]);
  }
  /**
   * Parses a field string from the given server-formatted string.
   *
   * - Splitting the empty string is not allowed (for now at least).
   * - Empty segments within the string (e.g. if there are two consecutive
   *   separators) are not allowed.
   *
   * TODO(b/37244157): we should make this more strict. Right now, it allows
   * non-identifier path components, even if they aren't escaped.
   */
  static fromServerFormat(e) {
    const n = [];
    let r = "", i = 0;
    const s = () => {
      if (r.length === 0) throw new X($.INVALID_ARGUMENT, `Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);
      n.push(r), r = "";
    };
    let o = !1;
    for (; i < e.length; ) {
      const c = e[i];
      if (c === "\\") {
        if (i + 1 === e.length) throw new X($.INVALID_ARGUMENT, "Path has trailing escape character: " + e);
        const u = e[i + 1];
        if (u !== "\\" && u !== "." && u !== "`") throw new X($.INVALID_ARGUMENT, "Path has invalid escape sequence: " + e);
        r += u, i += 2;
      } else c === "`" ? (o = !o, i++) : c !== "." || o ? (r += c, i++) : (s(), i++);
    }
    if (s(), o) throw new X($.INVALID_ARGUMENT, "Unterminated ` in path: " + e);
    return new ct(n);
  }
  static emptyPath() {
    return new ct([]);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class se {
  constructor(e) {
    this.path = e;
  }
  static fromPath(e) {
    return new se(xe.fromString(e));
  }
  static fromName(e) {
    return new se(xe.fromString(e).popFirst(5));
  }
  static empty() {
    return new se(xe.emptyPath());
  }
  get collectionGroup() {
    return this.path.popLast().lastSegment();
  }
  /** Returns true if the document is in the specified collectionId. */
  hasCollectionId(e) {
    return this.path.length >= 2 && this.path.get(this.path.length - 2) === e;
  }
  /** Returns the collection group (i.e. the name of the parent collection) for this key. */
  getCollectionGroup() {
    return this.path.get(this.path.length - 2);
  }
  /** Returns the fully qualified path to the parent collection. */
  getCollectionPath() {
    return this.path.popLast();
  }
  isEqual(e) {
    return e !== null && xe.comparator(this.path, e.path) === 0;
  }
  toString() {
    return this.path.toString();
  }
  static comparator(e, n) {
    return xe.comparator(e.path, n.path);
  }
  static isDocumentKey(e) {
    return e.length % 2 == 0;
  }
  /**
   * Creates and returns a new document key with the given segments.
   *
   * @param segments - The segments of the path to the document
   * @returns A new instance of DocumentKey
   */
  static fromSegments(e) {
    return new se(new xe(e.slice()));
  }
}
function $P(t, e) {
  const n = t.toTimestamp().seconds, r = t.toTimestamp().nanoseconds + 1, i = he.fromTimestamp(r === 1e9 ? new et(n + 1, 0) : new et(n, r));
  return new Qn(i, se.empty(), e);
}
function qP(t) {
  return new Qn(t.readTime, t.key, -1);
}
class Qn {
  constructor(e, n, r) {
    this.readTime = e, this.documentKey = n, this.largestBatchId = r;
  }
  /** Returns an offset that sorts before all regular offsets. */
  static min() {
    return new Qn(he.min(), se.empty(), -1);
  }
  /** Returns an offset that sorts after all regular offsets. */
  static max() {
    return new Qn(he.max(), se.empty(), -1);
  }
}
function zP(t, e) {
  let n = t.readTime.compareTo(e.readTime);
  return n !== 0 ? n : (n = se.comparator(t.documentKey, e.documentKey), n !== 0 ? n : be(t.largestBatchId, e.largestBatchId));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const KP = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";
class HP {
  constructor() {
    this.onCommittedListeners = [];
  }
  addOnCommittedListener(e) {
    this.onCommittedListeners.push(e);
  }
  raiseOnCommittedEvent() {
    this.onCommittedListeners.forEach((e) => e());
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function Ds(t) {
  if (t.code !== $.FAILED_PRECONDITION || t.message !== KP) throw t;
  ee("LocalStore", "Unexpectedly lost primary lease");
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class z {
  constructor(e) {
    this.nextCallback = null, this.catchCallback = null, // When the operation resolves, we'll set result or error and mark isDone.
    this.result = void 0, this.error = void 0, this.isDone = !1, // Set to true when .then() or .catch() are called and prevents additional
    // chaining.
    this.callbackAttached = !1, e((n) => {
      this.isDone = !0, this.result = n, this.nextCallback && // value should be defined unless T is Void, but we can't express
      // that in the type system.
      this.nextCallback(n);
    }, (n) => {
      this.isDone = !0, this.error = n, this.catchCallback && this.catchCallback(n);
    });
  }
  catch(e) {
    return this.next(void 0, e);
  }
  next(e, n) {
    return this.callbackAttached && ce(), this.callbackAttached = !0, this.isDone ? this.error ? this.wrapFailure(n, this.error) : this.wrapSuccess(e, this.result) : new z((r, i) => {
      this.nextCallback = (s) => {
        this.wrapSuccess(e, s).next(r, i);
      }, this.catchCallback = (s) => {
        this.wrapFailure(n, s).next(r, i);
      };
    });
  }
  toPromise() {
    return new Promise((e, n) => {
      this.next(e, n);
    });
  }
  wrapUserFunction(e) {
    try {
      const n = e();
      return n instanceof z ? n : z.resolve(n);
    } catch (n) {
      return z.reject(n);
    }
  }
  wrapSuccess(e, n) {
    return e ? this.wrapUserFunction(() => e(n)) : z.resolve(n);
  }
  wrapFailure(e, n) {
    return e ? this.wrapUserFunction(() => e(n)) : z.reject(n);
  }
  static resolve(e) {
    return new z((n, r) => {
      n(e);
    });
  }
  static reject(e) {
    return new z((n, r) => {
      r(e);
    });
  }
  static waitFor(e) {
    return new z((n, r) => {
      let i = 0, s = 0, o = !1;
      e.forEach((c) => {
        ++i, c.next(() => {
          ++s, o && s === i && n();
        }, (u) => r(u));
      }), o = !0, s === i && n();
    });
  }
  /**
   * Given an array of predicate functions that asynchronously evaluate to a
   * boolean, implements a short-circuiting `or` between the results. Predicates
   * will be evaluated until one of them returns `true`, then stop. The final
   * result will be whether any of them returned `true`.
   */
  static or(e) {
    let n = z.resolve(!1);
    for (const r of e) n = n.next((i) => i ? z.resolve(i) : r());
    return n;
  }
  static forEach(e, n) {
    const r = [];
    return e.forEach((i, s) => {
      r.push(n.call(this, i, s));
    }), this.waitFor(r);
  }
  /**
   * Concurrently map all array elements through asynchronous function.
   */
  static mapArray(e, n) {
    return new z((r, i) => {
      const s = e.length, o = new Array(s);
      let c = 0;
      for (let u = 0; u < s; u++) {
        const l = u;
        n(e[l]).next((f) => {
          o[l] = f, ++c, c === s && r(o);
        }, (f) => i(f));
      }
    });
  }
  /**
   * An alternative to recursive PersistencePromise calls, that avoids
   * potential memory problems from unbounded chains of promises.
   *
   * The `action` will be called repeatedly while `condition` is true.
   */
  static doWhile(e, n) {
    return new z((r, i) => {
      const s = () => {
        e() === !0 ? n().next(() => {
          s();
        }, i) : r();
      };
      s();
    });
  }
}
function GP(t) {
  const e = t.match(/Android ([\d.]+)/i), n = e ? e[1].split(".").slice(0, 2).join(".") : "-1";
  return Number(n);
}
function xs(t) {
  return t.name === "IndexedDbTransactionError";
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Fl {
  constructor(e, n) {
    this.previousValue = e, n && (n.sequenceNumberHandler = (r) => this.ie(r), this.se = (r) => n.writeSequenceNumber(r));
  }
  ie(e) {
    return this.previousValue = Math.max(e, this.previousValue), this.previousValue;
  }
  next() {
    const e = ++this.previousValue;
    return this.se && this.se(e), e;
  }
}
Fl.oe = -1;
function Na(t) {
  return t == null;
}
function ta(t) {
  return t === 0 && 1 / t == -1 / 0;
}
function WP(t) {
  return typeof t == "number" && Number.isInteger(t) && !ta(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function yp(t) {
  let e = 0;
  for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && e++;
  return e;
}
function Ei(t, e) {
  for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && e(n, t[n]);
}
function Hy(t) {
  for (const e in t) if (Object.prototype.hasOwnProperty.call(t, e)) return !1;
  return !0;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Me {
  constructor(e, n) {
    this.comparator = e, this.root = n || at.EMPTY;
  }
  // Returns a copy of the map, with the specified key/value added or replaced.
  insert(e, n) {
    return new Me(this.comparator, this.root.insert(e, n, this.comparator).copy(null, null, at.BLACK, null, null));
  }
  // Returns a copy of the map, with the specified key removed.
  remove(e) {
    return new Me(this.comparator, this.root.remove(e, this.comparator).copy(null, null, at.BLACK, null, null));
  }
  // Returns the value of the node with the given key, or null.
  get(e) {
    let n = this.root;
    for (; !n.isEmpty(); ) {
      const r = this.comparator(e, n.key);
      if (r === 0) return n.value;
      r < 0 ? n = n.left : r > 0 && (n = n.right);
    }
    return null;
  }
  // Returns the index of the element in this sorted map, or -1 if it doesn't
  // exist.
  indexOf(e) {
    let n = 0, r = this.root;
    for (; !r.isEmpty(); ) {
      const i = this.comparator(e, r.key);
      if (i === 0) return n + r.left.size;
      i < 0 ? r = r.left : (
        // Count all nodes left of the node plus the node itself
        (n += r.left.size + 1, r = r.right)
      );
    }
    return -1;
  }
  isEmpty() {
    return this.root.isEmpty();
  }
  // Returns the total number of nodes in the map.
  get size() {
    return this.root.size;
  }
  // Returns the minimum key in the map.
  minKey() {
    return this.root.minKey();
  }
  // Returns the maximum key in the map.
  maxKey() {
    return this.root.maxKey();
  }
  // Traverses the map in key order and calls the specified action function
  // for each key/value pair. If action returns true, traversal is aborted.
  // Returns the first truthy value returned by action, or the last falsey
  // value returned by action.
  inorderTraversal(e) {
    return this.root.inorderTraversal(e);
  }
  forEach(e) {
    this.inorderTraversal((n, r) => (e(n, r), !1));
  }
  toString() {
    const e = [];
    return this.inorderTraversal((n, r) => (e.push(`${n}:${r}`), !1)), `{${e.join(", ")}}`;
  }
  // Traverses the map in reverse key order and calls the specified action
  // function for each key/value pair. If action returns true, traversal is
  // aborted.
  // Returns the first truthy value returned by action, or the last falsey
  // value returned by action.
  reverseTraversal(e) {
    return this.root.reverseTraversal(e);
  }
  // Returns an iterator over the SortedMap.
  getIterator() {
    return new yo(this.root, null, this.comparator, !1);
  }
  getIteratorFrom(e) {
    return new yo(this.root, e, this.comparator, !1);
  }
  getReverseIterator() {
    return new yo(this.root, null, this.comparator, !0);
  }
  getReverseIteratorFrom(e) {
    return new yo(this.root, e, this.comparator, !0);
  }
}
class yo {
  constructor(e, n, r, i) {
    this.isReverse = i, this.nodeStack = [];
    let s = 1;
    for (; !e.isEmpty(); ) if (s = n ? r(e.key, n) : 1, // flip the comparison if we're going in reverse
    n && i && (s *= -1), s < 0)
      e = this.isReverse ? e.left : e.right;
    else {
      if (s === 0) {
        this.nodeStack.push(e);
        break;
      }
      this.nodeStack.push(e), e = this.isReverse ? e.right : e.left;
    }
  }
  getNext() {
    let e = this.nodeStack.pop();
    const n = {
      key: e.key,
      value: e.value
    };
    if (this.isReverse) for (e = e.left; !e.isEmpty(); ) this.nodeStack.push(e), e = e.right;
    else for (e = e.right; !e.isEmpty(); ) this.nodeStack.push(e), e = e.left;
    return n;
  }
  hasNext() {
    return this.nodeStack.length > 0;
  }
  peek() {
    if (this.nodeStack.length === 0) return null;
    const e = this.nodeStack[this.nodeStack.length - 1];
    return {
      key: e.key,
      value: e.value
    };
  }
}
class at {
  constructor(e, n, r, i, s) {
    this.key = e, this.value = n, this.color = r ?? at.RED, this.left = i ?? at.EMPTY, this.right = s ?? at.EMPTY, this.size = this.left.size + 1 + this.right.size;
  }
  // Returns a copy of the current node, optionally replacing pieces of it.
  copy(e, n, r, i, s) {
    return new at(e ?? this.key, n ?? this.value, r ?? this.color, i ?? this.left, s ?? this.right);
  }
  isEmpty() {
    return !1;
  }
  // Traverses the tree in key order and calls the specified action function
  // for each node. If action returns true, traversal is aborted.
  // Returns the first truthy value returned by action, or the last falsey
  // value returned by action.
  inorderTraversal(e) {
    return this.left.inorderTraversal(e) || e(this.key, this.value) || this.right.inorderTraversal(e);
  }
  // Traverses the tree in reverse key order and calls the specified action
  // function for each node. If action returns true, traversal is aborted.
  // Returns the first truthy value returned by action, or the last falsey
  // value returned by action.
  reverseTraversal(e) {
    return this.right.reverseTraversal(e) || e(this.key, this.value) || this.left.reverseTraversal(e);
  }
  // Returns the minimum node in the tree.
  min() {
    return this.left.isEmpty() ? this : this.left.min();
  }
  // Returns the maximum key in the tree.
  minKey() {
    return this.min().key;
  }
  // Returns the maximum key in the tree.
  maxKey() {
    return this.right.isEmpty() ? this.key : this.right.maxKey();
  }
  // Returns new tree, with the key/value added.
  insert(e, n, r) {
    let i = this;
    const s = r(e, i.key);
    return i = s < 0 ? i.copy(null, null, null, i.left.insert(e, n, r), null) : s === 0 ? i.copy(null, n, null, null, null) : i.copy(null, null, null, null, i.right.insert(e, n, r)), i.fixUp();
  }
  removeMin() {
    if (this.left.isEmpty()) return at.EMPTY;
    let e = this;
    return e.left.isRed() || e.left.left.isRed() || (e = e.moveRedLeft()), e = e.copy(null, null, null, e.left.removeMin(), null), e.fixUp();
  }
  // Returns new tree, with the specified item removed.
  remove(e, n) {
    let r, i = this;
    if (n(e, i.key) < 0) i.left.isEmpty() || i.left.isRed() || i.left.left.isRed() || (i = i.moveRedLeft()), i = i.copy(null, null, null, i.left.remove(e, n), null);
    else {
      if (i.left.isRed() && (i = i.rotateRight()), i.right.isEmpty() || i.right.isRed() || i.right.left.isRed() || (i = i.moveRedRight()), n(e, i.key) === 0) {
        if (i.right.isEmpty()) return at.EMPTY;
        r = i.right.min(), i = i.copy(r.key, r.value, null, null, i.right.removeMin());
      }
      i = i.copy(null, null, null, null, i.right.remove(e, n));
    }
    return i.fixUp();
  }
  isRed() {
    return this.color;
  }
  // Returns new tree after performing any needed rotations.
  fixUp() {
    let e = this;
    return e.right.isRed() && !e.left.isRed() && (e = e.rotateLeft()), e.left.isRed() && e.left.left.isRed() && (e = e.rotateRight()), e.left.isRed() && e.right.isRed() && (e = e.colorFlip()), e;
  }
  moveRedLeft() {
    let e = this.colorFlip();
    return e.right.left.isRed() && (e = e.copy(null, null, null, null, e.right.rotateRight()), e = e.rotateLeft(), e = e.colorFlip()), e;
  }
  moveRedRight() {
    let e = this.colorFlip();
    return e.left.left.isRed() && (e = e.rotateRight(), e = e.colorFlip()), e;
  }
  rotateLeft() {
    const e = this.copy(null, null, at.RED, null, this.right.left);
    return this.right.copy(null, null, this.color, e, null);
  }
  rotateRight() {
    const e = this.copy(null, null, at.RED, this.left.right, null);
    return this.left.copy(null, null, this.color, null, e);
  }
  colorFlip() {
    const e = this.left.copy(null, null, !this.left.color, null, null), n = this.right.copy(null, null, !this.right.color, null, null);
    return this.copy(null, null, !this.color, e, n);
  }
  // For testing.
  checkMaxDepth() {
    const e = this.check();
    return Math.pow(2, e) <= this.size + 1;
  }
  // In a balanced RB tree, the black-depth (number of black nodes) from root to
  // leaves is equal on both sides.  This function verifies that or asserts.
  check() {
    if (this.isRed() && this.left.isRed() || this.right.isRed()) throw ce();
    const e = this.left.check();
    if (e !== this.right.check()) throw ce();
    return e + (this.isRed() ? 0 : 1);
  }
}
at.EMPTY = null, at.RED = !0, at.BLACK = !1;
at.EMPTY = new // Represents an empty node (a leaf node in the Red-Black Tree).
class {
  constructor() {
    this.size = 0;
  }
  get key() {
    throw ce();
  }
  get value() {
    throw ce();
  }
  get color() {
    throw ce();
  }
  get left() {
    throw ce();
  }
  get right() {
    throw ce();
  }
  // Returns a copy of the current node.
  copy(e, n, r, i, s) {
    return this;
  }
  // Returns a copy of the tree, with the specified key/value added.
  insert(e, n, r) {
    return new at(e, n);
  }
  // Returns a copy of the tree, with the specified key removed.
  remove(e, n) {
    return this;
  }
  isEmpty() {
    return !0;
  }
  inorderTraversal(e) {
    return !1;
  }
  reverseTraversal(e) {
    return !1;
  }
  minKey() {
    return null;
  }
  maxKey() {
    return null;
  }
  isRed() {
    return !1;
  }
  // For testing.
  checkMaxDepth() {
    return !0;
  }
  check() {
    return 0;
  }
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ut {
  constructor(e) {
    this.comparator = e, this.data = new Me(this.comparator);
  }
  has(e) {
    return this.data.get(e) !== null;
  }
  first() {
    return this.data.minKey();
  }
  last() {
    return this.data.maxKey();
  }
  get size() {
    return this.data.size;
  }
  indexOf(e) {
    return this.data.indexOf(e);
  }
  /** Iterates elements in order defined by "comparator" */
  forEach(e) {
    this.data.inorderTraversal((n, r) => (e(n), !1));
  }
  /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */
  forEachInRange(e, n) {
    const r = this.data.getIteratorFrom(e[0]);
    for (; r.hasNext(); ) {
      const i = r.getNext();
      if (this.comparator(i.key, e[1]) >= 0) return;
      n(i.key);
    }
  }
  /**
   * Iterates over `elem`s such that: start &lt;= elem until false is returned.
   */
  forEachWhile(e, n) {
    let r;
    for (r = n !== void 0 ? this.data.getIteratorFrom(n) : this.data.getIterator(); r.hasNext(); )
      if (!e(r.getNext().key)) return;
  }
  /** Finds the least element greater than or equal to `elem`. */
  firstAfterOrEqual(e) {
    const n = this.data.getIteratorFrom(e);
    return n.hasNext() ? n.getNext().key : null;
  }
  getIterator() {
    return new _p(this.data.getIterator());
  }
  getIteratorFrom(e) {
    return new _p(this.data.getIteratorFrom(e));
  }
  /** Inserts or updates an element */
  add(e) {
    return this.copy(this.data.remove(e).insert(e, !0));
  }
  /** Deletes an element */
  delete(e) {
    return this.has(e) ? this.copy(this.data.remove(e)) : this;
  }
  isEmpty() {
    return this.data.isEmpty();
  }
  unionWith(e) {
    let n = this;
    return n.size < e.size && (n = e, e = this), e.forEach((r) => {
      n = n.add(r);
    }), n;
  }
  isEqual(e) {
    if (!(e instanceof ut) || this.size !== e.size) return !1;
    const n = this.data.getIterator(), r = e.data.getIterator();
    for (; n.hasNext(); ) {
      const i = n.getNext().key, s = r.getNext().key;
      if (this.comparator(i, s) !== 0) return !1;
    }
    return !0;
  }
  toArray() {
    const e = [];
    return this.forEach((n) => {
      e.push(n);
    }), e;
  }
  toString() {
    const e = [];
    return this.forEach((n) => e.push(n)), "SortedSet(" + e.toString() + ")";
  }
  copy(e) {
    const n = new ut(this.comparator);
    return n.data = e, n;
  }
}
class _p {
  constructor(e) {
    this.iter = e;
  }
  getNext() {
    return this.iter.getNext().key;
  }
  hasNext() {
    return this.iter.hasNext();
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Wt {
  constructor(e) {
    this.fields = e, // TODO(dimond): validation of FieldMask
    // Sort the field mask to support `FieldMask.isEqual()` and assert below.
    e.sort(ct.comparator);
  }
  static empty() {
    return new Wt([]);
  }
  /**
   * Returns a new FieldMask object that is the result of adding all the given
   * fields paths to this field mask.
   */
  unionWith(e) {
    let n = new ut(ct.comparator);
    for (const r of this.fields) n = n.add(r);
    for (const r of e) n = n.add(r);
    return new Wt(n.toArray());
  }
  /**
   * Verifies that `fieldPath` is included by at least one field in this field
   * mask.
   *
   * This is an O(n) operation, where `n` is the size of the field mask.
   */
  covers(e) {
    for (const n of this.fields) if (n.isPrefixOf(e)) return !0;
    return !1;
  }
  isEqual(e) {
    return ci(this.fields, e.fields, (n, r) => n.isEqual(r));
  }
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Gy extends Error {
  constructor() {
    super(...arguments), this.name = "Base64DecodeError";
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ht {
  constructor(e) {
    this.binaryString = e;
  }
  static fromBase64String(e) {
    const n = function(i) {
      try {
        return atob(i);
      } catch (s) {
        throw typeof DOMException < "u" && s instanceof DOMException ? new Gy("Invalid base64 string: " + s) : s;
      }
    }(e);
    return new ht(n);
  }
  static fromUint8Array(e) {
    const n = (
      /**
      * Helper function to convert an Uint8array to a binary string.
      */
      function(i) {
        let s = "";
        for (let o = 0; o < i.length; ++o) s += String.fromCharCode(i[o]);
        return s;
      }(e)
    );
    return new ht(n);
  }
  [Symbol.iterator]() {
    let e = 0;
    return {
      next: () => e < this.binaryString.length ? {
        value: this.binaryString.charCodeAt(e++),
        done: !1
      } : {
        value: void 0,
        done: !0
      }
    };
  }
  toBase64() {
    return function(n) {
      return btoa(n);
    }(this.binaryString);
  }
  toUint8Array() {
    return function(n) {
      const r = new Uint8Array(n.length);
      for (let i = 0; i < n.length; i++) r[i] = n.charCodeAt(i);
      return r;
    }(this.binaryString);
  }
  approximateByteSize() {
    return 2 * this.binaryString.length;
  }
  compareTo(e) {
    return be(this.binaryString, e.binaryString);
  }
  isEqual(e) {
    return this.binaryString === e.binaryString;
  }
}
ht.EMPTY_BYTE_STRING = new ht("");
const QP = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);
function Yn(t) {
  if (Ne(!!t), typeof t == "string") {
    let e = 0;
    const n = QP.exec(t);
    if (Ne(!!n), n[1]) {
      let i = n[1];
      i = (i + "000000000").substr(0, 9), e = Number(i);
    }
    const r = new Date(t);
    return {
      seconds: Math.floor(r.getTime() / 1e3),
      nanos: e
    };
  }
  return {
    seconds: Ye(t.seconds),
    nanos: Ye(t.nanos)
  };
}
function Ye(t) {
  return typeof t == "number" ? t : typeof t == "string" ? Number(t) : 0;
}
function Rr(t) {
  return typeof t == "string" ? ht.fromBase64String(t) : ht.fromUint8Array(t);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Ul(t) {
  var e, n;
  return ((n = (((e = t == null ? void 0 : t.mapValue) === null || e === void 0 ? void 0 : e.fields) || {}).__type__) === null || n === void 0 ? void 0 : n.stringValue) === "server_timestamp";
}
function jl(t) {
  const e = t.mapValue.fields.__previous_value__;
  return Ul(e) ? jl(e) : e;
}
function ms(t) {
  const e = Yn(t.mapValue.fields.__local_write_time__.timestampValue);
  return new et(e.seconds, e.nanos);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class YP {
  /**
   * Constructs a DatabaseInfo using the provided host, databaseId and
   * persistenceKey.
   *
   * @param databaseId - The database to use.
   * @param appId - The Firebase App Id.
   * @param persistenceKey - A unique identifier for this Firestore's local
   * storage (used in conjunction with the databaseId).
   * @param host - The Firestore backend host to connect to.
   * @param ssl - Whether to use SSL when connecting.
   * @param forceLongPolling - Whether to use the forceLongPolling option
   * when using WebChannel as the network transport.
   * @param autoDetectLongPolling - Whether to use the detectBufferingProxy
   * option when using WebChannel as the network transport.
   * @param longPollingOptions Options that configure long-polling.
   * @param useFetchStreams Whether to use the Fetch API instead of
   * XMLHTTPRequest
   */
  constructor(e, n, r, i, s, o, c, u, l) {
    this.databaseId = e, this.appId = n, this.persistenceKey = r, this.host = i, this.ssl = s, this.forceLongPolling = o, this.autoDetectLongPolling = c, this.longPollingOptions = u, this.useFetchStreams = l;
  }
}
class gs {
  constructor(e, n) {
    this.projectId = e, this.database = n || "(default)";
  }
  static empty() {
    return new gs("", "");
  }
  get isDefaultDatabase() {
    return this.database === "(default)";
  }
  isEqual(e) {
    return e instanceof gs && e.projectId === this.projectId && e.database === this.database;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const _o = {
  mapValue: {
    fields: {
      __type__: {
        stringValue: "__max__"
      }
    }
  }
};
function Cr(t) {
  return "nullValue" in t ? 0 : "booleanValue" in t ? 1 : "integerValue" in t || "doubleValue" in t ? 2 : "timestampValue" in t ? 3 : "stringValue" in t ? 5 : "bytesValue" in t ? 6 : "referenceValue" in t ? 7 : "geoPointValue" in t ? 8 : "arrayValue" in t ? 9 : "mapValue" in t ? Ul(t) ? 4 : JP(t) ? 9007199254740991 : 10 : ce();
}
function un(t, e) {
  if (t === e) return !0;
  const n = Cr(t);
  if (n !== Cr(e)) return !1;
  switch (n) {
    case 0:
    case 9007199254740991:
      return !0;
    case 1:
      return t.booleanValue === e.booleanValue;
    case 4:
      return ms(t).isEqual(ms(e));
    case 3:
      return function(i, s) {
        if (typeof i.timestampValue == "string" && typeof s.timestampValue == "string" && i.timestampValue.length === s.timestampValue.length)
          return i.timestampValue === s.timestampValue;
        const o = Yn(i.timestampValue), c = Yn(s.timestampValue);
        return o.seconds === c.seconds && o.nanos === c.nanos;
      }(t, e);
    case 5:
      return t.stringValue === e.stringValue;
    case 6:
      return function(i, s) {
        return Rr(i.bytesValue).isEqual(Rr(s.bytesValue));
      }(t, e);
    case 7:
      return t.referenceValue === e.referenceValue;
    case 8:
      return function(i, s) {
        return Ye(i.geoPointValue.latitude) === Ye(s.geoPointValue.latitude) && Ye(i.geoPointValue.longitude) === Ye(s.geoPointValue.longitude);
      }(t, e);
    case 2:
      return function(i, s) {
        if ("integerValue" in i && "integerValue" in s) return Ye(i.integerValue) === Ye(s.integerValue);
        if ("doubleValue" in i && "doubleValue" in s) {
          const o = Ye(i.doubleValue), c = Ye(s.doubleValue);
          return o === c ? ta(o) === ta(c) : isNaN(o) && isNaN(c);
        }
        return !1;
      }(t, e);
    case 9:
      return ci(t.arrayValue.values || [], e.arrayValue.values || [], un);
    case 10:
      return function(i, s) {
        const o = i.mapValue.fields || {}, c = s.mapValue.fields || {};
        if (yp(o) !== yp(c)) return !1;
        for (const u in o) if (o.hasOwnProperty(u) && (c[u] === void 0 || !un(o[u], c[u]))) return !1;
        return !0;
      }(t, e);
    default:
      return ce();
  }
}
function ys(t, e) {
  return (t.values || []).find((n) => un(n, e)) !== void 0;
}
function ui(t, e) {
  if (t === e) return 0;
  const n = Cr(t), r = Cr(e);
  if (n !== r) return be(n, r);
  switch (n) {
    case 0:
    case 9007199254740991:
      return 0;
    case 1:
      return be(t.booleanValue, e.booleanValue);
    case 2:
      return function(s, o) {
        const c = Ye(s.integerValue || s.doubleValue), u = Ye(o.integerValue || o.doubleValue);
        return c < u ? -1 : c > u ? 1 : c === u ? 0 : (
          // one or both are NaN.
          isNaN(c) ? isNaN(u) ? 0 : -1 : 1
        );
      }(t, e);
    case 3:
      return vp(t.timestampValue, e.timestampValue);
    case 4:
      return vp(ms(t), ms(e));
    case 5:
      return be(t.stringValue, e.stringValue);
    case 6:
      return function(s, o) {
        const c = Rr(s), u = Rr(o);
        return c.compareTo(u);
      }(t.bytesValue, e.bytesValue);
    case 7:
      return function(s, o) {
        const c = s.split("/"), u = o.split("/");
        for (let l = 0; l < c.length && l < u.length; l++) {
          const f = be(c[l], u[l]);
          if (f !== 0) return f;
        }
        return be(c.length, u.length);
      }(t.referenceValue, e.referenceValue);
    case 8:
      return function(s, o) {
        const c = be(Ye(s.latitude), Ye(o.latitude));
        return c !== 0 ? c : be(Ye(s.longitude), Ye(o.longitude));
      }(t.geoPointValue, e.geoPointValue);
    case 9:
      return function(s, o) {
        const c = s.values || [], u = o.values || [];
        for (let l = 0; l < c.length && l < u.length; ++l) {
          const f = ui(c[l], u[l]);
          if (f) return f;
        }
        return be(c.length, u.length);
      }(t.arrayValue, e.arrayValue);
    case 10:
      return function(s, o) {
        if (s === _o.mapValue && o === _o.mapValue) return 0;
        if (s === _o.mapValue) return 1;
        if (o === _o.mapValue) return -1;
        const c = s.fields || {}, u = Object.keys(c), l = o.fields || {}, f = Object.keys(l);
        u.sort(), f.sort();
        for (let h = 0; h < u.length && h < f.length; ++h) {
          const _ = be(u[h], f[h]);
          if (_ !== 0) return _;
          const b = ui(c[u[h]], l[f[h]]);
          if (b !== 0) return b;
        }
        return be(u.length, f.length);
      }(t.mapValue, e.mapValue);
    default:
      throw ce();
  }
}
function vp(t, e) {
  if (typeof t == "string" && typeof e == "string" && t.length === e.length) return be(t, e);
  const n = Yn(t), r = Yn(e), i = be(n.seconds, r.seconds);
  return i !== 0 ? i : be(n.nanos, r.nanos);
}
function li(t) {
  return Nu(t);
}
function Nu(t) {
  return "nullValue" in t ? "null" : "booleanValue" in t ? "" + t.booleanValue : "integerValue" in t ? "" + t.integerValue : "doubleValue" in t ? "" + t.doubleValue : "timestampValue" in t ? function(n) {
    const r = Yn(n);
    return `time(${r.seconds},${r.nanos})`;
  }(t.timestampValue) : "stringValue" in t ? t.stringValue : "bytesValue" in t ? function(n) {
    return Rr(n).toBase64();
  }(t.bytesValue) : "referenceValue" in t ? function(n) {
    return se.fromName(n).toString();
  }(t.referenceValue) : "geoPointValue" in t ? function(n) {
    return `geo(${n.latitude},${n.longitude})`;
  }(t.geoPointValue) : "arrayValue" in t ? function(n) {
    let r = "[", i = !0;
    for (const s of n.values || []) i ? i = !1 : r += ",", r += Nu(s);
    return r + "]";
  }(t.arrayValue) : "mapValue" in t ? function(n) {
    const r = Object.keys(n.fields || {}).sort();
    let i = "{", s = !0;
    for (const o of r) s ? s = !1 : i += ",", i += `${o}:${Nu(n.fields[o])}`;
    return i + "}";
  }(t.mapValue) : ce();
}
function wp(t, e) {
  return {
    referenceValue: `projects/${t.projectId}/databases/${t.database}/documents/${e.path.canonicalString()}`
  };
}
function Du(t) {
  return !!t && "integerValue" in t;
}
function Bl(t) {
  return !!t && "arrayValue" in t;
}
function Ep(t) {
  return !!t && "nullValue" in t;
}
function bp(t) {
  return !!t && "doubleValue" in t && isNaN(Number(t.doubleValue));
}
function No(t) {
  return !!t && "mapValue" in t;
}
function es(t) {
  if (t.geoPointValue) return {
    geoPointValue: Object.assign({}, t.geoPointValue)
  };
  if (t.timestampValue && typeof t.timestampValue == "object") return {
    timestampValue: Object.assign({}, t.timestampValue)
  };
  if (t.mapValue) {
    const e = {
      mapValue: {
        fields: {}
      }
    };
    return Ei(t.mapValue.fields, (n, r) => e.mapValue.fields[n] = es(r)), e;
  }
  if (t.arrayValue) {
    const e = {
      arrayValue: {
        values: []
      }
    };
    for (let n = 0; n < (t.arrayValue.values || []).length; ++n) e.arrayValue.values[n] = es(t.arrayValue.values[n]);
    return e;
  }
  return Object.assign({}, t);
}
function JP(t) {
  return (((t.mapValue || {}).fields || {}).__type__ || {}).stringValue === "__max__";
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Ft {
  constructor(e) {
    this.value = e;
  }
  static empty() {
    return new Ft({
      mapValue: {}
    });
  }
  /**
   * Returns the value at the given path or null.
   *
   * @param path - the path to search
   * @returns The value at the path or null if the path is not set.
   */
  field(e) {
    if (e.isEmpty()) return this.value;
    {
      let n = this.value;
      for (let r = 0; r < e.length - 1; ++r) if (n = (n.mapValue.fields || {})[e.get(r)], !No(n)) return null;
      return n = (n.mapValue.fields || {})[e.lastSegment()], n || null;
    }
  }
  /**
   * Sets the field to the provided value.
   *
   * @param path - The field path to set.
   * @param value - The value to set.
   */
  set(e, n) {
    this.getFieldsMap(e.popLast())[e.lastSegment()] = es(n);
  }
  /**
   * Sets the provided fields to the provided values.
   *
   * @param data - A map of fields to values (or null for deletes).
   */
  setAll(e) {
    let n = ct.emptyPath(), r = {}, i = [];
    e.forEach((o, c) => {
      if (!n.isImmediateParentOf(c)) {
        const u = this.getFieldsMap(n);
        this.applyChanges(u, r, i), r = {}, i = [], n = c.popLast();
      }
      o ? r[c.lastSegment()] = es(o) : i.push(c.lastSegment());
    });
    const s = this.getFieldsMap(n);
    this.applyChanges(s, r, i);
  }
  /**
   * Removes the field at the specified path. If there is no field at the
   * specified path, nothing is changed.
   *
   * @param path - The field path to remove.
   */
  delete(e) {
    const n = this.field(e.popLast());
    No(n) && n.mapValue.fields && delete n.mapValue.fields[e.lastSegment()];
  }
  isEqual(e) {
    return un(this.value, e.value);
  }
  /**
   * Returns the map that contains the leaf element of `path`. If the parent
   * entry does not yet exist, or if it is not a map, a new map will be created.
   */
  getFieldsMap(e) {
    let n = this.value;
    n.mapValue.fields || (n.mapValue = {
      fields: {}
    });
    for (let r = 0; r < e.length; ++r) {
      let i = n.mapValue.fields[e.get(r)];
      No(i) && i.mapValue.fields || (i = {
        mapValue: {
          fields: {}
        }
      }, n.mapValue.fields[e.get(r)] = i), n = i;
    }
    return n.mapValue.fields;
  }
  /**
   * Modifies `fieldsMap` by adding, replacing or deleting the specified
   * entries.
   */
  applyChanges(e, n, r) {
    Ei(n, (i, s) => e[i] = s);
    for (const i of r) delete e[i];
  }
  clone() {
    return new Ft(es(this.value));
  }
}
function Wy(t) {
  const e = [];
  return Ei(t.fields, (n, r) => {
    const i = new ct([n]);
    if (No(r)) {
      const s = Wy(r.mapValue).fields;
      if (s.length === 0)
        e.push(i);
      else
        for (const o of s) e.push(i.child(o));
    } else
      e.push(i);
  }), new Wt(e);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class _t {
  constructor(e, n, r, i, s, o, c) {
    this.key = e, this.documentType = n, this.version = r, this.readTime = i, this.createTime = s, this.data = o, this.documentState = c;
  }
  /**
   * Creates a document with no known version or data, but which can serve as
   * base document for mutations.
   */
  static newInvalidDocument(e) {
    return new _t(
      e,
      0,
      /* version */
      he.min(),
      /* readTime */
      he.min(),
      /* createTime */
      he.min(),
      Ft.empty(),
      0
      /* DocumentState.SYNCED */
    );
  }
  /**
   * Creates a new document that is known to exist with the given data at the
   * given version.
   */
  static newFoundDocument(e, n, r, i) {
    return new _t(
      e,
      1,
      /* version */
      n,
      /* readTime */
      he.min(),
      /* createTime */
      r,
      i,
      0
      /* DocumentState.SYNCED */
    );
  }
  /** Creates a new document that is known to not exist at the given version. */
  static newNoDocument(e, n) {
    return new _t(
      e,
      2,
      /* version */
      n,
      /* readTime */
      he.min(),
      /* createTime */
      he.min(),
      Ft.empty(),
      0
      /* DocumentState.SYNCED */
    );
  }
  /**
   * Creates a new document that is known to exist at the given version but
   * whose data is not known (e.g. a document that was updated without a known
   * base document).
   */
  static newUnknownDocument(e, n) {
    return new _t(
      e,
      3,
      /* version */
      n,
      /* readTime */
      he.min(),
      /* createTime */
      he.min(),
      Ft.empty(),
      2
      /* DocumentState.HAS_COMMITTED_MUTATIONS */
    );
  }
  /**
   * Changes the document type to indicate that it exists and that its version
   * and data are known.
   */
  convertToFoundDocument(e, n) {
    return !this.createTime.isEqual(he.min()) || this.documentType !== 2 && this.documentType !== 0 || (this.createTime = e), this.version = e, this.documentType = 1, this.data = n, this.documentState = 0, this;
  }
  /**
   * Changes the document type to indicate that it doesn't exist at the given
   * version.
   */
  convertToNoDocument(e) {
    return this.version = e, this.documentType = 2, this.data = Ft.empty(), this.documentState = 0, this;
  }
  /**
   * Changes the document type to indicate that it exists at a given version but
   * that its data is not known (e.g. a document that was updated without a known
   * base document).
   */
  convertToUnknownDocument(e) {
    return this.version = e, this.documentType = 3, this.data = Ft.empty(), this.documentState = 2, this;
  }
  setHasCommittedMutations() {
    return this.documentState = 2, this;
  }
  setHasLocalMutations() {
    return this.documentState = 1, this.version = he.min(), this;
  }
  setReadTime(e) {
    return this.readTime = e, this;
  }
  get hasLocalMutations() {
    return this.documentState === 1;
  }
  get hasCommittedMutations() {
    return this.documentState === 2;
  }
  get hasPendingWrites() {
    return this.hasLocalMutations || this.hasCommittedMutations;
  }
  isValidDocument() {
    return this.documentType !== 0;
  }
  isFoundDocument() {
    return this.documentType === 1;
  }
  isNoDocument() {
    return this.documentType === 2;
  }
  isUnknownDocument() {
    return this.documentType === 3;
  }
  isEqual(e) {
    return e instanceof _t && this.key.isEqual(e.key) && this.version.isEqual(e.version) && this.documentType === e.documentType && this.documentState === e.documentState && this.data.isEqual(e.data);
  }
  mutableCopy() {
    return new _t(this.key, this.documentType, this.version, this.readTime, this.createTime, this.data.clone(), this.documentState);
  }
  toString() {
    return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {createTime: ${this.createTime}}), {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`;
  }
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class na {
  constructor(e, n) {
    this.position = e, this.inclusive = n;
  }
}
function Tp(t, e, n) {
  let r = 0;
  for (let i = 0; i < t.position.length; i++) {
    const s = e[i], o = t.position[i];
    if (s.field.isKeyField() ? r = se.comparator(se.fromName(o.referenceValue), n.key) : r = ui(o, n.data.field(s.field)), s.dir === "desc" && (r *= -1), r !== 0) break;
  }
  return r;
}
function Ip(t, e) {
  if (t === null) return e === null;
  if (e === null || t.inclusive !== e.inclusive || t.position.length !== e.position.length) return !1;
  for (let n = 0; n < t.position.length; n++)
    if (!un(t.position[n], e.position[n])) return !1;
  return !0;
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ra {
  constructor(e, n = "asc") {
    this.field = e, this.dir = n;
  }
}
function XP(t, e) {
  return t.dir === e.dir && t.field.isEqual(e.field);
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Qy {
}
class Je extends Qy {
  constructor(e, n, r) {
    super(), this.field = e, this.op = n, this.value = r;
  }
  /**
   * Creates a filter based on the provided arguments.
   */
  static create(e, n, r) {
    return e.isKeyField() ? n === "in" || n === "not-in" ? this.createKeyFieldInFilter(e, n, r) : new ek(e, n, r) : n === "array-contains" ? new rk(e, r) : n === "in" ? new ik(e, r) : n === "not-in" ? new sk(e, r) : n === "array-contains-any" ? new ok(e, r) : new Je(e, n, r);
  }
  static createKeyFieldInFilter(e, n, r) {
    return n === "in" ? new tk(e, r) : new nk(e, r);
  }
  matches(e) {
    const n = e.data.field(this.field);
    return this.op === "!=" ? n !== null && this.matchesComparison(ui(n, this.value)) : n !== null && Cr(this.value) === Cr(n) && this.matchesComparison(ui(n, this.value));
  }
  matchesComparison(e) {
    switch (this.op) {
      case "<":
        return e < 0;
      case "<=":
        return e <= 0;
      case "==":
        return e === 0;
      case "!=":
        return e !== 0;
      case ">":
        return e > 0;
      case ">=":
        return e >= 0;
      default:
        return ce();
    }
  }
  isInequality() {
    return [
      "<",
      "<=",
      ">",
      ">=",
      "!=",
      "not-in"
      /* Operator.NOT_IN */
    ].indexOf(this.op) >= 0;
  }
  getFlattenedFilters() {
    return [this];
  }
  getFilters() {
    return [this];
  }
}
class Jt extends Qy {
  constructor(e, n) {
    super(), this.filters = e, this.op = n, this.ae = null;
  }
  /**
   * Creates a filter based on the provided arguments.
   */
  static create(e, n) {
    return new Jt(e, n);
  }
  matches(e) {
    return Yy(this) ? this.filters.find((n) => !n.matches(e)) === void 0 : this.filters.find((n) => n.matches(e)) !== void 0;
  }
  getFlattenedFilters() {
    return this.ae !== null || (this.ae = this.filters.reduce((e, n) => e.concat(n.getFlattenedFilters()), [])), this.ae;
  }
  // Returns a mutable copy of `this.filters`
  getFilters() {
    return Object.assign([], this.filters);
  }
}
function Yy(t) {
  return t.op === "and";
}
function Jy(t) {
  return ZP(t) && Yy(t);
}
function ZP(t) {
  for (const e of t.filters) if (e instanceof Jt) return !1;
  return !0;
}
function xu(t) {
  if (t instanceof Je)
    return t.field.canonicalString() + t.op.toString() + li(t.value);
  if (Jy(t))
    return t.filters.map((e) => xu(e)).join(",");
  {
    const e = t.filters.map((n) => xu(n)).join(",");
    return `${t.op}(${e})`;
  }
}
function Xy(t, e) {
  return t instanceof Je ? function(r, i) {
    return i instanceof Je && r.op === i.op && r.field.isEqual(i.field) && un(r.value, i.value);
  }(t, e) : t instanceof Jt ? function(r, i) {
    return i instanceof Jt && r.op === i.op && r.filters.length === i.filters.length ? r.filters.reduce((s, o, c) => s && Xy(o, i.filters[c]), !0) : !1;
  }(t, e) : void ce();
}
function Zy(t) {
  return t instanceof Je ? function(n) {
    return `${n.field.canonicalString()} ${n.op} ${li(n.value)}`;
  }(t) : t instanceof Jt ? function(n) {
    return n.op.toString() + " {" + n.getFilters().map(Zy).join(" ,") + "}";
  }(t) : "Filter";
}
class ek extends Je {
  constructor(e, n, r) {
    super(e, n, r), this.key = se.fromName(r.referenceValue);
  }
  matches(e) {
    const n = se.comparator(e.key, this.key);
    return this.matchesComparison(n);
  }
}
class tk extends Je {
  constructor(e, n) {
    super(e, "in", n), this.keys = e_("in", n);
  }
  matches(e) {
    return this.keys.some((n) => n.isEqual(e.key));
  }
}
class nk extends Je {
  constructor(e, n) {
    super(e, "not-in", n), this.keys = e_("not-in", n);
  }
  matches(e) {
    return !this.keys.some((n) => n.isEqual(e.key));
  }
}
function e_(t, e) {
  var n;
  return (((n = e.arrayValue) === null || n === void 0 ? void 0 : n.values) || []).map((r) => se.fromName(r.referenceValue));
}
class rk extends Je {
  constructor(e, n) {
    super(e, "array-contains", n);
  }
  matches(e) {
    const n = e.data.field(this.field);
    return Bl(n) && ys(n.arrayValue, this.value);
  }
}
class ik extends Je {
  constructor(e, n) {
    super(e, "in", n);
  }
  matches(e) {
    const n = e.data.field(this.field);
    return n !== null && ys(this.value.arrayValue, n);
  }
}
class sk extends Je {
  constructor(e, n) {
    super(e, "not-in", n);
  }
  matches(e) {
    if (ys(this.value.arrayValue, {
      nullValue: "NULL_VALUE"
    })) return !1;
    const n = e.data.field(this.field);
    return n !== null && !ys(this.value.arrayValue, n);
  }
}
class ok extends Je {
  constructor(e, n) {
    super(e, "array-contains-any", n);
  }
  matches(e) {
    const n = e.data.field(this.field);
    return !(!Bl(n) || !n.arrayValue.values) && n.arrayValue.values.some((r) => ys(this.value.arrayValue, r));
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ak {
  constructor(e, n = null, r = [], i = [], s = null, o = null, c = null) {
    this.path = e, this.collectionGroup = n, this.orderBy = r, this.filters = i, this.limit = s, this.startAt = o, this.endAt = c, this.ue = null;
  }
}
function Sp(t, e = null, n = [], r = [], i = null, s = null, o = null) {
  return new ak(t, e, n, r, i, s, o);
}
function $l(t) {
  const e = fe(t);
  if (e.ue === null) {
    let n = e.path.canonicalString();
    e.collectionGroup !== null && (n += "|cg:" + e.collectionGroup), n += "|f:", n += e.filters.map((r) => xu(r)).join(","), n += "|ob:", n += e.orderBy.map((r) => function(s) {
      return s.field.canonicalString() + s.dir;
    }(r)).join(","), Na(e.limit) || (n += "|l:", n += e.limit), e.startAt && (n += "|lb:", n += e.startAt.inclusive ? "b:" : "a:", n += e.startAt.position.map((r) => li(r)).join(",")), e.endAt && (n += "|ub:", n += e.endAt.inclusive ? "a:" : "b:", n += e.endAt.position.map((r) => li(r)).join(",")), e.ue = n;
  }
  return e.ue;
}
function ql(t, e) {
  if (t.limit !== e.limit || t.orderBy.length !== e.orderBy.length) return !1;
  for (let n = 0; n < t.orderBy.length; n++) if (!XP(t.orderBy[n], e.orderBy[n])) return !1;
  if (t.filters.length !== e.filters.length) return !1;
  for (let n = 0; n < t.filters.length; n++) if (!Xy(t.filters[n], e.filters[n])) return !1;
  return t.collectionGroup === e.collectionGroup && !!t.path.isEqual(e.path) && !!Ip(t.startAt, e.startAt) && Ip(t.endAt, e.endAt);
}
function Lu(t) {
  return se.isDocumentKey(t.path) && t.collectionGroup === null && t.filters.length === 0;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Ls {
  /**
   * Initializes a Query with a path and optional additional query constraints.
   * Path must currently be empty if this is a collection group query.
   */
  constructor(e, n = null, r = [], i = [], s = null, o = "F", c = null, u = null) {
    this.path = e, this.collectionGroup = n, this.explicitOrderBy = r, this.filters = i, this.limit = s, this.limitType = o, this.startAt = c, this.endAt = u, this.ce = null, // The corresponding `Target` of this `Query` instance, for use with
    // non-aggregate queries.
    this.le = null, // The corresponding `Target` of this `Query` instance, for use with
    // aggregate queries. Unlike targets for non-aggregate queries,
    // aggregate query targets do not contain normalized order-bys, they only
    // contain explicit order-bys.
    this.he = null, this.startAt, this.endAt;
  }
}
function ck(t, e, n, r, i, s, o, c) {
  return new Ls(t, e, n, r, i, s, o, c);
}
function Da(t) {
  return new Ls(t);
}
function Ap(t) {
  return t.filters.length === 0 && t.limit === null && t.startAt == null && t.endAt == null && (t.explicitOrderBy.length === 0 || t.explicitOrderBy.length === 1 && t.explicitOrderBy[0].field.isKeyField());
}
function t_(t) {
  return t.collectionGroup !== null;
}
function ts(t) {
  const e = fe(t);
  if (e.ce === null) {
    e.ce = [];
    const n = /* @__PURE__ */ new Set();
    for (const s of e.explicitOrderBy) e.ce.push(s), n.add(s.field.canonicalString());
    const r = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : "asc";
    (function(o) {
      let c = new ut(ct.comparator);
      return o.filters.forEach((u) => {
        u.getFlattenedFilters().forEach((l) => {
          l.isInequality() && (c = c.add(l.field));
        });
      }), c;
    })(e).forEach((s) => {
      n.has(s.canonicalString()) || s.isKeyField() || e.ce.push(new ra(s, r));
    }), // Add the document key field to the last if it is not explicitly ordered.
    n.has(ct.keyField().canonicalString()) || e.ce.push(new ra(ct.keyField(), r));
  }
  return e.ce;
}
function sn(t) {
  const e = fe(t);
  return e.le || (e.le = uk(e, ts(t))), e.le;
}
function uk(t, e) {
  if (t.limitType === "F") return Sp(t.path, t.collectionGroup, e, t.filters, t.limit, t.startAt, t.endAt);
  {
    e = e.map((i) => {
      const s = i.dir === "desc" ? "asc" : "desc";
      return new ra(i.field, s);
    });
    const n = t.endAt ? new na(t.endAt.position, t.endAt.inclusive) : null, r = t.startAt ? new na(t.startAt.position, t.startAt.inclusive) : null;
    return Sp(t.path, t.collectionGroup, e, t.filters, t.limit, n, r);
  }
}
function Mu(t, e) {
  const n = t.filters.concat([e]);
  return new Ls(t.path, t.collectionGroup, t.explicitOrderBy.slice(), n, t.limit, t.limitType, t.startAt, t.endAt);
}
function Vu(t, e, n) {
  return new Ls(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), e, n, t.startAt, t.endAt);
}
function xa(t, e) {
  return ql(sn(t), sn(e)) && t.limitType === e.limitType;
}
function n_(t) {
  return `${$l(sn(t))}|lt:${t.limitType}`;
}
function qr(t) {
  return `Query(target=${function(n) {
    let r = n.path.canonicalString();
    return n.collectionGroup !== null && (r += " collectionGroup=" + n.collectionGroup), n.filters.length > 0 && (r += `, filters: [${n.filters.map((i) => Zy(i)).join(", ")}]`), Na(n.limit) || (r += ", limit: " + n.limit), n.orderBy.length > 0 && (r += `, orderBy: [${n.orderBy.map((i) => function(o) {
      return `${o.field.canonicalString()} (${o.dir})`;
    }(i)).join(", ")}]`), n.startAt && (r += ", startAt: ", r += n.startAt.inclusive ? "b:" : "a:", r += n.startAt.position.map((i) => li(i)).join(",")), n.endAt && (r += ", endAt: ", r += n.endAt.inclusive ? "a:" : "b:", r += n.endAt.position.map((i) => li(i)).join(",")), `Target(${r})`;
  }(sn(t))}; limitType=${t.limitType})`;
}
function La(t, e) {
  return e.isFoundDocument() && function(r, i) {
    const s = i.key.path;
    return r.collectionGroup !== null ? i.key.hasCollectionId(r.collectionGroup) && r.path.isPrefixOf(s) : se.isDocumentKey(r.path) ? r.path.isEqual(s) : r.path.isImmediateParentOf(s);
  }(t, e) && function(r, i) {
    for (const s of ts(r))
      if (!s.field.isKeyField() && i.data.field(s.field) === null) return !1;
    return !0;
  }(t, e) && function(r, i) {
    for (const s of r.filters) if (!s.matches(i)) return !1;
    return !0;
  }(t, e) && function(r, i) {
    return !(r.startAt && !/**
    * Returns true if a document sorts before a bound using the provided sort
    * order.
    */
    function(o, c, u) {
      const l = Tp(o, c, u);
      return o.inclusive ? l <= 0 : l < 0;
    }(r.startAt, ts(r), i) || r.endAt && !function(o, c, u) {
      const l = Tp(o, c, u);
      return o.inclusive ? l >= 0 : l > 0;
    }(r.endAt, ts(r), i));
  }(t, e);
}
function lk(t) {
  return t.collectionGroup || (t.path.length % 2 == 1 ? t.path.lastSegment() : t.path.get(t.path.length - 2));
}
function r_(t) {
  return (e, n) => {
    let r = !1;
    for (const i of ts(t)) {
      const s = hk(i, e, n);
      if (s !== 0) return s;
      r = r || i.field.isKeyField();
    }
    return 0;
  };
}
function hk(t, e, n) {
  const r = t.field.isKeyField() ? se.comparator(e.key, n.key) : function(s, o, c) {
    const u = o.data.field(s), l = c.data.field(s);
    return u !== null && l !== null ? ui(u, l) : ce();
  }(t.field, e, n);
  switch (t.dir) {
    case "asc":
      return r;
    case "desc":
      return -1 * r;
    default:
      return ce();
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class bi {
  constructor(e, n) {
    this.mapKeyFn = e, this.equalsFn = n, /**
    * The inner map for a key/value pair. Due to the possibility of collisions we
    * keep a list of entries that we do a linear search through to find an actual
    * match. Note that collisions should be rare, so we still expect near
    * constant time lookups in practice.
    */
    this.inner = {}, /** The number of entries stored in the map */
    this.innerSize = 0;
  }
  /** Get a value for this key, or undefined if it does not exist. */
  get(e) {
    const n = this.mapKeyFn(e), r = this.inner[n];
    if (r !== void 0) {
      for (const [i, s] of r) if (this.equalsFn(i, e)) return s;
    }
  }
  has(e) {
    return this.get(e) !== void 0;
  }
  /** Put this key and value in the map. */
  set(e, n) {
    const r = this.mapKeyFn(e), i = this.inner[r];
    if (i === void 0) return this.inner[r] = [[e, n]], void this.innerSize++;
    for (let s = 0; s < i.length; s++) if (this.equalsFn(i[s][0], e))
      return void (i[s] = [e, n]);
    i.push([e, n]), this.innerSize++;
  }
  /**
   * Remove this key from the map. Returns a boolean if anything was deleted.
   */
  delete(e) {
    const n = this.mapKeyFn(e), r = this.inner[n];
    if (r === void 0) return !1;
    for (let i = 0; i < r.length; i++) if (this.equalsFn(r[i][0], e)) return r.length === 1 ? delete this.inner[n] : r.splice(i, 1), this.innerSize--, !0;
    return !1;
  }
  forEach(e) {
    Ei(this.inner, (n, r) => {
      for (const [i, s] of r) e(i, s);
    });
  }
  isEmpty() {
    return Hy(this.inner);
  }
  size() {
    return this.innerSize;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const fk = new Me(se.comparator);
function An() {
  return fk;
}
const i_ = new Me(se.comparator);
function Qi(...t) {
  let e = i_;
  for (const n of t) e = e.insert(n.key, n);
  return e;
}
function s_(t) {
  let e = i_;
  return t.forEach((n, r) => e = e.insert(n, r.overlayedDocument)), e;
}
function fr() {
  return ns();
}
function o_() {
  return ns();
}
function ns() {
  return new bi((t) => t.toString(), (t, e) => t.isEqual(e));
}
const dk = new Me(se.comparator), pk = new ut(se.comparator);
function _e(...t) {
  let e = pk;
  for (const n of t) e = e.add(n);
  return e;
}
const mk = new ut(be);
function gk() {
  return mk;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function a_(t, e) {
  if (t.useProto3Json) {
    if (isNaN(e)) return {
      doubleValue: "NaN"
    };
    if (e === 1 / 0) return {
      doubleValue: "Infinity"
    };
    if (e === -1 / 0) return {
      doubleValue: "-Infinity"
    };
  }
  return {
    doubleValue: ta(e) ? "-0" : e
  };
}
function c_(t) {
  return {
    integerValue: "" + t
  };
}
function yk(t, e) {
  return WP(e) ? c_(e) : a_(t, e);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Ma {
  constructor() {
    this._ = void 0;
  }
}
function _k(t, e, n) {
  return t instanceof ia ? function(i, s) {
    const o = {
      fields: {
        __type__: {
          stringValue: "server_timestamp"
        },
        __local_write_time__: {
          timestampValue: {
            seconds: i.seconds,
            nanos: i.nanoseconds
          }
        }
      }
    };
    return s && Ul(s) && (s = jl(s)), s && (o.fields.__previous_value__ = s), {
      mapValue: o
    };
  }(n, e) : t instanceof _s ? l_(t, e) : t instanceof vs ? h_(t, e) : function(i, s) {
    const o = u_(i, s), c = Rp(o) + Rp(i.Pe);
    return Du(o) && Du(i.Pe) ? c_(c) : a_(i.serializer, c);
  }(t, e);
}
function vk(t, e, n) {
  return t instanceof _s ? l_(t, e) : t instanceof vs ? h_(t, e) : n;
}
function u_(t, e) {
  return t instanceof sa ? (
    /** Returns true if `value` is either an IntegerValue or a DoubleValue. */
    function(r) {
      return Du(r) || function(s) {
        return !!s && "doubleValue" in s;
      }(r);
    }(e) ? e : {
      integerValue: 0
    }
  ) : null;
}
class ia extends Ma {
}
class _s extends Ma {
  constructor(e) {
    super(), this.elements = e;
  }
}
function l_(t, e) {
  const n = f_(e);
  for (const r of t.elements) n.some((i) => un(i, r)) || n.push(r);
  return {
    arrayValue: {
      values: n
    }
  };
}
class vs extends Ma {
  constructor(e) {
    super(), this.elements = e;
  }
}
function h_(t, e) {
  let n = f_(e);
  for (const r of t.elements) n = n.filter((i) => !un(i, r));
  return {
    arrayValue: {
      values: n
    }
  };
}
class sa extends Ma {
  constructor(e, n) {
    super(), this.serializer = e, this.Pe = n;
  }
}
function Rp(t) {
  return Ye(t.integerValue || t.doubleValue);
}
function f_(t) {
  return Bl(t) && t.arrayValue.values ? t.arrayValue.values.slice() : [];
}
function wk(t, e) {
  return t.field.isEqual(e.field) && function(r, i) {
    return r instanceof _s && i instanceof _s || r instanceof vs && i instanceof vs ? ci(r.elements, i.elements, un) : r instanceof sa && i instanceof sa ? un(r.Pe, i.Pe) : r instanceof ia && i instanceof ia;
  }(t.transform, e.transform);
}
class Ek {
  constructor(e, n) {
    this.version = e, this.transformResults = n;
  }
}
class En {
  constructor(e, n) {
    this.updateTime = e, this.exists = n;
  }
  /** Creates a new empty Precondition. */
  static none() {
    return new En();
  }
  /** Creates a new Precondition with an exists flag. */
  static exists(e) {
    return new En(void 0, e);
  }
  /** Creates a new Precondition based on a version a document exists at. */
  static updateTime(e) {
    return new En(e);
  }
  /** Returns whether this Precondition is empty. */
  get isNone() {
    return this.updateTime === void 0 && this.exists === void 0;
  }
  isEqual(e) {
    return this.exists === e.exists && (this.updateTime ? !!e.updateTime && this.updateTime.isEqual(e.updateTime) : !e.updateTime);
  }
}
function Do(t, e) {
  return t.updateTime !== void 0 ? e.isFoundDocument() && e.version.isEqual(t.updateTime) : t.exists === void 0 || t.exists === e.isFoundDocument();
}
class Va {
}
function d_(t, e) {
  if (!t.hasLocalMutations || e && e.fields.length === 0) return null;
  if (e === null) return t.isNoDocument() ? new m_(t.key, En.none()) : new Ms(t.key, t.data, En.none());
  {
    const n = t.data, r = Ft.empty();
    let i = new ut(ct.comparator);
    for (let s of e.fields) if (!i.has(s)) {
      let o = n.field(s);
      o === null && s.length > 1 && (s = s.popLast(), o = n.field(s)), o === null ? r.delete(s) : r.set(s, o), i = i.add(s);
    }
    return new xr(t.key, r, new Wt(i.toArray()), En.none());
  }
}
function bk(t, e, n) {
  t instanceof Ms ? function(i, s, o) {
    const c = i.value.clone(), u = Pp(i.fieldTransforms, s, o.transformResults);
    c.setAll(u), s.convertToFoundDocument(o.version, c).setHasCommittedMutations();
  }(t, e, n) : t instanceof xr ? function(i, s, o) {
    if (!Do(i.precondition, s))
      return void s.convertToUnknownDocument(o.version);
    const c = Pp(i.fieldTransforms, s, o.transformResults), u = s.data;
    u.setAll(p_(i)), u.setAll(c), s.convertToFoundDocument(o.version, u).setHasCommittedMutations();
  }(t, e, n) : function(i, s, o) {
    s.convertToNoDocument(o.version).setHasCommittedMutations();
  }(0, e, n);
}
function rs(t, e, n, r) {
  return t instanceof Ms ? function(s, o, c, u) {
    if (!Do(s.precondition, o))
      return c;
    const l = s.value.clone(), f = kp(s.fieldTransforms, u, o);
    return l.setAll(f), o.convertToFoundDocument(o.version, l).setHasLocalMutations(), null;
  }(t, e, n, r) : t instanceof xr ? function(s, o, c, u) {
    if (!Do(s.precondition, o)) return c;
    const l = kp(s.fieldTransforms, u, o), f = o.data;
    return f.setAll(p_(s)), f.setAll(l), o.convertToFoundDocument(o.version, f).setHasLocalMutations(), c === null ? null : c.unionWith(s.fieldMask.fields).unionWith(s.fieldTransforms.map((h) => h.field));
  }(t, e, n, r) : function(s, o, c) {
    return Do(s.precondition, o) ? (o.convertToNoDocument(o.version).setHasLocalMutations(), null) : c;
  }(t, e, n);
}
function Tk(t, e) {
  let n = null;
  for (const r of t.fieldTransforms) {
    const i = e.data.field(r.field), s = u_(r.transform, i || null);
    s != null && (n === null && (n = Ft.empty()), n.set(r.field, s));
  }
  return n || null;
}
function Cp(t, e) {
  return t.type === e.type && !!t.key.isEqual(e.key) && !!t.precondition.isEqual(e.precondition) && !!function(r, i) {
    return r === void 0 && i === void 0 || !(!r || !i) && ci(r, i, (s, o) => wk(s, o));
  }(t.fieldTransforms, e.fieldTransforms) && (t.type === 0 ? t.value.isEqual(e.value) : t.type !== 1 || t.data.isEqual(e.data) && t.fieldMask.isEqual(e.fieldMask));
}
class Ms extends Va {
  constructor(e, n, r, i = []) {
    super(), this.key = e, this.value = n, this.precondition = r, this.fieldTransforms = i, this.type = 0;
  }
  getFieldMask() {
    return null;
  }
}
class xr extends Va {
  constructor(e, n, r, i, s = []) {
    super(), this.key = e, this.data = n, this.fieldMask = r, this.precondition = i, this.fieldTransforms = s, this.type = 1;
  }
  getFieldMask() {
    return this.fieldMask;
  }
}
function p_(t) {
  const e = /* @__PURE__ */ new Map();
  return t.fieldMask.fields.forEach((n) => {
    if (!n.isEmpty()) {
      const r = t.data.field(n);
      e.set(n, r);
    }
  }), e;
}
function Pp(t, e, n) {
  const r = /* @__PURE__ */ new Map();
  Ne(t.length === n.length);
  for (let i = 0; i < n.length; i++) {
    const s = t[i], o = s.transform, c = e.data.field(s.field);
    r.set(s.field, vk(o, c, n[i]));
  }
  return r;
}
function kp(t, e, n) {
  const r = /* @__PURE__ */ new Map();
  for (const i of t) {
    const s = i.transform, o = n.data.field(i.field);
    r.set(i.field, _k(s, o, e));
  }
  return r;
}
class m_ extends Va {
  constructor(e, n) {
    super(), this.key = e, this.precondition = n, this.type = 2, this.fieldTransforms = [];
  }
  getFieldMask() {
    return null;
  }
}
class Ik extends Va {
  constructor(e, n) {
    super(), this.key = e, this.precondition = n, this.type = 3, this.fieldTransforms = [];
  }
  getFieldMask() {
    return null;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Sk {
  /**
   * @param batchId - The unique ID of this mutation batch.
   * @param localWriteTime - The original write time of this mutation.
   * @param baseMutations - Mutations that are used to populate the base
   * values when this mutation is applied locally. This can be used to locally
   * overwrite values that are persisted in the remote document cache. Base
   * mutations are never sent to the backend.
   * @param mutations - The user-provided mutations in this mutation batch.
   * User-provided mutations are applied both locally and remotely on the
   * backend.
   */
  constructor(e, n, r, i) {
    this.batchId = e, this.localWriteTime = n, this.baseMutations = r, this.mutations = i;
  }
  /**
   * Applies all the mutations in this MutationBatch to the specified document
   * to compute the state of the remote document
   *
   * @param document - The document to apply mutations to.
   * @param batchResult - The result of applying the MutationBatch to the
   * backend.
   */
  applyToRemoteDocument(e, n) {
    const r = n.mutationResults;
    for (let i = 0; i < this.mutations.length; i++) {
      const s = this.mutations[i];
      s.key.isEqual(e.key) && bk(s, e, r[i]);
    }
  }
  /**
   * Computes the local view of a document given all the mutations in this
   * batch.
   *
   * @param document - The document to apply mutations to.
   * @param mutatedFields - Fields that have been updated before applying this mutation batch.
   * @returns A `FieldMask` representing all the fields that are mutated.
   */
  applyToLocalView(e, n) {
    for (const r of this.baseMutations) r.key.isEqual(e.key) && (n = rs(r, e, n, this.localWriteTime));
    for (const r of this.mutations) r.key.isEqual(e.key) && (n = rs(r, e, n, this.localWriteTime));
    return n;
  }
  /**
   * Computes the local view for all provided documents given the mutations in
   * this batch. Returns a `DocumentKey` to `Mutation` map which can be used to
   * replace all the mutation applications.
   */
  applyToLocalDocumentSet(e, n) {
    const r = o_();
    return this.mutations.forEach((i) => {
      const s = e.get(i.key), o = s.overlayedDocument;
      let c = this.applyToLocalView(o, s.mutatedFields);
      c = n.has(i.key) ? null : c;
      const u = d_(o, c);
      u !== null && r.set(i.key, u), o.isValidDocument() || o.convertToNoDocument(he.min());
    }), r;
  }
  keys() {
    return this.mutations.reduce((e, n) => e.add(n.key), _e());
  }
  isEqual(e) {
    return this.batchId === e.batchId && ci(this.mutations, e.mutations, (n, r) => Cp(n, r)) && ci(this.baseMutations, e.baseMutations, (n, r) => Cp(n, r));
  }
}
class zl {
  constructor(e, n, r, i) {
    this.batch = e, this.commitVersion = n, this.mutationResults = r, this.docVersions = i;
  }
  /**
   * Creates a new MutationBatchResult for the given batch and results. There
   * must be one result for each mutation in the batch. This static factory
   * caches a document=&gt;version mapping (docVersions).
   */
  static from(e, n, r) {
    Ne(e.mutations.length === r.length);
    let i = /* @__PURE__ */ function() {
      return dk;
    }();
    const s = e.mutations;
    for (let o = 0; o < s.length; o++) i = i.insert(s[o].key, r[o].version);
    return new zl(e, n, r, i);
  }
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Ak {
  constructor(e, n) {
    this.largestBatchId = e, this.mutation = n;
  }
  getKey() {
    return this.mutation.key;
  }
  isEqual(e) {
    return e !== null && this.mutation === e.mutation;
  }
  toString() {
    return `Overlay{
      largestBatchId: ${this.largestBatchId},
      mutation: ${this.mutation.toString()}
    }`;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Rk {
  constructor(e, n) {
    this.count = e, this.unchangedNames = n;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Ge, we;
function Ck(t) {
  switch (t) {
    default:
      return ce();
    case $.CANCELLED:
    case $.UNKNOWN:
    case $.DEADLINE_EXCEEDED:
    case $.RESOURCE_EXHAUSTED:
    case $.INTERNAL:
    case $.UNAVAILABLE:
    case $.UNAUTHENTICATED:
      return !1;
    case $.INVALID_ARGUMENT:
    case $.NOT_FOUND:
    case $.ALREADY_EXISTS:
    case $.PERMISSION_DENIED:
    case $.FAILED_PRECONDITION:
    case $.ABORTED:
    case $.OUT_OF_RANGE:
    case $.UNIMPLEMENTED:
    case $.DATA_LOSS:
      return !0;
  }
}
function g_(t) {
  if (t === void 0)
    return Sn("GRPC error has no .code"), $.UNKNOWN;
  switch (t) {
    case Ge.OK:
      return $.OK;
    case Ge.CANCELLED:
      return $.CANCELLED;
    case Ge.UNKNOWN:
      return $.UNKNOWN;
    case Ge.DEADLINE_EXCEEDED:
      return $.DEADLINE_EXCEEDED;
    case Ge.RESOURCE_EXHAUSTED:
      return $.RESOURCE_EXHAUSTED;
    case Ge.INTERNAL:
      return $.INTERNAL;
    case Ge.UNAVAILABLE:
      return $.UNAVAILABLE;
    case Ge.UNAUTHENTICATED:
      return $.UNAUTHENTICATED;
    case Ge.INVALID_ARGUMENT:
      return $.INVALID_ARGUMENT;
    case Ge.NOT_FOUND:
      return $.NOT_FOUND;
    case Ge.ALREADY_EXISTS:
      return $.ALREADY_EXISTS;
    case Ge.PERMISSION_DENIED:
      return $.PERMISSION_DENIED;
    case Ge.FAILED_PRECONDITION:
      return $.FAILED_PRECONDITION;
    case Ge.ABORTED:
      return $.ABORTED;
    case Ge.OUT_OF_RANGE:
      return $.OUT_OF_RANGE;
    case Ge.UNIMPLEMENTED:
      return $.UNIMPLEMENTED;
    case Ge.DATA_LOSS:
      return $.DATA_LOSS;
    default:
      return ce();
  }
}
(we = Ge || (Ge = {}))[we.OK = 0] = "OK", we[we.CANCELLED = 1] = "CANCELLED", we[we.UNKNOWN = 2] = "UNKNOWN", we[we.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", we[we.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", we[we.NOT_FOUND = 5] = "NOT_FOUND", we[we.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", we[we.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", we[we.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", we[we.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", we[we.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", we[we.ABORTED = 10] = "ABORTED", we[we.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", we[we.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", we[we.INTERNAL = 13] = "INTERNAL", we[we.UNAVAILABLE = 14] = "UNAVAILABLE", we[we.DATA_LOSS = 15] = "DATA_LOSS";
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Pk() {
  return new TextEncoder();
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const kk = new gr([4294967295, 4294967295], 0);
function Op(t) {
  const e = Pk().encode(t), n = new Vy();
  return n.update(e), new Uint8Array(n.digest());
}
function Np(t) {
  const e = new DataView(t.buffer), n = e.getUint32(
    0,
    /* littleEndian= */
    !0
  ), r = e.getUint32(
    4,
    /* littleEndian= */
    !0
  ), i = e.getUint32(
    8,
    /* littleEndian= */
    !0
  ), s = e.getUint32(
    12,
    /* littleEndian= */
    !0
  );
  return [new gr([n, r], 0), new gr([i, s], 0)];
}
class Kl {
  constructor(e, n, r) {
    if (this.bitmap = e, this.padding = n, this.hashCount = r, n < 0 || n >= 8) throw new Yi(`Invalid padding: ${n}`);
    if (r < 0) throw new Yi(`Invalid hash count: ${r}`);
    if (e.length > 0 && this.hashCount === 0)
      throw new Yi(`Invalid hash count: ${r}`);
    if (e.length === 0 && n !== 0)
      throw new Yi(`Invalid padding when bitmap length is 0: ${n}`);
    this.Ie = 8 * e.length - n, // Set the bit count in Integer to avoid repetition in mightContain().
    this.Te = gr.fromNumber(this.Ie);
  }
  // Calculate the ith hash value based on the hashed 64bit integers,
  // and calculate its corresponding bit index in the bitmap to be checked.
  Ee(e, n, r) {
    let i = e.add(n.multiply(gr.fromNumber(r)));
    return i.compare(kk) === 1 && (i = new gr([i.getBits(0), i.getBits(1)], 0)), i.modulo(this.Te).toNumber();
  }
  // Return whether the bit on the given index in the bitmap is set to 1.
  de(e) {
    return (this.bitmap[Math.floor(e / 8)] & 1 << e % 8) != 0;
  }
  mightContain(e) {
    if (this.Ie === 0) return !1;
    const n = Op(e), [r, i] = Np(n);
    for (let s = 0; s < this.hashCount; s++) {
      const o = this.Ee(r, i, s);
      if (!this.de(o)) return !1;
    }
    return !0;
  }
  /** Create bloom filter for testing purposes only. */
  static create(e, n, r) {
    const i = e % 8 == 0 ? 0 : 8 - e % 8, s = new Uint8Array(Math.ceil(e / 8)), o = new Kl(s, i, n);
    return r.forEach((c) => o.insert(c)), o;
  }
  insert(e) {
    if (this.Ie === 0) return;
    const n = Op(e), [r, i] = Np(n);
    for (let s = 0; s < this.hashCount; s++) {
      const o = this.Ee(r, i, s);
      this.Ae(o);
    }
  }
  Ae(e) {
    const n = Math.floor(e / 8), r = e % 8;
    this.bitmap[n] |= 1 << r;
  }
}
class Yi extends Error {
  constructor() {
    super(...arguments), this.name = "BloomFilterError";
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Fa {
  constructor(e, n, r, i, s) {
    this.snapshotVersion = e, this.targetChanges = n, this.targetMismatches = r, this.documentUpdates = i, this.resolvedLimboDocuments = s;
  }
  /**
   * HACK: Views require RemoteEvents in order to determine whether the view is
   * CURRENT, but secondary tabs don't receive remote events. So this method is
   * used to create a synthesized RemoteEvent that can be used to apply a
   * CURRENT status change to a View, for queries executed in a different tab.
   */
  // PORTING NOTE: Multi-tab only
  static createSynthesizedRemoteEventForCurrentChange(e, n, r) {
    const i = /* @__PURE__ */ new Map();
    return i.set(e, Vs.createSynthesizedTargetChangeForCurrentChange(e, n, r)), new Fa(he.min(), i, new Me(be), An(), _e());
  }
}
class Vs {
  constructor(e, n, r, i, s) {
    this.resumeToken = e, this.current = n, this.addedDocuments = r, this.modifiedDocuments = i, this.removedDocuments = s;
  }
  /**
   * This method is used to create a synthesized TargetChanges that can be used to
   * apply a CURRENT status change to a View (for queries executed in a different
   * tab) or for new queries (to raise snapshots with correct CURRENT status).
   */
  static createSynthesizedTargetChangeForCurrentChange(e, n, r) {
    return new Vs(r, n, _e(), _e(), _e());
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class xo {
  constructor(e, n, r, i) {
    this.Re = e, this.removedTargetIds = n, this.key = r, this.Ve = i;
  }
}
class y_ {
  constructor(e, n) {
    this.targetId = e, this.me = n;
  }
}
class __ {
  constructor(e, n, r = ht.EMPTY_BYTE_STRING, i = null) {
    this.state = e, this.targetIds = n, this.resumeToken = r, this.cause = i;
  }
}
class Dp {
  constructor() {
    this.fe = 0, /**
    * Keeps track of the document changes since the last raised snapshot.
    *
    * These changes are continuously updated as we receive document updates and
    * always reflect the current set of changes against the last issued snapshot.
    */
    this.ge = Lp(), /** See public getters for explanations of these fields. */
    this.pe = ht.EMPTY_BYTE_STRING, this.ye = !1, /**
    * Whether this target state should be included in the next snapshot. We
    * initialize to true so that newly-added targets are included in the next
    * RemoteEvent.
    */
    this.we = !0;
  }
  /**
   * Whether this target has been marked 'current'.
   *
   * 'Current' has special meaning in the RPC protocol: It implies that the
   * Watch backend has sent us all changes up to the point at which the target
   * was added and that the target is consistent with the rest of the watch
   * stream.
   */
  get current() {
    return this.ye;
  }
  /** The last resume token sent to us for this target. */
  get resumeToken() {
    return this.pe;
  }
  /** Whether this target has pending target adds or target removes. */
  get Se() {
    return this.fe !== 0;
  }
  /** Whether we have modified any state that should trigger a snapshot. */
  get be() {
    return this.we;
  }
  /**
   * Applies the resume token to the TargetChange, but only when it has a new
   * value. Empty resumeTokens are discarded.
   */
  De(e) {
    e.approximateByteSize() > 0 && (this.we = !0, this.pe = e);
  }
  /**
   * Creates a target change from the current set of changes.
   *
   * To reset the document changes after raising this snapshot, call
   * `clearPendingChanges()`.
   */
  Ce() {
    let e = _e(), n = _e(), r = _e();
    return this.ge.forEach((i, s) => {
      switch (s) {
        case 0:
          e = e.add(i);
          break;
        case 2:
          n = n.add(i);
          break;
        case 1:
          r = r.add(i);
          break;
        default:
          ce();
      }
    }), new Vs(this.pe, this.ye, e, n, r);
  }
  /**
   * Resets the document changes and sets `hasPendingChanges` to false.
   */
  ve() {
    this.we = !1, this.ge = Lp();
  }
  Fe(e, n) {
    this.we = !0, this.ge = this.ge.insert(e, n);
  }
  Me(e) {
    this.we = !0, this.ge = this.ge.remove(e);
  }
  xe() {
    this.fe += 1;
  }
  Oe() {
    this.fe -= 1, Ne(this.fe >= 0);
  }
  Ne() {
    this.we = !0, this.ye = !0;
  }
}
class Ok {
  constructor(e) {
    this.Le = e, /** The internal state of all tracked targets. */
    this.Be = /* @__PURE__ */ new Map(), /** Keeps track of the documents to update since the last raised snapshot. */
    this.ke = An(), /** A mapping of document keys to their set of target IDs. */
    this.qe = xp(), /**
    * A map of targets with existence filter mismatches. These targets are
    * known to be inconsistent and their listens needs to be re-established by
    * RemoteStore.
    */
    this.Qe = new Me(be);
  }
  /**
   * Processes and adds the DocumentWatchChange to the current set of changes.
   */
  Ke(e) {
    for (const n of e.Re) e.Ve && e.Ve.isFoundDocument() ? this.$e(n, e.Ve) : this.Ue(n, e.key, e.Ve);
    for (const n of e.removedTargetIds) this.Ue(n, e.key, e.Ve);
  }
  /** Processes and adds the WatchTargetChange to the current set of changes. */
  We(e) {
    this.forEachTarget(e, (n) => {
      const r = this.Ge(n);
      switch (e.state) {
        case 0:
          this.ze(n) && r.De(e.resumeToken);
          break;
        case 1:
          r.Oe(), r.Se || // We have a freshly added target, so we need to reset any state
          // that we had previously. This can happen e.g. when remove and add
          // back a target for existence filter mismatches.
          r.ve(), r.De(e.resumeToken);
          break;
        case 2:
          r.Oe(), r.Se || this.removeTarget(n);
          break;
        case 3:
          this.ze(n) && (r.Ne(), r.De(e.resumeToken));
          break;
        case 4:
          this.ze(n) && // Reset the target and synthesizes removes for all existing
          // documents. The backend will re-add any documents that still
          // match the target before it sends the next global snapshot.
          (this.je(n), r.De(e.resumeToken));
          break;
        default:
          ce();
      }
    });
  }
  /**
   * Iterates over all targetIds that the watch change applies to: either the
   * targetIds explicitly listed in the change or the targetIds of all currently
   * active targets.
   */
  forEachTarget(e, n) {
    e.targetIds.length > 0 ? e.targetIds.forEach(n) : this.Be.forEach((r, i) => {
      this.ze(i) && n(i);
    });
  }
  /**
   * Handles existence filters and synthesizes deletes for filter mismatches.
   * Targets that are invalidated by filter mismatches are added to
   * `pendingTargetResets`.
   */
  He(e) {
    const n = e.targetId, r = e.me.count, i = this.Je(n);
    if (i) {
      const s = i.target;
      if (Lu(s)) if (r === 0) {
        const o = new se(s.path);
        this.Ue(n, o, _t.newNoDocument(o, he.min()));
      } else Ne(r === 1);
      else {
        const o = this.Ye(n);
        if (o !== r) {
          const c = this.Ze(e), u = c ? this.Xe(c, e, o) : 1;
          if (u !== 0) {
            this.je(n);
            const l = u === 2 ? "TargetPurposeExistenceFilterMismatchBloom" : "TargetPurposeExistenceFilterMismatch";
            this.Qe = this.Qe.insert(n, l);
          }
        }
      }
    }
  }
  /**
   * Parse the bloom filter from the "unchanged_names" field of an existence
   * filter.
   */
  Ze(e) {
    const n = e.me.unchangedNames;
    if (!n || !n.bits) return null;
    const { bits: { bitmap: r = "", padding: i = 0 }, hashCount: s = 0 } = n;
    let o, c;
    try {
      o = Rr(r).toUint8Array();
    } catch (u) {
      if (u instanceof Gy) return ai("Decoding the base64 bloom filter in existence filter failed (" + u.message + "); ignoring the bloom filter and falling back to full re-query."), null;
      throw u;
    }
    try {
      c = new Kl(o, i, s);
    } catch (u) {
      return ai(u instanceof Yi ? "BloomFilter error: " : "Applying bloom filter failed: ", u), null;
    }
    return c.Ie === 0 ? null : c;
  }
  /**
   * Apply bloom filter to remove the deleted documents, and return the
   * application status.
   */
  Xe(e, n, r) {
    return n.me.count === r - this.nt(e, n.targetId) ? 0 : 2;
  }
  /**
   * Filter out removed documents based on bloom filter membership result and
   * return number of documents removed.
   */
  nt(e, n) {
    const r = this.Le.getRemoteKeysForTarget(n);
    let i = 0;
    return r.forEach((s) => {
      const o = this.Le.tt(), c = `projects/${o.projectId}/databases/${o.database}/documents/${s.path.canonicalString()}`;
      e.mightContain(c) || (this.Ue(
        n,
        s,
        /*updatedDocument=*/
        null
      ), i++);
    }), i;
  }
  /**
   * Converts the currently accumulated state into a remote event at the
   * provided snapshot version. Resets the accumulated changes before returning.
   */
  rt(e) {
    const n = /* @__PURE__ */ new Map();
    this.Be.forEach((s, o) => {
      const c = this.Je(o);
      if (c) {
        if (s.current && Lu(c.target)) {
          const u = new se(c.target.path);
          this.ke.get(u) !== null || this.it(o, u) || this.Ue(o, u, _t.newNoDocument(u, e));
        }
        s.be && (n.set(o, s.Ce()), s.ve());
      }
    });
    let r = _e();
    this.qe.forEach((s, o) => {
      let c = !0;
      o.forEachWhile((u) => {
        const l = this.Je(u);
        return !l || l.purpose === "TargetPurposeLimboResolution" || (c = !1, !1);
      }), c && (r = r.add(s));
    }), this.ke.forEach((s, o) => o.setReadTime(e));
    const i = new Fa(e, n, this.Qe, this.ke, r);
    return this.ke = An(), this.qe = xp(), this.Qe = new Me(be), i;
  }
  /**
   * Adds the provided document to the internal list of document updates and
   * its document key to the given target's mapping.
   */
  // Visible for testing.
  $e(e, n) {
    if (!this.ze(e)) return;
    const r = this.it(e, n.key) ? 2 : 0;
    this.Ge(e).Fe(n.key, r), this.ke = this.ke.insert(n.key, n), this.qe = this.qe.insert(n.key, this.st(n.key).add(e));
  }
  /**
   * Removes the provided document from the target mapping. If the
   * document no longer matches the target, but the document's state is still
   * known (e.g. we know that the document was deleted or we received the change
   * that caused the filter mismatch), the new document can be provided
   * to update the remote document cache.
   */
  // Visible for testing.
  Ue(e, n, r) {
    if (!this.ze(e)) return;
    const i = this.Ge(e);
    this.it(e, n) ? i.Fe(
      n,
      1
      /* ChangeType.Removed */
    ) : (
      // The document may have entered and left the target before we raised a
      // snapshot, so we can just ignore the change.
      i.Me(n)
    ), this.qe = this.qe.insert(n, this.st(n).delete(e)), r && (this.ke = this.ke.insert(n, r));
  }
  removeTarget(e) {
    this.Be.delete(e);
  }
  /**
   * Returns the current count of documents in the target. This includes both
   * the number of documents that the LocalStore considers to be part of the
   * target as well as any accumulated changes.
   */
  Ye(e) {
    const n = this.Ge(e).Ce();
    return this.Le.getRemoteKeysForTarget(e).size + n.addedDocuments.size - n.removedDocuments.size;
  }
  /**
   * Increment the number of acks needed from watch before we can consider the
   * server to be 'in-sync' with the client's active targets.
   */
  xe(e) {
    this.Ge(e).xe();
  }
  Ge(e) {
    let n = this.Be.get(e);
    return n || (n = new Dp(), this.Be.set(e, n)), n;
  }
  st(e) {
    let n = this.qe.get(e);
    return n || (n = new ut(be), this.qe = this.qe.insert(e, n)), n;
  }
  /**
   * Verifies that the user is still interested in this target (by calling
   * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs
   * from watch.
   */
  ze(e) {
    const n = this.Je(e) !== null;
    return n || ee("WatchChangeAggregator", "Detected inactive target", e), n;
  }
  /**
   * Returns the TargetData for an active target (i.e. a target that the user
   * is still interested in that has no outstanding target change requests).
   */
  Je(e) {
    const n = this.Be.get(e);
    return n && n.Se ? null : this.Le.ot(e);
  }
  /**
   * Resets the state of a Watch target to its initial state (e.g. sets
   * 'current' to false, clears the resume token and removes its target mapping
   * from all documents).
   */
  je(e) {
    this.Be.set(e, new Dp()), this.Le.getRemoteKeysForTarget(e).forEach((n) => {
      this.Ue(
        e,
        n,
        /*updatedDocument=*/
        null
      );
    });
  }
  /**
   * Returns whether the LocalStore considers the document to be part of the
   * specified target.
   */
  it(e, n) {
    return this.Le.getRemoteKeysForTarget(e).has(n);
  }
}
function xp() {
  return new Me(se.comparator);
}
function Lp() {
  return new Me(se.comparator);
}
const Nk = {
  asc: "ASCENDING",
  desc: "DESCENDING"
}, Dk = {
  "<": "LESS_THAN",
  "<=": "LESS_THAN_OR_EQUAL",
  ">": "GREATER_THAN",
  ">=": "GREATER_THAN_OR_EQUAL",
  "==": "EQUAL",
  "!=": "NOT_EQUAL",
  "array-contains": "ARRAY_CONTAINS",
  in: "IN",
  "not-in": "NOT_IN",
  "array-contains-any": "ARRAY_CONTAINS_ANY"
}, xk = {
  and: "AND",
  or: "OR"
};
class Lk {
  constructor(e, n) {
    this.databaseId = e, this.useProto3Json = n;
  }
}
function Fu(t, e) {
  return t.useProto3Json || Na(e) ? e : {
    value: e
  };
}
function oa(t, e) {
  return t.useProto3Json ? `${new Date(1e3 * e.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "")}.${("000000000" + e.nanoseconds).slice(-9)}Z` : {
    seconds: "" + e.seconds,
    nanos: e.nanoseconds
  };
}
function v_(t, e) {
  return t.useProto3Json ? e.toBase64() : e.toUint8Array();
}
function Mk(t, e) {
  return oa(t, e.toTimestamp());
}
function on(t) {
  return Ne(!!t), he.fromTimestamp(function(n) {
    const r = Yn(n);
    return new et(r.seconds, r.nanos);
  }(t));
}
function Hl(t, e) {
  return Uu(t, e).canonicalString();
}
function Uu(t, e) {
  const n = function(i) {
    return new xe(["projects", i.projectId, "databases", i.database]);
  }(t).child("documents");
  return e === void 0 ? n : n.child(e);
}
function w_(t) {
  const e = xe.fromString(t);
  return Ne(S_(e)), e;
}
function ju(t, e) {
  return Hl(t.databaseId, e.path);
}
function Vc(t, e) {
  const n = w_(e);
  if (n.get(1) !== t.databaseId.projectId) throw new X($.INVALID_ARGUMENT, "Tried to deserialize key from different project: " + n.get(1) + " vs " + t.databaseId.projectId);
  if (n.get(3) !== t.databaseId.database) throw new X($.INVALID_ARGUMENT, "Tried to deserialize key from different database: " + n.get(3) + " vs " + t.databaseId.database);
  return new se(b_(n));
}
function E_(t, e) {
  return Hl(t.databaseId, e);
}
function Vk(t) {
  const e = w_(t);
  return e.length === 4 ? xe.emptyPath() : b_(e);
}
function Bu(t) {
  return new xe(["projects", t.databaseId.projectId, "databases", t.databaseId.database]).canonicalString();
}
function b_(t) {
  return Ne(t.length > 4 && t.get(4) === "documents"), t.popFirst(5);
}
function Mp(t, e, n) {
  return {
    name: ju(t, e),
    fields: n.value.mapValue.fields
  };
}
function Fk(t, e) {
  let n;
  if ("targetChange" in e) {
    e.targetChange;
    const r = function(l) {
      return l === "NO_CHANGE" ? 0 : l === "ADD" ? 1 : l === "REMOVE" ? 2 : l === "CURRENT" ? 3 : l === "RESET" ? 4 : ce();
    }(e.targetChange.targetChangeType || "NO_CHANGE"), i = e.targetChange.targetIds || [], s = function(l, f) {
      return l.useProto3Json ? (Ne(f === void 0 || typeof f == "string"), ht.fromBase64String(f || "")) : (Ne(f === void 0 || // Check if the value is an instance of both Buffer and Uint8Array,
      // despite the fact that Buffer extends Uint8Array. In some
      // environments, such as jsdom, the prototype chain of Buffer
      // does not indicate that it extends Uint8Array.
      f instanceof Buffer || f instanceof Uint8Array), ht.fromUint8Array(f || new Uint8Array()));
    }(t, e.targetChange.resumeToken), o = e.targetChange.cause, c = o && function(l) {
      const f = l.code === void 0 ? $.UNKNOWN : g_(l.code);
      return new X(f, l.message || "");
    }(o);
    n = new __(r, i, s, c || null);
  } else if ("documentChange" in e) {
    e.documentChange;
    const r = e.documentChange;
    r.document, r.document.name, r.document.updateTime;
    const i = Vc(t, r.document.name), s = on(r.document.updateTime), o = r.document.createTime ? on(r.document.createTime) : he.min(), c = new Ft({
      mapValue: {
        fields: r.document.fields
      }
    }), u = _t.newFoundDocument(i, s, o, c), l = r.targetIds || [], f = r.removedTargetIds || [];
    n = new xo(l, f, u.key, u);
  } else if ("documentDelete" in e) {
    e.documentDelete;
    const r = e.documentDelete;
    r.document;
    const i = Vc(t, r.document), s = r.readTime ? on(r.readTime) : he.min(), o = _t.newNoDocument(i, s), c = r.removedTargetIds || [];
    n = new xo([], c, o.key, o);
  } else if ("documentRemove" in e) {
    e.documentRemove;
    const r = e.documentRemove;
    r.document;
    const i = Vc(t, r.document), s = r.removedTargetIds || [];
    n = new xo([], s, i, null);
  } else {
    if (!("filter" in e)) return ce();
    {
      e.filter;
      const r = e.filter;
      r.targetId;
      const { count: i = 0, unchangedNames: s } = r, o = new Rk(i, s), c = r.targetId;
      n = new y_(c, o);
    }
  }
  return n;
}
function Uk(t, e) {
  let n;
  if (e instanceof Ms) n = {
    update: Mp(t, e.key, e.value)
  };
  else if (e instanceof m_) n = {
    delete: ju(t, e.key)
  };
  else if (e instanceof xr) n = {
    update: Mp(t, e.key, e.data),
    updateMask: Wk(e.fieldMask)
  };
  else {
    if (!(e instanceof Ik)) return ce();
    n = {
      verify: ju(t, e.key)
    };
  }
  return e.fieldTransforms.length > 0 && (n.updateTransforms = e.fieldTransforms.map((r) => function(s, o) {
    const c = o.transform;
    if (c instanceof ia) return {
      fieldPath: o.field.canonicalString(),
      setToServerValue: "REQUEST_TIME"
    };
    if (c instanceof _s) return {
      fieldPath: o.field.canonicalString(),
      appendMissingElements: {
        values: c.elements
      }
    };
    if (c instanceof vs) return {
      fieldPath: o.field.canonicalString(),
      removeAllFromArray: {
        values: c.elements
      }
    };
    if (c instanceof sa) return {
      fieldPath: o.field.canonicalString(),
      increment: c.Pe
    };
    throw ce();
  }(0, r))), e.precondition.isNone || (n.currentDocument = function(i, s) {
    return s.updateTime !== void 0 ? {
      updateTime: Mk(i, s.updateTime)
    } : s.exists !== void 0 ? {
      exists: s.exists
    } : ce();
  }(t, e.precondition)), n;
}
function jk(t, e) {
  return t && t.length > 0 ? (Ne(e !== void 0), t.map((n) => function(i, s) {
    let o = i.updateTime ? on(i.updateTime) : on(s);
    return o.isEqual(he.min()) && // The Firestore Emulator currently returns an update time of 0 for
    // deletes of non-existing documents (rather than null). This breaks the
    // test "get deleted doc while offline with source=cache" as NoDocuments
    // with version 0 are filtered by IndexedDb's RemoteDocumentCache.
    // TODO(#2149): Remove this when Emulator is fixed
    (o = on(s)), new Ek(o, i.transformResults || []);
  }(n, e))) : [];
}
function Bk(t, e) {
  return {
    documents: [E_(t, e.path)]
  };
}
function $k(t, e) {
  const n = {
    structuredQuery: {}
  }, r = e.path;
  let i;
  e.collectionGroup !== null ? (i = r, n.structuredQuery.from = [{
    collectionId: e.collectionGroup,
    allDescendants: !0
  }]) : (i = r.popLast(), n.structuredQuery.from = [{
    collectionId: r.lastSegment()
  }]), n.parent = E_(t, i);
  const s = function(l) {
    if (l.length !== 0)
      return I_(Jt.create(
        l,
        "and"
        /* CompositeOperator.AND */
      ));
  }(e.filters);
  s && (n.structuredQuery.where = s);
  const o = function(l) {
    if (l.length !== 0)
      return l.map((f) => (
        // visible for testing
        function(_) {
          return {
            field: zr(_.field),
            direction: Kk(_.dir)
          };
        }(f)
      ));
  }(e.orderBy);
  o && (n.structuredQuery.orderBy = o);
  const c = Fu(t, e.limit);
  return c !== null && (n.structuredQuery.limit = c), e.startAt && (n.structuredQuery.startAt = function(l) {
    return {
      before: l.inclusive,
      values: l.position
    };
  }(e.startAt)), e.endAt && (n.structuredQuery.endAt = function(l) {
    return {
      before: !l.inclusive,
      values: l.position
    };
  }(e.endAt)), {
    _t: n,
    parent: i
  };
}
function qk(t) {
  let e = Vk(t.parent);
  const n = t.structuredQuery, r = n.from ? n.from.length : 0;
  let i = null;
  if (r > 0) {
    Ne(r === 1);
    const f = n.from[0];
    f.allDescendants ? i = f.collectionId : e = e.child(f.collectionId);
  }
  let s = [];
  n.where && (s = function(h) {
    const _ = T_(h);
    return _ instanceof Jt && Jy(_) ? _.getFilters() : [_];
  }(n.where));
  let o = [];
  n.orderBy && (o = function(h) {
    return h.map((_) => function(I) {
      return new ra(
        Kr(I.field),
        // visible for testing
        function(m) {
          switch (m) {
            case "ASCENDING":
              return "asc";
            case "DESCENDING":
              return "desc";
            default:
              return;
          }
        }(I.direction)
      );
    }(_));
  }(n.orderBy));
  let c = null;
  n.limit && (c = function(h) {
    let _;
    return _ = typeof h == "object" ? h.value : h, Na(_) ? null : _;
  }(n.limit));
  let u = null;
  n.startAt && (u = function(h) {
    const _ = !!h.before, b = h.values || [];
    return new na(b, _);
  }(n.startAt));
  let l = null;
  return n.endAt && (l = function(h) {
    const _ = !h.before, b = h.values || [];
    return new na(b, _);
  }(n.endAt)), ck(e, i, o, s, c, "F", u, l);
}
function zk(t, e) {
  const n = function(i) {
    switch (i) {
      case "TargetPurposeListen":
        return null;
      case "TargetPurposeExistenceFilterMismatch":
        return "existence-filter-mismatch";
      case "TargetPurposeExistenceFilterMismatchBloom":
        return "existence-filter-mismatch-bloom";
      case "TargetPurposeLimboResolution":
        return "limbo-document";
      default:
        return ce();
    }
  }(e.purpose);
  return n == null ? null : {
    "goog-listen-tags": n
  };
}
function T_(t) {
  return t.unaryFilter !== void 0 ? function(n) {
    switch (n.unaryFilter.op) {
      case "IS_NAN":
        const r = Kr(n.unaryFilter.field);
        return Je.create(r, "==", {
          doubleValue: NaN
        });
      case "IS_NULL":
        const i = Kr(n.unaryFilter.field);
        return Je.create(i, "==", {
          nullValue: "NULL_VALUE"
        });
      case "IS_NOT_NAN":
        const s = Kr(n.unaryFilter.field);
        return Je.create(s, "!=", {
          doubleValue: NaN
        });
      case "IS_NOT_NULL":
        const o = Kr(n.unaryFilter.field);
        return Je.create(o, "!=", {
          nullValue: "NULL_VALUE"
        });
      default:
        return ce();
    }
  }(t) : t.fieldFilter !== void 0 ? function(n) {
    return Je.create(Kr(n.fieldFilter.field), function(i) {
      switch (i) {
        case "EQUAL":
          return "==";
        case "NOT_EQUAL":
          return "!=";
        case "GREATER_THAN":
          return ">";
        case "GREATER_THAN_OR_EQUAL":
          return ">=";
        case "LESS_THAN":
          return "<";
        case "LESS_THAN_OR_EQUAL":
          return "<=";
        case "ARRAY_CONTAINS":
          return "array-contains";
        case "IN":
          return "in";
        case "NOT_IN":
          return "not-in";
        case "ARRAY_CONTAINS_ANY":
          return "array-contains-any";
        default:
          return ce();
      }
    }(n.fieldFilter.op), n.fieldFilter.value);
  }(t) : t.compositeFilter !== void 0 ? function(n) {
    return Jt.create(n.compositeFilter.filters.map((r) => T_(r)), function(i) {
      switch (i) {
        case "AND":
          return "and";
        case "OR":
          return "or";
        default:
          return ce();
      }
    }(n.compositeFilter.op));
  }(t) : ce();
}
function Kk(t) {
  return Nk[t];
}
function Hk(t) {
  return Dk[t];
}
function Gk(t) {
  return xk[t];
}
function zr(t) {
  return {
    fieldPath: t.canonicalString()
  };
}
function Kr(t) {
  return ct.fromServerFormat(t.fieldPath);
}
function I_(t) {
  return t instanceof Je ? function(n) {
    if (n.op === "==") {
      if (bp(n.value)) return {
        unaryFilter: {
          field: zr(n.field),
          op: "IS_NAN"
        }
      };
      if (Ep(n.value)) return {
        unaryFilter: {
          field: zr(n.field),
          op: "IS_NULL"
        }
      };
    } else if (n.op === "!=") {
      if (bp(n.value)) return {
        unaryFilter: {
          field: zr(n.field),
          op: "IS_NOT_NAN"
        }
      };
      if (Ep(n.value)) return {
        unaryFilter: {
          field: zr(n.field),
          op: "IS_NOT_NULL"
        }
      };
    }
    return {
      fieldFilter: {
        field: zr(n.field),
        op: Hk(n.op),
        value: n.value
      }
    };
  }(t) : t instanceof Jt ? function(n) {
    const r = n.getFilters().map((i) => I_(i));
    return r.length === 1 ? r[0] : {
      compositeFilter: {
        op: Gk(n.op),
        filters: r
      }
    };
  }(t) : ce();
}
function Wk(t) {
  const e = [];
  return t.fields.forEach((n) => e.push(n.canonicalString())), {
    fieldPaths: e
  };
}
function S_(t) {
  return t.length >= 4 && t.get(0) === "projects" && t.get(2) === "databases";
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Bn {
  constructor(e, n, r, i, s = he.min(), o = he.min(), c = ht.EMPTY_BYTE_STRING, u = null) {
    this.target = e, this.targetId = n, this.purpose = r, this.sequenceNumber = i, this.snapshotVersion = s, this.lastLimboFreeSnapshotVersion = o, this.resumeToken = c, this.expectedCount = u;
  }
  /** Creates a new target data instance with an updated sequence number. */
  withSequenceNumber(e) {
    return new Bn(this.target, this.targetId, this.purpose, e, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken, this.expectedCount);
  }
  /**
   * Creates a new target data instance with an updated resume token and
   * snapshot version.
   */
  withResumeToken(e, n) {
    return new Bn(
      this.target,
      this.targetId,
      this.purpose,
      this.sequenceNumber,
      n,
      this.lastLimboFreeSnapshotVersion,
      e,
      /* expectedCount= */
      null
    );
  }
  /**
   * Creates a new target data instance with an updated expected count.
   */
  withExpectedCount(e) {
    return new Bn(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken, e);
  }
  /**
   * Creates a new target data instance with an updated last limbo free
   * snapshot version number.
   */
  withLastLimboFreeSnapshotVersion(e) {
    return new Bn(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, e, this.resumeToken, this.expectedCount);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Qk {
  constructor(e) {
    this.ct = e;
  }
}
function Yk(t) {
  const e = qk({
    parent: t.parent,
    structuredQuery: t.structuredQuery
  });
  return t.limitType === "LAST" ? Vu(
    e,
    e.limit,
    "L"
    /* LimitType.Last */
  ) : e;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Jk {
  constructor() {
    this.an = new Xk();
  }
  addToCollectionParentIndex(e, n) {
    return this.an.add(n), z.resolve();
  }
  getCollectionParents(e, n) {
    return z.resolve(this.an.getEntries(n));
  }
  addFieldIndex(e, n) {
    return z.resolve();
  }
  deleteFieldIndex(e, n) {
    return z.resolve();
  }
  deleteAllFieldIndexes(e) {
    return z.resolve();
  }
  createTargetIndexes(e, n) {
    return z.resolve();
  }
  getDocumentsMatchingTarget(e, n) {
    return z.resolve(null);
  }
  getIndexType(e, n) {
    return z.resolve(
      0
      /* IndexType.NONE */
    );
  }
  getFieldIndexes(e, n) {
    return z.resolve([]);
  }
  getNextCollectionGroupToUpdate(e) {
    return z.resolve(null);
  }
  getMinOffset(e, n) {
    return z.resolve(Qn.min());
  }
  getMinOffsetFromCollectionGroup(e, n) {
    return z.resolve(Qn.min());
  }
  updateCollectionGroup(e, n, r) {
    return z.resolve();
  }
  updateIndexEntries(e, n) {
    return z.resolve();
  }
}
class Xk {
  constructor() {
    this.index = {};
  }
  // Returns false if the entry already existed.
  add(e) {
    const n = e.lastSegment(), r = e.popLast(), i = this.index[n] || new ut(xe.comparator), s = !i.has(r);
    return this.index[n] = i.add(r), s;
  }
  has(e) {
    const n = e.lastSegment(), r = e.popLast(), i = this.index[n];
    return i && i.has(r);
  }
  getEntries(e) {
    return (this.index[e] || new ut(xe.comparator)).toArray();
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class hi {
  constructor(e) {
    this.Nn = e;
  }
  next() {
    return this.Nn += 2, this.Nn;
  }
  static Ln() {
    return new hi(0);
  }
  static Bn() {
    return new hi(-1);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Zk {
  constructor() {
    this.changes = new bi((e) => e.toString(), (e, n) => e.isEqual(n)), this.changesApplied = !1;
  }
  /**
   * Buffers a `RemoteDocumentCache.addEntry()` call.
   *
   * You can only modify documents that have already been retrieved via
   * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
   */
  addEntry(e) {
    this.assertNotApplied(), this.changes.set(e.key, e);
  }
  /**
   * Buffers a `RemoteDocumentCache.removeEntry()` call.
   *
   * You can only remove documents that have already been retrieved via
   * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
   */
  removeEntry(e, n) {
    this.assertNotApplied(), this.changes.set(e, _t.newInvalidDocument(e).setReadTime(n));
  }
  /**
   * Looks up an entry in the cache. The buffered changes will first be checked,
   * and if no buffered change applies, this will forward to
   * `RemoteDocumentCache.getEntry()`.
   *
   * @param transaction - The transaction in which to perform any persistence
   *     operations.
   * @param documentKey - The key of the entry to look up.
   * @returns The cached document or an invalid document if we have nothing
   * cached.
   */
  getEntry(e, n) {
    this.assertNotApplied();
    const r = this.changes.get(n);
    return r !== void 0 ? z.resolve(r) : this.getFromCache(e, n);
  }
  /**
   * Looks up several entries in the cache, forwarding to
   * `RemoteDocumentCache.getEntry()`.
   *
   * @param transaction - The transaction in which to perform any persistence
   *     operations.
   * @param documentKeys - The keys of the entries to look up.
   * @returns A map of cached documents, indexed by key. If an entry cannot be
   *     found, the corresponding key will be mapped to an invalid document.
   */
  getEntries(e, n) {
    return this.getAllFromCache(e, n);
  }
  /**
   * Applies buffered changes to the underlying RemoteDocumentCache, using
   * the provided transaction.
   */
  apply(e) {
    return this.assertNotApplied(), this.changesApplied = !0, this.applyChanges(e);
  }
  /** Helper to assert this.changes is not null  */
  assertNotApplied() {
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class eO {
  constructor(e, n) {
    this.overlayedDocument = e, this.mutatedFields = n;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class tO {
  constructor(e, n, r, i) {
    this.remoteDocumentCache = e, this.mutationQueue = n, this.documentOverlayCache = r, this.indexManager = i;
  }
  /**
   * Get the local view of the document identified by `key`.
   *
   * @returns Local view of the document or null if we don't have any cached
   * state for it.
   */
  getDocument(e, n) {
    let r = null;
    return this.documentOverlayCache.getOverlay(e, n).next((i) => (r = i, this.remoteDocumentCache.getEntry(e, n))).next((i) => (r !== null && rs(r.mutation, i, Wt.empty(), et.now()), i));
  }
  /**
   * Gets the local view of the documents identified by `keys`.
   *
   * If we don't have cached state for a document in `keys`, a NoDocument will
   * be stored for that key in the resulting set.
   */
  getDocuments(e, n) {
    return this.remoteDocumentCache.getEntries(e, n).next((r) => this.getLocalViewOfDocuments(e, r, _e()).next(() => r));
  }
  /**
   * Similar to `getDocuments`, but creates the local view from the given
   * `baseDocs` without retrieving documents from the local store.
   *
   * @param transaction - The transaction this operation is scoped to.
   * @param docs - The documents to apply local mutations to get the local views.
   * @param existenceStateChanged - The set of document keys whose existence state
   *   is changed. This is useful to determine if some documents overlay needs
   *   to be recalculated.
   */
  getLocalViewOfDocuments(e, n, r = _e()) {
    const i = fr();
    return this.populateOverlays(e, i, n).next(() => this.computeViews(e, n, i, r).next((s) => {
      let o = Qi();
      return s.forEach((c, u) => {
        o = o.insert(c, u.overlayedDocument);
      }), o;
    }));
  }
  /**
   * Gets the overlayed documents for the given document map, which will include
   * the local view of those documents and a `FieldMask` indicating which fields
   * are mutated locally, `null` if overlay is a Set or Delete mutation.
   */
  getOverlayedDocuments(e, n) {
    const r = fr();
    return this.populateOverlays(e, r, n).next(() => this.computeViews(e, n, r, _e()));
  }
  /**
   * Fetches the overlays for {@code docs} and adds them to provided overlay map
   * if the map does not already contain an entry for the given document key.
   */
  populateOverlays(e, n, r) {
    const i = [];
    return r.forEach((s) => {
      n.has(s) || i.push(s);
    }), this.documentOverlayCache.getOverlays(e, i).next((s) => {
      s.forEach((o, c) => {
        n.set(o, c);
      });
    });
  }
  /**
   * Computes the local view for the given documents.
   *
   * @param docs - The documents to compute views for. It also has the base
   *   version of the documents.
   * @param overlays - The overlays that need to be applied to the given base
   *   version of the documents.
   * @param existenceStateChanged - A set of documents whose existence states
   *   might have changed. This is used to determine if we need to re-calculate
   *   overlays from mutation queues.
   * @return A map represents the local documents view.
   */
  computeViews(e, n, r, i) {
    let s = An();
    const o = ns(), c = function() {
      return ns();
    }();
    return n.forEach((u, l) => {
      const f = r.get(l.key);
      i.has(l.key) && (f === void 0 || f.mutation instanceof xr) ? s = s.insert(l.key, l) : f !== void 0 ? (o.set(l.key, f.mutation.getFieldMask()), rs(f.mutation, l, f.mutation.getFieldMask(), et.now())) : (
        // no overlay exists
        // Using EMPTY to indicate there is no overlay for the document.
        o.set(l.key, Wt.empty())
      );
    }), this.recalculateAndSaveOverlays(e, s).next((u) => (u.forEach((l, f) => o.set(l, f)), n.forEach((l, f) => {
      var h;
      return c.set(l, new eO(f, (h = o.get(l)) !== null && h !== void 0 ? h : null));
    }), c));
  }
  recalculateAndSaveOverlays(e, n) {
    const r = ns();
    let i = new Me((o, c) => o - c), s = _e();
    return this.mutationQueue.getAllMutationBatchesAffectingDocumentKeys(e, n).next((o) => {
      for (const c of o) c.keys().forEach((u) => {
        const l = n.get(u);
        if (l === null) return;
        let f = r.get(u) || Wt.empty();
        f = c.applyToLocalView(l, f), r.set(u, f);
        const h = (i.get(c.batchId) || _e()).add(u);
        i = i.insert(c.batchId, h);
      });
    }).next(() => {
      const o = [], c = i.getReverseIterator();
      for (; c.hasNext(); ) {
        const u = c.getNext(), l = u.key, f = u.value, h = o_();
        f.forEach((_) => {
          if (!s.has(_)) {
            const b = d_(n.get(_), r.get(_));
            b !== null && h.set(_, b), s = s.add(_);
          }
        }), o.push(this.documentOverlayCache.saveOverlays(e, l, h));
      }
      return z.waitFor(o);
    }).next(() => r);
  }
  /**
   * Recalculates overlays by reading the documents from remote document cache
   * first, and saves them after they are calculated.
   */
  recalculateAndSaveOverlaysForDocumentKeys(e, n) {
    return this.remoteDocumentCache.getEntries(e, n).next((r) => this.recalculateAndSaveOverlays(e, r));
  }
  /**
   * Performs a query against the local view of all documents.
   *
   * @param transaction - The persistence transaction.
   * @param query - The query to match documents against.
   * @param offset - Read time and key to start scanning by (exclusive).
   * @param context - A optional tracker to keep a record of important details
   *   during database local query execution.
   */
  getDocumentsMatchingQuery(e, n, r, i) {
    return function(o) {
      return se.isDocumentKey(o.path) && o.collectionGroup === null && o.filters.length === 0;
    }(n) ? this.getDocumentsMatchingDocumentQuery(e, n.path) : t_(n) ? this.getDocumentsMatchingCollectionGroupQuery(e, n, r, i) : this.getDocumentsMatchingCollectionQuery(e, n, r, i);
  }
  /**
   * Given a collection group, returns the next documents that follow the provided offset, along
   * with an updated batch ID.
   *
   * <p>The documents returned by this method are ordered by remote version from the provided
   * offset. If there are no more remote documents after the provided offset, documents with
   * mutations in order of batch id from the offset are returned. Since all documents in a batch are
   * returned together, the total number of documents returned can exceed {@code count}.
   *
   * @param transaction
   * @param collectionGroup The collection group for the documents.
   * @param offset The offset to index into.
   * @param count The number of documents to return
   * @return A LocalWriteResult with the documents that follow the provided offset and the last processed batch id.
   */
  getNextDocuments(e, n, r, i) {
    return this.remoteDocumentCache.getAllFromCollectionGroup(e, n, r, i).next((s) => {
      const o = i - s.size > 0 ? this.documentOverlayCache.getOverlaysForCollectionGroup(e, n, r.largestBatchId, i - s.size) : z.resolve(fr());
      let c = -1, u = s;
      return o.next((l) => z.forEach(l, (f, h) => (c < h.largestBatchId && (c = h.largestBatchId), s.get(f) ? z.resolve() : this.remoteDocumentCache.getEntry(e, f).next((_) => {
        u = u.insert(f, _);
      }))).next(() => this.populateOverlays(e, l, s)).next(() => this.computeViews(e, u, l, _e())).next((f) => ({
        batchId: c,
        changes: s_(f)
      })));
    });
  }
  getDocumentsMatchingDocumentQuery(e, n) {
    return this.getDocument(e, new se(n)).next((r) => {
      let i = Qi();
      return r.isFoundDocument() && (i = i.insert(r.key, r)), i;
    });
  }
  getDocumentsMatchingCollectionGroupQuery(e, n, r, i) {
    const s = n.collectionGroup;
    let o = Qi();
    return this.indexManager.getCollectionParents(e, s).next((c) => z.forEach(c, (u) => {
      const l = function(h, _) {
        return new Ls(
          _,
          /*collectionGroup=*/
          null,
          h.explicitOrderBy.slice(),
          h.filters.slice(),
          h.limit,
          h.limitType,
          h.startAt,
          h.endAt
        );
      }(n, u.child(s));
      return this.getDocumentsMatchingCollectionQuery(e, l, r, i).next((f) => {
        f.forEach((h, _) => {
          o = o.insert(h, _);
        });
      });
    }).next(() => o));
  }
  getDocumentsMatchingCollectionQuery(e, n, r, i) {
    let s;
    return this.documentOverlayCache.getOverlaysForCollection(e, n.path, r.largestBatchId).next((o) => (s = o, this.remoteDocumentCache.getDocumentsMatchingQuery(e, n, r, s, i))).next((o) => {
      s.forEach((u, l) => {
        const f = l.getKey();
        o.get(f) === null && (o = o.insert(f, _t.newInvalidDocument(f)));
      });
      let c = Qi();
      return o.forEach((u, l) => {
        const f = s.get(u);
        f !== void 0 && rs(f.mutation, l, Wt.empty(), et.now()), // Finally, insert the documents that still match the query
        La(n, l) && (c = c.insert(u, l));
      }), c;
    });
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class nO {
  constructor(e) {
    this.serializer = e, this.lr = /* @__PURE__ */ new Map(), this.hr = /* @__PURE__ */ new Map();
  }
  getBundleMetadata(e, n) {
    return z.resolve(this.lr.get(n));
  }
  saveBundleMetadata(e, n) {
    return this.lr.set(
      n.id,
      /** Decodes a BundleMetadata proto into a BundleMetadata object. */
      function(i) {
        return {
          id: i.id,
          version: i.version,
          createTime: on(i.createTime)
        };
      }(n)
    ), z.resolve();
  }
  getNamedQuery(e, n) {
    return z.resolve(this.hr.get(n));
  }
  saveNamedQuery(e, n) {
    return this.hr.set(n.name, function(i) {
      return {
        name: i.name,
        query: Yk(i.bundledQuery),
        readTime: on(i.readTime)
      };
    }(n)), z.resolve();
  }
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class rO {
  constructor() {
    this.overlays = new Me(se.comparator), this.Pr = /* @__PURE__ */ new Map();
  }
  getOverlay(e, n) {
    return z.resolve(this.overlays.get(n));
  }
  getOverlays(e, n) {
    const r = fr();
    return z.forEach(n, (i) => this.getOverlay(e, i).next((s) => {
      s !== null && r.set(i, s);
    })).next(() => r);
  }
  saveOverlays(e, n, r) {
    return r.forEach((i, s) => {
      this.ht(e, n, s);
    }), z.resolve();
  }
  removeOverlaysForBatchId(e, n, r) {
    const i = this.Pr.get(r);
    return i !== void 0 && (i.forEach((s) => this.overlays = this.overlays.remove(s)), this.Pr.delete(r)), z.resolve();
  }
  getOverlaysForCollection(e, n, r) {
    const i = fr(), s = n.length + 1, o = new se(n.child("")), c = this.overlays.getIteratorFrom(o);
    for (; c.hasNext(); ) {
      const u = c.getNext().value, l = u.getKey();
      if (!n.isPrefixOf(l.path)) break;
      l.path.length === s && u.largestBatchId > r && i.set(u.getKey(), u);
    }
    return z.resolve(i);
  }
  getOverlaysForCollectionGroup(e, n, r, i) {
    let s = new Me((l, f) => l - f);
    const o = this.overlays.getIterator();
    for (; o.hasNext(); ) {
      const l = o.getNext().value;
      if (l.getKey().getCollectionGroup() === n && l.largestBatchId > r) {
        let f = s.get(l.largestBatchId);
        f === null && (f = fr(), s = s.insert(l.largestBatchId, f)), f.set(l.getKey(), l);
      }
    }
    const c = fr(), u = s.getIterator();
    for (; u.hasNext() && (u.getNext().value.forEach((l, f) => c.set(l, f)), !(c.size() >= i)); )
      ;
    return z.resolve(c);
  }
  ht(e, n, r) {
    const i = this.overlays.get(r.key);
    if (i !== null) {
      const o = this.Pr.get(i.largestBatchId).delete(r.key);
      this.Pr.set(i.largestBatchId, o);
    }
    this.overlays = this.overlays.insert(r.key, new Ak(n, r));
    let s = this.Pr.get(n);
    s === void 0 && (s = _e(), this.Pr.set(n, s)), this.Pr.set(n, s.add(r.key));
  }
}
/**
 * @license
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class iO {
  constructor() {
    this.sessionToken = ht.EMPTY_BYTE_STRING;
  }
  getSessionToken(e) {
    return z.resolve(this.sessionToken);
  }
  setSessionToken(e, n) {
    return this.sessionToken = n, z.resolve();
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Gl {
  constructor() {
    this.Ir = new ut(nt.Tr), // A set of outstanding references to a document sorted by target id.
    this.Er = new ut(nt.dr);
  }
  /** Returns true if the reference set contains no references. */
  isEmpty() {
    return this.Ir.isEmpty();
  }
  /** Adds a reference to the given document key for the given ID. */
  addReference(e, n) {
    const r = new nt(e, n);
    this.Ir = this.Ir.add(r), this.Er = this.Er.add(r);
  }
  /** Add references to the given document keys for the given ID. */
  Ar(e, n) {
    e.forEach((r) => this.addReference(r, n));
  }
  /**
   * Removes a reference to the given document key for the given
   * ID.
   */
  removeReference(e, n) {
    this.Rr(new nt(e, n));
  }
  Vr(e, n) {
    e.forEach((r) => this.removeReference(r, n));
  }
  /**
   * Clears all references with a given ID. Calls removeRef() for each key
   * removed.
   */
  mr(e) {
    const n = new se(new xe([])), r = new nt(n, e), i = new nt(n, e + 1), s = [];
    return this.Er.forEachInRange([r, i], (o) => {
      this.Rr(o), s.push(o.key);
    }), s;
  }
  gr() {
    this.Ir.forEach((e) => this.Rr(e));
  }
  Rr(e) {
    this.Ir = this.Ir.delete(e), this.Er = this.Er.delete(e);
  }
  pr(e) {
    const n = new se(new xe([])), r = new nt(n, e), i = new nt(n, e + 1);
    let s = _e();
    return this.Er.forEachInRange([r, i], (o) => {
      s = s.add(o.key);
    }), s;
  }
  containsKey(e) {
    const n = new nt(e, 0), r = this.Ir.firstAfterOrEqual(n);
    return r !== null && e.isEqual(r.key);
  }
}
class nt {
  constructor(e, n) {
    this.key = e, this.yr = n;
  }
  /** Compare by key then by ID */
  static Tr(e, n) {
    return se.comparator(e.key, n.key) || be(e.yr, n.yr);
  }
  /** Compare by ID then by key */
  static dr(e, n) {
    return be(e.yr, n.yr) || se.comparator(e.key, n.key);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class sO {
  constructor(e, n) {
    this.indexManager = e, this.referenceDelegate = n, /**
    * The set of all mutations that have been sent but not yet been applied to
    * the backend.
    */
    this.mutationQueue = [], /** Next value to use when assigning sequential IDs to each mutation batch. */
    this.wr = 1, /** An ordered mapping between documents and the mutations batch IDs. */
    this.Sr = new ut(nt.Tr);
  }
  checkEmpty(e) {
    return z.resolve(this.mutationQueue.length === 0);
  }
  addMutationBatch(e, n, r, i) {
    const s = this.wr;
    this.wr++, this.mutationQueue.length > 0 && this.mutationQueue[this.mutationQueue.length - 1];
    const o = new Sk(s, n, r, i);
    this.mutationQueue.push(o);
    for (const c of i) this.Sr = this.Sr.add(new nt(c.key, s)), this.indexManager.addToCollectionParentIndex(e, c.key.path.popLast());
    return z.resolve(o);
  }
  lookupMutationBatch(e, n) {
    return z.resolve(this.br(n));
  }
  getNextMutationBatchAfterBatchId(e, n) {
    const r = n + 1, i = this.Dr(r), s = i < 0 ? 0 : i;
    return z.resolve(this.mutationQueue.length > s ? this.mutationQueue[s] : null);
  }
  getHighestUnacknowledgedBatchId() {
    return z.resolve(this.mutationQueue.length === 0 ? -1 : this.wr - 1);
  }
  getAllMutationBatches(e) {
    return z.resolve(this.mutationQueue.slice());
  }
  getAllMutationBatchesAffectingDocumentKey(e, n) {
    const r = new nt(n, 0), i = new nt(n, Number.POSITIVE_INFINITY), s = [];
    return this.Sr.forEachInRange([r, i], (o) => {
      const c = this.br(o.yr);
      s.push(c);
    }), z.resolve(s);
  }
  getAllMutationBatchesAffectingDocumentKeys(e, n) {
    let r = new ut(be);
    return n.forEach((i) => {
      const s = new nt(i, 0), o = new nt(i, Number.POSITIVE_INFINITY);
      this.Sr.forEachInRange([s, o], (c) => {
        r = r.add(c.yr);
      });
    }), z.resolve(this.Cr(r));
  }
  getAllMutationBatchesAffectingQuery(e, n) {
    const r = n.path, i = r.length + 1;
    let s = r;
    se.isDocumentKey(s) || (s = s.child(""));
    const o = new nt(new se(s), 0);
    let c = new ut(be);
    return this.Sr.forEachWhile((u) => {
      const l = u.key.path;
      return !!r.isPrefixOf(l) && // Rows with document keys more than one segment longer than the query
      // path can't be matches. For example, a query on 'rooms' can't match
      // the document /rooms/abc/messages/xyx.
      // TODO(mcg): we'll need a different scanner when we implement
      // ancestor queries.
      (l.length === i && (c = c.add(u.yr)), !0);
    }, o), z.resolve(this.Cr(c));
  }
  Cr(e) {
    const n = [];
    return e.forEach((r) => {
      const i = this.br(r);
      i !== null && n.push(i);
    }), n;
  }
  removeMutationBatch(e, n) {
    Ne(this.vr(n.batchId, "removed") === 0), this.mutationQueue.shift();
    let r = this.Sr;
    return z.forEach(n.mutations, (i) => {
      const s = new nt(i.key, n.batchId);
      return r = r.delete(s), this.referenceDelegate.markPotentiallyOrphaned(e, i.key);
    }).next(() => {
      this.Sr = r;
    });
  }
  xn(e) {
  }
  containsKey(e, n) {
    const r = new nt(n, 0), i = this.Sr.firstAfterOrEqual(r);
    return z.resolve(n.isEqual(i && i.key));
  }
  performConsistencyCheck(e) {
    return this.mutationQueue.length, z.resolve();
  }
  /**
   * Finds the index of the given batchId in the mutation queue and asserts that
   * the resulting index is within the bounds of the queue.
   *
   * @param batchId - The batchId to search for
   * @param action - A description of what the caller is doing, phrased in passive
   * form (e.g. "acknowledged" in a routine that acknowledges batches).
   */
  vr(e, n) {
    return this.Dr(e);
  }
  /**
   * Finds the index of the given batchId in the mutation queue. This operation
   * is O(1).
   *
   * @returns The computed index of the batch with the given batchId, based on
   * the state of the queue. Note this index can be negative if the requested
   * batchId has already been removed from the queue or past the end of the
   * queue if the batchId is larger than the last added batch.
   */
  Dr(e) {
    return this.mutationQueue.length === 0 ? 0 : e - this.mutationQueue[0].batchId;
  }
  /**
   * A version of lookupMutationBatch that doesn't return a promise, this makes
   * other functions that uses this code easier to read and more efficient.
   */
  br(e) {
    const n = this.Dr(e);
    return n < 0 || n >= this.mutationQueue.length ? null : this.mutationQueue[n];
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class oO {
  /**
   * @param sizer - Used to assess the size of a document. For eager GC, this is
   * expected to just return 0 to avoid unnecessarily doing the work of
   * calculating the size.
   */
  constructor(e) {
    this.Fr = e, /** Underlying cache of documents and their read times. */
    this.docs = function() {
      return new Me(se.comparator);
    }(), /** Size of all cached documents. */
    this.size = 0;
  }
  setIndexManager(e) {
    this.indexManager = e;
  }
  /**
   * Adds the supplied entry to the cache and updates the cache size as appropriate.
   *
   * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer
   * returned by `newChangeBuffer()`.
   */
  addEntry(e, n) {
    const r = n.key, i = this.docs.get(r), s = i ? i.size : 0, o = this.Fr(n);
    return this.docs = this.docs.insert(r, {
      document: n.mutableCopy(),
      size: o
    }), this.size += o - s, this.indexManager.addToCollectionParentIndex(e, r.path.popLast());
  }
  /**
   * Removes the specified entry from the cache and updates the cache size as appropriate.
   *
   * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer
   * returned by `newChangeBuffer()`.
   */
  removeEntry(e) {
    const n = this.docs.get(e);
    n && (this.docs = this.docs.remove(e), this.size -= n.size);
  }
  getEntry(e, n) {
    const r = this.docs.get(n);
    return z.resolve(r ? r.document.mutableCopy() : _t.newInvalidDocument(n));
  }
  getEntries(e, n) {
    let r = An();
    return n.forEach((i) => {
      const s = this.docs.get(i);
      r = r.insert(i, s ? s.document.mutableCopy() : _t.newInvalidDocument(i));
    }), z.resolve(r);
  }
  getDocumentsMatchingQuery(e, n, r, i) {
    let s = An();
    const o = n.path, c = new se(o.child("")), u = this.docs.getIteratorFrom(c);
    for (; u.hasNext(); ) {
      const { key: l, value: { document: f } } = u.getNext();
      if (!o.isPrefixOf(l.path)) break;
      l.path.length > o.length + 1 || zP(qP(f), r) <= 0 || (i.has(f.key) || La(n, f)) && (s = s.insert(f.key, f.mutableCopy()));
    }
    return z.resolve(s);
  }
  getAllFromCollectionGroup(e, n, r, i) {
    ce();
  }
  Mr(e, n) {
    return z.forEach(this.docs, (r) => n(r));
  }
  newChangeBuffer(e) {
    return new aO(this);
  }
  getSize(e) {
    return z.resolve(this.size);
  }
}
class aO extends Zk {
  constructor(e) {
    super(), this.ur = e;
  }
  applyChanges(e) {
    const n = [];
    return this.changes.forEach((r, i) => {
      i.isValidDocument() ? n.push(this.ur.addEntry(e, i)) : this.ur.removeEntry(r);
    }), z.waitFor(n);
  }
  getFromCache(e, n) {
    return this.ur.getEntry(e, n);
  }
  getAllFromCache(e, n) {
    return this.ur.getEntries(e, n);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class cO {
  constructor(e) {
    this.persistence = e, /**
    * Maps a target to the data about that target
    */
    this.Or = new bi((n) => $l(n), ql), /** The last received snapshot version. */
    this.lastRemoteSnapshotVersion = he.min(), /** The highest numbered target ID encountered. */
    this.highestTargetId = 0, /** The highest sequence number encountered. */
    this.Nr = 0, /**
    * A ordered bidirectional mapping between documents and the remote target
    * IDs.
    */
    this.Lr = new Gl(), this.targetCount = 0, this.Br = hi.Ln();
  }
  forEachTarget(e, n) {
    return this.Or.forEach((r, i) => n(i)), z.resolve();
  }
  getLastRemoteSnapshotVersion(e) {
    return z.resolve(this.lastRemoteSnapshotVersion);
  }
  getHighestSequenceNumber(e) {
    return z.resolve(this.Nr);
  }
  allocateTargetId(e) {
    return this.highestTargetId = this.Br.next(), z.resolve(this.highestTargetId);
  }
  setTargetsMetadata(e, n, r) {
    return r && (this.lastRemoteSnapshotVersion = r), n > this.Nr && (this.Nr = n), z.resolve();
  }
  Qn(e) {
    this.Or.set(e.target, e);
    const n = e.targetId;
    n > this.highestTargetId && (this.Br = new hi(n), this.highestTargetId = n), e.sequenceNumber > this.Nr && (this.Nr = e.sequenceNumber);
  }
  addTargetData(e, n) {
    return this.Qn(n), this.targetCount += 1, z.resolve();
  }
  updateTargetData(e, n) {
    return this.Qn(n), z.resolve();
  }
  removeTargetData(e, n) {
    return this.Or.delete(n.target), this.Lr.mr(n.targetId), this.targetCount -= 1, z.resolve();
  }
  removeTargets(e, n, r) {
    let i = 0;
    const s = [];
    return this.Or.forEach((o, c) => {
      c.sequenceNumber <= n && r.get(c.targetId) === null && (this.Or.delete(o), s.push(this.removeMatchingKeysForTargetId(e, c.targetId)), i++);
    }), z.waitFor(s).next(() => i);
  }
  getTargetCount(e) {
    return z.resolve(this.targetCount);
  }
  getTargetData(e, n) {
    const r = this.Or.get(n) || null;
    return z.resolve(r);
  }
  addMatchingKeys(e, n, r) {
    return this.Lr.Ar(n, r), z.resolve();
  }
  removeMatchingKeys(e, n, r) {
    this.Lr.Vr(n, r);
    const i = this.persistence.referenceDelegate, s = [];
    return i && n.forEach((o) => {
      s.push(i.markPotentiallyOrphaned(e, o));
    }), z.waitFor(s);
  }
  removeMatchingKeysForTargetId(e, n) {
    return this.Lr.mr(n), z.resolve();
  }
  getMatchingKeysForTargetId(e, n) {
    const r = this.Lr.pr(n);
    return z.resolve(r);
  }
  containsKey(e, n) {
    return z.resolve(this.Lr.containsKey(n));
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class uO {
  /**
   * The constructor accepts a factory for creating a reference delegate. This
   * allows both the delegate and this instance to have strong references to
   * each other without having nullable fields that would then need to be
   * checked or asserted on every access.
   */
  constructor(e, n) {
    this.kr = {}, this.overlays = {}, this.qr = new Fl(0), this.Qr = !1, this.Qr = !0, this.Kr = new iO(), this.referenceDelegate = e(this), this.$r = new cO(this), this.indexManager = new Jk(), this.remoteDocumentCache = function(i) {
      return new oO(i);
    }((r) => this.referenceDelegate.Ur(r)), this.serializer = new Qk(n), this.Wr = new nO(this.serializer);
  }
  start() {
    return Promise.resolve();
  }
  shutdown() {
    return this.Qr = !1, Promise.resolve();
  }
  get started() {
    return this.Qr;
  }
  setDatabaseDeletedListener() {
  }
  setNetworkEnabled() {
  }
  getIndexManager(e) {
    return this.indexManager;
  }
  getDocumentOverlayCache(e) {
    let n = this.overlays[e.toKey()];
    return n || (n = new rO(), this.overlays[e.toKey()] = n), n;
  }
  getMutationQueue(e, n) {
    let r = this.kr[e.toKey()];
    return r || (r = new sO(n, this.referenceDelegate), this.kr[e.toKey()] = r), r;
  }
  getGlobalsCache() {
    return this.Kr;
  }
  getTargetCache() {
    return this.$r;
  }
  getRemoteDocumentCache() {
    return this.remoteDocumentCache;
  }
  getBundleCache() {
    return this.Wr;
  }
  runTransaction(e, n, r) {
    ee("MemoryPersistence", "Starting transaction:", e);
    const i = new lO(this.qr.next());
    return this.referenceDelegate.Gr(), r(i).next((s) => this.referenceDelegate.zr(i).next(() => s)).toPromise().then((s) => (i.raiseOnCommittedEvent(), s));
  }
  jr(e, n) {
    return z.or(Object.values(this.kr).map((r) => () => r.containsKey(e, n)));
  }
}
class lO extends HP {
  constructor(e) {
    super(), this.currentSequenceNumber = e;
  }
}
class Wl {
  constructor(e) {
    this.persistence = e, /** Tracks all documents that are active in Query views. */
    this.Hr = new Gl(), /** The list of documents that are potentially GCed after each transaction. */
    this.Jr = null;
  }
  static Yr(e) {
    return new Wl(e);
  }
  get Zr() {
    if (this.Jr) return this.Jr;
    throw ce();
  }
  addReference(e, n, r) {
    return this.Hr.addReference(r, n), this.Zr.delete(r.toString()), z.resolve();
  }
  removeReference(e, n, r) {
    return this.Hr.removeReference(r, n), this.Zr.add(r.toString()), z.resolve();
  }
  markPotentiallyOrphaned(e, n) {
    return this.Zr.add(n.toString()), z.resolve();
  }
  removeTarget(e, n) {
    this.Hr.mr(n.targetId).forEach((i) => this.Zr.add(i.toString()));
    const r = this.persistence.getTargetCache();
    return r.getMatchingKeysForTargetId(e, n.targetId).next((i) => {
      i.forEach((s) => this.Zr.add(s.toString()));
    }).next(() => r.removeTargetData(e, n));
  }
  Gr() {
    this.Jr = /* @__PURE__ */ new Set();
  }
  zr(e) {
    const n = this.persistence.getRemoteDocumentCache().newChangeBuffer();
    return z.forEach(this.Zr, (r) => {
      const i = se.fromPath(r);
      return this.Xr(e, i).next((s) => {
        s || n.removeEntry(i, he.min());
      });
    }).next(() => (this.Jr = null, n.apply(e)));
  }
  updateLimboDocument(e, n) {
    return this.Xr(e, n).next((r) => {
      r ? this.Zr.delete(n.toString()) : this.Zr.add(n.toString());
    });
  }
  Ur(e) {
    return 0;
  }
  Xr(e, n) {
    return z.or([() => z.resolve(this.Hr.containsKey(n)), () => this.persistence.getTargetCache().containsKey(e, n), () => this.persistence.jr(e, n)]);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Ql {
  constructor(e, n, r, i) {
    this.targetId = e, this.fromCache = n, this.Ki = r, this.$i = i;
  }
  static Ui(e, n) {
    let r = _e(), i = _e();
    for (const s of n.docChanges) switch (s.type) {
      case 0:
        r = r.add(s.doc.key);
        break;
      case 1:
        i = i.add(s.doc.key);
    }
    return new Ql(e, n.fromCache, r, i);
  }
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class hO {
  constructor() {
    this._documentReadCount = 0;
  }
  get documentReadCount() {
    return this._documentReadCount;
  }
  incrementDocumentReadCount(e) {
    this._documentReadCount += e;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class fO {
  constructor() {
    this.Wi = !1, this.Gi = !1, /**
    * SDK only decides whether it should create index when collection size is
    * larger than this.
    */
    this.zi = 100, this.ji = /**
    * This cost represents the evaluation result of
    * (([index, docKey] + [docKey, docContent]) per document in the result set)
    * / ([docKey, docContent] per documents in full collection scan) coming from
    * experiment [enter PR experiment URL here].
    */
    function() {
      return BS() ? 8 : GP(lt()) > 0 ? 6 : 4;
    }();
  }
  /** Sets the document view to query against. */
  initialize(e, n) {
    this.Hi = e, this.indexManager = n, this.Wi = !0;
  }
  /** Returns all local documents matching the specified query. */
  getDocumentsMatchingQuery(e, n, r, i) {
    const s = {
      result: null
    };
    return this.Ji(e, n).next((o) => {
      s.result = o;
    }).next(() => {
      if (!s.result) return this.Yi(e, n, i, r).next((o) => {
        s.result = o;
      });
    }).next(() => {
      if (s.result) return;
      const o = new hO();
      return this.Zi(e, n, o).next((c) => {
        if (s.result = c, this.Gi) return this.Xi(e, n, o, c.size);
      });
    }).next(() => s.result);
  }
  Xi(e, n, r, i) {
    return r.documentReadCount < this.zi ? (Bi() <= ve.DEBUG && ee("QueryEngine", "SDK will not create cache indexes for query:", qr(n), "since it only creates cache indexes for collection contains", "more than or equal to", this.zi, "documents"), z.resolve()) : (Bi() <= ve.DEBUG && ee("QueryEngine", "Query:", qr(n), "scans", r.documentReadCount, "local documents and returns", i, "documents as results."), r.documentReadCount > this.ji * i ? (Bi() <= ve.DEBUG && ee("QueryEngine", "The SDK decides to create cache indexes for query:", qr(n), "as using cache indexes may help improve performance."), this.indexManager.createTargetIndexes(e, sn(n))) : z.resolve());
  }
  /**
   * Performs an indexed query that evaluates the query based on a collection's
   * persisted index values. Returns `null` if an index is not available.
   */
  Ji(e, n) {
    if (Ap(n))
      return z.resolve(null);
    let r = sn(n);
    return this.indexManager.getIndexType(e, r).next((i) => i === 0 ? null : (n.limit !== null && i === 1 && // We cannot apply a limit for targets that are served using a partial
    // index. If a partial index will be used to serve the target, the
    // query may return a superset of documents that match the target
    // (e.g. if the index doesn't include all the target's filters), or
    // may return the correct set of documents in the wrong order (e.g. if
    // the index doesn't include a segment for one of the orderBys).
    // Therefore, a limit should not be applied in such cases.
    (n = Vu(
      n,
      null,
      "F"
      /* LimitType.First */
    ), r = sn(n)), this.indexManager.getDocumentsMatchingTarget(e, r).next((s) => {
      const o = _e(...s);
      return this.Hi.getDocuments(e, o).next((c) => this.indexManager.getMinOffset(e, r).next((u) => {
        const l = this.es(n, c);
        return this.ts(n, l, o, u.readTime) ? this.Ji(e, Vu(
          n,
          null,
          "F"
          /* LimitType.First */
        )) : this.ns(e, l, n, u);
      }));
    })));
  }
  /**
   * Performs a query based on the target's persisted query mapping. Returns
   * `null` if the mapping is not available or cannot be used.
   */
  Yi(e, n, r, i) {
    return Ap(n) || i.isEqual(he.min()) ? z.resolve(null) : this.Hi.getDocuments(e, r).next((s) => {
      const o = this.es(n, s);
      return this.ts(n, o, r, i) ? z.resolve(null) : (Bi() <= ve.DEBUG && ee("QueryEngine", "Re-using previous result from %s to execute query: %s", i.toString(), qr(n)), this.ns(e, o, n, $P(i, -1)).next((c) => c));
    });
  }
  /** Applies the query filter and sorting to the provided documents.  */
  es(e, n) {
    let r = new ut(r_(e));
    return n.forEach((i, s) => {
      La(e, s) && (r = r.add(s));
    }), r;
  }
  /**
   * Determines if a limit query needs to be refilled from cache, making it
   * ineligible for index-free execution.
   *
   * @param query - The query.
   * @param sortedPreviousResults - The documents that matched the query when it
   * was last synchronized, sorted by the query's comparator.
   * @param remoteKeys - The document keys that matched the query at the last
   * snapshot.
   * @param limboFreeSnapshotVersion - The version of the snapshot when the
   * query was last synchronized.
   */
  ts(e, n, r, i) {
    if (e.limit === null)
      return !1;
    if (r.size !== n.size)
      return !0;
    const s = e.limitType === "F" ? n.last() : n.first();
    return !!s && (s.hasPendingWrites || s.version.compareTo(i) > 0);
  }
  Zi(e, n, r) {
    return Bi() <= ve.DEBUG && ee("QueryEngine", "Using full collection scan to execute query:", qr(n)), this.Hi.getDocumentsMatchingQuery(e, n, Qn.min(), r);
  }
  /**
   * Combines the results from an indexed execution with the remaining documents
   * that have not yet been indexed.
   */
  ns(e, n, r, i) {
    return this.Hi.getDocumentsMatchingQuery(e, r, i).next((s) => (
      // Merge with existing results
      (n.forEach((o) => {
        s = s.insert(o.key, o);
      }), s)
    ));
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class dO {
  constructor(e, n, r, i) {
    this.persistence = e, this.rs = n, this.serializer = i, /**
    * Maps a targetID to data about its target.
    *
    * PORTING NOTE: We are using an immutable data structure on Web to make re-runs
    * of `applyRemoteEvent()` idempotent.
    */
    this.ss = new Me(be), /** Maps a target to its targetID. */
    // TODO(wuandy): Evaluate if TargetId can be part of Target.
    this.os = new bi((s) => $l(s), ql), /**
    * A per collection group index of the last read time processed by
    * `getNewDocumentChanges()`.
    *
    * PORTING NOTE: This is only used for multi-tab synchronization.
    */
    this._s = /* @__PURE__ */ new Map(), this.us = e.getRemoteDocumentCache(), this.$r = e.getTargetCache(), this.Wr = e.getBundleCache(), this.cs(r);
  }
  cs(e) {
    this.documentOverlayCache = this.persistence.getDocumentOverlayCache(e), this.indexManager = this.persistence.getIndexManager(e), this.mutationQueue = this.persistence.getMutationQueue(e, this.indexManager), this.localDocuments = new tO(this.us, this.mutationQueue, this.documentOverlayCache, this.indexManager), this.us.setIndexManager(this.indexManager), this.rs.initialize(this.localDocuments, this.indexManager);
  }
  collectGarbage(e) {
    return this.persistence.runTransaction("Collect garbage", "readwrite-primary", (n) => e.collect(n, this.ss));
  }
}
function pO(t, e, n, r) {
  return new dO(t, e, n, r);
}
async function A_(t, e) {
  const n = fe(t);
  return await n.persistence.runTransaction("Handle user change", "readonly", (r) => {
    let i;
    return n.mutationQueue.getAllMutationBatches(r).next((s) => (i = s, n.cs(e), n.mutationQueue.getAllMutationBatches(r))).next((s) => {
      const o = [], c = [];
      let u = _e();
      for (const l of i) {
        o.push(l.batchId);
        for (const f of l.mutations) u = u.add(f.key);
      }
      for (const l of s) {
        c.push(l.batchId);
        for (const f of l.mutations) u = u.add(f.key);
      }
      return n.localDocuments.getDocuments(r, u).next((l) => ({
        ls: l,
        removedBatchIds: o,
        addedBatchIds: c
      }));
    });
  });
}
function mO(t, e) {
  const n = fe(t);
  return n.persistence.runTransaction("Acknowledge batch", "readwrite-primary", (r) => {
    const i = e.batch.keys(), s = n.us.newChangeBuffer({
      trackRemovals: !0
    });
    return function(c, u, l, f) {
      const h = l.batch, _ = h.keys();
      let b = z.resolve();
      return _.forEach((I) => {
        b = b.next(() => f.getEntry(u, I)).next((C) => {
          const m = l.docVersions.get(I);
          Ne(m !== null), C.version.compareTo(m) < 0 && (h.applyToRemoteDocument(C, l), C.isValidDocument() && // We use the commitVersion as the readTime rather than the
          // document's updateTime since the updateTime is not advanced
          // for updates that do not modify the underlying document.
          (C.setReadTime(l.commitVersion), f.addEntry(C)));
        });
      }), b.next(() => c.mutationQueue.removeMutationBatch(u, h));
    }(n, r, e, s).next(() => s.apply(r)).next(() => n.mutationQueue.performConsistencyCheck(r)).next(() => n.documentOverlayCache.removeOverlaysForBatchId(r, i, e.batch.batchId)).next(() => n.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(r, function(c) {
      let u = _e();
      for (let l = 0; l < c.mutationResults.length; ++l)
        c.mutationResults[l].transformResults.length > 0 && (u = u.add(c.batch.mutations[l].key));
      return u;
    }(e))).next(() => n.localDocuments.getDocuments(r, i));
  });
}
function R_(t) {
  const e = fe(t);
  return e.persistence.runTransaction("Get last remote snapshot version", "readonly", (n) => e.$r.getLastRemoteSnapshotVersion(n));
}
function gO(t, e) {
  const n = fe(t), r = e.snapshotVersion;
  let i = n.ss;
  return n.persistence.runTransaction("Apply remote event", "readwrite-primary", (s) => {
    const o = n.us.newChangeBuffer({
      trackRemovals: !0
    });
    i = n.ss;
    const c = [];
    e.targetChanges.forEach((f, h) => {
      const _ = i.get(h);
      if (!_) return;
      c.push(n.$r.removeMatchingKeys(s, f.removedDocuments, h).next(() => n.$r.addMatchingKeys(s, f.addedDocuments, h)));
      let b = _.withSequenceNumber(s.currentSequenceNumber);
      e.targetMismatches.get(h) !== null ? b = b.withResumeToken(ht.EMPTY_BYTE_STRING, he.min()).withLastLimboFreeSnapshotVersion(he.min()) : f.resumeToken.approximateByteSize() > 0 && (b = b.withResumeToken(f.resumeToken, r)), i = i.insert(h, b), // Update the target data if there are target changes (or if
      // sufficient time has passed since the last update).
      /**
      * Returns true if the newTargetData should be persisted during an update of
      * an active target. TargetData should always be persisted when a target is
      * being released and should not call this function.
      *
      * While the target is active, TargetData updates can be omitted when nothing
      * about the target has changed except metadata like the resume token or
      * snapshot version. Occasionally it's worth the extra write to prevent these
      * values from getting too stale after a crash, but this doesn't have to be
      * too frequent.
      */
      function(C, m, y) {
        return C.resumeToken.approximateByteSize() === 0 || m.snapshotVersion.toMicroseconds() - C.snapshotVersion.toMicroseconds() >= 3e8 ? !0 : y.addedDocuments.size + y.modifiedDocuments.size + y.removedDocuments.size > 0;
      }(_, b, f) && c.push(n.$r.updateTargetData(s, b));
    });
    let u = An(), l = _e();
    if (e.documentUpdates.forEach((f) => {
      e.resolvedLimboDocuments.has(f) && c.push(n.persistence.referenceDelegate.updateLimboDocument(s, f));
    }), // Each loop iteration only affects its "own" doc, so it's safe to get all
    // the remote documents in advance in a single call.
    c.push(yO(s, o, e.documentUpdates).next((f) => {
      u = f.hs, l = f.Ps;
    })), !r.isEqual(he.min())) {
      const f = n.$r.getLastRemoteSnapshotVersion(s).next((h) => n.$r.setTargetsMetadata(s, s.currentSequenceNumber, r));
      c.push(f);
    }
    return z.waitFor(c).next(() => o.apply(s)).next(() => n.localDocuments.getLocalViewOfDocuments(s, u, l)).next(() => u);
  }).then((s) => (n.ss = i, s));
}
function yO(t, e, n) {
  let r = _e(), i = _e();
  return n.forEach((s) => r = r.add(s)), e.getEntries(t, r).next((s) => {
    let o = An();
    return n.forEach((c, u) => {
      const l = s.get(c);
      u.isFoundDocument() !== l.isFoundDocument() && (i = i.add(c)), // Note: The order of the steps below is important, since we want
      // to ensure that rejected limbo resolutions (which fabricate
      // NoDocuments with SnapshotVersion.min()) never add documents to
      // cache.
      u.isNoDocument() && u.version.isEqual(he.min()) ? (
        // NoDocuments with SnapshotVersion.min() are used in manufactured
        // events. We remove these documents from cache since we lost
        // access.
        (e.removeEntry(c, u.readTime), o = o.insert(c, u))
      ) : !l.isValidDocument() || u.version.compareTo(l.version) > 0 || u.version.compareTo(l.version) === 0 && l.hasPendingWrites ? (e.addEntry(u), o = o.insert(c, u)) : ee("LocalStore", "Ignoring outdated watch update for ", c, ". Current version:", l.version, " Watch version:", u.version);
    }), {
      hs: o,
      Ps: i
    };
  });
}
function _O(t, e) {
  const n = fe(t);
  return n.persistence.runTransaction("Get next mutation batch", "readonly", (r) => (e === void 0 && (e = -1), n.mutationQueue.getNextMutationBatchAfterBatchId(r, e)));
}
function vO(t, e) {
  const n = fe(t);
  return n.persistence.runTransaction("Allocate target", "readwrite", (r) => {
    let i;
    return n.$r.getTargetData(r, e).next((s) => s ? (
      // This target has been listened to previously, so reuse the
      // previous targetID.
      // TODO(mcg): freshen last accessed date?
      (i = s, z.resolve(i))
    ) : n.$r.allocateTargetId(r).next((o) => (i = new Bn(e, o, "TargetPurposeListen", r.currentSequenceNumber), n.$r.addTargetData(r, i).next(() => i))));
  }).then((r) => {
    const i = n.ss.get(r.targetId);
    return (i === null || r.snapshotVersion.compareTo(i.snapshotVersion) > 0) && (n.ss = n.ss.insert(r.targetId, r), n.os.set(e, r.targetId)), r;
  });
}
async function $u(t, e, n) {
  const r = fe(t), i = r.ss.get(e), s = n ? "readwrite" : "readwrite-primary";
  try {
    n || await r.persistence.runTransaction("Release target", s, (o) => r.persistence.referenceDelegate.removeTarget(o, i));
  } catch (o) {
    if (!xs(o)) throw o;
    ee("LocalStore", `Failed to update sequence numbers for target ${e}: ${o}`);
  }
  r.ss = r.ss.remove(e), r.os.delete(i.target);
}
function Vp(t, e, n) {
  const r = fe(t);
  let i = he.min(), s = _e();
  return r.persistence.runTransaction(
    "Execute query",
    "readwrite",
    // Use readwrite instead of readonly so indexes can be created
    // Use readwrite instead of readonly so indexes can be created
    (o) => function(u, l, f) {
      const h = fe(u), _ = h.os.get(f);
      return _ !== void 0 ? z.resolve(h.ss.get(_)) : h.$r.getTargetData(l, f);
    }(r, o, sn(e)).next((c) => {
      if (c) return i = c.lastLimboFreeSnapshotVersion, r.$r.getMatchingKeysForTargetId(o, c.targetId).next((u) => {
        s = u;
      });
    }).next(() => r.rs.getDocumentsMatchingQuery(o, e, n ? i : he.min(), n ? s : _e())).next((c) => (wO(r, lk(e), c), {
      documents: c,
      Is: s
    }))
  );
}
function wO(t, e, n) {
  let r = t._s.get(e) || he.min();
  n.forEach((i, s) => {
    s.readTime.compareTo(r) > 0 && (r = s.readTime);
  }), t._s.set(e, r);
}
class Fp {
  constructor() {
    this.activeTargetIds = gk();
  }
  Vs(e) {
    this.activeTargetIds = this.activeTargetIds.add(e);
  }
  fs(e) {
    this.activeTargetIds = this.activeTargetIds.delete(e);
  }
  /**
   * Converts this entry into a JSON-encoded format we can use for WebStorage.
   * Does not encode `clientId` as it is part of the key in WebStorage.
   */
  Rs() {
    const e = {
      activeTargetIds: this.activeTargetIds.toArray(),
      updateTimeMs: Date.now()
    };
    return JSON.stringify(e);
  }
}
class EO {
  constructor() {
    this.io = new Fp(), this.so = {}, this.onlineStateHandler = null, this.sequenceNumberHandler = null;
  }
  addPendingMutation(e) {
  }
  updateMutationState(e, n, r) {
  }
  addLocalQueryTarget(e) {
    return this.io.Vs(e), this.so[e] || "not-current";
  }
  updateQueryState(e, n, r) {
    this.so[e] = n;
  }
  removeLocalQueryTarget(e) {
    this.io.fs(e);
  }
  isLocalQueryTarget(e) {
    return this.io.activeTargetIds.has(e);
  }
  clearQueryState(e) {
    delete this.so[e];
  }
  getAllActiveQueryTargets() {
    return this.io.activeTargetIds;
  }
  isActiveQueryTarget(e) {
    return this.io.activeTargetIds.has(e);
  }
  start() {
    return this.io = new Fp(), Promise.resolve();
  }
  handleUserChange(e, n, r) {
  }
  setOnlineState(e) {
  }
  shutdown() {
  }
  writeSequenceNumber(e) {
  }
  notifyBundleLoaded(e) {
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class bO {
  oo(e) {
  }
  shutdown() {
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Up {
  constructor() {
    this._o = () => this.ao(), this.uo = () => this.co(), this.lo = [], this.ho();
  }
  oo(e) {
    this.lo.push(e);
  }
  shutdown() {
    window.removeEventListener("online", this._o), window.removeEventListener("offline", this.uo);
  }
  ho() {
    window.addEventListener("online", this._o), window.addEventListener("offline", this.uo);
  }
  ao() {
    ee("ConnectivityMonitor", "Network connectivity changed: AVAILABLE");
    for (const e of this.lo) e(
      0
      /* NetworkStatus.AVAILABLE */
    );
  }
  co() {
    ee("ConnectivityMonitor", "Network connectivity changed: UNAVAILABLE");
    for (const e of this.lo) e(
      1
      /* NetworkStatus.UNAVAILABLE */
    );
  }
  // TODO(chenbrian): Consider passing in window either into this component or
  // here for testing via FakeWindow.
  /** Checks that all used attributes of window are available. */
  static D() {
    return typeof window < "u" && window.addEventListener !== void 0 && window.removeEventListener !== void 0;
  }
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
let vo = null;
function Fc() {
  return vo === null ? vo = function() {
    return 268435456 + Math.round(2147483648 * Math.random());
  }() : vo++, "0x" + vo.toString(16);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const TO = {
  BatchGetDocuments: "batchGet",
  Commit: "commit",
  RunQuery: "runQuery",
  RunAggregationQuery: "runAggregationQuery"
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class IO {
  constructor(e) {
    this.Po = e.Po, this.Io = e.Io;
  }
  To(e) {
    this.Eo = e;
  }
  Ao(e) {
    this.Ro = e;
  }
  Vo(e) {
    this.mo = e;
  }
  onMessage(e) {
    this.fo = e;
  }
  close() {
    this.Io();
  }
  send(e) {
    this.Po(e);
  }
  po() {
    this.Eo();
  }
  yo() {
    this.Ro();
  }
  wo(e) {
    this.mo(e);
  }
  So(e) {
    this.fo(e);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const gt = "WebChannelConnection";
class SO extends /**
* Base class for all Rest-based connections to the backend (WebChannel and
* HTTP).
*/
class {
  constructor(n) {
    this.databaseInfo = n, this.databaseId = n.databaseId;
    const r = n.ssl ? "https" : "http", i = encodeURIComponent(this.databaseId.projectId), s = encodeURIComponent(this.databaseId.database);
    this.bo = r + "://" + n.host, this.Do = `projects/${i}/databases/${s}`, this.Co = this.databaseId.database === "(default)" ? `project_id=${i}` : `project_id=${i}&database_id=${s}`;
  }
  get vo() {
    return !1;
  }
  Fo(n, r, i, s, o) {
    const c = Fc(), u = this.Mo(n, r.toUriEncodedString());
    ee("RestConnection", `Sending RPC '${n}' ${c}:`, u, i);
    const l = {
      "google-cloud-resource-prefix": this.Do,
      "x-goog-request-params": this.Co
    };
    return this.xo(l, s, o), this.Oo(n, u, l, i).then((f) => (ee("RestConnection", `Received RPC '${n}' ${c}: `, f), f), (f) => {
      throw ai("RestConnection", `RPC '${n}' ${c} failed with error: `, f, "url: ", u, "request:", i), f;
    });
  }
  No(n, r, i, s, o, c) {
    return this.Fo(n, r, i, s, o);
  }
  /**
   * Modifies the headers for a request, adding any authorization token if
   * present and any additional headers for the request.
   */
  xo(n, r, i) {
    n["X-Goog-Api-Client"] = // SDK_VERSION is updated to different value at runtime depending on the entry point,
    // so we need to get its value when we need it in a function.
    function() {
      return "gl-js/ fire/" + wi;
    }(), // Content-Type: text/plain will avoid preflight requests which might
    // mess with CORS and redirects by proxies. If we add custom headers
    // we will need to change this code to potentially use the $httpOverwrite
    // parameter supported by ESF to avoid triggering preflight requests.
    n["Content-Type"] = "text/plain", this.databaseInfo.appId && (n["X-Firebase-GMPID"] = this.databaseInfo.appId), r && r.headers.forEach((s, o) => n[o] = s), i && i.headers.forEach((s, o) => n[o] = s);
  }
  Mo(n, r) {
    const i = TO[n];
    return `${this.bo}/v1/${r}:${i}`;
  }
  /**
   * Closes and cleans up any resources associated with the connection. This
   * implementation is a no-op because there are no resources associated
   * with the RestConnection that need to be cleaned up.
   */
  terminate() {
  }
} {
  constructor(e) {
    super(e), this.forceLongPolling = e.forceLongPolling, this.autoDetectLongPolling = e.autoDetectLongPolling, this.useFetchStreams = e.useFetchStreams, this.longPollingOptions = e.longPollingOptions;
  }
  Oo(e, n, r, i) {
    const s = Fc();
    return new Promise((o, c) => {
      const u = new Fy();
      u.setWithCredentials(!0), u.listenOnce(jy.COMPLETE, () => {
        try {
          switch (u.getLastErrorCode()) {
            case Oo.NO_ERROR:
              const f = u.getResponseJson();
              ee(gt, `XHR for RPC '${e}' ${s} received:`, JSON.stringify(f)), o(f);
              break;
            case Oo.TIMEOUT:
              ee(gt, `RPC '${e}' ${s} timed out`), c(new X($.DEADLINE_EXCEEDED, "Request time out"));
              break;
            case Oo.HTTP_ERROR:
              const h = u.getStatus();
              if (ee(gt, `RPC '${e}' ${s} failed with status:`, h, "response text:", u.getResponseText()), h > 0) {
                let _ = u.getResponseJson();
                Array.isArray(_) && (_ = _[0]);
                const b = _ == null ? void 0 : _.error;
                if (b && b.status && b.message) {
                  const I = function(m) {
                    const y = m.toLowerCase().replace(/_/g, "-");
                    return Object.values($).indexOf(y) >= 0 ? y : $.UNKNOWN;
                  }(b.status);
                  c(new X(I, b.message));
                } else c(new X($.UNKNOWN, "Server responded with status " + u.getStatus()));
              } else
                c(new X($.UNAVAILABLE, "Connection failed."));
              break;
            default:
              ce();
          }
        } finally {
          ee(gt, `RPC '${e}' ${s} completed.`);
        }
      });
      const l = JSON.stringify(i);
      ee(gt, `RPC '${e}' ${s} sending request:`, i), u.send(n, "POST", l, r, 15);
    });
  }
  Lo(e, n, r) {
    const i = Fc(), s = [this.bo, "/", "google.firestore.v1.Firestore", "/", e, "/channel"], o = qy(), c = $y(), u = {
      // Required for backend stickiness, routing behavior is based on this
      // parameter.
      httpSessionIdParam: "gsessionid",
      initMessageHeaders: {},
      messageUrlParams: {
        // This param is used to improve routing and project isolation by the
        // backend and must be included in every request.
        database: `projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`
      },
      sendRawJson: !0,
      supportsCrossDomainXhr: !0,
      internalChannelParams: {
        // Override the default timeout (randomized between 10-20 seconds) since
        // a large write batch on a slow internet connection may take a long
        // time to send to the backend. Rather than have WebChannel impose a
        // tight timeout which could lead to infinite timeouts and retries, we
        // set it very large (5-10 minutes) and rely on the browser's builtin
        // timeouts to kick in if the request isn't working.
        forwardChannelRequestTimeoutMs: 6e5
      },
      forceLongPolling: this.forceLongPolling,
      detectBufferingProxy: this.autoDetectLongPolling
    }, l = this.longPollingOptions.timeoutSeconds;
    l !== void 0 && (u.longPollingTimeout = Math.round(1e3 * l)), this.useFetchStreams && (u.xmlHttpFactory = new Uy({})), this.xo(u.initMessageHeaders, n, r), // Sending the custom headers we just added to request.initMessageHeaders
    // (Authorization, etc.) will trigger the browser to make a CORS preflight
    // request because the XHR will no longer meet the criteria for a "simple"
    // CORS request:
    // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
    // Therefore to avoid the CORS preflight request (an extra network
    // roundtrip), we use the encodeInitMessageHeaders option to specify that
    // the headers should instead be encoded in the request's POST payload,
    // which is recognized by the webchannel backend.
    u.encodeInitMessageHeaders = !0;
    const f = s.join("");
    ee(gt, `Creating RPC '${e}' stream ${i}: ${f}`, u);
    const h = o.createWebChannel(f, u);
    let _ = !1, b = !1;
    const I = new IO({
      Po: (m) => {
        b ? ee(gt, `Not sending because RPC '${e}' stream ${i} is closed:`, m) : (_ || (ee(gt, `Opening RPC '${e}' stream ${i} transport.`), h.open(), _ = !0), ee(gt, `RPC '${e}' stream ${i} sending:`, m), h.send(m));
      },
      Io: () => h.close()
    }), C = (m, y, E) => {
      m.listen(y, (p) => {
        try {
          E(p);
        } catch (g) {
          setTimeout(() => {
            throw g;
          }, 0);
        }
      });
    };
    return C(h, Wi.EventType.OPEN, () => {
      b || (ee(gt, `RPC '${e}' stream ${i} transport opened.`), I.po());
    }), C(h, Wi.EventType.CLOSE, () => {
      b || (b = !0, ee(gt, `RPC '${e}' stream ${i} transport closed`), I.wo());
    }), C(h, Wi.EventType.ERROR, (m) => {
      b || (b = !0, ai(gt, `RPC '${e}' stream ${i} transport errored:`, m), I.wo(new X($.UNAVAILABLE, "The operation could not be completed")));
    }), C(h, Wi.EventType.MESSAGE, (m) => {
      var y;
      if (!b) {
        const E = m.data[0];
        Ne(!!E);
        const p = E, g = p.error || ((y = p[0]) === null || y === void 0 ? void 0 : y.error);
        if (g) {
          ee(gt, `RPC '${e}' stream ${i} received error:`, g);
          const w = g.status;
          let S = (
            /**
            * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.
            *
            * @returns The Code equivalent to the given status string or undefined if
            *     there is no match.
            */
            function(A) {
              const O = Ge[A];
              if (O !== void 0) return g_(O);
            }(w)
          ), R = g.message;
          S === void 0 && (S = $.INTERNAL, R = "Unknown error status: " + w + " with message " + g.message), // Mark closed so no further events are propagated
          b = !0, I.wo(new X(S, R)), h.close();
        } else ee(gt, `RPC '${e}' stream ${i} received:`, E), I.So(E);
      }
    }), C(c, By.STAT_EVENT, (m) => {
      m.stat === Ou.PROXY ? ee(gt, `RPC '${e}' stream ${i} detected buffering proxy`) : m.stat === Ou.NOPROXY && ee(gt, `RPC '${e}' stream ${i} detected no buffering proxy`);
    }), setTimeout(() => {
      I.yo();
    }, 0), I;
  }
}
function Uc() {
  return typeof document < "u" ? document : null;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Ua(t) {
  return new Lk(
    t,
    /* useProto3Json= */
    !0
  );
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class C_ {
  constructor(e, n, r = 1e3, i = 1.5, s = 6e4) {
    this.ai = e, this.timerId = n, this.Bo = r, this.ko = i, this.qo = s, this.Qo = 0, this.Ko = null, /** The last backoff attempt, as epoch milliseconds. */
    this.$o = Date.now(), this.reset();
  }
  /**
   * Resets the backoff delay.
   *
   * The very next backoffAndWait() will have no delay. If it is called again
   * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
   * subsequent ones will increase according to the backoffFactor.
   */
  reset() {
    this.Qo = 0;
  }
  /**
   * Resets the backoff delay to the maximum delay (e.g. for use after a
   * RESOURCE_EXHAUSTED error).
   */
  Uo() {
    this.Qo = this.qo;
  }
  /**
   * Returns a promise that resolves after currentDelayMs, and increases the
   * delay for any subsequent attempts. If there was a pending backoff operation
   * already, it will be canceled.
   */
  Wo(e) {
    this.cancel();
    const n = Math.floor(this.Qo + this.Go()), r = Math.max(0, Date.now() - this.$o), i = Math.max(0, n - r);
    i > 0 && ee("ExponentialBackoff", `Backing off for ${i} ms (base delay: ${this.Qo} ms, delay with jitter: ${n} ms, last attempt: ${r} ms ago)`), this.Ko = this.ai.enqueueAfterDelay(this.timerId, i, () => (this.$o = Date.now(), e())), // Apply backoff factor to determine next delay and ensure it is within
    // bounds.
    this.Qo *= this.ko, this.Qo < this.Bo && (this.Qo = this.Bo), this.Qo > this.qo && (this.Qo = this.qo);
  }
  zo() {
    this.Ko !== null && (this.Ko.skipDelay(), this.Ko = null);
  }
  cancel() {
    this.Ko !== null && (this.Ko.cancel(), this.Ko = null);
  }
  /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */
  Go() {
    return (Math.random() - 0.5) * this.Qo;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class P_ {
  constructor(e, n, r, i, s, o, c, u) {
    this.ai = e, this.jo = r, this.Ho = i, this.connection = s, this.authCredentialsProvider = o, this.appCheckCredentialsProvider = c, this.listener = u, this.state = 0, /**
    * A close count that's incremented every time the stream is closed; used by
    * getCloseGuardedDispatcher() to invalidate callbacks that happen after
    * close.
    */
    this.Jo = 0, this.Yo = null, this.Zo = null, this.stream = null, /**
    * Count of response messages received.
    */
    this.Xo = 0, this.e_ = new C_(e, n);
  }
  /**
   * Returns true if start() has been called and no error has occurred. True
   * indicates the stream is open or in the process of opening (which
   * encompasses respecting backoff, getting auth tokens, and starting the
   * actual RPC). Use isOpen() to determine if the stream is open and ready for
   * outbound requests.
   */
  t_() {
    return this.state === 1 || this.state === 5 || this.n_();
  }
  /**
   * Returns true if the underlying RPC is open (the onOpen() listener has been
   * called) and the stream is ready for outbound requests.
   */
  n_() {
    return this.state === 2 || this.state === 3;
  }
  /**
   * Starts the RPC. Only allowed if isStarted() returns false. The stream is
   * not immediately ready for use: onOpen() will be invoked when the RPC is
   * ready for outbound requests, at which point isOpen() will return true.
   *
   * When start returns, isStarted() will return true.
   */
  start() {
    this.Xo = 0, this.state !== 4 ? this.auth() : this.r_();
  }
  /**
   * Stops the RPC. This call is idempotent and allowed regardless of the
   * current isStarted() state.
   *
   * When stop returns, isStarted() and isOpen() will both return false.
   */
  async stop() {
    this.t_() && await this.close(
      0
      /* PersistentStreamState.Initial */
    );
  }
  /**
   * After an error the stream will usually back off on the next attempt to
   * start it. If the error warrants an immediate restart of the stream, the
   * sender can use this to indicate that the receiver should not back off.
   *
   * Each error will call the onClose() listener. That function can decide to
   * inhibit backoff if required.
   */
  i_() {
    this.state = 0, this.e_.reset();
  }
  /**
   * Marks this stream as idle. If no further actions are performed on the
   * stream for one minute, the stream will automatically close itself and
   * notify the stream's onClose() handler with Status.OK. The stream will then
   * be in a !isStarted() state, requiring the caller to start the stream again
   * before further use.
   *
   * Only streams that are in state 'Open' can be marked idle, as all other
   * states imply pending network operations.
   */
  s_() {
    this.n_() && this.Yo === null && (this.Yo = this.ai.enqueueAfterDelay(this.jo, 6e4, () => this.o_()));
  }
  /** Sends a message to the underlying stream. */
  __(e) {
    this.a_(), this.stream.send(e);
  }
  /** Called by the idle timer when the stream should close due to inactivity. */
  async o_() {
    if (this.n_())
      return this.close(
        0
        /* PersistentStreamState.Initial */
      );
  }
  /** Marks the stream as active again. */
  a_() {
    this.Yo && (this.Yo.cancel(), this.Yo = null);
  }
  /** Cancels the health check delayed operation. */
  u_() {
    this.Zo && (this.Zo.cancel(), this.Zo = null);
  }
  /**
   * Closes the stream and cleans up as necessary:
   *
   * * closes the underlying GRPC stream;
   * * calls the onClose handler with the given 'error';
   * * sets internal stream state to 'finalState';
   * * adjusts the backoff timer based on the error
   *
   * A new stream can be opened by calling start().
   *
   * @param finalState - the intended state of the stream after closing.
   * @param error - the error the connection was closed with.
   */
  async close(e, n) {
    this.a_(), this.u_(), this.e_.cancel(), // Invalidates any stream-related callbacks (e.g. from auth or the
    // underlying stream), guaranteeing they won't execute.
    this.Jo++, e !== 4 ? (
      // If this is an intentional close ensure we don't delay our next connection attempt.
      this.e_.reset()
    ) : n && n.code === $.RESOURCE_EXHAUSTED ? (
      // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
      (Sn(n.toString()), Sn("Using maximum backoff delay to prevent overloading the backend."), this.e_.Uo())
    ) : n && n.code === $.UNAUTHENTICATED && this.state !== 3 && // "unauthenticated" error means the token was rejected. This should rarely
    // happen since both Auth and AppCheck ensure a sufficient TTL when we
    // request a token. If a user manually resets their system clock this can
    // fail, however. In this case, we should get a Code.UNAUTHENTICATED error
    // before we received the first message and we need to invalidate the token
    // to ensure that we fetch a new token.
    (this.authCredentialsProvider.invalidateToken(), this.appCheckCredentialsProvider.invalidateToken()), // Clean up the underlying stream because we are no longer interested in events.
    this.stream !== null && (this.c_(), this.stream.close(), this.stream = null), // This state must be assigned before calling onClose() to allow the callback to
    // inhibit backoff or otherwise manipulate the state in its non-started state.
    this.state = e, // Notify the listener that the stream closed.
    await this.listener.Vo(n);
  }
  /**
   * Can be overridden to perform additional cleanup before the stream is closed.
   * Calling super.tearDown() is not required.
   */
  c_() {
  }
  auth() {
    this.state = 1;
    const e = this.l_(this.Jo), n = this.Jo;
    Promise.all([this.authCredentialsProvider.getToken(), this.appCheckCredentialsProvider.getToken()]).then(([r, i]) => {
      this.Jo === n && // Normally we'd have to schedule the callback on the AsyncQueue.
      // However, the following calls are safe to be called outside the
      // AsyncQueue since they don't chain asynchronous calls
      this.h_(r, i);
    }, (r) => {
      e(() => {
        const i = new X($.UNKNOWN, "Fetching auth token failed: " + r.message);
        return this.P_(i);
      });
    });
  }
  h_(e, n) {
    const r = this.l_(this.Jo);
    this.stream = this.I_(e, n), this.stream.To(() => {
      r(() => this.listener.To());
    }), this.stream.Ao(() => {
      r(() => (this.state = 2, this.Zo = this.ai.enqueueAfterDelay(this.Ho, 1e4, () => (this.n_() && (this.state = 3), Promise.resolve())), this.listener.Ao()));
    }), this.stream.Vo((i) => {
      r(() => this.P_(i));
    }), this.stream.onMessage((i) => {
      r(() => ++this.Xo == 1 ? this.T_(i) : this.onNext(i));
    });
  }
  r_() {
    this.state = 5, this.e_.Wo(async () => {
      this.state = 0, this.start();
    });
  }
  // Visible for tests
  P_(e) {
    return ee("PersistentStream", `close with error: ${e}`), this.stream = null, this.close(4, e);
  }
  /**
   * Returns a "dispatcher" function that dispatches operations onto the
   * AsyncQueue but only runs them if closeCount remains unchanged. This allows
   * us to turn auth / stream callbacks into no-ops if the stream is closed /
   * re-opened, etc.
   */
  l_(e) {
    return (n) => {
      this.ai.enqueueAndForget(() => this.Jo === e ? n() : (ee("PersistentStream", "stream callback skipped by getCloseGuardedDispatcher."), Promise.resolve()));
    };
  }
}
class AO extends P_ {
  constructor(e, n, r, i, s, o) {
    super(e, "listen_stream_connection_backoff", "listen_stream_idle", "health_check_timeout", n, r, i, o), this.serializer = s;
  }
  I_(e, n) {
    return this.connection.Lo("Listen", e, n);
  }
  T_(e) {
    return this.onNext(e);
  }
  onNext(e) {
    this.e_.reset();
    const n = Fk(this.serializer, e), r = function(s) {
      if (!("targetChange" in s)) return he.min();
      const o = s.targetChange;
      return o.targetIds && o.targetIds.length ? he.min() : o.readTime ? on(o.readTime) : he.min();
    }(e);
    return this.listener.E_(n, r);
  }
  /**
   * Registers interest in the results of the given target. If the target
   * includes a resumeToken it will be included in the request. Results that
   * affect the target will be streamed back as WatchChange messages that
   * reference the targetId.
   */
  d_(e) {
    const n = {};
    n.database = Bu(this.serializer), n.addTarget = function(s, o) {
      let c;
      const u = o.target;
      if (c = Lu(u) ? {
        documents: Bk(s, u)
      } : {
        query: $k(s, u)._t
      }, c.targetId = o.targetId, o.resumeToken.approximateByteSize() > 0) {
        c.resumeToken = v_(s, o.resumeToken);
        const l = Fu(s, o.expectedCount);
        l !== null && (c.expectedCount = l);
      } else if (o.snapshotVersion.compareTo(he.min()) > 0) {
        c.readTime = oa(s, o.snapshotVersion.toTimestamp());
        const l = Fu(s, o.expectedCount);
        l !== null && (c.expectedCount = l);
      }
      return c;
    }(this.serializer, e);
    const r = zk(this.serializer, e);
    r && (n.labels = r), this.__(n);
  }
  /**
   * Unregisters interest in the results of the target associated with the
   * given targetId.
   */
  A_(e) {
    const n = {};
    n.database = Bu(this.serializer), n.removeTarget = e, this.__(n);
  }
}
class RO extends P_ {
  constructor(e, n, r, i, s, o) {
    super(e, "write_stream_connection_backoff", "write_stream_idle", "health_check_timeout", n, r, i, o), this.serializer = s;
  }
  /**
   * Tracks whether or not a handshake has been successfully exchanged and
   * the stream is ready to accept mutations.
   */
  get R_() {
    return this.Xo > 0;
  }
  // Override of PersistentStream.start
  start() {
    this.lastStreamToken = void 0, super.start();
  }
  c_() {
    this.R_ && this.V_([]);
  }
  I_(e, n) {
    return this.connection.Lo("Write", e, n);
  }
  T_(e) {
    return Ne(!!e.streamToken), this.lastStreamToken = e.streamToken, // The first response is always the handshake response
    Ne(!e.writeResults || e.writeResults.length === 0), this.listener.m_();
  }
  onNext(e) {
    Ne(!!e.streamToken), this.lastStreamToken = e.streamToken, // A successful first write response means the stream is healthy,
    // Note, that we could consider a successful handshake healthy, however,
    // the write itself might be causing an error we want to back off from.
    this.e_.reset();
    const n = jk(e.writeResults, e.commitTime), r = on(e.commitTime);
    return this.listener.f_(r, n);
  }
  /**
   * Sends an initial streamToken to the server, performing the handshake
   * required to make the StreamingWrite RPC work. Subsequent
   * calls should wait until onHandshakeComplete was called.
   */
  g_() {
    const e = {};
    e.database = Bu(this.serializer), this.__(e);
  }
  /** Sends a group of mutations to the Firestore backend to apply. */
  V_(e) {
    const n = {
      streamToken: this.lastStreamToken,
      writes: e.map((r) => Uk(this.serializer, r))
    };
    this.__(n);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class CO extends class {
} {
  constructor(e, n, r, i) {
    super(), this.authCredentials = e, this.appCheckCredentials = n, this.connection = r, this.serializer = i, this.p_ = !1;
  }
  y_() {
    if (this.p_) throw new X($.FAILED_PRECONDITION, "The client has already been terminated.");
  }
  /** Invokes the provided RPC with auth and AppCheck tokens. */
  Fo(e, n, r, i) {
    return this.y_(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(([s, o]) => this.connection.Fo(e, Uu(n, r), i, s, o)).catch((s) => {
      throw s.name === "FirebaseError" ? (s.code === $.UNAUTHENTICATED && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), s) : new X($.UNKNOWN, s.toString());
    });
  }
  /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */
  No(e, n, r, i, s) {
    return this.y_(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(([o, c]) => this.connection.No(e, Uu(n, r), i, o, c, s)).catch((o) => {
      throw o.name === "FirebaseError" ? (o.code === $.UNAUTHENTICATED && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), o) : new X($.UNKNOWN, o.toString());
    });
  }
  terminate() {
    this.p_ = !0, this.connection.terminate();
  }
}
class PO {
  constructor(e, n) {
    this.asyncQueue = e, this.onlineStateHandler = n, /** The current OnlineState. */
    this.state = "Unknown", /**
    * A count of consecutive failures to open the stream. If it reaches the
    * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
    * Offline.
    */
    this.w_ = 0, /**
    * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
    * transition from OnlineState.Unknown to OnlineState.Offline without waiting
    * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
    */
    this.S_ = null, /**
    * Whether the client should log a warning message if it fails to connect to
    * the backend (initially true, cleared after a successful stream, or if we've
    * logged the message already).
    */
    this.b_ = !0;
  }
  /**
   * Called by RemoteStore when a watch stream is started (including on each
   * backoff attempt).
   *
   * If this is the first attempt, it sets the OnlineState to Unknown and starts
   * the onlineStateTimer.
   */
  D_() {
    this.w_ === 0 && (this.C_(
      "Unknown"
      /* OnlineState.Unknown */
    ), this.S_ = this.asyncQueue.enqueueAfterDelay("online_state_timeout", 1e4, () => (this.S_ = null, this.v_("Backend didn't respond within 10 seconds."), this.C_(
      "Offline"
      /* OnlineState.Offline */
    ), Promise.resolve())));
  }
  /**
   * Updates our OnlineState as appropriate after the watch stream reports a
   * failure. The first failure moves us to the 'Unknown' state. We then may
   * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
   * actually transition to the 'Offline' state.
   */
  F_(e) {
    this.state === "Online" ? this.C_(
      "Unknown"
      /* OnlineState.Unknown */
    ) : (this.w_++, this.w_ >= 1 && (this.M_(), this.v_(`Connection failed 1 times. Most recent error: ${e.toString()}`), this.C_(
      "Offline"
      /* OnlineState.Offline */
    )));
  }
  /**
   * Explicitly sets the OnlineState to the specified state.
   *
   * Note that this resets our timers / failure counters, etc. used by our
   * Offline heuristics, so must not be used in place of
   * handleWatchStreamStart() and handleWatchStreamFailure().
   */
  set(e) {
    this.M_(), this.w_ = 0, e === "Online" && // We've connected to watch at least once. Don't warn the developer
    // about being offline going forward.
    (this.b_ = !1), this.C_(e);
  }
  C_(e) {
    e !== this.state && (this.state = e, this.onlineStateHandler(e));
  }
  v_(e) {
    const n = `Could not reach Cloud Firestore backend. ${e}
This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;
    this.b_ ? (Sn(n), this.b_ = !1) : ee("OnlineStateTracker", n);
  }
  M_() {
    this.S_ !== null && (this.S_.cancel(), this.S_ = null);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class kO {
  constructor(e, n, r, i, s) {
    this.localStore = e, this.datastore = n, this.asyncQueue = r, this.remoteSyncer = {}, /**
    * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
    * LocalStore via fillWritePipeline() and have or will send to the write
    * stream.
    *
    * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
    * restart the write stream. When the stream is established the writes in the
    * pipeline will be sent in order.
    *
    * Writes remain in writePipeline until they are acknowledged by the backend
    * and thus will automatically be re-sent if the stream is interrupted /
    * restarted before they're acknowledged.
    *
    * Write responses from the backend are linked to their originating request
    * purely based on order, and so we can just shift() writes from the front of
    * the writePipeline as we receive responses.
    */
    this.x_ = [], /**
    * A mapping of watched targets that the client cares about tracking and the
    * user has explicitly called a 'listen' for this target.
    *
    * These targets may or may not have been sent to or acknowledged by the
    * server. On re-establishing the listen stream, these targets should be sent
    * to the server. The targets removed with unlistens are removed eagerly
    * without waiting for confirmation from the listen stream.
    */
    this.O_ = /* @__PURE__ */ new Map(), /**
    * A set of reasons for why the RemoteStore may be offline. If empty, the
    * RemoteStore may start its network connections.
    */
    this.N_ = /* @__PURE__ */ new Set(), /**
    * Event handlers that get called when the network is disabled or enabled.
    *
    * PORTING NOTE: These functions are used on the Web client to create the
    * underlying streams (to support tree-shakeable streams). On Android and iOS,
    * the streams are created during construction of RemoteStore.
    */
    this.L_ = [], this.B_ = s, this.B_.oo((o) => {
      r.enqueueAndForget(async () => {
        Lr(this) && (ee("RemoteStore", "Restarting streams for network reachability change."), await async function(u) {
          const l = fe(u);
          l.N_.add(
            4
            /* OfflineCause.ConnectivityChange */
          ), await Fs(l), l.k_.set(
            "Unknown"
            /* OnlineState.Unknown */
          ), l.N_.delete(
            4
            /* OfflineCause.ConnectivityChange */
          ), await ja(l);
        }(this));
      });
    }), this.k_ = new PO(r, i);
  }
}
async function ja(t) {
  if (Lr(t)) for (const e of t.L_) await e(
    /* enabled= */
    !0
  );
}
async function Fs(t) {
  for (const e of t.L_) await e(
    /* enabled= */
    !1
  );
}
function k_(t, e) {
  const n = fe(t);
  n.O_.has(e.targetId) || // Mark this as something the client is currently listening for.
  (n.O_.set(e.targetId, e), Zl(n) ? (
    // The listen will be sent in onWatchStreamOpen
    Xl(n)
  ) : Ti(n).n_() && Jl(n, e));
}
function Yl(t, e) {
  const n = fe(t), r = Ti(n);
  n.O_.delete(e), r.n_() && O_(n, e), n.O_.size === 0 && (r.n_() ? r.s_() : Lr(n) && // Revert to OnlineState.Unknown if the watch stream is not open and we
  // have no listeners, since without any listens to send we cannot
  // confirm if the stream is healthy and upgrade to OnlineState.Online.
  n.k_.set(
    "Unknown"
    /* OnlineState.Unknown */
  ));
}
function Jl(t, e) {
  if (t.q_.xe(e.targetId), e.resumeToken.approximateByteSize() > 0 || e.snapshotVersion.compareTo(he.min()) > 0) {
    const n = t.remoteSyncer.getRemoteKeysForTarget(e.targetId).size;
    e = e.withExpectedCount(n);
  }
  Ti(t).d_(e);
}
function O_(t, e) {
  t.q_.xe(e), Ti(t).A_(e);
}
function Xl(t) {
  t.q_ = new Ok({
    getRemoteKeysForTarget: (e) => t.remoteSyncer.getRemoteKeysForTarget(e),
    ot: (e) => t.O_.get(e) || null,
    tt: () => t.datastore.serializer.databaseId
  }), Ti(t).start(), t.k_.D_();
}
function Zl(t) {
  return Lr(t) && !Ti(t).t_() && t.O_.size > 0;
}
function Lr(t) {
  return fe(t).N_.size === 0;
}
function N_(t) {
  t.q_ = void 0;
}
async function OO(t) {
  t.k_.set(
    "Online"
    /* OnlineState.Online */
  );
}
async function NO(t) {
  t.O_.forEach((e, n) => {
    Jl(t, e);
  });
}
async function DO(t, e) {
  N_(t), // If we still need the watch stream, retry the connection.
  Zl(t) ? (t.k_.F_(e), Xl(t)) : (
    // No need to restart watch stream because there are no active targets.
    // The online state is set to unknown because there is no active attempt
    // at establishing a connection
    t.k_.set(
      "Unknown"
      /* OnlineState.Unknown */
    )
  );
}
async function xO(t, e, n) {
  if (
    // Mark the client as online since we got a message from the server
    t.k_.set(
      "Online"
      /* OnlineState.Online */
    ), e instanceof __ && e.state === 2 && e.cause
  )
    try {
      await /** Handles an error on a target */
      async function(i, s) {
        const o = s.cause;
        for (const c of s.targetIds)
          i.O_.has(c) && (await i.remoteSyncer.rejectListen(c, o), i.O_.delete(c), i.q_.removeTarget(c));
      }(t, e);
    } catch (r) {
      ee("RemoteStore", "Failed to remove targets %s: %s ", e.targetIds.join(","), r), await aa(t, r);
    }
  else if (e instanceof xo ? t.q_.Ke(e) : e instanceof y_ ? t.q_.He(e) : t.q_.We(e), !n.isEqual(he.min())) try {
    const r = await R_(t.localStore);
    n.compareTo(r) >= 0 && // We have received a target change with a global snapshot if the snapshot
    // version is not equal to SnapshotVersion.min().
    await /**
    * Takes a batch of changes from the Datastore, repackages them as a
    * RemoteEvent, and passes that on to the listener, which is typically the
    * SyncEngine.
    */
    function(s, o) {
      const c = s.q_.rt(o);
      return c.targetChanges.forEach((u, l) => {
        if (u.resumeToken.approximateByteSize() > 0) {
          const f = s.O_.get(l);
          f && s.O_.set(l, f.withResumeToken(u.resumeToken, o));
        }
      }), // Re-establish listens for the targets that have been invalidated by
      // existence filter mismatches.
      c.targetMismatches.forEach((u, l) => {
        const f = s.O_.get(u);
        if (!f)
          return;
        s.O_.set(u, f.withResumeToken(ht.EMPTY_BYTE_STRING, f.snapshotVersion)), // Cause a hard reset by unwatching and rewatching immediately, but
        // deliberately don't send a resume token so that we get a full update.
        O_(s, u);
        const h = new Bn(f.target, u, l, f.sequenceNumber);
        Jl(s, h);
      }), s.remoteSyncer.applyRemoteEvent(c);
    }(t, n);
  } catch (r) {
    ee("RemoteStore", "Failed to raise snapshot:", r), await aa(t, r);
  }
}
async function aa(t, e, n) {
  if (!xs(e)) throw e;
  t.N_.add(
    1
    /* OfflineCause.IndexedDbFailed */
  ), // Disable network and raise offline snapshots
  await Fs(t), t.k_.set(
    "Offline"
    /* OnlineState.Offline */
  ), n || // Use a simple read operation to determine if IndexedDB recovered.
  // Ideally, we would expose a health check directly on SimpleDb, but
  // RemoteStore only has access to persistence through LocalStore.
  (n = () => R_(t.localStore)), // Probe IndexedDB periodically and re-enable network
  t.asyncQueue.enqueueRetryable(async () => {
    ee("RemoteStore", "Retrying IndexedDB access"), await n(), t.N_.delete(
      1
      /* OfflineCause.IndexedDbFailed */
    ), await ja(t);
  });
}
function D_(t, e) {
  return e().catch((n) => aa(t, n, e));
}
async function Ba(t) {
  const e = fe(t), n = Jn(e);
  let r = e.x_.length > 0 ? e.x_[e.x_.length - 1].batchId : -1;
  for (; LO(e); ) try {
    const i = await _O(e.localStore, r);
    if (i === null) {
      e.x_.length === 0 && n.s_();
      break;
    }
    r = i.batchId, MO(e, i);
  } catch (i) {
    await aa(e, i);
  }
  x_(e) && L_(e);
}
function LO(t) {
  return Lr(t) && t.x_.length < 10;
}
function MO(t, e) {
  t.x_.push(e);
  const n = Jn(t);
  n.n_() && n.R_ && n.V_(e.mutations);
}
function x_(t) {
  return Lr(t) && !Jn(t).t_() && t.x_.length > 0;
}
function L_(t) {
  Jn(t).start();
}
async function VO(t) {
  Jn(t).g_();
}
async function FO(t) {
  const e = Jn(t);
  for (const n of t.x_) e.V_(n.mutations);
}
async function UO(t, e, n) {
  const r = t.x_.shift(), i = zl.from(r, e, n);
  await D_(t, () => t.remoteSyncer.applySuccessfulWrite(i)), // It's possible that with the completion of this mutation another
  // slot has freed up.
  await Ba(t);
}
async function jO(t, e) {
  e && Jn(t).R_ && // This error affects the actual write.
  await async function(r, i) {
    if (function(o) {
      return Ck(o) && o !== $.ABORTED;
    }(i.code)) {
      const s = r.x_.shift();
      Jn(r).i_(), await D_(r, () => r.remoteSyncer.rejectFailedWrite(s.batchId, i)), // It's possible that with the completion of this mutation
      // another slot has freed up.
      await Ba(r);
    }
  }(t, e), // The write stream might have been started by refilling the write
  // pipeline for failed writes
  x_(t) && L_(t);
}
async function jp(t, e) {
  const n = fe(t);
  n.asyncQueue.verifyOperationInProgress(), ee("RemoteStore", "RemoteStore received new credentials");
  const r = Lr(n);
  n.N_.add(
    3
    /* OfflineCause.CredentialChange */
  ), await Fs(n), r && // Don't set the network status to Unknown if we are offline.
  n.k_.set(
    "Unknown"
    /* OnlineState.Unknown */
  ), await n.remoteSyncer.handleCredentialChange(e), n.N_.delete(
    3
    /* OfflineCause.CredentialChange */
  ), await ja(n);
}
async function BO(t, e) {
  const n = fe(t);
  e ? (n.N_.delete(
    2
    /* OfflineCause.IsSecondary */
  ), await ja(n)) : e || (n.N_.add(
    2
    /* OfflineCause.IsSecondary */
  ), await Fs(n), n.k_.set(
    "Unknown"
    /* OnlineState.Unknown */
  ));
}
function Ti(t) {
  return t.Q_ || // Create stream (but note that it is not started yet).
  (t.Q_ = function(n, r, i) {
    const s = fe(n);
    return s.y_(), new AO(r, s.connection, s.authCredentials, s.appCheckCredentials, s.serializer, i);
  }(t.datastore, t.asyncQueue, {
    To: OO.bind(null, t),
    Ao: NO.bind(null, t),
    Vo: DO.bind(null, t),
    E_: xO.bind(null, t)
  }), t.L_.push(async (e) => {
    e ? (t.Q_.i_(), Zl(t) ? Xl(t) : t.k_.set(
      "Unknown"
      /* OnlineState.Unknown */
    )) : (await t.Q_.stop(), N_(t));
  })), t.Q_;
}
function Jn(t) {
  return t.K_ || // Create stream (but note that it is not started yet).
  (t.K_ = function(n, r, i) {
    const s = fe(n);
    return s.y_(), new RO(r, s.connection, s.authCredentials, s.appCheckCredentials, s.serializer, i);
  }(t.datastore, t.asyncQueue, {
    To: () => Promise.resolve(),
    Ao: VO.bind(null, t),
    Vo: jO.bind(null, t),
    m_: FO.bind(null, t),
    f_: UO.bind(null, t)
  }), t.L_.push(async (e) => {
    e ? (t.K_.i_(), // This will start the write stream if necessary.
    await Ba(t)) : (await t.K_.stop(), t.x_.length > 0 && (ee("RemoteStore", `Stopping write stream with ${t.x_.length} pending writes`), t.x_ = []));
  })), t.K_;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class eh {
  constructor(e, n, r, i, s) {
    this.asyncQueue = e, this.timerId = n, this.targetTimeMs = r, this.op = i, this.removalCallback = s, this.deferred = new zn(), this.then = this.deferred.promise.then.bind(this.deferred.promise), // It's normal for the deferred promise to be canceled (due to cancellation)
    // and so we attach a dummy catch callback to avoid
    // 'UnhandledPromiseRejectionWarning' log spam.
    this.deferred.promise.catch((o) => {
    });
  }
  get promise() {
    return this.deferred.promise;
  }
  /**
   * Creates and returns a DelayedOperation that has been scheduled to be
   * executed on the provided asyncQueue after the provided delayMs.
   *
   * @param asyncQueue - The queue to schedule the operation on.
   * @param id - A Timer ID identifying the type of operation this is.
   * @param delayMs - The delay (ms) before the operation should be scheduled.
   * @param op - The operation to run.
   * @param removalCallback - A callback to be called synchronously once the
   *   operation is executed or canceled, notifying the AsyncQueue to remove it
   *   from its delayedOperations list.
   *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
   *   the DelayedOperation class public.
   */
  static createAndSchedule(e, n, r, i, s) {
    const o = Date.now() + r, c = new eh(e, n, o, i, s);
    return c.start(r), c;
  }
  /**
   * Starts the timer. This is called immediately after construction by
   * createAndSchedule().
   */
  start(e) {
    this.timerHandle = setTimeout(() => this.handleDelayElapsed(), e);
  }
  /**
   * Queues the operation to run immediately (if it hasn't already been run or
   * canceled).
   */
  skipDelay() {
    return this.handleDelayElapsed();
  }
  /**
   * Cancels the operation if it hasn't already been executed or canceled. The
   * promise will be rejected.
   *
   * As long as the operation has not yet been run, calling cancel() provides a
   * guarantee that the operation will not be run.
   */
  cancel(e) {
    this.timerHandle !== null && (this.clearTimeout(), this.deferred.reject(new X($.CANCELLED, "Operation cancelled" + (e ? ": " + e : ""))));
  }
  handleDelayElapsed() {
    this.asyncQueue.enqueueAndForget(() => this.timerHandle !== null ? (this.clearTimeout(), this.op().then((e) => this.deferred.resolve(e))) : Promise.resolve());
  }
  clearTimeout() {
    this.timerHandle !== null && (this.removalCallback(this), clearTimeout(this.timerHandle), this.timerHandle = null);
  }
}
function th(t, e) {
  if (Sn("AsyncQueue", `${e}: ${t}`), xs(t)) return new X($.UNAVAILABLE, `${e}: ${t}`);
  throw t;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ei {
  /** The default ordering is by key if the comparator is omitted */
  constructor(e) {
    this.comparator = e ? (n, r) => e(n, r) || se.comparator(n.key, r.key) : (n, r) => se.comparator(n.key, r.key), this.keyedMap = Qi(), this.sortedSet = new Me(this.comparator);
  }
  /**
   * Returns an empty copy of the existing DocumentSet, using the same
   * comparator.
   */
  static emptySet(e) {
    return new ei(e.comparator);
  }
  has(e) {
    return this.keyedMap.get(e) != null;
  }
  get(e) {
    return this.keyedMap.get(e);
  }
  first() {
    return this.sortedSet.minKey();
  }
  last() {
    return this.sortedSet.maxKey();
  }
  isEmpty() {
    return this.sortedSet.isEmpty();
  }
  /**
   * Returns the index of the provided key in the document set, or -1 if the
   * document key is not present in the set;
   */
  indexOf(e) {
    const n = this.keyedMap.get(e);
    return n ? this.sortedSet.indexOf(n) : -1;
  }
  get size() {
    return this.sortedSet.size;
  }
  /** Iterates documents in order defined by "comparator" */
  forEach(e) {
    this.sortedSet.inorderTraversal((n, r) => (e(n), !1));
  }
  /** Inserts or updates a document with the same key */
  add(e) {
    const n = this.delete(e.key);
    return n.copy(n.keyedMap.insert(e.key, e), n.sortedSet.insert(e, null));
  }
  /** Deletes a document with a given key */
  delete(e) {
    const n = this.get(e);
    return n ? this.copy(this.keyedMap.remove(e), this.sortedSet.remove(n)) : this;
  }
  isEqual(e) {
    if (!(e instanceof ei) || this.size !== e.size) return !1;
    const n = this.sortedSet.getIterator(), r = e.sortedSet.getIterator();
    for (; n.hasNext(); ) {
      const i = n.getNext().key, s = r.getNext().key;
      if (!i.isEqual(s)) return !1;
    }
    return !0;
  }
  toString() {
    const e = [];
    return this.forEach((n) => {
      e.push(n.toString());
    }), e.length === 0 ? "DocumentSet ()" : `DocumentSet (
  ` + e.join(`  
`) + `
)`;
  }
  copy(e, n) {
    const r = new ei();
    return r.comparator = this.comparator, r.keyedMap = e, r.sortedSet = n, r;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Bp {
  constructor() {
    this.U_ = new Me(se.comparator);
  }
  track(e) {
    const n = e.doc.key, r = this.U_.get(n);
    r ? (
      // Merge the new change with the existing change.
      e.type !== 0 && r.type === 3 ? this.U_ = this.U_.insert(n, e) : e.type === 3 && r.type !== 1 ? this.U_ = this.U_.insert(n, {
        type: r.type,
        doc: e.doc
      }) : e.type === 2 && r.type === 2 ? this.U_ = this.U_.insert(n, {
        type: 2,
        doc: e.doc
      }) : e.type === 2 && r.type === 0 ? this.U_ = this.U_.insert(n, {
        type: 0,
        doc: e.doc
      }) : e.type === 1 && r.type === 0 ? this.U_ = this.U_.remove(n) : e.type === 1 && r.type === 2 ? this.U_ = this.U_.insert(n, {
        type: 1,
        doc: r.doc
      }) : e.type === 0 && r.type === 1 ? this.U_ = this.U_.insert(n, {
        type: 2,
        doc: e.doc
      }) : (
        // This includes these cases, which don't make sense:
        // Added->Added
        // Removed->Removed
        // Modified->Added
        // Removed->Modified
        // Metadata->Added
        // Removed->Metadata
        ce()
      )
    ) : this.U_ = this.U_.insert(n, e);
  }
  W_() {
    const e = [];
    return this.U_.inorderTraversal((n, r) => {
      e.push(r);
    }), e;
  }
}
class fi {
  constructor(e, n, r, i, s, o, c, u, l) {
    this.query = e, this.docs = n, this.oldDocs = r, this.docChanges = i, this.mutatedKeys = s, this.fromCache = o, this.syncStateChanged = c, this.excludesMetadataChanges = u, this.hasCachedResults = l;
  }
  /** Returns a view snapshot as if all documents in the snapshot were added. */
  static fromInitialDocuments(e, n, r, i, s) {
    const o = [];
    return n.forEach((c) => {
      o.push({
        type: 0,
        doc: c
      });
    }), new fi(
      e,
      n,
      ei.emptySet(n),
      o,
      r,
      i,
      /* syncStateChanged= */
      !0,
      /* excludesMetadataChanges= */
      !1,
      s
    );
  }
  get hasPendingWrites() {
    return !this.mutatedKeys.isEmpty();
  }
  isEqual(e) {
    if (!(this.fromCache === e.fromCache && this.hasCachedResults === e.hasCachedResults && this.syncStateChanged === e.syncStateChanged && this.mutatedKeys.isEqual(e.mutatedKeys) && xa(this.query, e.query) && this.docs.isEqual(e.docs) && this.oldDocs.isEqual(e.oldDocs))) return !1;
    const n = this.docChanges, r = e.docChanges;
    if (n.length !== r.length) return !1;
    for (let i = 0; i < n.length; i++) if (n[i].type !== r[i].type || !n[i].doc.isEqual(r[i].doc)) return !1;
    return !0;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class $O {
  constructor() {
    this.G_ = void 0, this.z_ = [];
  }
  // Helper methods that checks if the query has listeners that listening to remote store
  j_() {
    return this.z_.some((e) => e.H_());
  }
}
class qO {
  constructor() {
    this.queries = $p(), this.onlineState = "Unknown", this.J_ = /* @__PURE__ */ new Set();
  }
  terminate() {
    (function(n, r) {
      const i = fe(n), s = i.queries;
      i.queries = $p(), s.forEach((o, c) => {
        for (const u of c.z_) u.onError(r);
      });
    })(this, new X($.ABORTED, "Firestore shutting down"));
  }
}
function $p() {
  return new bi((t) => n_(t), xa);
}
async function M_(t, e) {
  const n = fe(t);
  let r = 3;
  const i = e.query;
  let s = n.queries.get(i);
  s ? !s.j_() && e.H_() && // Query has been listening to local cache, and tries to add a new listener sourced from watch.
  (r = 2) : (s = new $O(), r = e.H_() ? 0 : 1);
  try {
    switch (r) {
      case 0:
        s.G_ = await n.onListen(
          i,
          /** enableRemoteListen= */
          !0
        );
        break;
      case 1:
        s.G_ = await n.onListen(
          i,
          /** enableRemoteListen= */
          !1
        );
        break;
      case 2:
        await n.onFirstRemoteStoreListen(i);
    }
  } catch (o) {
    const c = th(o, `Initialization of query '${qr(e.query)}' failed`);
    return void e.onError(c);
  }
  n.queries.set(i, s), s.z_.push(e), // Run global snapshot listeners if a consistent snapshot has been emitted.
  e.Y_(n.onlineState), s.G_ && e.Z_(s.G_) && nh(n);
}
async function V_(t, e) {
  const n = fe(t), r = e.query;
  let i = 3;
  const s = n.queries.get(r);
  if (s) {
    const o = s.z_.indexOf(e);
    o >= 0 && (s.z_.splice(o, 1), s.z_.length === 0 ? i = e.H_() ? 0 : 1 : !s.j_() && e.H_() && // The removed listener is the last one that sourced from watch.
    (i = 2));
  }
  switch (i) {
    case 0:
      return n.queries.delete(r), n.onUnlisten(
        r,
        /** disableRemoteListen= */
        !0
      );
    case 1:
      return n.queries.delete(r), n.onUnlisten(
        r,
        /** disableRemoteListen= */
        !1
      );
    case 2:
      return n.onLastRemoteStoreUnlisten(r);
    default:
      return;
  }
}
function zO(t, e) {
  const n = fe(t);
  let r = !1;
  for (const i of e) {
    const s = i.query, o = n.queries.get(s);
    if (o) {
      for (const c of o.z_) c.Z_(i) && (r = !0);
      o.G_ = i;
    }
  }
  r && nh(n);
}
function KO(t, e, n) {
  const r = fe(t), i = r.queries.get(e);
  if (i) for (const s of i.z_) s.onError(n);
  r.queries.delete(e);
}
function nh(t) {
  t.J_.forEach((e) => {
    e.next();
  });
}
var qu, qp;
(qp = qu || (qu = {})).X_ = "default", /** Listen to changes in cache only */
qp.Cache = "cache";
class F_ {
  constructor(e, n, r) {
    this.query = e, this.ea = n, /**
    * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
    * observer. This flag is set to true once we've actually raised an event.
    */
    this.ta = !1, this.na = null, this.onlineState = "Unknown", this.options = r || {};
  }
  /**
   * Applies the new ViewSnapshot to this listener, raising a user-facing event
   * if applicable (depending on what changed, whether the user has opted into
   * metadata-only changes, etc.). Returns true if a user-facing event was
   * indeed raised.
   */
  Z_(e) {
    if (!this.options.includeMetadataChanges) {
      const r = [];
      for (const i of e.docChanges) i.type !== 3 && r.push(i);
      e = new fi(
        e.query,
        e.docs,
        e.oldDocs,
        r,
        e.mutatedKeys,
        e.fromCache,
        e.syncStateChanged,
        /* excludesMetadataChanges= */
        !0,
        e.hasCachedResults
      );
    }
    let n = !1;
    return this.ta ? this.ra(e) && (this.ea.next(e), n = !0) : this.ia(e, this.onlineState) && (this.sa(e), n = !0), this.na = e, n;
  }
  onError(e) {
    this.ea.error(e);
  }
  /** Returns whether a snapshot was raised. */
  Y_(e) {
    this.onlineState = e;
    let n = !1;
    return this.na && !this.ta && this.ia(this.na, e) && (this.sa(this.na), n = !0), n;
  }
  ia(e, n) {
    if (!e.fromCache || !this.H_()) return !0;
    const r = n !== "Offline";
    return (!this.options.oa || !r) && (!e.docs.isEmpty() || e.hasCachedResults || n === "Offline");
  }
  ra(e) {
    if (e.docChanges.length > 0) return !0;
    const n = this.na && this.na.hasPendingWrites !== e.hasPendingWrites;
    return !(!e.syncStateChanged && !n) && this.options.includeMetadataChanges === !0;
  }
  sa(e) {
    e = fi.fromInitialDocuments(e.query, e.docs, e.mutatedKeys, e.fromCache, e.hasCachedResults), this.ta = !0, this.ea.next(e);
  }
  H_() {
    return this.options.source !== qu.Cache;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class U_ {
  constructor(e) {
    this.key = e;
  }
}
class j_ {
  constructor(e) {
    this.key = e;
  }
}
class HO {
  constructor(e, n) {
    this.query = e, this.Ia = n, this.Ta = null, this.hasCachedResults = !1, /**
    * A flag whether the view is current with the backend. A view is considered
    * current after it has seen the current flag from the backend and did not
    * lose consistency within the watch stream (e.g. because of an existence
    * filter mismatch).
    */
    this.current = !1, /** Documents in the view but not in the remote target */
    this.Ea = _e(), /** Document Keys that have local changes */
    this.mutatedKeys = _e(), this.da = r_(e), this.Aa = new ei(this.da);
  }
  /**
   * The set of remote documents that the server has told us belongs to the target associated with
   * this view.
   */
  get Ra() {
    return this.Ia;
  }
  /**
   * Iterates over a set of doc changes, applies the query limit, and computes
   * what the new results should be, what the changes were, and whether we may
   * need to go back to the local cache for more results. Does not make any
   * changes to the view.
   * @param docChanges - The doc changes to apply to this view.
   * @param previousChanges - If this is being called with a refill, then start
   *        with this set of docs and changes instead of the current view.
   * @returns a new set of docs, changes, and refill flag.
   */
  Va(e, n) {
    const r = n ? n.ma : new Bp(), i = n ? n.Aa : this.Aa;
    let s = n ? n.mutatedKeys : this.mutatedKeys, o = i, c = !1;
    const u = this.query.limitType === "F" && i.size === this.query.limit ? i.last() : null, l = this.query.limitType === "L" && i.size === this.query.limit ? i.first() : null;
    if (e.inorderTraversal((f, h) => {
      const _ = i.get(f), b = La(this.query, h) ? h : null, I = !!_ && this.mutatedKeys.has(_.key), C = !!b && (b.hasLocalMutations || // We only consider committed mutations for documents that were
      // mutated during the lifetime of the view.
      this.mutatedKeys.has(b.key) && b.hasCommittedMutations);
      let m = !1;
      _ && b ? _.data.isEqual(b.data) ? I !== C && (r.track({
        type: 3,
        doc: b
      }), m = !0) : this.fa(_, b) || (r.track({
        type: 2,
        doc: b
      }), m = !0, (u && this.da(b, u) > 0 || l && this.da(b, l) < 0) && // This doc moved from inside the limit to outside the limit.
      // That means there may be some other doc in the local cache
      // that should be included instead.
      (c = !0)) : !_ && b ? (r.track({
        type: 0,
        doc: b
      }), m = !0) : _ && !b && (r.track({
        type: 1,
        doc: _
      }), m = !0, (u || l) && // A doc was removed from a full limit query. We'll need to
      // requery from the local cache to see if we know about some other
      // doc that should be in the results.
      (c = !0)), m && (b ? (o = o.add(b), s = C ? s.add(f) : s.delete(f)) : (o = o.delete(f), s = s.delete(f)));
    }), this.query.limit !== null) for (; o.size > this.query.limit; ) {
      const f = this.query.limitType === "F" ? o.last() : o.first();
      o = o.delete(f.key), s = s.delete(f.key), r.track({
        type: 1,
        doc: f
      });
    }
    return {
      Aa: o,
      ma: r,
      ts: c,
      mutatedKeys: s
    };
  }
  fa(e, n) {
    return e.hasLocalMutations && n.hasCommittedMutations && !n.hasLocalMutations;
  }
  /**
   * Updates the view with the given ViewDocumentChanges and optionally updates
   * limbo docs and sync state from the provided target change.
   * @param docChanges - The set of changes to make to the view's docs.
   * @param limboResolutionEnabled - Whether to update limbo documents based on
   *        this change.
   * @param targetChange - A target change to apply for computing limbo docs and
   *        sync state.
   * @param targetIsPendingReset - Whether the target is pending to reset due to
   *        existence filter mismatch. If not explicitly specified, it is treated
   *        equivalently to `false`.
   * @returns A new ViewChange with the given docs, changes, and sync state.
   */
  // PORTING NOTE: The iOS/Android clients always compute limbo document changes.
  applyChanges(e, n, r, i) {
    const s = this.Aa;
    this.Aa = e.Aa, this.mutatedKeys = e.mutatedKeys;
    const o = e.ma.W_();
    o.sort((f, h) => function(b, I) {
      const C = (m) => {
        switch (m) {
          case 0:
            return 1;
          case 2:
          case 3:
            return 2;
          case 1:
            return 0;
          default:
            return ce();
        }
      };
      return C(b) - C(I);
    }(f.type, h.type) || this.da(f.doc, h.doc)), this.ga(r), i = i != null && i;
    const c = n && !i ? this.pa() : [], u = this.Ea.size === 0 && this.current && !i ? 1 : 0, l = u !== this.Ta;
    return this.Ta = u, o.length !== 0 || l ? {
      snapshot: new fi(
        this.query,
        e.Aa,
        s,
        o,
        e.mutatedKeys,
        u === 0,
        l,
        /* excludesMetadataChanges= */
        !1,
        !!r && r.resumeToken.approximateByteSize() > 0
      ),
      ya: c
    } : {
      ya: c
    };
  }
  /**
   * Applies an OnlineState change to the view, potentially generating a
   * ViewChange if the view's syncState changes as a result.
   */
  Y_(e) {
    return this.current && e === "Offline" ? (
      // If we're offline, set `current` to false and then call applyChanges()
      // to refresh our syncState and generate a ViewChange as appropriate. We
      // are guaranteed to get a new TargetChange that sets `current` back to
      // true once the client is back online.
      (this.current = !1, this.applyChanges(
        {
          Aa: this.Aa,
          ma: new Bp(),
          mutatedKeys: this.mutatedKeys,
          ts: !1
        },
        /* limboResolutionEnabled= */
        !1
      ))
    ) : {
      ya: []
    };
  }
  /**
   * Returns whether the doc for the given key should be in limbo.
   */
  wa(e) {
    return !this.Ia.has(e) && // The local store doesn't think it's a result, so it shouldn't be in limbo.
    !!this.Aa.has(e) && !this.Aa.get(e).hasLocalMutations;
  }
  /**
   * Updates syncedDocuments, current, and limbo docs based on the given change.
   * Returns the list of changes to which docs are in limbo.
   */
  ga(e) {
    e && (e.addedDocuments.forEach((n) => this.Ia = this.Ia.add(n)), e.modifiedDocuments.forEach((n) => {
    }), e.removedDocuments.forEach((n) => this.Ia = this.Ia.delete(n)), this.current = e.current);
  }
  pa() {
    if (!this.current) return [];
    const e = this.Ea;
    this.Ea = _e(), this.Aa.forEach((r) => {
      this.wa(r.key) && (this.Ea = this.Ea.add(r.key));
    });
    const n = [];
    return e.forEach((r) => {
      this.Ea.has(r) || n.push(new j_(r));
    }), this.Ea.forEach((r) => {
      e.has(r) || n.push(new U_(r));
    }), n;
  }
  /**
   * Update the in-memory state of the current view with the state read from
   * persistence.
   *
   * We update the query view whenever a client's primary status changes:
   * - When a client transitions from primary to secondary, it can miss
   *   LocalStorage updates and its query views may temporarily not be
   *   synchronized with the state on disk.
   * - For secondary to primary transitions, the client needs to update the list
   *   of `syncedDocuments` since secondary clients update their query views
   *   based purely on synthesized RemoteEvents.
   *
   * @param queryResult.documents - The documents that match the query according
   * to the LocalStore.
   * @param queryResult.remoteKeys - The keys of the documents that match the
   * query according to the backend.
   *
   * @returns The ViewChange that resulted from this synchronization.
   */
  // PORTING NOTE: Multi-tab only.
  Sa(e) {
    this.Ia = e.Is, this.Ea = _e();
    const n = this.Va(e.documents);
    return this.applyChanges(
      n,
      /* limboResolutionEnabled= */
      !0
    );
  }
  /**
   * Returns a view snapshot as if this query was just listened to. Contains
   * a document add for every existing document and the `fromCache` and
   * `hasPendingWrites` status of the already established view.
   */
  // PORTING NOTE: Multi-tab only.
  ba() {
    return fi.fromInitialDocuments(this.query, this.Aa, this.mutatedKeys, this.Ta === 0, this.hasCachedResults);
  }
}
class GO {
  constructor(e, n, r) {
    this.query = e, this.targetId = n, this.view = r;
  }
}
class WO {
  constructor(e) {
    this.key = e, /**
    * Set to true once we've received a document. This is used in
    * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to
    * decide whether it needs to manufacture a delete event for the target once
    * the target is CURRENT.
    */
    this.Da = !1;
  }
}
class QO {
  constructor(e, n, r, i, s, o) {
    this.localStore = e, this.remoteStore = n, this.eventManager = r, this.sharedClientState = i, this.currentUser = s, this.maxConcurrentLimboResolutions = o, this.Ca = {}, this.va = new bi((c) => n_(c), xa), this.Fa = /* @__PURE__ */ new Map(), /**
    * The keys of documents that are in limbo for which we haven't yet started a
    * limbo resolution query. The strings in this set are the result of calling
    * `key.path.canonicalString()` where `key` is a `DocumentKey` object.
    *
    * The `Set` type was chosen because it provides efficient lookup and removal
    * of arbitrary elements and it also maintains insertion order, providing the
    * desired queue-like FIFO semantics.
    */
    this.Ma = /* @__PURE__ */ new Set(), /**
    * Keeps track of the target ID for each document that is in limbo with an
    * active target.
    */
    this.xa = new Me(se.comparator), /**
    * Keeps track of the information about an active limbo resolution for each
    * active target ID that was started for the purpose of limbo resolution.
    */
    this.Oa = /* @__PURE__ */ new Map(), this.Na = new Gl(), /** Stores user completion handlers, indexed by User and BatchId. */
    this.La = {}, /** Stores user callbacks waiting for all pending writes to be acknowledged. */
    this.Ba = /* @__PURE__ */ new Map(), this.ka = hi.Bn(), this.onlineState = "Unknown", // The primary state is set to `true` or `false` immediately after Firestore
    // startup. In the interim, a client should only be considered primary if
    // `isPrimary` is true.
    this.qa = void 0;
  }
  get isPrimaryClient() {
    return this.qa === !0;
  }
}
async function YO(t, e, n = !0) {
  const r = H_(t);
  let i;
  const s = r.va.get(e);
  return s ? (
    // PORTING NOTE: With Multi-Tab Web, it is possible that a query view
    // already exists when EventManager calls us for the first time. This
    // happens when the primary tab is already listening to this query on
    // behalf of another tab and the user of the primary also starts listening
    // to the query. EventManager will not have an assigned target ID in this
    // case and calls `listen` to obtain this ID.
    (r.sharedClientState.addLocalQueryTarget(s.targetId), i = s.view.ba())
  ) : i = await B_(
    r,
    e,
    n,
    /** shouldInitializeView= */
    !0
  ), i;
}
async function JO(t, e) {
  const n = H_(t);
  await B_(
    n,
    e,
    /** shouldListenToRemote= */
    !0,
    /** shouldInitializeView= */
    !1
  );
}
async function B_(t, e, n, r) {
  const i = await vO(t.localStore, sn(e)), s = i.targetId, o = n ? t.sharedClientState.addLocalQueryTarget(s) : "not-current";
  let c;
  return r && (c = await XO(t, e, s, o === "current", i.resumeToken)), t.isPrimaryClient && n && k_(t.remoteStore, i), c;
}
async function XO(t, e, n, r, i) {
  t.Qa = (h, _, b) => async function(C, m, y, E) {
    let p = m.view.Va(y);
    p.ts && // The query has a limit and some docs were removed, so we need
    // to re-run the query against the local store to make sure we
    // didn't lose any good docs that had been past the limit.
    (p = await Vp(
      C.localStore,
      m.query,
      /* usePreviousResults= */
      !1
    ).then(({ documents: R }) => m.view.Va(R, p)));
    const g = E && E.targetChanges.get(m.targetId), w = E && E.targetMismatches.get(m.targetId) != null, S = m.view.applyChanges(
      p,
      /* limboResolutionEnabled= */
      C.isPrimaryClient,
      g,
      w
    );
    return Kp(C, m.targetId, S.ya), S.snapshot;
  }(t, h, _, b);
  const s = await Vp(
    t.localStore,
    e,
    /* usePreviousResults= */
    !0
  ), o = new HO(e, s.Is), c = o.Va(s.documents), u = Vs.createSynthesizedTargetChangeForCurrentChange(n, r && t.onlineState !== "Offline", i), l = o.applyChanges(
    c,
    /* limboResolutionEnabled= */
    t.isPrimaryClient,
    u
  );
  Kp(t, n, l.ya);
  const f = new GO(e, n, o);
  return t.va.set(e, f), t.Fa.has(n) ? t.Fa.get(n).push(e) : t.Fa.set(n, [e]), l.snapshot;
}
async function ZO(t, e, n) {
  const r = fe(t), i = r.va.get(e), s = r.Fa.get(i.targetId);
  if (s.length > 1) return r.Fa.set(i.targetId, s.filter((o) => !xa(o, e))), void r.va.delete(e);
  r.isPrimaryClient ? (r.sharedClientState.removeLocalQueryTarget(i.targetId), r.sharedClientState.isActiveQueryTarget(i.targetId) || await $u(
    r.localStore,
    i.targetId,
    /*keepPersistedTargetData=*/
    !1
  ).then(() => {
    r.sharedClientState.clearQueryState(i.targetId), n && Yl(r.remoteStore, i.targetId), zu(r, i.targetId);
  }).catch(Ds)) : (zu(r, i.targetId), await $u(
    r.localStore,
    i.targetId,
    /*keepPersistedTargetData=*/
    !0
  ));
}
async function eN(t, e) {
  const n = fe(t), r = n.va.get(e), i = n.Fa.get(r.targetId);
  n.isPrimaryClient && i.length === 1 && // PORTING NOTE: Unregister the target ID with local Firestore client as
  // watch target.
  (n.sharedClientState.removeLocalQueryTarget(r.targetId), Yl(n.remoteStore, r.targetId));
}
async function tN(t, e, n) {
  const r = cN(t);
  try {
    const i = await function(o, c) {
      const u = fe(o), l = et.now(), f = c.reduce((b, I) => b.add(I.key), _e());
      let h, _;
      return u.persistence.runTransaction("Locally write mutations", "readwrite", (b) => {
        let I = An(), C = _e();
        return u.us.getEntries(b, f).next((m) => {
          I = m, I.forEach((y, E) => {
            E.isValidDocument() || (C = C.add(y));
          });
        }).next(() => u.localDocuments.getOverlayedDocuments(b, I)).next((m) => {
          h = m;
          const y = [];
          for (const E of c) {
            const p = Tk(E, h.get(E.key).overlayedDocument);
            p != null && // NOTE: The base state should only be applied if there's some
            // existing document to override, so use a Precondition of
            // exists=true
            y.push(new xr(E.key, p, Wy(p.value.mapValue), En.exists(!0)));
          }
          return u.mutationQueue.addMutationBatch(b, l, y, c);
        }).next((m) => {
          _ = m;
          const y = m.applyToLocalDocumentSet(h, C);
          return u.documentOverlayCache.saveOverlays(b, m.batchId, y);
        });
      }).then(() => ({
        batchId: _.batchId,
        changes: s_(h)
      }));
    }(r.localStore, e);
    r.sharedClientState.addPendingMutation(i.batchId), function(o, c, u) {
      let l = o.La[o.currentUser.toKey()];
      l || (l = new Me(be)), l = l.insert(c, u), o.La[o.currentUser.toKey()] = l;
    }(r, i.batchId, n), await Us(r, i.changes), await Ba(r.remoteStore);
  } catch (i) {
    const s = th(i, "Failed to persist write");
    n.reject(s);
  }
}
async function $_(t, e) {
  const n = fe(t);
  try {
    const r = await gO(n.localStore, e);
    e.targetChanges.forEach((i, s) => {
      const o = n.Oa.get(s);
      o && // Since this is a limbo resolution lookup, it's for a single document
      // and it could be added, modified, or removed, but not a combination.
      (Ne(i.addedDocuments.size + i.modifiedDocuments.size + i.removedDocuments.size <= 1), i.addedDocuments.size > 0 ? o.Da = !0 : i.modifiedDocuments.size > 0 ? Ne(o.Da) : i.removedDocuments.size > 0 && (Ne(o.Da), o.Da = !1));
    }), await Us(n, r, e);
  } catch (r) {
    await Ds(r);
  }
}
function zp(t, e, n) {
  const r = fe(t);
  if (r.isPrimaryClient && n === 0 || !r.isPrimaryClient && n === 1) {
    const i = [];
    r.va.forEach((s, o) => {
      const c = o.view.Y_(e);
      c.snapshot && i.push(c.snapshot);
    }), function(o, c) {
      const u = fe(o);
      u.onlineState = c;
      let l = !1;
      u.queries.forEach((f, h) => {
        for (const _ of h.z_)
          _.Y_(c) && (l = !0);
      }), l && nh(u);
    }(r.eventManager, e), i.length && r.Ca.E_(i), r.onlineState = e, r.isPrimaryClient && r.sharedClientState.setOnlineState(e);
  }
}
async function nN(t, e, n) {
  const r = fe(t);
  r.sharedClientState.updateQueryState(e, "rejected", n);
  const i = r.Oa.get(e), s = i && i.key;
  if (s) {
    let o = new Me(se.comparator);
    o = o.insert(s, _t.newNoDocument(s, he.min()));
    const c = _e().add(s), u = new Fa(
      he.min(),
      /* targetChanges= */
      /* @__PURE__ */ new Map(),
      /* targetMismatches= */
      new Me(be),
      o,
      c
    );
    await $_(r, u), // Since this query failed, we won't want to manually unlisten to it.
    // We only remove it from bookkeeping after we successfully applied the
    // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to
    // this query when the RemoteStore restarts the Watch stream, which should
    // re-trigger the target failure.
    r.xa = r.xa.remove(s), r.Oa.delete(e), rh(r);
  } else await $u(
    r.localStore,
    e,
    /* keepPersistedTargetData */
    !1
  ).then(() => zu(r, e, n)).catch(Ds);
}
async function rN(t, e) {
  const n = fe(t), r = e.batch.batchId;
  try {
    const i = await mO(n.localStore, e);
    z_(
      n,
      r,
      /*error=*/
      null
    ), q_(n, r), n.sharedClientState.updateMutationState(r, "acknowledged"), await Us(n, i);
  } catch (i) {
    await Ds(i);
  }
}
async function iN(t, e, n) {
  const r = fe(t);
  try {
    const i = await function(o, c) {
      const u = fe(o);
      return u.persistence.runTransaction("Reject batch", "readwrite-primary", (l) => {
        let f;
        return u.mutationQueue.lookupMutationBatch(l, c).next((h) => (Ne(h !== null), f = h.keys(), u.mutationQueue.removeMutationBatch(l, h))).next(() => u.mutationQueue.performConsistencyCheck(l)).next(() => u.documentOverlayCache.removeOverlaysForBatchId(l, f, c)).next(() => u.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(l, f)).next(() => u.localDocuments.getDocuments(l, f));
      });
    }(r.localStore, e);
    z_(r, e, n), q_(r, e), r.sharedClientState.updateMutationState(e, "rejected", n), await Us(r, i);
  } catch (i) {
    await Ds(i);
  }
}
function q_(t, e) {
  (t.Ba.get(e) || []).forEach((n) => {
    n.resolve();
  }), t.Ba.delete(e);
}
function z_(t, e, n) {
  const r = fe(t);
  let i = r.La[r.currentUser.toKey()];
  if (i) {
    const s = i.get(e);
    s && (n ? s.reject(n) : s.resolve(), i = i.remove(e)), r.La[r.currentUser.toKey()] = i;
  }
}
function zu(t, e, n = null) {
  t.sharedClientState.removeLocalQueryTarget(e);
  for (const r of t.Fa.get(e)) t.va.delete(r), n && t.Ca.Ka(r, n);
  t.Fa.delete(e), t.isPrimaryClient && t.Na.mr(e).forEach((r) => {
    t.Na.containsKey(r) || // We removed the last reference for this key
    K_(t, r);
  });
}
function K_(t, e) {
  t.Ma.delete(e.path.canonicalString());
  const n = t.xa.get(e);
  n !== null && (Yl(t.remoteStore, n), t.xa = t.xa.remove(e), t.Oa.delete(n), rh(t));
}
function Kp(t, e, n) {
  for (const r of n) r instanceof U_ ? (t.Na.addReference(r.key, e), sN(t, r)) : r instanceof j_ ? (ee("SyncEngine", "Document no longer in limbo: " + r.key), t.Na.removeReference(r.key, e), t.Na.containsKey(r.key) || // We removed the last reference for this key
  K_(t, r.key)) : ce();
}
function sN(t, e) {
  const n = e.key, r = n.path.canonicalString();
  t.xa.get(n) || t.Ma.has(r) || (ee("SyncEngine", "New document in limbo: " + n), t.Ma.add(r), rh(t));
}
function rh(t) {
  for (; t.Ma.size > 0 && t.xa.size < t.maxConcurrentLimboResolutions; ) {
    const e = t.Ma.values().next().value;
    t.Ma.delete(e);
    const n = new se(xe.fromString(e)), r = t.ka.next();
    t.Oa.set(r, new WO(n)), t.xa = t.xa.insert(n, r), k_(t.remoteStore, new Bn(sn(Da(n.path)), r, "TargetPurposeLimboResolution", Fl.oe));
  }
}
async function Us(t, e, n) {
  const r = fe(t), i = [], s = [], o = [];
  r.va.isEmpty() || (r.va.forEach((c, u) => {
    o.push(r.Qa(u, e, n).then((l) => {
      var f;
      if ((l || n) && r.isPrimaryClient) {
        const h = l ? !l.fromCache : (f = n == null ? void 0 : n.targetChanges.get(u.targetId)) === null || f === void 0 ? void 0 : f.current;
        r.sharedClientState.updateQueryState(u.targetId, h ? "current" : "not-current");
      }
      if (l) {
        i.push(l);
        const h = Ql.Ui(u.targetId, l);
        s.push(h);
      }
    }));
  }), await Promise.all(o), r.Ca.E_(i), await async function(u, l) {
    const f = fe(u);
    try {
      await f.persistence.runTransaction("notifyLocalViewChanges", "readwrite", (h) => z.forEach(l, (_) => z.forEach(_.Ki, (b) => f.persistence.referenceDelegate.addReference(h, _.targetId, b)).next(() => z.forEach(_.$i, (b) => f.persistence.referenceDelegate.removeReference(h, _.targetId, b)))));
    } catch (h) {
      if (!xs(h)) throw h;
      ee("LocalStore", "Failed to update sequence numbers: " + h);
    }
    for (const h of l) {
      const _ = h.targetId;
      if (!h.fromCache) {
        const b = f.ss.get(_), I = b.snapshotVersion, C = b.withLastLimboFreeSnapshotVersion(I);
        f.ss = f.ss.insert(_, C);
      }
    }
  }(r.localStore, s));
}
async function oN(t, e) {
  const n = fe(t);
  if (!n.currentUser.isEqual(e)) {
    ee("SyncEngine", "User change. New user:", e.toKey());
    const r = await A_(n.localStore, e);
    n.currentUser = e, // Fails tasks waiting for pending writes requested by previous user.
    function(s, o) {
      s.Ba.forEach((c) => {
        c.forEach((u) => {
          u.reject(new X($.CANCELLED, o));
        });
      }), s.Ba.clear();
    }(n, "'waitForPendingWrites' promise is rejected due to a user change."), // TODO(b/114226417): Consider calling this only in the primary tab.
    n.sharedClientState.handleUserChange(e, r.removedBatchIds, r.addedBatchIds), await Us(n, r.ls);
  }
}
function aN(t, e) {
  const n = fe(t), r = n.Oa.get(e);
  if (r && r.Da) return _e().add(r.key);
  {
    let i = _e();
    const s = n.Fa.get(e);
    if (!s) return i;
    for (const o of s) {
      const c = n.va.get(o);
      i = i.unionWith(c.view.Ra);
    }
    return i;
  }
}
function H_(t) {
  const e = fe(t);
  return e.remoteStore.remoteSyncer.applyRemoteEvent = $_.bind(null, e), e.remoteStore.remoteSyncer.getRemoteKeysForTarget = aN.bind(null, e), e.remoteStore.remoteSyncer.rejectListen = nN.bind(null, e), e.Ca.E_ = zO.bind(null, e.eventManager), e.Ca.Ka = KO.bind(null, e.eventManager), e;
}
function cN(t) {
  const e = fe(t);
  return e.remoteStore.remoteSyncer.applySuccessfulWrite = rN.bind(null, e), e.remoteStore.remoteSyncer.rejectFailedWrite = iN.bind(null, e), e;
}
class Hp {
  constructor() {
    this.synchronizeTabs = !1;
  }
  async initialize(e) {
    this.serializer = Ua(e.databaseInfo.databaseId), this.sharedClientState = this.createSharedClientState(e), this.persistence = this.createPersistence(e), await this.persistence.start(), this.localStore = this.createLocalStore(e), this.gcScheduler = this.createGarbageCollectionScheduler(e, this.localStore), this.indexBackfillerScheduler = this.createIndexBackfillerScheduler(e, this.localStore);
  }
  createGarbageCollectionScheduler(e, n) {
    return null;
  }
  createIndexBackfillerScheduler(e, n) {
    return null;
  }
  createLocalStore(e) {
    return pO(this.persistence, new fO(), e.initialUser, this.serializer);
  }
  createPersistence(e) {
    return new uO(Wl.Yr, this.serializer);
  }
  createSharedClientState(e) {
    return new EO();
  }
  async terminate() {
    var e, n;
    (e = this.gcScheduler) === null || e === void 0 || e.stop(), (n = this.indexBackfillerScheduler) === null || n === void 0 || n.stop(), this.sharedClientState.shutdown(), await this.persistence.shutdown();
  }
}
class uN {
  async initialize(e, n) {
    this.localStore || (this.localStore = e.localStore, this.sharedClientState = e.sharedClientState, this.datastore = this.createDatastore(n), this.remoteStore = this.createRemoteStore(n), this.eventManager = this.createEventManager(n), this.syncEngine = this.createSyncEngine(
      n,
      /* startAsPrimary=*/
      !e.synchronizeTabs
    ), this.sharedClientState.onlineStateHandler = (r) => zp(
      this.syncEngine,
      r,
      1
      /* OnlineStateSource.SharedClientState */
    ), this.remoteStore.remoteSyncer.handleCredentialChange = oN.bind(null, this.syncEngine), await BO(this.remoteStore, this.syncEngine.isPrimaryClient));
  }
  createEventManager(e) {
    return function() {
      return new qO();
    }();
  }
  createDatastore(e) {
    const n = Ua(e.databaseInfo.databaseId), r = function(s) {
      return new SO(s);
    }(e.databaseInfo);
    return function(s, o, c, u) {
      return new CO(s, o, c, u);
    }(e.authCredentials, e.appCheckCredentials, r, n);
  }
  createRemoteStore(e) {
    return function(r, i, s, o, c) {
      return new kO(r, i, s, o, c);
    }(this.localStore, this.datastore, e.asyncQueue, (n) => zp(
      this.syncEngine,
      n,
      0
      /* OnlineStateSource.RemoteStore */
    ), function() {
      return Up.D() ? new Up() : new bO();
    }());
  }
  createSyncEngine(e, n) {
    return function(i, s, o, c, u, l, f) {
      const h = new QO(i, s, o, c, u, l);
      return f && (h.qa = !0), h;
    }(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, e.initialUser, e.maxConcurrentLimboResolutions, n);
  }
  async terminate() {
    var e, n;
    await async function(i) {
      const s = fe(i);
      ee("RemoteStore", "RemoteStore shutting down."), s.N_.add(
        5
        /* OfflineCause.Shutdown */
      ), await Fs(s), s.B_.shutdown(), // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
      // triggering spurious listener events with cached data, etc.
      s.k_.set(
        "Unknown"
        /* OnlineState.Unknown */
      );
    }(this.remoteStore), (e = this.datastore) === null || e === void 0 || e.terminate(), (n = this.eventManager) === null || n === void 0 || n.terminate();
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class G_ {
  constructor(e) {
    this.observer = e, /**
    * When set to true, will not raise future events. Necessary to deal with
    * async detachment of listener.
    */
    this.muted = !1;
  }
  next(e) {
    this.observer.next && this.Wa(this.observer.next, e);
  }
  error(e) {
    this.observer.error ? this.Wa(this.observer.error, e) : Sn("Uncaught Error in snapshot listener:", e.toString());
  }
  Ga() {
    this.muted = !0;
  }
  Wa(e, n) {
    this.muted || setTimeout(() => {
      this.muted || e(n);
    }, 0);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class lN {
  constructor(e, n, r, i) {
    this.authCredentials = e, this.appCheckCredentials = n, this.asyncQueue = r, this.databaseInfo = i, this.user = yt.UNAUTHENTICATED, this.clientId = Ky.newId(), this.authCredentialListener = () => Promise.resolve(), this.appCheckCredentialListener = () => Promise.resolve(), this.authCredentials.start(r, async (s) => {
      ee("FirestoreClient", "Received user=", s.uid), await this.authCredentialListener(s), this.user = s;
    }), this.appCheckCredentials.start(r, (s) => (ee("FirestoreClient", "Received new app check token=", s), this.appCheckCredentialListener(s, this.user)));
  }
  get configuration() {
    return {
      asyncQueue: this.asyncQueue,
      databaseInfo: this.databaseInfo,
      clientId: this.clientId,
      authCredentials: this.authCredentials,
      appCheckCredentials: this.appCheckCredentials,
      initialUser: this.user,
      maxConcurrentLimboResolutions: 100
    };
  }
  setCredentialChangeListener(e) {
    this.authCredentialListener = e;
  }
  setAppCheckTokenChangeListener(e) {
    this.appCheckCredentialListener = e;
  }
  /**
   * Checks that the client has not been terminated. Ensures that other methods on //
   * this class cannot be called after the client is terminated. //
   */
  verifyNotTerminated() {
    if (this.asyncQueue.isShuttingDown) throw new X($.FAILED_PRECONDITION, "The client has already been terminated.");
  }
  terminate() {
    this.asyncQueue.enterRestrictedMode();
    const e = new zn();
    return this.asyncQueue.enqueueAndForgetEvenWhileRestricted(async () => {
      try {
        this._onlineComponents && await this._onlineComponents.terminate(), this._offlineComponents && await this._offlineComponents.terminate(), // The credentials provider must be terminated after shutting down the
        // RemoteStore as it will prevent the RemoteStore from retrieving auth
        // tokens.
        this.authCredentials.shutdown(), this.appCheckCredentials.shutdown(), e.resolve();
      } catch (n) {
        const r = th(n, "Failed to shutdown persistence");
        e.reject(r);
      }
    }), e.promise;
  }
}
async function jc(t, e) {
  t.asyncQueue.verifyOperationInProgress(), ee("FirestoreClient", "Initializing OfflineComponentProvider");
  const n = t.configuration;
  await e.initialize(n);
  let r = n.initialUser;
  t.setCredentialChangeListener(async (i) => {
    r.isEqual(i) || (await A_(e.localStore, i), r = i);
  }), // When a user calls clearPersistence() in one client, all other clients
  // need to be terminated to allow the delete to succeed.
  e.persistence.setDatabaseDeletedListener(() => t.terminate()), t._offlineComponents = e;
}
async function Gp(t, e) {
  t.asyncQueue.verifyOperationInProgress();
  const n = await fN(t);
  ee("FirestoreClient", "Initializing OnlineComponentProvider"), await e.initialize(n, t.configuration), // The CredentialChangeListener of the online component provider takes
  // precedence over the offline component provider.
  t.setCredentialChangeListener((r) => jp(e.remoteStore, r)), t.setAppCheckTokenChangeListener((r, i) => jp(e.remoteStore, i)), t._onlineComponents = e;
}
function hN(t) {
  return t.name === "FirebaseError" ? t.code === $.FAILED_PRECONDITION || t.code === $.UNIMPLEMENTED : !(typeof DOMException < "u" && t instanceof DOMException) || // When the browser is out of quota we could get either quota exceeded
  // or an aborted error depending on whether the error happened during
  // schema migration.
  t.code === 22 || t.code === 20 || // Firefox Private Browsing mode disables IndexedDb and returns
  // INVALID_STATE for any usage.
  t.code === 11;
}
async function fN(t) {
  if (!t._offlineComponents) if (t._uninitializedComponentsProvider) {
    ee("FirestoreClient", "Using user provided OfflineComponentProvider");
    try {
      await jc(t, t._uninitializedComponentsProvider._offline);
    } catch (e) {
      const n = e;
      if (!hN(n)) throw n;
      ai("Error using user provided cache. Falling back to memory cache: " + n), await jc(t, new Hp());
    }
  } else ee("FirestoreClient", "Using default OfflineComponentProvider"), await jc(t, new Hp());
  return t._offlineComponents;
}
async function W_(t) {
  return t._onlineComponents || (t._uninitializedComponentsProvider ? (ee("FirestoreClient", "Using user provided OnlineComponentProvider"), await Gp(t, t._uninitializedComponentsProvider._online)) : (ee("FirestoreClient", "Using default OnlineComponentProvider"), await Gp(t, new uN()))), t._onlineComponents;
}
function dN(t) {
  return W_(t).then((e) => e.syncEngine);
}
async function Ku(t) {
  const e = await W_(t), n = e.eventManager;
  return n.onListen = YO.bind(null, e.syncEngine), n.onUnlisten = ZO.bind(null, e.syncEngine), n.onFirstRemoteStoreListen = JO.bind(null, e.syncEngine), n.onLastRemoteStoreUnlisten = eN.bind(null, e.syncEngine), n;
}
function pN(t, e, n = {}) {
  const r = new zn();
  return t.asyncQueue.enqueueAndForget(async () => function(s, o, c, u, l) {
    const f = new G_({
      next: (_) => {
        o.enqueueAndForget(() => V_(s, h));
        const b = _.docs.has(c);
        !b && _.fromCache ? (
          // TODO(dimond): If we're online and the document doesn't
          // exist then we resolve with a doc.exists set to false. If
          // we're offline however, we reject the Promise in this
          // case. Two options: 1) Cache the negative response from
          // the server so we can deliver that even when you're
          // offline 2) Actually reject the Promise in the online case
          // if the document doesn't exist.
          l.reject(new X($.UNAVAILABLE, "Failed to get document because the client is offline."))
        ) : b && _.fromCache && u && u.source === "server" ? l.reject(new X($.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')) : l.resolve(_);
      },
      error: (_) => l.reject(_)
    }), h = new F_(Da(c.path), f, {
      includeMetadataChanges: !0,
      oa: !0
    });
    return M_(s, h);
  }(await Ku(t), t.asyncQueue, e, n, r)), r.promise;
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Q_(t) {
  const e = {};
  return t.timeoutSeconds !== void 0 && (e.timeoutSeconds = t.timeoutSeconds), e;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Wp = /* @__PURE__ */ new Map();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Y_(t, e, n) {
  if (!n) throw new X($.INVALID_ARGUMENT, `Function ${t}() cannot be called with an empty ${e}.`);
}
function mN(t, e, n, r) {
  if (e === !0 && r === !0) throw new X($.INVALID_ARGUMENT, `${t} and ${n} cannot be used together.`);
}
function Qp(t) {
  if (!se.isDocumentKey(t)) throw new X($.INVALID_ARGUMENT, `Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`);
}
function Yp(t) {
  if (se.isDocumentKey(t)) throw new X($.INVALID_ARGUMENT, `Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`);
}
function $a(t) {
  if (t === void 0) return "undefined";
  if (t === null) return "null";
  if (typeof t == "string") return t.length > 20 && (t = `${t.substring(0, 20)}...`), JSON.stringify(t);
  if (typeof t == "number" || typeof t == "boolean") return "" + t;
  if (typeof t == "object") {
    if (t instanceof Array) return "an array";
    {
      const e = (
        /** try to get the constructor name for an object. */
        function(r) {
          return r.constructor ? r.constructor.name : null;
        }(t)
      );
      return e ? `a custom ${e} object` : "an object";
    }
  }
  return typeof t == "function" ? "a function" : ce();
}
function Kn(t, e) {
  if ("_delegate" in t && // Unwrap Compat types
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  (t = t._delegate), !(t instanceof e)) {
    if (e.name === t.constructor.name) throw new X($.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
    {
      const n = $a(t);
      throw new X($.INVALID_ARGUMENT, `Expected type '${e.name}', but it was: ${n}`);
    }
  }
  return t;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Jp {
  constructor(e) {
    var n, r;
    if (e.host === void 0) {
      if (e.ssl !== void 0) throw new X($.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
      this.host = "firestore.googleapis.com", this.ssl = !0;
    } else this.host = e.host, this.ssl = (n = e.ssl) === null || n === void 0 || n;
    if (this.credentials = e.credentials, this.ignoreUndefinedProperties = !!e.ignoreUndefinedProperties, this.localCache = e.localCache, e.cacheSizeBytes === void 0) this.cacheSizeBytes = 41943040;
    else {
      if (e.cacheSizeBytes !== -1 && e.cacheSizeBytes < 1048576) throw new X($.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
      this.cacheSizeBytes = e.cacheSizeBytes;
    }
    mN("experimentalForceLongPolling", e.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", e.experimentalAutoDetectLongPolling), this.experimentalForceLongPolling = !!e.experimentalForceLongPolling, this.experimentalForceLongPolling ? this.experimentalAutoDetectLongPolling = !1 : e.experimentalAutoDetectLongPolling === void 0 ? this.experimentalAutoDetectLongPolling = !0 : (
      // For backwards compatibility, coerce the value to boolean even though
      // the TypeScript compiler has narrowed the type to boolean already.
      // noinspection PointlessBooleanExpressionJS
      this.experimentalAutoDetectLongPolling = !!e.experimentalAutoDetectLongPolling
    ), this.experimentalLongPollingOptions = Q_((r = e.experimentalLongPollingOptions) !== null && r !== void 0 ? r : {}), function(s) {
      if (s.timeoutSeconds !== void 0) {
        if (isNaN(s.timeoutSeconds)) throw new X($.INVALID_ARGUMENT, `invalid long polling timeout: ${s.timeoutSeconds} (must not be NaN)`);
        if (s.timeoutSeconds < 5) throw new X($.INVALID_ARGUMENT, `invalid long polling timeout: ${s.timeoutSeconds} (minimum allowed value is 5)`);
        if (s.timeoutSeconds > 30) throw new X($.INVALID_ARGUMENT, `invalid long polling timeout: ${s.timeoutSeconds} (maximum allowed value is 30)`);
      }
    }(this.experimentalLongPollingOptions), this.useFetchStreams = !!e.useFetchStreams;
  }
  isEqual(e) {
    return this.host === e.host && this.ssl === e.ssl && this.credentials === e.credentials && this.cacheSizeBytes === e.cacheSizeBytes && this.experimentalForceLongPolling === e.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === e.experimentalAutoDetectLongPolling && function(r, i) {
      return r.timeoutSeconds === i.timeoutSeconds;
    }(this.experimentalLongPollingOptions, e.experimentalLongPollingOptions) && this.ignoreUndefinedProperties === e.ignoreUndefinedProperties && this.useFetchStreams === e.useFetchStreams;
  }
}
class qa {
  /** @hideconstructor */
  constructor(e, n, r, i) {
    this._authCredentials = e, this._appCheckCredentials = n, this._databaseId = r, this._app = i, /**
    * Whether it's a Firestore or Firestore Lite instance.
    */
    this.type = "firestore-lite", this._persistenceKey = "(lite)", this._settings = new Jp({}), this._settingsFrozen = !1;
  }
  /**
   * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service
   * instance.
   */
  get app() {
    if (!this._app) throw new X($.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
    return this._app;
  }
  get _initialized() {
    return this._settingsFrozen;
  }
  get _terminated() {
    return this._terminateTask !== void 0;
  }
  _setSettings(e) {
    if (this._settingsFrozen) throw new X($.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
    this._settings = new Jp(e), e.credentials !== void 0 && (this._authCredentials = function(r) {
      if (!r) return new DP();
      switch (r.type) {
        case "firstParty":
          return new VP(r.sessionIndex || "0", r.iamToken || null, r.authTokenFactory || null);
        case "provider":
          return r.client;
        default:
          throw new X($.INVALID_ARGUMENT, "makeAuthCredentialsProvider failed due to invalid credential type");
      }
    }(e.credentials));
  }
  _getSettings() {
    return this._settings;
  }
  _freezeSettings() {
    return this._settingsFrozen = !0, this._settings;
  }
  _delete() {
    return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;
  }
  /** Returns a JSON-serializable representation of this `Firestore` instance. */
  toJSON() {
    return {
      app: this._app,
      databaseId: this._databaseId,
      settings: this._settings
    };
  }
  /**
   * Terminates all components used by this client. Subclasses can override
   * this method to clean up their own dependencies, but must also call this
   * method.
   *
   * Only ever called once.
   */
  _terminate() {
    return function(n) {
      const r = Wp.get(n);
      r && (ee("ComponentProvider", "Removing Datastore"), Wp.delete(n), r.terminate());
    }(this), Promise.resolve();
  }
}
function gN(t, e, n, r = {}) {
  var i;
  const s = (t = Kn(t, qa))._getSettings(), o = `${e}:${n}`;
  if (s.host !== "firestore.googleapis.com" && s.host !== o && ai("Host has been set in both settings() and connectFirestoreEmulator(), emulator host will be used."), t._setSettings(Object.assign(Object.assign({}, s), {
    host: o,
    ssl: !1
  })), r.mockUserToken) {
    let c, u;
    if (typeof r.mockUserToken == "string") c = r.mockUserToken, u = yt.MOCK_USER;
    else {
      c = Zg(r.mockUserToken, (i = t._app) === null || i === void 0 ? void 0 : i.options.projectId);
      const l = r.mockUserToken.sub || r.mockUserToken.user_id;
      if (!l) throw new X($.INVALID_ARGUMENT, "mockUserToken must contain 'sub' or 'user_id' field!");
      u = new yt(l);
    }
    t._authCredentials = new xP(new zy(c, u));
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Ii {
  // This is the lite version of the Query class in the main SDK.
  /** @hideconstructor protected */
  constructor(e, n, r) {
    this.converter = n, this._query = r, /** The type of this Firestore reference. */
    this.type = "query", this.firestore = e;
  }
  withConverter(e) {
    return new Ii(this.firestore, e, this._query);
  }
}
class At {
  /** @hideconstructor */
  constructor(e, n, r) {
    this.converter = n, this._key = r, /** The type of this Firestore reference. */
    this.type = "document", this.firestore = e;
  }
  get _path() {
    return this._key.path;
  }
  /**
   * The document's identifier within its collection.
   */
  get id() {
    return this._key.path.lastSegment();
  }
  /**
   * A string representing the path of the referenced document (relative
   * to the root of the database).
   */
  get path() {
    return this._key.path.canonicalString();
  }
  /**
   * The collection this `DocumentReference` belongs to.
   */
  get parent() {
    return new Hn(this.firestore, this.converter, this._key.path.popLast());
  }
  withConverter(e) {
    return new At(this.firestore, e, this._key);
  }
}
class Hn extends Ii {
  /** @hideconstructor */
  constructor(e, n, r) {
    super(e, n, Da(r)), this._path = r, /** The type of this Firestore reference. */
    this.type = "collection";
  }
  /** The collection's identifier. */
  get id() {
    return this._query.path.lastSegment();
  }
  /**
   * A string representing the path of the referenced collection (relative
   * to the root of the database).
   */
  get path() {
    return this._query.path.canonicalString();
  }
  /**
   * A reference to the containing `DocumentReference` if this is a
   * subcollection. If this isn't a subcollection, the reference is null.
   */
  get parent() {
    const e = this._path.popLast();
    return e.isEmpty() ? null : new At(
      this.firestore,
      /* converter= */
      null,
      new se(e)
    );
  }
  withConverter(e) {
    return new Hn(this.firestore, e, this._path);
  }
}
function Hu(t, e, ...n) {
  if (t = Ue(t), Y_("collection", "path", e), t instanceof qa) {
    const r = xe.fromString(e, ...n);
    return Yp(r), new Hn(
      t,
      /* converter= */
      null,
      r
    );
  }
  {
    if (!(t instanceof At || t instanceof Hn)) throw new X($.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
    const r = t._path.child(xe.fromString(e, ...n));
    return Yp(r), new Hn(
      t.firestore,
      /* converter= */
      null,
      r
    );
  }
}
function ca(t, e, ...n) {
  if (t = Ue(t), // We allow omission of 'pathString' but explicitly prohibit passing in both
  // 'undefined' and 'null'.
  arguments.length === 1 && (e = Ky.newId()), Y_("doc", "path", e), t instanceof qa) {
    const r = xe.fromString(e, ...n);
    return Qp(r), new At(
      t,
      /* converter= */
      null,
      new se(r)
    );
  }
  {
    if (!(t instanceof At || t instanceof Hn)) throw new X($.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
    const r = t._path.child(xe.fromString(e, ...n));
    return Qp(r), new At(t.firestore, t instanceof Hn ? t.converter : null, new se(r));
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class yN {
  constructor() {
    this._u = Promise.resolve(), // A list of retryable operations. Retryable operations are run in order and
    // retried with backoff.
    this.au = [], // Is this AsyncQueue being shut down? Once it is set to true, it will not
    // be changed again.
    this.uu = !1, // Operations scheduled to be queued in the future. Operations are
    // automatically removed after they are run or canceled.
    this.cu = [], // visible for testing
    this.lu = null, // Flag set while there's an outstanding AsyncQueue operation, used for
    // assertion sanity-checks.
    this.hu = !1, // Enabled during shutdown on Safari to prevent future access to IndexedDB.
    this.Pu = !1, // List of TimerIds to fast-forward delays for.
    this.Iu = [], // Backoff timer used to schedule retries for retryable operations
    this.e_ = new C_(
      this,
      "async_queue_retry"
      /* TimerId.AsyncQueueRetry */
    ), // Visibility handler that triggers an immediate retry of all retryable
    // operations. Meant to speed up recovery when we regain file system access
    // after page comes into foreground.
    this.Tu = () => {
      const n = Uc();
      n && ee("AsyncQueue", "Visibility state changed to " + n.visibilityState), this.e_.zo();
    };
    const e = Uc();
    e && typeof e.addEventListener == "function" && e.addEventListener("visibilitychange", this.Tu);
  }
  get isShuttingDown() {
    return this.uu;
  }
  /**
   * Adds a new operation to the queue without waiting for it to complete (i.e.
   * we ignore the Promise result).
   */
  enqueueAndForget(e) {
    this.enqueue(e);
  }
  enqueueAndForgetEvenWhileRestricted(e) {
    this.Eu(), // eslint-disable-next-line @typescript-eslint/no-floating-promises
    this.du(e);
  }
  enterRestrictedMode(e) {
    if (!this.uu) {
      this.uu = !0, this.Pu = e || !1;
      const n = Uc();
      n && typeof n.removeEventListener == "function" && n.removeEventListener("visibilitychange", this.Tu);
    }
  }
  enqueue(e) {
    if (this.Eu(), this.uu)
      return new Promise(() => {
      });
    const n = new zn();
    return this.du(() => this.uu && this.Pu ? Promise.resolve() : (e().then(n.resolve, n.reject), n.promise)).then(() => n.promise);
  }
  enqueueRetryable(e) {
    this.enqueueAndForget(() => (this.au.push(e), this.Au()));
  }
  /**
   * Runs the next operation from the retryable queue. If the operation fails,
   * reschedules with backoff.
   */
  async Au() {
    if (this.au.length !== 0) {
      try {
        await this.au[0](), this.au.shift(), this.e_.reset();
      } catch (e) {
        if (!xs(e)) throw e;
        ee("AsyncQueue", "Operation failed with retryable error: " + e);
      }
      this.au.length > 0 && // If there are additional operations, we re-schedule `retryNextOp()`.
      // This is necessary to run retryable operations that failed during
      // their initial attempt since we don't know whether they are already
      // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
      // needs to  be re-run, we will run `op1`, `op1`, `op2` using the
      // already enqueued calls to `retryNextOp()`. `op3()` will then run in the
      // call scheduled here.
      // Since `backoffAndRun()` cancels an existing backoff and schedules a
      // new backoff on every call, there is only ever a single additional
      // operation in the queue.
      this.e_.Wo(() => this.Au());
    }
  }
  du(e) {
    const n = this._u.then(() => (this.hu = !0, e().catch((r) => {
      this.lu = r, this.hu = !1;
      const i = (
        /**
        * Chrome includes Error.message in Error.stack. Other browsers do not.
        * This returns expected output of message + stack when available.
        * @param error - Error or FirestoreError
        */
        function(o) {
          let c = o.message || "";
          return o.stack && (c = o.stack.includes(o.message) ? o.stack : o.message + `
` + o.stack), c;
        }(r)
      );
      throw Sn("INTERNAL UNHANDLED ERROR: ", i), r;
    }).then((r) => (this.hu = !1, r))));
    return this._u = n, n;
  }
  enqueueAfterDelay(e, n, r) {
    this.Eu(), // Fast-forward delays for timerIds that have been overridden.
    this.Iu.indexOf(e) > -1 && (n = 0);
    const i = eh.createAndSchedule(this, e, n, r, (s) => this.Ru(s));
    return this.cu.push(i), i;
  }
  Eu() {
    this.lu && ce();
  }
  verifyOperationInProgress() {
  }
  /**
   * Waits until all currently queued tasks are finished executing. Delayed
   * operations are not run.
   */
  async Vu() {
    let e;
    do
      e = this._u, await e;
    while (e !== this._u);
  }
  /**
   * For Tests: Determine if a delayed operation with a particular TimerId
   * exists.
   */
  mu(e) {
    for (const n of this.cu) if (n.timerId === e) return !0;
    return !1;
  }
  /**
   * For Tests: Runs some or all delayed operations early.
   *
   * @param lastTimerId - Delayed operations up to and including this TimerId
   * will be drained. Pass TimerId.All to run all delayed operations.
   * @returns a Promise that resolves once all operations have been run.
   */
  fu(e) {
    return this.Vu().then(() => {
      this.cu.sort((n, r) => n.targetTimeMs - r.targetTimeMs);
      for (const n of this.cu) if (n.skipDelay(), e !== "all" && n.timerId === e) break;
      return this.Vu();
    });
  }
  /**
   * For Tests: Skip all subsequent delays for a timer id.
   */
  gu(e) {
    this.Iu.push(e);
  }
  /** Called once a DelayedOperation is run or canceled. */
  Ru(e) {
    const n = this.cu.indexOf(e);
    this.cu.splice(n, 1);
  }
}
function Xp(t) {
  return function(n, r) {
    if (typeof n != "object" || n === null) return !1;
    const i = n;
    for (const s of r) if (s in i && typeof i[s] == "function") return !0;
    return !1;
  }(t, ["next", "error", "complete"]);
}
class ws extends qa {
  /** @hideconstructor */
  constructor(e, n, r, i) {
    super(e, n, r, i), /**
    * Whether it's a {@link Firestore} or Firestore Lite instance.
    */
    this.type = "firestore", this._queue = function() {
      return new yN();
    }(), this._persistenceKey = (i == null ? void 0 : i.name) || "[DEFAULT]";
  }
  _terminate() {
    return this._firestoreClient || // The client must be initialized to ensure that all subsequent API
    // usage throws an exception.
    J_(this), this._firestoreClient.terminate();
  }
}
function _N(t, e) {
  const n = typeof t == "object" ? t : Tl(), r = typeof t == "string" ? t : "(default)", i = Ca(n, "firestore").getImmediate({
    identifier: r
  });
  if (!i._initialized) {
    const s = Yg("firestore");
    s && gN(i, ...s);
  }
  return i;
}
function ih(t) {
  return t._firestoreClient || J_(t), t._firestoreClient.verifyNotTerminated(), t._firestoreClient;
}
function J_(t) {
  var e, n, r;
  const i = t._freezeSettings(), s = function(c, u, l, f) {
    return new YP(c, u, l, f.host, f.ssl, f.experimentalForceLongPolling, f.experimentalAutoDetectLongPolling, Q_(f.experimentalLongPollingOptions), f.useFetchStreams);
  }(t._databaseId, ((e = t._app) === null || e === void 0 ? void 0 : e.options.appId) || "", t._persistenceKey, i);
  t._firestoreClient = new lN(t._authCredentials, t._appCheckCredentials, t._queue, s), !((n = i.localCache) === null || n === void 0) && n._offlineComponentProvider && (!((r = i.localCache) === null || r === void 0) && r._onlineComponentProvider) && (t._firestoreClient._uninitializedComponentsProvider = {
    _offlineKind: i.localCache.kind,
    _offline: i.localCache._offlineComponentProvider,
    _online: i.localCache._onlineComponentProvider
  });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class di {
  /** @hideconstructor */
  constructor(e) {
    this._byteString = e;
  }
  /**
   * Creates a new `Bytes` object from the given Base64 string, converting it to
   * bytes.
   *
   * @param base64 - The Base64 string used to create the `Bytes` object.
   */
  static fromBase64String(e) {
    try {
      return new di(ht.fromBase64String(e));
    } catch (n) {
      throw new X($.INVALID_ARGUMENT, "Failed to construct data from Base64 string: " + n);
    }
  }
  /**
   * Creates a new `Bytes` object from the given Uint8Array.
   *
   * @param array - The Uint8Array used to create the `Bytes` object.
   */
  static fromUint8Array(e) {
    return new di(ht.fromUint8Array(e));
  }
  /**
   * Returns the underlying bytes as a Base64-encoded string.
   *
   * @returns The Base64-encoded string created from the `Bytes` object.
   */
  toBase64() {
    return this._byteString.toBase64();
  }
  /**
   * Returns the underlying bytes in a new `Uint8Array`.
   *
   * @returns The Uint8Array created from the `Bytes` object.
   */
  toUint8Array() {
    return this._byteString.toUint8Array();
  }
  /**
   * Returns a string representation of the `Bytes` object.
   *
   * @returns A string representation of the `Bytes` object.
   */
  toString() {
    return "Bytes(base64: " + this.toBase64() + ")";
  }
  /**
   * Returns true if this `Bytes` object is equal to the provided one.
   *
   * @param other - The `Bytes` object to compare against.
   * @returns true if this `Bytes` object is equal to the provided one.
   */
  isEqual(e) {
    return this._byteString.isEqual(e._byteString);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class sh {
  /**
   * Creates a `FieldPath` from the provided field names. If more than one field
   * name is provided, the path will point to a nested field in a document.
   *
   * @param fieldNames - A list of field names.
   */
  constructor(...e) {
    for (let n = 0; n < e.length; ++n) if (e[n].length === 0) throw new X($.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
    this._internalPath = new ct(e);
  }
  /**
   * Returns true if this `FieldPath` is equal to the provided one.
   *
   * @param other - The `FieldPath` to compare against.
   * @returns true if this `FieldPath` is equal to the provided one.
   */
  isEqual(e) {
    return this._internalPath.isEqual(e._internalPath);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class X_ {
  /**
   * @param _methodName - The public API endpoint that returns this class.
   * @hideconstructor
   */
  constructor(e) {
    this._methodName = e;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class oh {
  /**
   * Creates a new immutable `GeoPoint` object with the provided latitude and
   * longitude values.
   * @param latitude - The latitude as number between -90 and 90.
   * @param longitude - The longitude as number between -180 and 180.
   */
  constructor(e, n) {
    if (!isFinite(e) || e < -90 || e > 90) throw new X($.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + e);
    if (!isFinite(n) || n < -180 || n > 180) throw new X($.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + n);
    this._lat = e, this._long = n;
  }
  /**
   * The latitude of this `GeoPoint` instance.
   */
  get latitude() {
    return this._lat;
  }
  /**
   * The longitude of this `GeoPoint` instance.
   */
  get longitude() {
    return this._long;
  }
  /**
   * Returns true if this `GeoPoint` is equal to the provided one.
   *
   * @param other - The `GeoPoint` to compare against.
   * @returns true if this `GeoPoint` is equal to the provided one.
   */
  isEqual(e) {
    return this._lat === e._lat && this._long === e._long;
  }
  /** Returns a JSON-serializable representation of this GeoPoint. */
  toJSON() {
    return {
      latitude: this._lat,
      longitude: this._long
    };
  }
  /**
   * Actually private to JS consumers of our API, so this function is prefixed
   * with an underscore.
   */
  _compareTo(e) {
    return be(this._lat, e._lat) || be(this._long, e._long);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const vN = /^__.*__$/;
class wN {
  constructor(e, n, r) {
    this.data = e, this.fieldMask = n, this.fieldTransforms = r;
  }
  toMutation(e, n) {
    return this.fieldMask !== null ? new xr(e, this.data, this.fieldMask, n, this.fieldTransforms) : new Ms(e, this.data, n, this.fieldTransforms);
  }
}
function Z_(t) {
  switch (t) {
    case 0:
    case 2:
    case 1:
      return !0;
    case 3:
    case 4:
      return !1;
    default:
      throw ce();
  }
}
class ah {
  /**
   * Initializes a ParseContext with the given source and path.
   *
   * @param settings - The settings for the parser.
   * @param databaseId - The database ID of the Firestore instance.
   * @param serializer - The serializer to use to generate the Value proto.
   * @param ignoreUndefinedProperties - Whether to ignore undefined properties
   * rather than throw.
   * @param fieldTransforms - A mutable list of field transforms encountered
   * while parsing the data.
   * @param fieldMask - A mutable list of field paths encountered while parsing
   * the data.
   *
   * TODO(b/34871131): We don't support array paths right now, so path can be
   * null to indicate the context represents any location within an array (in
   * which case certain features will not work and errors will be somewhat
   * compromised).
   */
  constructor(e, n, r, i, s, o) {
    this.settings = e, this.databaseId = n, this.serializer = r, this.ignoreUndefinedProperties = i, // Minor hack: If fieldTransforms is undefined, we assume this is an
    // external call and we need to validate the entire path.
    s === void 0 && this.pu(), this.fieldTransforms = s || [], this.fieldMask = o || [];
  }
  get path() {
    return this.settings.path;
  }
  get yu() {
    return this.settings.yu;
  }
  /** Returns a new context with the specified settings overwritten. */
  wu(e) {
    return new ah(Object.assign(Object.assign({}, this.settings), e), this.databaseId, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);
  }
  Su(e) {
    var n;
    const r = (n = this.path) === null || n === void 0 ? void 0 : n.child(e), i = this.wu({
      path: r,
      bu: !1
    });
    return i.Du(e), i;
  }
  Cu(e) {
    var n;
    const r = (n = this.path) === null || n === void 0 ? void 0 : n.child(e), i = this.wu({
      path: r,
      bu: !1
    });
    return i.pu(), i;
  }
  vu(e) {
    return this.wu({
      path: void 0,
      bu: !0
    });
  }
  Fu(e) {
    return ua(e, this.settings.methodName, this.settings.Mu || !1, this.path, this.settings.xu);
  }
  /** Returns 'true' if 'fieldPath' was traversed when creating this context. */
  contains(e) {
    return this.fieldMask.find((n) => e.isPrefixOf(n)) !== void 0 || this.fieldTransforms.find((n) => e.isPrefixOf(n.field)) !== void 0;
  }
  pu() {
    if (this.path) for (let e = 0; e < this.path.length; e++) this.Du(this.path.get(e));
  }
  Du(e) {
    if (e.length === 0) throw this.Fu("Document fields must not be empty");
    if (Z_(this.yu) && vN.test(e)) throw this.Fu('Document fields cannot begin and end with "__"');
  }
}
class EN {
  constructor(e, n, r) {
    this.databaseId = e, this.ignoreUndefinedProperties = n, this.serializer = r || Ua(e);
  }
  /** Creates a new top-level parse context. */
  Ou(e, n, r, i = !1) {
    return new ah({
      yu: e,
      methodName: n,
      xu: r,
      path: ct.emptyPath(),
      bu: !1,
      Mu: i
    }, this.databaseId, this.serializer, this.ignoreUndefinedProperties);
  }
}
function ev(t) {
  const e = t._freezeSettings(), n = Ua(t._databaseId);
  return new EN(t._databaseId, !!e.ignoreUndefinedProperties, n);
}
function bN(t, e, n, r, i, s = {}) {
  const o = t.Ou(s.merge || s.mergeFields ? 2 : 0, e, n, i);
  rv("Data must be an object, but it was:", o, r);
  const c = tv(r, o);
  let u, l;
  if (s.merge) u = new Wt(o.fieldMask), l = o.fieldTransforms;
  else if (s.mergeFields) {
    const f = [];
    for (const h of s.mergeFields) {
      const _ = IN(e, h, n);
      if (!o.contains(_)) throw new X($.INVALID_ARGUMENT, `Field '${_}' is specified in your field mask but missing from your input data.`);
      AN(f, _) || f.push(_);
    }
    u = new Wt(f), l = o.fieldTransforms.filter((h) => u.covers(h.field));
  } else u = null, l = o.fieldTransforms;
  return new wN(new Ft(c), u, l);
}
function TN(t, e, n, r = !1) {
  return ch(n, t.Ou(r ? 4 : 3, e));
}
function ch(t, e) {
  if (nv(
    // Unwrap the API type from the Compat SDK. This will return the API type
    // from firestore-exp.
    t = Ue(t)
  )) return rv("Unsupported field value:", e, t), tv(t, e);
  if (t instanceof X_)
    return function(r, i) {
      if (!Z_(i.yu)) throw i.Fu(`${r._methodName}() can only be used with update() and set()`);
      if (!i.path) throw i.Fu(`${r._methodName}() is not currently supported inside arrays`);
      const s = r._toFieldTransform(i);
      s && i.fieldTransforms.push(s);
    }(t, e), null;
  if (t === void 0 && e.ignoreUndefinedProperties)
    return null;
  if (
    // If context.path is null we are inside an array and we don't support
    // field mask paths more granular than the top-level array.
    e.path && e.fieldMask.push(e.path), t instanceof Array
  ) {
    if (e.settings.bu && e.yu !== 4) throw e.Fu("Nested arrays are not supported");
    return function(r, i) {
      const s = [];
      let o = 0;
      for (const c of r) {
        let u = ch(c, i.vu(o));
        u == null && // Just include nulls in the array for fields being replaced with a
        // sentinel.
        (u = {
          nullValue: "NULL_VALUE"
        }), s.push(u), o++;
      }
      return {
        arrayValue: {
          values: s
        }
      };
    }(t, e);
  }
  return function(r, i) {
    if ((r = Ue(r)) === null) return {
      nullValue: "NULL_VALUE"
    };
    if (typeof r == "number") return yk(i.serializer, r);
    if (typeof r == "boolean") return {
      booleanValue: r
    };
    if (typeof r == "string") return {
      stringValue: r
    };
    if (r instanceof Date) {
      const s = et.fromDate(r);
      return {
        timestampValue: oa(i.serializer, s)
      };
    }
    if (r instanceof et) {
      const s = new et(r.seconds, 1e3 * Math.floor(r.nanoseconds / 1e3));
      return {
        timestampValue: oa(i.serializer, s)
      };
    }
    if (r instanceof oh) return {
      geoPointValue: {
        latitude: r.latitude,
        longitude: r.longitude
      }
    };
    if (r instanceof di) return {
      bytesValue: v_(i.serializer, r._byteString)
    };
    if (r instanceof At) {
      const s = i.databaseId, o = r.firestore._databaseId;
      if (!o.isEqual(s)) throw i.Fu(`Document reference is for database ${o.projectId}/${o.database} but should be for database ${s.projectId}/${s.database}`);
      return {
        referenceValue: Hl(r.firestore._databaseId || i.databaseId, r._key.path)
      };
    }
    throw i.Fu(`Unsupported field value: ${$a(r)}`);
  }(t, e);
}
function tv(t, e) {
  const n = {};
  return Hy(t) ? (
    // If we encounter an empty object, we explicitly add it to the update
    // mask to ensure that the server creates a map entry.
    e.path && e.path.length > 0 && e.fieldMask.push(e.path)
  ) : Ei(t, (r, i) => {
    const s = ch(i, e.Su(r));
    s != null && (n[r] = s);
  }), {
    mapValue: {
      fields: n
    }
  };
}
function nv(t) {
  return !(typeof t != "object" || t === null || t instanceof Array || t instanceof Date || t instanceof et || t instanceof oh || t instanceof di || t instanceof At || t instanceof X_);
}
function rv(t, e, n) {
  if (!nv(n) || !function(i) {
    return typeof i == "object" && i !== null && (Object.getPrototypeOf(i) === Object.prototype || Object.getPrototypeOf(i) === null);
  }(n)) {
    const r = $a(n);
    throw r === "an object" ? e.Fu(t + " a custom object") : e.Fu(t + " " + r);
  }
}
function IN(t, e, n) {
  if (
    // If required, replace the FieldPath Compat class with the firestore-exp
    // FieldPath.
    (e = Ue(e)) instanceof sh
  ) return e._internalPath;
  if (typeof e == "string") return iv(t, e);
  throw ua(
    "Field path arguments must be of type string or ",
    t,
    /* hasConverter= */
    !1,
    /* path= */
    void 0,
    n
  );
}
const SN = new RegExp("[~\\*/\\[\\]]");
function iv(t, e, n) {
  if (e.search(SN) >= 0) throw ua(
    `Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`,
    t,
    /* hasConverter= */
    !1,
    /* path= */
    void 0,
    n
  );
  try {
    return new sh(...e.split("."))._internalPath;
  } catch {
    throw ua(
      `Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`,
      t,
      /* hasConverter= */
      !1,
      /* path= */
      void 0,
      n
    );
  }
}
function ua(t, e, n, r, i) {
  const s = r && !r.isEmpty(), o = i !== void 0;
  let c = `Function ${e}() called with invalid data`;
  n && (c += " (via `toFirestore()`)"), c += ". ";
  let u = "";
  return (s || o) && (u += " (found", s && (u += ` in field ${r}`), o && (u += ` in document ${i}`), u += ")"), new X($.INVALID_ARGUMENT, c + t + u);
}
function AN(t, e) {
  return t.some((n) => n.isEqual(e));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class sv {
  // Note: This class is stripped down version of the DocumentSnapshot in
  // the legacy SDK. The changes are:
  // - No support for SnapshotMetadata.
  // - No support for SnapshotOptions.
  /** @hideconstructor protected */
  constructor(e, n, r, i, s) {
    this._firestore = e, this._userDataWriter = n, this._key = r, this._document = i, this._converter = s;
  }
  /** Property of the `DocumentSnapshot` that provides the document's ID. */
  get id() {
    return this._key.path.lastSegment();
  }
  /**
   * The `DocumentReference` for the document included in the `DocumentSnapshot`.
   */
  get ref() {
    return new At(this._firestore, this._converter, this._key);
  }
  /**
   * Signals whether or not the document at the snapshot's location exists.
   *
   * @returns true if the document exists.
   */
  exists() {
    return this._document !== null;
  }
  /**
   * Retrieves all fields in the document as an `Object`. Returns `undefined` if
   * the document doesn't exist.
   *
   * @returns An `Object` containing all fields in the document or `undefined`
   * if the document doesn't exist.
   */
  data() {
    if (this._document) {
      if (this._converter) {
        const e = new RN(
          this._firestore,
          this._userDataWriter,
          this._key,
          this._document,
          /* converter= */
          null
        );
        return this._converter.fromFirestore(e);
      }
      return this._userDataWriter.convertValue(this._document.data.value);
    }
  }
  /**
   * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
   * document or field doesn't exist.
   *
   * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
   * field.
   * @returns The data at the specified field location or undefined if no such
   * field exists in the document.
   */
  // We are using `any` here to avoid an explicit cast by our users.
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  get(e) {
    if (this._document) {
      const n = this._document.data.field(uh("DocumentSnapshot.get", e));
      if (n !== null) return this._userDataWriter.convertValue(n);
    }
  }
}
class RN extends sv {
  /**
   * Retrieves all fields in the document as an `Object`.
   *
   * @override
   * @returns An `Object` containing all fields in the document.
   */
  data() {
    return super.data();
  }
}
function uh(t, e) {
  return typeof e == "string" ? iv(t, e) : e instanceof sh ? e._internalPath : e._delegate._internalPath;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function CN(t) {
  if (t.limitType === "L" && t.explicitOrderBy.length === 0) throw new X($.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
}
class lh {
}
class PN extends lh {
}
function kN(t, e, ...n) {
  let r = [];
  e instanceof lh && r.push(e), r = r.concat(n), function(s) {
    const o = s.filter((u) => u instanceof hh).length, c = s.filter((u) => u instanceof za).length;
    if (o > 1 || o > 0 && c > 0) throw new X($.INVALID_ARGUMENT, "InvalidQuery. When using composite filters, you cannot use more than one filter at the top level. Consider nesting the multiple filters within an `and(...)` statement. For example: change `query(query, where(...), or(...))` to `query(query, and(where(...), or(...)))`.");
  }(r);
  for (const i of r) t = i._apply(t);
  return t;
}
class za extends PN {
  /**
   * @internal
   */
  constructor(e, n, r) {
    super(), this._field = e, this._op = n, this._value = r, /** The type of this query constraint */
    this.type = "where";
  }
  static _create(e, n, r) {
    return new za(e, n, r);
  }
  _apply(e) {
    const n = this._parse(e);
    return ov(e._query, n), new Ii(e.firestore, e.converter, Mu(e._query, n));
  }
  _parse(e) {
    const n = ev(e.firestore);
    return function(s, o, c, u, l, f, h) {
      let _;
      if (l.isKeyField()) {
        if (f === "array-contains" || f === "array-contains-any") throw new X($.INVALID_ARGUMENT, `Invalid Query. You can't perform '${f}' queries on documentId().`);
        if (f === "in" || f === "not-in") {
          em(h, f);
          const b = [];
          for (const I of h) b.push(Zp(u, s, I));
          _ = {
            arrayValue: {
              values: b
            }
          };
        } else _ = Zp(u, s, h);
      } else f !== "in" && f !== "not-in" && f !== "array-contains-any" || em(h, f), _ = TN(
        c,
        o,
        h,
        /* allowArrays= */
        f === "in" || f === "not-in"
      );
      return Je.create(l, f, _);
    }(e._query, "where", n, e.firestore._databaseId, this._field, this._op, this._value);
  }
}
function dL(t, e, n) {
  const r = e, i = uh("where", t);
  return za._create(i, r, n);
}
class hh extends lh {
  /**
   * @internal
   */
  constructor(e, n) {
    super(), this.type = e, this._queryConstraints = n;
  }
  static _create(e, n) {
    return new hh(e, n);
  }
  _parse(e) {
    const n = this._queryConstraints.map((r) => r._parse(e)).filter((r) => r.getFilters().length > 0);
    return n.length === 1 ? n[0] : Jt.create(n, this._getOperator());
  }
  _apply(e) {
    const n = this._parse(e);
    return n.getFilters().length === 0 ? e : (function(i, s) {
      let o = i;
      const c = s.getFlattenedFilters();
      for (const u of c) ov(o, u), o = Mu(o, u);
    }(e._query, n), new Ii(e.firestore, e.converter, Mu(e._query, n)));
  }
  _getQueryConstraints() {
    return this._queryConstraints;
  }
  _getOperator() {
    return this.type === "and" ? "and" : "or";
  }
}
function Zp(t, e, n) {
  if (typeof (n = Ue(n)) == "string") {
    if (n === "") throw new X($.INVALID_ARGUMENT, "Invalid query. When querying with documentId(), you must provide a valid document ID, but it was an empty string.");
    if (!t_(e) && n.indexOf("/") !== -1) throw new X($.INVALID_ARGUMENT, `Invalid query. When querying a collection by documentId(), you must provide a plain document ID, but '${n}' contains a '/' character.`);
    const r = e.path.child(xe.fromString(n));
    if (!se.isDocumentKey(r)) throw new X($.INVALID_ARGUMENT, `Invalid query. When querying a collection group by documentId(), the value provided must result in a valid document path, but '${r}' is not because it has an odd number of segments (${r.length}).`);
    return wp(t, new se(r));
  }
  if (n instanceof At) return wp(t, n._key);
  throw new X($.INVALID_ARGUMENT, `Invalid query. When querying with documentId(), you must provide a valid string or a DocumentReference, but it was: ${$a(n)}.`);
}
function em(t, e) {
  if (!Array.isArray(t) || t.length === 0) throw new X($.INVALID_ARGUMENT, `Invalid Query. A non-empty array is required for '${e.toString()}' filters.`);
}
function ov(t, e) {
  const n = function(i, s) {
    for (const o of i) for (const c of o.getFlattenedFilters()) if (s.indexOf(c.op) >= 0) return c.op;
    return null;
  }(t.filters, function(i) {
    switch (i) {
      case "!=":
        return [
          "!=",
          "not-in"
          /* Operator.NOT_IN */
        ];
      case "array-contains-any":
      case "in":
        return [
          "not-in"
          /* Operator.NOT_IN */
        ];
      case "not-in":
        return [
          "array-contains-any",
          "in",
          "not-in",
          "!="
          /* Operator.NOT_EQUAL */
        ];
      default:
        return [];
    }
  }(e.op));
  if (n !== null)
    throw n === e.op ? new X($.INVALID_ARGUMENT, `Invalid query. You cannot use more than one '${e.op.toString()}' filter.`) : new X($.INVALID_ARGUMENT, `Invalid query. You cannot use '${e.op.toString()}' filters with '${n.toString()}' filters.`);
}
class ON {
  convertValue(e, n = "none") {
    switch (Cr(e)) {
      case 0:
        return null;
      case 1:
        return e.booleanValue;
      case 2:
        return Ye(e.integerValue || e.doubleValue);
      case 3:
        return this.convertTimestamp(e.timestampValue);
      case 4:
        return this.convertServerTimestamp(e, n);
      case 5:
        return e.stringValue;
      case 6:
        return this.convertBytes(Rr(e.bytesValue));
      case 7:
        return this.convertReference(e.referenceValue);
      case 8:
        return this.convertGeoPoint(e.geoPointValue);
      case 9:
        return this.convertArray(e.arrayValue, n);
      case 10:
        return this.convertObject(e.mapValue, n);
      default:
        throw ce();
    }
  }
  convertObject(e, n) {
    return this.convertObjectMap(e.fields, n);
  }
  /**
   * @internal
   */
  convertObjectMap(e, n = "none") {
    const r = {};
    return Ei(e, (i, s) => {
      r[i] = this.convertValue(s, n);
    }), r;
  }
  convertGeoPoint(e) {
    return new oh(Ye(e.latitude), Ye(e.longitude));
  }
  convertArray(e, n) {
    return (e.values || []).map((r) => this.convertValue(r, n));
  }
  convertServerTimestamp(e, n) {
    switch (n) {
      case "previous":
        const r = jl(e);
        return r == null ? null : this.convertValue(r, n);
      case "estimate":
        return this.convertTimestamp(ms(e));
      default:
        return null;
    }
  }
  convertTimestamp(e) {
    const n = Yn(e);
    return new et(n.seconds, n.nanos);
  }
  convertDocumentKey(e, n) {
    const r = xe.fromString(e);
    Ne(S_(r));
    const i = new gs(r.get(1), r.get(3)), s = new se(r.popFirst(5));
    return i.isEqual(n) || // TODO(b/64130202): Somehow support foreign references.
    Sn(`Document ${s} contains a document reference within a different database (${i.projectId}/${i.database}) which is not supported. It will be treated as a reference in the current database (${n.projectId}/${n.database}) instead.`), s;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function NN(t, e, n) {
  let r;
  return r = t ? n && (n.merge || n.mergeFields) ? t.toFirestore(e, n) : t.toFirestore(e) : e, r;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Ji {
  /** @hideconstructor */
  constructor(e, n) {
    this.hasPendingWrites = e, this.fromCache = n;
  }
  /**
   * Returns true if this `SnapshotMetadata` is equal to the provided one.
   *
   * @param other - The `SnapshotMetadata` to compare against.
   * @returns true if this `SnapshotMetadata` is equal to the provided one.
   */
  isEqual(e) {
    return this.hasPendingWrites === e.hasPendingWrites && this.fromCache === e.fromCache;
  }
}
class av extends sv {
  /** @hideconstructor protected */
  constructor(e, n, r, i, s, o) {
    super(e, n, r, i, o), this._firestore = e, this._firestoreImpl = e, this.metadata = s;
  }
  /**
   * Returns whether or not the data exists. True if the document exists.
   */
  exists() {
    return super.exists();
  }
  /**
   * Retrieves all fields in the document as an `Object`. Returns `undefined` if
   * the document doesn't exist.
   *
   * By default, `serverTimestamp()` values that have not yet been
   * set to their final value will be returned as `null`. You can override
   * this by passing an options object.
   *
   * @param options - An options object to configure how data is retrieved from
   * the snapshot (for example the desired behavior for server timestamps that
   * have not yet been set to their final value).
   * @returns An `Object` containing all fields in the document or `undefined` if
   * the document doesn't exist.
   */
  data(e = {}) {
    if (this._document) {
      if (this._converter) {
        const n = new Lo(
          this._firestore,
          this._userDataWriter,
          this._key,
          this._document,
          this.metadata,
          /* converter= */
          null
        );
        return this._converter.fromFirestore(n, e);
      }
      return this._userDataWriter.convertValue(this._document.data.value, e.serverTimestamps);
    }
  }
  /**
   * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
   * document or field doesn't exist.
   *
   * By default, a `serverTimestamp()` that has not yet been set to
   * its final value will be returned as `null`. You can override this by
   * passing an options object.
   *
   * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
   * field.
   * @param options - An options object to configure how the field is retrieved
   * from the snapshot (for example the desired behavior for server timestamps
   * that have not yet been set to their final value).
   * @returns The data at the specified field location or undefined if no such
   * field exists in the document.
   */
  // We are using `any` here to avoid an explicit cast by our users.
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  get(e, n = {}) {
    if (this._document) {
      const r = this._document.data.field(uh("DocumentSnapshot.get", e));
      if (r !== null) return this._userDataWriter.convertValue(r, n.serverTimestamps);
    }
  }
}
class Lo extends av {
  /**
   * Retrieves all fields in the document as an `Object`.
   *
   * By default, `serverTimestamp()` values that have not yet been
   * set to their final value will be returned as `null`. You can override
   * this by passing an options object.
   *
   * @override
   * @param options - An options object to configure how data is retrieved from
   * the snapshot (for example the desired behavior for server timestamps that
   * have not yet been set to their final value).
   * @returns An `Object` containing all fields in the document.
   */
  data(e = {}) {
    return super.data(e);
  }
}
class DN {
  /** @hideconstructor */
  constructor(e, n, r, i) {
    this._firestore = e, this._userDataWriter = n, this._snapshot = i, this.metadata = new Ji(i.hasPendingWrites, i.fromCache), this.query = r;
  }
  /** An array of all the documents in the `QuerySnapshot`. */
  get docs() {
    const e = [];
    return this.forEach((n) => e.push(n)), e;
  }
  /** The number of documents in the `QuerySnapshot`. */
  get size() {
    return this._snapshot.docs.size;
  }
  /** True if there are no documents in the `QuerySnapshot`. */
  get empty() {
    return this.size === 0;
  }
  /**
   * Enumerates all of the documents in the `QuerySnapshot`.
   *
   * @param callback - A callback to be called with a `QueryDocumentSnapshot` for
   * each document in the snapshot.
   * @param thisArg - The `this` binding for the callback.
   */
  forEach(e, n) {
    this._snapshot.docs.forEach((r) => {
      e.call(n, new Lo(this._firestore, this._userDataWriter, r.key, r, new Ji(this._snapshot.mutatedKeys.has(r.key), this._snapshot.fromCache), this.query.converter));
    });
  }
  /**
   * Returns an array of the documents changes since the last snapshot. If this
   * is the first snapshot, all documents will be in the list as 'added'
   * changes.
   *
   * @param options - `SnapshotListenOptions` that control whether metadata-only
   * changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger
   * snapshot events.
   */
  docChanges(e = {}) {
    const n = !!e.includeMetadataChanges;
    if (n && this._snapshot.excludesMetadataChanges) throw new X($.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
    return this._cachedChanges && this._cachedChangesIncludeMetadataChanges === n || (this._cachedChanges = /** Calculates the array of `DocumentChange`s for a given `ViewSnapshot`. */
    function(i, s) {
      if (i._snapshot.oldDocs.isEmpty()) {
        let o = 0;
        return i._snapshot.docChanges.map((c) => {
          const u = new Lo(i._firestore, i._userDataWriter, c.doc.key, c.doc, new Ji(i._snapshot.mutatedKeys.has(c.doc.key), i._snapshot.fromCache), i.query.converter);
          return c.doc, {
            type: "added",
            doc: u,
            oldIndex: -1,
            newIndex: o++
          };
        });
      }
      {
        let o = i._snapshot.oldDocs;
        return i._snapshot.docChanges.filter((c) => s || c.type !== 3).map((c) => {
          const u = new Lo(i._firestore, i._userDataWriter, c.doc.key, c.doc, new Ji(i._snapshot.mutatedKeys.has(c.doc.key), i._snapshot.fromCache), i.query.converter);
          let l = -1, f = -1;
          return c.type !== 0 && (l = o.indexOf(c.doc.key), o = o.delete(c.doc.key)), c.type !== 1 && (o = o.add(c.doc), f = o.indexOf(c.doc.key)), {
            type: xN(c.type),
            doc: u,
            oldIndex: l,
            newIndex: f
          };
        });
      }
    }(this, n), this._cachedChangesIncludeMetadataChanges = n), this._cachedChanges;
  }
}
function xN(t) {
  switch (t) {
    case 0:
      return "added";
    case 2:
    case 3:
      return "modified";
    case 1:
      return "removed";
    default:
      return ce();
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function LN(t) {
  t = Kn(t, At);
  const e = Kn(t.firestore, ws);
  return pN(ih(e), t._key).then((n) => hv(e, t, n));
}
class cv extends ON {
  constructor(e) {
    super(), this.firestore = e;
  }
  convertBytes(e) {
    return new di(e);
  }
  convertReference(e) {
    const n = this.convertDocumentKey(e, this.firestore._databaseId);
    return new At(
      this.firestore,
      /* converter= */
      null,
      n
    );
  }
}
function uv(t, e, n) {
  t = Kn(t, At);
  const r = Kn(t.firestore, ws), i = NN(t.converter, e, n);
  return MN(r, [bN(ev(r), "setDoc", t._key, i, t.converter !== null, n).toMutation(t._key, En.none())]);
}
function lv(t, ...e) {
  var n, r, i;
  t = Ue(t);
  let s = {
    includeMetadataChanges: !1,
    source: "default"
  }, o = 0;
  typeof e[o] != "object" || Xp(e[o]) || (s = e[o], o++);
  const c = {
    includeMetadataChanges: s.includeMetadataChanges,
    source: s.source
  };
  if (Xp(e[o])) {
    const h = e[o];
    e[o] = (n = h.next) === null || n === void 0 ? void 0 : n.bind(h), e[o + 1] = (r = h.error) === null || r === void 0 ? void 0 : r.bind(h), e[o + 2] = (i = h.complete) === null || i === void 0 ? void 0 : i.bind(h);
  }
  let u, l, f;
  if (t instanceof At) l = Kn(t.firestore, ws), f = Da(t._key.path), u = {
    next: (h) => {
      e[o] && e[o](hv(l, t, h));
    },
    error: e[o + 1],
    complete: e[o + 2]
  };
  else {
    const h = Kn(t, Ii);
    l = Kn(h.firestore, ws), f = h._query;
    const _ = new cv(l);
    u = {
      next: (b) => {
        e[o] && e[o](new DN(l, _, h, b));
      },
      error: e[o + 1],
      complete: e[o + 2]
    }, CN(t._query);
  }
  return function(_, b, I, C) {
    const m = new G_(C), y = new F_(b, m, I);
    return _.asyncQueue.enqueueAndForget(async () => M_(await Ku(_), y)), () => {
      m.Ga(), _.asyncQueue.enqueueAndForget(async () => V_(await Ku(_), y));
    };
  }(ih(l), f, c, u);
}
function MN(t, e) {
  return function(r, i) {
    const s = new zn();
    return r.asyncQueue.enqueueAndForget(async () => tN(await dN(r), i, s)), s.promise;
  }(ih(t), e);
}
function hv(t, e, n) {
  const r = n.docs.get(e._key), i = new cv(t);
  return new av(t, i, e._key, r, new Ji(n.hasPendingWrites, n.fromCache), e.converter);
}
(function(e, n = !0) {
  (function(i) {
    wi = i;
  })(Dr), Ir(new Gn("firestore", (r, { instanceIdentifier: i, options: s }) => {
    const o = r.getProvider("app").getImmediate(), c = new ws(new LP(r.getProvider("auth-internal")), new UP(r.getProvider("app-check-internal")), function(l, f) {
      if (!Object.prototype.hasOwnProperty.apply(l.options, ["projectId"])) throw new X($.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
      return new gs(l.options.projectId, f);
    }(o, i), o);
    return s = Object.assign({
      useFetchStreams: n
    }, s), c._setSettings(s), c;
  }, "PUBLIC").setMultipleInstances(!0)), nn(gp, "4.6.5", e), // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
  nn(gp, "4.6.5", "esm2017");
})();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const fv = "firebasestorage.googleapis.com", dv = "storageBucket", VN = 2 * 60 * 1e3, FN = 10 * 60 * 1e3;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Be extends ln {
  /**
   * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and
   *  added to the end of the message.
   * @param message  - Error message.
   * @param status_ - Corresponding HTTP Status Code
   */
  constructor(e, n, r = 0) {
    super(Bc(e), `Firebase Storage: ${n} (${Bc(e)})`), this.status_ = r, this.customData = { serverResponse: null }, this._baseMessage = this.message, Object.setPrototypeOf(this, Be.prototype);
  }
  get status() {
    return this.status_;
  }
  set status(e) {
    this.status_ = e;
  }
  /**
   * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.
   */
  _codeEquals(e) {
    return Bc(e) === this.code;
  }
  /**
   * Optional response message that was added by the server.
   */
  get serverResponse() {
    return this.customData.serverResponse;
  }
  set serverResponse(e) {
    this.customData.serverResponse = e, this.customData.serverResponse ? this.message = `${this._baseMessage}
${this.customData.serverResponse}` : this.message = this._baseMessage;
  }
}
var je;
(function(t) {
  t.UNKNOWN = "unknown", t.OBJECT_NOT_FOUND = "object-not-found", t.BUCKET_NOT_FOUND = "bucket-not-found", t.PROJECT_NOT_FOUND = "project-not-found", t.QUOTA_EXCEEDED = "quota-exceeded", t.UNAUTHENTICATED = "unauthenticated", t.UNAUTHORIZED = "unauthorized", t.UNAUTHORIZED_APP = "unauthorized-app", t.RETRY_LIMIT_EXCEEDED = "retry-limit-exceeded", t.INVALID_CHECKSUM = "invalid-checksum", t.CANCELED = "canceled", t.INVALID_EVENT_NAME = "invalid-event-name", t.INVALID_URL = "invalid-url", t.INVALID_DEFAULT_BUCKET = "invalid-default-bucket", t.NO_DEFAULT_BUCKET = "no-default-bucket", t.CANNOT_SLICE_BLOB = "cannot-slice-blob", t.SERVER_FILE_WRONG_SIZE = "server-file-wrong-size", t.NO_DOWNLOAD_URL = "no-download-url", t.INVALID_ARGUMENT = "invalid-argument", t.INVALID_ARGUMENT_COUNT = "invalid-argument-count", t.APP_DELETED = "app-deleted", t.INVALID_ROOT_OPERATION = "invalid-root-operation", t.INVALID_FORMAT = "invalid-format", t.INTERNAL_ERROR = "internal-error", t.UNSUPPORTED_ENVIRONMENT = "unsupported-environment";
})(je || (je = {}));
function Bc(t) {
  return "storage/" + t;
}
function fh() {
  const t = "An unknown error occurred, please check the error payload for server response.";
  return new Be(je.UNKNOWN, t);
}
function UN(t) {
  return new Be(je.OBJECT_NOT_FOUND, "Object '" + t + "' does not exist.");
}
function jN(t) {
  return new Be(je.QUOTA_EXCEEDED, "Quota for bucket '" + t + "' exceeded, please view quota on https://firebase.google.com/pricing/.");
}
function BN() {
  const t = "User is not authenticated, please authenticate using Firebase Authentication and try again.";
  return new Be(je.UNAUTHENTICATED, t);
}
function $N() {
  return new Be(je.UNAUTHORIZED_APP, "This app does not have permission to access Firebase Storage on this project.");
}
function qN(t) {
  return new Be(je.UNAUTHORIZED, "User does not have permission to access '" + t + "'.");
}
function zN() {
  return new Be(je.RETRY_LIMIT_EXCEEDED, "Max retry time for operation exceeded, please try again.");
}
function KN() {
  return new Be(je.CANCELED, "User canceled the upload/download.");
}
function HN(t) {
  return new Be(je.INVALID_URL, "Invalid URL '" + t + "'.");
}
function GN(t) {
  return new Be(je.INVALID_DEFAULT_BUCKET, "Invalid default bucket '" + t + "'.");
}
function WN() {
  return new Be(je.NO_DEFAULT_BUCKET, "No default bucket found. Did you set the '" + dv + "' property when initializing the app?");
}
function QN() {
  return new Be(je.CANNOT_SLICE_BLOB, "Cannot slice blob for upload. Please retry the upload.");
}
function YN() {
  return new Be(je.NO_DOWNLOAD_URL, "The given file does not have any download URLs.");
}
function JN(t) {
  return new Be(je.UNSUPPORTED_ENVIRONMENT, `${t} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`);
}
function Gu(t) {
  return new Be(je.INVALID_ARGUMENT, t);
}
function pv() {
  return new Be(je.APP_DELETED, "The Firebase app was deleted.");
}
function XN(t) {
  return new Be(je.INVALID_ROOT_OPERATION, "The operation '" + t + "' cannot be performed on a root reference, create a non-root reference using child, such as .child('file.png').");
}
function is(t, e) {
  return new Be(je.INVALID_FORMAT, "String does not match format '" + t + "': " + e);
}
function $i(t) {
  throw new Be(je.INTERNAL_ERROR, "Internal error: " + t);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Nt {
  constructor(e, n) {
    this.bucket = e, this.path_ = n;
  }
  get path() {
    return this.path_;
  }
  get isRoot() {
    return this.path.length === 0;
  }
  fullServerUrl() {
    const e = encodeURIComponent;
    return "/b/" + e(this.bucket) + "/o/" + e(this.path);
  }
  bucketOnlyServerUrl() {
    return "/b/" + encodeURIComponent(this.bucket) + "/o";
  }
  static makeFromBucketSpec(e, n) {
    let r;
    try {
      r = Nt.makeFromUrl(e, n);
    } catch {
      return new Nt(e, "");
    }
    if (r.path === "")
      return r;
    throw GN(e);
  }
  static makeFromUrl(e, n) {
    let r = null;
    const i = "([A-Za-z0-9.\\-_]+)";
    function s(g) {
      g.path.charAt(g.path.length - 1) === "/" && (g.path_ = g.path_.slice(0, -1));
    }
    const o = "(/(.*))?$", c = new RegExp("^gs://" + i + o, "i"), u = { bucket: 1, path: 3 };
    function l(g) {
      g.path_ = decodeURIComponent(g.path);
    }
    const f = "v[A-Za-z0-9_]+", h = n.replace(/[.]/g, "\\."), _ = "(/([^?#]*).*)?$", b = new RegExp(`^https?://${h}/${f}/b/${i}/o${_}`, "i"), I = { bucket: 1, path: 3 }, C = n === fv ? "(?:storage.googleapis.com|storage.cloud.google.com)" : n, m = "([^?#]*)", y = new RegExp(`^https?://${C}/${i}/${m}`, "i"), p = [
      { regex: c, indices: u, postModify: s },
      {
        regex: b,
        indices: I,
        postModify: l
      },
      {
        regex: y,
        indices: { bucket: 1, path: 2 },
        postModify: l
      }
    ];
    for (let g = 0; g < p.length; g++) {
      const w = p[g], S = w.regex.exec(e);
      if (S) {
        const R = S[w.indices.bucket];
        let T = S[w.indices.path];
        T || (T = ""), r = new Nt(R, T), w.postModify(r);
        break;
      }
    }
    if (r == null)
      throw HN(e);
    return r;
  }
}
class ZN {
  constructor(e) {
    this.promise_ = Promise.reject(e);
  }
  /** @inheritDoc */
  getPromise() {
    return this.promise_;
  }
  /** @inheritDoc */
  cancel(e = !1) {
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function eD(t, e, n) {
  let r = 1, i = null, s = null, o = !1, c = 0;
  function u() {
    return c === 2;
  }
  let l = !1;
  function f(...m) {
    l || (l = !0, e.apply(null, m));
  }
  function h(m) {
    i = setTimeout(() => {
      i = null, t(b, u());
    }, m);
  }
  function _() {
    s && clearTimeout(s);
  }
  function b(m, ...y) {
    if (l) {
      _();
      return;
    }
    if (m) {
      _(), f.call(null, m, ...y);
      return;
    }
    if (u() || o) {
      _(), f.call(null, m, ...y);
      return;
    }
    r < 64 && (r *= 2);
    let p;
    c === 1 ? (c = 2, p = 0) : p = (r + Math.random()) * 1e3, h(p);
  }
  let I = !1;
  function C(m) {
    I || (I = !0, _(), !l && (i !== null ? (m || (c = 2), clearTimeout(i), h(0)) : m || (c = 1)));
  }
  return h(0), s = setTimeout(() => {
    o = !0, C(!0);
  }, n), C;
}
function tD(t) {
  t(!1);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function nD(t) {
  return t !== void 0;
}
function rD(t) {
  return typeof t == "object" && !Array.isArray(t);
}
function dh(t) {
  return typeof t == "string" || t instanceof String;
}
function tm(t) {
  return ph() && t instanceof Blob;
}
function ph() {
  return typeof Blob < "u";
}
function nm(t, e, n, r) {
  if (r < e)
    throw Gu(`Invalid value for '${t}'. Expected ${e} or greater.`);
  if (r > n)
    throw Gu(`Invalid value for '${t}'. Expected ${n} or less.`);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function mh(t, e, n) {
  let r = e;
  return n == null && (r = `https://${e}`), `${n}://${r}/v0${t}`;
}
function mv(t) {
  const e = encodeURIComponent;
  let n = "?";
  for (const r in t)
    if (t.hasOwnProperty(r)) {
      const i = e(r) + "=" + e(t[r]);
      n = n + i + "&";
    }
  return n = n.slice(0, -1), n;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var yr;
(function(t) {
  t[t.NO_ERROR = 0] = "NO_ERROR", t[t.NETWORK_ERROR = 1] = "NETWORK_ERROR", t[t.ABORT = 2] = "ABORT";
})(yr || (yr = {}));
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function iD(t, e) {
  const n = t >= 500 && t < 600, i = [
    // Request Timeout: web server didn't receive full request in time.
    408,
    // Too Many Requests: you're getting rate-limited, basically.
    429
  ].indexOf(t) !== -1, s = e.indexOf(t) !== -1;
  return n || i || s;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class sD {
  constructor(e, n, r, i, s, o, c, u, l, f, h, _ = !0) {
    this.url_ = e, this.method_ = n, this.headers_ = r, this.body_ = i, this.successCodes_ = s, this.additionalRetryCodes_ = o, this.callback_ = c, this.errorCallback_ = u, this.timeout_ = l, this.progressCallback_ = f, this.connectionFactory_ = h, this.retry = _, this.pendingConnection_ = null, this.backoffId_ = null, this.canceled_ = !1, this.appDelete_ = !1, this.promise_ = new Promise((b, I) => {
      this.resolve_ = b, this.reject_ = I, this.start_();
    });
  }
  /**
   * Actually starts the retry loop.
   */
  start_() {
    const e = (r, i) => {
      if (i) {
        r(!1, new wo(!1, null, !0));
        return;
      }
      const s = this.connectionFactory_();
      this.pendingConnection_ = s;
      const o = (c) => {
        const u = c.loaded, l = c.lengthComputable ? c.total : -1;
        this.progressCallback_ !== null && this.progressCallback_(u, l);
      };
      this.progressCallback_ !== null && s.addUploadProgressListener(o), s.send(this.url_, this.method_, this.body_, this.headers_).then(() => {
        this.progressCallback_ !== null && s.removeUploadProgressListener(o), this.pendingConnection_ = null;
        const c = s.getErrorCode() === yr.NO_ERROR, u = s.getStatus();
        if (!c || iD(u, this.additionalRetryCodes_) && this.retry) {
          const f = s.getErrorCode() === yr.ABORT;
          r(!1, new wo(!1, null, f));
          return;
        }
        const l = this.successCodes_.indexOf(u) !== -1;
        r(!0, new wo(l, s));
      });
    }, n = (r, i) => {
      const s = this.resolve_, o = this.reject_, c = i.connection;
      if (i.wasSuccessCode)
        try {
          const u = this.callback_(c, c.getResponse());
          nD(u) ? s(u) : s();
        } catch (u) {
          o(u);
        }
      else if (c !== null) {
        const u = fh();
        u.serverResponse = c.getErrorText(), this.errorCallback_ ? o(this.errorCallback_(c, u)) : o(u);
      } else if (i.canceled) {
        const u = this.appDelete_ ? pv() : KN();
        o(u);
      } else {
        const u = zN();
        o(u);
      }
    };
    this.canceled_ ? n(!1, new wo(!1, null, !0)) : this.backoffId_ = eD(e, n, this.timeout_);
  }
  /** @inheritDoc */
  getPromise() {
    return this.promise_;
  }
  /** @inheritDoc */
  cancel(e) {
    this.canceled_ = !0, this.appDelete_ = e || !1, this.backoffId_ !== null && tD(this.backoffId_), this.pendingConnection_ !== null && this.pendingConnection_.abort();
  }
}
class wo {
  constructor(e, n, r) {
    this.wasSuccessCode = e, this.connection = n, this.canceled = !!r;
  }
}
function oD(t, e) {
  e !== null && e.length > 0 && (t.Authorization = "Firebase " + e);
}
function aD(t, e) {
  t["X-Firebase-Storage-Version"] = "webjs/" + (e ?? "AppManager");
}
function cD(t, e) {
  e && (t["X-Firebase-GMPID"] = e);
}
function uD(t, e) {
  e !== null && (t["X-Firebase-AppCheck"] = e);
}
function lD(t, e, n, r, i, s, o = !0) {
  const c = mv(t.urlParams), u = t.url + c, l = Object.assign({}, t.headers);
  return cD(l, e), oD(l, n), aD(l, s), uD(l, r), new sD(u, t.method, l, t.body, t.successCodes, t.additionalRetryCodes, t.handler, t.errorHandler, t.timeout, t.progressCallback, i, o);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function hD() {
  return typeof BlobBuilder < "u" ? BlobBuilder : typeof WebKitBlobBuilder < "u" ? WebKitBlobBuilder : void 0;
}
function fD(...t) {
  const e = hD();
  if (e !== void 0) {
    const n = new e();
    for (let r = 0; r < t.length; r++)
      n.append(t[r]);
    return n.getBlob();
  } else {
    if (ph())
      return new Blob(t);
    throw new Be(je.UNSUPPORTED_ENVIRONMENT, "This browser doesn't seem to support creating Blobs");
  }
}
function dD(t, e, n) {
  return t.webkitSlice ? t.webkitSlice(e, n) : t.mozSlice ? t.mozSlice(e, n) : t.slice ? t.slice(e, n) : null;
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function pD(t) {
  if (typeof atob > "u")
    throw JN("base-64");
  return atob(t);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Qt = {
  /**
   * Indicates the string should be interpreted "raw", that is, as normal text.
   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte
   * sequence.
   * Example: The string 'Hello! \\ud83d\\ude0a' becomes the byte sequence
   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a
   */
  RAW: "raw",
  /**
   * Indicates the string should be interpreted as base64-encoded data.
   * Padding characters (trailing '='s) are optional.
   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence
   * ad 69 8e fb e1 3a b7 bf eb 97
   */
  BASE64: "base64",
  /**
   * Indicates the string should be interpreted as base64url-encoded data.
   * Padding characters (trailing '='s) are optional.
   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence
   * ad 69 8e fb e1 3a b7 bf eb 97
   */
  BASE64URL: "base64url",
  /**
   * Indicates the string is a data URL, such as one obtained from
   * canvas.toDataURL().
   * Example: the string 'data:application/octet-stream;base64,aaaa'
   * becomes the byte sequence
   * 69 a6 9a
   * (the content-type "application/octet-stream" is also applied, but can
   * be overridden in the metadata object).
   */
  DATA_URL: "data_url"
};
class $c {
  constructor(e, n) {
    this.data = e, this.contentType = n || null;
  }
}
function gv(t, e) {
  switch (t) {
    case Qt.RAW:
      return new $c(yv(e));
    case Qt.BASE64:
    case Qt.BASE64URL:
      return new $c(_v(t, e));
    case Qt.DATA_URL:
      return new $c(gD(e), yD(e));
  }
  throw fh();
}
function yv(t) {
  const e = [];
  for (let n = 0; n < t.length; n++) {
    let r = t.charCodeAt(n);
    if (r <= 127)
      e.push(r);
    else if (r <= 2047)
      e.push(192 | r >> 6, 128 | r & 63);
    else if ((r & 64512) === 55296)
      if (!(n < t.length - 1 && (t.charCodeAt(n + 1) & 64512) === 56320))
        e.push(239, 191, 189);
      else {
        const s = r, o = t.charCodeAt(++n);
        r = 65536 | (s & 1023) << 10 | o & 1023, e.push(240 | r >> 18, 128 | r >> 12 & 63, 128 | r >> 6 & 63, 128 | r & 63);
      }
    else
      (r & 64512) === 56320 ? e.push(239, 191, 189) : e.push(224 | r >> 12, 128 | r >> 6 & 63, 128 | r & 63);
  }
  return new Uint8Array(e);
}
function mD(t) {
  let e;
  try {
    e = decodeURIComponent(t);
  } catch {
    throw is(Qt.DATA_URL, "Malformed data URL.");
  }
  return yv(e);
}
function _v(t, e) {
  switch (t) {
    case Qt.BASE64: {
      const i = e.indexOf("-") !== -1, s = e.indexOf("_") !== -1;
      if (i || s)
        throw is(t, "Invalid character '" + (i ? "-" : "_") + "' found: is it base64url encoded?");
      break;
    }
    case Qt.BASE64URL: {
      const i = e.indexOf("+") !== -1, s = e.indexOf("/") !== -1;
      if (i || s)
        throw is(t, "Invalid character '" + (i ? "+" : "/") + "' found: is it base64 encoded?");
      e = e.replace(/-/g, "+").replace(/_/g, "/");
      break;
    }
  }
  let n;
  try {
    n = pD(e);
  } catch (i) {
    throw i.message.includes("polyfill") ? i : is(t, "Invalid character found");
  }
  const r = new Uint8Array(n.length);
  for (let i = 0; i < n.length; i++)
    r[i] = n.charCodeAt(i);
  return r;
}
class vv {
  constructor(e) {
    this.base64 = !1, this.contentType = null;
    const n = e.match(/^data:([^,]+)?,/);
    if (n === null)
      throw is(Qt.DATA_URL, "Must be formatted 'data:[<mediatype>][;base64],<data>");
    const r = n[1] || null;
    r != null && (this.base64 = _D(r, ";base64"), this.contentType = this.base64 ? r.substring(0, r.length - 7) : r), this.rest = e.substring(e.indexOf(",") + 1);
  }
}
function gD(t) {
  const e = new vv(t);
  return e.base64 ? _v(Qt.BASE64, e.rest) : mD(e.rest);
}
function yD(t) {
  return new vv(t).contentType;
}
function _D(t, e) {
  return t.length >= e.length ? t.substring(t.length - e.length) === e : !1;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class jn {
  constructor(e, n) {
    let r = 0, i = "";
    tm(e) ? (this.data_ = e, r = e.size, i = e.type) : e instanceof ArrayBuffer ? (n ? this.data_ = new Uint8Array(e) : (this.data_ = new Uint8Array(e.byteLength), this.data_.set(new Uint8Array(e))), r = this.data_.length) : e instanceof Uint8Array && (n ? this.data_ = e : (this.data_ = new Uint8Array(e.length), this.data_.set(e)), r = e.length), this.size_ = r, this.type_ = i;
  }
  size() {
    return this.size_;
  }
  type() {
    return this.type_;
  }
  slice(e, n) {
    if (tm(this.data_)) {
      const r = this.data_, i = dD(r, e, n);
      return i === null ? null : new jn(i);
    } else {
      const r = new Uint8Array(this.data_.buffer, e, n - e);
      return new jn(r, !0);
    }
  }
  static getBlob(...e) {
    if (ph()) {
      const n = e.map((r) => r instanceof jn ? r.data_ : r);
      return new jn(fD.apply(null, n));
    } else {
      const n = e.map((o) => dh(o) ? gv(Qt.RAW, o).data : o.data_);
      let r = 0;
      n.forEach((o) => {
        r += o.byteLength;
      });
      const i = new Uint8Array(r);
      let s = 0;
      return n.forEach((o) => {
        for (let c = 0; c < o.length; c++)
          i[s++] = o[c];
      }), new jn(i, !0);
    }
  }
  uploadData() {
    return this.data_;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function wv(t) {
  let e;
  try {
    e = JSON.parse(t);
  } catch {
    return null;
  }
  return rD(e) ? e : null;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function vD(t) {
  if (t.length === 0)
    return null;
  const e = t.lastIndexOf("/");
  return e === -1 ? "" : t.slice(0, e);
}
function wD(t, e) {
  const n = e.split("/").filter((r) => r.length > 0).join("/");
  return t.length === 0 ? n : t + "/" + n;
}
function Ev(t) {
  const e = t.lastIndexOf("/", t.length - 2);
  return e === -1 ? t : t.slice(e + 1);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function ED(t, e) {
  return e;
}
class It {
  constructor(e, n, r, i) {
    this.server = e, this.local = n || e, this.writable = !!r, this.xform = i || ED;
  }
}
let Eo = null;
function bD(t) {
  return !dh(t) || t.length < 2 ? t : Ev(t);
}
function bv() {
  if (Eo)
    return Eo;
  const t = [];
  t.push(new It("bucket")), t.push(new It("generation")), t.push(new It("metageneration")), t.push(new It("name", "fullPath", !0));
  function e(s, o) {
    return bD(o);
  }
  const n = new It("name");
  n.xform = e, t.push(n);
  function r(s, o) {
    return o !== void 0 ? Number(o) : o;
  }
  const i = new It("size");
  return i.xform = r, t.push(i), t.push(new It("timeCreated")), t.push(new It("updated")), t.push(new It("md5Hash", null, !0)), t.push(new It("cacheControl", null, !0)), t.push(new It("contentDisposition", null, !0)), t.push(new It("contentEncoding", null, !0)), t.push(new It("contentLanguage", null, !0)), t.push(new It("contentType", null, !0)), t.push(new It("metadata", "customMetadata", !0)), Eo = t, Eo;
}
function TD(t, e) {
  function n() {
    const r = t.bucket, i = t.fullPath, s = new Nt(r, i);
    return e._makeStorageReference(s);
  }
  Object.defineProperty(t, "ref", { get: n });
}
function ID(t, e, n) {
  const r = {};
  r.type = "file";
  const i = n.length;
  for (let s = 0; s < i; s++) {
    const o = n[s];
    r[o.local] = o.xform(r, e[o.server]);
  }
  return TD(r, t), r;
}
function Tv(t, e, n) {
  const r = wv(e);
  return r === null ? null : ID(t, r, n);
}
function SD(t, e, n, r) {
  const i = wv(e);
  if (i === null || !dh(i.downloadTokens))
    return null;
  const s = i.downloadTokens;
  if (s.length === 0)
    return null;
  const o = encodeURIComponent;
  return s.split(",").map((l) => {
    const f = t.bucket, h = t.fullPath, _ = "/b/" + o(f) + "/o/" + o(h), b = mh(_, n, r), I = mv({
      alt: "media",
      token: l
    });
    return b + I;
  })[0];
}
function AD(t, e) {
  const n = {}, r = e.length;
  for (let i = 0; i < r; i++) {
    const s = e[i];
    s.writable && (n[s.server] = t[s.local]);
  }
  return JSON.stringify(n);
}
class Iv {
  constructor(e, n, r, i) {
    this.url = e, this.method = n, this.handler = r, this.timeout = i, this.urlParams = {}, this.headers = {}, this.body = null, this.errorHandler = null, this.progressCallback = null, this.successCodes = [200], this.additionalRetryCodes = [];
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Sv(t) {
  if (!t)
    throw fh();
}
function RD(t, e) {
  function n(r, i) {
    const s = Tv(t, i, e);
    return Sv(s !== null), s;
  }
  return n;
}
function CD(t, e) {
  function n(r, i) {
    const s = Tv(t, i, e);
    return Sv(s !== null), SD(s, i, t.host, t._protocol);
  }
  return n;
}
function Av(t) {
  function e(n, r) {
    let i;
    return n.getStatus() === 401 ? /* This exact message string is the only consistent part of the */ /* server's error response that identifies it as an App Check error. */ n.getErrorText().includes("Firebase App Check token is invalid") ? i = $N() : i = BN() : n.getStatus() === 402 ? i = jN(t.bucket) : n.getStatus() === 403 ? i = qN(t.path) : i = r, i.status = n.getStatus(), i.serverResponse = r.serverResponse, i;
  }
  return e;
}
function PD(t) {
  const e = Av(t);
  function n(r, i) {
    let s = e(r, i);
    return r.getStatus() === 404 && (s = UN(t.path)), s.serverResponse = i.serverResponse, s;
  }
  return n;
}
function kD(t, e, n) {
  const r = e.fullServerUrl(), i = mh(r, t.host, t._protocol), s = "GET", o = t.maxOperationRetryTime, c = new Iv(i, s, CD(t, n), o);
  return c.errorHandler = PD(e), c;
}
function OD(t, e) {
  return t && t.contentType || e && e.type() || "application/octet-stream";
}
function ND(t, e, n) {
  const r = Object.assign({}, n);
  return r.fullPath = t.path, r.size = e.size(), r.contentType || (r.contentType = OD(null, e)), r;
}
function DD(t, e, n, r, i) {
  const s = e.bucketOnlyServerUrl(), o = {
    "X-Goog-Upload-Protocol": "multipart"
  };
  function c() {
    let p = "";
    for (let g = 0; g < 2; g++)
      p = p + Math.random().toString().slice(2);
    return p;
  }
  const u = c();
  o["Content-Type"] = "multipart/related; boundary=" + u;
  const l = ND(e, r, i), f = AD(l, n), h = "--" + u + `\r
Content-Type: application/json; charset=utf-8\r
\r
` + f + `\r
--` + u + `\r
Content-Type: ` + l.contentType + `\r
\r
`, _ = `\r
--` + u + "--", b = jn.getBlob(h, r, _);
  if (b === null)
    throw QN();
  const I = { name: l.fullPath }, C = mh(s, t.host, t._protocol), m = "POST", y = t.maxUploadRetryTime, E = new Iv(C, m, RD(t, n), y);
  return E.urlParams = I, E.headers = o, E.body = b.uploadData(), E.errorHandler = Av(e), E;
}
class xD {
  constructor() {
    this.sent_ = !1, this.xhr_ = new XMLHttpRequest(), this.initXhr(), this.errorCode_ = yr.NO_ERROR, this.sendPromise_ = new Promise((e) => {
      this.xhr_.addEventListener("abort", () => {
        this.errorCode_ = yr.ABORT, e();
      }), this.xhr_.addEventListener("error", () => {
        this.errorCode_ = yr.NETWORK_ERROR, e();
      }), this.xhr_.addEventListener("load", () => {
        e();
      });
    });
  }
  send(e, n, r, i) {
    if (this.sent_)
      throw $i("cannot .send() more than once");
    if (this.sent_ = !0, this.xhr_.open(n, e, !0), i !== void 0)
      for (const s in i)
        i.hasOwnProperty(s) && this.xhr_.setRequestHeader(s, i[s].toString());
    return r !== void 0 ? this.xhr_.send(r) : this.xhr_.send(), this.sendPromise_;
  }
  getErrorCode() {
    if (!this.sent_)
      throw $i("cannot .getErrorCode() before sending");
    return this.errorCode_;
  }
  getStatus() {
    if (!this.sent_)
      throw $i("cannot .getStatus() before sending");
    try {
      return this.xhr_.status;
    } catch {
      return -1;
    }
  }
  getResponse() {
    if (!this.sent_)
      throw $i("cannot .getResponse() before sending");
    return this.xhr_.response;
  }
  getErrorText() {
    if (!this.sent_)
      throw $i("cannot .getErrorText() before sending");
    return this.xhr_.statusText;
  }
  /** Aborts the request. */
  abort() {
    this.xhr_.abort();
  }
  getResponseHeader(e) {
    return this.xhr_.getResponseHeader(e);
  }
  addUploadProgressListener(e) {
    this.xhr_.upload != null && this.xhr_.upload.addEventListener("progress", e);
  }
  removeUploadProgressListener(e) {
    this.xhr_.upload != null && this.xhr_.upload.removeEventListener("progress", e);
  }
}
class LD extends xD {
  initXhr() {
    this.xhr_.responseType = "text";
  }
}
function Rv() {
  return new LD();
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Pr {
  constructor(e, n) {
    this._service = e, n instanceof Nt ? this._location = n : this._location = Nt.makeFromUrl(n, e.host);
  }
  /**
   * Returns the URL for the bucket and path this object references,
   *     in the form gs://<bucket>/<object-path>
   * @override
   */
  toString() {
    return "gs://" + this._location.bucket + "/" + this._location.path;
  }
  _newRef(e, n) {
    return new Pr(e, n);
  }
  /**
   * A reference to the root of this object's bucket.
   */
  get root() {
    const e = new Nt(this._location.bucket, "");
    return this._newRef(this._service, e);
  }
  /**
   * The name of the bucket containing this reference's object.
   */
  get bucket() {
    return this._location.bucket;
  }
  /**
   * The full path of this object.
   */
  get fullPath() {
    return this._location.path;
  }
  /**
   * The short name of this object, which is the last component of the full path.
   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.
   */
  get name() {
    return Ev(this._location.path);
  }
  /**
   * The `StorageService` instance this `StorageReference` is associated with.
   */
  get storage() {
    return this._service;
  }
  /**
   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if
   * this reference is the root.
   */
  get parent() {
    const e = vD(this._location.path);
    if (e === null)
      return null;
    const n = new Nt(this._location.bucket, e);
    return new Pr(this._service, n);
  }
  /**
   * Utility function to throw an error in methods that do not accept a root reference.
   */
  _throwIfRoot(e) {
    if (this._location.path === "")
      throw XN(e);
  }
}
function Cv(t, e, n) {
  t._throwIfRoot("uploadBytes");
  const r = DD(t.storage, t._location, bv(), new jn(e, !0), n);
  return t.storage.makeRequestWithTokens(r, Rv).then((i) => ({
    metadata: i,
    ref: t
  }));
}
function MD(t, e, n = Qt.RAW, r) {
  t._throwIfRoot("uploadString");
  const i = gv(n, e), s = Object.assign({}, r);
  return s.contentType == null && i.contentType != null && (s.contentType = i.contentType), Cv(t, i.data, s);
}
function VD(t) {
  t._throwIfRoot("getDownloadURL");
  const e = kD(t.storage, t._location, bv());
  return t.storage.makeRequestWithTokens(e, Rv).then((n) => {
    if (n === null)
      throw YN();
    return n;
  });
}
function FD(t, e) {
  const n = wD(t._location.path, e), r = new Nt(t._location.bucket, n);
  return new Pr(t.storage, r);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function UD(t) {
  return /^[A-Za-z]+:\/\//.test(t);
}
function jD(t, e) {
  return new Pr(t, e);
}
function Pv(t, e) {
  if (t instanceof gh) {
    const n = t;
    if (n._bucket == null)
      throw WN();
    const r = new Pr(n, n._bucket);
    return e != null ? Pv(r, e) : r;
  } else
    return e !== void 0 ? FD(t, e) : t;
}
function BD(t, e) {
  if (e && UD(e)) {
    if (t instanceof gh)
      return jD(t, e);
    throw Gu("To use ref(service, url), the first argument must be a Storage instance.");
  } else
    return Pv(t, e);
}
function rm(t, e) {
  const n = e == null ? void 0 : e[dv];
  return n == null ? null : Nt.makeFromBucketSpec(n, t);
}
function $D(t, e, n, r = {}) {
  t.host = `${e}:${n}`, t._protocol = "http";
  const { mockUserToken: i } = r;
  i && (t._overrideAuthToken = typeof i == "string" ? i : Zg(i, t.app.options.projectId));
}
class gh {
  constructor(e, n, r, i, s) {
    this.app = e, this._authProvider = n, this._appCheckProvider = r, this._url = i, this._firebaseVersion = s, this._bucket = null, this._host = fv, this._protocol = "https", this._appId = null, this._deleted = !1, this._maxOperationRetryTime = VN, this._maxUploadRetryTime = FN, this._requests = /* @__PURE__ */ new Set(), i != null ? this._bucket = Nt.makeFromBucketSpec(i, this._host) : this._bucket = rm(this._host, this.app.options);
  }
  /**
   * The host string for this service, in the form of `host` or
   * `host:port`.
   */
  get host() {
    return this._host;
  }
  set host(e) {
    this._host = e, this._url != null ? this._bucket = Nt.makeFromBucketSpec(this._url, e) : this._bucket = rm(e, this.app.options);
  }
  /**
   * The maximum time to retry uploads in milliseconds.
   */
  get maxUploadRetryTime() {
    return this._maxUploadRetryTime;
  }
  set maxUploadRetryTime(e) {
    nm(
      "time",
      /* minValue=*/
      0,
      /* maxValue= */
      Number.POSITIVE_INFINITY,
      e
    ), this._maxUploadRetryTime = e;
  }
  /**
   * The maximum time to retry operations other than uploads or downloads in
   * milliseconds.
   */
  get maxOperationRetryTime() {
    return this._maxOperationRetryTime;
  }
  set maxOperationRetryTime(e) {
    nm(
      "time",
      /* minValue=*/
      0,
      /* maxValue= */
      Number.POSITIVE_INFINITY,
      e
    ), this._maxOperationRetryTime = e;
  }
  async _getAuthToken() {
    if (this._overrideAuthToken)
      return this._overrideAuthToken;
    const e = this._authProvider.getImmediate({ optional: !0 });
    if (e) {
      const n = await e.getToken();
      if (n !== null)
        return n.accessToken;
    }
    return null;
  }
  async _getAppCheckToken() {
    const e = this._appCheckProvider.getImmediate({ optional: !0 });
    return e ? (await e.getToken()).token : null;
  }
  /**
   * Stop running requests and prevent more from being created.
   */
  _delete() {
    return this._deleted || (this._deleted = !0, this._requests.forEach((e) => e.cancel()), this._requests.clear()), Promise.resolve();
  }
  /**
   * Returns a new firebaseStorage.Reference object referencing this StorageService
   * at the given Location.
   */
  _makeStorageReference(e) {
    return new Pr(this, e);
  }
  /**
   * @param requestInfo - HTTP RequestInfo object
   * @param authToken - Firebase auth token
   */
  _makeRequest(e, n, r, i, s = !0) {
    if (this._deleted)
      return new ZN(pv());
    {
      const o = lD(e, this._appId, r, i, n, this._firebaseVersion, s);
      return this._requests.add(o), o.getPromise().then(() => this._requests.delete(o), () => this._requests.delete(o)), o;
    }
  }
  async makeRequestWithTokens(e, n) {
    const [r, i] = await Promise.all([
      this._getAuthToken(),
      this._getAppCheckToken()
    ]);
    return this._makeRequest(e, n, r, i).getPromise();
  }
}
const im = "@firebase/storage", sm = "0.12.6";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const kv = "storage";
function qD(t, e, n) {
  return t = Ue(t), Cv(t, e, n);
}
function zD(t, e, n, r) {
  return t = Ue(t), MD(t, e, n, r);
}
function Ov(t) {
  return t = Ue(t), VD(t);
}
function Mo(t, e) {
  return t = Ue(t), BD(t, e);
}
function KD(t = Tl(), e) {
  t = Ue(t);
  const r = Ca(t, kv).getImmediate({
    identifier: e
  }), i = Yg("storage");
  return i && HD(r, ...i), r;
}
function HD(t, e, n, r = {}) {
  $D(t, e, n, r);
}
function GD(t, { instanceIdentifier: e }) {
  const n = t.getProvider("app").getImmediate(), r = t.getProvider("auth-internal"), i = t.getProvider("app-check-internal");
  return new gh(n, r, i, e, Dr);
}
function WD() {
  Ir(new Gn(
    kv,
    GD,
    "PUBLIC"
    /* ComponentType.PUBLIC */
  ).setMultipleInstances(!0)), nn(im, sm, ""), nn(im, sm, "esm2017");
}
WD();
const QD = {
  apiKey: "AIzaSyBmcnHP80KXpBXltHrVnP1MZPsiSbVbWqQ",
  authDomain: "water-fetch.firebaseapp.com",
  projectId: "water-fetch",
  storageBucket: "water-fetch.appspot.com",
  messagingSenderId: "911813185967"
}, os = class os {
  constructor(e) {
    On(this, "app");
    On(this, "auth");
    On(this, "db");
    On(this, "storage");
    On(this, "lockConfig");
    if (this.props = e, os.server)
      throw new Error("Server already initialized");
    const { projectId: n, ...r } = e;
    this.lockConfig = {
      ...QD,
      ...r
    }, this.app = ny(this.lockConfig), this.auth = OP(this.app), this.db = _N(this.app), this.storage = KD(this.app), os.server = this;
  }
  get config() {
    return this.lockConfig;
  }
  ref() {
    return Hu(this.db, "projects", this.props.projectId);
  }
  storageRef() {
    return Mo(this.storage, ["projects", this.props.projectId].join("/"));
  }
  async setDoc(e, n) {
    return await uv(ca(this.ref(), e.join("/")), n, { merge: !0 });
  }
  async getDoc(e) {
    const n = ca(this.ref(), e.join("/"));
    return await LN(n);
  }
  async onSnapshot(e, n, r) {
    return lv(kN(Hu(this.ref(), e.join("/")), ...n), r);
  }
  async getFile(e) {
    const n = Mo(this.storageRef(), e), r = await Ov(n), i = await fetch(r);
    return {
      blob: await i.blob(),
      downloadUrl: r,
      response: i,
      newRef: n
    };
  }
  async setFile(e, n) {
    const r = Mo(this.storageRef(), e);
    let i;
    return typeof n == "string" ? i = await zD(r, n) : i = await qD(r, n), {
      result: i,
      ref: r
    };
  }
};
On(os, "server", null);
let Dt = os;
const YD = ["jpg", "jpeg", "png", "gif", "bmp", "svg", "webp", "tiff", "ico", "jfif"];
function JD(t) {
  const e = Et();
  return new Promise((n, r) => {
    var o;
    if (!((o = t.buttons) != null && o.length)) {
      r("Need Minimum One Button");
      return;
    }
    Fd.setTemp("id", e), Fd.setTemp("params", t);
    const i = async () => {
      var f, h, _;
      const { slot: c, object: u } = de.getState(), l = (f = c.entities["dialog-list"]) == null ? void 0 : f.submited;
      typeof l == "number" && (n({
        response: l,
        checkboxChecked: ((_ = (h = u.data) == null ? void 0 : h.dialog) == null ? void 0 : _.checked) || !1
      }), s(), yn("dialog.id", null));
    }, s = de.subscribe(i);
  });
}
async function pL() {
  const { screenX: t, screenY: e, innerWidth: n, innerHeight: r } = window;
  return {
    x: t,
    y: e,
    width: n,
    height: r
  };
}
async function mL() {
  return await fetch("https://api.ipify.org?format=json").then((t) => t.json()).then((t) => t.ip);
}
const gL = (t) => {
  var r;
  const e = (r = t.match(/\.[a-z]+$/gi)) == null ? void 0 : r[0].slice(1).toLowerCase();
  let n = {};
  return YD.forEach((i) => {
    n[i] = i;
  }), n = {
    ...n,
    jpg: "jpeg",
    svg: "svg+xml"
  }, e ? n[e] : "png";
}, yL = async ({ to: t, subject: e = "", body: n = "" }) => {
  const r = document.createElement("a");
  r.href = `mailto:${t}?subject=${encodeURIComponent(e)}&body=${encodeURIComponent(n)}`, r.target = "_blank", r.click();
}, _L = ({ tel: t }) => {
  const e = document.createElement("a");
  e.href = `tel:${t}`, e.target = "_blank", e.click();
}, vL = ({ to: t, body: e = "" }) => {
  const n = document.createElement("a");
  n.href = `sms:${t}?body=${encodeURIComponent(e)}`, n.target = "_blank", n.click();
}, Wu = /* @__PURE__ */ new Map(), wL = (t, e) => {
  const n = async () => {
    const r = e();
    r instanceof Promise && await r;
  };
  Wu.set(t, n), document.addEventListener(t, n);
}, EL = (t) => {
  const e = Wu.get(t);
  e && (document.removeEventListener(t, e), Wu.delete(t));
}, bL = async ({ options: t, value: e }) => {
  Ud.setTemp("main", e), Ud.setTemp("main-mode", t == null ? void 0 : t.mode);
}, TL = (t) => {
  $r.setTemp("position", [t.x, t.y]);
  const e = Et();
  $r.setTemp("id", e), $r.setTemp(
    "list",
    t.menu.map(({ click: n, ...r }) => r)
  ), Qu(
    "object.data.menu.result",
    (n) => typeof n == "number",
    (n) => {
      var i, s;
      const r = (i = n.object.data) == null ? void 0 : i.menu;
      if (typeof r == "object" && typeof r.result == "number" && r.id == e) {
        $r.setTemp("id", null), $r.setTemp("list", []), $r.setTemp("result", null);
        const o = t.menu[r.result];
        (s = o.click) == null || s.call(o);
      }
    }
  );
}, IL = (t) => new Promise((e, n) => {
  var i;
  const r = document.createElement("input");
  r.type = "file", t.filters ? r.accept = t.filters.map(({ name: s, extensions: o }) => `${s}.{${o.join(",")}`).join(",") : r.accept = "*", r.multiple = !!((i = t.properties) != null && i.includes("multiSelections")), r.onchange = async () => {
    var s;
    if ((s = r.files) != null && s.length) {
      const o = [];
      for (let u = 0; u < r.files.length; u++) {
        const l = r.files.item(u);
        l && o.push(l);
      }
      const c = await vw(o, async (u) => new Promise((l) => {
        const f = new FileReader();
        f.onload = () => {
          f.result && l(f.result.toString());
        }, f.readAsDataURL(u);
      }));
      e(c);
    }
  }, r.click(), r.onerror = n;
}), SL = async (t) => (await JD({
  ...t,
  buttons: ["Yes", "No"]
})).response === 0;
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var om;
(function(t) {
  t.HARM_CATEGORY_UNSPECIFIED = "HARM_CATEGORY_UNSPECIFIED", t.HARM_CATEGORY_HATE_SPEECH = "HARM_CATEGORY_HATE_SPEECH", t.HARM_CATEGORY_SEXUALLY_EXPLICIT = "HARM_CATEGORY_SEXUALLY_EXPLICIT", t.HARM_CATEGORY_HARASSMENT = "HARM_CATEGORY_HARASSMENT", t.HARM_CATEGORY_DANGEROUS_CONTENT = "HARM_CATEGORY_DANGEROUS_CONTENT";
})(om || (om = {}));
var am;
(function(t) {
  t.HARM_BLOCK_THRESHOLD_UNSPECIFIED = "HARM_BLOCK_THRESHOLD_UNSPECIFIED", t.BLOCK_LOW_AND_ABOVE = "BLOCK_LOW_AND_ABOVE", t.BLOCK_MEDIUM_AND_ABOVE = "BLOCK_MEDIUM_AND_ABOVE", t.BLOCK_ONLY_HIGH = "BLOCK_ONLY_HIGH", t.BLOCK_NONE = "BLOCK_NONE";
})(am || (am = {}));
var cm;
(function(t) {
  t.HARM_PROBABILITY_UNSPECIFIED = "HARM_PROBABILITY_UNSPECIFIED", t.NEGLIGIBLE = "NEGLIGIBLE", t.LOW = "LOW", t.MEDIUM = "MEDIUM", t.HIGH = "HIGH";
})(cm || (cm = {}));
var um;
(function(t) {
  t.BLOCKED_REASON_UNSPECIFIED = "BLOCKED_REASON_UNSPECIFIED", t.SAFETY = "SAFETY", t.OTHER = "OTHER";
})(um || (um = {}));
var la;
(function(t) {
  t.FINISH_REASON_UNSPECIFIED = "FINISH_REASON_UNSPECIFIED", t.STOP = "STOP", t.MAX_TOKENS = "MAX_TOKENS", t.SAFETY = "SAFETY", t.RECITATION = "RECITATION", t.OTHER = "OTHER";
})(la || (la = {}));
var lm;
(function(t) {
  t.TASK_TYPE_UNSPECIFIED = "TASK_TYPE_UNSPECIFIED", t.RETRIEVAL_QUERY = "RETRIEVAL_QUERY", t.RETRIEVAL_DOCUMENT = "RETRIEVAL_DOCUMENT", t.SEMANTIC_SIMILARITY = "SEMANTIC_SIMILARITY", t.CLASSIFICATION = "CLASSIFICATION", t.CLUSTERING = "CLUSTERING";
})(lm || (lm = {}));
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Es extends Error {
  constructor(e) {
    super(`[GoogleGenerativeAI Error]: ${e}`);
  }
}
class hm extends Es {
  constructor(e, n) {
    super(e), this.response = n;
  }
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const XD = "https://generativelanguage.googleapis.com", ZD = "v1", e1 = "0.2.1", t1 = "genai-js";
var kr;
(function(t) {
  t.GENERATE_CONTENT = "generateContent", t.STREAM_GENERATE_CONTENT = "streamGenerateContent", t.COUNT_TOKENS = "countTokens", t.EMBED_CONTENT = "embedContent", t.BATCH_EMBED_CONTENTS = "batchEmbedContents";
})(kr || (kr = {}));
class js {
  constructor(e, n, r, i) {
    this.model = e, this.task = n, this.apiKey = r, this.stream = i;
  }
  toString() {
    let e = `${XD}/${ZD}/${this.model}:${this.task}`;
    return this.stream && (e += "?alt=sse"), e;
  }
}
function n1() {
  return `${t1}/${e1}`;
}
async function Bs(t, e, n) {
  let r;
  try {
    if (r = await fetch(t.toString(), Object.assign(Object.assign({}, r1(n)), { method: "POST", headers: {
      "Content-Type": "application/json",
      "x-goog-api-client": n1(),
      "x-goog-api-key": t.apiKey
    }, body: e })), !r.ok) {
      let i = "";
      try {
        const s = await r.json();
        i = s.error.message, s.error.details && (i += ` ${JSON.stringify(s.error.details)}`);
      } catch {
      }
      throw new Error(`[${r.status} ${r.statusText}] ${i}`);
    }
  } catch (i) {
    const s = new Es(`Error fetching from ${t.toString()}: ${i.message}`);
    throw s.stack = i.stack, s;
  }
  return r;
}
function r1(t) {
  const e = {};
  if ((t == null ? void 0 : t.timeout) >= 0) {
    const n = new AbortController(), r = n.signal;
    setTimeout(() => n.abort(), t.timeout), e.signal = r;
  }
  return e;
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function yh(t) {
  return t.text = () => {
    if (t.candidates && t.candidates.length > 0) {
      if (t.candidates.length > 1 && console.warn(`This response had ${t.candidates.length} candidates. Returning text from the first candidate only. Access response.candidates directly to use the other candidates.`), Nv(t.candidates[0]))
        throw new hm(`${ha(t)}`, t);
      return i1(t);
    } else if (t.promptFeedback)
      throw new hm(`Text not available. ${ha(t)}`, t);
    return "";
  }, t;
}
function i1(t) {
  var e, n, r, i;
  return !((i = (r = (n = (e = t.candidates) === null || e === void 0 ? void 0 : e[0].content) === null || n === void 0 ? void 0 : n.parts) === null || r === void 0 ? void 0 : r[0]) === null || i === void 0) && i.text ? t.candidates[0].content.parts[0].text : "";
}
const s1 = [la.RECITATION, la.SAFETY];
function Nv(t) {
  return !!t.finishReason && s1.includes(t.finishReason);
}
function ha(t) {
  var e, n, r;
  let i = "";
  if ((!t.candidates || t.candidates.length === 0) && t.promptFeedback)
    i += "Response was blocked", !((e = t.promptFeedback) === null || e === void 0) && e.blockReason && (i += ` due to ${t.promptFeedback.blockReason}`), !((n = t.promptFeedback) === null || n === void 0) && n.blockReasonMessage && (i += `: ${t.promptFeedback.blockReasonMessage}`);
  else if (!((r = t.candidates) === null || r === void 0) && r[0]) {
    const s = t.candidates[0];
    Nv(s) && (i += `Candidate was blocked due to ${s.finishReason}`, s.finishMessage && (i += `: ${s.finishMessage}`));
  }
  return i;
}
function bs(t) {
  return this instanceof bs ? (this.v = t, this) : new bs(t);
}
function o1(t, e, n) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var r = n.apply(t, e || []), i, s = [];
  return i = {}, o("next"), o("throw"), o("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function o(_) {
    r[_] && (i[_] = function(b) {
      return new Promise(function(I, C) {
        s.push([_, b, I, C]) > 1 || c(_, b);
      });
    });
  }
  function c(_, b) {
    try {
      u(r[_](b));
    } catch (I) {
      h(s[0][3], I);
    }
  }
  function u(_) {
    _.value instanceof bs ? Promise.resolve(_.value.v).then(l, f) : h(s[0][2], _);
  }
  function l(_) {
    c("next", _);
  }
  function f(_) {
    c("throw", _);
  }
  function h(_, b) {
    _(b), s.shift(), s.length && c(s[0][0], s[0][1]);
  }
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const fm = /^data\: (.*)(?:\n\n|\r\r|\r\n\r\n)/;
function a1(t) {
  const e = t.body.pipeThrough(new TextDecoderStream("utf8", { fatal: !0 })), n = l1(e), [r, i] = n.tee();
  return {
    stream: u1(r),
    response: c1(i)
  };
}
async function c1(t) {
  const e = [], n = t.getReader();
  for (; ; ) {
    const { done: r, value: i } = await n.read();
    if (r)
      return yh(h1(e));
    e.push(i);
  }
}
function u1(t) {
  return o1(this, arguments, function* () {
    const n = t.getReader();
    for (; ; ) {
      const { value: r, done: i } = yield bs(n.read());
      if (i)
        break;
      yield yield bs(yh(r));
    }
  });
}
function l1(t) {
  const e = t.getReader();
  return new ReadableStream({
    start(r) {
      let i = "";
      return s();
      function s() {
        return e.read().then(({ value: o, done: c }) => {
          if (c) {
            if (i.trim()) {
              r.error(new Es("Failed to parse stream"));
              return;
            }
            r.close();
            return;
          }
          i += o;
          let u = i.match(fm), l;
          for (; u; ) {
            try {
              l = JSON.parse(u[1]);
            } catch {
              r.error(new Es(`Error parsing JSON response: "${u[1]}"`));
              return;
            }
            r.enqueue(l), i = i.substring(u[0].length), u = i.match(fm);
          }
          return s();
        });
      }
    }
  });
}
function h1(t) {
  const e = t[t.length - 1], n = {
    promptFeedback: e == null ? void 0 : e.promptFeedback
  };
  for (const r of t)
    if (r.candidates)
      for (const i of r.candidates) {
        const s = i.index;
        if (n.candidates || (n.candidates = []), n.candidates[s] || (n.candidates[s] = {
          index: i.index
        }), n.candidates[s].citationMetadata = i.citationMetadata, n.candidates[s].finishReason = i.finishReason, n.candidates[s].finishMessage = i.finishMessage, n.candidates[s].safetyRatings = i.safetyRatings, i.content && i.content.parts) {
          n.candidates[s].content || (n.candidates[s].content = {
            role: i.content.role || "user",
            parts: [{ text: "" }]
          });
          for (const o of i.content.parts)
            o.text && (n.candidates[s].content.parts[0].text += o.text);
        }
      }
  return n;
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function Dv(t, e, n, r) {
  const i = new js(
    e,
    kr.STREAM_GENERATE_CONTENT,
    t,
    /* stream */
    !0
  ), s = await Bs(i, JSON.stringify(n), r);
  return a1(s);
}
async function xv(t, e, n, r) {
  const i = new js(
    e,
    kr.GENERATE_CONTENT,
    t,
    /* stream */
    !1
  ), o = await (await Bs(i, JSON.stringify(n), r)).json();
  return {
    response: yh(o)
  };
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function ss(t, e) {
  let n = [];
  if (typeof t == "string")
    n = [{ text: t }];
  else
    for (const r of t)
      typeof r == "string" ? n.push({ text: r }) : n.push(r);
  return { role: e, parts: n };
}
function qc(t) {
  return t.contents ? t : { contents: [ss(t, "user")] };
}
function f1(t) {
  return typeof t == "string" || Array.isArray(t) ? { content: ss(t, "user") } : t;
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const dm = "SILENT_ERROR";
class d1 {
  constructor(e, n, r, i) {
    this.model = n, this.params = r, this.requestOptions = i, this._history = [], this._sendPromise = Promise.resolve(), this._apiKey = e, r != null && r.history && (this._history = r.history.map((s) => {
      if (!s.role)
        throw new Error("Missing role for history item: " + JSON.stringify(s));
      return ss(s.parts, s.role);
    }));
  }
  /**
   * Gets the chat history so far. Blocked prompts are not added to history.
   * Blocked candidates are not added to history, nor are the prompts that
   * generated them.
   */
  async getHistory() {
    return await this._sendPromise, this._history;
  }
  /**
   * Sends a chat message and receives a non-streaming
   * {@link GenerateContentResult}
   */
  async sendMessage(e) {
    var n, r;
    await this._sendPromise;
    const i = ss(e, "user"), s = {
      safetySettings: (n = this.params) === null || n === void 0 ? void 0 : n.safetySettings,
      generationConfig: (r = this.params) === null || r === void 0 ? void 0 : r.generationConfig,
      contents: [...this._history, i]
    };
    let o;
    return this._sendPromise = this._sendPromise.then(() => xv(this._apiKey, this.model, s, this.requestOptions)).then((c) => {
      var u;
      if (c.response.candidates && c.response.candidates.length > 0) {
        this._history.push(i);
        const l = Object.assign({
          parts: [],
          // Response seems to come back without a role set.
          role: "model"
        }, (u = c.response.candidates) === null || u === void 0 ? void 0 : u[0].content);
        this._history.push(l);
      } else {
        const l = ha(c.response);
        l && console.warn(`sendMessage() was unsuccessful. ${l}. Inspect response object for details.`);
      }
      o = c;
    }), await this._sendPromise, o;
  }
  /**
   * Sends a chat message and receives the response as a
   * {@link GenerateContentStreamResult} containing an iterable stream
   * and a response promise.
   */
  async sendMessageStream(e) {
    var n, r;
    await this._sendPromise;
    const i = ss(e, "user"), s = {
      safetySettings: (n = this.params) === null || n === void 0 ? void 0 : n.safetySettings,
      generationConfig: (r = this.params) === null || r === void 0 ? void 0 : r.generationConfig,
      contents: [...this._history, i]
    }, o = Dv(this._apiKey, this.model, s, this.requestOptions);
    return this._sendPromise = this._sendPromise.then(() => o).catch((c) => {
      throw new Error(dm);
    }).then((c) => c.response).then((c) => {
      if (c.candidates && c.candidates.length > 0) {
        this._history.push(i);
        const u = Object.assign({}, c.candidates[0].content);
        u.role || (u.role = "model"), this._history.push(u);
      } else {
        const u = ha(c);
        u && console.warn(`sendMessageStream() was unsuccessful. ${u}. Inspect response object for details.`);
      }
    }).catch((c) => {
      c.message !== dm && console.error(c);
    }), o;
  }
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function p1(t, e, n, r) {
  const i = new js(e, kr.COUNT_TOKENS, t, !1);
  return (await Bs(i, JSON.stringify(Object.assign(Object.assign({}, n), { model: e })), r)).json();
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function m1(t, e, n, r) {
  const i = new js(e, kr.EMBED_CONTENT, t, !1);
  return (await Bs(i, JSON.stringify(n), r)).json();
}
async function g1(t, e, n, r) {
  const i = new js(e, kr.BATCH_EMBED_CONTENTS, t, !1), s = n.requests.map((c) => Object.assign(Object.assign({}, c), { model: e }));
  return (await Bs(i, JSON.stringify({ requests: s }), r)).json();
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class y1 {
  constructor(e, n, r) {
    this.apiKey = e, n.model.includes("/") ? this.model = n.model : this.model = `models/${n.model}`, this.generationConfig = n.generationConfig || {}, this.safetySettings = n.safetySettings || [], this.requestOptions = r || {};
  }
  /**
   * Makes a single non-streaming call to the model
   * and returns an object containing a single {@link GenerateContentResponse}.
   */
  async generateContent(e) {
    const n = qc(e);
    return xv(this.apiKey, this.model, Object.assign({ generationConfig: this.generationConfig, safetySettings: this.safetySettings }, n), this.requestOptions);
  }
  /**
   * Makes a single streaming call to the model
   * and returns an object containing an iterable stream that iterates
   * over all chunks in the streaming response as well as
   * a promise that returns the final aggregated response.
   */
  async generateContentStream(e) {
    const n = qc(e);
    return Dv(this.apiKey, this.model, Object.assign({ generationConfig: this.generationConfig, safetySettings: this.safetySettings }, n), this.requestOptions);
  }
  /**
   * Gets a new {@link ChatSession} instance which can be used for
   * multi-turn chats.
   */
  startChat(e) {
    return new d1(this.apiKey, this.model, e, this.requestOptions);
  }
  /**
   * Counts the tokens in the provided request.
   */
  async countTokens(e) {
    const n = qc(e);
    return p1(this.apiKey, this.model, n);
  }
  /**
   * Embeds the provided content.
   */
  async embedContent(e) {
    const n = f1(e);
    return m1(this.apiKey, this.model, n);
  }
  /**
   * Embeds an array of {@link EmbedContentRequest}s.
   */
  async batchEmbedContents(e) {
    return g1(this.apiKey, this.model, e, this.requestOptions);
  }
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class _1 {
  constructor(e) {
    this.apiKey = e;
  }
  /**
   * Gets a {@link GenerativeModel} instance for the provided model name.
   */
  getGenerativeModel(e, n) {
    if (!e.model)
      throw new Es("Must provide a model name. Example: genai.getGenerativeModel({ model: 'my-model-name' })");
    return new y1(this.apiKey, e, n);
  }
}
const AL = ({ model: t = "gemini-pro" }) => re.useMemo(() => {
  const n = "AIzaSyAqZVEFBs0JbfAdbVKCBg5OKC85XAmDqnc";
  return new _1(n).getGenerativeModel({ model: t });
}, [t]);
pe.plugin(Vw);
function RL(t, e = [], n) {
  const r = vt(null);
  return re.useEffect(() => (t().then(r.set), () => {
    n == null || n(e);
  }), e), r.get;
}
function pi(t, e = [], n = () => {
}) {
  const r = vt(!0);
  return re.useEffect(() => (r.set(!0), t().then().finally(() => {
    r.set(!1);
  }), () => n(e)), e), r.get;
}
function vt(t) {
  const [e, n] = re.useState(t);
  return {
    get: e,
    set: n
  };
}
function pm(t, e, n = (r) => r) {
  const r = vt(n(t)), i = re.useDeferredValue(r.get);
  return re.useEffect(() => {
    e(i);
  }, [i]), re.useEffect(() => {
    r.set(n(t));
  }, [t]), r;
}
function CL(t, e = [], n = 1e3) {
  const r = vt(null), i = vt(!1);
  return re.useEffect(() => {
    const s = new fa();
    return i.set(!0), s.start(n).then(() => {
      r.set(t()), i.set(!1);
    }), () => {
      s.clear(), i.set(!1);
    };
  }, [...e, n]), [i.get, r.get];
}
function v1(t, e = [], n = 1e3) {
  const r = vt(!1);
  return re.useEffect(() => {
    const i = new fa();
    r.set(!0);
    let s;
    return i.start(n).then(async () => {
      s = t(), s instanceof Promise && await s, r.set(!1);
    }), () => {
      i.clear(), typeof s == "function" && s(), r.set(!1);
    };
  }, [...e, n]), r.get;
}
const PL = (t, e = []) => {
  const n = vt("ready"), r = vt(null), i = vt(null);
  return pi(async () => {
    if (n.get == "idle") {
      n.set("loading");
      try {
        const s = await t();
        r.set(s), i.set(null), n.set("success");
      } catch (s) {
        r.set(null), i.set(s), n.set("error");
      }
    }
  }, [n.get, ...e]), {
    status: n,
    data: r,
    error: i
  };
};
function w1(t) {
  const e = Yt.getOne(t);
  return re.useMemo(() => e || null, [e]);
}
function E1() {
  const t = Yt.getAll();
  return re.useMemo(() => t.filter(({ private: n = !1 }) => !n), [t]);
}
function kL(t) {
  const e = Yt.getOneFeild(t, "config");
  return re.useMemo(() => e || null, [e]);
}
function OL() {
  const t = E1(), e = Bt.getOneFeild("findConfigurations", "value"), n = jg.getOneFeild("settings.viewType", "focused"), r = re.useMemo(() => n == "list" ? as.orderBy(t, "name", "asc") : n ? as.orderBy(t, "settingId", "asc") : t, [n, t]), i = Lv("settings/findBy.enum"), s = re.useMemo(() => Object.entries(ym(String(e))).map(([c, u]) => [c, u.join(" ")]), [e]), o = re.useMemo(() => r.filter((c) => s.every(([u, l]) => {
    var f;
    switch (u) {
      case "id":
        return Ln(c.settingId, l);
      case "name":
        return typeof c.name == "string" && Ln(c.name, l);
      case "changed":
        return !Xn(c.def, c.value);
      case "type": {
        const h = (f = c.settingId.match(/\.[a-z]+$/gi)) == null ? void 0 : f[0].slice(1);
        return typeof h == "string" ? Ln(l, h) : !1;
      }
      case "default value":
        return i == "nice" ? Ln(ww(c.name, c.desc, c.settingId).join(" "), l) : i && Ln(String(c[i]), l);
    }
  })), [s, r, i]);
  return re.useEffect(() => {
    yn("configurations.found.length", o.length);
  }, [o]), o;
}
function NL(t, e) {
  Yt.setOneFeild(t, "config", e);
}
function DL(t, e) {
  Yt.setOneFeild(t, "value", e);
}
function Lv(t) {
  const e = w1(t);
  return e == null ? void 0 : e.value;
}
function xL(t) {
  const e = vl.getAll();
  return re.useMemo(() => as.join({ commandId: t }, e, "commandId->command"), [t, e]);
}
function Mv() {
  const t = vl.getAll();
  return re.useMemo(() => t.filter(({ value: e }) => e), [t]);
}
function LL(t) {
  const e = Mv();
  return re.useMemo(() => as.join({ actionName: t }, e, "actionName->action"), [e]);
}
const ML = (t) => gi.setTemp("settings", t == null ? void 0 : t.toString());
function b1() {
  const t = uS.getAll();
  return re.useMemo(() => t.filter((e) => !e.private), [t]);
}
function VL() {
  const t = b1(), e = Bt.getOneFeild("findConfigurations", "value"), n = Mv(), r = re.useMemo(() => as.fullJoin(t, n, "commandId->command").map(({ childs: o, data: c }) => ({
    ...c,
    keys: o
  })), [t, n]), i = re.useMemo(() => {
    if (!e)
      return r;
    const s = Object.entries(ym(e)).map(([o, c]) => ({
      prop: o,
      value: c.join(" ")
    }));
    return r.filter(({ commandId: o, label: c, keys: u }) => s.every(({ prop: l, value: f }) => {
      switch (l) {
        case "key":
          return Ln(u.map(({ value: h }) => h).join(" "), f);
        case "label":
          return Ln(c, f);
        case "commandId":
          return o.startsWith(f);
        default:
          return Ln([c, ...u.map(({ value: h }) => h)].join(" "), f);
      }
    }));
  }, [e, r]);
  return re.useEffect(() => {
    yn("configurations.found.length", i.length);
  }, [i]), i;
}
function FL(t, e = []) {
  const n = Object.entries(t), r = n.map(([, i]) => Bt.getOneFeild(i, "value"));
  return re.useMemo(() => {
    const i = {};
    return n.forEach(([s], o) => {
      const c = r[o];
      i[s] = c;
    }), i;
  }, [...r, ...e]);
}
function UL(t) {
  t.forEach((e) => {
    Bt.setOneFeild(e, "value", "");
  });
}
function T1(t) {
  const e = Bt.getOne(t);
  re.useEffect(() => {
    e || Bt.add([
      {
        fieldId: t,
        selection: {
          direction: "forward",
          end: 0,
          start: 0
        },
        value: "",
        controls: {}
      }
    ]);
  }, [e]);
}
function I1(t, e) {
  return re.useMemo(() => {
    if (!e)
      return t || "";
    const r = Math.min(e.start, e.end);
    return (t == null ? void 0 : t.slice(0, r)) || "";
  }, [t, e]);
}
function S1(t, e) {
  return re.useMemo(() => {
    if (!e)
      return t || "";
    const r = Math.max(e.start, e.end);
    return (t == null ? void 0 : t.slice(r)) || "";
  }, [t, e]);
}
function A1(t, e) {
  return re.useMemo(() => {
    if (!e)
      return t || "";
    const r = Math.min(e.start, e.end), i = Math.max(e.start, e.end);
    return (t == null ? void 0 : t.slice(r, i)) || "";
  }, [t, e]);
}
function jL(t) {
  t.forEach(T1);
}
function BL(t) {
  const e = Bt.getOneFeild(t, "value"), n = Bt.getOneFeild(t, "selection");
  return I1(e, n);
}
function $L(t) {
  const e = Bt.getOneFeild(t, "value"), n = Bt.getOneFeild(t, "selection");
  return S1(e, n);
}
function qL(t) {
  const e = Bt.getOneFeild(t, "value"), n = Bt.getOneFeild(t, "selection");
  return A1(e, n);
}
function zL(t, e = de.getState()) {
  const n = t.map((r) => {
    const i = e.fields.entities[r], s = Object.keys((i == null ? void 0 : i.controls) || {});
    if (!i || !s.length)
      return {
        response: [],
        isValide: !0
      };
    const o = i.value, c = s.map((u) => o.match(new RegExp(u, "ig")));
    return { response: c, isValide: c.every(Boolean), fieldName: r };
  });
  return {
    controls: n,
    isValide: n.every(({ isValide: r }) => r)
  };
}
function KL(t, e = "info", n = Et(), r = 5) {
  return $0.add([
    {
      message: t,
      type: e,
      time: r,
      id: n
    }
  ]), n;
}
var R1 = /* @__PURE__ */ ((t) => (t[t.short = 5] = "short", t[t.long = 10] = "long", t))(R1 || {});
const HL = async () => {
  const t = Et();
  return cr.setTemp("id", t), cr.setTemp("type", "scanQr"), new Promise(async (e) => {
    const n = Vv(
      "object.data.view.result",
      (r) => !!r,
      async ({ object: r }) => {
        var s;
        const i = (s = r.data) == null ? void 0 : s.camera;
        (i == null ? void 0 : i.id) == t && (n(), e(i.result));
      }
    );
  });
};
function GL(t) {
  return new Promise(async (e, n) => {
    var o, c;
    if ((c = (o = de.getState().object.data) == null ? void 0 : o.camera) == null ? void 0 : c.id) {
      n("Camera Is Work Now");
      return;
    }
    const i = Et();
    cr.setTemp("id", i), cr.setTemp("type", t), cr.setTemp("result", null), cr.setTemp("error", null);
    const s = Vv(
      "object.data.camera",
      (u) => !!(u != null && u.result || u != null && u.error),
      async ({ object: u }) => {
        var f;
        const l = (f = u.data) == null ? void 0 : f.camera;
        (l == null ? void 0 : l.id) == i && (l.result ? e(l.result) : n(l.error), ["id", "type", "result"].forEach((h) => {
          cr.setTemp(h, null);
        }), s());
      }
    );
  });
}
function WL() {
  const t = wl.getEntity(), e = Lv("window/dark.boolean");
  return re.useCallback(
    (...n) => {
      const r = {}, i = {};
      if (e == null)
        return i;
      n.forEach((s) => {
        if (s) {
          if (typeof s == "string") {
            r.backgroundColor = s;
            return;
          }
          Object.entries(s).forEach(([o, c]) => {
            if (typeof c == "function") {
              r[o] = c;
              return;
            }
            r[o] = c;
          });
        }
      });
      for (const s in r) {
        const o = r[s];
        if (typeof o == "function")
          i[s] = o(t, e);
        else if (typeof o == "string") {
          const c = t[o];
          c && (i[s] = _h(e, c));
        }
      }
      return i;
    },
    [e, t]
  );
}
function QL(t, ...e) {
  return (n, r) => `linear-gradient(${t} , ${e.filter((i) => n[i]).map((i) => {
    const s = n[i];
    return _h(r, s);
  }).join(" , ")})`;
}
function _h(t, e) {
  return t ? e.dark || e.default : e.light || e.default;
}
function YL(t = []) {
  return (e, n) => t.filter((r) => e[r.colorId]).map(({ colorId: r, x: i = 0, y: s = 0, blur: o = 3, size: c = 1, isInset: u = !1 }) => {
    const l = e[r];
    return `${i}px ${s}px ${o}px ${c}px ${_h(n, l)} ${u ? "inset" : ""}`;
  }).join(" , ");
}
const Qu = (t, e, n) => {
  const r = () => {
    const s = de.getState(), { value: o } = da(s, t);
    (typeof e == "function" ? e(o) : o == e) && (i(), n(s));
  }, i = de.subscribe(r);
  return i;
}, Vv = (t, e, n) => {
  const r = () => {
    const i = de.getState(), { value: s, isValide: o } = da(i, t);
    if (!o) {
      Gt.warn("Invalid State Dir", t);
      return;
    }
    (typeof e == "function" ? e(s) : s == e) && (n == null || n(i));
  };
  return de.subscribe(r);
}, C1 = () => Rs("userInfo"), JL = () => {
  const t = P1(), e = C1();
  pi(async () => {
    if (t != null && t.uid && Dt.server) {
      const n = Hu(Dt.server.db, "users"), r = ca(n, t.uid), i = {
        photo: t.photoURL,
        phone: t.phoneNumber,
        nickname: t.displayName,
        email: t.email
      }, s = { ...i, uid: t.uid };
      yn("userInfo", s), await uv(r, i, { merge: !0 });
    } else
      yn("userInfo", null);
  }, [t]), pi(async () => {
    if (t && e) {
      let n = {};
      t.displayName != e.nickname && (n.displayName = e.nickname), t.photoURL != e.photo && (n.photoURL = e.photo), await iC(t, n);
    }
  }, [e, t]), re.useEffect(() => {
    const n = Dt.server;
    if (t != null && t.uid && (n != null && n.db))
      return lv(ca(n.db, "users", t.uid), (r) => {
        r.exists() ? yn("userInfo", {
          uid: r.id,
          ...r.data()
        }) : yn("userInfo", null);
      });
  }, [t]);
}, P1 = () => {
  var e;
  const t = vt(((e = Dt.server) == null ? void 0 : e.auth.currentUser) || null);
  return re.useEffect(() => {
    var n;
    if ((n = Dt.server) != null && n.auth)
      return t.set(Dt.server.auth.currentUser), aC(Dt.server.auth, t.set);
  }, []), t.get;
}, XL = async () => {
  if (!Dt.server)
    throw Error("Server is not initialized");
  RS.setTemp("open", !0), await gm(1e3);
  const t = document.getElementById("capatcha-view");
  if (!t)
    throw Error("capatcha view element is not exists");
  return new LC(Dt.server.auth, t);
}, ZL = () => {
  gi.setTemp("profile-view", !0);
}, eM = () => {
  gi.setTemp("profile-view", !1);
}, tM = (t) => {
  gi.setTemp("pdf", t);
}, nM = ({ ...t }) => {
  Yt.setOneFeild("visibility/notifays.boolean", "value", !0), hs.add([
    {
      id: Et(),
      buttons: [],
      desc: " - ",
      showDesc: !1,
      removable: !0,
      status: "idle",
      title: "Untitled",
      ...t
    }
  ]);
}, rM = () => {
  const t = Yt.getAll();
  return re.useMemo(() => t.filter(({ def: e, value: n }) => !Xn(e, n)), [t]);
}, iM = (t, e = Et()) => {
  const n = "iframe-" + e;
  return Ho.setTemp("id", n), Ho.setTemp("src", t.toString()), n;
}, sM = () => {
  Ho.setTemp("id", null), Ho.setTemp("src", null);
}, oM = () => {
  gi.setTemp("applications", !0);
}, aM = () => {
  gi.setTemp("applications", !1);
}, vh = (t, e, n = "dark") => {
  wl.setOneFeild(t, n, e);
}, cM = (t, e) => {
  vh(t, e, "dark");
}, uM = (t, e) => {
  vh(t, e, "light");
}, lM = (t, e) => {
  vh(t, e, "default");
}, hM = (t, e) => {
  const n = zc(t, "normal", "cabab").toLowerCase();
  qg.upsert([
    {
      word: n,
      ...e
    }
  ]);
}, fM = () => Rs("project"), k1 = async (t) => {
  if (!Dt.server)
    throw Error("Server Need To Be Inited");
  const e = Dt.server.storage, n = Mo(e, ["global", "themes", t.concat(".json")].join("/"));
  return {
    url: await Ov(n),
    storeRef: n
  };
}, dM = async (t) => {
  const { storeRef: e, url: n } = await k1(t), r = await fetch(n), i = await r.json();
  return wl.upsert(i), {
    json: i,
    response: r,
    url: n,
    storeRef: e
  };
};
export {
  TL as $,
  Y0 as A,
  VL as B,
  xL as C,
  vl as D,
  jL as E,
  $r as F,
  lx as G,
  hs as H,
  JD as I,
  DL as J,
  gi as K,
  OL as L,
  rM as M,
  ox as N,
  $0 as O,
  uS as P,
  Et as Q,
  KL as R,
  Dt as S,
  zL as T,
  oL as U,
  aL as V,
  uL as W,
  Mn as X,
  Vn as Y,
  P1 as Z,
  C1 as _,
  Lv as a,
  w1 as a$,
  cL as a0,
  Ho as a1,
  sM as a2,
  Fd as a3,
  pi as a4,
  iL as a5,
  CL as a6,
  kN as a7,
  dL as a8,
  Hu as a9,
  Ux as aA,
  M1 as aB,
  fx as aC,
  Ex as aD,
  ax as aE,
  Rx as aF,
  U1 as aG,
  xx as aH,
  kx as aI,
  qx as aJ,
  Q1 as aK,
  JL as aL,
  PL as aM,
  qg as aN,
  z0 as aO,
  sL as aP,
  AL as aQ,
  Px as aR,
  O0 as aS,
  pa as aT,
  IL as aU,
  pe as aV,
  iM as aW,
  LN as aX,
  ca as aY,
  QD as aZ,
  pm as a_,
  lv as aa,
  aM as ab,
  RL as ac,
  B1 as ad,
  q1 as ae,
  K1 as af,
  G1 as ag,
  sx as ah,
  tx as ai,
  wl as aj,
  _h as ak,
  Vv as al,
  GL as am,
  Ix as an,
  J0 as ao,
  $1 as ap,
  z1 as aq,
  H1 as ar,
  W1 as as,
  bd as at,
  j1 as au,
  L1 as av,
  Eu as aw,
  Dx as ax,
  Fx as ay,
  X1 as az,
  vt as b,
  RS as b$,
  kL as b0,
  NL as b1,
  LL as b2,
  FL as b3,
  UL as b4,
  I1 as b5,
  S1 as b6,
  A1 as b7,
  BL as b8,
  $L as b9,
  _x as bA,
  vx as bB,
  wx as bC,
  j0 as bD,
  si as bE,
  YD as bF,
  pL as bG,
  mL as bH,
  gL as bI,
  yL as bJ,
  _L as bK,
  vL as bL,
  wL as bM,
  EL as bN,
  bL as bO,
  SL as bP,
  Ad as bQ,
  cx as bR,
  Qx as bS,
  Yx as bT,
  Jx as bU,
  Xx as bV,
  Ud as bW,
  Zx as bX,
  eL as bY,
  nL as bZ,
  rL as b_,
  qL as ba,
  R1 as bb,
  HL as bc,
  Qu as bd,
  XL as be,
  ZL as bf,
  eM as bg,
  tM as bh,
  nM as bi,
  oM as bj,
  vh as bk,
  cM as bl,
  uM as bm,
  lM as bn,
  hM as bo,
  fM as bp,
  k1 as bq,
  dM as br,
  W0 as bs,
  Q0 as bt,
  br as bu,
  dx as bv,
  px as bw,
  mx as bx,
  gx as by,
  yx as bz,
  YL as c,
  Ed as c0,
  V1 as c1,
  F1 as c2,
  U0 as c3,
  Td as c4,
  Y1 as c5,
  Id as c6,
  J1 as c7,
  Sd as c8,
  q0 as c9,
  sS as cA,
  zg as cB,
  oS as cC,
  cS as cD,
  Od as cE,
  Nx as cF,
  Ld as cG,
  jx as cH,
  Bx as cI,
  $x as cJ,
  Ao as cK,
  Kx as cL,
  Vd as cM,
  Hx as cN,
  AS as cO,
  Z1 as ca,
  ex as cb,
  nx as cc,
  rx as cd,
  ix as ce,
  ux as cf,
  Rd as cg,
  hx as ch,
  bx as ci,
  Cd as cj,
  Tx as ck,
  Bg as cl,
  $g as cm,
  Sx as cn,
  Ax as co,
  Pd as cp,
  Cx as cq,
  nS as cr,
  Ox as cs,
  kd as ct,
  dS as cu,
  Nd as cv,
  fo as cw,
  Mx as cx,
  xd as cy,
  Vx as cz,
  Gx as d,
  Wx as e,
  Bt as f,
  cr as g,
  QL as h,
  Mv as i,
  b1 as j,
  de as k,
  E1 as l,
  Rs as m,
  Zt as n,
  aS as o,
  ML as p,
  yn as q,
  So as r,
  Yt as s,
  pS as t,
  WL as u,
  jg as v,
  tL as w,
  T1 as x,
  v1 as y,
  Lx as z
};

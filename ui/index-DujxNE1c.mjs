var Kv = Object.defineProperty;
var zv = (n, e, t) => e in n ? Kv(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t;
var gn = (n, e, t) => zv(n, typeof e != "symbol" ? e + "" : e, t);
import * as Zs from "react";
import re, { useContext as Hv, useRef as Gv, useCallback as Wv, useDebugValue as Qv } from "react";
import { am as om, D as oa, v as Yn, r as Yv, F as Wt, ap as aa, Z as am, g as Uc, S as Jv, a7 as Xv, an as Zv, e as is, aq as cm, $ as xn, z as ew } from "./index-DdFCMvT_.mjs";
import { unstable_batchedUpdates as tw } from "react-dom";
function ca(n) {
  return n && n.__esModule && Object.prototype.hasOwnProperty.call(n, "default") ? n.default : n;
}
function nw(n) {
  if (n.__esModule) return n;
  var e = n.default;
  if (typeof e == "function") {
    var t = function r() {
      return this instanceof r ? Reflect.construct(e, arguments, this.constructor) : e.apply(this, arguments);
    };
    t.prototype = e.prototype;
  } else t = {};
  return Object.defineProperty(t, "__esModule", { value: !0 }), Object.keys(n).forEach(function(r) {
    var i = Object.getOwnPropertyDescriptor(n, r);
    Object.defineProperty(t, r, i.get ? i : {
      enumerable: !0,
      get: function() {
        return n[r];
      }
    });
  }), t;
}
var um = {}, uf = globalThis.MutationObserver || globalThis.WebKitMutationObserver, $i;
if (uf) {
  var lf = 0, rw = new uf(eo), hf = globalThis.document.createTextNode("");
  rw.observe(hf, {
    characterData: !0
  }), $i = function() {
    hf.data = lf = ++lf % 2;
  };
} else if (!globalThis.setImmediate && typeof globalThis.MessageChannel < "u") {
  var ff = new globalThis.MessageChannel();
  ff.port1.onmessage = eo, $i = function() {
    ff.port2.postMessage(0);
  };
} else "document" in globalThis && "onreadystatechange" in globalThis.document.createElement("script") ? $i = function() {
  var n = globalThis.document.createElement("script");
  n.onreadystatechange = function() {
    eo(), n.onreadystatechange = null, n.parentNode.removeChild(n), n = null;
  }, globalThis.document.documentElement.appendChild(n);
} : $i = function() {
  setTimeout(eo, 0);
};
var jc, Bi = [];
function eo() {
  jc = !0;
  for (var n, e, t = Bi.length; t; ) {
    for (e = Bi, Bi = [], n = -1; ++n < t; )
      e[n]();
    t = Bi.length;
  }
  jc = !1;
}
var iw = sw;
function sw(n) {
  Bi.push(n) === 1 && !jc && $i();
}
var ow = iw;
function pi() {
}
var Et = {}, lm = ["REJECTED"], $c = ["FULFILLED"], hm = ["PENDING"], aw = kr;
function kr(n) {
  if (typeof n != "function")
    throw new TypeError("resolver must be a function");
  this.state = hm, this.queue = [], this.outcome = void 0, n !== pi && fm(this, n);
}
kr.prototype.catch = function(n) {
  return this.then(null, n);
};
kr.prototype.then = function(n, e) {
  if (typeof n != "function" && this.state === $c || typeof e != "function" && this.state === lm)
    return this;
  var t = new this.constructor(pi);
  if (this.state !== hm) {
    var r = this.state === $c ? n : e;
    zu(t, r, this.outcome);
  } else
    this.queue.push(new ws(t, n, e));
  return t;
};
function ws(n, e, t) {
  this.promise = n, typeof e == "function" && (this.onFulfilled = e, this.callFulfilled = this.otherCallFulfilled), typeof t == "function" && (this.onRejected = t, this.callRejected = this.otherCallRejected);
}
ws.prototype.callFulfilled = function(n) {
  Et.resolve(this.promise, n);
};
ws.prototype.otherCallFulfilled = function(n) {
  zu(this.promise, this.onFulfilled, n);
};
ws.prototype.callRejected = function(n) {
  Et.reject(this.promise, n);
};
ws.prototype.otherCallRejected = function(n) {
  zu(this.promise, this.onRejected, n);
};
function zu(n, e, t) {
  ow(function() {
    var r;
    try {
      r = e(t);
    } catch (i) {
      return Et.reject(n, i);
    }
    r === n ? Et.reject(n, new TypeError("Cannot resolve promise with itself")) : Et.resolve(n, r);
  });
}
Et.resolve = function(n, e) {
  var t = dm(cw, e);
  if (t.status === "error")
    return Et.reject(n, t.value);
  var r = t.value;
  if (r)
    fm(n, r);
  else {
    n.state = $c, n.outcome = e;
    for (var i = -1, s = n.queue.length; ++i < s; )
      n.queue[i].callFulfilled(e);
  }
  return n;
};
Et.reject = function(n, e) {
  n.state = lm, n.outcome = e;
  for (var t = -1, r = n.queue.length; ++t < r; )
    n.queue[t].callRejected(e);
  return n;
};
function cw(n) {
  var e = n && n.then;
  if (n && (typeof n == "object" || typeof n == "function") && typeof e == "function")
    return function() {
      e.apply(n, arguments);
    };
}
function fm(n, e) {
  var t = !1;
  function r(c) {
    t || (t = !0, Et.reject(n, c));
  }
  function i(c) {
    t || (t = !0, Et.resolve(n, c));
  }
  function s() {
    e(i, r);
  }
  var o = dm(s);
  o.status === "error" && r(o.value);
}
function dm(n, e) {
  var t = {};
  try {
    t.value = n(e), t.status = "success";
  } catch (r) {
    t.status = "error", t.value = r;
  }
  return t;
}
kr.resolve = uw;
function uw(n) {
  return n instanceof this ? n : Et.resolve(new this(pi), n);
}
kr.reject = lw;
function lw(n) {
  var e = new this(pi);
  return Et.reject(e, n);
}
kr.all = hw;
function hw(n) {
  var e = this;
  if (Object.prototype.toString.call(n) !== "[object Array]")
    return this.reject(new TypeError("must be an array"));
  var t = n.length, r = !1;
  if (!t)
    return this.resolve([]);
  for (var i = new Array(t), s = 0, o = -1, c = new this(pi); ++o < t; )
    u(n[o], o);
  return c;
  function u(l, f) {
    e.resolve(l).then(h, function(y) {
      r || (r = !0, Et.reject(c, y));
    });
    function h(y) {
      i[f] = y, ++s === t && !r && (r = !0, Et.resolve(c, i));
    }
  }
}
kr.race = fw;
function fw(n) {
  var e = this;
  if (Object.prototype.toString.call(n) !== "[object Array]")
    return this.reject(new TypeError("must be an array"));
  var t = n.length, r = !1;
  if (!t)
    return this.resolve([]);
  for (var i = -1, s = new this(pi); ++i < t; )
    o(n[i]);
  return s;
  function o(c) {
    e.resolve(c).then(function(u) {
      r || (r = !0, Et.resolve(s, u));
    }, function(u) {
      r || (r = !0, Et.reject(s, u));
    });
  }
}
const dw = /* @__PURE__ */ ca(aw);
var pw = typeof Promise == "function" ? Promise : dw;
const mw = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: pw
}, Symbol.toStringTag, { value: "Module" })), gw = /* @__PURE__ */ nw(mw);
(function(n) {
  var e = gw;
  function t(i, s, o) {
    return typeof s != "string" ? e.reject(new Error("doc id is required")) : i.get(s).catch(function(c) {
      if (c.status !== 404)
        throw c;
      return {};
    }).then(function(c) {
      var u = c._rev, l = o(c);
      return l ? (l._id = s, l._rev = u, r(i, l, o)) : { updated: !1, rev: u, id: s };
    });
  }
  function r(i, s, o) {
    return i.put(s).then(function(c) {
      return {
        updated: !0,
        rev: c.rev,
        id: s._id
      };
    }, function(c) {
      if (c.status !== 409)
        throw c;
      return t(i, s._id, o);
    });
  }
  n.upsert = function(s, o, c) {
    var u = this, l = t(u, s, o);
    if (typeof c != "function")
      return l;
    l.then(function(f) {
      c(null, f);
    }, c);
  }, n.putIfNotExists = function(s, o, c) {
    var u = this;
    typeof s != "string" && (c = o, o = s, s = o._id);
    var l = function(h) {
      return h._rev ? !1 : o;
    }, f = t(u, s, l);
    if (typeof c != "function")
      return f;
    f.then(function(h) {
      c(null, h);
    }, c);
  }, typeof window < "u" && window.PouchDB && window.PouchDB.plugin(n);
})(um);
const yw = /* @__PURE__ */ ca(um);
var pm = { exports: {} };
(function(n, e) {
  (function(t) {
    n.exports = t();
  })(function(t) {
    var r = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
    function i(E, g) {
      var d = E[0], m = E[1], v = E[2], I = E[3];
      d += (m & v | ~m & I) + g[0] - 680876936 | 0, d = (d << 7 | d >>> 25) + m | 0, I += (d & m | ~d & v) + g[1] - 389564586 | 0, I = (I << 12 | I >>> 20) + d | 0, v += (I & d | ~I & m) + g[2] + 606105819 | 0, v = (v << 17 | v >>> 15) + I | 0, m += (v & I | ~v & d) + g[3] - 1044525330 | 0, m = (m << 22 | m >>> 10) + v | 0, d += (m & v | ~m & I) + g[4] - 176418897 | 0, d = (d << 7 | d >>> 25) + m | 0, I += (d & m | ~d & v) + g[5] + 1200080426 | 0, I = (I << 12 | I >>> 20) + d | 0, v += (I & d | ~I & m) + g[6] - 1473231341 | 0, v = (v << 17 | v >>> 15) + I | 0, m += (v & I | ~v & d) + g[7] - 45705983 | 0, m = (m << 22 | m >>> 10) + v | 0, d += (m & v | ~m & I) + g[8] + 1770035416 | 0, d = (d << 7 | d >>> 25) + m | 0, I += (d & m | ~d & v) + g[9] - 1958414417 | 0, I = (I << 12 | I >>> 20) + d | 0, v += (I & d | ~I & m) + g[10] - 42063 | 0, v = (v << 17 | v >>> 15) + I | 0, m += (v & I | ~v & d) + g[11] - 1990404162 | 0, m = (m << 22 | m >>> 10) + v | 0, d += (m & v | ~m & I) + g[12] + 1804603682 | 0, d = (d << 7 | d >>> 25) + m | 0, I += (d & m | ~d & v) + g[13] - 40341101 | 0, I = (I << 12 | I >>> 20) + d | 0, v += (I & d | ~I & m) + g[14] - 1502002290 | 0, v = (v << 17 | v >>> 15) + I | 0, m += (v & I | ~v & d) + g[15] + 1236535329 | 0, m = (m << 22 | m >>> 10) + v | 0, d += (m & I | v & ~I) + g[1] - 165796510 | 0, d = (d << 5 | d >>> 27) + m | 0, I += (d & v | m & ~v) + g[6] - 1069501632 | 0, I = (I << 9 | I >>> 23) + d | 0, v += (I & m | d & ~m) + g[11] + 643717713 | 0, v = (v << 14 | v >>> 18) + I | 0, m += (v & d | I & ~d) + g[0] - 373897302 | 0, m = (m << 20 | m >>> 12) + v | 0, d += (m & I | v & ~I) + g[5] - 701558691 | 0, d = (d << 5 | d >>> 27) + m | 0, I += (d & v | m & ~v) + g[10] + 38016083 | 0, I = (I << 9 | I >>> 23) + d | 0, v += (I & m | d & ~m) + g[15] - 660478335 | 0, v = (v << 14 | v >>> 18) + I | 0, m += (v & d | I & ~d) + g[4] - 405537848 | 0, m = (m << 20 | m >>> 12) + v | 0, d += (m & I | v & ~I) + g[9] + 568446438 | 0, d = (d << 5 | d >>> 27) + m | 0, I += (d & v | m & ~v) + g[14] - 1019803690 | 0, I = (I << 9 | I >>> 23) + d | 0, v += (I & m | d & ~m) + g[3] - 187363961 | 0, v = (v << 14 | v >>> 18) + I | 0, m += (v & d | I & ~d) + g[8] + 1163531501 | 0, m = (m << 20 | m >>> 12) + v | 0, d += (m & I | v & ~I) + g[13] - 1444681467 | 0, d = (d << 5 | d >>> 27) + m | 0, I += (d & v | m & ~v) + g[2] - 51403784 | 0, I = (I << 9 | I >>> 23) + d | 0, v += (I & m | d & ~m) + g[7] + 1735328473 | 0, v = (v << 14 | v >>> 18) + I | 0, m += (v & d | I & ~d) + g[12] - 1926607734 | 0, m = (m << 20 | m >>> 12) + v | 0, d += (m ^ v ^ I) + g[5] - 378558 | 0, d = (d << 4 | d >>> 28) + m | 0, I += (d ^ m ^ v) + g[8] - 2022574463 | 0, I = (I << 11 | I >>> 21) + d | 0, v += (I ^ d ^ m) + g[11] + 1839030562 | 0, v = (v << 16 | v >>> 16) + I | 0, m += (v ^ I ^ d) + g[14] - 35309556 | 0, m = (m << 23 | m >>> 9) + v | 0, d += (m ^ v ^ I) + g[1] - 1530992060 | 0, d = (d << 4 | d >>> 28) + m | 0, I += (d ^ m ^ v) + g[4] + 1272893353 | 0, I = (I << 11 | I >>> 21) + d | 0, v += (I ^ d ^ m) + g[7] - 155497632 | 0, v = (v << 16 | v >>> 16) + I | 0, m += (v ^ I ^ d) + g[10] - 1094730640 | 0, m = (m << 23 | m >>> 9) + v | 0, d += (m ^ v ^ I) + g[13] + 681279174 | 0, d = (d << 4 | d >>> 28) + m | 0, I += (d ^ m ^ v) + g[0] - 358537222 | 0, I = (I << 11 | I >>> 21) + d | 0, v += (I ^ d ^ m) + g[3] - 722521979 | 0, v = (v << 16 | v >>> 16) + I | 0, m += (v ^ I ^ d) + g[6] + 76029189 | 0, m = (m << 23 | m >>> 9) + v | 0, d += (m ^ v ^ I) + g[9] - 640364487 | 0, d = (d << 4 | d >>> 28) + m | 0, I += (d ^ m ^ v) + g[12] - 421815835 | 0, I = (I << 11 | I >>> 21) + d | 0, v += (I ^ d ^ m) + g[15] + 530742520 | 0, v = (v << 16 | v >>> 16) + I | 0, m += (v ^ I ^ d) + g[2] - 995338651 | 0, m = (m << 23 | m >>> 9) + v | 0, d += (v ^ (m | ~I)) + g[0] - 198630844 | 0, d = (d << 6 | d >>> 26) + m | 0, I += (m ^ (d | ~v)) + g[7] + 1126891415 | 0, I = (I << 10 | I >>> 22) + d | 0, v += (d ^ (I | ~m)) + g[14] - 1416354905 | 0, v = (v << 15 | v >>> 17) + I | 0, m += (I ^ (v | ~d)) + g[5] - 57434055 | 0, m = (m << 21 | m >>> 11) + v | 0, d += (v ^ (m | ~I)) + g[12] + 1700485571 | 0, d = (d << 6 | d >>> 26) + m | 0, I += (m ^ (d | ~v)) + g[3] - 1894986606 | 0, I = (I << 10 | I >>> 22) + d | 0, v += (d ^ (I | ~m)) + g[10] - 1051523 | 0, v = (v << 15 | v >>> 17) + I | 0, m += (I ^ (v | ~d)) + g[1] - 2054922799 | 0, m = (m << 21 | m >>> 11) + v | 0, d += (v ^ (m | ~I)) + g[8] + 1873313359 | 0, d = (d << 6 | d >>> 26) + m | 0, I += (m ^ (d | ~v)) + g[15] - 30611744 | 0, I = (I << 10 | I >>> 22) + d | 0, v += (d ^ (I | ~m)) + g[6] - 1560198380 | 0, v = (v << 15 | v >>> 17) + I | 0, m += (I ^ (v | ~d)) + g[13] + 1309151649 | 0, m = (m << 21 | m >>> 11) + v | 0, d += (v ^ (m | ~I)) + g[4] - 145523070 | 0, d = (d << 6 | d >>> 26) + m | 0, I += (m ^ (d | ~v)) + g[11] - 1120210379 | 0, I = (I << 10 | I >>> 22) + d | 0, v += (d ^ (I | ~m)) + g[2] + 718787259 | 0, v = (v << 15 | v >>> 17) + I | 0, m += (I ^ (v | ~d)) + g[9] - 343485551 | 0, m = (m << 21 | m >>> 11) + v | 0, E[0] = d + E[0] | 0, E[1] = m + E[1] | 0, E[2] = v + E[2] | 0, E[3] = I + E[3] | 0;
    }
    function s(E) {
      var g = [], d;
      for (d = 0; d < 64; d += 4)
        g[d >> 2] = E.charCodeAt(d) + (E.charCodeAt(d + 1) << 8) + (E.charCodeAt(d + 2) << 16) + (E.charCodeAt(d + 3) << 24);
      return g;
    }
    function o(E) {
      var g = [], d;
      for (d = 0; d < 64; d += 4)
        g[d >> 2] = E[d] + (E[d + 1] << 8) + (E[d + 2] << 16) + (E[d + 3] << 24);
      return g;
    }
    function c(E) {
      var g = E.length, d = [1732584193, -271733879, -1732584194, 271733878], m, v, I, R, b, A;
      for (m = 64; m <= g; m += 64)
        i(d, s(E.substring(m - 64, m)));
      for (E = E.substring(m - 64), v = E.length, I = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], m = 0; m < v; m += 1)
        I[m >> 2] |= E.charCodeAt(m) << (m % 4 << 3);
      if (I[m >> 2] |= 128 << (m % 4 << 3), m > 55)
        for (i(d, I), m = 0; m < 16; m += 1)
          I[m] = 0;
      return R = g * 8, R = R.toString(16).match(/(.*?)(.{0,8})$/), b = parseInt(R[2], 16), A = parseInt(R[1], 16) || 0, I[14] = b, I[15] = A, i(d, I), d;
    }
    function u(E) {
      var g = E.length, d = [1732584193, -271733879, -1732584194, 271733878], m, v, I, R, b, A;
      for (m = 64; m <= g; m += 64)
        i(d, o(E.subarray(m - 64, m)));
      for (E = m - 64 < g ? E.subarray(m - 64) : new Uint8Array(0), v = E.length, I = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], m = 0; m < v; m += 1)
        I[m >> 2] |= E[m] << (m % 4 << 3);
      if (I[m >> 2] |= 128 << (m % 4 << 3), m > 55)
        for (i(d, I), m = 0; m < 16; m += 1)
          I[m] = 0;
      return R = g * 8, R = R.toString(16).match(/(.*?)(.{0,8})$/), b = parseInt(R[2], 16), A = parseInt(R[1], 16) || 0, I[14] = b, I[15] = A, i(d, I), d;
    }
    function l(E) {
      var g = "", d;
      for (d = 0; d < 4; d += 1)
        g += r[E >> d * 8 + 4 & 15] + r[E >> d * 8 & 15];
      return g;
    }
    function f(E) {
      var g;
      for (g = 0; g < E.length; g += 1)
        E[g] = l(E[g]);
      return E.join("");
    }
    f(c("hello")), typeof ArrayBuffer < "u" && !ArrayBuffer.prototype.slice && function() {
      function E(g, d) {
        return g = g | 0 || 0, g < 0 ? Math.max(g + d, 0) : Math.min(g, d);
      }
      ArrayBuffer.prototype.slice = function(g, d) {
        var m = this.byteLength, v = E(g, m), I = m, R, b, A, O;
        return d !== t && (I = E(d, m)), v > I ? new ArrayBuffer(0) : (R = I - v, b = new ArrayBuffer(R), A = new Uint8Array(b), O = new Uint8Array(this, v, R), A.set(O), b);
      };
    }();
    function h(E) {
      return /[\u0080-\uFFFF]/.test(E) && (E = unescape(encodeURIComponent(E))), E;
    }
    function y(E, g) {
      var d = E.length, m = new ArrayBuffer(d), v = new Uint8Array(m), I;
      for (I = 0; I < d; I += 1)
        v[I] = E.charCodeAt(I);
      return g ? v : m;
    }
    function T(E) {
      return String.fromCharCode.apply(null, new Uint8Array(E));
    }
    function S(E, g, d) {
      var m = new Uint8Array(E.byteLength + g.byteLength);
      return m.set(new Uint8Array(E)), m.set(new Uint8Array(g), E.byteLength), m;
    }
    function C(E) {
      var g = [], d = E.length, m;
      for (m = 0; m < d - 1; m += 2)
        g.push(parseInt(E.substr(m, 2), 16));
      return String.fromCharCode.apply(String, g);
    }
    function w() {
      this.reset();
    }
    return w.prototype.append = function(E) {
      return this.appendBinary(h(E)), this;
    }, w.prototype.appendBinary = function(E) {
      this._buff += E, this._length += E.length;
      var g = this._buff.length, d;
      for (d = 64; d <= g; d += 64)
        i(this._hash, s(this._buff.substring(d - 64, d)));
      return this._buff = this._buff.substring(d - 64), this;
    }, w.prototype.end = function(E) {
      var g = this._buff, d = g.length, m, v = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], I;
      for (m = 0; m < d; m += 1)
        v[m >> 2] |= g.charCodeAt(m) << (m % 4 << 3);
      return this._finish(v, d), I = f(this._hash), E && (I = C(I)), this.reset(), I;
    }, w.prototype.reset = function() {
      return this._buff = "", this._length = 0, this._hash = [1732584193, -271733879, -1732584194, 271733878], this;
    }, w.prototype.getState = function() {
      return {
        buff: this._buff,
        length: this._length,
        hash: this._hash.slice()
      };
    }, w.prototype.setState = function(E) {
      return this._buff = E.buff, this._length = E.length, this._hash = E.hash, this;
    }, w.prototype.destroy = function() {
      delete this._hash, delete this._buff, delete this._length;
    }, w.prototype._finish = function(E, g) {
      var d = g, m, v, I;
      if (E[d >> 2] |= 128 << (d % 4 << 3), d > 55)
        for (i(this._hash, E), d = 0; d < 16; d += 1)
          E[d] = 0;
      m = this._length * 8, m = m.toString(16).match(/(.*?)(.{0,8})$/), v = parseInt(m[2], 16), I = parseInt(m[1], 16) || 0, E[14] = v, E[15] = I, i(this._hash, E);
    }, w.hash = function(E, g) {
      return w.hashBinary(h(E), g);
    }, w.hashBinary = function(E, g) {
      var d = c(E), m = f(d);
      return g ? C(m) : m;
    }, w.ArrayBuffer = function() {
      this.reset();
    }, w.ArrayBuffer.prototype.append = function(E) {
      var g = S(this._buff.buffer, E), d = g.length, m;
      for (this._length += E.byteLength, m = 64; m <= d; m += 64)
        i(this._hash, o(g.subarray(m - 64, m)));
      return this._buff = m - 64 < d ? new Uint8Array(g.buffer.slice(m - 64)) : new Uint8Array(0), this;
    }, w.ArrayBuffer.prototype.end = function(E) {
      var g = this._buff, d = g.length, m = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], v, I;
      for (v = 0; v < d; v += 1)
        m[v >> 2] |= g[v] << (v % 4 << 3);
      return this._finish(m, d), I = f(this._hash), E && (I = C(I)), this.reset(), I;
    }, w.ArrayBuffer.prototype.reset = function() {
      return this._buff = new Uint8Array(0), this._length = 0, this._hash = [1732584193, -271733879, -1732584194, 271733878], this;
    }, w.ArrayBuffer.prototype.getState = function() {
      var E = w.prototype.getState.call(this);
      return E.buff = T(E.buff), E;
    }, w.ArrayBuffer.prototype.setState = function(E) {
      return E.buff = y(E.buff, !0), w.prototype.setState.call(this, E);
    }, w.ArrayBuffer.prototype.destroy = w.prototype.destroy, w.ArrayBuffer.prototype._finish = w.prototype._finish, w.ArrayBuffer.hash = function(E, g) {
      var d = u(new Uint8Array(E)), m = f(d);
      return g ? C(m) : m;
    }, w;
  });
})(pm);
var _w = pm.exports;
const Bc = /* @__PURE__ */ ca(_w);
var to, vw = new Uint8Array(16);
function ww() {
  if (!to && (to = typeof crypto < "u" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto < "u" && typeof msCrypto.getRandomValues == "function" && msCrypto.getRandomValues.bind(msCrypto), !to))
    throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
  return to(vw);
}
const Ew = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
function Tw(n) {
  return typeof n == "string" && Ew.test(n);
}
var it = [];
for (var ic = 0; ic < 256; ++ic)
  it.push((ic + 256).toString(16).substr(1));
function bw(n) {
  var e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, t = (it[n[e + 0]] + it[n[e + 1]] + it[n[e + 2]] + it[n[e + 3]] + "-" + it[n[e + 4]] + it[n[e + 5]] + "-" + it[n[e + 6]] + it[n[e + 7]] + "-" + it[n[e + 8]] + it[n[e + 9]] + "-" + it[n[e + 10]] + it[n[e + 11]] + it[n[e + 12]] + it[n[e + 13]] + it[n[e + 14]] + it[n[e + 15]]).toLowerCase();
  if (!Tw(t))
    throw TypeError("Stringified UUID is invalid");
  return t;
}
function Hu(n, e, t) {
  n = n || {};
  var r = n.random || (n.rng || ww)();
  if (r[6] = r[6] & 15 | 64, r[8] = r[8] & 63 | 128, e) {
    t = t || 0;
    for (var i = 0; i < 16; ++i)
      e[t + i] = r[i];
    return e;
  }
  return bw(r);
}
var ua = {};
ua.stringify = function(e) {
  var t = [];
  t.push({ obj: e });
  for (var r = "", i, s, o, c, u, l, f, h, y, T, S; i = t.pop(); )
    if (s = i.obj, o = i.prefix || "", c = i.val || "", r += o, c)
      r += c;
    else if (typeof s != "object")
      r += typeof s > "u" ? null : JSON.stringify(s);
    else if (s === null)
      r += "null";
    else if (Array.isArray(s)) {
      for (t.push({ val: "]" }), u = s.length - 1; u >= 0; u--)
        l = u === 0 ? "" : ",", t.push({ obj: s[u], prefix: l });
      t.push({ val: "[" });
    } else {
      f = [];
      for (h in s)
        s.hasOwnProperty(h) && f.push(h);
      for (t.push({ val: "}" }), u = f.length - 1; u >= 0; u--)
        y = f[u], T = s[y], S = u > 0 ? "," : "", S += JSON.stringify(y) + ":", t.push({ obj: T, prefix: S });
      t.push({ val: "{" });
    }
  return r;
};
function Ur(n, e, t) {
  var r = t[t.length - 1];
  n === r.element && (t.pop(), r = t[t.length - 1]);
  var i = r.element, s = r.index;
  if (Array.isArray(i))
    i.push(n);
  else if (s === e.length - 2) {
    var o = e.pop();
    i[o] = n;
  } else
    e.push(n);
}
ua.parse = function(n) {
  for (var e = [], t = [], r = 0, i, s, o, c, u, l, f, h, y; ; ) {
    if (i = n[r++], i === "}" || i === "]" || typeof i > "u") {
      if (e.length === 1)
        return e.pop();
      Ur(e.pop(), e, t);
      continue;
    }
    switch (i) {
      case " ":
      case "	":
      case `
`:
      case ":":
      case ",":
        break;
      case "n":
        r += 3, Ur(null, e, t);
        break;
      case "t":
        r += 3, Ur(!0, e, t);
        break;
      case "f":
        r += 4, Ur(!1, e, t);
        break;
      case "0":
      case "1":
      case "2":
      case "3":
      case "4":
      case "5":
      case "6":
      case "7":
      case "8":
      case "9":
      case "-":
        for (s = "", r--; ; )
          if (o = n[r++], /[\d\.\-e\+]/.test(o))
            s += o;
          else {
            r--;
            break;
          }
        Ur(parseFloat(s), e, t);
        break;
      case '"':
        for (c = "", u = void 0, l = 0; f = n[r++], f !== '"' || u === "\\" && l % 2 === 1; )
          c += f, u = f, u === "\\" ? l++ : l = 0;
        Ur(JSON.parse('"' + c + '"'), e, t);
        break;
      case "[":
        h = { element: [], index: e.length }, e.push(h.element), t.push(h);
        break;
      case "{":
        y = { element: {}, index: e.length }, e.push(y.element), t.push(y);
        break;
      default:
        throw new Error(
          "unexpectedly reached end of input: " + i
        );
    }
  }
};
var Gu = { exports: {} }, Gr = typeof Reflect == "object" ? Reflect : null, df = Gr && typeof Gr.apply == "function" ? Gr.apply : function(e, t, r) {
  return Function.prototype.apply.call(e, t, r);
}, _o;
Gr && typeof Gr.ownKeys == "function" ? _o = Gr.ownKeys : Object.getOwnPropertySymbols ? _o = function(e) {
  return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e));
} : _o = function(e) {
  return Object.getOwnPropertyNames(e);
};
function Iw(n) {
  console && console.warn && console.warn(n);
}
var mm = Number.isNaN || function(e) {
  return e !== e;
};
function ke() {
  ke.init.call(this);
}
Gu.exports = ke;
Gu.exports.once = Cw;
ke.EventEmitter = ke;
ke.prototype._events = void 0;
ke.prototype._eventsCount = 0;
ke.prototype._maxListeners = void 0;
var pf = 10;
function la(n) {
  if (typeof n != "function")
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof n);
}
Object.defineProperty(ke, "defaultMaxListeners", {
  enumerable: !0,
  get: function() {
    return pf;
  },
  set: function(n) {
    if (typeof n != "number" || n < 0 || mm(n))
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + n + ".");
    pf = n;
  }
});
ke.init = function() {
  (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) && (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
};
ke.prototype.setMaxListeners = function(e) {
  if (typeof e != "number" || e < 0 || mm(e))
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e + ".");
  return this._maxListeners = e, this;
};
function gm(n) {
  return n._maxListeners === void 0 ? ke.defaultMaxListeners : n._maxListeners;
}
ke.prototype.getMaxListeners = function() {
  return gm(this);
};
ke.prototype.emit = function(e) {
  for (var t = [], r = 1; r < arguments.length; r++) t.push(arguments[r]);
  var i = e === "error", s = this._events;
  if (s !== void 0)
    i = i && s.error === void 0;
  else if (!i)
    return !1;
  if (i) {
    var o;
    if (t.length > 0 && (o = t[0]), o instanceof Error)
      throw o;
    var c = new Error("Unhandled error." + (o ? " (" + o.message + ")" : ""));
    throw c.context = o, c;
  }
  var u = s[e];
  if (u === void 0)
    return !1;
  if (typeof u == "function")
    df(u, this, t);
  else
    for (var l = u.length, f = Em(u, l), r = 0; r < l; ++r)
      df(f[r], this, t);
  return !0;
};
function ym(n, e, t, r) {
  var i, s, o;
  if (la(t), s = n._events, s === void 0 ? (s = n._events = /* @__PURE__ */ Object.create(null), n._eventsCount = 0) : (s.newListener !== void 0 && (n.emit(
    "newListener",
    e,
    t.listener ? t.listener : t
  ), s = n._events), o = s[e]), o === void 0)
    o = s[e] = t, ++n._eventsCount;
  else if (typeof o == "function" ? o = s[e] = r ? [t, o] : [o, t] : r ? o.unshift(t) : o.push(t), i = gm(n), i > 0 && o.length > i && !o.warned) {
    o.warned = !0;
    var c = new Error("Possible EventEmitter memory leak detected. " + o.length + " " + String(e) + " listeners added. Use emitter.setMaxListeners() to increase limit");
    c.name = "MaxListenersExceededWarning", c.emitter = n, c.type = e, c.count = o.length, Iw(c);
  }
  return n;
}
ke.prototype.addListener = function(e, t) {
  return ym(this, e, t, !1);
};
ke.prototype.on = ke.prototype.addListener;
ke.prototype.prependListener = function(e, t) {
  return ym(this, e, t, !0);
};
function Sw() {
  if (!this.fired)
    return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
}
function _m(n, e, t) {
  var r = { fired: !1, wrapFn: void 0, target: n, type: e, listener: t }, i = Sw.bind(r);
  return i.listener = t, r.wrapFn = i, i;
}
ke.prototype.once = function(e, t) {
  return la(t), this.on(e, _m(this, e, t)), this;
};
ke.prototype.prependOnceListener = function(e, t) {
  return la(t), this.prependListener(e, _m(this, e, t)), this;
};
ke.prototype.removeListener = function(e, t) {
  var r, i, s, o, c;
  if (la(t), i = this._events, i === void 0)
    return this;
  if (r = i[e], r === void 0)
    return this;
  if (r === t || r.listener === t)
    --this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : (delete i[e], i.removeListener && this.emit("removeListener", e, r.listener || t));
  else if (typeof r != "function") {
    for (s = -1, o = r.length - 1; o >= 0; o--)
      if (r[o] === t || r[o].listener === t) {
        c = r[o].listener, s = o;
        break;
      }
    if (s < 0)
      return this;
    s === 0 ? r.shift() : Aw(r, s), r.length === 1 && (i[e] = r[0]), i.removeListener !== void 0 && this.emit("removeListener", e, c || t);
  }
  return this;
};
ke.prototype.off = ke.prototype.removeListener;
ke.prototype.removeAllListeners = function(e) {
  var t, r, i;
  if (r = this._events, r === void 0)
    return this;
  if (r.removeListener === void 0)
    return arguments.length === 0 ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : r[e] !== void 0 && (--this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : delete r[e]), this;
  if (arguments.length === 0) {
    var s = Object.keys(r), o;
    for (i = 0; i < s.length; ++i)
      o = s[i], o !== "removeListener" && this.removeAllListeners(o);
    return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
  }
  if (t = r[e], typeof t == "function")
    this.removeListener(e, t);
  else if (t !== void 0)
    for (i = t.length - 1; i >= 0; i--)
      this.removeListener(e, t[i]);
  return this;
};
function vm(n, e, t) {
  var r = n._events;
  if (r === void 0)
    return [];
  var i = r[e];
  return i === void 0 ? [] : typeof i == "function" ? t ? [i.listener || i] : [i] : t ? Rw(i) : Em(i, i.length);
}
ke.prototype.listeners = function(e) {
  return vm(this, e, !0);
};
ke.prototype.rawListeners = function(e) {
  return vm(this, e, !1);
};
ke.listenerCount = function(n, e) {
  return typeof n.listenerCount == "function" ? n.listenerCount(e) : wm.call(n, e);
};
ke.prototype.listenerCount = wm;
function wm(n) {
  var e = this._events;
  if (e !== void 0) {
    var t = e[n];
    if (typeof t == "function")
      return 1;
    if (t !== void 0)
      return t.length;
  }
  return 0;
}
ke.prototype.eventNames = function() {
  return this._eventsCount > 0 ? _o(this._events) : [];
};
function Em(n, e) {
  for (var t = new Array(e), r = 0; r < e; ++r)
    t[r] = n[r];
  return t;
}
function Aw(n, e) {
  for (; e + 1 < n.length; e++)
    n[e] = n[e + 1];
  n.pop();
}
function Rw(n) {
  for (var e = new Array(n.length), t = 0; t < e.length; ++t)
    e[t] = n[t].listener || n[t];
  return e;
}
function Cw(n, e) {
  return new Promise(function(t, r) {
    function i(o) {
      n.removeListener(e, s), r(o);
    }
    function s() {
      typeof n.removeListener == "function" && n.removeListener("error", i), t([].slice.call(arguments));
    }
    Tm(n, e, s, { once: !0 }), e !== "error" && Pw(n, i, { once: !0 });
  });
}
function Pw(n, e, t) {
  typeof n.on == "function" && Tm(n, "error", e, t);
}
function Tm(n, e, t, r) {
  if (typeof n.on == "function")
    r.once ? n.once(e, t) : n.on(e, t);
  else if (typeof n.addEventListener == "function")
    n.addEventListener(e, function i(s) {
      r.once && n.removeEventListener(e, i), t(s);
    });
  else
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof n);
}
var kw = Gu.exports;
const Tn = /* @__PURE__ */ ca(kw);
function Ow(n) {
  return typeof ArrayBuffer < "u" && n instanceof ArrayBuffer || typeof Blob < "u" && n instanceof Blob;
}
function Dw(n) {
  return n instanceof ArrayBuffer ? n.slice(0) : n.slice(0, n.size, n.type);
}
var bm = Function.prototype.toString, Nw = bm.call(Object);
function xw(n) {
  var e = Object.getPrototypeOf(n);
  if (e === null)
    return !0;
  var t = e.constructor;
  return typeof t == "function" && t instanceof t && bm.call(t) == Nw;
}
function Je(n) {
  var e, t, r;
  if (!n || typeof n != "object")
    return n;
  if (Array.isArray(n)) {
    for (e = [], t = 0, r = n.length; t < r; t++)
      e[t] = Je(n[t]);
    return e;
  }
  if (n instanceof Date && isFinite(n))
    return n.toISOString();
  if (Ow(n))
    return Dw(n);
  if (!xw(n))
    return n;
  e = {};
  for (t in n)
    if (Object.prototype.hasOwnProperty.call(n, t)) {
      var i = Je(n[t]);
      typeof i < "u" && (e[t] = i);
    }
  return e;
}
function Im(n) {
  var e = !1;
  return function(...t) {
    if (e)
      throw new Error("once called more than once");
    e = !0, n.apply(this, t);
  };
}
function Sm(n) {
  return function(...e) {
    e = Je(e);
    var t = this, r = typeof e[e.length - 1] == "function" ? e.pop() : !1, i = new Promise(function(s, o) {
      var c;
      try {
        var u = Im(function(l, f) {
          l ? o(l) : s(f);
        });
        e.push(u), c = n.apply(t, e), c && typeof c.then == "function" && s(c);
      } catch (l) {
        o(l);
      }
    });
    return r && i.then(function(s) {
      r(null, s);
    }, r), i;
  };
}
function Lw(n, e, t) {
  if (n.constructor.listeners("debug").length) {
    for (var r = ["api", n.name, e], i = 0; i < t.length - 1; i++)
      r.push(t[i]);
    n.constructor.emit("debug", r);
    var s = t[t.length - 1];
    t[t.length - 1] = function(o, c) {
      var u = ["api", n.name, e];
      u = u.concat(
        o ? ["error", o] : ["success", c]
      ), n.constructor.emit("debug", u), s(o, c);
    };
  }
}
function $e(n, e) {
  return Sm(function(...t) {
    if (this._closed)
      return Promise.reject(new Error("database is closed"));
    if (this._destroyed)
      return Promise.reject(new Error("database is destroyed"));
    var r = this;
    return Lw(r, n, t), this.taskqueue.isReady ? e.apply(this, t) : new Promise(function(i, s) {
      r.taskqueue.addTask(function(o) {
        o ? s(o) : i(r[n].apply(r, t));
      });
    });
  });
}
function Es(n, e) {
  for (var t = {}, r = 0, i = e.length; r < i; r++) {
    var s = e[r];
    s in n && (t[s] = n[s]);
  }
  return t;
}
var Mw = 6;
function mf(n) {
  return n;
}
function Vw(n) {
  return [{
    ok: n
  }];
}
function Am(n, e, t) {
  var r = e.docs, i = /* @__PURE__ */ new Map();
  r.forEach(function(C) {
    i.has(C.id) ? i.get(C.id).push(C) : i.set(C.id, [C]);
  });
  var s = i.size, o = 0, c = new Array(s);
  function u() {
    var C = [];
    c.forEach(function(w) {
      w.docs.forEach(function(E) {
        C.push({
          id: w.id,
          docs: [E]
        });
      });
    }), t(null, { results: C });
  }
  function l() {
    ++o === s && u();
  }
  function f(C, w, E) {
    c[C] = { id: w, docs: E }, l();
  }
  var h = [];
  i.forEach(function(C, w) {
    h.push(w);
  });
  var y = 0;
  function T() {
    if (!(y >= h.length)) {
      var C = Math.min(y + Mw, h.length), w = h.slice(y, C);
      S(w, y), y += w.length;
    }
  }
  function S(C, w) {
    C.forEach(function(E, g) {
      var d = w + g, m = i.get(E), v = Es(m[0], ["atts_since", "attachments"]);
      v.open_revs = m.map(function(R) {
        return R.rev;
      }), v.open_revs = v.open_revs.filter(mf);
      var I = mf;
      v.open_revs.length === 0 && (delete v.open_revs, I = Vw), ["revs", "attachments", "binary", "ajax", "latest"].forEach(function(R) {
        R in e && (v[R] = e[R]);
      }), n.get(E, v, function(R, b) {
        var A;
        R ? A = [{ error: R }] : A = I(b), f(d, E, A), T();
      });
    });
  }
  T();
}
var qc;
try {
  localStorage.setItem("_pouch_check_localstorage", 1), qc = !!localStorage.getItem("_pouch_check_localstorage");
} catch {
  qc = !1;
}
function Do() {
  return qc;
}
const an = typeof queueMicrotask == "function" ? queueMicrotask : function(e) {
  Promise.resolve().then(e);
};
class Fw extends Tn {
  constructor() {
    super(), this._listeners = {}, Do() && addEventListener("storage", (e) => {
      this.emit(e.key);
    });
  }
  addListener(e, t, r, i) {
    if (this._listeners[t])
      return;
    var s = !1, o = this;
    function c() {
      if (!o._listeners[t])
        return;
      if (s) {
        s = "waiting";
        return;
      }
      s = !0;
      var u = Es(i, [
        "style",
        "include_docs",
        "attachments",
        "conflicts",
        "filter",
        "doc_ids",
        "view",
        "since",
        "query_params",
        "binary",
        "return_docs"
      ]);
      function l() {
        s = !1;
      }
      r.changes(u).on("change", function(f) {
        f.seq > i.since && !i.cancelled && (i.since = f.seq, i.onChange(f));
      }).on("complete", function() {
        s === "waiting" && an(c), s = !1;
      }).on("error", l);
    }
    this._listeners[t] = c, this.on(e, c);
  }
  removeListener(e, t) {
    t in this._listeners && (super.removeListener(e, this._listeners[t]), delete this._listeners[t]);
  }
  notifyLocalWindows(e) {
    Do() && (localStorage[e] = localStorage[e] === "a" ? "b" : "a");
  }
  notify(e) {
    this.emit(e), this.notifyLocalWindows(e);
  }
}
function $t(n) {
  if (typeof console < "u" && typeof console[n] == "function") {
    var e = Array.prototype.slice.call(arguments, 1);
    console[n].apply(console, e);
  }
}
function Uw(n, e) {
  var t = 6e5;
  n = parseInt(n, 10) || 0, e = parseInt(e, 10), e !== e || e <= n ? e = (n || 1) << 1 : e = e + 1, e > t && (n = t >> 1, e = t);
  var r = Math.random(), i = e - n;
  return ~~(i * r + n);
}
function jw(n) {
  var e = 0;
  return n || (e = 2e3), Uw(n, e);
}
function Kc(n, e) {
  $t("info", "The above " + n + " is totally normal. " + e);
}
class Le extends Error {
  constructor(e, t, r) {
    super(), this.status = e, this.name = t, this.message = r, this.error = !0;
  }
  toString() {
    return JSON.stringify({
      status: this.status,
      name: this.name,
      message: this.message,
      reason: this.reason
    });
  }
}
new Le(401, "unauthorized", "Name or password is incorrect.");
var $w = new Le(400, "bad_request", "Missing JSON list of 'docs'"), Lt = new Le(404, "not_found", "missing"), ei = new Le(409, "conflict", "Document update conflict"), Rm = new Le(400, "bad_request", "_id field must contain a string"), Bw = new Le(412, "missing_id", "_id is required for puts"), qw = new Le(400, "bad_request", "Only reserved document ids may start with underscore.");
new Le(412, "precondition_failed", "Database not open");
var Wu = new Le(500, "unknown_error", "Database encountered an unknown error"), Cm = new Le(500, "badarg", "Some query argument is invalid");
new Le(400, "invalid_request", "Request was invalid");
var Kw = new Le(400, "query_parse_error", "Some query parameter is invalid"), gf = new Le(500, "doc_validation", "Bad special document member"), ha = new Le(400, "bad_request", "Something wrong with the request"), sc = new Le(400, "bad_request", "Document must be a JSON object");
new Le(404, "not_found", "Database not found");
var Qu = new Le(500, "indexed_db_went_bad", "unknown");
new Le(500, "web_sql_went_bad", "unknown");
new Le(500, "levelDB_went_went_bad", "unknown");
new Le(403, "forbidden", "Forbidden by design doc validate_doc_update function");
var vo = new Le(400, "bad_request", "Invalid rev format");
new Le(412, "file_exists", "The database could not be created, the file already exists.");
var zw = new Le(412, "missing_stub", "A pre-existing attachment stub wasn't found");
new Le(413, "invalid_url", "Provided URL is invalid");
function le(n, e) {
  function t(r) {
    for (var i = Object.getOwnPropertyNames(n), s = 0, o = i.length; s < o; s++)
      typeof n[i[s]] != "function" && (this[i[s]] = n[i[s]]);
    this.stack === void 0 && (this.stack = new Error().stack), r !== void 0 && (this.reason = r);
  }
  return t.prototype = Le.prototype, new t(e);
}
function ti(n) {
  if (typeof n != "object") {
    var e = n;
    n = Wu, n.data = e;
  }
  return "error" in n && n.error === "conflict" && (n.name = "conflict", n.status = 409), "name" in n || (n.name = n.error || "unknown"), "status" in n || (n.status = 500), "message" in n || (n.message = n.message || n.reason), "stack" in n || (n.stack = new Error().stack), n;
}
function Hw(n, e, t) {
  try {
    return !n(e, t);
  } catch (i) {
    var r = "Filter function threw: " + i.toString();
    return le(ha, r);
  }
}
function Yu(n) {
  var e = {}, t = n.filter && typeof n.filter == "function";
  return e.query = n.query_params, function(i) {
    i.doc || (i.doc = {});
    var s = t && Hw(n.filter, i.doc, e);
    if (typeof s == "object")
      return s;
    if (s)
      return !1;
    if (!n.include_docs)
      delete i.doc;
    else if (!n.attachments)
      for (var o in i.doc._attachments)
        Object.prototype.hasOwnProperty.call(i.doc._attachments, o) && (i.doc._attachments[o].stub = !0);
    return !0;
  };
}
function Pm(n) {
  var e;
  if (n ? typeof n != "string" ? e = le(Rm) : /^_/.test(n) && !/^_(design|local)/.test(n) && (e = le(qw)) : e = le(Bw), e)
    throw e;
}
function tn(n) {
  return typeof n._remote == "boolean" ? n._remote : typeof n.type == "function" ? ($t(
    "warn",
    "db.type() is deprecated and will be removed in a future version of PouchDB"
  ), n.type() === "http") : !1;
}
function Gw(n, e) {
  return "listenerCount" in n ? n.listenerCount(e) : Tn.listenerCount(n, e);
}
function zc(n) {
  if (!n)
    return null;
  var e = n.split("/");
  return e.length === 2 ? e : e.length === 1 ? [n, n] : null;
}
function yf(n) {
  var e = zc(n);
  return e ? e.join("/") : null;
}
var _f = [
  "source",
  "protocol",
  "authority",
  "userInfo",
  "user",
  "password",
  "host",
  "port",
  "relative",
  "path",
  "directory",
  "file",
  "query",
  "anchor"
], vf = "queryKey", Ww = /(?:^|&)([^&=]*)=?([^&]*)/g, Qw = /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
function km(n) {
  for (var e = Qw.exec(n), t = {}, r = 14; r--; ) {
    var i = _f[r], s = e[r] || "", o = ["user", "password"].indexOf(i) !== -1;
    t[i] = o ? decodeURIComponent(s) : s;
  }
  return t[vf] = {}, t[_f[12]].replace(Ww, function(c, u, l) {
    u && (t[vf][u] = l);
  }), t;
}
function Ju(n, e) {
  var t = [], r = [];
  for (var i in e)
    Object.prototype.hasOwnProperty.call(e, i) && (t.push(i), r.push(e[i]));
  return t.push(n), Function.apply(null, t).apply(null, r);
}
function No(n, e, t) {
  return n.get(e).catch(function(r) {
    if (r.status !== 404)
      throw r;
    return {};
  }).then(function(r) {
    var i = r._rev, s = t(r);
    return s ? (s._id = e, s._rev = i, Yw(n, s, t)) : { updated: !1, rev: i };
  });
}
function Yw(n, e, t) {
  return n.put(e).then(function(r) {
    return {
      updated: !0,
      rev: r.rev
    };
  }, function(r) {
    if (r.status !== 409)
      throw r;
    return No(n, e._id, t);
  });
}
var Xu = function(n) {
  return atob(n);
}, Ts = function(n) {
  return btoa(n);
};
function Zu(n, e) {
  n = n || [], e = e || {};
  try {
    return new Blob(n, e);
  } catch (s) {
    if (s.name !== "TypeError")
      throw s;
    for (var t = typeof BlobBuilder < "u" ? BlobBuilder : typeof MSBlobBuilder < "u" ? MSBlobBuilder : typeof MozBlobBuilder < "u" ? MozBlobBuilder : WebKitBlobBuilder, r = new t(), i = 0; i < n.length; i += 1)
      r.append(n[i]);
    return r.getBlob(e.type);
  }
}
function Jw(n) {
  for (var e = n.length, t = new ArrayBuffer(e), r = new Uint8Array(t), i = 0; i < e; i++)
    r[i] = n.charCodeAt(i);
  return t;
}
function el(n, e) {
  return Zu([Jw(n)], { type: e });
}
function tl(n, e) {
  return el(Xu(n), e);
}
function Xw(n) {
  for (var e = "", t = new Uint8Array(n), r = t.byteLength, i = 0; i < r; i++)
    e += String.fromCharCode(t[i]);
  return e;
}
function Om(n, e) {
  var t = new FileReader(), r = typeof t.readAsBinaryString == "function";
  t.onloadend = function(i) {
    var s = i.target.result || "";
    if (r)
      return e(s);
    e(Xw(s));
  }, r ? t.readAsBinaryString(n) : t.readAsArrayBuffer(n);
}
function Dm(n, e) {
  Om(n, function(t) {
    e(t);
  });
}
function nl(n, e) {
  Dm(n, function(t) {
    e(Ts(t));
  });
}
function Zw(n, e) {
  var t = new FileReader();
  t.onloadend = function(r) {
    var i = r.target.result || new ArrayBuffer(0);
    e(i);
  }, t.readAsArrayBuffer(n);
}
var eE = self.setImmediate || self.setTimeout, tE = 32768;
function nE(n) {
  return Ts(n);
}
function rE(n, e, t, r, i) {
  (t > 0 || r < e.size) && (e = e.slice(t, r)), Zw(e, function(s) {
    n.append(s), i();
  });
}
function iE(n, e, t, r, i) {
  (t > 0 || r < e.length) && (e = e.substring(t, r)), n.appendBinary(e), i();
}
function rl(n, e) {
  var t = typeof n == "string", r = t ? n.length : n.size, i = Math.min(tE, r), s = Math.ceil(r / i), o = 0, c = t ? new Bc() : new Bc.ArrayBuffer(), u = t ? iE : rE;
  function l() {
    eE(h);
  }
  function f() {
    var y = c.end(!0), T = nE(y);
    e(T), c.destroy();
  }
  function h() {
    var y = o * i, T = y + i;
    o++, o < s ? u(c, n, y, T, l) : u(c, n, y, T, f);
  }
  h();
}
function Nm(n) {
  return Bc.hash(n);
}
function xm(n, e) {
  if (!e)
    return Hu().replace(/-/g, "").toLowerCase();
  var t = Object.assign({}, n);
  return delete t._rev_tree, Nm(JSON.stringify(t));
}
var fa = Hu;
function yr(n) {
  for (var e, t, r, i = n.rev_tree.slice(), s; s = i.pop(); ) {
    var o = s.ids, c = o[2], u = s.pos;
    if (c.length) {
      for (var l = 0, f = c.length; l < f; l++)
        i.push({ pos: u + 1, ids: c[l] });
      continue;
    }
    var h = !!o[1].deleted, y = o[0];
    (!e || (r !== h ? r : t !== u ? t < u : e < y)) && (e = y, t = u, r = h);
  }
  return t + "-" + e;
}
function _r(n, e) {
  for (var t = n.slice(), r; r = t.pop(); )
    for (var i = r.pos, s = r.ids, o = s[2], c = e(o.length === 0, i, s[0], r.ctx, s[1]), u = 0, l = o.length; u < l; u++)
      t.push({ pos: i + 1, ids: o[u], ctx: c });
}
function sE(n, e) {
  return n.pos - e.pos;
}
function il(n) {
  var e = [];
  _r(n, function(i, s, o, c, u) {
    i && e.push({ rev: s + "-" + o, pos: s, opts: u });
  }), e.sort(sE).reverse();
  for (var t = 0, r = e.length; t < r; t++)
    delete e[t].pos;
  return e;
}
function sl(n) {
  for (var e = yr(n), t = il(n.rev_tree), r = [], i = 0, s = t.length; i < s; i++) {
    var o = t[i];
    o.rev !== e && !o.opts.deleted && r.push(o.rev);
  }
  return r;
}
function oE(n) {
  var e = [];
  return _r(n.rev_tree, function(t, r, i, s, o) {
    o.status === "available" && !t && (e.push(r + "-" + i), o.status = "missing");
  }), e;
}
function aE(n, e) {
  let t = [];
  const r = n.slice();
  let i;
  for (; i = r.pop(); ) {
    const { pos: s, ids: o } = i, c = `${s}-${o[0]}`, u = o[2];
    if (t.push(c), c === e) {
      if (u.length !== 0)
        throw new Error("The requested revision is not a leaf");
      return t.reverse();
    }
    (u.length === 0 || u.length > 1) && (t = []);
    for (let l = 0, f = u.length; l < f; l++)
      r.push({ pos: s + 1, ids: u[l] });
  }
  if (t.length === 0)
    throw new Error("The requested revision does not exist");
  return t.reverse();
}
function Lm(n) {
  for (var e = [], t = n.slice(), r; r = t.pop(); ) {
    var i = r.pos, s = r.ids, o = s[0], c = s[1], u = s[2], l = u.length === 0, f = r.history ? r.history.slice() : [];
    f.push({ id: o, opts: c }), l && e.push({ pos: i + 1 - f.length, ids: f });
    for (var h = 0, y = u.length; h < y; h++)
      t.push({ pos: i + 1, ids: u[h], history: f });
  }
  return e.reverse();
}
function cE(n, e) {
  return n.pos - e.pos;
}
function uE(n, e, t) {
  for (var r = 0, i = n.length, s; r < i; )
    s = r + i >>> 1, t(n[s], e) < 0 ? r = s + 1 : i = s;
  return r;
}
function lE(n, e, t) {
  var r = uE(n, e, t);
  n.splice(r, 0, e);
}
function wf(n, e) {
  for (var t, r, i = e, s = n.length; i < s; i++) {
    var o = n[i], c = [o.id, o.opts, []];
    r ? (r[2].push(c), r = c) : t = r = c;
  }
  return t;
}
function hE(n, e) {
  return n[0] < e[0] ? -1 : 1;
}
function Ef(n, e) {
  for (var t = [{ tree1: n, tree2: e }], r = !1; t.length > 0; ) {
    var i = t.pop(), s = i.tree1, o = i.tree2;
    (s[1].status || o[1].status) && (s[1].status = s[1].status === "available" || o[1].status === "available" ? "available" : "missing");
    for (var c = 0; c < o[2].length; c++) {
      if (!s[2][0]) {
        r = "new_leaf", s[2][0] = o[2][c];
        continue;
      }
      for (var u = !1, l = 0; l < s[2].length; l++)
        s[2][l][0] === o[2][c][0] && (t.push({ tree1: s[2][l], tree2: o[2][c] }), u = !0);
      u || (r = "new_branch", lE(s[2], o[2][c], hE));
    }
  }
  return { conflicts: r, tree: n };
}
function Mm(n, e, t) {
  var r = [], i = !1, s = !1, o;
  if (!n.length)
    return { tree: [e], conflicts: "new_leaf" };
  for (var c = 0, u = n.length; c < u; c++) {
    var l = n[c];
    if (l.pos === e.pos && l.ids[0] === e.ids[0])
      o = Ef(l.ids, e.ids), r.push({ pos: l.pos, ids: o.tree }), i = i || o.conflicts, s = !0;
    else if (t !== !0) {
      var f = l.pos < e.pos ? l : e, h = l.pos < e.pos ? e : l, y = h.pos - f.pos, T = [], S = [];
      for (S.push({ ids: f.ids, diff: y, parent: null, parentIdx: null }); S.length > 0; ) {
        var C = S.pop();
        if (C.diff === 0) {
          C.ids[0] === h.ids[0] && T.push(C);
          continue;
        }
        for (var w = C.ids[2], E = 0, g = w.length; E < g; E++)
          S.push({
            ids: w[E],
            diff: C.diff - 1,
            parent: C.ids,
            parentIdx: E
          });
      }
      var d = T[0];
      d ? (o = Ef(d.ids, h.ids), d.parent[2][d.parentIdx] = o.tree, r.push({ pos: f.pos, ids: f.ids }), i = i || o.conflicts, s = !0) : r.push(l);
    } else
      r.push(l);
  }
  return s || r.push(e), r.sort(cE), {
    tree: r,
    conflicts: i || "internal_node"
  };
}
function fE(n, e) {
  for (var t = Lm(n), r, i, s = 0, o = t.length; s < o; s++) {
    var c = t[s], u = c.ids, l;
    if (u.length > e) {
      r || (r = {});
      var f = u.length - e;
      l = {
        pos: c.pos + f,
        ids: wf(u, f)
      };
      for (var h = 0; h < f; h++) {
        var y = c.pos + h + "-" + u[h].id;
        r[y] = !0;
      }
    } else
      l = {
        pos: c.pos,
        ids: wf(u, 0)
      };
    i ? i = Mm(i, l, !0).tree : i = [l];
  }
  return r && _r(i, function(T, S, C) {
    delete r[S + "-" + C];
  }), {
    tree: i,
    revs: r ? Object.keys(r) : []
  };
}
function Vm(n, e, t) {
  var r = Mm(n, e), i = fE(r.tree, t);
  return {
    tree: i.tree,
    stemmedRevs: i.revs,
    conflicts: r.conflicts
  };
}
function dE(n, e) {
  for (var t = n.slice(), r = e.split("-"), i = parseInt(r[0], 10), s = r[1], o; o = t.pop(); ) {
    if (o.pos === i && o.ids[0] === s)
      return !0;
    for (var c = o.ids[2], u = 0, l = c.length; u < l; u++)
      t.push({ pos: o.pos + 1, ids: c[u] });
  }
  return !1;
}
function pE(n) {
  return n.ids;
}
function yn(n, e) {
  e || (e = yr(n));
  for (var t = e.substring(e.indexOf("-") + 1), r = n.rev_tree.map(pE), i; i = r.pop(); ) {
    if (i[0] === t)
      return !!i[1].deleted;
    r = r.concat(i[2]);
  }
}
function fr(n) {
  return typeof n == "string" && n.startsWith("_local/");
}
function mE(n, e) {
  for (var t = e.rev_tree.slice(), r; r = t.pop(); ) {
    var i = r.pos, s = r.ids, o = s[0], c = s[1], u = s[2], l = u.length === 0, f = r.history ? r.history.slice() : [];
    if (f.push({ id: o, pos: i, opts: c }), l)
      for (var h = 0, y = f.length; h < y; h++) {
        var T = f[h], S = T.pos + "-" + T.id;
        if (S === n)
          return i + "-" + o;
      }
    for (var C = 0, w = u.length; C < w; C++)
      t.push({ pos: i + 1, ids: u[C], history: f });
  }
  throw new Error("Unable to resolve latest revision for id " + e.id + ", rev " + n);
}
function gE(n, e, t, r) {
  try {
    n.emit("change", e, t, r);
  } catch (i) {
    $t("error", 'Error in .on("change", function):', i);
  }
}
function yE(n, e, t) {
  var r = [{ rev: n._rev }];
  t.style === "all_docs" && (r = il(e.rev_tree).map(function(s) {
    return { rev: s.rev };
  }));
  var i = {
    id: e.id,
    changes: r,
    doc: n
  };
  return yn(e, n._rev) && (i.deleted = !0), t.conflicts && (i.doc._conflicts = sl(e), i.doc._conflicts.length || delete i.doc._conflicts), i;
}
class _E extends Tn {
  constructor(e, t, r) {
    super(), this.db = e, t = t ? Je(t) : {};
    var i = t.complete = Im((c, u) => {
      c ? Gw(this, "error") > 0 && this.emit("error", c) : this.emit("complete", u), this.removeAllListeners(), e.removeListener("destroyed", s);
    });
    r && (this.on("complete", function(c) {
      r(null, c);
    }), this.on("error", r));
    const s = () => {
      this.cancel();
    };
    e.once("destroyed", s), t.onChange = (c, u, l) => {
      this.isCancelled || gE(this, c, u, l);
    };
    var o = new Promise(function(c, u) {
      t.complete = function(l, f) {
        l ? u(l) : c(f);
      };
    });
    this.once("cancel", function() {
      e.removeListener("destroyed", s), t.complete(null, { status: "cancelled" });
    }), this.then = o.then.bind(o), this.catch = o.catch.bind(o), this.then(function(c) {
      i(null, c);
    }, i), e.taskqueue.isReady ? this.validateChanges(t) : e.taskqueue.addTask((c) => {
      c ? t.complete(c) : this.isCancelled ? this.emit("cancel") : this.validateChanges(t);
    });
  }
  cancel() {
    this.isCancelled = !0, this.db.taskqueue.isReady && this.emit("cancel");
  }
  validateChanges(e) {
    var t = e.complete;
    de._changesFilterPlugin ? de._changesFilterPlugin.validate(e, (r) => {
      if (r)
        return t(r);
      this.doChanges(e);
    }) : this.doChanges(e);
  }
  doChanges(e) {
    var t = e.complete;
    if (e = Je(e), "live" in e && !("continuous" in e) && (e.continuous = e.live), e.processChange = yE, e.since === "latest" && (e.since = "now"), e.since || (e.since = 0), e.since === "now") {
      this.db.info().then((i) => {
        if (this.isCancelled) {
          t(null, { status: "cancelled" });
          return;
        }
        e.since = i.update_seq, this.doChanges(e);
      }, t);
      return;
    }
    if (de._changesFilterPlugin) {
      if (de._changesFilterPlugin.normalize(e), de._changesFilterPlugin.shouldFilter(this, e))
        return de._changesFilterPlugin.filter(this, e);
    } else
      ["doc_ids", "filter", "selector", "view"].forEach(function(i) {
        i in e && $t(
          "warn",
          'The "' + i + '" option was passed in to changes/replicate, but pouchdb-changes-filter plugin is not installed, so it was ignored. Please install the plugin to enable filtering.'
        );
      });
    "descending" in e || (e.descending = !1), e.limit = e.limit === 0 ? 1 : e.limit, e.complete = t;
    var r = this.db._changes(e);
    if (r && typeof r.cancel == "function") {
      const i = this.cancel;
      this.cancel = (...s) => {
        r.cancel(), i.apply(this, s);
      };
    }
  }
}
function oc(n, e) {
  return function(t, r) {
    t || r[0] && r[0].error ? (t = t || r[0], t.docId = e, n(t)) : n(null, r.length ? r[0] : r);
  };
}
function vE(n) {
  for (var e = 0; e < n.length; e++) {
    var t = n[e];
    if (t._deleted)
      delete t._attachments;
    else if (t._attachments)
      for (var r = Object.keys(t._attachments), i = 0; i < r.length; i++) {
        var s = r[i];
        t._attachments[s] = Es(
          t._attachments[s],
          ["data", "digest", "content_type", "length", "revpos", "stub"]
        );
      }
  }
}
function wE(n, e) {
  if (n._id === e._id) {
    const t = n._revisions ? n._revisions.start : 0, r = e._revisions ? e._revisions.start : 0;
    return t - r;
  }
  return n._id < e._id ? -1 : 1;
}
function EE(n) {
  var e = {}, t = [];
  return _r(n, function(r, i, s, o) {
    var c = i + "-" + s;
    return r && (e[c] = 0), o !== void 0 && t.push({ from: o, to: c }), c;
  }), t.reverse(), t.forEach(function(r) {
    e[r.from] === void 0 ? e[r.from] = 1 + e[r.to] : e[r.from] = Math.min(e[r.from], 1 + e[r.to]);
  }), e;
}
function TE(n) {
  var e = "limit" in n ? n.keys.slice(n.skip, n.limit + n.skip) : n.skip > 0 ? n.keys.slice(n.skip) : n.keys;
  n.keys = e, n.skip = 0, delete n.limit, n.descending && (e.reverse(), n.descending = !1);
}
function Fm(n) {
  var e = n._compactionQueue[0], t = e.opts, r = e.callback;
  n.get("_local/compaction").catch(function() {
    return !1;
  }).then(function(i) {
    i && i.last_seq && (t.last_seq = i.last_seq), n._compact(t, function(s, o) {
      s ? r(s) : r(null, o), an(function() {
        n._compactionQueue.shift(), n._compactionQueue.length && Fm(n);
      });
    });
  });
}
function bE(n, e, t) {
  return n.get("_local/purges").then(function(r) {
    const i = r.purgeSeq + 1;
    return r.purges.push({
      docId: e,
      rev: t,
      purgeSeq: i
    }), r.purges.length > self.purged_infos_limit && r.purges.splice(0, r.purges.length - self.purged_infos_limit), r.purgeSeq = i, r;
  }).catch(function(r) {
    if (r.status !== 404)
      throw r;
    return {
      _id: "_local/purges",
      purges: [{
        docId: e,
        rev: t,
        purgeSeq: 0
      }],
      purgeSeq: 0
    };
  }).then(function(r) {
    return n.put(r);
  });
}
function IE(n) {
  return n.charAt(0) === "_" ? n + " is not a valid attachment name, attachment names cannot start with '_'" : !1;
}
function ac(n) {
  return n === null || typeof n != "object" || Array.isArray(n);
}
const SE = /^\d+-[^-]*$/;
function cc(n) {
  return typeof n == "string" && SE.test(n);
}
class Um extends Tn {
  _setup() {
    this.post = $e("post", function(e, t, r) {
      if (typeof t == "function" && (r = t, t = {}), ac(e))
        return r(le(sc));
      this.bulkDocs({ docs: [e] }, t, oc(r, e._id));
    }).bind(this), this.put = $e("put", function(e, t, r) {
      if (typeof t == "function" && (r = t, t = {}), ac(e))
        return r(le(sc));
      if (Pm(e._id), "_rev" in e && !cc(e._rev))
        return r(le(vo));
      if (fr(e._id) && typeof this._putLocal == "function")
        return e._deleted ? this._removeLocal(e, r) : this._putLocal(e, r);
      const i = (o) => {
        typeof this._put == "function" && t.new_edits !== !1 ? this._put(e, t, o) : this.bulkDocs({ docs: [e] }, t, oc(o, e._id));
      };
      t.force && e._rev ? (s(), i(function(o) {
        var c = o ? null : { ok: !0, id: e._id, rev: e._rev };
        r(o, c);
      })) : i(r);
      function s() {
        var o = e._rev.split("-"), c = o[1], u = parseInt(o[0], 10), l = u + 1, f = xm();
        e._revisions = {
          start: l,
          ids: [f, c]
        }, e._rev = l + "-" + f, t.new_edits = !1;
      }
    }).bind(this), this.putAttachment = $e("putAttachment", function(e, t, r, i, s) {
      var o = this;
      typeof s == "function" && (s = i, i = r, r = null), typeof s > "u" && (s = i, i = r, r = null), s || $t("warn", "Attachment", t, "on document", e, "is missing content_type");
      function c(u) {
        var l = "_rev" in u ? parseInt(u._rev, 10) : 0;
        return u._attachments = u._attachments || {}, u._attachments[t] = {
          content_type: s,
          data: i,
          revpos: ++l
        }, o.put(u);
      }
      return o.get(e).then(function(u) {
        if (u._rev !== r)
          throw le(ei);
        return c(u);
      }, function(u) {
        if (u.reason === Lt.message)
          return c({ _id: e });
        throw u;
      });
    }).bind(this), this.removeAttachment = $e("removeAttachment", function(e, t, r, i) {
      this.get(e, (s, o) => {
        if (s) {
          i(s);
          return;
        }
        if (o._rev !== r) {
          i(le(ei));
          return;
        }
        if (!o._attachments)
          return i();
        delete o._attachments[t], Object.keys(o._attachments).length === 0 && delete o._attachments, this.put(o, i);
      });
    }).bind(this), this.remove = $e("remove", function(e, t, r, i) {
      var s;
      typeof t == "string" ? (s = {
        _id: e,
        _rev: t
      }, typeof r == "function" && (i = r, r = {})) : (s = e, typeof t == "function" ? (i = t, r = {}) : (i = r, r = t)), r = r || {}, r.was_delete = !0;
      var o = { _id: s._id, _rev: s._rev || r.rev };
      if (o._deleted = !0, fr(o._id) && typeof this._removeLocal == "function")
        return this._removeLocal(s, i);
      this.bulkDocs({ docs: [o] }, r, oc(i, o._id));
    }).bind(this), this.revsDiff = $e("revsDiff", function(e, t, r) {
      typeof t == "function" && (r = t, t = {});
      var i = Object.keys(e);
      if (!i.length)
        return r(null, {});
      var s = 0, o = /* @__PURE__ */ new Map();
      function c(l, f) {
        o.has(l) || o.set(l, { missing: [] }), o.get(l).missing.push(f);
      }
      function u(l, f) {
        var h = e[l].slice(0);
        _r(f, function(y, T, S, C, w) {
          var E = T + "-" + S, g = h.indexOf(E);
          g !== -1 && (h.splice(g, 1), w.status !== "available" && c(l, E));
        }), h.forEach(function(y) {
          c(l, y);
        });
      }
      i.forEach(function(l) {
        this._getRevisionTree(l, function(f, h) {
          if (f && f.status === 404 && f.message === "missing")
            o.set(l, { missing: e[l] });
          else {
            if (f)
              return r(f);
            u(l, h);
          }
          if (++s === i.length) {
            var y = {};
            return o.forEach(function(T, S) {
              y[S] = T;
            }), r(null, y);
          }
        });
      }, this);
    }).bind(this), this.bulkGet = $e("bulkGet", function(e, t) {
      Am(this, e, t);
    }).bind(this), this.compactDocument = $e("compactDocument", function(e, t, r) {
      this._getRevisionTree(e, (i, s) => {
        if (i)
          return r(i);
        var o = EE(s), c = [], u = [];
        Object.keys(o).forEach(function(l) {
          o[l] > t && c.push(l);
        }), _r(s, function(l, f, h, y, T) {
          var S = f + "-" + h;
          T.status === "available" && c.indexOf(S) !== -1 && u.push(S);
        }), this._doCompaction(e, u, r);
      });
    }).bind(this), this.compact = $e("compact", function(e, t) {
      typeof e == "function" && (t = e, e = {}), e = e || {}, this._compactionQueue = this._compactionQueue || [], this._compactionQueue.push({ opts: e, callback: t }), this._compactionQueue.length === 1 && Fm(this);
    }).bind(this), this.get = $e("get", function(e, t, r) {
      if (typeof t == "function" && (r = t, t = {}), t = t || {}, typeof e != "string")
        return r(le(Rm));
      if (fr(e) && typeof this._getLocal == "function")
        return this._getLocal(e, r);
      var i = [];
      const s = () => {
        var u = [], l = i.length;
        if (!l)
          return r(null, u);
        i.forEach((f) => {
          this.get(e, {
            rev: f,
            revs: t.revs,
            latest: t.latest,
            attachments: t.attachments,
            binary: t.binary
          }, function(h, y) {
            if (h)
              u.push({ missing: f });
            else {
              for (var T, S = 0, C = u.length; S < C; S++)
                if (u[S].ok && u[S].ok._rev === y._rev) {
                  T = !0;
                  break;
                }
              T || u.push({ ok: y });
            }
            l--, l || r(null, u);
          });
        });
      };
      if (t.open_revs) {
        if (t.open_revs === "all")
          this._getRevisionTree(e, function(u, l) {
            if (u)
              return r(u);
            i = il(l).map(function(f) {
              return f.rev;
            }), s();
          });
        else if (Array.isArray(t.open_revs)) {
          i = t.open_revs;
          for (var o = 0; o < i.length; o++) {
            var c = i[o];
            if (!cc(c))
              return r(le(vo));
          }
          s();
        } else
          return r(le(Wu, "function_clause"));
        return;
      }
      return this._get(e, t, (u, l) => {
        if (u)
          return u.docId = e, r(u);
        var f = l.doc, h = l.metadata, y = l.ctx;
        if (t.conflicts) {
          var T = sl(h);
          T.length && (f._conflicts = T);
        }
        if (yn(h, f._rev) && (f._deleted = !0), t.revs || t.revs_info) {
          for (var S = f._rev.split("-"), C = parseInt(S[0], 10), w = S[1], E = Lm(h.rev_tree), g = null, d = 0; d < E.length; d++) {
            var m = E[d];
            const k = m.ids.findIndex((Y) => Y.id === w);
            var v = k === C - 1;
            (v || !g && k !== -1) && (g = m);
          }
          if (!g)
            return u = new Error("invalid rev tree"), u.docId = e, r(u);
          const D = f._rev.split("-")[1], N = g.ids.findIndex((k) => k.id === D) + 1;
          var I = g.ids.length - N;
          if (g.ids.splice(N, I), g.ids.reverse(), t.revs && (f._revisions = {
            start: g.pos + g.ids.length - 1,
            ids: g.ids.map(function(k) {
              return k.id;
            })
          }), t.revs_info) {
            var R = g.pos + g.ids.length;
            f._revs_info = g.ids.map(function(k) {
              return R--, {
                rev: R + "-" + k.id,
                status: k.opts.status
              };
            });
          }
        }
        if (t.attachments && f._attachments) {
          var b = f._attachments, A = Object.keys(b).length;
          if (A === 0)
            return r(null, f);
          Object.keys(b).forEach((D) => {
            this._getAttachment(f._id, D, b[D], {
              binary: t.binary,
              metadata: h,
              ctx: y
            }, function(N, k) {
              var Y = f._attachments[D];
              Y.data = k, delete Y.stub, delete Y.length, --A || r(null, f);
            });
          });
        } else {
          if (f._attachments)
            for (var O in f._attachments)
              Object.prototype.hasOwnProperty.call(f._attachments, O) && (f._attachments[O].stub = !0);
          r(null, f);
        }
      });
    }).bind(this), this.getAttachment = $e("getAttachment", function(e, t, r, i) {
      r instanceof Function && (i = r, r = {}), this._get(e, r, (s, o) => {
        if (s)
          return i(s);
        if (o.doc._attachments && o.doc._attachments[t])
          r.ctx = o.ctx, r.binary = !0, r.metadata = o.metadata, this._getAttachment(
            e,
            t,
            o.doc._attachments[t],
            r,
            i
          );
        else
          return i(le(Lt));
      });
    }).bind(this), this.allDocs = $e("allDocs", function(e, t) {
      if (typeof e == "function" && (t = e, e = {}), e.skip = typeof e.skip < "u" ? e.skip : 0, e.start_key && (e.startkey = e.start_key), e.end_key && (e.endkey = e.end_key), "keys" in e) {
        if (!Array.isArray(e.keys))
          return t(new TypeError("options.keys must be an array"));
        var r = ["startkey", "endkey", "key"].filter(function(i) {
          return i in e;
        })[0];
        if (r) {
          t(le(
            Kw,
            "Query parameter `" + r + "` is not compatible with multi-get"
          ));
          return;
        }
        if (!tn(this) && (TE(e), e.keys.length === 0))
          return this._allDocs({ limit: 0 }, t);
      }
      return this._allDocs(e, t);
    }).bind(this), this.close = $e("close", function(e) {
      return this._closed = !0, this.emit("closed"), this._close(e);
    }).bind(this), this.info = $e("info", function(e) {
      this._info((t, r) => {
        if (t)
          return e(t);
        r.db_name = r.db_name || this.name, r.auto_compaction = !!(this.auto_compaction && !tn(this)), r.adapter = this.adapter, e(null, r);
      });
    }).bind(this), this.id = $e("id", function(e) {
      return this._id(e);
    }).bind(this), this.bulkDocs = $e("bulkDocs", function(e, t, r) {
      if (typeof t == "function" && (r = t, t = {}), t = t || {}, Array.isArray(e) && (e = {
        docs: e
      }), !e || !e.docs || !Array.isArray(e.docs))
        return r(le($w));
      for (var i = 0; i < e.docs.length; ++i) {
        const u = e.docs[i];
        if (ac(u))
          return r(le(sc));
        if ("_rev" in u && !cc(u._rev))
          return r(le(vo));
      }
      var s;
      if (e.docs.forEach(function(u) {
        u._attachments && Object.keys(u._attachments).forEach(function(l) {
          s = s || IE(l), u._attachments[l].content_type || $t("warn", "Attachment", l, "on document", u._id, "is missing content_type");
        });
      }), s)
        return r(le(ha, s));
      "new_edits" in t || ("new_edits" in e ? t.new_edits = e.new_edits : t.new_edits = !0);
      var o = this;
      !t.new_edits && !tn(o) && e.docs.sort(wE), vE(e.docs);
      var c = e.docs.map(function(u) {
        return u._id;
      });
      this._bulkDocs(e, t, function(u, l) {
        if (u)
          return r(u);
        if (t.new_edits || (l = l.filter(function(y) {
          return y.error;
        })), !tn(o))
          for (var f = 0, h = l.length; f < h; f++)
            l[f].id = l[f].id || c[f];
        r(null, l);
      });
    }).bind(this), this.registerDependentDatabase = $e("registerDependentDatabase", function(e, t) {
      var r = Je(this.__opts);
      this.__opts.view_adapter && (r.adapter = this.__opts.view_adapter);
      var i = new this.constructor(e, r);
      function s(o) {
        return o.dependentDbs = o.dependentDbs || {}, o.dependentDbs[e] ? !1 : (o.dependentDbs[e] = !0, o);
      }
      No(this, "_local/_pouch_dependentDbs", s).then(function() {
        t(null, { db: i });
      }).catch(t);
    }).bind(this), this.destroy = $e("destroy", function(e, t) {
      typeof e == "function" && (t = e, e = {});
      var r = "use_prefix" in this ? this.use_prefix : !0;
      const i = () => {
        this._destroy(e, (s, o) => {
          if (s)
            return t(s);
          this._destroyed = !0, this.emit("destroyed"), t(null, o || { ok: !0 });
        });
      };
      if (tn(this))
        return i();
      this.get("_local/_pouch_dependentDbs", (s, o) => {
        if (s)
          return s.status !== 404 ? t(s) : i();
        var c = o.dependentDbs, u = this.constructor, l = Object.keys(c).map((f) => {
          var h = r ? f.replace(new RegExp("^" + u.prefix), "") : f;
          return new u(h, this.__opts).destroy();
        });
        Promise.all(l).then(i, t);
      });
    }).bind(this);
  }
  _compact(e, t) {
    var r = {
      return_docs: !1,
      last_seq: e.last_seq || 0,
      since: e.last_seq || 0
    }, i = [], s, o = 0;
    const c = (f) => {
      this.activeTasks.update(s, {
        completed_items: ++o
      }), i.push(this.compactDocument(f.id, 0));
    }, u = (f) => {
      this.activeTasks.remove(s, f), t(f);
    }, l = (f) => {
      var h = f.last_seq;
      Promise.all(i).then(() => No(this, "_local/compaction", (y) => !y.last_seq || y.last_seq < h ? (y.last_seq = h, y) : !1)).then(() => {
        this.activeTasks.remove(s), t(null, { ok: !0 });
      }).catch(u);
    };
    this.info().then((f) => {
      s = this.activeTasks.add({
        name: "database_compaction",
        total_items: f.update_seq - r.last_seq
      }), this.changes(r).on("change", c).on("complete", l).on("error", u);
    });
  }
  changes(e, t) {
    return typeof e == "function" && (t = e, e = {}), e = e || {}, e.return_docs = "return_docs" in e ? e.return_docs : !e.live, new _E(this, e, t);
  }
  type() {
    return typeof this._type == "function" ? this._type() : this.adapter;
  }
}
Um.prototype.purge = $e("_purge", function(n, e, t) {
  if (typeof this._purge > "u")
    return t(le(Wu, "Purge is not implemented in the " + this.adapter + " adapter."));
  var r = this;
  r._getRevisionTree(n, (i, s) => {
    if (i)
      return t(i);
    if (!s)
      return t(le(Lt));
    let o;
    try {
      o = aE(s, e);
    } catch (c) {
      return t(c.message || c);
    }
    r._purge(n, o, (c, u) => {
      if (c)
        return t(c);
      bE(r, n, e).then(function() {
        return t(null, u);
      });
    });
  });
});
class AE {
  constructor() {
    this.isReady = !1, this.failed = !1, this.queue = [];
  }
  execute() {
    var e;
    if (this.failed)
      for (; e = this.queue.shift(); )
        e(this.failed);
    else
      for (; e = this.queue.shift(); )
        e();
  }
  fail(e) {
    this.failed = e, this.execute();
  }
  ready(e) {
    this.isReady = !0, this.db = e, this.execute();
  }
  addTask(e) {
    this.queue.push(e), this.failed && this.execute();
  }
}
function RE(n, e) {
  var t = n.match(/([a-z-]*):\/\/(.*)/);
  if (t)
    return {
      name: /https?/.test(t[1]) ? t[1] + "://" + t[2] : t[2],
      adapter: t[1]
    };
  var r = de.adapters, i = de.preferredAdapters, s = de.prefix, o = e.adapter;
  if (!o)
    for (var c = 0; c < i.length; ++c) {
      if (o = i[c], o === "idb" && "websql" in r && Do() && localStorage["_pouch__websqldb_" + s + n]) {
        $t("log", 'PouchDB is downgrading "' + n + '" to WebSQL to avoid data loss, because it was already opened with WebSQL.');
        continue;
      }
      break;
    }
  var u = r[o], l = u && "use_prefix" in u ? u.use_prefix : !0;
  return {
    name: l ? s + n : n,
    adapter: o
  };
}
function CE(n, e) {
  n.prototype = Object.create(e.prototype, {
    constructor: { value: n }
  });
}
function jm(n, e) {
  let t = function(...r) {
    if (!(this instanceof t))
      return new t(...r);
    e.apply(this, r);
  };
  return CE(t, n), t;
}
function PE(n) {
  function e(r) {
    n.removeListener("closed", t), r || n.constructor.emit("destroyed", n.name);
  }
  function t() {
    n.removeListener("destroyed", e), n.constructor.emit("unref", n);
  }
  n.once("destroyed", e), n.once("closed", t), n.constructor.emit("ref", n);
}
class Tf extends Um {
  constructor(e, t) {
    super(), this._setup(e, t);
  }
  _setup(e, t) {
    if (super._setup(), t = t || {}, e && typeof e == "object" && (t = e, e = t.name, delete t.name), t.deterministic_revs === void 0 && (t.deterministic_revs = !0), this.__opts = t = Je(t), this.auto_compaction = t.auto_compaction, this.purged_infos_limit = t.purged_infos_limit || 1e3, this.prefix = de.prefix, typeof e != "string")
      throw new Error("Missing/invalid DB name");
    var r = (t.prefix || "") + e, i = RE(r, t);
    if (t.name = i.name, t.adapter = t.adapter || i.adapter, this.name = e, this._adapter = t.adapter, de.emit("debug", ["adapter", "Picked adapter: ", t.adapter]), !de.adapters[t.adapter] || !de.adapters[t.adapter].valid())
      throw new Error("Invalid Adapter: " + t.adapter);
    if (t.view_adapter && (!de.adapters[t.view_adapter] || !de.adapters[t.view_adapter].valid()))
      throw new Error("Invalid View Adapter: " + t.view_adapter);
    this.taskqueue = new AE(), this.adapter = t.adapter, de.adapters[t.adapter].call(this, t, (s) => {
      if (s)
        return this.taskqueue.fail(s);
      PE(this), this.emit("created", this), de.emit("created", this.name), this.taskqueue.ready(this);
    });
  }
}
const de = jm(Tf, function(n, e) {
  Tf.prototype._setup.call(this, n, e);
});
var $m = fetch, Wr = Headers;
class kE {
  constructor() {
    this.tasks = {};
  }
  list() {
    return Object.values(this.tasks);
  }
  add(e) {
    const t = Hu();
    return this.tasks[t] = {
      id: t,
      name: e.name,
      total_items: e.total_items,
      created_at: (/* @__PURE__ */ new Date()).toJSON()
    }, t;
  }
  get(e) {
    return this.tasks[e];
  }
  /* eslint-disable no-unused-vars */
  remove(e, t) {
    return delete this.tasks[e], this.tasks;
  }
  update(e, t) {
    const r = this.tasks[e];
    if (typeof r < "u") {
      const i = {
        id: r.id,
        name: r.name,
        created_at: r.created_at,
        total_items: t.total_items || r.total_items,
        completed_items: t.completed_items || r.completed_items,
        updated_at: (/* @__PURE__ */ new Date()).toJSON()
      };
      this.tasks[e] = i;
    }
    return this.tasks;
  }
}
de.adapters = {};
de.preferredAdapters = [];
de.prefix = "_pouch_";
var bf = new Tn();
function OE(n) {
  Object.keys(Tn.prototype).forEach(function(t) {
    typeof Tn.prototype[t] == "function" && (n[t] = bf[t].bind(bf));
  });
  var e = n._destructionListeners = /* @__PURE__ */ new Map();
  n.on("ref", function(r) {
    e.has(r.name) || e.set(r.name, []), e.get(r.name).push(r);
  }), n.on("unref", function(r) {
    if (e.has(r.name)) {
      var i = e.get(r.name), s = i.indexOf(r);
      s < 0 || (i.splice(s, 1), i.length > 1 ? e.set(r.name, i) : e.delete(r.name));
    }
  }), n.on("destroyed", function(r) {
    if (e.has(r)) {
      var i = e.get(r);
      e.delete(r), i.forEach(function(s) {
        s.emit("destroyed", !0);
      });
    }
  });
}
OE(de);
de.adapter = function(n, e, t) {
  e.valid() && (de.adapters[n] = e, t && de.preferredAdapters.push(n));
};
de.plugin = function(n) {
  if (typeof n == "function")
    n(de);
  else {
    if (typeof n != "object" || Object.keys(n).length === 0)
      throw new Error('Invalid plugin: got "' + n + '", expected an object or a function');
    Object.keys(n).forEach(function(e) {
      de.prototype[e] = n[e];
    });
  }
  return this.__defaults && (de.__defaults = Object.assign({}, this.__defaults)), de;
};
de.defaults = function(n) {
  let e = jm(de, function(t, r) {
    r = r || {}, t && typeof t == "object" && (r = t, t = r.name, delete r.name), r = Object.assign({}, e.__defaults, r), de.call(this, t, r);
  });
  return e.preferredAdapters = de.preferredAdapters.slice(), Object.keys(de).forEach(function(t) {
    t in e || (e[t] = de[t]);
  }), e.__defaults = Object.assign({}, this.__defaults, n), e;
};
de.fetch = function(n, e) {
  return $m(n, e);
};
de.prototype.activeTasks = de.activeTasks = new kE();
var DE = "9.0.0";
function ol(n, e) {
  for (var t = n, r = 0, i = e.length; r < i; r++) {
    var s = e[r];
    if (t = t[s], !t)
      break;
  }
  return t;
}
function NE(n, e) {
  return n < e ? -1 : n > e ? 1 : 0;
}
function al(n) {
  for (var e = [], t = "", r = 0, i = n.length; r < i; r++) {
    var s = n[r];
    r > 0 && n[r - 1] === "\\" && (s === "$" || s === ".") ? t = t.substring(0, t.length - 1) + s : s === "." ? (e.push(t), t = "") : t += s;
  }
  return e.push(t), e;
}
var xE = ["$or", "$nor", "$not"];
function Bm(n) {
  return xE.indexOf(n) > -1;
}
function qm(n) {
  return Object.keys(n)[0];
}
function LE(n) {
  return n[qm(n)];
}
function ss(n) {
  var e = {}, t = { $or: !0, $nor: !0 };
  return n.forEach(function(r) {
    Object.keys(r).forEach(function(i) {
      var s = r[i];
      if (typeof s != "object" && (s = { $eq: s }), Bm(i))
        if (s instanceof Array) {
          if (t[i]) {
            t[i] = !1, e[i] = s;
            return;
          }
          var o = [];
          e[i].forEach(function(u) {
            Object.keys(s).forEach(function(l) {
              var f = s[l], h = Math.max(Object.keys(u).length, Object.keys(f).length), y = ss([u, f]);
              Object.keys(y).length <= h || o.push(y);
            });
          }), e[i] = o;
        } else
          e[i] = ss([s]);
      else {
        var c = e[i] = e[i] || {};
        Object.keys(s).forEach(function(u) {
          var l = s[u];
          if (u === "$gt" || u === "$gte")
            return ME(u, l, c);
          if (u === "$lt" || u === "$lte")
            return VE(u, l, c);
          if (u === "$ne")
            return FE(l, c);
          if (u === "$eq")
            return UE(l, c);
          if (u === "$regex")
            return jE(l, c);
          c[u] = l;
        });
      }
    });
  }), e;
}
function ME(n, e, t) {
  typeof t.$eq < "u" || (typeof t.$gte < "u" ? n === "$gte" ? e > t.$gte && (t.$gte = e) : e >= t.$gte && (delete t.$gte, t.$gt = e) : typeof t.$gt < "u" ? n === "$gte" ? e > t.$gt && (delete t.$gt, t.$gte = e) : e > t.$gt && (t.$gt = e) : t[n] = e);
}
function VE(n, e, t) {
  typeof t.$eq < "u" || (typeof t.$lte < "u" ? n === "$lte" ? e < t.$lte && (t.$lte = e) : e <= t.$lte && (delete t.$lte, t.$lt = e) : typeof t.$lt < "u" ? n === "$lte" ? e < t.$lt && (delete t.$lt, t.$lte = e) : e < t.$lt && (t.$lt = e) : t[n] = e);
}
function FE(n, e) {
  "$ne" in e ? e.$ne.push(n) : e.$ne = [n];
}
function UE(n, e) {
  delete e.$gt, delete e.$gte, delete e.$lt, delete e.$lte, delete e.$ne, e.$eq = n;
}
function jE(n, e) {
  "$regex" in e ? e.$regex.push(n) : e.$regex = [n];
}
function Km(n) {
  for (var e in n) {
    if (Array.isArray(n))
      for (var t in n)
        n[t].$and && (n[t] = ss(n[t].$and));
    var r = n[e];
    typeof r == "object" && Km(r);
  }
  return n;
}
function zm(n, e) {
  for (var t in n) {
    t === "$and" && (e = !0);
    var r = n[t];
    typeof r == "object" && (e = zm(r, e));
  }
  return e;
}
function $E(n) {
  var e = Je(n);
  zm(e, !1) && (e = Km(e), "$and" in e && (e = ss(e.$and))), ["$or", "$nor"].forEach(function(o) {
    o in e && e[o].forEach(function(c) {
      for (var u = Object.keys(c), l = 0; l < u.length; l++) {
        var f = u[l], h = c[f];
        (typeof h != "object" || h === null) && (c[f] = { $eq: h });
      }
    });
  }), "$not" in e && (e.$not = ss([e.$not]));
  for (var t = Object.keys(e), r = 0; r < t.length; r++) {
    var i = t[r], s = e[i];
    (typeof s != "object" || s === null) && (s = { $eq: s }), e[i] = s;
  }
  return Hc(e), e;
}
function Hc(n) {
  Object.keys(n).forEach(function(e) {
    var t = n[e];
    Array.isArray(t) ? t.forEach(function(r) {
      r && typeof r == "object" && Hc(r);
    }) : e === "$ne" ? n.$ne = [t] : e === "$regex" ? n.$regex = [t] : t && typeof t == "object" && Hc(t);
  });
}
function BE(n, e, t) {
  for (var r = "", i = t - n.length; r.length < i; )
    r += e;
  return r;
}
function qE(n, e, t) {
  var r = BE(n, e, t);
  return r + n;
}
var Hm = -324, Gc = 3, Wc = "";
function qe(n, e) {
  if (n === e)
    return 0;
  n = vr(n), e = vr(e);
  var t = Qc(n), r = Qc(e);
  if (t - r !== 0)
    return t - r;
  switch (typeof n) {
    case "number":
      return n - e;
    case "boolean":
      return n < e ? -1 : 1;
    case "string":
      return QE(n, e);
  }
  return Array.isArray(n) ? WE(n, e) : YE(n, e);
}
function vr(n) {
  switch (typeof n) {
    case "undefined":
      return null;
    case "number":
      return n === 1 / 0 || n === -1 / 0 || isNaN(n) ? null : n;
    case "object":
      var e = n;
      if (Array.isArray(n)) {
        var t = n.length;
        n = new Array(t);
        for (var r = 0; r < t; r++)
          n[r] = vr(e[r]);
      } else {
        if (n instanceof Date)
          return n.toJSON();
        if (n !== null) {
          n = {};
          for (var i in e)
            if (Object.prototype.hasOwnProperty.call(e, i)) {
              var s = e[i];
              typeof s < "u" && (n[i] = vr(s));
            }
        }
      }
  }
  return n;
}
function KE(n) {
  if (n !== null)
    switch (typeof n) {
      case "boolean":
        return n ? 1 : 0;
      case "number":
        return JE(n);
      case "string":
        return n.replace(/\u0002/g, "").replace(/\u0001/g, "").replace(/\u0000/g, "");
      case "object":
        var e = Array.isArray(n), t = e ? n : Object.keys(n), r = -1, i = t.length, s = "";
        if (e)
          for (; ++r < i; )
            s += Ht(t[r]);
        else
          for (; ++r < i; ) {
            var o = t[r];
            s += Ht(o) + Ht(n[o]);
          }
        return s;
    }
  return "";
}
function Ht(n) {
  var e = "\0";
  return n = vr(n), Qc(n) + Wc + KE(n) + e;
}
function zE(n, e) {
  var t = e, r, i = n[e] === "1";
  if (i)
    r = 0, e++;
  else {
    var s = n[e] === "0";
    e++;
    var o = "", c = n.substring(e, e + Gc), u = parseInt(c, 10) + Hm;
    for (s && (u = -u), e += Gc; ; ) {
      var l = n[e];
      if (l === "\0")
        break;
      o += l, e++;
    }
    o = o.split("."), o.length === 1 ? r = parseInt(o, 10) : r = parseFloat(o[0] + "." + o[1]), s && (r = r - 10), u !== 0 && (r = parseFloat(r + "e" + u));
  }
  return { num: r, length: e - t };
}
function HE(n, e) {
  var t = n.pop();
  if (e.length) {
    var r = e[e.length - 1];
    t === r.element && (e.pop(), r = e[e.length - 1]);
    var i = r.element, s = r.index;
    if (Array.isArray(i))
      i.push(t);
    else if (s === n.length - 2) {
      var o = n.pop();
      i[o] = t;
    } else
      n.push(t);
  }
}
function GE(n) {
  for (var e = [], t = [], r = 0; ; ) {
    var i = n[r++];
    if (i === "\0") {
      if (e.length === 1)
        return e.pop();
      HE(e, t);
      continue;
    }
    switch (i) {
      case "1":
        e.push(null);
        break;
      case "2":
        e.push(n[r] === "1"), r++;
        break;
      case "3":
        var s = zE(n, r);
        e.push(s.num), r += s.length;
        break;
      case "4":
        for (var o = ""; ; ) {
          var c = n[r];
          if (c === "\0")
            break;
          o += c, r++;
        }
        o = o.replace(/\u0001\u0001/g, "\0").replace(/\u0001\u0002/g, "").replace(/\u0002\u0002/g, ""), e.push(o);
        break;
      case "5":
        var u = { element: [], index: e.length };
        e.push(u.element), t.push(u);
        break;
      case "6":
        var l = { element: {}, index: e.length };
        e.push(l.element), t.push(l);
        break;
      default:
        throw new Error(
          "bad collationIndex or unexpectedly reached end of input: " + i
        );
    }
  }
}
function WE(n, e) {
  for (var t = Math.min(n.length, e.length), r = 0; r < t; r++) {
    var i = qe(n[r], e[r]);
    if (i !== 0)
      return i;
  }
  return n.length === e.length ? 0 : n.length > e.length ? 1 : -1;
}
function QE(n, e) {
  return n === e ? 0 : n > e ? 1 : -1;
}
function YE(n, e) {
  for (var t = Object.keys(n), r = Object.keys(e), i = Math.min(t.length, r.length), s = 0; s < i; s++) {
    var o = qe(t[s], r[s]);
    if (o !== 0 || (o = qe(n[t[s]], e[r[s]]), o !== 0))
      return o;
  }
  return t.length === r.length ? 0 : t.length > r.length ? 1 : -1;
}
function Qc(n) {
  var e = ["boolean", "number", "string", "object"], t = e.indexOf(typeof n);
  if (~t)
    return n === null ? 1 : Array.isArray(n) ? 5 : t < 3 ? t + 2 : t + 3;
  if (Array.isArray(n))
    return 5;
}
function JE(n) {
  if (n === 0)
    return "1";
  var e = n.toExponential().split(/e\+?/), t = parseInt(e[1], 10), r = n < 0, i = r ? "0" : "2", s = (r ? -t : t) - Hm, o = qE(s.toString(), "0", Gc);
  i += Wc + o;
  var c = Math.abs(parseFloat(e[0]));
  r && (c = 10 - c);
  var u = c.toFixed(20);
  return u = u.replace(/\.?0+$/, ""), i += Wc + u, i;
}
function XE(n) {
  function e(t) {
    return n.map(function(r) {
      var i = qm(r), s = al(i), o = ol(t, s);
      return o;
    });
  }
  return function(t, r) {
    var i = e(t.doc), s = e(r.doc), o = qe(i, s);
    return o !== 0 ? o : NE(t.doc._id, r.doc._id);
  };
}
function ZE(n, e, t) {
  if (n = n.filter(function(o) {
    return Qr(o.doc, e.selector, t);
  }), e.sort) {
    var r = XE(e.sort);
    n = n.sort(r), typeof e.sort[0] != "string" && LE(e.sort[0]) === "desc" && (n = n.reverse());
  }
  if ("limit" in e || "skip" in e) {
    var i = e.skip || 0, s = ("limit" in e ? e.limit : n.length) + i;
    n = n.slice(i, s);
  }
  return n;
}
function Qr(n, e, t) {
  return t.every(function(r) {
    var i = e[r], s = al(r), o = ol(n, s);
    return Bm(r) ? eT(r, i, n) : xo(i, n, s, o);
  });
}
function xo(n, e, t, r) {
  return n ? typeof n == "object" ? Object.keys(n).every(function(i) {
    var s = n[i];
    if (i.indexOf("$") === 0)
      return If(i, e, s, t, r);
    var o = al(i);
    if (r === void 0 && typeof s != "object" && o.length > 0)
      return !1;
    var c = ol(r, o);
    return typeof s == "object" ? xo(s, e, t, c) : If("$eq", e, s, o, c);
  }) : n === r : !0;
}
function eT(n, e, t) {
  return n === "$or" ? e.some(function(r) {
    return Qr(t, r, Object.keys(r));
  }) : n === "$not" ? !Qr(t, e, Object.keys(e)) : !e.find(function(r) {
    return Qr(t, r, Object.keys(r));
  });
}
function If(n, e, t, r, i) {
  if (!Af[n])
    throw new Error('unknown operator "' + n + '" - should be one of $eq, $lte, $lt, $gt, $gte, $exists, $ne, $in, $nin, $size, $mod, $regex, $elemMatch, $type, $allMatch or $all');
  return Af[n](e, t, r, i);
}
function Fi(n) {
  return typeof n < "u" && n !== null;
}
function nr(n) {
  return typeof n < "u";
}
function tT(n, e) {
  if (typeof n != "number" || parseInt(n, 10) !== n)
    return !1;
  var t = e[0], r = e[1];
  return n % t === r;
}
function Sf(n, e) {
  return e.some(function(t) {
    return n instanceof Array ? n.some(function(r) {
      return qe(t, r) === 0;
    }) : qe(t, n) === 0;
  });
}
function nT(n, e) {
  return e.every(function(t) {
    return n.some(function(r) {
      return qe(t, r) === 0;
    });
  });
}
function rT(n, e) {
  return n.length === e;
}
function iT(n, e) {
  var t = new RegExp(e);
  return t.test(n);
}
function sT(n, e) {
  switch (e) {
    case "null":
      return n === null;
    case "boolean":
      return typeof n == "boolean";
    case "number":
      return typeof n == "number";
    case "string":
      return typeof n == "string";
    case "array":
      return n instanceof Array;
    case "object":
      return {}.toString.call(n) === "[object Object]";
  }
}
var Af = {
  $elemMatch: function(n, e, t, r) {
    return !Array.isArray(r) || r.length === 0 ? !1 : typeof r[0] == "object" && r[0] !== null ? r.some(function(i) {
      return Qr(i, e, Object.keys(e));
    }) : r.some(function(i) {
      return xo(e, n, t, i);
    });
  },
  $allMatch: function(n, e, t, r) {
    return !Array.isArray(r) || r.length === 0 ? !1 : typeof r[0] == "object" && r[0] !== null ? r.every(function(i) {
      return Qr(i, e, Object.keys(e));
    }) : r.every(function(i) {
      return xo(e, n, t, i);
    });
  },
  $eq: function(n, e, t, r) {
    return nr(r) && qe(r, e) === 0;
  },
  $gte: function(n, e, t, r) {
    return nr(r) && qe(r, e) >= 0;
  },
  $gt: function(n, e, t, r) {
    return nr(r) && qe(r, e) > 0;
  },
  $lte: function(n, e, t, r) {
    return nr(r) && qe(r, e) <= 0;
  },
  $lt: function(n, e, t, r) {
    return nr(r) && qe(r, e) < 0;
  },
  $exists: function(n, e, t, r) {
    return e ? nr(r) : !nr(r);
  },
  $mod: function(n, e, t, r) {
    return Fi(r) && tT(r, e);
  },
  $ne: function(n, e, t, r) {
    return e.every(function(i) {
      return qe(r, i) !== 0;
    });
  },
  $in: function(n, e, t, r) {
    return Fi(r) && Sf(r, e);
  },
  $nin: function(n, e, t, r) {
    return Fi(r) && !Sf(r, e);
  },
  $size: function(n, e, t, r) {
    return Fi(r) && Array.isArray(r) && rT(r, e);
  },
  $all: function(n, e, t, r) {
    return Array.isArray(r) && nT(r, e);
  },
  $regex: function(n, e, t, r) {
    return Fi(r) && typeof r == "string" && e.every(function(i) {
      return iT(r, i);
    });
  },
  $type: function(n, e, t, r) {
    return sT(r, e);
  }
};
function oT(n, e) {
  if (typeof e != "object")
    throw new Error("Selector error: expected a JSON object");
  e = $E(e);
  var t = {
    doc: n
  }, r = ZE([t], { selector: e }, Object.keys(e));
  return r && r.length === 1;
}
function aT(n) {
  return Ju(`"use strict";
return ` + n + ";", {});
}
function cT(n) {
  var e = [
    "return function(doc) {",
    '  "use strict";',
    "  var emitted = false;",
    "  var emit = function (a, b) {",
    "    emitted = true;",
    "  };",
    "  var view = " + n + ";",
    "  view(doc);",
    "  if (emitted) {",
    "    return true;",
    "  }",
    "};"
  ].join(`
`);
  return Ju(e, {});
}
function uT(n, e) {
  if (n.selector && n.filter && n.filter !== "_selector") {
    var t = typeof n.filter == "string" ? n.filter : "function";
    return e(new Error('selector invalid for filter "' + t + '"'));
  }
  e();
}
function lT(n) {
  n.view && !n.filter && (n.filter = "_view"), n.selector && !n.filter && (n.filter = "_selector"), n.filter && typeof n.filter == "string" && (n.filter === "_view" ? n.view = yf(n.view) : n.filter = yf(n.filter));
}
function hT(n, e) {
  return e.filter && typeof e.filter == "string" && !e.doc_ids && !tn(n.db);
}
function fT(n, e) {
  var t = e.complete;
  if (e.filter === "_view") {
    if (!e.view || typeof e.view != "string") {
      var r = le(
        ha,
        "`view` filter parameter not found or invalid."
      );
      return t(r);
    }
    var i = zc(e.view);
    n.db.get("_design/" + i[0], function(o, c) {
      if (n.isCancelled)
        return t(null, { status: "cancelled" });
      if (o)
        return t(ti(o));
      var u = c && c.views && c.views[i[1]] && c.views[i[1]].map;
      if (!u)
        return t(le(
          Lt,
          c.views ? "missing json key: " + i[1] : "missing json key: views"
        ));
      e.filter = cT(u), n.doChanges(e);
    });
  } else if (e.selector)
    e.filter = function(o) {
      return oT(o, e.selector);
    }, n.doChanges(e);
  else {
    var s = zc(e.filter);
    n.db.get("_design/" + s[0], function(o, c) {
      if (n.isCancelled)
        return t(null, { status: "cancelled" });
      if (o)
        return t(ti(o));
      var u = c && c.filters && c.filters[s[1]];
      if (!u)
        return t(le(
          Lt,
          c && c.filters ? "missing json key: " + s[1] : "missing json key: filters"
        ));
      e.filter = aT(u), n.doChanges(e);
    });
  }
}
function dT(n) {
  n._changesFilterPlugin = {
    validate: uT,
    normalize: lT,
    shouldFilter: hT,
    filter: fT
  };
}
de.plugin(dT);
de.version = DE;
function pT(n, e, t) {
  return new Promise(function(r) {
    var i = Zu([""]);
    let s;
    {
      const o = t;
      s = n.objectStore(e).put(i, o);
    }
    s.onsuccess = function() {
      var o = navigator.userAgent.match(/Chrome\/(\d+)/), c = navigator.userAgent.match(/Edge\//);
      r(c || !o || parseInt(o[1], 10) >= 43);
    }, s.onerror = n.onabort = function(o) {
      o.preventDefault(), o.stopPropagation(), r(!1);
    };
  }).catch(function() {
    return !1;
  });
}
function Gm(n) {
  return n.reduce(function(e, t) {
    return e[t] = !0, e;
  }, {});
}
var mT = Gm([
  "_id",
  "_rev",
  "_access",
  "_attachments",
  "_deleted",
  "_revisions",
  "_revs_info",
  "_conflicts",
  "_deleted_conflicts",
  "_local_seq",
  "_rev_tree",
  // replication documents
  "_replication_id",
  "_replication_state",
  "_replication_state_time",
  "_replication_state_reason",
  "_replication_stats",
  // Specific to Couchbase Sync Gateway
  "_removed"
]), gT = Gm([
  "_access",
  "_attachments",
  // replication documents
  "_replication_id",
  "_replication_state",
  "_replication_state_time",
  "_replication_state_reason",
  "_replication_stats"
]);
function Rf(n) {
  if (!/^\d+-/.test(n))
    return le(vo);
  var e = n.indexOf("-"), t = n.substring(0, e), r = n.substring(e + 1);
  return {
    prefix: parseInt(t, 10),
    id: r
  };
}
function yT(n, e) {
  for (var t = n.start - n.ids.length + 1, r = n.ids, i = [r[0], e, []], s = 1, o = r.length; s < o; s++)
    i = [r[s], { status: "missing" }, [i]];
  return [{
    pos: t,
    ids: i
  }];
}
function Wm(n, e, t) {
  t || (t = {
    deterministic_revs: !0
  });
  var r, i, s, o = { status: "available" };
  if (n._deleted && (o.deleted = !0), e)
    if (n._id || (n._id = fa()), i = xm(n, t.deterministic_revs), n._rev) {
      if (s = Rf(n._rev), s.error)
        return s;
      n._rev_tree = [{
        pos: s.prefix,
        ids: [s.id, { status: "missing" }, [[i, o, []]]]
      }], r = s.prefix + 1;
    } else
      n._rev_tree = [{
        pos: 1,
        ids: [i, o, []]
      }], r = 1;
  else if (n._revisions && (n._rev_tree = yT(n._revisions, o), r = n._revisions.start, i = n._revisions.ids[0]), !n._rev_tree) {
    if (s = Rf(n._rev), s.error)
      return s;
    r = s.prefix, i = s.id, n._rev_tree = [{
      pos: r,
      ids: [i, o, []]
    }];
  }
  Pm(n._id), n._rev = r + "-" + i;
  var c = { metadata: {}, data: {} };
  for (var u in n)
    if (Object.prototype.hasOwnProperty.call(n, u)) {
      var l = u[0] === "_";
      if (l && !mT[u]) {
        var f = le(gf, u);
        throw f.message = gf.message + ": " + u, f;
      } else l && !gT[u] ? c.metadata[u.slice(1)] = n[u] : c.data[u] = n[u];
    }
  return c;
}
function _T(n) {
  try {
    return Xu(n);
  } catch {
    var e = le(
      Cm,
      "Attachment is not a valid base64 string"
    );
    return { error: e };
  }
}
function vT(n, e, t) {
  var r = _T(n.data);
  if (r.error)
    return t(r.error);
  n.length = r.length, e === "blob" ? n.data = el(r, n.content_type) : e === "base64" ? n.data = Ts(r) : n.data = r, rl(r, function(i) {
    n.digest = "md5-" + i, t();
  });
}
function wT(n, e, t) {
  rl(n.data, function(r) {
    n.digest = "md5-" + r, n.length = n.data.size || n.data.length || 0, e === "binary" ? Dm(n.data, function(i) {
      n.data = i, t();
    }) : e === "base64" ? nl(n.data, function(i) {
      n.data = i, t();
    }) : t();
  });
}
function ET(n, e, t) {
  if (n.stub)
    return t();
  typeof n.data == "string" ? vT(n, e, t) : wT(n, e, t);
}
function TT(n, e, t) {
  if (!n.length)
    return t();
  var r = 0, i;
  n.forEach(function(o) {
    var c = o.data && o.data._attachments ? Object.keys(o.data._attachments) : [], u = 0;
    if (!c.length)
      return s();
    function l(h) {
      i = h, u++, u === c.length && s();
    }
    for (var f in o.data._attachments)
      Object.prototype.hasOwnProperty.call(o.data._attachments, f) && ET(
        o.data._attachments[f],
        e,
        l
      );
  });
  function s() {
    r++, n.length === r && (i ? t(i) : t());
  }
}
function bT(n, e, t, r, i, s, o, c) {
  if (dE(e.rev_tree, t.metadata.rev) && !c)
    return r[i] = t, s();
  var u = e.winningRev || yr(e), l = "deleted" in e ? e.deleted : yn(e, u), f = "deleted" in t.metadata ? t.metadata.deleted : yn(t.metadata), h = /^1-/.test(t.metadata.rev);
  if (l && !f && c && h) {
    var y = t.data;
    y._rev = u, y._id = t.metadata.id, t = Wm(y, c);
  }
  var T = Vm(e.rev_tree, t.metadata.rev_tree[0], n), S = c && (l && f && T.conflicts !== "new_leaf" || !l && T.conflicts !== "new_leaf" || l && !f && T.conflicts === "new_branch");
  if (S) {
    var C = le(ei);
    return r[i] = C, s();
  }
  var w = t.metadata.rev;
  t.metadata.rev_tree = T.tree, t.stemmedRevs = T.stemmedRevs || [], e.rev_map && (t.metadata.rev_map = e.rev_map);
  var E = yr(t.metadata), g = yn(t.metadata, E), d = l === g ? 0 : l < g ? -1 : 1, m;
  w === E ? m = g : m = yn(t.metadata, w), o(
    t,
    E,
    g,
    m,
    !0,
    d,
    i,
    s
  );
}
function IT(n) {
  return n.metadata.rev_tree[0].ids[1].status === "missing";
}
function ST(n, e, t, r, i, s, o, c, u) {
  n = n || 1e3;
  function l(C, w, E) {
    var g = yr(C.metadata), d = yn(C.metadata, g);
    if ("was_delete" in c && d)
      return s[w] = le(Lt, "deleted"), E();
    var m = f && IT(C);
    if (m) {
      var v = le(ei);
      return s[w] = v, E();
    }
    var I = d ? 0 : 1;
    o(
      C,
      g,
      d,
      d,
      !1,
      I,
      w,
      E
    );
  }
  var f = c.new_edits, h = /* @__PURE__ */ new Map(), y = 0, T = e.length;
  function S() {
    ++y === T && u && u();
  }
  e.forEach(function(C, w) {
    if (C._id && fr(C._id)) {
      var E = C._deleted ? "_removeLocal" : "_putLocal";
      t[E](C, { ctx: i }, function(d, m) {
        s[w] = d || m, S();
      });
      return;
    }
    var g = C.metadata.id;
    h.has(g) ? (T--, h.get(g).push([C, w])) : h.set(g, [[C, w]]);
  }), h.forEach(function(C, w) {
    var E = 0;
    function g() {
      ++E < C.length ? d() : S();
    }
    function d() {
      var m = C[E], v = m[0], I = m[1];
      if (r.has(w))
        bT(
          n,
          r.get(w),
          v,
          s,
          I,
          g,
          o,
          f
        );
      else {
        var R = Vm([], v.metadata.rev_tree[0], n);
        v.metadata.rev_tree = R.tree, v.stemmedRevs = R.stemmedRevs || [], l(v, I, g);
      }
    }
    d();
  });
}
var AT = 5, ze = "document-store", ot = "by-sequence", Mt = "attach-store", cr = "attach-seq-store", St = "meta-store", Xt = "local-store", uc = "detect-blob-support";
function RT(n) {
  try {
    return JSON.parse(n);
  } catch {
    return ua.parse(n);
  }
}
function CT(n) {
  try {
    return JSON.stringify(n);
  } catch {
    return ua.stringify(n);
  }
}
function en(n) {
  return function(e) {
    var t = "unknown_error";
    e.target && e.target.error && (t = e.target.error.name || e.target.error.message), n(le(Qu, t, e.type));
  };
}
function Yc(n, e, t) {
  return {
    data: CT(n),
    winningRev: e,
    deletedOrLocal: t ? "1" : "0",
    seq: n.seq,
    // highest seq for this doc
    id: n.id
  };
}
function ur(n) {
  if (!n)
    return null;
  var e = RT(n.data);
  return e.winningRev = n.winningRev, e.deleted = n.deletedOrLocal === "1", e.seq = n.seq, e;
}
function Lo(n) {
  if (!n)
    return n;
  var e = n._doc_id_rev.lastIndexOf(":");
  return n._id = n._doc_id_rev.substring(0, e - 1), n._rev = n._doc_id_rev.substring(e + 1), delete n._doc_id_rev, n;
}
function Qm(n, e, t, r) {
  t ? r(n ? typeof n != "string" ? n : tl(n, e) : Zu([""], { type: e })) : n ? typeof n != "string" ? Om(n, function(i) {
    r(Ts(i));
  }) : r(n) : r("");
}
function Ym(n, e, t, r) {
  var i = Object.keys(n._attachments || {});
  if (!i.length)
    return r && r();
  var s = 0;
  function o() {
    ++s === i.length && r && r();
  }
  function c(u, l) {
    var f = u._attachments[l], h = f.digest, y = t.objectStore(Mt).get(h);
    y.onsuccess = function(T) {
      f.body = T.target.result.body, o();
    };
  }
  i.forEach(function(u) {
    e.attachments && e.include_docs ? c(n, u) : (n._attachments[u].stub = !0, o());
  });
}
function Jc(n, e) {
  return Promise.all(n.map(function(t) {
    if (t.doc && t.doc._attachments) {
      var r = Object.keys(t.doc._attachments);
      return Promise.all(r.map(function(i) {
        var s = t.doc._attachments[i];
        if ("body" in s) {
          var o = s.body, c = s.content_type;
          return new Promise(function(u) {
            Qm(o, c, e, function(l) {
              t.doc._attachments[i] = Object.assign(
                Es(s, ["digest", "content_type"]),
                { data: l }
              ), u();
            });
          });
        }
      }));
    }
  }));
}
function Jm(n, e, t) {
  var r = [], i = t.objectStore(ot), s = t.objectStore(Mt), o = t.objectStore(cr), c = n.length;
  function u() {
    c--, c || l();
  }
  function l() {
    r.length && r.forEach(function(f) {
      var h = o.index("digestSeq").count(
        IDBKeyRange.bound(
          f + "::",
          f + "::￿",
          !1,
          !1
        )
      );
      h.onsuccess = function(y) {
        var T = y.target.result;
        T || s.delete(f);
      };
    });
  }
  n.forEach(function(f) {
    var h = i.index("_doc_id_rev"), y = e + "::" + f;
    h.getKey(y).onsuccess = function(T) {
      var S = T.target.result;
      if (typeof S != "number")
        return u();
      i.delete(S);
      var C = o.index("seq").openCursor(IDBKeyRange.only(S));
      C.onsuccess = function(w) {
        var E = w.target.result;
        if (E) {
          var g = E.value.digestSeq.split("::")[0];
          r.push(g), o.delete(E.primaryKey), E.continue();
        } else
          u();
      };
    };
  });
}
function Gt(n, e, t) {
  try {
    return {
      txn: n.transaction(e, t)
    };
  } catch (r) {
    return {
      error: r
    };
  }
}
var Yi = new Fw();
function PT(n, e, t, r, i, s) {
  for (var o = e.docs, c, u, l, f, h, y, T, S, C = 0, w = o.length; C < w; C++) {
    var E = o[C];
    E._id && fr(E._id) || (E = o[C] = Wm(E, t.new_edits, n), E.error && !T && (T = E));
  }
  if (T)
    return s(T);
  var g = !1, d = 0, m = new Array(o.length), v = /* @__PURE__ */ new Map(), I = !1, R = r._meta.blobSupport ? "blob" : "base64";
  TT(o, R, function(U) {
    if (U)
      return s(U);
    b();
  });
  function b() {
    var U = [
      ze,
      ot,
      Mt,
      Xt,
      cr,
      St
    ], q = Gt(i, U, "readwrite");
    if (q.error)
      return s(q.error);
    c = q.txn, c.onabort = en(s), c.ontimeout = en(s), c.oncomplete = k, u = c.objectStore(ze), l = c.objectStore(ot), f = c.objectStore(Mt), h = c.objectStore(cr), y = c.objectStore(St), y.get(St).onsuccess = function(H) {
      S = H.target.result, D();
    }, oe(function(H) {
      if (H)
        return I = !0, s(H);
      N();
    });
  }
  function A() {
    g = !0, D();
  }
  function O() {
    ST(
      n.revs_limit,
      o,
      r,
      v,
      c,
      m,
      ue,
      t,
      A
    );
  }
  function D() {
    !S || !g || (S.docCount += d, y.put(S));
  }
  function N() {
    if (!o.length)
      return;
    var U = 0;
    function q() {
      ++U === o.length && O();
    }
    function H(Q) {
      var Z = ur(Q.target.result);
      Z && v.set(Z.id, Z), q();
    }
    for (var ie = 0, z = o.length; ie < z; ie++) {
      var V = o[ie];
      if (V._id && fr(V._id)) {
        q();
        continue;
      }
      var j = u.get(V.metadata.id);
      j.onsuccess = H;
    }
  }
  function k() {
    I || (Yi.notify(r._meta.name), s(null, m));
  }
  function Y(U, q) {
    var H = f.get(U);
    H.onsuccess = function(ie) {
      if (ie.target.result)
        q();
      else {
        var z = le(
          zw,
          "unknown stub attachment with digest " + U
        );
        z.status = 412, q(z);
      }
    };
  }
  function oe(U) {
    var q = [];
    if (o.forEach(function(V) {
      V.data && V.data._attachments && Object.keys(V.data._attachments).forEach(function(j) {
        var Q = V.data._attachments[j];
        Q.stub && q.push(Q.digest);
      });
    }), !q.length)
      return U();
    var H = 0, ie;
    function z() {
      ++H === q.length && U(ie);
    }
    q.forEach(function(V) {
      Y(V, function(j) {
        j && !ie && (ie = j), z();
      });
    });
  }
  function ue(U, q, H, ie, z, V, j, Q) {
    U.metadata.winningRev = q, U.metadata.deleted = H;
    var Z = U.data;
    Z._id = U.metadata.id, Z._rev = U.metadata.rev, ie && (Z._deleted = !0);
    var te = Z._attachments && Object.keys(Z._attachments).length;
    if (te)
      return x(
        U,
        q,
        H,
        z,
        j,
        Q
      );
    d += V, D(), ae(
      U,
      q,
      H,
      z,
      j,
      Q
    );
  }
  function ae(U, q, H, ie, z, V) {
    var j = U.data, Q = U.metadata;
    j._doc_id_rev = Q.id + "::" + Q.rev, delete j._id, delete j._rev;
    function Z(be) {
      var J = U.stemmedRevs || [];
      ie && r.auto_compaction && (J = J.concat(oE(U.metadata))), J && J.length && Jm(J, U.metadata.id, c), Q.seq = be.target.result;
      var Ue = Yc(
        Q,
        q,
        H
      ), pe = u.put(Ue);
      pe.onsuccess = me;
    }
    function te(be) {
      be.preventDefault(), be.stopPropagation();
      var J = l.index("_doc_id_rev"), Ue = J.getKey(j._doc_id_rev);
      Ue.onsuccess = function(pe) {
        var ge = l.put(j, pe.target.result);
        ge.onsuccess = Z;
      };
    }
    function me() {
      m[z] = {
        ok: !0,
        id: Q.id,
        rev: Q.rev
      }, v.set(U.metadata.id, U.metadata), L(U, Q.seq, V);
    }
    var G = l.put(j);
    G.onsuccess = Z, G.onerror = te;
  }
  function x(U, q, H, ie, z, V) {
    var j = U.data, Q = 0, Z = Object.keys(j._attachments);
    function te() {
      Q === Z.length && ae(
        U,
        q,
        H,
        ie,
        z,
        V
      );
    }
    function me() {
      Q++, te();
    }
    Z.forEach(function(G) {
      var be = U.data._attachments[G];
      if (be.stub)
        Q++, te();
      else {
        var J = be.data;
        delete be.data, be.revpos = parseInt(q, 10);
        var Ue = be.digest;
        $(Ue, J, me);
      }
    });
  }
  function L(U, q, H) {
    var ie = 0, z = Object.keys(U.data._attachments || {});
    if (!z.length)
      return H();
    function V() {
      ++ie === z.length && H();
    }
    function j(Z) {
      var te = U.data._attachments[Z].digest, me = h.put({
        seq: q,
        digestSeq: te + "::" + q
      });
      me.onsuccess = V, me.onerror = function(G) {
        G.preventDefault(), G.stopPropagation(), V();
      };
    }
    for (var Q = 0; Q < z.length; Q++)
      j(z[Q]);
  }
  function $(U, q, H) {
    var ie = f.count(U);
    ie.onsuccess = function(z) {
      var V = z.target.result;
      if (V)
        return H();
      var j = {
        digest: U,
        body: q
      }, Q = f.put(j);
      Q.onsuccess = H;
    };
  }
}
function Xm(n, e, t, r, i) {
  r === -1 && (r = 1e3);
  var s = typeof n.getAll == "function" && typeof n.getAllKeys == "function" && r > 1 && !t, o, c, u;
  function l(T) {
    c = T.target.result, o && i(o, c, u);
  }
  function f(T) {
    o = T.target.result, c && i(o, c, u);
  }
  function h() {
    if (!o.length)
      return i();
    var T = o[o.length - 1], S;
    if (e && e.upper)
      try {
        S = IDBKeyRange.bound(
          T,
          e.upper,
          !0,
          e.upperOpen
        );
      } catch (C) {
        if (C.name === "DataError" && C.code === 0)
          return i();
      }
    else
      S = IDBKeyRange.lowerBound(T, !0);
    e = S, o = null, c = null, n.getAll(e, r).onsuccess = l, n.getAllKeys(e, r).onsuccess = f;
  }
  function y(T) {
    var S = T.target.result;
    if (!S)
      return i();
    i([S.key], [S.value], S);
  }
  s ? (u = { continue: h }, n.getAll(e, r).onsuccess = l, n.getAllKeys(e, r).onsuccess = f) : t ? n.openCursor(e, "prev").onsuccess = y : n.openCursor(e).onsuccess = y;
}
function kT(n, e, t) {
  if (typeof n.getAll == "function") {
    n.getAll(e).onsuccess = t;
    return;
  }
  var r = [];
  function i(s) {
    var o = s.target.result;
    o ? (r.push(o.value), o.continue()) : t({
      target: {
        result: r
      }
    });
  }
  n.openCursor(e).onsuccess = i;
}
function OT(n, e, t) {
  var r = new Array(n.length), i = 0;
  n.forEach(function(s, o) {
    e.get(s).onsuccess = function(c) {
      c.target.result ? r[o] = c.target.result : r[o] = { key: s, error: "not_found" }, i++, i === n.length && t(n, r, {});
    };
  });
}
function DT(n, e, t, r, i) {
  try {
    if (n && e)
      return i ? IDBKeyRange.bound(e, n, !t, !1) : IDBKeyRange.bound(n, e, !1, !t);
    if (n)
      return i ? IDBKeyRange.upperBound(n) : IDBKeyRange.lowerBound(n);
    if (e)
      return i ? IDBKeyRange.lowerBound(e, !t) : IDBKeyRange.upperBound(e, !t);
    if (r)
      return IDBKeyRange.only(r);
  } catch (s) {
    return { error: s };
  }
  return null;
}
function NT(n, e, t) {
  var r = "startkey" in n ? n.startkey : !1, i = "endkey" in n ? n.endkey : !1, s = "key" in n ? n.key : !1, o = "keys" in n ? n.keys : !1, c = n.skip || 0, u = typeof n.limit == "number" ? n.limit : -1, l = n.inclusive_end !== !1, f, h;
  if (!o && (f = DT(r, i, l, s, n.descending), h = f && f.error, h && !(h.name === "DataError" && h.code === 0)))
    return t(le(
      Qu,
      h.name,
      h.message
    ));
  var y = [ze, ot, St];
  n.attachments && y.push(Mt);
  var T = Gt(e, y, "readonly");
  if (T.error)
    return t(T.error);
  var S = T.txn;
  S.oncomplete = N, S.onabort = en(t);
  var C = S.objectStore(ze), w = S.objectStore(ot), E = S.objectStore(St), g = w.index("_doc_id_rev"), d = [], m, v;
  E.get(St).onsuccess = function(k) {
    m = k.target.result.docCount;
  }, n.update_seq && (w.openKeyCursor(null, "prev").onsuccess = (k) => {
    var Y = k.target.result;
    Y && Y.key && (v = Y.key);
  });
  function I(k, Y, oe) {
    var ue = k.id + "::" + oe;
    g.get(ue).onsuccess = function(x) {
      if (Y.doc = Lo(x.target.result) || {}, n.conflicts) {
        var L = sl(k);
        L.length && (Y.doc._conflicts = L);
      }
      Ym(Y.doc, n, S);
    };
  }
  function R(k, Y) {
    var oe = {
      id: Y.id,
      key: Y.id,
      value: {
        rev: k
      }
    }, ue = Y.deleted;
    ue ? o && (d.push(oe), oe.value.deleted = !0, oe.doc = null) : c-- <= 0 && (d.push(oe), n.include_docs && I(Y, oe, k));
  }
  function b(k) {
    for (var Y = 0, oe = k.length; Y < oe && d.length !== u; Y++) {
      var ue = k[Y];
      if (ue.error && o) {
        d.push(ue);
        continue;
      }
      var ae = ur(ue), x = ae.winningRev;
      R(x, ae);
    }
  }
  function A(k, Y, oe) {
    oe && (b(Y), d.length < u && oe.continue());
  }
  function O(k) {
    var Y = k.target.result;
    n.descending && (Y = Y.reverse()), b(Y);
  }
  function D() {
    var k = {
      total_rows: m,
      offset: n.skip,
      rows: d
    };
    n.update_seq && v !== void 0 && (k.update_seq = v), t(null, k);
  }
  function N() {
    n.attachments ? Jc(d, n.binary).then(D) : D();
  }
  if (!(h || u === 0)) {
    if (o)
      return OT(o, C, A);
    if (u === -1)
      return kT(C, f, O);
    Xm(C, f, n.descending, u + c, A);
  }
}
function xT(n, e) {
  var t = n.objectStore(ze).index("deletedOrLocal");
  t.count(IDBKeyRange.only("0")).onsuccess = function(r) {
    e(r.target.result);
  };
}
var Xc = !1, Zc = [];
function LT(n, e, t, r) {
  try {
    n(e, t);
  } catch (i) {
    r.emit("error", i);
  }
}
function Cf() {
  Xc || !Zc.length || (Xc = !0, Zc.shift()());
}
function MT(n, e, t) {
  Zc.push(function() {
    n(function(s, o) {
      LT(e, s, o, t), Xc = !1, an(function() {
        Cf();
      });
    });
  }), Cf();
}
function VT(n, e, t, r) {
  if (n = Je(n), n.continuous) {
    var i = t + ":" + fa();
    return Yi.addListener(t, i, e, n), Yi.notify(t), {
      cancel: function() {
        Yi.removeListener(t, i);
      }
    };
  }
  var s = n.doc_ids && new Set(n.doc_ids);
  n.since = n.since || 0;
  var o = n.since, c = "limit" in n ? n.limit : -1;
  c === 0 && (c = 1);
  var u = [], l = 0, f = Yu(n), h = /* @__PURE__ */ new Map(), y, T, S, C;
  function w(b, A, O) {
    if (!O || !b.length)
      return;
    var D = new Array(b.length), N = new Array(b.length);
    function k(ue, ae) {
      var x = n.processChange(ae, ue, n);
      o = x.seq = ue.seq;
      var L = f(x);
      return typeof L == "object" ? Promise.reject(L) : L ? (l++, n.return_docs && u.push(x), n.attachments && n.include_docs ? new Promise(function($) {
        Ym(ae, n, y, function() {
          Jc([x], n.binary).then(function() {
            $(x);
          });
        });
      }) : Promise.resolve(x)) : Promise.resolve();
    }
    function Y() {
      for (var ue = [], ae = 0, x = D.length; ae < x && l !== c; ae++) {
        var L = D[ae];
        if (L) {
          var $ = N[ae];
          ue.push(k($, L));
        }
      }
      Promise.all(ue).then(function(U) {
        for (var q = 0, H = U.length; q < H; q++)
          U[q] && n.onChange(U[q]);
      }).catch(n.complete), l !== c && O.continue();
    }
    var oe = 0;
    A.forEach(function(ue, ae) {
      var x = Lo(ue), L = b[ae];
      g(x, L, function($, U) {
        N[ae] = $, D[ae] = U, ++oe === b.length && Y();
      });
    });
  }
  function E(b, A, O, D) {
    if (O.seq !== A)
      return D();
    if (O.winningRev === b._rev)
      return D(O, b);
    var N = b._id + "::" + O.winningRev, k = C.get(N);
    k.onsuccess = function(Y) {
      D(O, Lo(Y.target.result));
    };
  }
  function g(b, A, O) {
    if (s && !s.has(b._id))
      return O();
    var D = h.get(b._id);
    if (D)
      return E(b, A, D, O);
    S.get(b._id).onsuccess = function(N) {
      D = ur(N.target.result), h.set(b._id, D), E(b, A, D, O);
    };
  }
  function d() {
    n.complete(null, {
      results: u,
      last_seq: o
    });
  }
  function m() {
    !n.continuous && n.attachments ? Jc(u).then(d) : d();
  }
  var v = [ze, ot];
  n.attachments && v.push(Mt);
  var I = Gt(r, v, "readonly");
  if (I.error)
    return n.complete(I.error);
  y = I.txn, y.onabort = en(n.complete), y.oncomplete = m, T = y.objectStore(ot), S = y.objectStore(ze), C = T.index("_doc_id_rev");
  var R = n.since && !n.descending ? IDBKeyRange.lowerBound(n.since, !0) : null;
  Xm(T, R, n.descending, c, w);
}
var jr = /* @__PURE__ */ new Map(), lc, hc = /* @__PURE__ */ new Map();
function Zm(n, e) {
  var t = this;
  MT(function(r) {
    FT(t, n, r);
  }, e, t.constructor);
}
function FT(n, e, t) {
  var r = e.name, i = null, s = null;
  n._meta = null;
  function o(w) {
    return function(E, g) {
      E && E instanceof Error && !E.reason && s && (E.reason = s), w(E, g);
    };
  }
  function c(w) {
    var E = w.createObjectStore(ze, { keyPath: "id" });
    w.createObjectStore(ot, { autoIncrement: !0 }).createIndex("_doc_id_rev", "_doc_id_rev", { unique: !0 }), w.createObjectStore(Mt, { keyPath: "digest" }), w.createObjectStore(St, { keyPath: "id", autoIncrement: !1 }), w.createObjectStore(uc), E.createIndex("deletedOrLocal", "deletedOrLocal", { unique: !1 }), w.createObjectStore(Xt, { keyPath: "_id" });
    var g = w.createObjectStore(
      cr,
      { autoIncrement: !0 }
    );
    g.createIndex("seq", "seq"), g.createIndex("digestSeq", "digestSeq", { unique: !0 });
  }
  function u(w, E) {
    var g = w.objectStore(ze);
    g.createIndex("deletedOrLocal", "deletedOrLocal", { unique: !1 }), g.openCursor().onsuccess = function(d) {
      var m = d.target.result;
      if (m) {
        var v = m.value, I = yn(v);
        v.deletedOrLocal = I ? "1" : "0", g.put(v), m.continue();
      } else
        E();
    };
  }
  function l(w) {
    w.createObjectStore(Xt, { keyPath: "_id" }).createIndex("_doc_id_rev", "_doc_id_rev", { unique: !0 });
  }
  function f(w, E) {
    var g = w.objectStore(Xt), d = w.objectStore(ze), m = w.objectStore(ot), v = d.openCursor();
    v.onsuccess = function(I) {
      var R = I.target.result;
      if (R) {
        var b = R.value, A = b.id, O = fr(A), D = yr(b);
        if (O) {
          var N = A + "::" + D, k = A + "::", Y = A + "::~", oe = m.index("_doc_id_rev"), ue = IDBKeyRange.bound(k, Y, !1, !1), ae = oe.openCursor(ue);
          ae.onsuccess = function(x) {
            if (ae = x.target.result, !ae)
              d.delete(R.primaryKey), R.continue();
            else {
              var L = ae.value;
              L._doc_id_rev === N && g.put(L), m.delete(ae.primaryKey), ae.continue();
            }
          };
        } else
          R.continue();
      } else E && E();
    };
  }
  function h(w) {
    var E = w.createObjectStore(
      cr,
      { autoIncrement: !0 }
    );
    E.createIndex("seq", "seq"), E.createIndex("digestSeq", "digestSeq", { unique: !0 });
  }
  function y(w, E) {
    var g = w.objectStore(ot), d = w.objectStore(Mt), m = w.objectStore(cr), v = d.count();
    v.onsuccess = function(I) {
      var R = I.target.result;
      if (!R)
        return E();
      g.openCursor().onsuccess = function(b) {
        var A = b.target.result;
        if (!A)
          return E();
        for (var O = A.value, D = A.primaryKey, N = Object.keys(O._attachments || {}), k = {}, Y = 0; Y < N.length; Y++) {
          var oe = O._attachments[N[Y]];
          k[oe.digest] = !0;
        }
        var ue = Object.keys(k);
        for (Y = 0; Y < ue.length; Y++) {
          var ae = ue[Y];
          m.put({
            seq: D,
            digestSeq: ae + "::" + D
          });
        }
        A.continue();
      };
    };
  }
  function T(w) {
    function E(v) {
      return v.data ? ur(v) : (v.deleted = v.deletedOrLocal === "1", v);
    }
    var g = w.objectStore(ot), d = w.objectStore(ze), m = d.openCursor();
    m.onsuccess = function(v) {
      var I = v.target.result;
      if (!I)
        return;
      var R = E(I.value);
      R.winningRev = R.winningRev || yr(R);
      function b() {
        var O = R.id + "::", D = R.id + "::￿", N = g.index("_doc_id_rev").openCursor(
          IDBKeyRange.bound(O, D)
        ), k = 0;
        N.onsuccess = function(Y) {
          var oe = Y.target.result;
          if (!oe)
            return R.seq = k, A();
          var ue = oe.primaryKey;
          ue > k && (k = ue), oe.continue();
        };
      }
      function A() {
        var O = Yc(
          R,
          R.winningRev,
          R.deleted
        ), D = d.put(O);
        D.onsuccess = function() {
          I.continue();
        };
      }
      if (R.seq)
        return A();
      b();
    };
  }
  n._remote = !1, n.type = function() {
    return "idb";
  }, n._id = Sm(function(w) {
    w(null, n._meta.instanceId);
  }), n._bulkDocs = function(E, g, d) {
    PT(e, E, g, n, i, o(d));
  }, n._get = function(E, g, d) {
    var m, v, I, R = g.ctx;
    if (!R) {
      var b = Gt(
        i,
        [ze, ot, Mt],
        "readonly"
      );
      if (b.error)
        return d(b.error);
      R = b.txn;
    }
    function A() {
      d(I, { doc: m, metadata: v, ctx: R });
    }
    R.objectStore(ze).get(E).onsuccess = function(O) {
      if (v = ur(O.target.result), !v)
        return I = le(Lt, "missing"), A();
      var D;
      if (g.rev)
        D = g.latest ? mE(g.rev, v) : g.rev;
      else {
        D = v.winningRev;
        var N = yn(v);
        if (N)
          return I = le(Lt, "deleted"), A();
      }
      var k = R.objectStore(ot), Y = v.id + "::" + D;
      k.index("_doc_id_rev").get(Y).onsuccess = function(oe) {
        if (m = oe.target.result, m && (m = Lo(m)), !m)
          return I = le(Lt, "missing"), A();
        A();
      };
    };
  }, n._getAttachment = function(w, E, g, d, m) {
    var v;
    if (d.ctx)
      v = d.ctx;
    else {
      var I = Gt(
        i,
        [ze, ot, Mt],
        "readonly"
      );
      if (I.error)
        return m(I.error);
      v = I.txn;
    }
    var R = g.digest, b = g.content_type;
    v.objectStore(Mt).get(R).onsuccess = function(A) {
      var O = A.target.result.body;
      Qm(O, b, d.binary, function(D) {
        m(null, D);
      });
    };
  }, n._info = function(E) {
    var g, d, m = Gt(i, [St, ot], "readonly");
    if (m.error)
      return E(m.error);
    var v = m.txn;
    v.objectStore(St).get(St).onsuccess = function(I) {
      d = I.target.result.docCount;
    }, v.objectStore(ot).openKeyCursor(null, "prev").onsuccess = function(I) {
      var R = I.target.result;
      g = R ? R.key : 0;
    }, v.oncomplete = function() {
      E(null, {
        doc_count: d,
        update_seq: g,
        // for debugging
        idb_attachment_format: n._meta.blobSupport ? "binary" : "base64"
      });
    };
  }, n._allDocs = function(E, g) {
    NT(E, i, o(g));
  }, n._changes = function(E) {
    return VT(E, n, r, i);
  }, n._close = function(w) {
    i.close(), jr.delete(r), w();
  }, n._getRevisionTree = function(w, E) {
    var g = Gt(i, [ze], "readonly");
    if (g.error)
      return E(g.error);
    var d = g.txn, m = d.objectStore(ze).get(w);
    m.onsuccess = function(v) {
      var I = ur(v.target.result);
      I ? E(null, I.rev_tree) : E(le(Lt));
    };
  }, n._doCompaction = function(w, E, g) {
    var d = [
      ze,
      ot,
      Mt,
      cr
    ], m = Gt(i, d, "readwrite");
    if (m.error)
      return g(m.error);
    var v = m.txn, I = v.objectStore(ze);
    I.get(w).onsuccess = function(R) {
      var b = ur(R.target.result);
      _r(b.rev_tree, function(D, N, k, Y, oe) {
        var ue = N + "-" + k;
        E.indexOf(ue) !== -1 && (oe.status = "missing");
      }), Jm(E, w, v);
      var A = b.winningRev, O = b.deleted;
      v.objectStore(ze).put(
        Yc(b, A, O)
      );
    }, v.onabort = en(g), v.oncomplete = function() {
      g();
    };
  }, n._getLocal = function(w, E) {
    var g = Gt(i, [Xt], "readonly");
    if (g.error)
      return E(g.error);
    var d = g.txn, m = d.objectStore(Xt).get(w);
    m.onerror = en(E), m.onsuccess = function(v) {
      var I = v.target.result;
      I ? (delete I._doc_id_rev, E(null, I)) : E(le(Lt));
    };
  }, n._putLocal = function(w, E, g) {
    typeof E == "function" && (g = E, E = {}), delete w._revisions;
    var d = w._rev, m = w._id;
    d ? w._rev = "0-" + (parseInt(d.split("-")[1], 10) + 1) : w._rev = "0-1";
    var v = E.ctx, I;
    if (!v) {
      var R = Gt(i, [Xt], "readwrite");
      if (R.error)
        return g(R.error);
      v = R.txn, v.onerror = en(g), v.oncomplete = function() {
        I && g(null, I);
      };
    }
    var b = v.objectStore(Xt), A;
    d ? (A = b.get(m), A.onsuccess = function(O) {
      var D = O.target.result;
      if (!D || D._rev !== d)
        g(le(ei));
      else {
        var N = b.put(w);
        N.onsuccess = function() {
          I = { ok: !0, id: w._id, rev: w._rev }, E.ctx && g(null, I);
        };
      }
    }) : (A = b.add(w), A.onerror = function(O) {
      g(le(ei)), O.preventDefault(), O.stopPropagation();
    }, A.onsuccess = function() {
      I = { ok: !0, id: w._id, rev: w._rev }, E.ctx && g(null, I);
    });
  }, n._removeLocal = function(w, E, g) {
    typeof E == "function" && (g = E, E = {});
    var d = E.ctx;
    if (!d) {
      var m = Gt(i, [Xt], "readwrite");
      if (m.error)
        return g(m.error);
      d = m.txn, d.oncomplete = function() {
        v && g(null, v);
      };
    }
    var v, I = w._id, R = d.objectStore(Xt), b = R.get(I);
    b.onerror = en(g), b.onsuccess = function(A) {
      var O = A.target.result;
      !O || O._rev !== w._rev ? g(le(Lt)) : (R.delete(I), v = { ok: !0, id: I, rev: "0-0" }, E.ctx && g(null, v));
    };
  }, n._destroy = function(w, E) {
    Yi.removeAllListeners(r);
    var g = hc.get(r);
    g && g.result && (g.result.close(), jr.delete(r));
    var d = indexedDB.deleteDatabase(r);
    d.onsuccess = function() {
      hc.delete(r), Do() && r in localStorage && delete localStorage[r], E(null, { ok: !0 });
    }, d.onerror = en(E);
  };
  var S = jr.get(r);
  if (S)
    return i = S.idb, n._meta = S.global, an(function() {
      t(null, n);
    });
  var C = indexedDB.open(r, AT);
  hc.set(r, C), C.onupgradeneeded = function(w) {
    var E = w.target.result;
    if (w.oldVersion < 1)
      return c(E);
    var g = w.currentTarget.transaction;
    w.oldVersion < 3 && l(E), w.oldVersion < 4 && h(E);
    var d = [
      u,
      // v1 -> v2
      f,
      // v2 -> v3
      y,
      // v3 -> v4
      T
      // v4 -> v5
    ], m = w.oldVersion;
    function v() {
      var I = d[m - 1];
      m++, I && I(g, v);
    }
    v();
  }, C.onsuccess = function(w) {
    i = w.target.result, i.onversionchange = function() {
      i.close(), jr.delete(r);
    }, i.onabort = function(A) {
      $t("error", "Database has a global failure", A.target.error), s = A.target.error, i.close(), jr.delete(r);
    };
    var E = i.transaction([
      St,
      uc,
      ze
    ], "readwrite"), g = !1, d, m, v, I;
    function R() {
      typeof v > "u" || !g || (n._meta = {
        name: r,
        instanceId: I,
        blobSupport: v
      }, jr.set(r, {
        idb: i,
        global: n._meta
      }), t(null, n));
    }
    function b() {
      if (!(typeof m > "u" || typeof d > "u")) {
        var A = r + "_id";
        A in d ? I = d[A] : d[A] = I = fa(), d.docCount = m, E.objectStore(St).put(d);
      }
    }
    E.objectStore(St).get(St).onsuccess = function(A) {
      d = A.target.result || { id: St }, b();
    }, xT(E, function(A) {
      m = A, b();
    }), lc || (lc = pT(E, uc, "key")), lc.then(function(A) {
      v = A, R();
    }), E.oncomplete = function() {
      g = !0, R();
    }, E.onabort = en(t);
  }, C.onerror = function(w) {
    var E = w.target.error && w.target.error.message;
    E ? E.indexOf("stored database is a higher version") !== -1 && (E = new Error('This DB was created with the newer "indexeddb" adapter, but you are trying to open it with the older "idb" adapter')) : E = "Failed to open indexedDB, are you in private browsing mode?", $t("error", E), t(le(Qu, E));
  };
}
Zm.valid = function() {
  try {
    return typeof indexedDB < "u" && typeof IDBKeyRange < "u";
  } catch {
    return !1;
  }
};
function UT(n) {
  n.adapter("idb", Zm, !0);
}
function jT(n, e) {
  return new Promise(function(t, r) {
    var i = 0, s = 0, o = 0, c = n.length, u;
    function l() {
      i++, n[s++]().then(h, y);
    }
    function f() {
      ++o === c ? u ? r(u) : t() : T();
    }
    function h() {
      i--, f();
    }
    function y(S) {
      i--, u = u || S, f();
    }
    function T() {
      for (; i < e && s < c; )
        l();
    }
    T();
  });
}
const $T = 25, BT = 50, no = 5e3, qT = 1e4, fc = {};
function dc(n) {
  const e = n.doc || n.ok, t = e && e._attachments;
  t && Object.keys(t).forEach(function(r) {
    const i = t[r];
    i.data = tl(i.data, i.content_type);
  });
}
function rr(n) {
  return /^_design/.test(n) ? "_design/" + encodeURIComponent(n.slice(8)) : n.startsWith("_local/") ? "_local/" + encodeURIComponent(n.slice(7)) : encodeURIComponent(n);
}
function Pf(n) {
  return !n._attachments || !Object.keys(n._attachments) ? Promise.resolve() : Promise.all(Object.keys(n._attachments).map(function(e) {
    const t = n._attachments[e];
    if (t.data && typeof t.data != "string")
      return new Promise(function(r) {
        nl(t.data, r);
      }).then(function(r) {
        t.data = r;
      });
  }));
}
function KT(n) {
  if (!n.prefix)
    return !1;
  const e = km(n.prefix).protocol;
  return e === "http" || e === "https";
}
function zT(n, e) {
  if (KT(e)) {
    const i = e.name.substr(e.prefix.length);
    n = e.prefix.replace(/\/?$/, "/") + encodeURIComponent(i);
  }
  const t = km(n);
  (t.user || t.password) && (t.auth = { username: t.user, password: t.password });
  const r = t.path.replace(/(^\/|\/$)/g, "").split("/");
  return t.db = r.pop(), t.db.indexOf("%") === -1 && (t.db = encodeURIComponent(t.db)), t.path = r.join("/"), t;
}
function Ye(n, e) {
  return wo(n, n.db + "/" + e);
}
function wo(n, e) {
  const t = n.path ? "/" : "";
  return n.protocol + "://" + n.host + (n.port ? ":" + n.port : "") + "/" + n.path + t + e;
}
function ro(n) {
  const e = Object.keys(n);
  return e.length === 0 ? "" : "?" + e.map((t) => t + "=" + encodeURIComponent(n[t])).join("&");
}
function HT(n) {
  const e = typeof navigator < "u" && navigator.userAgent ? navigator.userAgent.toLowerCase() : "", t = e.indexOf("msie") !== -1, r = e.indexOf("trident") !== -1, i = e.indexOf("edge") !== -1, s = !("method" in n) || n.method === "GET";
  return (t || r || i) && s;
}
function eu(n, e) {
  const t = this, r = zT(n.name, n), i = Ye(r, "");
  n = Je(n);
  const s = async function(h, y) {
    if (y = y || {}, y.headers = y.headers || new Wr(), y.credentials = "include", n.auth || r.auth) {
      const C = n.auth || r.auth, w = C.username + ":" + C.password, E = Ts(unescape(encodeURIComponent(w)));
      y.headers.set("Authorization", "Basic " + E);
    }
    const T = n.headers || {};
    return Object.keys(T).forEach(function(C) {
      y.headers.append(C, T[C]);
    }), HT(y) && (h += (h.indexOf("?") === -1 ? "?" : "&") + "_nonce=" + Date.now()), await (n.fetch || $m)(h, y);
  };
  function o(h, y) {
    return $e(h, function(...T) {
      l().then(function() {
        return y.apply(this, T);
      }).catch(function(S) {
        T.pop()(S);
      });
    }).bind(t);
  }
  async function c(h, y) {
    const T = {};
    y = y || {}, y.headers = y.headers || new Wr(), y.headers.get("Content-Type") || y.headers.set("Content-Type", "application/json"), y.headers.get("Accept") || y.headers.set("Accept", "application/json");
    const S = await s(h, y);
    T.ok = S.ok, T.status = S.status;
    const C = await S.json();
    if (T.data = C, !T.ok)
      throw T.data.status = T.status, ti(T.data);
    return Array.isArray(T.data) && (T.data = T.data.map(function(w) {
      return w.error || w.missing ? ti(w) : w;
    })), T;
  }
  let u;
  async function l() {
    return n.skip_setup ? Promise.resolve() : u || (u = c(i).catch(function(h) {
      return h && h.status && h.status === 404 ? (Kc(404, "PouchDB is just detecting if the remote exists."), c(i, { method: "PUT" })) : Promise.reject(h);
    }).catch(function(h) {
      return h && h.status && h.status === 412 ? !0 : Promise.reject(h);
    }), u.catch(function() {
      u = null;
    }), u);
  }
  an(function() {
    e(null, t);
  }), t._remote = !0, t.type = function() {
    return "http";
  }, t.id = o("id", async function(h) {
    let y;
    try {
      y = await (await s(wo(r, ""))).json();
    } catch {
      y = {};
    }
    const T = y && y.uuid ? y.uuid + r.db : Ye(r, "");
    h(null, T);
  }), t.compact = o("compact", async function(h, y) {
    typeof h == "function" && (y = h, h = {}), h = Je(h), await c(Ye(r, "_compact"), { method: "POST" });
    function T() {
      t.info(function(S, C) {
        C && !C.compact_running ? y(null, { ok: !0 }) : setTimeout(T, h.interval || 200);
      });
    }
    T();
  }), t.bulkGet = $e("bulkGet", function(h, y) {
    const T = this;
    async function S(g) {
      const d = {};
      h.revs && (d.revs = !0), h.attachments && (d.attachments = !0), h.latest && (d.latest = !0);
      try {
        const m = await c(Ye(r, "_bulk_get" + ro(d)), {
          method: "POST",
          body: JSON.stringify({ docs: h.docs })
        });
        h.attachments && h.binary && m.data.results.forEach(function(v) {
          v.docs.forEach(dc);
        }), g(null, m.data);
      } catch (m) {
        g(m);
      }
    }
    function C() {
      const g = BT, d = Math.ceil(h.docs.length / g);
      let m = 0;
      const v = new Array(d);
      function I(R) {
        return function(b, A) {
          v[R] = A.results, ++m === d && y(null, { results: v.flat() });
        };
      }
      for (let R = 0; R < d; R++) {
        const b = Es(h, ["revs", "attachments", "binary", "latest"]);
        b.docs = h.docs.slice(
          R * g,
          Math.min(h.docs.length, (R + 1) * g)
        ), Am(T, b, I(R));
      }
    }
    const w = wo(r, ""), E = fc[w];
    typeof E != "boolean" ? S(function(g, d) {
      g ? (fc[w] = !1, Kc(
        g.status,
        "PouchDB is just detecting if the remote supports the _bulk_get API."
      ), C()) : (fc[w] = !0, y(null, d));
    }) : E ? S(y) : C();
  }), t._info = async function(h) {
    try {
      await l();
      const T = await (await s(Ye(r, ""))).json();
      T.host = Ye(r, ""), h(null, T);
    } catch (y) {
      h(y);
    }
  }, t.fetch = async function(h, y) {
    await l();
    const T = h.substring(0, 1) === "/" ? wo(r, h.substring(1)) : Ye(r, h);
    return s(T, y);
  }, t.get = o("get", async function(h, y, T) {
    typeof y == "function" && (T = y, y = {}), y = Je(y);
    const S = {};
    y.revs && (S.revs = !0), y.revs_info && (S.revs_info = !0), y.latest && (S.latest = !0), y.open_revs && (y.open_revs !== "all" && (y.open_revs = JSON.stringify(y.open_revs)), S.open_revs = y.open_revs), y.rev && (S.rev = y.rev), y.conflicts && (S.conflicts = y.conflicts), y.update_seq && (S.update_seq = y.update_seq), h = rr(h);
    function C(g) {
      const d = g._attachments, m = d && Object.keys(d);
      if (!d || !m.length)
        return;
      async function v(R) {
        const b = d[R], A = rr(g._id) + "/" + f(R) + "?rev=" + g._rev, O = await s(Ye(r, A));
        let D;
        "buffer" in O ? D = await O.buffer() : D = await O.blob();
        let N;
        if (y.binary) {
          const k = Object.getOwnPropertyDescriptor(D.__proto__, "type");
          (!k || k.set) && (D.type = b.content_type), N = D;
        } else
          N = await new Promise(function(k) {
            nl(D, k);
          });
        delete b.stub, delete b.length, b.data = N;
      }
      const I = m.map(function(R) {
        return function() {
          return v(R);
        };
      });
      return jT(I, 5);
    }
    function w(g) {
      return Array.isArray(g) ? Promise.all(g.map(function(d) {
        if (d.ok)
          return C(d.ok);
      })) : C(g);
    }
    const E = Ye(r, h + ro(S));
    try {
      const g = await c(E);
      y.attachments && await w(g.data), T(null, g.data);
    } catch (g) {
      g.docId = h, T(g);
    }
  }), t.remove = o("remove", async function(h, y, T, S) {
    let C;
    typeof y == "string" ? (C = {
      _id: h,
      _rev: y
    }, typeof T == "function" && (S = T, T = {})) : (C = h, typeof y == "function" ? (S = y, T = {}) : (S = T, T = y));
    const w = C._rev || T.rev, E = Ye(r, rr(C._id)) + "?rev=" + w;
    try {
      const g = await c(E, { method: "DELETE" });
      S(null, g.data);
    } catch (g) {
      S(g);
    }
  });
  function f(h) {
    return h.split("/").map(encodeURIComponent).join("/");
  }
  t.getAttachment = o("getAttachment", async function(h, y, T, S) {
    typeof T == "function" && (S = T, T = {});
    const C = T.rev ? "?rev=" + T.rev : "", w = Ye(r, rr(h)) + "/" + f(y) + C;
    let E;
    try {
      const g = await s(w, { method: "GET" });
      if (!g.ok)
        throw g;
      E = g.headers.get("content-type");
      let d;
      if (typeof process < "u" && !process.browser && typeof g.buffer == "function" ? d = await g.buffer() : d = await g.blob(), typeof process < "u" && !process.browser) {
        const m = Object.getOwnPropertyDescriptor(d.__proto__, "type");
        (!m || m.set) && (d.type = E);
      }
      S(null, d);
    } catch (g) {
      S(g);
    }
  }), t.removeAttachment = o("removeAttachment", async function(h, y, T, S) {
    const C = Ye(r, rr(h) + "/" + f(y)) + "?rev=" + T;
    try {
      const w = await c(C, { method: "DELETE" });
      S(null, w.data);
    } catch (w) {
      S(w);
    }
  }), t.putAttachment = o("putAttachment", async function(h, y, T, S, C, w) {
    typeof C == "function" && (w = C, C = S, S = T, T = null);
    const E = rr(h) + "/" + f(y);
    let g = Ye(r, E);
    if (T && (g += "?rev=" + T), typeof S == "string") {
      let d;
      try {
        d = Xu(S);
      } catch {
        return w(le(
          Cm,
          "Attachment is not a valid base64 string"
        ));
      }
      S = d ? el(d, C) : "";
    }
    try {
      const d = await c(g, {
        headers: new Wr({ "Content-Type": C }),
        method: "PUT",
        body: S
      });
      w(null, d.data);
    } catch (d) {
      w(d);
    }
  }), t._bulkDocs = async function(h, y, T) {
    h.new_edits = y.new_edits;
    try {
      await l(), await Promise.all(h.docs.map(Pf));
      const S = await c(Ye(r, "_bulk_docs"), {
        method: "POST",
        body: JSON.stringify(h)
      });
      T(null, S.data);
    } catch (S) {
      T(S);
    }
  }, t._put = async function(h, y, T) {
    try {
      await l(), await Pf(h);
      const S = await c(Ye(r, rr(h._id)), {
        method: "PUT",
        body: JSON.stringify(h)
      });
      T(null, S.data);
    } catch (S) {
      S.docId = h && h._id, T(S);
    }
  }, t.allDocs = o("allDocs", async function(h, y) {
    typeof h == "function" && (y = h, h = {}), h = Je(h);
    const T = {};
    let S, C = "GET";
    h.conflicts && (T.conflicts = !0), h.update_seq && (T.update_seq = !0), h.descending && (T.descending = !0), h.include_docs && (T.include_docs = !0), h.attachments && (T.attachments = !0), h.key && (T.key = JSON.stringify(h.key)), h.start_key && (h.startkey = h.start_key), h.startkey && (T.startkey = JSON.stringify(h.startkey)), h.end_key && (h.endkey = h.end_key), h.endkey && (T.endkey = JSON.stringify(h.endkey)), typeof h.inclusive_end < "u" && (T.inclusive_end = !!h.inclusive_end), typeof h.limit < "u" && (T.limit = h.limit), typeof h.skip < "u" && (T.skip = h.skip);
    const w = ro(T);
    typeof h.keys < "u" && (C = "POST", S = { keys: h.keys });
    try {
      const E = await c(Ye(r, "_all_docs" + w), {
        method: C,
        body: JSON.stringify(S)
      });
      h.include_docs && h.attachments && h.binary && E.data.rows.forEach(dc), y(null, E.data);
    } catch (E) {
      y(E);
    }
  }), t._changes = function(h) {
    const y = "batch_size" in h ? h.batch_size : $T;
    h = Je(h), h.continuous && !("heartbeat" in h) && (h.heartbeat = qT);
    let T = "timeout" in h ? h.timeout : 30 * 1e3;
    "timeout" in h && h.timeout && T - h.timeout < no && (T = h.timeout + no), "heartbeat" in h && h.heartbeat && T - h.heartbeat < no && (T = h.heartbeat + no);
    const S = {};
    "timeout" in h && h.timeout && (S.timeout = h.timeout);
    const C = typeof h.limit < "u" ? h.limit : !1;
    let w = C;
    if (h.style && (S.style = h.style), (h.include_docs || h.filter && typeof h.filter == "function") && (S.include_docs = !0), h.attachments && (S.attachments = !0), h.continuous && (S.feed = "longpoll"), h.seq_interval && (S.seq_interval = h.seq_interval), h.conflicts && (S.conflicts = !0), h.descending && (S.descending = !0), h.update_seq && (S.update_seq = !0), "heartbeat" in h && h.heartbeat && (S.heartbeat = h.heartbeat), h.filter && typeof h.filter == "string" && (S.filter = h.filter), h.view && typeof h.view == "string" && (S.filter = "_view", S.view = h.view), h.query_params && typeof h.query_params == "object")
      for (const b in h.query_params)
        Object.prototype.hasOwnProperty.call(h.query_params, b) && (S[b] = h.query_params[b]);
    let E = "GET", g;
    h.doc_ids ? (S.filter = "_doc_ids", E = "POST", g = { doc_ids: h.doc_ids }) : h.selector && (S.filter = "_selector", E = "POST", g = { selector: h.selector });
    const d = new AbortController();
    let m;
    const v = async function(b, A) {
      if (h.aborted)
        return;
      S.since = b, typeof S.since == "object" && (S.since = JSON.stringify(S.since)), h.descending ? C && (S.limit = w) : S.limit = !C || w > y ? y : w;
      const O = Ye(r, "_changes" + ro(S)), D = {
        signal: d.signal,
        method: E,
        body: JSON.stringify(g)
      };
      if (m = b, !h.aborted)
        try {
          await l();
          const N = await c(O, D);
          A(null, N.data);
        } catch (N) {
          A(N);
        }
    }, I = { results: [] }, R = function(b, A) {
      if (h.aborted)
        return;
      let O = 0;
      if (A && A.results) {
        O = A.results.length, I.last_seq = A.last_seq;
        let N = null, k = null;
        typeof A.pending == "number" && (N = A.pending), (typeof I.last_seq == "string" || typeof I.last_seq == "number") && (k = I.last_seq), h.query_params, A.results = A.results.filter(function(Y) {
          w--;
          const oe = Yu(h)(Y);
          return oe && (h.include_docs && h.attachments && h.binary && dc(Y), h.return_docs && I.results.push(Y), h.onChange(Y, N, k)), oe;
        });
      } else if (b) {
        h.aborted = !0, h.complete(b);
        return;
      }
      A && A.last_seq && (m = A.last_seq);
      const D = C && w <= 0 || A && O < y || h.descending;
      h.continuous && !(C && w <= 0) || !D ? an(function() {
        v(m, R);
      }) : h.complete(null, I);
    };
    return v(h.since || 0, R), {
      cancel: function() {
        h.aborted = !0, d.abort();
      }
    };
  }, t.revsDiff = o("revsDiff", async function(h, y, T) {
    typeof y == "function" && (T = y, y = {});
    try {
      const S = await c(Ye(r, "_revs_diff"), {
        method: "POST",
        body: JSON.stringify(h)
      });
      T(null, S.data);
    } catch (S) {
      T(S);
    }
  }), t._close = function(h) {
    h();
  }, t._destroy = async function(h, y) {
    try {
      const T = await c(Ye(r, ""), { method: "DELETE" });
      y(null, T);
    } catch (T) {
      T.status === 404 ? y(null, { ok: !0 }) : y(T);
    }
  };
}
eu.valid = function() {
  return !0;
};
function GT(n) {
  n.adapter("http", eu, !1), n.adapter("https", eu, !1);
}
class or extends Error {
  constructor(e) {
    super(), this.status = 400, this.name = "query_parse_error", this.message = e, this.error = !0;
    try {
      Error.captureStackTrace(this, or);
    } catch {
    }
  }
}
class da extends Error {
  constructor(e) {
    super(), this.status = 404, this.name = "not_found", this.message = e, this.error = !0;
    try {
      Error.captureStackTrace(this, da);
    } catch {
    }
  }
}
class pa extends Error {
  constructor(e) {
    super(), this.status = 500, this.name = "invalid_value", this.message = e, this.error = !0;
    try {
      Error.captureStackTrace(this, pa);
    } catch {
    }
  }
}
function eg(n, e) {
  return e && n.then(function(t) {
    an(function() {
      e(null, t);
    });
  }, function(t) {
    an(function() {
      e(t);
    });
  }), n;
}
function WT(n) {
  return function(...e) {
    var t = e.pop(), r = n.apply(this, e);
    return typeof t == "function" && eg(r, t), r;
  };
}
function QT(n, e) {
  return n.then(function(t) {
    return e().then(function() {
      return t;
    });
  }, function(t) {
    return e().then(function() {
      throw t;
    });
  });
}
function pc(n, e) {
  return function() {
    var t = arguments, r = this;
    return n.add(function() {
      return e.apply(r, t);
    });
  };
}
function kf(n) {
  var e = new Set(n), t = new Array(e.size), r = -1;
  return e.forEach(function(i) {
    t[++r] = i;
  }), t;
}
function mc(n) {
  var e = new Array(n.size), t = -1;
  return n.forEach(function(r, i) {
    e[++t] = i;
  }), e;
}
function Of(n) {
  var e = "builtin " + n + " function requires map values to be numbers or number arrays";
  return new pa(e);
}
function tu(n) {
  for (var e = 0, t = 0, r = n.length; t < r; t++) {
    var i = n[t];
    if (typeof i != "number")
      if (Array.isArray(i)) {
        e = typeof e == "number" ? [e] : e;
        for (var s = 0, o = i.length; s < o; s++) {
          var c = i[s];
          if (typeof c != "number")
            throw Of("_sum");
          typeof e[s] > "u" ? e.push(c) : e[s] += c;
        }
      } else
        throw Of("_sum");
    else typeof e == "number" ? e += i : e[0] += i;
  }
  return e;
}
var YT = $t.bind(null, "log"), JT = Array.isArray, XT = JSON.parse;
function tg(n, e) {
  return Ju(
    "return (" + n.replace(/;\s*$/, "") + ");",
    {
      emit: e,
      sum: tu,
      log: YT,
      isArray: JT,
      toJSON: XT
    }
  );
}
class nu {
  constructor() {
    this.promise = Promise.resolve();
  }
  add(e) {
    return this.promise = this.promise.catch(() => {
    }).then(() => e()), this.promise;
  }
  finish() {
    return this.promise;
  }
}
function Df(n) {
  if (!n)
    return "undefined";
  switch (typeof n) {
    case "function":
      return n.toString();
    case "string":
      return n.toString();
    default:
      return JSON.stringify(n);
  }
}
function ZT(n, e) {
  return Df(n) + Df(e) + "undefined";
}
async function Nf(n, e, t, r, i, s) {
  const o = ZT(t, r);
  let c;
  if (!i && (c = n._cachedViews = n._cachedViews || {}, c[o]))
    return c[o];
  const u = n.info().then(async function(l) {
    const f = l.db_name + "-mrview-" + (i ? "temp" : Nm(o));
    function h(w) {
      w.views = w.views || {};
      let E = e;
      E.indexOf("/") === -1 && (E = e + "/" + e);
      const g = w.views[E] = w.views[E] || {};
      if (!g[f])
        return g[f] = !0, w;
    }
    await No(n, "_local/" + s, h);
    const T = (await n.registerDependentDatabase(f)).db;
    T.auto_compaction = !0;
    const S = {
      name: f,
      db: T,
      sourceDB: n,
      adapter: n.adapter,
      mapFun: t,
      reduceFun: r
    };
    let C;
    try {
      C = await S.db.get("_local/lastSeq");
    } catch (w) {
      if (w.status !== 404)
        throw w;
    }
    return S.seq = C ? C.seq : 0, c && S.db.once("destroyed", function() {
      delete c[o];
    }), S;
  });
  return c && (c[o] = u), u;
}
const xf = {}, Lf = new nu(), eb = 50;
function gc(n) {
  return n.indexOf("/") === -1 ? [n, n] : n.split("/");
}
function tb(n) {
  return n.length === 1 && /^1-/.test(n[0].rev);
}
function Mf(n, e, t) {
  try {
    n.emit("error", e);
  } catch {
    $t(
      "error",
      `The user's map/reduce function threw an uncaught error.
You can debug this error by doing:
myDatabase.on('error', function (err) { debugger; });
Please double-check your map/reduce function.`
    ), $t("error", e, t);
  }
}
function nb(n, e, t, r) {
  function i(x, L, $) {
    try {
      L($);
    } catch (U) {
      Mf(x, U, { fun: L, doc: $ });
    }
  }
  function s(x, L, $, U, q) {
    try {
      return { output: L($, U, q) };
    } catch (H) {
      return Mf(x, H, { fun: L, keys: $, values: U, rereduce: q }), { error: H };
    }
  }
  function o(x, L) {
    const $ = qe(x.key, L.key);
    return $ !== 0 ? $ : qe(x.value, L.value);
  }
  function c(x, L, $) {
    return $ = $ || 0, typeof L == "number" ? x.slice($, L + $) : $ > 0 ? x.slice($) : x;
  }
  function u(x) {
    const L = x.value;
    return L && typeof L == "object" && L._id || x.id;
  }
  function l(x) {
    for (const L of x.rows) {
      const $ = L.doc && L.doc._attachments;
      if ($)
        for (const U of Object.keys($)) {
          const q = $[U];
          $[U].data = tl(q.data, q.content_type);
        }
    }
  }
  function f(x) {
    return function(L) {
      return x.include_docs && x.attachments && x.binary && l(L), L;
    };
  }
  function h(x, L, $, U) {
    let q = L[x];
    typeof q < "u" && (U && (q = encodeURIComponent(JSON.stringify(q))), $.push(x + "=" + q));
  }
  function y(x) {
    if (typeof x < "u") {
      const L = Number(x);
      return !isNaN(L) && L === parseInt(x, 10) ? L : x;
    }
  }
  function T(x) {
    return x.group_level = y(x.group_level), x.limit = y(x.limit), x.skip = y(x.skip), x;
  }
  function S(x) {
    if (x) {
      if (typeof x != "number")
        return new or(`Invalid value for integer: "${x}"`);
      if (x < 0)
        return new or(`Invalid value for positive integer: "${x}"`);
    }
  }
  function C(x, L) {
    const $ = x.descending ? "endkey" : "startkey", U = x.descending ? "startkey" : "endkey";
    if (typeof x[$] < "u" && typeof x[U] < "u" && qe(x[$], x[U]) > 0)
      throw new or("No rows can match your key range, reverse your start_key and end_key or set {descending : true}");
    if (L.reduce && x.reduce !== !1) {
      if (x.include_docs)
        throw new or("{include_docs:true} is invalid for reduce");
      if (x.keys && x.keys.length > 1 && !x.group && !x.group_level)
        throw new or("Multi-key fetches for reduce views must use {group: true}");
    }
    for (const q of ["group_level", "limit", "skip"]) {
      const H = S(x[q]);
      if (H)
        throw H;
    }
  }
  async function w(x, L, $) {
    let U = [], q, H = "GET", ie;
    if (h("reduce", $, U), h("include_docs", $, U), h("attachments", $, U), h("limit", $, U), h("descending", $, U), h("group", $, U), h("group_level", $, U), h("skip", $, U), h("stale", $, U), h("conflicts", $, U), h("startkey", $, U, !0), h("start_key", $, U, !0), h("endkey", $, U, !0), h("end_key", $, U, !0), h("inclusive_end", $, U), h("key", $, U, !0), h("update_seq", $, U), U = U.join("&"), U = U === "" ? "" : "?" + U, typeof $.keys < "u") {
      const Q = `keys=${encodeURIComponent(JSON.stringify($.keys))}`;
      Q.length + U.length + 1 <= 2e3 ? U += (U[0] === "?" ? "&" : "?") + Q : (H = "POST", typeof L == "string" ? q = { keys: $.keys } : L.keys = $.keys);
    }
    if (typeof L == "string") {
      const j = gc(L), Q = await x.fetch("_design/" + j[0] + "/_view/" + j[1] + U, {
        headers: new Wr({ "Content-Type": "application/json" }),
        method: H,
        body: JSON.stringify(q)
      });
      ie = Q.ok;
      const Z = await Q.json();
      if (!ie)
        throw Z.status = Q.status, ti(Z);
      for (const te of Z.rows)
        if (te.value && te.value.error && te.value.error === "builtin_reduce_error")
          throw new Error(te.reason);
      return new Promise(function(te) {
        te(Z);
      }).then(f($));
    }
    q = q || {};
    for (const j of Object.keys(L))
      Array.isArray(L[j]) ? q[j] = L[j] : q[j] = L[j].toString();
    const z = await x.fetch("_temp_view" + U, {
      headers: new Wr({ "Content-Type": "application/json" }),
      method: "POST",
      body: JSON.stringify(q)
    });
    ie = z.ok;
    const V = await z.json();
    if (!ie)
      throw V.status = z.status, ti(V);
    return new Promise(function(j) {
      j(V);
    }).then(f($));
  }
  function E(x, L, $) {
    return new Promise(function(U, q) {
      x._query(L, $, function(H, ie) {
        if (H)
          return q(H);
        U(ie);
      });
    });
  }
  function g(x) {
    return new Promise(function(L, $) {
      x._viewCleanup(function(U, q) {
        if (U)
          return $(U);
        L(q);
      });
    });
  }
  function d(x) {
    return function(L) {
      if (L.status === 404)
        return x;
      throw L;
    };
  }
  async function m(x, L, $) {
    const U = "_local/doc_" + x, q = { _id: U, keys: [] }, H = $.get(x), ie = H[0], z = H[1];
    function V() {
      return tb(z) ? Promise.resolve(q) : L.db.get(U).catch(d(q));
    }
    function j(me) {
      return me.keys.length ? L.db.allDocs({
        keys: me.keys,
        include_docs: !0
      }) : Promise.resolve({ rows: [] });
    }
    function Q(me, G) {
      const be = [], J = /* @__PURE__ */ new Set();
      for (const pe of G.rows) {
        const ge = pe.doc;
        if (ge && (be.push(ge), J.add(ge._id), ge._deleted = !ie.has(ge._id), !ge._deleted)) {
          const Ie = ie.get(ge._id);
          "value" in Ie && (ge.value = Ie.value);
        }
      }
      const Ue = mc(ie);
      for (const pe of Ue)
        if (!J.has(pe)) {
          const ge = {
            _id: pe
          }, Ie = ie.get(pe);
          "value" in Ie && (ge.value = Ie.value), be.push(ge);
        }
      return me.keys = kf(Ue.concat(me.keys)), be.push(me), be;
    }
    const Z = await V(), te = await j(Z);
    return Q(Z, te);
  }
  function v(x) {
    return x.sourceDB.get("_local/purges").then(function(L) {
      const $ = L.purgeSeq;
      return x.db.get("_local/purgeSeq").then(function(U) {
        return U._rev;
      }).catch(d(void 0)).then(function(U) {
        return x.db.put({
          _id: "_local/purgeSeq",
          _rev: U,
          purgeSeq: $
        });
      });
    }).catch(function(L) {
      if (L.status !== 404)
        throw L;
    });
  }
  function I(x, L, $) {
    var U = "_local/lastSeq";
    return x.db.get(U).catch(d({ _id: U, seq: 0 })).then(function(q) {
      var H = mc(L);
      return Promise.all(H.map(function(ie) {
        return m(ie, x, L);
      })).then(function(ie) {
        var z = ie.flat();
        return q.seq = $, z.push(q), x.db.bulkDocs({ docs: z });
      }).then(() => v(x));
    });
  }
  function R(x) {
    const L = typeof x == "string" ? x : x.name;
    let $ = xf[L];
    return $ || ($ = xf[L] = new nu()), $;
  }
  async function b(x, L) {
    return pc(R(x), function() {
      return A(x, L);
    })();
  }
  async function A(x, L) {
    let $, U, q;
    function H(pe, ge) {
      const Ie = { id: U._id, key: vr(pe) };
      typeof ge < "u" && ge !== null && (Ie.value = vr(ge)), $.push(Ie);
    }
    const ie = e(x.mapFun, H);
    let z = x.seq || 0;
    function V() {
      return x.sourceDB.info().then(function(pe) {
        q = x.sourceDB.activeTasks.add({
          name: "view_indexing",
          total_items: pe.update_seq - z
        });
      });
    }
    function j(pe, ge) {
      return function() {
        return I(x, pe, ge);
      };
    }
    let Q = 0;
    const Z = {
      view: x.name,
      indexed_docs: Q
    };
    x.sourceDB.emit("indexing", Z);
    const te = new nu();
    async function me() {
      const pe = await x.sourceDB.changes({
        return_docs: !0,
        conflicts: !0,
        include_docs: !0,
        style: "all_docs",
        since: z,
        limit: L.changes_batch_size
      }), ge = await G();
      return be(pe, ge);
    }
    function G() {
      return x.db.get("_local/purgeSeq").then(function(pe) {
        return pe.purgeSeq;
      }).catch(d(-1)).then(function(pe) {
        return x.sourceDB.get("_local/purges").then(function(ge) {
          const Ie = ge.purges.filter(function(dt, je) {
            return je > pe;
          }).map((dt) => dt.docId), Ct = Ie.filter(function(dt, je) {
            return Ie.indexOf(dt) === je;
          });
          return Promise.all(Ct.map(function(dt) {
            return x.sourceDB.get(dt).then(function(je) {
              return { docId: dt, doc: je };
            }).catch(d({ docId: dt }));
          }));
        }).catch(d([]));
      });
    }
    function be(pe, ge) {
      const Ie = pe.results;
      if (!Ie.length && !ge.length)
        return;
      for (const je of ge)
        if (Ie.findIndex(function(dn) {
          return dn.id === je.docId;
        }) < 0) {
          const dn = {
            _id: je.docId,
            doc: {
              _id: je.docId,
              _deleted: 1
            },
            changes: []
          };
          je.doc && (dn.doc = je.doc, dn.changes.push({ rev: je.doc._rev })), Ie.push(dn);
        }
      const Ct = J(Ie);
      te.add(j(Ct, z)), Q = Q + Ie.length;
      const dt = {
        view: x.name,
        last_seq: pe.last_seq,
        results_count: Ie.length,
        indexed_docs: Q
      };
      if (x.sourceDB.emit("indexing", dt), x.sourceDB.activeTasks.update(q, { completed_items: Q }), !(Ie.length < L.changes_batch_size))
        return me();
    }
    function J(pe) {
      const ge = /* @__PURE__ */ new Map();
      for (const Ie of pe) {
        if (Ie.doc._id[0] !== "_") {
          $ = [], U = Ie.doc, U._deleted || i(x.sourceDB, ie, U), $.sort(o);
          const Ct = Ue($);
          ge.set(Ie.doc._id, [
            Ct,
            Ie.changes
          ]);
        }
        z = Ie.seq;
      }
      return ge;
    }
    function Ue(pe) {
      const ge = /* @__PURE__ */ new Map();
      let Ie;
      for (let Ct = 0, dt = pe.length; Ct < dt; Ct++) {
        const je = pe[Ct], bi = [je.key, je.id];
        Ct > 0 && qe(je.key, Ie) === 0 && bi.push(Ct), ge.set(Ht(bi), je), Ie = je.key;
      }
      return ge;
    }
    try {
      await V(), await me(), await te.finish(), x.seq = z, x.sourceDB.activeTasks.remove(q);
    } catch (pe) {
      x.sourceDB.activeTasks.remove(q, pe);
    }
  }
  function O(x, L, $) {
    $.group_level === 0 && delete $.group_level;
    const U = $.group || $.group_level, q = t(x.reduceFun), H = [], ie = isNaN($.group_level) ? Number.POSITIVE_INFINITY : $.group_level;
    for (const z of L) {
      const V = H[H.length - 1];
      let j = U ? z.key : null;
      if (U && Array.isArray(j) && (j = j.slice(0, ie)), V && qe(V.groupKey, j) === 0) {
        V.keys.push([z.key, z.id]), V.values.push(z.value);
        continue;
      }
      H.push({
        keys: [[z.key, z.id]],
        values: [z.value],
        groupKey: j
      });
    }
    L = [];
    for (const z of H) {
      const V = s(x.sourceDB, q, z.keys, z.values, !1);
      if (V.error && V.error instanceof pa)
        throw V.error;
      L.push({
        // CouchDB just sets the value to null if a non-built-in errors out
        value: V.error ? null : V.output,
        key: z.groupKey
      });
    }
    return { rows: c(L, $.limit, $.skip) };
  }
  function D(x, L) {
    return pc(R(x), function() {
      return N(x, L);
    })();
  }
  async function N(x, L) {
    let $;
    const U = x.reduceFun && L.reduce !== !1, q = L.skip || 0;
    typeof L.keys < "u" && !L.keys.length && (L.limit = 0, delete L.keys);
    async function H(z) {
      z.include_docs = !0;
      const V = await x.db.allDocs(z);
      return $ = V.total_rows, V.rows.map(function(j) {
        if ("value" in j.doc && typeof j.doc.value == "object" && j.doc.value !== null) {
          const Z = Object.keys(j.doc.value).sort(), te = ["id", "key", "value"];
          if (!(Z < te || Z > te))
            return j.doc.value;
        }
        const Q = GE(j.doc._id);
        return {
          key: Q[0],
          id: Q[1],
          value: "value" in j.doc ? j.doc.value : null
        };
      });
    }
    async function ie(z) {
      let V;
      if (U ? V = O(x, z, L) : typeof L.keys > "u" ? V = {
        total_rows: $,
        offset: q,
        rows: z
      } : V = {
        total_rows: $,
        offset: q,
        rows: c(z, L.limit, L.skip)
      }, L.update_seq && (V.update_seq = x.seq), L.include_docs) {
        const j = kf(z.map(u)), Q = await x.sourceDB.allDocs({
          keys: j,
          include_docs: !0,
          conflicts: L.conflicts,
          attachments: L.attachments,
          binary: L.binary
        }), Z = /* @__PURE__ */ new Map();
        for (const te of Q.rows)
          Z.set(te.id, te.doc);
        for (const te of z) {
          const me = u(te), G = Z.get(me);
          G && (te.doc = G);
        }
      }
      return V;
    }
    if (typeof L.keys < "u") {
      const V = L.keys.map(function(Z) {
        const te = {
          startkey: Ht([Z]),
          endkey: Ht([Z, {}])
        };
        return L.update_seq && (te.update_seq = !0), H(te);
      }), Q = (await Promise.all(V)).flat();
      return ie(Q);
    } else {
      const z = {
        descending: L.descending
      };
      L.update_seq && (z.update_seq = !0);
      let V, j;
      if ("start_key" in L && (V = L.start_key), "startkey" in L && (V = L.startkey), "end_key" in L && (j = L.end_key), "endkey" in L && (j = L.endkey), typeof V < "u" && (z.startkey = L.descending ? Ht([V, {}]) : Ht([V])), typeof j < "u") {
        let Z = L.inclusive_end !== !1;
        L.descending && (Z = !Z), z.endkey = Ht(
          Z ? [j, {}] : [j]
        );
      }
      if (typeof L.key < "u") {
        const Z = Ht([L.key]), te = Ht([L.key, {}]);
        z.descending ? (z.endkey = Z, z.startkey = te) : (z.startkey = Z, z.endkey = te);
      }
      U || (typeof L.limit == "number" && (z.limit = L.limit), z.skip = q);
      const Q = await H(z);
      return ie(Q);
    }
  }
  async function k(x) {
    return (await x.fetch("_view_cleanup", {
      headers: new Wr({ "Content-Type": "application/json" }),
      method: "POST"
    })).json();
  }
  async function Y(x) {
    try {
      const L = await x.get("_local/" + n), $ = /* @__PURE__ */ new Map();
      for (const V of Object.keys(L.views)) {
        const j = gc(V), Q = "_design/" + j[0], Z = j[1];
        let te = $.get(Q);
        te || (te = /* @__PURE__ */ new Set(), $.set(Q, te)), te.add(Z);
      }
      const U = {
        keys: mc($),
        include_docs: !0
      }, q = await x.allDocs(U), H = {};
      for (const V of q.rows) {
        const j = V.key.substring(8);
        for (const Q of $.get(V.key)) {
          let Z = j + "/" + Q;
          L.views[Z] || (Z = Q);
          const te = Object.keys(L.views[Z]), me = V.doc && V.doc.views && V.doc.views[Q];
          for (const G of te)
            H[G] = H[G] || me;
        }
      }
      const z = Object.keys(H).filter(function(V) {
        return !H[V];
      }).map(function(V) {
        return pc(R(V), function() {
          return new x.constructor(V, x.__opts).destroy();
        })();
      });
      return Promise.all(z).then(function() {
        return { ok: !0 };
      });
    } catch (L) {
      if (L.status === 404)
        return { ok: !0 };
      throw L;
    }
  }
  async function oe(x, L, $) {
    if (typeof x._query == "function")
      return E(x, L, $);
    if (tn(x))
      return w(x, L, $);
    const U = {
      changes_batch_size: x.__opts.view_update_changes_batch_size || eb
    };
    if (typeof L != "string")
      return C($, L), Lf.add(async function() {
        const q = await Nf(
          /* sourceDB */
          x,
          /* viewName */
          "temp_view/temp_view",
          /* mapFun */
          L.map,
          /* reduceFun */
          L.reduce,
          /* temporary */
          !0,
          /* localDocName */
          n
        );
        return QT(
          b(q, U).then(
            function() {
              return D(q, $);
            }
          ),
          function() {
            return q.db.destroy();
          }
        );
      }), Lf.finish();
    {
      const q = L, H = gc(q), ie = H[0], z = H[1], V = await x.get("_design/" + ie);
      if (L = V.views && V.views[z], !L)
        throw new da(`ddoc ${V._id} has no view named ${z}`);
      r(V, z), C($, L);
      const j = await Nf(
        /* sourceDB */
        x,
        /* viewName */
        q,
        /* mapFun */
        L.map,
        /* reduceFun */
        L.reduce,
        /* temporary */
        !1,
        /* localDocName */
        n
      );
      return $.stale === "ok" || $.stale === "update_after" ? ($.stale === "update_after" && an(function() {
        b(j, U);
      }), D(j, $)) : (await b(j, U), D(j, $));
    }
  }
  function ue(x, L, $) {
    const U = this;
    typeof L == "function" && ($ = L, L = {}), L = L ? T(L) : {}, typeof x == "function" && (x = { map: x });
    const q = Promise.resolve().then(function() {
      return oe(U, x, L);
    });
    return eg(q, $), q;
  }
  const ae = WT(function() {
    const x = this;
    return typeof x._viewCleanup == "function" ? g(x) : tn(x) ? k(x) : Y(x);
  });
  return {
    query: ue,
    viewCleanup: ae
  };
}
var yc = {
  _sum: function(n, e) {
    return tu(e);
  },
  _count: function(n, e) {
    return e.length;
  },
  _stats: function(n, e) {
    function t(r) {
      for (var i = 0, s = 0, o = r.length; s < o; s++) {
        var c = r[s];
        i += c * c;
      }
      return i;
    }
    return {
      sum: tu(e),
      min: Math.min.apply(null, e),
      max: Math.max.apply(null, e),
      count: e.length,
      sumsqr: t(e)
    };
  }
};
function rb(n) {
  if (/^_sum/.test(n))
    return yc._sum;
  if (/^_count/.test(n))
    return yc._count;
  if (/^_stats/.test(n))
    return yc._stats;
  if (/^_/.test(n))
    throw new Error(n + " is not a supported reduce function.");
}
function ib(n, e) {
  if (typeof n == "function" && n.length === 2) {
    var t = n;
    return function(r) {
      return t(r, e);
    };
  } else
    return tg(n.toString(), e);
}
function sb(n) {
  var e = n.toString(), t = rb(e);
  return t || tg(e);
}
function ob(n, e) {
  var t = n.views && n.views[e];
  if (typeof t.map != "string")
    throw new da("ddoc " + n._id + " has no string view named " + e + ", instead found object of type: " + typeof t.map);
}
var ab = "mrviews", ng = nb(ab, ib, sb, ob);
function cb(n, e, t) {
  return ng.query.call(this, n, e, t);
}
function ub(n) {
  return ng.viewCleanup.call(this, n);
}
var lb = {
  query: cb,
  viewCleanup: ub
};
function hb(n, e, t) {
  return !n._attachments || !n._attachments[t] || n._attachments[t].digest !== e._attachments[t].digest;
}
function Vf(n, e) {
  var t = Object.keys(e._attachments);
  return Promise.all(t.map(function(r) {
    return n.getAttachment(e._id, r, { rev: e._rev });
  }));
}
function fb(n, e, t) {
  var r = tn(e) && !tn(n), i = Object.keys(t._attachments);
  return r ? n.get(t._id).then(function(s) {
    return Promise.all(i.map(function(o) {
      return hb(s, t, o) ? e.getAttachment(t._id, o) : n.getAttachment(s._id, o);
    }));
  }).catch(function(s) {
    if (s.status !== 404)
      throw s;
    return Vf(e, t);
  }) : Vf(e, t);
}
function db(n) {
  var e = [];
  return Object.keys(n).forEach(function(t) {
    var r = n[t].missing;
    r.forEach(function(i) {
      e.push({
        id: t,
        rev: i
      });
    });
  }), {
    docs: e,
    revs: !0,
    latest: !0
  };
}
function pb(n, e, t, r) {
  t = Je(t);
  var i = [], s = !0;
  function o() {
    var u = db(t);
    if (u.docs.length)
      return n.bulkGet(u).then(function(l) {
        if (r.cancelled)
          throw new Error("cancelled");
        return Promise.all(l.results.map(function(f) {
          return Promise.all(f.docs.map(function(h) {
            var y = h.ok;
            return h.error && (s = !1), !y || !y._attachments ? y : fb(e, n, y).then((T) => {
              var S = Object.keys(y._attachments);
              return T.forEach(function(C, w) {
                var E = y._attachments[S[w]];
                delete E.stub, delete E.length, E.data = C;
              }), y;
            });
          }));
        })).then(function(f) {
          i = i.concat(f.flat().filter(Boolean));
        });
      });
  }
  function c() {
    return { ok: s, docs: i };
  }
  return Promise.resolve().then(o).then(c);
}
var Ff = 1, Uf = "pouchdb", mb = 5, zt = 0;
function ru(n, e, t, r, i) {
  return n.get(e).catch(function(s) {
    if (s.status === 404)
      return (n.adapter === "http" || n.adapter === "https") && Kc(
        404,
        "PouchDB is just checking if a remote checkpoint exists."
      ), {
        session_id: r,
        _id: e,
        history: [],
        replicator: Uf,
        version: Ff
      };
    throw s;
  }).then(function(s) {
    if (!i.cancelled && s.last_seq !== t)
      return s.history = (s.history || []).filter(function(o) {
        return o.session_id !== r;
      }), s.history.unshift({
        last_seq: t,
        session_id: r
      }), s.history = s.history.slice(0, mb), s.version = Ff, s.replicator = Uf, s.session_id = r, s.last_seq = t, n.put(s).catch(function(o) {
        if (o.status === 409)
          return ru(n, e, t, r, i);
        throw o;
      });
  });
}
class jf {
  constructor(e, t, r, i, s = {
    writeSourceCheckpoint: !0,
    writeTargetCheckpoint: !0
  }) {
    this.src = e, this.target = t, this.id = r, this.returnValue = i, this.opts = s, typeof s.writeSourceCheckpoint > "u" && (s.writeSourceCheckpoint = !0), typeof s.writeTargetCheckpoint > "u" && (s.writeTargetCheckpoint = !0);
  }
  writeCheckpoint(e, t) {
    var r = this;
    return this.updateTarget(e, t).then(function() {
      return r.updateSource(e, t);
    });
  }
  updateTarget(e, t) {
    return this.opts.writeTargetCheckpoint ? ru(
      this.target,
      this.id,
      e,
      t,
      this.returnValue
    ) : Promise.resolve(!0);
  }
  updateSource(e, t) {
    if (this.opts.writeSourceCheckpoint) {
      var r = this;
      return ru(
        this.src,
        this.id,
        e,
        t,
        this.returnValue
      ).catch(function(i) {
        if (Bf(i))
          return r.opts.writeSourceCheckpoint = !1, !0;
        throw i;
      });
    } else
      return Promise.resolve(!0);
  }
  getCheckpoint() {
    var e = this;
    return !e.opts.writeSourceCheckpoint && !e.opts.writeTargetCheckpoint ? Promise.resolve(zt) : e.opts && e.opts.writeSourceCheckpoint && !e.opts.writeTargetCheckpoint ? e.src.get(e.id).then(function(t) {
      return t.last_seq || zt;
    }).catch(function(t) {
      if (t.status !== 404)
        throw t;
      return zt;
    }) : e.target.get(e.id).then(function(t) {
      return e.opts && e.opts.writeTargetCheckpoint && !e.opts.writeSourceCheckpoint ? t.last_seq || zt : e.src.get(e.id).then(function(r) {
        if (t.version !== r.version)
          return zt;
        var i;
        return t.version ? i = t.version.toString() : i = "undefined", i in $f ? $f[i](t, r) : zt;
      }, function(r) {
        if (r.status === 404 && t.last_seq)
          return e.src.put({
            _id: e.id,
            last_seq: zt
          }).then(function() {
            return zt;
          }, function(i) {
            return Bf(i) ? (e.opts.writeSourceCheckpoint = !1, t.last_seq) : zt;
          });
        throw r;
      });
    }).catch(function(t) {
      if (t.status !== 404)
        throw t;
      return zt;
    });
  }
}
var $f = {
  undefined: function(n, e) {
    return qe(n.last_seq, e.last_seq) === 0 ? e.last_seq : 0;
  },
  1: function(n, e) {
    return gb(e, n).last_seq;
  }
};
function gb(n, e) {
  return n.session_id === e.session_id ? {
    last_seq: n.last_seq,
    history: n.history
  } : rg(n.history, e.history);
}
function rg(n, e) {
  var t = n[0], r = n.slice(1), i = e[0], s = e.slice(1);
  if (!t || e.length === 0)
    return {
      last_seq: zt,
      history: []
    };
  var o = t.session_id;
  if (iu(o, e))
    return {
      last_seq: t.last_seq,
      history: n
    };
  var c = i.session_id;
  return iu(c, r) ? {
    last_seq: i.last_seq,
    history: s
  } : rg(r, s);
}
function iu(n, e) {
  var t = e[0], r = e.slice(1);
  return !n || e.length === 0 ? !1 : n === t.session_id ? !0 : iu(n, r);
}
function Bf(n) {
  return typeof n.status == "number" && Math.floor(n.status / 100) === 4;
}
function ig(n, e, t, r, i) {
  return this instanceof jf ? ig : new jf(n, e, t, r, i);
}
var qf = 0;
function yb(n, e, t, r) {
  if (n.retry === !1) {
    e.emit("error", t), e.removeAllListeners();
    return;
  }
  if (typeof n.back_off_function != "function" && (n.back_off_function = jw), e.emit("requestError", t), e.state === "active" || e.state === "pending") {
    e.emit("paused", t), e.state = "stopped";
    var i = function() {
      n.current_back_off = qf;
    }, s = function() {
      e.removeListener("active", i);
    };
    e.once("paused", s), e.once("active", i);
  }
  n.current_back_off = n.current_back_off || qf, n.current_back_off = n.back_off_function(n.current_back_off), setTimeout(r, n.current_back_off);
}
function _b(n) {
  return Object.keys(n).sort(qe).reduce(function(e, t) {
    return e[t] = n[t], e;
  }, {});
}
function vb(n, e, t) {
  var r = t.doc_ids ? t.doc_ids.sort(qe) : "", i = t.filter ? t.filter.toString() : "", s = "", o = "", c = "";
  return t.selector && (c = JSON.stringify(t.selector)), t.filter && t.query_params && (s = JSON.stringify(_b(t.query_params))), t.filter && t.filter === "_view" && (o = t.view.toString()), Promise.all([n.id(), e.id()]).then(function(u) {
    var l = u[0] + u[1] + i + o + s + r + c;
    return new Promise(function(f) {
      rl(l, f);
    });
  }).then(function(u) {
    return u = u.replace(/\//g, ".").replace(/\+/g, "_"), "_local/" + u;
  });
}
function sg(n, e, t, r, i) {
  var s = [], o, c = {
    seq: 0,
    changes: [],
    docs: []
  }, u = !1, l = !1, f = !1, h = 0, y = 0, T = t.continuous || t.live || !1, S = t.batch_size || 100, C = t.batches_limit || 10, w = t.style || "all_docs", E = !1, g = t.doc_ids, d = t.selector, m, v, I = [], R = fa(), b;
  i = i || {
    ok: !0,
    start_time: (/* @__PURE__ */ new Date()).toISOString(),
    docs_read: 0,
    docs_written: 0,
    doc_write_failures: 0,
    errors: []
  };
  var A = {};
  r.ready(n, e);
  function O() {
    return v ? Promise.resolve() : vb(n, e, t).then(function(V) {
      m = V;
      var j = {};
      t.checkpoint === !1 ? j = { writeSourceCheckpoint: !1, writeTargetCheckpoint: !1 } : t.checkpoint === "source" ? j = { writeSourceCheckpoint: !0, writeTargetCheckpoint: !1 } : t.checkpoint === "target" ? j = { writeSourceCheckpoint: !1, writeTargetCheckpoint: !0 } : j = { writeSourceCheckpoint: !0, writeTargetCheckpoint: !0 }, v = new ig(n, e, m, r, j);
    });
  }
  function D() {
    if (I = [], o.docs.length !== 0) {
      var V = o.docs, j = { timeout: t.timeout };
      return e.bulkDocs({ docs: V, new_edits: !1 }, j).then(function(Q) {
        if (r.cancelled)
          throw x(), new Error("cancelled");
        var Z = /* @__PURE__ */ Object.create(null);
        Q.forEach(function(me) {
          me.error && (Z[me.id] = me);
        });
        var te = Object.keys(Z).length;
        i.doc_write_failures += te, i.docs_written += V.length - te, V.forEach(function(me) {
          var G = Z[me._id];
          if (G) {
            i.errors.push(G);
            var be = (G.name || "").toLowerCase();
            if (be === "unauthorized" || be === "forbidden")
              r.emit("denied", Je(G));
            else
              throw G;
          } else
            I.push(me);
        });
      }, function(Q) {
        throw i.doc_write_failures += V.length, Q;
      });
    }
  }
  function N() {
    if (o.error)
      throw new Error("There was a problem getting docs.");
    i.last_seq = y = o.seq;
    var V = Je(i);
    return I.length && (V.docs = I, typeof o.pending == "number" && (V.pending = o.pending, delete o.pending), r.emit("change", V)), u = !0, n.info().then(function(j) {
      var Q = n.activeTasks.get(b);
      if (!(!o || !Q)) {
        var Z = Q.completed_items || 0, te = parseInt(j.update_seq, 10) - parseInt(h, 10);
        n.activeTasks.update(b, {
          completed_items: Z + o.changes.length,
          total_items: te
        });
      }
    }), v.writeCheckpoint(
      o.seq,
      R
    ).then(function() {
      if (r.emit("checkpoint", { checkpoint: o.seq }), u = !1, r.cancelled)
        throw x(), new Error("cancelled");
      o = void 0, q();
    }).catch(function(j) {
      throw z(j), j;
    });
  }
  function k() {
    var V = {};
    return o.changes.forEach(function(j) {
      r.emit("checkpoint", { revs_diff: j }), j.id !== "_user/" && (V[j.id] = j.changes.map(function(Q) {
        return Q.rev;
      }));
    }), e.revsDiff(V).then(function(j) {
      if (r.cancelled)
        throw x(), new Error("cancelled");
      o.diffs = j;
    });
  }
  function Y() {
    return pb(n, e, o.diffs, r).then(function(V) {
      o.error = !V.ok, V.docs.forEach(function(j) {
        delete o.diffs[j._id], i.docs_read++, o.docs.push(j);
      });
    });
  }
  function oe() {
    if (!(r.cancelled || o)) {
      if (s.length === 0) {
        ue(!0);
        return;
      }
      o = s.shift(), r.emit("checkpoint", { start_next_batch: o.seq }), k().then(Y).then(D).then(N).then(oe).catch(function(V) {
        ae("batch processing terminated with error", V);
      });
    }
  }
  function ue(V) {
    if (c.changes.length === 0) {
      s.length === 0 && !o && ((T && A.live || l) && (r.state = "pending", r.emit("paused")), l && x());
      return;
    }
    (V || l || c.changes.length >= S) && (s.push(c), c = {
      seq: 0,
      changes: [],
      docs: []
    }, (r.state === "pending" || r.state === "stopped") && (r.state = "active", r.emit("active")), oe());
  }
  function ae(V, j) {
    f || (j.message || (j.message = V), i.ok = !1, i.status = "aborting", s = [], c = {
      seq: 0,
      changes: [],
      docs: []
    }, x(j));
  }
  function x(V) {
    if (!f && !(r.cancelled && (i.status = "cancelled", u)))
      if (i.status = i.status || "complete", i.end_time = (/* @__PURE__ */ new Date()).toISOString(), i.last_seq = y, f = !0, n.activeTasks.remove(b, V), V) {
        V = le(V), V.result = i;
        var j = (V.name || "").toLowerCase();
        j === "unauthorized" || j === "forbidden" ? (r.emit("error", V), r.removeAllListeners()) : yb(t, r, V, function() {
          sg(n, e, t, r);
        });
      } else
        r.emit("complete", i), r.removeAllListeners();
  }
  function L(V, j, Q) {
    if (r.cancelled)
      return x();
    typeof j == "number" && (c.pending = j);
    var Z = Yu(t)(V);
    if (!Z) {
      var te = n.activeTasks.get(b);
      if (te) {
        var me = te.completed_items || 0;
        n.activeTasks.update(b, { completed_items: ++me });
      }
      return;
    }
    c.seq = V.seq || Q, c.changes.push(V), r.emit("checkpoint", { pending_batch: c.seq }), an(function() {
      ue(s.length === 0 && A.live);
    });
  }
  function $(V) {
    if (E = !1, r.cancelled)
      return x();
    if (V.results.length > 0)
      A.since = V.results[V.results.length - 1].seq, q(), ue(!0);
    else {
      var j = function() {
        T ? (A.live = !0, q()) : l = !0, ue(!0);
      };
      !o && V.results.length === 0 ? (u = !0, v.writeCheckpoint(
        V.last_seq,
        R
      ).then(function() {
        if (u = !1, i.last_seq = y = V.last_seq, r.cancelled)
          throw x(), new Error("cancelled");
        j();
      }).catch(z)) : j();
    }
  }
  function U(V) {
    if (E = !1, r.cancelled)
      return x();
    ae("changes rejected", V);
  }
  function q() {
    if (!(!E && !l && s.length < C))
      return;
    E = !0;
    function V() {
      Q.cancel();
    }
    function j() {
      r.removeListener("cancel", V);
    }
    r._changes && (r.removeListener("cancel", r._abortChanges), r._changes.cancel()), r.once("cancel", V);
    var Q = n.changes(A).on("change", L);
    Q.then(j, j), Q.then($).catch(U), t.retry && (r._changes = Q, r._abortChanges = V);
  }
  function H(V) {
    return n.info().then(function(j) {
      var Q = typeof t.since > "u" ? parseInt(j.update_seq, 10) - parseInt(V, 10) : parseInt(j.update_seq, 10);
      return b = n.activeTasks.add({
        name: `${T ? "continuous " : ""}replication from ${j.db_name}`,
        total_items: Q
      }), V;
    });
  }
  function ie() {
    O().then(function() {
      if (r.cancelled) {
        x();
        return;
      }
      return v.getCheckpoint().then(H).then(function(V) {
        y = V, h = V, A = {
          since: y,
          limit: S,
          batch_size: S,
          style: w,
          doc_ids: g,
          selector: d,
          return_docs: !0
          // required so we know when we're done
        }, t.filter && (typeof t.filter != "string" ? A.include_docs = !0 : A.filter = t.filter), "heartbeat" in t && (A.heartbeat = t.heartbeat), "timeout" in t && (A.timeout = t.timeout), t.query_params && (A.query_params = t.query_params), t.view && (A.view = t.view), q();
      });
    }).catch(function(V) {
      ae("getCheckpoint rejected with ", V);
    });
  }
  function z(V) {
    u = !1, ae("writeCheckpoint completed with error", V);
  }
  if (r.cancelled) {
    x();
    return;
  }
  r._addedListeners || (r.once("cancel", x), typeof t.complete == "function" && (r.once("error", t.complete), r.once("complete", function(V) {
    t.complete(null, V);
  })), r._addedListeners = !0), typeof t.since > "u" ? ie() : O().then(function() {
    return u = !0, v.writeCheckpoint(t.since, R);
  }).then(function() {
    if (u = !1, r.cancelled) {
      x();
      return;
    }
    y = t.since, ie();
  }).catch(z);
}
class wb extends Tn {
  constructor() {
    super(), this.cancelled = !1, this.state = "pending";
    const e = new Promise((t, r) => {
      this.once("complete", t), this.once("error", r);
    });
    this.then = function(t, r) {
      return e.then(t, r);
    }, this.catch = function(t) {
      return e.catch(t);
    }, this.catch(function() {
    });
  }
  cancel() {
    this.cancelled = !0, this.state = "cancelled", this.emit("cancel");
  }
  ready(e, t) {
    if (this._readyCalled)
      return;
    this._readyCalled = !0;
    const r = () => {
      this.cancel();
    };
    e.once("destroyed", r), t.once("destroyed", r);
    function i() {
      e.removeListener("destroyed", r), t.removeListener("destroyed", r);
    }
    this.once("complete", i), this.once("error", i);
  }
}
function Mo(n, e) {
  var t = e.PouchConstructor;
  return typeof n == "string" ? new t(n, e) : n;
}
function su(n, e, t, r) {
  if (typeof t == "function" && (r = t, t = {}), typeof t > "u" && (t = {}), t.doc_ids && !Array.isArray(t.doc_ids))
    throw le(
      ha,
      "`doc_ids` filter parameter is not a list."
    );
  t.complete = r, t = Je(t), t.continuous = t.continuous || t.live, t.retry = "retry" in t ? t.retry : !1, t.PouchConstructor = t.PouchConstructor || this;
  var i = new wb(t), s = Mo(n, t), o = Mo(e, t);
  return sg(s, o, t, i), i;
}
function Eb(n, e, t, r) {
  return typeof t == "function" && (r = t, t = {}), typeof t > "u" && (t = {}), t = Je(t), t.PouchConstructor = t.PouchConstructor || this, n = Mo(n, t), e = Mo(e, t), new Tb(n, e, t, r);
}
class Tb extends Tn {
  constructor(e, t, r, i) {
    super(), this.canceled = !1;
    const s = r.push ? Object.assign({}, r, r.push) : r, o = r.pull ? Object.assign({}, r, r.pull) : r;
    this.push = su(e, t, s), this.pull = su(t, e, o), this.pushPaused = !0, this.pullPaused = !0;
    const c = (d) => {
      this.emit("change", {
        direction: "pull",
        change: d
      });
    }, u = (d) => {
      this.emit("change", {
        direction: "push",
        change: d
      });
    }, l = (d) => {
      this.emit("denied", {
        direction: "push",
        doc: d
      });
    }, f = (d) => {
      this.emit("denied", {
        direction: "pull",
        doc: d
      });
    }, h = () => {
      this.pushPaused = !0, this.pullPaused && this.emit("paused");
    }, y = () => {
      this.pullPaused = !0, this.pushPaused && this.emit("paused");
    }, T = () => {
      this.pushPaused = !1, this.pullPaused && this.emit("active", {
        direction: "push"
      });
    }, S = () => {
      this.pullPaused = !1, this.pushPaused && this.emit("active", {
        direction: "pull"
      });
    };
    let C = {};
    const w = (d) => (m, v) => {
      (m === "change" && (v === c || v === u) || m === "denied" && (v === f || v === l) || m === "paused" && (v === y || v === h) || m === "active" && (v === S || v === T)) && (m in C || (C[m] = {}), C[m][d] = !0, Object.keys(C[m]).length === 2 && this.removeAllListeners(m));
    };
    r.live && (this.push.on("complete", this.pull.cancel.bind(this.pull)), this.pull.on("complete", this.push.cancel.bind(this.push)));
    function E(d, m, v) {
      d.listeners(m).indexOf(v) == -1 && d.on(m, v);
    }
    this.on("newListener", function(d) {
      d === "change" ? (E(this.pull, "change", c), E(this.push, "change", u)) : d === "denied" ? (E(this.pull, "denied", f), E(this.push, "denied", l)) : d === "active" ? (E(this.pull, "active", S), E(this.push, "active", T)) : d === "paused" && (E(this.pull, "paused", y), E(this.push, "paused", h));
    }), this.on("removeListener", function(d) {
      d === "change" ? (this.pull.removeListener("change", c), this.push.removeListener("change", u)) : d === "denied" ? (this.pull.removeListener("denied", f), this.push.removeListener("denied", l)) : d === "active" ? (this.pull.removeListener("active", S), this.push.removeListener("active", T)) : d === "paused" && (this.pull.removeListener("paused", y), this.push.removeListener("paused", h));
    }), this.pull.on("removeListener", w("pull")), this.push.on("removeListener", w("push"));
    const g = Promise.all([
      this.push,
      this.pull
    ]).then((d) => {
      const m = {
        push: d[0],
        pull: d[1]
      };
      return this.emit("complete", m), i && i(null, m), this.removeAllListeners(), m;
    }, (d) => {
      if (this.cancel(), i ? i(d) : this.emit("error", d), this.removeAllListeners(), i)
        throw d;
    });
    this.then = function(d, m) {
      return g.then(d, m);
    }, this.catch = function(d) {
      return g.catch(d);
    };
  }
  cancel() {
    this.canceled || (this.canceled = !0, this.push.cancel(), this.pull.cancel());
  }
}
function bb(n) {
  n.replicate = su, n.sync = Eb, Object.defineProperty(n.prototype, "replicate", {
    get: function() {
      var e = this;
      return typeof this.replicateMethods > "u" && (this.replicateMethods = {
        from: function(t, r, i) {
          return e.constructor.replicate(t, e, r, i);
        },
        to: function(t, r, i) {
          return e.constructor.replicate(e, t, r, i);
        }
      }), this.replicateMethods;
    }
  }), n.prototype.sync = function(e, t, r) {
    return this.constructor.sync(this, e, t, r);
  };
}
de.plugin(UT).plugin(GT).plugin(lb).plugin(bb);
function st(n) {
  return `Minified Redux error #${n}; visit https://redux.js.org/Errors?code=${n} for the full message or use the non-minified dev environment for full errors. `;
}
var Ib = typeof Symbol == "function" && Symbol.observable || "@@observable", Kf = Ib, _c = () => Math.random().toString(36).substring(7).split("").join("."), Sb = {
  INIT: `@@redux/INIT${/* @__PURE__ */ _c()}`,
  REPLACE: `@@redux/REPLACE${/* @__PURE__ */ _c()}`,
  PROBE_UNKNOWN_ACTION: () => `@@redux/PROBE_UNKNOWN_ACTION${_c()}`
}, dr = Sb;
function bs(n) {
  if (typeof n != "object" || n === null)
    return !1;
  let e = n;
  for (; Object.getPrototypeOf(e) !== null; )
    e = Object.getPrototypeOf(e);
  return Object.getPrototypeOf(n) === e || Object.getPrototypeOf(n) === null;
}
function Ab(n) {
  if (n === void 0)
    return "undefined";
  if (n === null)
    return "null";
  const e = typeof n;
  switch (e) {
    case "boolean":
    case "string":
    case "number":
    case "symbol":
    case "function":
      return e;
  }
  if (Array.isArray(n))
    return "array";
  if (Pb(n))
    return "date";
  if (Cb(n))
    return "error";
  const t = Rb(n);
  switch (t) {
    case "Symbol":
    case "Promise":
    case "WeakMap":
    case "WeakSet":
    case "Map":
    case "Set":
      return t;
  }
  return Object.prototype.toString.call(n).slice(8, -1).toLowerCase().replace(/\s/g, "");
}
function Rb(n) {
  return typeof n.constructor == "function" ? n.constructor.name : null;
}
function Cb(n) {
  return n instanceof Error || typeof n.message == "string" && n.constructor && typeof n.constructor.stackTraceLimit == "number";
}
function Pb(n) {
  return n instanceof Date ? !0 : typeof n.toDateString == "function" && typeof n.getDate == "function" && typeof n.setDate == "function";
}
function Nn(n) {
  let e = typeof n;
  return process.env.NODE_ENV !== "production" && (e = Ab(n)), e;
}
function og(n, e, t) {
  if (typeof n != "function")
    throw new Error(process.env.NODE_ENV === "production" ? st(2) : `Expected the root reducer to be a function. Instead, received: '${Nn(n)}'`);
  if (typeof e == "function" && typeof t == "function" || typeof t == "function" && typeof arguments[3] == "function")
    throw new Error(process.env.NODE_ENV === "production" ? st(0) : "It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
  if (typeof e == "function" && typeof t > "u" && (t = e, e = void 0), typeof t < "u") {
    if (typeof t != "function")
      throw new Error(process.env.NODE_ENV === "production" ? st(1) : `Expected the enhancer to be a function. Instead, received: '${Nn(t)}'`);
    return t(og)(n, e);
  }
  let r = n, i = e, s = /* @__PURE__ */ new Map(), o = s, c = 0, u = !1;
  function l() {
    o === s && (o = /* @__PURE__ */ new Map(), s.forEach((w, E) => {
      o.set(E, w);
    }));
  }
  function f() {
    if (u)
      throw new Error(process.env.NODE_ENV === "production" ? st(3) : "You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
    return i;
  }
  function h(w) {
    if (typeof w != "function")
      throw new Error(process.env.NODE_ENV === "production" ? st(4) : `Expected the listener to be a function. Instead, received: '${Nn(w)}'`);
    if (u)
      throw new Error(process.env.NODE_ENV === "production" ? st(5) : "You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.");
    let E = !0;
    l();
    const g = c++;
    return o.set(g, w), function() {
      if (E) {
        if (u)
          throw new Error(process.env.NODE_ENV === "production" ? st(6) : "You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.");
        E = !1, l(), o.delete(g), s = null;
      }
    };
  }
  function y(w) {
    if (!bs(w))
      throw new Error(process.env.NODE_ENV === "production" ? st(7) : `Actions must be plain objects. Instead, the actual type was: '${Nn(w)}'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`);
    if (typeof w.type > "u")
      throw new Error(process.env.NODE_ENV === "production" ? st(8) : 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
    if (typeof w.type != "string")
      throw new Error(process.env.NODE_ENV === "production" ? st(17) : `Action "type" property must be a string. Instead, the actual type was: '${Nn(w.type)}'. Value was: '${w.type}' (stringified)`);
    if (u)
      throw new Error(process.env.NODE_ENV === "production" ? st(9) : "Reducers may not dispatch actions.");
    try {
      u = !0, i = r(i, w);
    } finally {
      u = !1;
    }
    return (s = o).forEach((g) => {
      g();
    }), w;
  }
  function T(w) {
    if (typeof w != "function")
      throw new Error(process.env.NODE_ENV === "production" ? st(10) : `Expected the nextReducer to be a function. Instead, received: '${Nn(w)}`);
    r = w, y({
      type: dr.REPLACE
    });
  }
  function S() {
    const w = h;
    return {
      /**
       * The minimal observable subscription method.
       * @param observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
      subscribe(E) {
        if (typeof E != "object" || E === null)
          throw new Error(process.env.NODE_ENV === "production" ? st(11) : `Expected the observer to be an object. Instead, received: '${Nn(E)}'`);
        function g() {
          const m = E;
          m.next && m.next(f());
        }
        return g(), {
          unsubscribe: w(g)
        };
      },
      [Kf]() {
        return this;
      }
    };
  }
  return y({
    type: dr.INIT
  }), {
    dispatch: y,
    subscribe: h,
    getState: f,
    replaceReducer: T,
    [Kf]: S
  };
}
function zf(n) {
  typeof console < "u" && typeof console.error == "function" && console.error(n);
  try {
    throw new Error(n);
  } catch {
  }
}
function kb(n, e, t, r) {
  const i = Object.keys(e), s = t && t.type === dr.INIT ? "preloadedState argument passed to createStore" : "previous state received by the reducer";
  if (i.length === 0)
    return "Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.";
  if (!bs(n))
    return `The ${s} has unexpected type of "${Nn(n)}". Expected argument to be an object with the following keys: "${i.join('", "')}"`;
  const o = Object.keys(n).filter((c) => !e.hasOwnProperty(c) && !r[c]);
  if (o.forEach((c) => {
    r[c] = !0;
  }), !(t && t.type === dr.REPLACE) && o.length > 0)
    return `Unexpected ${o.length > 1 ? "keys" : "key"} "${o.join('", "')}" found in ${s}. Expected to find one of the known reducer keys instead: "${i.join('", "')}". Unexpected keys will be ignored.`;
}
function Ob(n) {
  Object.keys(n).forEach((e) => {
    const t = n[e];
    if (typeof t(void 0, {
      type: dr.INIT
    }) > "u")
      throw new Error(process.env.NODE_ENV === "production" ? st(12) : `The slice reducer for key "${e}" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.`);
    if (typeof t(void 0, {
      type: dr.PROBE_UNKNOWN_ACTION()
    }) > "u")
      throw new Error(process.env.NODE_ENV === "production" ? st(13) : `The slice reducer for key "${e}" returned undefined when probed with a random type. Don't try to handle '${dr.INIT}' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.`);
  });
}
function Db(n) {
  const e = Object.keys(n), t = {};
  for (let o = 0; o < e.length; o++) {
    const c = e[o];
    process.env.NODE_ENV !== "production" && typeof n[c] > "u" && zf(`No reducer provided for key "${c}"`), typeof n[c] == "function" && (t[c] = n[c]);
  }
  const r = Object.keys(t);
  let i;
  process.env.NODE_ENV !== "production" && (i = {});
  let s;
  try {
    Ob(t);
  } catch (o) {
    s = o;
  }
  return function(c = {}, u) {
    if (s)
      throw s;
    if (process.env.NODE_ENV !== "production") {
      const h = kb(c, t, u, i);
      h && zf(h);
    }
    let l = !1;
    const f = {};
    for (let h = 0; h < r.length; h++) {
      const y = r[h], T = t[y], S = c[y], C = T(S, u);
      if (typeof C > "u") {
        const w = u && u.type;
        throw new Error(process.env.NODE_ENV === "production" ? st(14) : `When called with an action of type ${w ? `"${String(w)}"` : "(unknown type)"}, the slice reducer for key "${y}" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.`);
      }
      f[y] = C, l = l || C !== S;
    }
    return l = l || r.length !== Object.keys(c).length, l ? f : c;
  };
}
function Vo(...n) {
  return n.length === 0 ? (e) => e : n.length === 1 ? n[0] : n.reduce((e, t) => (...r) => e(t(...r)));
}
function Nb(...n) {
  return (e) => (t, r) => {
    const i = e(t, r);
    let s = () => {
      throw new Error(process.env.NODE_ENV === "production" ? st(15) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
    };
    const o = {
      getState: i.getState,
      dispatch: (u, ...l) => s(u, ...l)
    }, c = n.map((u) => u(o));
    return s = Vo(...c)(i.dispatch), {
      ...i,
      dispatch: s
    };
  };
}
function cl(n) {
  return bs(n) && "type" in n && typeof n.type == "string";
}
var ag = Symbol.for("immer-nothing"), Hf = Symbol.for("immer-draftable"), Nt = Symbol.for("immer-state"), xb = process.env.NODE_ENV !== "production" ? [
  // All error codes, starting by 0:
  function(n) {
    return `The plugin for '${n}' has not been loaded into Immer. To enable the plugin, import and call \`enable${n}()\` when initializing your application.`;
  },
  function(n) {
    return `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${n}'`;
  },
  "This object has been frozen and should not be mutated",
  function(n) {
    return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + n;
  },
  "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.",
  "Immer forbids circular references",
  "The first or second argument to `produce` must be a function",
  "The third argument to `produce` must be a function or undefined",
  "First argument to `createDraft` must be a plain object, an array, or an immerable object",
  "First argument to `finishDraft` must be a draft returned by `createDraft`",
  function(n) {
    return `'current' expects a draft, got: ${n}`;
  },
  "Object.defineProperty() cannot be used on an Immer draft",
  "Object.setPrototypeOf() cannot be used on an Immer draft",
  "Immer only supports deleting array indices",
  "Immer only supports setting array indices and the 'length' property",
  function(n) {
    return `'original' expects a draft, got: ${n}`;
  }
  // Note: if more errors are added, the errorOffset in Patches.ts should be increased
  // See Patches.ts for additional errors
] : [];
function Pt(n, ...e) {
  if (process.env.NODE_ENV !== "production") {
    const t = xb[n], r = typeof t == "function" ? t.apply(null, e) : t;
    throw new Error(`[Immer] ${r}`);
  }
  throw new Error(
    `[Immer] minified error nr: ${n}. Full error at: https://bit.ly/3cXEKWf`
  );
}
var ni = Object.getPrototypeOf;
function cn(n) {
  return !!n && !!n[Nt];
}
function bn(n) {
  var e;
  return n ? cg(n) || Array.isArray(n) || !!n[Hf] || !!((e = n.constructor) != null && e[Hf]) || ga(n) || ya(n) : !1;
}
var Lb = Object.prototype.constructor.toString();
function cg(n) {
  if (!n || typeof n != "object")
    return !1;
  const e = ni(n);
  if (e === null)
    return !0;
  const t = Object.hasOwnProperty.call(e, "constructor") && e.constructor;
  return t === Object ? !0 : typeof t == "function" && Function.toString.call(t) === Lb;
}
function Fo(n, e) {
  ma(n) === 0 ? Reflect.ownKeys(n).forEach((t) => {
    e(t, n[t], n);
  }) : n.forEach((t, r) => e(r, t, n));
}
function ma(n) {
  const e = n[Nt];
  return e ? e.type_ : Array.isArray(n) ? 1 : ga(n) ? 2 : ya(n) ? 3 : 0;
}
function ou(n, e) {
  return ma(n) === 2 ? n.has(e) : Object.prototype.hasOwnProperty.call(n, e);
}
function ug(n, e, t) {
  const r = ma(n);
  r === 2 ? n.set(e, t) : r === 3 ? n.add(t) : n[e] = t;
}
function Mb(n, e) {
  return n === e ? n !== 0 || 1 / n === 1 / e : n !== n && e !== e;
}
function ga(n) {
  return n instanceof Map;
}
function ya(n) {
  return n instanceof Set;
}
function ir(n) {
  return n.copy_ || n.base_;
}
function au(n, e) {
  if (ga(n))
    return new Map(n);
  if (ya(n))
    return new Set(n);
  if (Array.isArray(n))
    return Array.prototype.slice.call(n);
  const t = cg(n);
  if (e === !0 || e === "class_only" && !t) {
    const r = Object.getOwnPropertyDescriptors(n);
    delete r[Nt];
    let i = Reflect.ownKeys(r);
    for (let s = 0; s < i.length; s++) {
      const o = i[s], c = r[o];
      c.writable === !1 && (c.writable = !0, c.configurable = !0), (c.get || c.set) && (r[o] = {
        configurable: !0,
        writable: !0,
        // could live with !!desc.set as well here...
        enumerable: c.enumerable,
        value: n[o]
      });
    }
    return Object.create(ni(n), r);
  } else {
    const r = ni(n);
    if (r !== null && t)
      return { ...n };
    const i = Object.create(r);
    return Object.assign(i, n);
  }
}
function ul(n, e = !1) {
  return _a(n) || cn(n) || !bn(n) || (ma(n) > 1 && (n.set = n.add = n.clear = n.delete = Vb), Object.freeze(n), e && Object.entries(n).forEach(([t, r]) => ul(r, !0))), n;
}
function Vb() {
  Pt(2);
}
function _a(n) {
  return Object.isFrozen(n);
}
var Fb = {};
function wr(n) {
  const e = Fb[n];
  return e || Pt(0, n), e;
}
var os;
function lg() {
  return os;
}
function Ub(n, e) {
  return {
    drafts_: [],
    parent_: n,
    immer_: e,
    // Whenever the modified draft contains a draft from another scope, we
    // need to prevent auto-freezing so the unowned draft can be finalized.
    canAutoFreeze_: !0,
    unfinalizedDrafts_: 0
  };
}
function Gf(n, e) {
  e && (wr("Patches"), n.patches_ = [], n.inversePatches_ = [], n.patchListener_ = e);
}
function cu(n) {
  uu(n), n.drafts_.forEach(jb), n.drafts_ = null;
}
function uu(n) {
  n === os && (os = n.parent_);
}
function Wf(n) {
  return os = Ub(os, n);
}
function jb(n) {
  const e = n[Nt];
  e.type_ === 0 || e.type_ === 1 ? e.revoke_() : e.revoked_ = !0;
}
function Qf(n, e) {
  e.unfinalizedDrafts_ = e.drafts_.length;
  const t = e.drafts_[0];
  return n !== void 0 && n !== t ? (t[Nt].modified_ && (cu(e), Pt(4)), bn(n) && (n = Uo(e, n), e.parent_ || jo(e, n)), e.patches_ && wr("Patches").generateReplacementPatches_(
    t[Nt].base_,
    n,
    e.patches_,
    e.inversePatches_
  )) : n = Uo(e, t, []), cu(e), e.patches_ && e.patchListener_(e.patches_, e.inversePatches_), n !== ag ? n : void 0;
}
function Uo(n, e, t) {
  if (_a(e))
    return e;
  const r = e[Nt];
  if (!r)
    return Fo(
      e,
      (i, s) => Yf(n, r, e, i, s, t)
    ), e;
  if (r.scope_ !== n)
    return e;
  if (!r.modified_)
    return jo(n, r.base_, !0), r.base_;
  if (!r.finalized_) {
    r.finalized_ = !0, r.scope_.unfinalizedDrafts_--;
    const i = r.copy_;
    let s = i, o = !1;
    r.type_ === 3 && (s = new Set(i), i.clear(), o = !0), Fo(
      s,
      (c, u) => Yf(n, r, i, c, u, t, o)
    ), jo(n, i, !1), t && n.patches_ && wr("Patches").generatePatches_(
      r,
      t,
      n.patches_,
      n.inversePatches_
    );
  }
  return r.copy_;
}
function Yf(n, e, t, r, i, s, o) {
  if (process.env.NODE_ENV !== "production" && i === t && Pt(5), cn(i)) {
    const c = s && e && e.type_ !== 3 && // Set objects are atomic since they have no keys.
    !ou(e.assigned_, r) ? s.concat(r) : void 0, u = Uo(n, i, c);
    if (ug(t, r, u), cn(u))
      n.canAutoFreeze_ = !1;
    else
      return;
  } else o && t.add(i);
  if (bn(i) && !_a(i)) {
    if (!n.immer_.autoFreeze_ && n.unfinalizedDrafts_ < 1)
      return;
    Uo(n, i), (!e || !e.scope_.parent_) && typeof r != "symbol" && Object.prototype.propertyIsEnumerable.call(t, r) && jo(n, i);
  }
}
function jo(n, e, t = !1) {
  !n.parent_ && n.immer_.autoFreeze_ && n.canAutoFreeze_ && ul(e, t);
}
function $b(n, e) {
  const t = Array.isArray(n), r = {
    type_: t ? 1 : 0,
    // Track which produce call this is associated with.
    scope_: e ? e.scope_ : lg(),
    // True for both shallow and deep changes.
    modified_: !1,
    // Used during finalization.
    finalized_: !1,
    // Track which properties have been assigned (true) or deleted (false).
    assigned_: {},
    // The parent draft state.
    parent_: e,
    // The base state.
    base_: n,
    // The base proxy.
    draft_: null,
    // set below
    // The base copy with any updated values.
    copy_: null,
    // Called by the `produce` function.
    revoke_: null,
    isManual_: !1
  };
  let i = r, s = ll;
  t && (i = [r], s = as);
  const { revoke: o, proxy: c } = Proxy.revocable(i, s);
  return r.draft_ = c, r.revoke_ = o, c;
}
var ll = {
  get(n, e) {
    if (e === Nt)
      return n;
    const t = ir(n);
    if (!ou(t, e))
      return Bb(n, t, e);
    const r = t[e];
    return n.finalized_ || !bn(r) ? r : r === vc(n.base_, e) ? (wc(n), n.copy_[e] = hu(r, n)) : r;
  },
  has(n, e) {
    return e in ir(n);
  },
  ownKeys(n) {
    return Reflect.ownKeys(ir(n));
  },
  set(n, e, t) {
    const r = hg(ir(n), e);
    if (r != null && r.set)
      return r.set.call(n.draft_, t), !0;
    if (!n.modified_) {
      const i = vc(ir(n), e), s = i == null ? void 0 : i[Nt];
      if (s && s.base_ === t)
        return n.copy_[e] = t, n.assigned_[e] = !1, !0;
      if (Mb(t, i) && (t !== void 0 || ou(n.base_, e)))
        return !0;
      wc(n), lu(n);
    }
    return n.copy_[e] === t && // special case: handle new props with value 'undefined'
    (t !== void 0 || e in n.copy_) || // special case: NaN
    Number.isNaN(t) && Number.isNaN(n.copy_[e]) || (n.copy_[e] = t, n.assigned_[e] = !0), !0;
  },
  deleteProperty(n, e) {
    return vc(n.base_, e) !== void 0 || e in n.base_ ? (n.assigned_[e] = !1, wc(n), lu(n)) : delete n.assigned_[e], n.copy_ && delete n.copy_[e], !0;
  },
  // Note: We never coerce `desc.value` into an Immer draft, because we can't make
  // the same guarantee in ES5 mode.
  getOwnPropertyDescriptor(n, e) {
    const t = ir(n), r = Reflect.getOwnPropertyDescriptor(t, e);
    return r && {
      writable: !0,
      configurable: n.type_ !== 1 || e !== "length",
      enumerable: r.enumerable,
      value: t[e]
    };
  },
  defineProperty() {
    Pt(11);
  },
  getPrototypeOf(n) {
    return ni(n.base_);
  },
  setPrototypeOf() {
    Pt(12);
  }
}, as = {};
Fo(ll, (n, e) => {
  as[n] = function() {
    return arguments[0] = arguments[0][0], e.apply(this, arguments);
  };
});
as.deleteProperty = function(n, e) {
  return process.env.NODE_ENV !== "production" && isNaN(parseInt(e)) && Pt(13), as.set.call(this, n, e, void 0);
};
as.set = function(n, e, t) {
  return process.env.NODE_ENV !== "production" && e !== "length" && isNaN(parseInt(e)) && Pt(14), ll.set.call(this, n[0], e, t, n[0]);
};
function vc(n, e) {
  const t = n[Nt];
  return (t ? ir(t) : n)[e];
}
function Bb(n, e, t) {
  var i;
  const r = hg(e, t);
  return r ? "value" in r ? r.value : (
    // This is a very special case, if the prop is a getter defined by the
    // prototype, we should invoke it with the draft as context!
    (i = r.get) == null ? void 0 : i.call(n.draft_)
  ) : void 0;
}
function hg(n, e) {
  if (!(e in n))
    return;
  let t = ni(n);
  for (; t; ) {
    const r = Object.getOwnPropertyDescriptor(t, e);
    if (r)
      return r;
    t = ni(t);
  }
}
function lu(n) {
  n.modified_ || (n.modified_ = !0, n.parent_ && lu(n.parent_));
}
function wc(n) {
  n.copy_ || (n.copy_ = au(
    n.base_,
    n.scope_.immer_.useStrictShallowCopy_
  ));
}
var qb = class {
  constructor(n) {
    this.autoFreeze_ = !0, this.useStrictShallowCopy_ = !1, this.produce = (e, t, r) => {
      if (typeof e == "function" && typeof t != "function") {
        const s = t;
        t = e;
        const o = this;
        return function(u = s, ...l) {
          return o.produce(u, (f) => t.call(this, f, ...l));
        };
      }
      typeof t != "function" && Pt(6), r !== void 0 && typeof r != "function" && Pt(7);
      let i;
      if (bn(e)) {
        const s = Wf(this), o = hu(e, void 0);
        let c = !0;
        try {
          i = t(o), c = !1;
        } finally {
          c ? cu(s) : uu(s);
        }
        return Gf(s, r), Qf(i, s);
      } else if (!e || typeof e != "object") {
        if (i = t(e), i === void 0 && (i = e), i === ag && (i = void 0), this.autoFreeze_ && ul(i, !0), r) {
          const s = [], o = [];
          wr("Patches").generateReplacementPatches_(e, i, s, o), r(s, o);
        }
        return i;
      } else
        Pt(1, e);
    }, this.produceWithPatches = (e, t) => {
      if (typeof e == "function")
        return (o, ...c) => this.produceWithPatches(o, (u) => e(u, ...c));
      let r, i;
      return [this.produce(e, t, (o, c) => {
        r = o, i = c;
      }), r, i];
    }, typeof (n == null ? void 0 : n.autoFreeze) == "boolean" && this.setAutoFreeze(n.autoFreeze), typeof (n == null ? void 0 : n.useStrictShallowCopy) == "boolean" && this.setUseStrictShallowCopy(n.useStrictShallowCopy);
  }
  createDraft(n) {
    bn(n) || Pt(8), cn(n) && (n = va(n));
    const e = Wf(this), t = hu(n, void 0);
    return t[Nt].isManual_ = !0, uu(e), t;
  }
  finishDraft(n, e) {
    const t = n && n[Nt];
    (!t || !t.isManual_) && Pt(9);
    const { scope_: r } = t;
    return Gf(r, e), Qf(void 0, r);
  }
  /**
   * Pass true to automatically freeze all copies created by Immer.
   *
   * By default, auto-freezing is enabled.
   */
  setAutoFreeze(n) {
    this.autoFreeze_ = n;
  }
  /**
   * Pass true to enable strict shallow copy.
   *
   * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.
   */
  setUseStrictShallowCopy(n) {
    this.useStrictShallowCopy_ = n;
  }
  applyPatches(n, e) {
    let t;
    for (t = e.length - 1; t >= 0; t--) {
      const i = e[t];
      if (i.path.length === 0 && i.op === "replace") {
        n = i.value;
        break;
      }
    }
    t > -1 && (e = e.slice(t + 1));
    const r = wr("Patches").applyPatches_;
    return cn(n) ? r(n, e) : this.produce(
      n,
      (i) => r(i, e)
    );
  }
};
function hu(n, e) {
  const t = ga(n) ? wr("MapSet").proxyMap_(n, e) : ya(n) ? wr("MapSet").proxySet_(n, e) : $b(n, e);
  return (e ? e.scope_ : lg()).drafts_.push(t), t;
}
function va(n) {
  return cn(n) || Pt(10, n), fg(n);
}
function fg(n) {
  if (!bn(n) || _a(n))
    return n;
  const e = n[Nt];
  let t;
  if (e) {
    if (!e.modified_)
      return e.base_;
    e.finalized_ = !0, t = au(n, e.scope_.immer_.useStrictShallowCopy_);
  } else
    t = au(n, !0);
  return Fo(t, (r, i) => {
    ug(t, r, fg(i));
  }), e && (e.finalized_ = !1), t;
}
var xt = new qb(), hl = xt.produce;
xt.produceWithPatches.bind(
  xt
);
xt.setAutoFreeze.bind(xt);
xt.setUseStrictShallowCopy.bind(xt);
xt.applyPatches.bind(xt);
xt.createDraft.bind(xt);
xt.finishDraft.bind(xt);
var Kb = (n, e, t) => {
  if (e.length === 1 && e[0] === t) {
    let r = !1;
    try {
      const i = {};
      n(i) === i && (r = !0);
    } catch {
    }
    if (r) {
      let i;
      try {
        throw new Error();
      } catch (s) {
        ({ stack: i } = s);
      }
      console.warn(
        `The result function returned its own inputs without modification. e.g
\`createSelector([state => state.todos], todos => todos)\`
This could lead to inefficient memoization and unnecessary re-renders.
Ensure transformation logic is in the result function, and extraction logic is in the input selectors.`,
        { stack: i }
      );
    }
  }
}, zb = (n, e, t) => {
  const { memoize: r, memoizeOptions: i } = e, { inputSelectorResults: s, inputSelectorResultsCopy: o } = n, c = r(() => ({}), ...i);
  if (!(c.apply(null, s) === c.apply(null, o))) {
    let l;
    try {
      throw new Error();
    } catch (f) {
      ({ stack: l } = f);
    }
    console.warn(
      `An input selector returned a different result when passed same arguments.
This means your output selector will likely run more frequently than intended.
Avoid returning a new reference inside your input selector, e.g.
\`createSelector([state => state.todos.map(todo => todo.id)], todoIds => todoIds.length)\``,
      {
        arguments: t,
        firstInputs: s,
        secondInputs: o,
        stack: l
      }
    );
  }
}, Hb = {
  inputStabilityCheck: "once",
  identityFunctionCheck: "once"
};
function Gb(n, e = `expected a function, instead received ${typeof n}`) {
  if (typeof n != "function")
    throw new TypeError(e);
}
function Wb(n, e = `expected an object, instead received ${typeof n}`) {
  if (typeof n != "object")
    throw new TypeError(e);
}
function Qb(n, e = "expected all items to be functions, instead received the following types: ") {
  if (!n.every((t) => typeof t == "function")) {
    const t = n.map(
      (r) => typeof r == "function" ? `function ${r.name || "unnamed"}()` : typeof r
    ).join(", ");
    throw new TypeError(`${e}[${t}]`);
  }
}
var Jf = (n) => Array.isArray(n) ? n : [n];
function Yb(n) {
  const e = Array.isArray(n[0]) ? n[0] : n;
  return Qb(
    e,
    "createSelector expects all input-selectors to be functions, but received the following types: "
  ), e;
}
function Xf(n, e) {
  const t = [], { length: r } = n;
  for (let i = 0; i < r; i++)
    t.push(n[i].apply(null, e));
  return t;
}
var Jb = (n, e) => {
  const { identityFunctionCheck: t, inputStabilityCheck: r } = {
    ...Hb,
    ...e
  };
  return {
    identityFunctionCheck: {
      shouldRun: t === "always" || t === "once" && n,
      run: Kb
    },
    inputStabilityCheck: {
      shouldRun: r === "always" || r === "once" && n,
      run: zb
    }
  };
}, Xb = class {
  constructor(n) {
    this.value = n;
  }
  deref() {
    return this.value;
  }
}, Zb = typeof WeakRef < "u" ? WeakRef : Xb, eI = 0, Zf = 1;
function io() {
  return {
    s: eI,
    v: void 0,
    o: null,
    p: null
  };
}
function fl(n, e = {}) {
  let t = io();
  const { resultEqualityCheck: r } = e;
  let i, s = 0;
  function o() {
    var h;
    let c = t;
    const { length: u } = arguments;
    for (let y = 0, T = u; y < T; y++) {
      const S = arguments[y];
      if (typeof S == "function" || typeof S == "object" && S !== null) {
        let C = c.o;
        C === null && (c.o = C = /* @__PURE__ */ new WeakMap());
        const w = C.get(S);
        w === void 0 ? (c = io(), C.set(S, c)) : c = w;
      } else {
        let C = c.p;
        C === null && (c.p = C = /* @__PURE__ */ new Map());
        const w = C.get(S);
        w === void 0 ? (c = io(), C.set(S, c)) : c = w;
      }
    }
    const l = c;
    let f;
    if (c.s === Zf ? f = c.v : (f = n.apply(null, arguments), s++), l.s = Zf, r) {
      const y = ((h = i == null ? void 0 : i.deref) == null ? void 0 : h.call(i)) ?? i;
      y != null && r(y, f) && (f = y, s !== 0 && s--), i = typeof f == "object" && f !== null || typeof f == "function" ? new Zb(f) : f;
    }
    return l.v = f, f;
  }
  return o.clearCache = () => {
    t = io(), o.resetResultsCount();
  }, o.resultsCount = () => s, o.resetResultsCount = () => {
    s = 0;
  }, o;
}
function dg(n, ...e) {
  const t = typeof n == "function" ? {
    memoize: n,
    memoizeOptions: e
  } : n, r = (...i) => {
    let s = 0, o = 0, c, u = {}, l = i.pop();
    typeof l == "object" && (u = l, l = i.pop()), Gb(
      l,
      `createSelector expects an output function after the inputs, but received: [${typeof l}]`
    );
    const f = {
      ...t,
      ...u
    }, {
      memoize: h,
      memoizeOptions: y = [],
      argsMemoize: T = fl,
      argsMemoizeOptions: S = [],
      devModeChecks: C = {}
    } = f, w = Jf(y), E = Jf(S), g = Yb(i), d = h(function() {
      return s++, l.apply(
        null,
        arguments
      );
    }, ...w);
    let m = !0;
    const v = T(function() {
      o++;
      const R = Xf(
        g,
        arguments
      );
      if (c = d.apply(null, R), process.env.NODE_ENV !== "production") {
        const { identityFunctionCheck: b, inputStabilityCheck: A } = Jb(m, C);
        if (b.shouldRun && b.run(
          l,
          R,
          c
        ), A.shouldRun) {
          const O = Xf(
            g,
            arguments
          );
          A.run(
            { inputSelectorResults: R, inputSelectorResultsCopy: O },
            { memoize: h, memoizeOptions: w },
            arguments
          );
        }
        m && (m = !1);
      }
      return c;
    }, ...E);
    return Object.assign(v, {
      resultFunc: l,
      memoizedResultFunc: d,
      dependencies: g,
      dependencyRecomputations: () => o,
      resetDependencyRecomputations: () => {
        o = 0;
      },
      lastResult: () => c,
      recomputations: () => s,
      resetRecomputations: () => {
        s = 0;
      },
      memoize: h,
      argsMemoize: T
    });
  };
  return Object.assign(r, {
    withTypes: () => r
  }), r;
}
var tI = /* @__PURE__ */ dg(fl), nI = Object.assign(
  (n, e = tI) => {
    Wb(
      n,
      `createStructuredSelector expects first argument to be an object where each property is a selector, instead received a ${typeof n}`
    );
    const t = Object.keys(n), r = t.map(
      (s) => n[s]
    );
    return e(
      r,
      (...s) => s.reduce((o, c, u) => (o[t[u]] = c, o), {})
    );
  },
  { withTypes: () => nI }
);
function pg(n) {
  return ({ dispatch: t, getState: r }) => (i) => (s) => typeof s == "function" ? s(t, r, n) : i(s);
}
var rI = pg(), iI = pg, sI = (...n) => {
  const e = dg(...n), t = Object.assign((...r) => {
    const i = e(...r), s = (o, ...c) => i(cn(o) ? va(o) : o, ...c);
    return Object.assign(s, i), s;
  }, {
    withTypes: () => t
  });
  return t;
}, oI = sI(fl), aI = typeof window < "u" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function() {
  if (arguments.length !== 0)
    return typeof arguments[0] == "object" ? Vo : Vo.apply(null, arguments);
}, cI = (n) => n && typeof n.match == "function";
function ri(n, e) {
  function t(...r) {
    if (e) {
      let i = e(...r);
      if (!i)
        throw new Error(process.env.NODE_ENV === "production" ? Pe(0) : "prepareAction did not return an object");
      return {
        type: n,
        payload: i.payload,
        ..."meta" in i && {
          meta: i.meta
        },
        ..."error" in i && {
          error: i.error
        }
      };
    }
    return {
      type: n,
      payload: r[0]
    };
  }
  return t.toString = () => `${n}`, t.type = n, t.match = (r) => cl(r) && r.type === n, t;
}
function uI(n) {
  return typeof n == "function" && "type" in n && // hasMatchFunction only wants Matchers but I don't see the point in rewriting it
  cI(n);
}
function lI(n) {
  return cl(n) && Object.keys(n).every(hI);
}
function hI(n) {
  return ["type", "payload", "error", "meta"].indexOf(n) > -1;
}
function fI(n) {
  const e = n ? `${n}`.split("/") : [], t = e[e.length - 1] || "actionCreator";
  return `Detected an action creator with type "${n || "unknown"}" being dispatched. 
Make sure you're calling the action creator before dispatching, i.e. \`dispatch(${t}())\` instead of \`dispatch(${t})\`. This is necessary even if the action has no payload.`;
}
function dI(n = {}) {
  if (process.env.NODE_ENV === "production")
    return () => (t) => (r) => t(r);
  const {
    isActionCreator: e = uI
  } = n;
  return () => (t) => (r) => (e(r) && console.warn(fI(r.type)), t(r));
}
function mg(n, e) {
  let t = 0;
  return {
    measureTime(r) {
      const i = Date.now();
      try {
        return r();
      } finally {
        const s = Date.now();
        t += s - i;
      }
    },
    warnIfExceeded() {
      t > n && console.warn(`${e} took ${t}ms, which is more than the warning threshold of ${n}ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.`);
    }
  };
}
var gg = class qi extends Array {
  constructor(...e) {
    super(...e), Object.setPrototypeOf(this, qi.prototype);
  }
  static get [Symbol.species]() {
    return qi;
  }
  concat(...e) {
    return super.concat.apply(this, e);
  }
  prepend(...e) {
    return e.length === 1 && Array.isArray(e[0]) ? new qi(...e[0].concat(this)) : new qi(...e.concat(this));
  }
};
function ed(n) {
  return bn(n) ? hl(n, () => {
  }) : n;
}
function td(n, e, t) {
  if (n.has(e)) {
    let i = n.get(e);
    return t.update && (i = t.update(i, e, n), n.set(e, i)), i;
  }
  if (!t.insert)
    throw new Error(process.env.NODE_ENV === "production" ? Pe(10) : "No insert provided for key not already in map");
  const r = t.insert(e, n);
  return n.set(e, r), r;
}
function pI(n) {
  return typeof n != "object" || n == null || Object.isFrozen(n);
}
function mI(n, e, t) {
  const r = yg(n, e, t);
  return {
    detectMutations() {
      return _g(n, e, r, t);
    }
  };
}
function yg(n, e = [], t, r = "", i = /* @__PURE__ */ new Set()) {
  const s = {
    value: t
  };
  if (!n(t) && !i.has(t)) {
    i.add(t), s.children = {};
    for (const o in t) {
      const c = r ? r + "." + o : o;
      e.length && e.indexOf(c) !== -1 || (s.children[o] = yg(n, e, t[o], c));
    }
  }
  return s;
}
function _g(n, e = [], t, r, i = !1, s = "") {
  const o = t ? t.value : void 0, c = o === r;
  if (i && !c && !Number.isNaN(r))
    return {
      wasMutated: !0,
      path: s
    };
  if (n(o) || n(r))
    return {
      wasMutated: !1
    };
  const u = {};
  for (let f in t.children)
    u[f] = !0;
  for (let f in r)
    u[f] = !0;
  const l = e.length > 0;
  for (let f in u) {
    const h = s ? s + "." + f : f;
    if (l && e.some((S) => S instanceof RegExp ? S.test(h) : h === S))
      continue;
    const y = _g(n, e, t.children[f], r[f], c, h);
    if (y.wasMutated)
      return y;
  }
  return {
    wasMutated: !1
  };
}
function gI(n = {}) {
  if (process.env.NODE_ENV === "production")
    return () => (e) => (t) => e(t);
  {
    let e = function(c, u, l, f) {
      return JSON.stringify(c, t(u, f), l);
    }, t = function(c, u) {
      let l = [], f = [];
      return u || (u = function(h, y) {
        return l[0] === y ? "[Circular ~]" : "[Circular ~." + f.slice(0, l.indexOf(y)).join(".") + "]";
      }), function(h, y) {
        if (l.length > 0) {
          var T = l.indexOf(this);
          ~T ? l.splice(T + 1) : l.push(this), ~T ? f.splice(T, 1 / 0, h) : f.push(h), ~l.indexOf(y) && (y = u.call(this, h, y));
        } else
          l.push(y);
        return c == null ? y : c.call(this, h, y);
      };
    }, {
      isImmutable: r = pI,
      ignoredPaths: i,
      warnAfter: s = 32
    } = n;
    const o = mI.bind(null, r, i);
    return ({
      getState: c
    }) => {
      let u = c(), l = o(u), f;
      return (h) => (y) => {
        const T = mg(s, "ImmutableStateInvariantMiddleware");
        T.measureTime(() => {
          if (u = c(), f = l.detectMutations(), l = o(u), f.wasMutated)
            throw new Error(process.env.NODE_ENV === "production" ? Pe(19) : `A state mutation was detected between dispatches, in the path '${f.path || ""}'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`);
        });
        const S = h(y);
        return T.measureTime(() => {
          if (u = c(), f = l.detectMutations(), l = o(u), f.wasMutated)
            throw new Error(process.env.NODE_ENV === "production" ? Pe(20) : `A state mutation was detected inside a dispatch, in the path: ${f.path || ""}. Take a look at the reducer(s) handling the action ${e(y)}. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`);
        }), T.warnIfExceeded(), S;
      };
    };
  }
}
function vg(n) {
  const e = typeof n;
  return n == null || e === "string" || e === "boolean" || e === "number" || Array.isArray(n) || bs(n);
}
function fu(n, e = "", t = vg, r, i = [], s) {
  let o;
  if (!t(n))
    return {
      keyPath: e || "<root>",
      value: n
    };
  if (typeof n != "object" || n === null || s != null && s.has(n))
    return !1;
  const c = r != null ? r(n) : Object.entries(n), u = i.length > 0;
  for (const [l, f] of c) {
    const h = e ? e + "." + l : l;
    if (!(u && i.some((T) => T instanceof RegExp ? T.test(h) : h === T))) {
      if (!t(f))
        return {
          keyPath: h,
          value: f
        };
      if (typeof f == "object" && (o = fu(f, h, t, r, i, s), o))
        return o;
    }
  }
  return s && wg(n) && s.add(n), !1;
}
function wg(n) {
  if (!Object.isFrozen(n))
    return !1;
  for (const e of Object.values(n))
    if (!(typeof e != "object" || e === null) && !wg(e))
      return !1;
  return !0;
}
function yI(n = {}) {
  if (process.env.NODE_ENV === "production")
    return () => (e) => (t) => e(t);
  {
    const {
      isSerializable: e = vg,
      getEntries: t,
      ignoredActions: r = [],
      ignoredActionPaths: i = ["meta.arg", "meta.baseQueryMeta"],
      ignoredPaths: s = [],
      warnAfter: o = 32,
      ignoreState: c = !1,
      ignoreActions: u = !1,
      disableCache: l = !1
    } = n, f = !l && WeakSet ? /* @__PURE__ */ new WeakSet() : void 0;
    return (h) => (y) => (T) => {
      if (!cl(T))
        return y(T);
      const S = y(T), C = mg(o, "SerializableStateInvariantMiddleware");
      return !u && !(r.length && r.indexOf(T.type) !== -1) && C.measureTime(() => {
        const w = fu(T, "", e, t, i, f);
        if (w) {
          const {
            keyPath: E,
            value: g
          } = w;
          console.error(`A non-serializable value was detected in an action, in the path: \`${E}\`. Value:`, g, `
Take a look at the logic that dispatched this action: `, T, `
(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)`, `
(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)`);
        }
      }), c || (C.measureTime(() => {
        const w = h.getState(), E = fu(w, "", e, t, s, f);
        if (E) {
          const {
            keyPath: g,
            value: d
          } = E;
          console.error(`A non-serializable value was detected in the state, in the path: \`${g}\`. Value:`, d, `
Take a look at the reducer(s) handling this action type: ${T.type}.
(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)`);
        }
      }), C.warnIfExceeded()), S;
    };
  }
}
function so(n) {
  return typeof n == "boolean";
}
var _I = () => function(e) {
  const {
    thunk: t = !0,
    immutableCheck: r = !0,
    serializableCheck: i = !0,
    actionCreatorCheck: s = !0
  } = e ?? {};
  let o = new gg();
  if (t && (so(t) ? o.push(rI) : o.push(iI(t.extraArgument))), process.env.NODE_ENV !== "production") {
    if (r) {
      let c = {};
      so(r) || (c = r), o.unshift(gI(c));
    }
    if (i) {
      let c = {};
      so(i) || (c = i), o.push(yI(c));
    }
    if (s) {
      let c = {};
      so(s) || (c = s), o.unshift(dI(c));
    }
  }
  return o;
}, vI = "RTK_autoBatch", Eg = (n) => (e) => {
  setTimeout(e, n);
}, wI = typeof window < "u" && window.requestAnimationFrame ? window.requestAnimationFrame : Eg(10), EI = (n = {
  type: "raf"
}) => (e) => (...t) => {
  const r = e(...t);
  let i = !0, s = !1, o = !1;
  const c = /* @__PURE__ */ new Set(), u = n.type === "tick" ? queueMicrotask : n.type === "raf" ? wI : n.type === "callback" ? n.queueNotification : Eg(n.timeout), l = () => {
    o = !1, s && (s = !1, c.forEach((f) => f()));
  };
  return Object.assign({}, r, {
    // Override the base `store.subscribe` method to keep original listeners
    // from running if we're delaying notifications
    subscribe(f) {
      const h = () => i && f(), y = r.subscribe(h);
      return c.add(f), () => {
        y(), c.delete(f);
      };
    },
    // Override the base `store.dispatch` method so that we can check actions
    // for the `shouldAutoBatch` flag and determine if batching is active
    dispatch(f) {
      var h;
      try {
        return i = !((h = f == null ? void 0 : f.meta) != null && h[vI]), s = !i, s && (o || (o = !0, u(l))), r.dispatch(f);
      } finally {
        i = !0;
      }
    }
  });
}, TI = (n) => function(t) {
  const {
    autoBatch: r = !0
  } = t ?? {};
  let i = new gg(n);
  return r && i.push(EI(typeof r == "object" ? r : void 0)), i;
}, On = process.env.NODE_ENV === "production";
function bI(n) {
  const e = _I(), {
    reducer: t = void 0,
    middleware: r,
    devTools: i = !0,
    preloadedState: s = void 0,
    enhancers: o = void 0
  } = n || {};
  let c;
  if (typeof t == "function")
    c = t;
  else if (bs(t))
    c = Db(t);
  else
    throw new Error(process.env.NODE_ENV === "production" ? Pe(1) : "`reducer` is a required argument, and must be a function or an object of functions that can be passed to combineReducers");
  if (!On && r && typeof r != "function")
    throw new Error(process.env.NODE_ENV === "production" ? Pe(2) : "`middleware` field must be a callback");
  let u;
  if (typeof r == "function") {
    if (u = r(e), !On && !Array.isArray(u))
      throw new Error(process.env.NODE_ENV === "production" ? Pe(3) : "when using a middleware builder function, an array of middleware must be returned");
  } else
    u = e();
  if (!On && u.some((S) => typeof S != "function"))
    throw new Error(process.env.NODE_ENV === "production" ? Pe(4) : "each middleware provided to configureStore must be a function");
  let l = Vo;
  i && (l = aI({
    // Enable capture of stack traces for dispatched Redux actions
    trace: !On,
    ...typeof i == "object" && i
  }));
  const f = Nb(...u), h = TI(f);
  if (!On && o && typeof o != "function")
    throw new Error(process.env.NODE_ENV === "production" ? Pe(5) : "`enhancers` field must be a callback");
  let y = typeof o == "function" ? o(h) : h();
  if (!On && !Array.isArray(y))
    throw new Error(process.env.NODE_ENV === "production" ? Pe(6) : "`enhancers` callback must return an array");
  if (!On && y.some((S) => typeof S != "function"))
    throw new Error(process.env.NODE_ENV === "production" ? Pe(7) : "each enhancer provided to configureStore must be a function");
  !On && u.length && !y.includes(f) && console.error("middlewares were provided, but middleware enhancer was not included in final enhancers - make sure to call `getDefaultEnhancers`");
  const T = l(...y);
  return og(c, s, T);
}
function Tg(n) {
  const e = {}, t = [];
  let r;
  const i = {
    addCase(s, o) {
      if (process.env.NODE_ENV !== "production") {
        if (t.length > 0)
          throw new Error(process.env.NODE_ENV === "production" ? Pe(26) : "`builder.addCase` should only be called before calling `builder.addMatcher`");
        if (r)
          throw new Error(process.env.NODE_ENV === "production" ? Pe(27) : "`builder.addCase` should only be called before calling `builder.addDefaultCase`");
      }
      const c = typeof s == "string" ? s : s.type;
      if (!c)
        throw new Error(process.env.NODE_ENV === "production" ? Pe(28) : "`builder.addCase` cannot be called with an empty action type");
      if (c in e)
        throw new Error(process.env.NODE_ENV === "production" ? Pe(29) : `\`builder.addCase\` cannot be called with two reducers for the same action type '${c}'`);
      return e[c] = o, i;
    },
    addMatcher(s, o) {
      if (process.env.NODE_ENV !== "production" && r)
        throw new Error(process.env.NODE_ENV === "production" ? Pe(30) : "`builder.addMatcher` should only be called before calling `builder.addDefaultCase`");
      return t.push({
        matcher: s,
        reducer: o
      }), i;
    },
    addDefaultCase(s) {
      if (process.env.NODE_ENV !== "production" && r)
        throw new Error(process.env.NODE_ENV === "production" ? Pe(31) : "`builder.addDefaultCase` can only be called once");
      return r = s, i;
    }
  };
  return n(i), [e, t, r];
}
function II(n) {
  return typeof n == "function";
}
function SI(n, e) {
  if (process.env.NODE_ENV !== "production" && typeof e == "object")
    throw new Error(process.env.NODE_ENV === "production" ? Pe(8) : "The object notation for `createReducer` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createReducer");
  let [t, r, i] = Tg(e), s;
  if (II(n))
    s = () => ed(n());
  else {
    const c = ed(n);
    s = () => c;
  }
  function o(c = s(), u) {
    let l = [t[u.type], ...r.filter(({
      matcher: f
    }) => f(u)).map(({
      reducer: f
    }) => f)];
    return l.filter((f) => !!f).length === 0 && (l = [i]), l.reduce((f, h) => {
      if (h)
        if (cn(f)) {
          const T = h(f, u);
          return T === void 0 ? f : T;
        } else {
          if (bn(f))
            return hl(f, (y) => h(y, u));
          {
            const y = h(f, u);
            if (y === void 0) {
              if (f === null)
                return f;
              throw new Error(process.env.NODE_ENV === "production" ? Pe(9) : "A case reducer on a non-draftable value must not return undefined");
            }
            return y;
          }
        }
      return f;
    }, c);
  }
  return o.getInitialState = s, o;
}
var AI = "ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW", ft = (n = 21) => {
  let e = "", t = n;
  for (; t--; )
    e += AI[Math.random() * 64 | 0];
  return e;
}, RI = /* @__PURE__ */ Symbol.for("rtk-slice-createasyncthunk");
function CI(n, e) {
  return `${n}/${e}`;
}
function PI({
  creators: n
} = {}) {
  var t;
  const e = (t = n == null ? void 0 : n.asyncThunk) == null ? void 0 : t[RI];
  return function(i) {
    const {
      name: s,
      reducerPath: o = s
    } = i;
    if (!s)
      throw new Error(process.env.NODE_ENV === "production" ? Pe(11) : "`name` is a required option for createSlice");
    typeof process < "u" && process.env.NODE_ENV === "development" && i.initialState === void 0 && console.error("You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`");
    const c = (typeof i.reducers == "function" ? i.reducers(OI()) : i.reducers) || {}, u = Object.keys(c), l = {
      sliceCaseReducersByName: {},
      sliceCaseReducersByType: {},
      actionCreators: {},
      sliceMatchers: []
    }, f = {
      addCase(d, m) {
        const v = typeof d == "string" ? d : d.type;
        if (!v)
          throw new Error(process.env.NODE_ENV === "production" ? Pe(12) : "`context.addCase` cannot be called with an empty action type");
        if (v in l.sliceCaseReducersByType)
          throw new Error(process.env.NODE_ENV === "production" ? Pe(13) : "`context.addCase` cannot be called with two reducers for the same action type: " + v);
        return l.sliceCaseReducersByType[v] = m, f;
      },
      addMatcher(d, m) {
        return l.sliceMatchers.push({
          matcher: d,
          reducer: m
        }), f;
      },
      exposeAction(d, m) {
        return l.actionCreators[d] = m, f;
      },
      exposeCaseReducer(d, m) {
        return l.sliceCaseReducersByName[d] = m, f;
      }
    };
    u.forEach((d) => {
      const m = c[d], v = {
        reducerName: d,
        type: CI(s, d),
        createNotation: typeof i.reducers == "function"
      };
      NI(m) ? LI(v, m, f, e) : DI(v, m, f);
    });
    function h() {
      if (process.env.NODE_ENV !== "production" && typeof i.extraReducers == "object")
        throw new Error(process.env.NODE_ENV === "production" ? Pe(14) : "The object notation for `createSlice.extraReducers` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createSlice");
      const [d = {}, m = [], v = void 0] = typeof i.extraReducers == "function" ? Tg(i.extraReducers) : [i.extraReducers], I = {
        ...d,
        ...l.sliceCaseReducersByType
      };
      return SI(i.initialState, (R) => {
        for (let b in I)
          R.addCase(b, I[b]);
        for (let b of l.sliceMatchers)
          R.addMatcher(b.matcher, b.reducer);
        for (let b of m)
          R.addMatcher(b.matcher, b.reducer);
        v && R.addDefaultCase(v);
      });
    }
    const y = (d) => d, T = /* @__PURE__ */ new Map();
    let S;
    function C(d, m) {
      return S || (S = h()), S(d, m);
    }
    function w() {
      return S || (S = h()), S.getInitialState();
    }
    function E(d, m = !1) {
      function v(R) {
        let b = R[d];
        if (typeof b > "u") {
          if (m)
            b = w();
          else if (process.env.NODE_ENV !== "production")
            throw new Error(process.env.NODE_ENV === "production" ? Pe(15) : "selectSlice returned undefined for an uninjected slice reducer");
        }
        return b;
      }
      function I(R = y) {
        const b = td(T, m, {
          insert: () => /* @__PURE__ */ new WeakMap()
        });
        return td(b, R, {
          insert: () => {
            const A = {};
            for (const [O, D] of Object.entries(i.selectors ?? {}))
              A[O] = kI(D, R, w, m);
            return A;
          }
        });
      }
      return {
        reducerPath: d,
        getSelectors: I,
        get selectors() {
          return I(v);
        },
        selectSlice: v
      };
    }
    const g = {
      name: s,
      reducer: C,
      actions: l.actionCreators,
      caseReducers: l.sliceCaseReducersByName,
      getInitialState: w,
      ...E(o),
      injectInto(d, {
        reducerPath: m,
        ...v
      } = {}) {
        const I = m ?? o;
        return d.inject({
          reducerPath: I,
          reducer: C
        }, v), {
          ...g,
          ...E(I, !0)
        };
      }
    };
    return g;
  };
}
function kI(n, e, t, r) {
  function i(s, ...o) {
    let c = e(s);
    if (typeof c > "u") {
      if (r)
        c = t();
      else if (process.env.NODE_ENV !== "production")
        throw new Error(process.env.NODE_ENV === "production" ? Pe(16) : "selectState returned undefined for an uninjected slice reducer");
    }
    return n(c, ...o);
  }
  return i.unwrapped = n, i;
}
var wa = /* @__PURE__ */ PI();
function OI() {
  function n(e, t) {
    return {
      _reducerDefinitionType: "asyncThunk",
      payloadCreator: e,
      ...t
    };
  }
  return n.withTypes = () => n, {
    reducer(e) {
      return Object.assign({
        // hack so the wrapping function has the same name as the original
        // we need to create a wrapper so the `reducerDefinitionType` is not assigned to the original
        [e.name](...t) {
          return e(...t);
        }
      }[e.name], {
        _reducerDefinitionType: "reducer"
        /* reducer */
      });
    },
    preparedReducer(e, t) {
      return {
        _reducerDefinitionType: "reducerWithPrepare",
        prepare: e,
        reducer: t
      };
    },
    asyncThunk: n
  };
}
function DI({
  type: n,
  reducerName: e,
  createNotation: t
}, r, i) {
  let s, o;
  if ("reducer" in r) {
    if (t && !xI(r))
      throw new Error(process.env.NODE_ENV === "production" ? Pe(17) : "Please use the `create.preparedReducer` notation for prepared action creators with the `create` notation.");
    s = r.reducer, o = r.prepare;
  } else
    s = r;
  i.addCase(n, s).exposeCaseReducer(e, s).exposeAction(e, o ? ri(n, o) : ri(n));
}
function NI(n) {
  return n._reducerDefinitionType === "asyncThunk";
}
function xI(n) {
  return n._reducerDefinitionType === "reducerWithPrepare";
}
function LI({
  type: n,
  reducerName: e
}, t, r, i) {
  if (!i)
    throw new Error(process.env.NODE_ENV === "production" ? Pe(18) : "Cannot use `create.asyncThunk` in the built-in `createSlice`. Use `buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })` to create a customised version of `createSlice`.");
  const {
    payloadCreator: s,
    fulfilled: o,
    pending: c,
    rejected: u,
    settled: l,
    options: f
  } = t, h = i(n, s, f);
  r.exposeAction(e, h), o && r.addCase(h.fulfilled, o), c && r.addCase(h.pending, c), u && r.addCase(h.rejected, u), l && r.addMatcher(h.settled, l), r.exposeCaseReducer(e, {
    fulfilled: o || oo,
    pending: c || oo,
    rejected: u || oo,
    settled: l || oo
  });
}
function oo() {
}
function MI() {
  return {
    ids: [],
    entities: {}
  };
}
function VI(n) {
  function e(t = {}, r) {
    const i = Object.assign(MI(), t);
    return r ? n.setAll(i, r) : i;
  }
  return {
    getInitialState: e
  };
}
function FI() {
  function n(e, t = {}) {
    const {
      createSelector: r = oI
    } = t, i = (h) => h.ids, s = (h) => h.entities, o = r(i, s, (h, y) => h.map((T) => y[T])), c = (h, y) => y, u = (h, y) => h[y], l = r(i, (h) => h.length);
    if (!e)
      return {
        selectIds: i,
        selectEntities: s,
        selectAll: o,
        selectTotal: l,
        selectById: r(s, c, u)
      };
    const f = r(e, s);
    return {
      selectIds: r(e, i),
      selectEntities: f,
      selectAll: r(e, o),
      selectTotal: r(e, l),
      selectById: r(f, c, u)
    };
  }
  return {
    getSelectors: n
  };
}
var UI = cn;
function jI(n) {
  const e = Be((t, r) => n(r));
  return function(r) {
    return e(r, void 0);
  };
}
function Be(n) {
  return function(t, r) {
    function i(o) {
      return lI(o);
    }
    const s = (o) => {
      i(r) ? n(r.payload, o) : n(r, o);
    };
    return UI(t) ? (s(t), t) : hl(t, s);
  };
}
function zr(n, e) {
  const t = e(n);
  return process.env.NODE_ENV !== "production" && t === void 0 && console.warn("The entity passed to the `selectId` implementation returned undefined.", "You should probably provide your own `selectId` implementation.", "The entity that was passed:", n, "The `selectId` implementation:", e.toString()), t;
}
function pr(n) {
  return Array.isArray(n) || (n = Object.values(n)), n;
}
function du(n) {
  return cn(n) ? va(n) : n;
}
function bg(n, e, t) {
  n = pr(n);
  const r = du(t.ids), i = new Set(r), s = [], o = [];
  for (const c of n) {
    const u = zr(c, e);
    i.has(u) ? o.push({
      id: u,
      changes: c
    }) : s.push(c);
  }
  return [s, o, r];
}
function Ig(n) {
  function e(S, C) {
    const w = zr(S, n);
    w in C.entities || (C.ids.push(w), C.entities[w] = S);
  }
  function t(S, C) {
    S = pr(S);
    for (const w of S)
      e(w, C);
  }
  function r(S, C) {
    const w = zr(S, n);
    w in C.entities || C.ids.push(w), C.entities[w] = S;
  }
  function i(S, C) {
    S = pr(S);
    for (const w of S)
      r(w, C);
  }
  function s(S, C) {
    S = pr(S), C.ids = [], C.entities = {}, t(S, C);
  }
  function o(S, C) {
    return c([S], C);
  }
  function c(S, C) {
    let w = !1;
    S.forEach((E) => {
      E in C.entities && (delete C.entities[E], w = !0);
    }), w && (C.ids = C.ids.filter((E) => E in C.entities));
  }
  function u(S) {
    Object.assign(S, {
      ids: [],
      entities: {}
    });
  }
  function l(S, C, w) {
    const E = w.entities[C.id];
    if (E === void 0)
      return !1;
    const g = Object.assign({}, E, C.changes), d = zr(g, n), m = d !== C.id;
    return m && (S[C.id] = d, delete w.entities[C.id]), w.entities[d] = g, m;
  }
  function f(S, C) {
    return h([S], C);
  }
  function h(S, C) {
    const w = {}, E = {};
    S.forEach((d) => {
      d.id in C.entities && (E[d.id] = {
        id: d.id,
        // Spreads ignore falsy values, so this works even if there isn't
        // an existing update already at this key
        changes: {
          ...E[d.id] ? E[d.id].changes : null,
          ...d.changes
        }
      });
    }), S = Object.values(E), S.length > 0 && S.filter((m) => l(w, m, C)).length > 0 && (C.ids = Object.values(C.entities).map((m) => zr(m, n)));
  }
  function y(S, C) {
    return T([S], C);
  }
  function T(S, C) {
    const [w, E] = bg(S, n, C);
    h(E, C), t(w, C);
  }
  return {
    removeAll: jI(u),
    addOne: Be(e),
    addMany: Be(t),
    setOne: Be(r),
    setMany: Be(i),
    setAll: Be(s),
    updateOne: Be(f),
    updateMany: Be(h),
    upsertOne: Be(y),
    upsertMany: Be(T),
    removeOne: Be(o),
    removeMany: Be(c)
  };
}
function $I(n, e, t) {
  let r = 0, i = n.length;
  for (; r < i; ) {
    let s = r + i >>> 1;
    const o = n[s];
    t(e, o) >= 0 ? r = s + 1 : i = s;
  }
  return r;
}
function BI(n, e, t) {
  const r = $I(n, e, t);
  return n.splice(r, 0, e), n;
}
function qI(n, e) {
  const {
    removeOne: t,
    removeMany: r,
    removeAll: i
  } = Ig(n);
  function s(E, g) {
    return o([E], g);
  }
  function o(E, g, d) {
    E = pr(E);
    const m = new Set(d ?? va(g.ids)), v = E.filter((I) => !m.has(zr(I, n)));
    v.length !== 0 && w(g, v);
  }
  function c(E, g) {
    return u([E], g);
  }
  function u(E, g) {
    if (E = pr(E), E.length !== 0) {
      for (const d of E)
        delete g.entities[n(d)];
      w(g, E);
    }
  }
  function l(E, g) {
    E = pr(E), g.entities = {}, g.ids = [], o(E, g, []);
  }
  function f(E, g) {
    return h([E], g);
  }
  function h(E, g) {
    let d = !1, m = !1;
    for (let v of E) {
      const I = g.entities[v.id];
      if (!I)
        continue;
      d = !0, Object.assign(I, v.changes);
      const R = n(I);
      if (v.id !== R) {
        m = !0, delete g.entities[v.id];
        const b = g.ids.indexOf(v.id);
        g.ids[b] = R, g.entities[R] = I;
      }
    }
    d && w(g, [], d, m);
  }
  function y(E, g) {
    return T([E], g);
  }
  function T(E, g) {
    const [d, m, v] = bg(E, n, g);
    m.length && h(m, g), d.length && o(d, g, v);
  }
  function S(E, g) {
    if (E.length !== g.length)
      return !1;
    for (let d = 0; d < E.length && d < g.length; d++)
      if (E[d] !== g[d])
        return !1;
    return !0;
  }
  const w = (E, g, d, m) => {
    const v = du(E.entities), I = du(E.ids), R = E.entities;
    let b = I;
    m && (b = Array.from(new Set(I)));
    let A = [];
    for (const N of b) {
      const k = v[N];
      k && A.push(k);
    }
    const O = A.length === 0;
    for (const N of g)
      R[n(N)] = N, O || BI(A, N, e);
    O ? A = g.slice().sort(e) : d && A.sort(e);
    const D = A.map(n);
    S(I, D) || (E.ids = D);
  };
  return {
    removeOne: t,
    removeMany: r,
    removeAll: i,
    addOne: Be(s),
    updateOne: Be(f),
    upsertOne: Be(y),
    setOne: Be(c),
    setMany: Be(u),
    setAll: Be(l),
    addMany: Be(o),
    updateMany: Be(h),
    upsertMany: Be(T)
  };
}
function KI(n = {}) {
  const {
    selectId: e,
    sortComparer: t
  } = {
    sortComparer: !1,
    selectId: (o) => o.id,
    ...n
  }, r = t ? qI(e, t) : Ig(e), i = VI(r), s = FI();
  return {
    selectId: e,
    sortComparer: t,
    ...i,
    ...s,
    ...r
  };
}
var zI = (n, e) => {
  if (typeof n != "function")
    throw new Error(process.env.NODE_ENV === "production" ? Pe(32) : `${e} is not a function`);
}, dl = "listenerMiddleware", HI = (n) => {
  let {
    type: e,
    actionCreator: t,
    matcher: r,
    predicate: i,
    effect: s
  } = n;
  if (e)
    i = ri(e).match;
  else if (t)
    e = t.type, i = t.match;
  else if (r)
    i = r;
  else if (!i) throw new Error(process.env.NODE_ENV === "production" ? Pe(21) : "Creating or removing a listener requires one of the known fields for matching an action");
  return zI(s, "options.listener"), {
    predicate: i,
    type: e,
    effect: s
  };
}, GI = Object.assign((n) => {
  const {
    type: e,
    predicate: t,
    effect: r
  } = HI(n);
  return {
    id: ft(),
    effect: r,
    type: e,
    predicate: t,
    pending: /* @__PURE__ */ new Set(),
    unsubscribe: () => {
      throw new Error(process.env.NODE_ENV === "production" ? Pe(22) : "Unsubscribe not initialized");
    }
  };
}, {
  withTypes: () => GI
}), WI = Object.assign(ri(`${dl}/add`), {
  withTypes: () => WI
});
ri(`${dl}/removeAll`);
var QI = Object.assign(ri(`${dl}/remove`), {
  withTypes: () => QI
});
function Pe(n) {
  return `Minified Redux Toolkit error #${n}; visit https://redux-toolkit.js.org/Errors?code=${n} for the full message or use the non-minified dev environment for full errors. `;
}
var pu = { exports: {} }, Ec = {};
/**
 * @license React
 * use-sync-external-store-shim.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var nd;
function YI() {
  if (nd) return Ec;
  nd = 1;
  var n = re;
  function e(h, y) {
    return h === y && (h !== 0 || 1 / h === 1 / y) || h !== h && y !== y;
  }
  var t = typeof Object.is == "function" ? Object.is : e, r = n.useState, i = n.useEffect, s = n.useLayoutEffect, o = n.useDebugValue;
  function c(h, y) {
    var T = y(), S = r({ inst: { value: T, getSnapshot: y } }), C = S[0].inst, w = S[1];
    return s(function() {
      C.value = T, C.getSnapshot = y, u(C) && w({ inst: C });
    }, [h, T, y]), i(function() {
      return u(C) && w({ inst: C }), h(function() {
        u(C) && w({ inst: C });
      });
    }, [h]), o(T), T;
  }
  function u(h) {
    var y = h.getSnapshot;
    h = h.value;
    try {
      var T = y();
      return !t(h, T);
    } catch {
      return !0;
    }
  }
  function l(h, y) {
    return y();
  }
  var f = typeof window > "u" || typeof window.document > "u" || typeof window.document.createElement > "u" ? l : c;
  return Ec.useSyncExternalStore = n.useSyncExternalStore !== void 0 ? n.useSyncExternalStore : f, Ec;
}
var Tc = {}, rd;
function JI() {
  if (rd) return Tc;
  rd = 1;
  /**
   * @license React
   * use-sync-external-store-shim.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  return process.env.NODE_ENV !== "production" && function() {
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var n = re, e = n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function t(d) {
      {
        for (var m = arguments.length, v = new Array(m > 1 ? m - 1 : 0), I = 1; I < m; I++)
          v[I - 1] = arguments[I];
        r("error", d, v);
      }
    }
    function r(d, m, v) {
      {
        var I = e.ReactDebugCurrentFrame, R = I.getStackAddendum();
        R !== "" && (m += "%s", v = v.concat([R]));
        var b = v.map(function(A) {
          return String(A);
        });
        b.unshift("Warning: " + m), Function.prototype.apply.call(console[d], console, b);
      }
    }
    function i(d, m) {
      return d === m && (d !== 0 || 1 / d === 1 / m) || d !== d && m !== m;
    }
    var s = typeof Object.is == "function" ? Object.is : i, o = n.useState, c = n.useEffect, u = n.useLayoutEffect, l = n.useDebugValue, f = !1, h = !1;
    function y(d, m, v) {
      f || n.startTransition !== void 0 && (f = !0, t("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release."));
      var I = m();
      if (!h) {
        var R = m();
        s(I, R) || (t("The result of getSnapshot should be cached to avoid an infinite loop"), h = !0);
      }
      var b = o({
        inst: {
          value: I,
          getSnapshot: m
        }
      }), A = b[0].inst, O = b[1];
      return u(function() {
        A.value = I, A.getSnapshot = m, T(A) && O({
          inst: A
        });
      }, [d, I, m]), c(function() {
        T(A) && O({
          inst: A
        });
        var D = function() {
          T(A) && O({
            inst: A
          });
        };
        return d(D);
      }, [d]), l(I), I;
    }
    function T(d) {
      var m = d.getSnapshot, v = d.value;
      try {
        var I = m();
        return !s(v, I);
      } catch {
        return !0;
      }
    }
    function S(d, m, v) {
      return m();
    }
    var C = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u", w = !C, E = w ? S : y, g = n.useSyncExternalStore !== void 0 ? n.useSyncExternalStore : E;
    Tc.useSyncExternalStore = g, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
  }(), Tc;
}
process.env.NODE_ENV === "production" ? pu.exports = YI() : pu.exports = JI();
var Sg = pu.exports, mu = { exports: {} }, bc = {};
/**
 * @license React
 * use-sync-external-store-shim/with-selector.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var id;
function XI() {
  if (id) return bc;
  id = 1;
  var n = re, e = Sg;
  function t(l, f) {
    return l === f && (l !== 0 || 1 / l === 1 / f) || l !== l && f !== f;
  }
  var r = typeof Object.is == "function" ? Object.is : t, i = e.useSyncExternalStore, s = n.useRef, o = n.useEffect, c = n.useMemo, u = n.useDebugValue;
  return bc.useSyncExternalStoreWithSelector = function(l, f, h, y, T) {
    var S = s(null);
    if (S.current === null) {
      var C = { hasValue: !1, value: null };
      S.current = C;
    } else C = S.current;
    S = c(function() {
      function E(I) {
        if (!g) {
          if (g = !0, d = I, I = y(I), T !== void 0 && C.hasValue) {
            var R = C.value;
            if (T(R, I)) return m = R;
          }
          return m = I;
        }
        if (R = m, r(d, I)) return R;
        var b = y(I);
        return T !== void 0 && T(R, b) ? R : (d = I, m = b);
      }
      var g = !1, d, m, v = h === void 0 ? null : h;
      return [function() {
        return E(f());
      }, v === null ? void 0 : function() {
        return E(v());
      }];
    }, [f, h, y, T]);
    var w = i(l, S[0], S[1]);
    return o(function() {
      C.hasValue = !0, C.value = w;
    }, [w]), u(w), w;
  }, bc;
}
var Ic = {}, sd;
function ZI() {
  if (sd) return Ic;
  sd = 1;
  /**
   * @license React
   * use-sync-external-store-shim/with-selector.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  return process.env.NODE_ENV !== "production" && function() {
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var n = re, e = Sg;
    function t(f, h) {
      return f === h && (f !== 0 || 1 / f === 1 / h) || f !== f && h !== h;
    }
    var r = typeof Object.is == "function" ? Object.is : t, i = e.useSyncExternalStore, s = n.useRef, o = n.useEffect, c = n.useMemo, u = n.useDebugValue;
    function l(f, h, y, T, S) {
      var C = s(null), w;
      C.current === null ? (w = {
        hasValue: !1,
        value: null
      }, C.current = w) : w = C.current;
      var E = c(function() {
        var v = !1, I, R, b = function(N) {
          if (!v) {
            v = !0, I = N;
            var k = T(N);
            if (S !== void 0 && w.hasValue) {
              var Y = w.value;
              if (S(Y, k))
                return R = Y, Y;
            }
            return R = k, k;
          }
          var oe = I, ue = R;
          if (r(oe, N))
            return ue;
          var ae = T(N);
          return S !== void 0 && S(ue, ae) ? ue : (I = N, R = ae, ae);
        }, A = y === void 0 ? null : y, O = function() {
          return b(h());
        }, D = A === null ? void 0 : function() {
          return b(A());
        };
        return [O, D];
      }, [h, y, T, S]), g = E[0], d = E[1], m = i(f, g, d);
      return o(function() {
        w.hasValue = !0, w.value = m;
      }, [m]), u(m), m;
    }
    Ic.useSyncExternalStoreWithSelector = l, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
  }(), Ic;
}
process.env.NODE_ENV === "production" ? mu.exports = XI() : mu.exports = ZI();
var e0 = mu.exports;
function t0(n) {
  n();
}
let Ag = t0;
const n0 = (n) => Ag = n, a1 = () => Ag, od = Symbol.for("react-redux-context"), ad = typeof globalThis < "u" ? globalThis : (
  /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */
  {}
);
function r0() {
  var n;
  if (!Zs.createContext) return {};
  const e = (n = ad[od]) != null ? n : ad[od] = /* @__PURE__ */ new Map();
  let t = e.get(Zs.createContext);
  return t || (t = Zs.createContext(null), process.env.NODE_ENV !== "production" && (t.displayName = "ReactRedux"), e.set(Zs.createContext, t)), t;
}
const gu = /* @__PURE__ */ r0();
function Rg(n = gu) {
  return function() {
    const t = Hv(n);
    if (process.env.NODE_ENV !== "production" && !t)
      throw new Error("could not find react-redux context value; please ensure the component is wrapped in a <Provider>");
    return t;
  };
}
const i0 = /* @__PURE__ */ Rg(), s0 = () => {
  throw new Error("uSES not initialized!");
};
let Cg = s0;
const o0 = (n) => {
  Cg = n;
}, a0 = (n, e) => n === e;
function c0(n = gu) {
  const e = n === gu ? i0 : Rg(n);
  return function(r, i = {}) {
    const {
      equalityFn: s = a0,
      stabilityCheck: o = void 0,
      noopCheck: c = void 0
    } = typeof i == "function" ? {
      equalityFn: i
    } : i;
    if (process.env.NODE_ENV !== "production") {
      if (!r)
        throw new Error("You must pass a selector to useSelector");
      if (typeof r != "function")
        throw new Error("You must pass a function as a selector to useSelector");
      if (typeof s != "function")
        throw new Error("You must pass a function as an equality function to useSelector");
    }
    const {
      store: u,
      subscription: l,
      getServerState: f,
      stabilityCheck: h,
      noopCheck: y
    } = e(), T = Gv(!0), S = Wv({
      [r.name](w) {
        const E = r(w);
        if (process.env.NODE_ENV !== "production") {
          const g = typeof o > "u" ? h : o;
          if (g === "always" || g === "once" && T.current) {
            const m = r(w);
            if (!s(E, m)) {
              let v;
              try {
                throw new Error();
              } catch (I) {
                ({
                  stack: v
                } = I);
              }
              console.warn("Selector " + (r.name || "unknown") + ` returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization`, {
                state: w,
                selected: E,
                selected2: m,
                stack: v
              });
            }
          }
          const d = typeof c > "u" ? y : c;
          if ((d === "always" || d === "once" && T.current) && E === w) {
            let m;
            try {
              throw new Error();
            } catch (v) {
              ({
                stack: m
              } = v);
            }
            console.warn("Selector " + (r.name || "unknown") + ` returned the root state when called. This can lead to unnecessary rerenders.
Selectors that return the entire state are almost certainly a mistake, as they will cause a rerender whenever *anything* in state changes.`, {
              stack: m
            });
          }
          T.current && (T.current = !1);
        }
        return E;
      }
    }[r.name], [r, h, o]), C = Cg(l.addNestedSub, u.getState, f || u.getState, S, s);
    return Qv(C), C;
  };
}
const Fe = /* @__PURE__ */ c0();
var ao = { exports: {} }, Se = {};
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var cd;
function u0() {
  if (cd) return Se;
  cd = 1;
  var n = typeof Symbol == "function" && Symbol.for, e = n ? Symbol.for("react.element") : 60103, t = n ? Symbol.for("react.portal") : 60106, r = n ? Symbol.for("react.fragment") : 60107, i = n ? Symbol.for("react.strict_mode") : 60108, s = n ? Symbol.for("react.profiler") : 60114, o = n ? Symbol.for("react.provider") : 60109, c = n ? Symbol.for("react.context") : 60110, u = n ? Symbol.for("react.async_mode") : 60111, l = n ? Symbol.for("react.concurrent_mode") : 60111, f = n ? Symbol.for("react.forward_ref") : 60112, h = n ? Symbol.for("react.suspense") : 60113, y = n ? Symbol.for("react.suspense_list") : 60120, T = n ? Symbol.for("react.memo") : 60115, S = n ? Symbol.for("react.lazy") : 60116, C = n ? Symbol.for("react.block") : 60121, w = n ? Symbol.for("react.fundamental") : 60117, E = n ? Symbol.for("react.responder") : 60118, g = n ? Symbol.for("react.scope") : 60119;
  function d(v) {
    if (typeof v == "object" && v !== null) {
      var I = v.$$typeof;
      switch (I) {
        case e:
          switch (v = v.type, v) {
            case u:
            case l:
            case r:
            case s:
            case i:
            case h:
              return v;
            default:
              switch (v = v && v.$$typeof, v) {
                case c:
                case f:
                case S:
                case T:
                case o:
                  return v;
                default:
                  return I;
              }
          }
        case t:
          return I;
      }
    }
  }
  function m(v) {
    return d(v) === l;
  }
  return Se.AsyncMode = u, Se.ConcurrentMode = l, Se.ContextConsumer = c, Se.ContextProvider = o, Se.Element = e, Se.ForwardRef = f, Se.Fragment = r, Se.Lazy = S, Se.Memo = T, Se.Portal = t, Se.Profiler = s, Se.StrictMode = i, Se.Suspense = h, Se.isAsyncMode = function(v) {
    return m(v) || d(v) === u;
  }, Se.isConcurrentMode = m, Se.isContextConsumer = function(v) {
    return d(v) === c;
  }, Se.isContextProvider = function(v) {
    return d(v) === o;
  }, Se.isElement = function(v) {
    return typeof v == "object" && v !== null && v.$$typeof === e;
  }, Se.isForwardRef = function(v) {
    return d(v) === f;
  }, Se.isFragment = function(v) {
    return d(v) === r;
  }, Se.isLazy = function(v) {
    return d(v) === S;
  }, Se.isMemo = function(v) {
    return d(v) === T;
  }, Se.isPortal = function(v) {
    return d(v) === t;
  }, Se.isProfiler = function(v) {
    return d(v) === s;
  }, Se.isStrictMode = function(v) {
    return d(v) === i;
  }, Se.isSuspense = function(v) {
    return d(v) === h;
  }, Se.isValidElementType = function(v) {
    return typeof v == "string" || typeof v == "function" || v === r || v === l || v === s || v === i || v === h || v === y || typeof v == "object" && v !== null && (v.$$typeof === S || v.$$typeof === T || v.$$typeof === o || v.$$typeof === c || v.$$typeof === f || v.$$typeof === w || v.$$typeof === E || v.$$typeof === g || v.$$typeof === C);
  }, Se.typeOf = d, Se;
}
var Ae = {};
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var ud;
function l0() {
  return ud || (ud = 1, process.env.NODE_ENV !== "production" && function() {
    var n = typeof Symbol == "function" && Symbol.for, e = n ? Symbol.for("react.element") : 60103, t = n ? Symbol.for("react.portal") : 60106, r = n ? Symbol.for("react.fragment") : 60107, i = n ? Symbol.for("react.strict_mode") : 60108, s = n ? Symbol.for("react.profiler") : 60114, o = n ? Symbol.for("react.provider") : 60109, c = n ? Symbol.for("react.context") : 60110, u = n ? Symbol.for("react.async_mode") : 60111, l = n ? Symbol.for("react.concurrent_mode") : 60111, f = n ? Symbol.for("react.forward_ref") : 60112, h = n ? Symbol.for("react.suspense") : 60113, y = n ? Symbol.for("react.suspense_list") : 60120, T = n ? Symbol.for("react.memo") : 60115, S = n ? Symbol.for("react.lazy") : 60116, C = n ? Symbol.for("react.block") : 60121, w = n ? Symbol.for("react.fundamental") : 60117, E = n ? Symbol.for("react.responder") : 60118, g = n ? Symbol.for("react.scope") : 60119;
    function d(G) {
      return typeof G == "string" || typeof G == "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      G === r || G === l || G === s || G === i || G === h || G === y || typeof G == "object" && G !== null && (G.$$typeof === S || G.$$typeof === T || G.$$typeof === o || G.$$typeof === c || G.$$typeof === f || G.$$typeof === w || G.$$typeof === E || G.$$typeof === g || G.$$typeof === C);
    }
    function m(G) {
      if (typeof G == "object" && G !== null) {
        var be = G.$$typeof;
        switch (be) {
          case e:
            var J = G.type;
            switch (J) {
              case u:
              case l:
              case r:
              case s:
              case i:
              case h:
                return J;
              default:
                var Ue = J && J.$$typeof;
                switch (Ue) {
                  case c:
                  case f:
                  case S:
                  case T:
                  case o:
                    return Ue;
                  default:
                    return be;
                }
            }
          case t:
            return be;
        }
      }
    }
    var v = u, I = l, R = c, b = o, A = e, O = f, D = r, N = S, k = T, Y = t, oe = s, ue = i, ae = h, x = !1;
    function L(G) {
      return x || (x = !0, console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.")), $(G) || m(G) === u;
    }
    function $(G) {
      return m(G) === l;
    }
    function U(G) {
      return m(G) === c;
    }
    function q(G) {
      return m(G) === o;
    }
    function H(G) {
      return typeof G == "object" && G !== null && G.$$typeof === e;
    }
    function ie(G) {
      return m(G) === f;
    }
    function z(G) {
      return m(G) === r;
    }
    function V(G) {
      return m(G) === S;
    }
    function j(G) {
      return m(G) === T;
    }
    function Q(G) {
      return m(G) === t;
    }
    function Z(G) {
      return m(G) === s;
    }
    function te(G) {
      return m(G) === i;
    }
    function me(G) {
      return m(G) === h;
    }
    Ae.AsyncMode = v, Ae.ConcurrentMode = I, Ae.ContextConsumer = R, Ae.ContextProvider = b, Ae.Element = A, Ae.ForwardRef = O, Ae.Fragment = D, Ae.Lazy = N, Ae.Memo = k, Ae.Portal = Y, Ae.Profiler = oe, Ae.StrictMode = ue, Ae.Suspense = ae, Ae.isAsyncMode = L, Ae.isConcurrentMode = $, Ae.isContextConsumer = U, Ae.isContextProvider = q, Ae.isElement = H, Ae.isForwardRef = ie, Ae.isFragment = z, Ae.isLazy = V, Ae.isMemo = j, Ae.isPortal = Q, Ae.isProfiler = Z, Ae.isStrictMode = te, Ae.isSuspense = me, Ae.isValidElementType = d, Ae.typeOf = m;
  }()), Ae;
}
var ld;
function h0() {
  return ld || (ld = 1, process.env.NODE_ENV === "production" ? ao.exports = u0() : ao.exports = l0()), ao.exports;
}
var Pg = h0(), f0 = {
  $$typeof: !0,
  render: !0,
  defaultProps: !0,
  displayName: !0,
  propTypes: !0
}, d0 = {
  $$typeof: !0,
  compare: !0,
  defaultProps: !0,
  displayName: !0,
  propTypes: !0,
  type: !0
}, kg = {};
kg[Pg.ForwardRef] = f0;
kg[Pg.Memo] = d0;
var Re = {};
/**
 * @license React
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hd;
function p0() {
  if (hd) return Re;
  hd = 1;
  var n = Symbol.for("react.element"), e = Symbol.for("react.portal"), t = Symbol.for("react.fragment"), r = Symbol.for("react.strict_mode"), i = Symbol.for("react.profiler"), s = Symbol.for("react.provider"), o = Symbol.for("react.context"), c = Symbol.for("react.server_context"), u = Symbol.for("react.forward_ref"), l = Symbol.for("react.suspense"), f = Symbol.for("react.suspense_list"), h = Symbol.for("react.memo"), y = Symbol.for("react.lazy"), T = Symbol.for("react.offscreen"), S;
  S = Symbol.for("react.module.reference");
  function C(w) {
    if (typeof w == "object" && w !== null) {
      var E = w.$$typeof;
      switch (E) {
        case n:
          switch (w = w.type, w) {
            case t:
            case i:
            case r:
            case l:
            case f:
              return w;
            default:
              switch (w = w && w.$$typeof, w) {
                case c:
                case o:
                case u:
                case y:
                case h:
                case s:
                  return w;
                default:
                  return E;
              }
          }
        case e:
          return E;
      }
    }
  }
  return Re.ContextConsumer = o, Re.ContextProvider = s, Re.Element = n, Re.ForwardRef = u, Re.Fragment = t, Re.Lazy = y, Re.Memo = h, Re.Portal = e, Re.Profiler = i, Re.StrictMode = r, Re.Suspense = l, Re.SuspenseList = f, Re.isAsyncMode = function() {
    return !1;
  }, Re.isConcurrentMode = function() {
    return !1;
  }, Re.isContextConsumer = function(w) {
    return C(w) === o;
  }, Re.isContextProvider = function(w) {
    return C(w) === s;
  }, Re.isElement = function(w) {
    return typeof w == "object" && w !== null && w.$$typeof === n;
  }, Re.isForwardRef = function(w) {
    return C(w) === u;
  }, Re.isFragment = function(w) {
    return C(w) === t;
  }, Re.isLazy = function(w) {
    return C(w) === y;
  }, Re.isMemo = function(w) {
    return C(w) === h;
  }, Re.isPortal = function(w) {
    return C(w) === e;
  }, Re.isProfiler = function(w) {
    return C(w) === i;
  }, Re.isStrictMode = function(w) {
    return C(w) === r;
  }, Re.isSuspense = function(w) {
    return C(w) === l;
  }, Re.isSuspenseList = function(w) {
    return C(w) === f;
  }, Re.isValidElementType = function(w) {
    return typeof w == "string" || typeof w == "function" || w === t || w === i || w === r || w === l || w === f || w === T || typeof w == "object" && w !== null && (w.$$typeof === y || w.$$typeof === h || w.$$typeof === s || w.$$typeof === o || w.$$typeof === u || w.$$typeof === S || w.getModuleId !== void 0);
  }, Re.typeOf = C, Re;
}
var Ce = {};
/**
 * @license React
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var fd;
function m0() {
  return fd || (fd = 1, process.env.NODE_ENV !== "production" && function() {
    var n = Symbol.for("react.element"), e = Symbol.for("react.portal"), t = Symbol.for("react.fragment"), r = Symbol.for("react.strict_mode"), i = Symbol.for("react.profiler"), s = Symbol.for("react.provider"), o = Symbol.for("react.context"), c = Symbol.for("react.server_context"), u = Symbol.for("react.forward_ref"), l = Symbol.for("react.suspense"), f = Symbol.for("react.suspense_list"), h = Symbol.for("react.memo"), y = Symbol.for("react.lazy"), T = Symbol.for("react.offscreen"), S = !1, C = !1, w = !1, E = !1, g = !1, d;
    d = Symbol.for("react.module.reference");
    function m(J) {
      return !!(typeof J == "string" || typeof J == "function" || J === t || J === i || g || J === r || J === l || J === f || E || J === T || S || C || w || typeof J == "object" && J !== null && (J.$$typeof === y || J.$$typeof === h || J.$$typeof === s || J.$$typeof === o || J.$$typeof === u || // This needs to include all possible module reference object
      // types supported by any Flight configuration anywhere since
      // we don't know which Flight build this will end up being used
      // with.
      J.$$typeof === d || J.getModuleId !== void 0));
    }
    function v(J) {
      if (typeof J == "object" && J !== null) {
        var Ue = J.$$typeof;
        switch (Ue) {
          case n:
            var pe = J.type;
            switch (pe) {
              case t:
              case i:
              case r:
              case l:
              case f:
                return pe;
              default:
                var ge = pe && pe.$$typeof;
                switch (ge) {
                  case c:
                  case o:
                  case u:
                  case y:
                  case h:
                  case s:
                    return ge;
                  default:
                    return Ue;
                }
            }
          case e:
            return Ue;
        }
      }
    }
    var I = o, R = s, b = n, A = u, O = t, D = y, N = h, k = e, Y = i, oe = r, ue = l, ae = f, x = !1, L = !1;
    function $(J) {
      return x || (x = !0, console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.")), !1;
    }
    function U(J) {
      return L || (L = !0, console.warn("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.")), !1;
    }
    function q(J) {
      return v(J) === o;
    }
    function H(J) {
      return v(J) === s;
    }
    function ie(J) {
      return typeof J == "object" && J !== null && J.$$typeof === n;
    }
    function z(J) {
      return v(J) === u;
    }
    function V(J) {
      return v(J) === t;
    }
    function j(J) {
      return v(J) === y;
    }
    function Q(J) {
      return v(J) === h;
    }
    function Z(J) {
      return v(J) === e;
    }
    function te(J) {
      return v(J) === i;
    }
    function me(J) {
      return v(J) === r;
    }
    function G(J) {
      return v(J) === l;
    }
    function be(J) {
      return v(J) === f;
    }
    Ce.ContextConsumer = I, Ce.ContextProvider = R, Ce.Element = b, Ce.ForwardRef = A, Ce.Fragment = O, Ce.Lazy = D, Ce.Memo = N, Ce.Portal = k, Ce.Profiler = Y, Ce.StrictMode = oe, Ce.Suspense = ue, Ce.SuspenseList = ae, Ce.isAsyncMode = $, Ce.isConcurrentMode = U, Ce.isContextConsumer = q, Ce.isContextProvider = H, Ce.isElement = ie, Ce.isForwardRef = z, Ce.isFragment = V, Ce.isLazy = j, Ce.isMemo = Q, Ce.isPortal = Z, Ce.isProfiler = te, Ce.isStrictMode = me, Ce.isSuspense = G, Ce.isSuspenseList = be, Ce.isValidElementType = m, Ce.typeOf = v;
  }()), Ce;
}
process.env.NODE_ENV === "production" ? p0() : m0();
o0(e0.useSyncExternalStoreWithSelector);
n0(tw);
function Rt(n) {
  let { name: e, default: t, id: r, actions: i, uniques: s = [], onSave: o, onRead: c, reduxStore: u } = n;
  const l = () => (u == null ? void 0 : u()) || we, f = KI({
    selectId: (g) => g[r]
  }), h = f.getSelectors(), y = f.getInitialState({
    saved: !0,
    status: "idle",
    writeStatus: "ready",
    id: r,
    name: e,
    loadingTime: 600,
    changed: !1
  });
  function T(g, d) {
    const m = Object.values(d), v = Object.values(g).map((R) => {
      const b = typeof t == "function" ? t(d, R) : t;
      return om(R, b || {});
    });
    if (!s.length)
      return v;
    const I = [...m, ...v.filter(Boolean)];
    return v.filter((R, b) => !I.slice(0, b).find((D) => s.some((N) => Array.isArray(N) ? N.every((k) => (D == null ? void 0 : D[k]) == (R == null ? void 0 : R[k])) : (D == null ? void 0 : D[N]) == R[N])));
  }
  const S = wa({
    name: e,
    initialState: y,
    reducers: {
      set(g, { payload: d = [] }) {
        f.setAll(g, T(d, g));
      },
      add(g, { payload: d = [] }) {
        const m = T(d, g);
        f.addMany(g, m), m.length && (g.changed = !0);
      },
      remove(g, { payload: d = [] }) {
        d.some((v) => g.ids.includes(v)) && (g.changed = !0), f.removeMany(g, d);
      },
      update(g, { payload: d = [] }) {
        d.map(({ id: I }) => I).some((I) => g.ids.includes(I)) && (g.changed = !0), f.updateMany(g, d);
      },
      reset(g) {
        g.ids.length || (g.changed = !0), f.removeAll(g);
      },
      upsert(g, { payload: d = [] }) {
        f.upsertMany(g, d), g.changed = !0;
      },
      changeStatus(g, { payload: d }) {
        g.status = d;
      },
      setLoadingTime(g, { payload: d }) {
        g.loadingTime = d;
      },
      setChanged(g, { payload: d }) {
        g.changed = d;
      },
      changeWriteStatus(g, { payload: d }) {
        g.writeStatus = d;
      },
      ...i
    }
  }), C = {
    getFull() {
      return Fe((d) => d[e]);
    },
    getIds() {
      return Fe((d) => h.selectIds(d[e]));
    },
    getId() {
      return Fe((d) => d[e].id);
    },
    remove(g) {
      l().dispatch(S.actions.remove(g));
    },
    add(g) {
      l().dispatch(S.actions.add(g));
    },
    upsert(g) {
      l().dispatch(S.actions.upsert(g));
    },
    getOne(g) {
      return Fe((d) => {
        const m = h.selectById(d[e], g);
        return typeof m > "u" ? void 0 : m;
      });
    },
    setOne(g, d) {
      l().dispatch(
        S.actions.update([
          {
            id: g,
            changes: d
          }
        ])
      );
    },
    setWriteStatus(g = "ready") {
      l().dispatch(S.actions.changeWriteStatus(g));
    },
    useOne(g) {
      const d = C.getOne(g);
      return sm(
        d,
        (m) => m !== void 0 && C.setOne(g, m),
        (m) => m ?? void 0
      );
    },
    getOneFeild(g, d) {
      return Fe((v) => {
        var R;
        const I = (R = h.selectById(v[e], g)) == null ? void 0 : R[d];
        return typeof I > "u" ? void 0 : I;
      });
    },
    setOneFeild(g, d, m) {
      l().dispatch(
        S.actions.update([
          {
            id: g,
            changes: {
              [d]: m
            }
          }
        ])
      );
    },
    useOneFeild(g, d) {
      const m = C.getOneFeild(g, d);
      return sm(
        m,
        (I) => {
          I != null && C.setOneFeild(g, d, I);
        },
        (I) => I
      );
    },
    getOneFeilds(g, d) {
      return Fe((v) => {
        const I = h.selectById(v[e], g);
        if (!I)
          return;
        const R = {};
        return d.forEach((b) => {
          R[b] = I[b];
        }), R;
      });
    },
    getAll() {
      return Fe((d) => h.selectAll(d[e]));
    },
    setAll(g) {
      l().dispatch(S.actions.set(g));
    },
    useAll() {
      const g = C.getAll(), d = wt(g);
      return re.useEffect(() => {
        C.setAll(d.get);
      }, [d.get]), re.useEffect(() => {
        d.set(g);
      }, [g]), d;
    },
    getWriteStatus() {
      return Fe((d) => d[e].writeStatus);
    },
    useWriteStatus() {
      const g = C.getWriteStatus(), d = wt(g);
      return re.useEffect(() => {
        C.setWriteStatus(d.get);
      }, [d.get]), re.useEffect(() => {
        d.set(g);
      }, [g]), d;
    },
    getStatus() {
      return Fe((d) => d[e].status);
    },
    setStatus(g) {
      l().dispatch(S.actions.changeStatus(g));
    },
    useStatus() {
      const g = C.getStatus(), d = wt(g);
      return re.useEffect(() => {
        C.setStatus(d.get);
      }, [d.get]), re.useEffect(() => {
        d.set(g);
      }, [g]), d;
    },
    getEntity() {
      return Fe((d) => h.selectEntities(d[e]));
    },
    getLoadingTime() {
      return Fe((d) => d[e].loadingTime);
    },
    setLoadingTime(g) {
      l().dispatch(S.actions.setLoadingTime(g));
    },
    useLoadingTime() {
      const g = C.getLoadingTime(), d = wt(g);
      re.useEffect(() => {
        C.setLoadingTime(d.get);
      }, [d.get]), re.useEffect(() => {
        d.set(g);
      }, [g]);
    },
    getChanged() {
      return Fe((d) => d[e].changed);
    },
    setChanged(g) {
      l().dispatch(S.actions.setChanged(g));
    },
    useChanged() {
      const g = C.getChanged(), d = wt(g);
      re.useEffect(() => {
        C.setChanged(d.get);
      }, [d.get]), re.useEffect(() => {
        d.set(g);
      }, [g]);
    }
  };
  function w() {
    const g = C.getStatus(), d = C.getId(), m = C.getWriteStatus(), v = C.getLoadingTime();
    return di(async () => {
      if (g == "idle") {
        const I = new oa();
        I.clear(), C.setStatus("loading"), await I.start(v);
        try {
          if (!c)
            return;
          let R = c();
          R instanceof Promise && (R = await R), C.setChanged(!1), C.setStatus("success"), C.setAll(R);
        } catch {
          C.setAll([]), C.setStatus("error");
        }
      }
    }, [g]), di(async () => {
      if (m == "idle") {
        C.setWriteStatus("loading");
        const I = {};
        try {
          const R = l().getState(), { [e]: b } = R;
          Object.values(b.entities).forEach((O) => {
            if (!O)
              return;
            const { [d]: D, ...N } = O;
            I[D] = N;
          });
          const A = o == null ? void 0 : o(I, n, R);
          A instanceof Promise && await A, C.setWriteStatus("success"), C.setWriteStatus("ready");
        } catch {
          C.setWriteStatus("error");
        }
      }
    }, [m]), re.useEffect(() => {
      const I = Object.entries(n.data || {}).map(([R, b]) => ({
        [d]: R,
        ...b
      }));
      C.setAll(I);
    }, []), { id: d, saved: m, status: g, timeLoading: v };
  }
  return {
    slice: S,
    entity: f,
    hooks: C,
    entitySelect: h,
    initialState: y,
    init: w,
    select: (g) => g[e]
  };
}
const g0 = {
  data: {
    settings: {
      focused: "user",
      label: "settings controler",
      tabs: {
        user: {
          icon: {
            value: "faTools"
          }
        },
        keyboardShortcuts: {
          icon: {
            value: "faKeyboard"
          },
          news: {
            value: "faKeyboard"
          }
        },
        icons: {
          icon: { value: "faIcons" }
        },
        colors: {
          icon: {
            value: "faPenRuler",
            type: "solid"
          }
        }
      }
    },
    "settings.viewType": {
      focused: "list",
      label: "settings layout",
      tab: {
        list: {},
        tree: {}
      }
    }
  }
}, { data: y0 } = g0, _0 = {
  name: "views",
  id: "viewId",
  default(n, e) {
    const t = e.tabs || {};
    for (const r in t)
      t[r].label || (t[r].label = r);
    return {
      viewId: ft(),
      focused: null,
      tabs: t
    };
  },
  data: y0
}, { hooks: Og, slice: dd, init: c1, select: u1 } = Rt(_0);
function l1(n) {
  const e = Og.getOne(n);
  return re.useMemo(() => {
    var t;
    return typeof (e == null ? void 0 : e.focused) == "number" ? (t = e == null ? void 0 : e.tabs) == null ? void 0 : t[e.focused] : null;
  }, [e]);
}
const v0 = {
  id: "treeId",
  name: "tree",
  default: {
    expanded: {},
    separator: "/"
  },
  actions: {
    next(n, { payload: e }) {
      n.entities[e];
    },
    back(n, { payload: e }) {
      n.entities[e];
    },
    toggleExpand(n, { payload: e }) {
      var r;
      const t = n.entities[e];
      t && t.focused && (t.expanded = {
        ...t.expanded || {},
        [t.focused]: !((r = t.expanded) != null && r[t.focused])
      });
    },
    expandMore(n, { payload: e }) {
      const t = n.entities[e];
      t && t.focused && (t.expanded = {
        ...t.expanded || {},
        [t.focused]: !0
      });
    },
    expandLess(n, { payload: e }) {
      const t = n.entities[e];
      t && t.focused && (t.expanded = {
        ...t.expanded || {},
        [t.focused]: !1
      });
    },
    focusParent(n, { payload: e }) {
      const t = n.entities[e];
      if (t && t.focused && t.separator) {
        const r = t.focused.split(t.separator).slice(0, -1).join(t.separator);
        t.focused = r || null;
      }
    },
    focusLeft(n, { payload: e }) {
      var r;
      const t = n.entities[e];
      if (t && t.focused && t.separator)
        if ((r = t.expanded) == null ? void 0 : r[t.focused])
          t.expanded = {
            ...t.expanded || {},
            [t.focused]: !1
          };
        else {
          const s = t.focused.split(t.separator).slice(0, -1).join(t.separator);
          t.focused = s || null;
        }
    },
    focusRight(n, { payload: e }) {
      var r;
      const t = n.entities[e];
      if (t && t.focused && t.separator)
        if (!((r = t.expanded) == null ? void 0 : r[t.focused]))
          t.expanded = {
            ...t.expanded || {},
            [t.focused]: !0
          };
        else {
          const s = [...t.focused.split(t.separator), "0"].join(t.separator);
          t.focused = s;
        }
    }
  },
  data: {}
}, { init: h1, hooks: pd, slice: md } = Rt(v0);
function f1(n) {
  const e = pd.getOne(n);
  re.useEffect(() => {
    e || pd.add([
      {
        treeId: n,
        ends: []
      }
    ]);
  }, [e]);
}
const w0 = {
  content: null,
  position: null,
  x: "left",
  y: "bottom"
}, ii = wa({
  initialState: w0,
  name: "title",
  reducers: {
    // actions
    setContent(n, { payload: e }) {
      n.content = e;
    },
    setPosition(n, { payload: e }) {
      n.position = e;
    },
    setX(n, { payload: e }) {
      n.x = e;
    },
    setY(n, { payload: e }) {
      n.y = e;
    }
  }
});
function d1(n) {
  we.dispatch(ii.actions.setContent(n));
}
function p1() {
  return Fe((e) => e.title.content, Yn);
}
function m1(n) {
  we.dispatch(ii.actions.setPosition(n));
}
function g1() {
  return Fe((e) => e.title.position, Yn);
}
function y1(n = "left") {
  we.dispatch(ii.actions.setX(n));
}
function _1() {
  return Fe((e) => e.title.x, Yn);
}
function v1(n = "bottom") {
  we.dispatch(ii.actions.setY(n));
}
function w1() {
  return Fe((e) => e.title.y, Yn);
}
const E0 = {
  id: "id",
  name: "toasts",
  default: () => ({
    id: ft(),
    type: "info"
  })
}, { hooks: T0, init: E1, select: T1, slice: gd, entity: b1 } = Rt(E0), Or = {
  id: "slotId",
  name: "slot",
  default: {
    slotId: ft(14),
    focused: null,
    submited: null,
    selected: {},
    skiped: {},
    length: 0,
    direction: null,
    redirect: !0
  },
  actions: {
    changeSelectIndexs(n, {
      payload: { name: e, items: t = {} }
    }) {
      const r = n.entities[e];
      r && (r.selected = { ...t });
    },
    removeSelection(n, { payload: e }) {
      n.entities[e] && b0.updateOne(n, {
        id: e,
        changes: {
          ...n.entities[e],
          selected: {}
        }
      });
    },
    next(n, { payload: e }) {
      var i;
      const t = n.entities[e];
      if (!t || !t.length) {
        t && (t.focused = null);
        return;
      }
      const { redirect: r = !0 } = t;
      t.direction = "forward", typeof t.focused != "number" && (t.focused = -1);
      do
        t.focused++, r ? t.focused = Math.abs(t.focused) % t.length : t.focused >= t.length && t.focused--;
      while ((i = t.skiped) != null && i[t.focused]);
    },
    back(n, { payload: e }) {
      var i;
      const t = n.entities[e];
      if (!t || !t.length) {
        t && (t.focused = null);
        return;
      }
      const { redirect: r = !0 } = t;
      t.direction = "backward", typeof t.focused != "number" && (t.focused = t.length);
      do
        t.focused--, t.focused < 0 && r ? t.focused = t.length - 1 : t.focused < 0 && (t.focused = 0);
      while ((i = t.skiped) != null && i[t.focused]);
    },
    submit(n, { payload: e }) {
      const t = n.entities[e];
      t && (t.submited = t.focused);
    },
    submitNext(n, { payload: e }) {
      var i;
      const t = n.entities[e];
      if (!t || !t.length) {
        t && (t.submited = null);
        return;
      }
      const { redirect: r = !0 } = t;
      t.direction = "forward", typeof t.submited != "number" && (t.submited = -1);
      do
        t.submited++, r && (t.submited = t.submited % t.length);
      while ((i = t.skiped) != null && i[t.submited]);
    },
    submitBack(n, { payload: e }) {
      var i;
      const t = n.entities[e];
      if (!t || !t.length) {
        t && (t.submited = null);
        return;
      }
      const { redirect: r = !0 } = t;
      t.direction = "backward", typeof t.submited != "number" && (t.submited = t.length);
      do
        t.submited--, r && (t.submited = t.submited % t.length), t.submited < 0 && (t.submited = t.length - 1);
      while ((i = t.skiped) != null && i[t.submited]);
    },
    submitForce(n, { payload: { name: e, index: t = null } }) {
      const r = n.entities[e];
      r && (r.focused = t, r.submited = t);
    },
    escape(n, { payload: e }) {
      const t = n.entities[e];
      t && (t.selected = {}, t.focused = null, t.direction = null, t.submited = null);
    },
    selectAll(n, { payload: e }) {
      const t = n.entities[e];
      if (!t)
        return;
      const r = {};
      Yv(0, Number(t.length) - 1, 1).forEach((i) => {
        r[i] = !0;
      }), t.selected = r, t.direction = null;
    }
  }
}, { hooks: Eo, slice: yd, entity: b0, init: I1 } = Rt(Or);
function S1(n) {
  we.dispatch({
    type: `${Or.name}/next`,
    payload: n
  });
}
function A1(n) {
  return we.dispatch({
    type: `${Or.name}/back`,
    payload: n
  });
}
function R1(n) {
  return we.dispatch({
    type: `${Or.name}/escape`,
    payload: n
  });
}
function C1(n) {
  we.dispatch({ type: `${Or.name}/submit`, payload: n });
}
function P1(n) {
  we.dispatch({ type: `${Or.name}/submitNext`, payload: n });
}
function k1(n) {
  we.dispatch({ type: `${Or.name}/submitBack`, payload: n });
}
function O1(n, e) {
  const t = Eo.getOne(n);
  re.useEffect(() => {
    t || Eo.upsert([
      {
        slotId: n,
        length: e.length
      }
    ]);
  }, [t, e]), re.useEffect(() => {
    Eo.setOneFeild(n, "length", e.length);
  }, [e]);
}
function D1(n, e, t = "submited") {
  const r = Eo.getOneFeild(e, t);
  return re.useMemo(() => typeof r != "number" ? null : n[r] || null, [r, n]);
}
const I0 = {
  data: {
    "preferences/animation.boolean": {
      def: !0,
      desc: "animation in the preferences",
      name: "animation in preferences"
    },
    "preferences/fastScrollKey.enum": {
      config: {
        list: [
          {
            value: "alt"
          },
          {
            value: "control"
          },
          {
            value: "shift"
          }
        ]
      },
      def: "alt",
      desc: "is one between this keys ${state.settings.entities['preferences/fastScrollKey.enum']?.config.list.map(({ value })=> '**' + value + '**').join(' , ')} and when press one of them the scrolling gona be faster",
      name: "speed scrolling meta key"
    },
    "preferences/font.enum": {
      config: {
        list: [
          {
            content: "Outfit",
            value: "Outfit"
          },
          {
            content: "Karla",
            value: "Karla"
          },
          {
            content: "arial",
            value: "arial"
          },
          {
            content: "times new roman",
            value: "times new roman"
          },
          {
            content: "verdana",
            value: "verdana"
          },
          {
            content: "tahoma",
            value: "tahoma"
          },
          {
            content: "georgia",
            value: "georgia"
          },
          {
            content: "courier new",
            value: "courier new"
          },
          {
            content: "lucida console",
            value: "lucida console"
          },
          {
            content: "impact",
            value: "impact"
          },
          {
            content: "comic sans ms",
            value: "comic sans ms"
          },
          {
            content: "system ui",
            value: "system-ui"
          }
        ]
      },
      def: "Outfit",
      desc: "change one between this fonts ${state.settings.entities['preferences/font.enum']?.config.list.map(({ content })=> '`' + content + '`').join(' , ')}",
      name: "change font of app"
    },
    "preferences/toastTime.number": {
      config: {
        max: 10,
        min: 1
      },
      def: 6,
      desc: "is in `second`",
      name: "time of toast done"
    },
    "settings/findBy.enum": {
      config: {
        list: [
          {
            content: "setting id",
            value: "settingId"
          },
          {
            value: "setting"
          },
          {
            value: "name"
          }
        ]
      },
      def: "name",
      desc: "the method of how to find \\`setting\\` using one of this:\n${state.settings.entities['settings/findBy.enum']?.config?.list?.map(({ content , value })=> '**' + (content || value)  + '**' ).join(' or ')}",
      name: "find settings using ?"
    },
    "toast/position.enum": {
      config: {
        list: [
          {
            content: "top",
            value: "top"
          },
          {
            content: "bottom",
            value: "bottom"
          }
        ]
      },
      def: "top",
      desc: "the position of the toast is one between ${state.settings.entities['toast/position.enum']?.config.list.map(({ content })=> '`' + content + '`').join(' , ')}",
      name: "toast position"
    },
    "visibility/configurations.boolean": {
      def: !1,
      desc: "hide or visible the configurations view",
      name: "visibility of configurations view",
      private: !0
    },
    "visibility/header.boolean": {
      def: !0,
      name: "header view visibility"
    },
    "visibility/headerNotifays.boolean": {
      def: !1,
      name: "header panel notifications visibility",
      private: !0
    },
    "visibility/keyPanding/form.boolean": {
      def: !1,
      private: !0
    },
    "visibility/leftSide.boolean": {
      def: !1,
      desc: "viibility of **left side**  component",
      name: "left side visibility"
    },
    "visibility/notifays.boolean": {
      def: !1,
      desc: "visibility of **notification** view",
      name: "notification visibility",
      private: !0
    },
    "visibility/notifays/nots.boolean": {
      def: !1,
      private: !0
    },
    "visibility/rightSide.boolean": {
      def: !1,
      desc: "visibility of **right side** component",
      name: "right side visibility"
    },
    "window/dark.boolean": {
      config: {
        style: "checkbox"
      },
      def: !1,
      desc: "change the theme of the app to dark mode",
      name: "dark mode"
    },
    "window/lang.enum": {
      config: {
        list: [
          {
            content: "arabic",
            value: "ar"
          },
          {
            content: "france",
            value: "fr"
          },
          {
            content: "englich",
            value: "en"
          },
          {
            content: "espaniche",
            value: "es"
          },
          {
            content: "india",
            value: "hi"
          },
          {
            content: "japanese",
            value: "ja"
          },
          {
            content: "russian",
            value: "ru"
          }
        ]
      },
      def: "en",
      desc: "change one between this langs ${state.settings.entities['window/lang.enum']?.config.list.map(({ content })=> '`' + content + '`').join(' , ')}",
      name: "change lang of app"
    },
    "preferences/scrollAnimation.boolean.boolean": {
      def: !1,
      desc: "scrolling with animation",
      name: "scroll animation"
    },
    "visibility/keyboard.boolean": {
      name: "Keyboard Visibility",
      desc: "The Visibility Of Keyboard Screen",
      def: !1
    },
    "notification/clearAllConfirmation.boolean": {
      name: "clear all notifications",
      desc: "ask before clearing all notifications",
      def: !0
    }
  }
}, { data: S0 } = I0, A0 = {
  name: "settings",
  id: "settingId",
  default(n, { def: e }) {
    return {
      private: !1,
      deperacted: !1,
      config: {},
      value: e
    };
  },
  actions: {
    toggle(n, { payload: e }) {
      const t = n.entities[e];
      t && (t.value = !t.value);
    }
  },
  data: S0
}, { hooks: Yt, slice: _d, init: N1, entitySelect: x1 } = Rt(A0), R0 = {
  name: "positions",
  id: "positionId",
  default: {
    bottom: 0,
    left: 0,
    right: 0,
    top: 0,
    x: 0,
    y: 0,
    width: 0,
    height: 0
  }
}, { entity: L1, slice: vd, hooks: M1, entitySelect: V1, init: F1 } = Rt(R0), C0 = "object", P0 = {
  data: {},
  settings: {
    saved: !0,
    status: "idle",
    reloaded: !0,
    watch: !0,
    ignoreAccess: []
  }
}, Er = wa({
  initialState: P0,
  name: C0,
  reducers: {
    setValue(n, { payload: e }) {
      const t = n.settings.ignoreAccess.find(({ dir: o }) => e.direction == o);
      if (t && t.pass != e.pass) {
        Wt.warn(`Cannot Access Direction ${e.direction}`);
        return;
      }
      const r = e.direction.split(".").filter(Boolean);
      if (!r.length) {
        n.data = e.value;
        return;
      }
      let i = n.data;
      r.slice(0, -1).forEach((o) => {
        let c = i[o];
        c == null && e.force && (i[o] = {}, c = i[o]), i = c;
      });
      const s = r.at(-1);
      i[s] = e.value;
    },
    save(n, { payload: e = !1 }) {
      n.settings.saved = e;
    },
    reload(n, { payload: e = !1 }) {
      n.settings.reloaded = e;
    },
    addIgnoreAccess(n, { payload: e }) {
      e.forEach(({ dir: t, pass: r }) => {
        n.settings.ignoreAccess.find((s) => s.dir == t && r == s.pass) || n.settings.ignoreAccess.push({
          dir: t,
          pass: r
        });
      });
    },
    removeIgnoreAccess(n, { payload: e }) {
      e.forEach(({ dir: t, pass: r }) => {
        const i = n.settings.ignoreAccess.findIndex((s) => s.dir == t && r == s.pass);
        i >= 0 && n.settings.ignoreAccess.splice(i, 1);
      });
    }
  }
}), U1 = () => Fe((e) => e.object.settings.saved), j1 = () => Fe((e) => e.object.settings.watch), $1 = () => Fe((e) => e.object.settings.reloaded), B1 = () => Fe((e) => e.object.settings.status), q1 = () => {
  we.dispatch(Er.actions.reload(!1));
}, K1 = () => {
  we.dispatch(Er.actions.reload(!0));
}, z1 = () => {
  we.dispatch(Er.actions.save(!1));
}, H1 = () => {
  we.dispatch(Er.actions.save(!0));
};
function Ea(n) {
  return Fe((t) => {
    const { isValide: r, value: i } = aa(t.object.data, n);
    return r ? i : null;
  }, Yn);
}
function Ft(n, e) {
  we.dispatch(
    Er.actions.setValue({
      value: e,
      direction: n,
      force: !0
    })
  );
}
function k0(n) {
  const e = Ea(n), t = wt(e);
  return re.useEffect(() => {
    Ft(n, t.get);
  }, [t.get]), re.useEffect(() => {
    t.set(e);
  }, [e]), t;
}
function pl(n, e) {
  const t = (e || we.getState()).object.data, { isValide: r, value: i } = aa(t, n);
  return r ? i : null;
}
const O0 = {
  data: {}
}, { data: D0 } = O0, N0 = {
  id: "id",
  name: "notifications",
  default: () => ({
    id: ft(),
    desc: void 0,
    removable: !0,
    status: "idle",
    showDesc: !1,
    type: "info",
    buttons: []
  }),
  data: D0
}, { hooks: cs, init: G1, select: W1, slice: wd, entity: Q1 } = Rt(N0);
function Dg() {
  Yt.setOneFeild("visibility/notifays.boolean", "value", !0), Yt.setOneFeild("visibility/notifays/nots.boolean", "value", !0);
}
function Ng() {
  Yt.setOneFeild("visibility/notifays.boolean", "value", !1), Yt.setOneFeild("visibility/notifays/nots.boolean", "value", !1);
}
async function Y1(n, e = {}) {
  const t = om(e, {
    open: !0,
    close: !0,
    time: 2e3
  });
  t != null && t.open && Dg();
  const r = {
    id: ft(),
    title: " - ",
    ...n
  };
  cs.upsert([r]), await am(t.time), cs.remove([r.id]), t != null && t.close && Ng();
}
async function J1(n, e) {
  const t = e();
  return t instanceof Promise ? new Promise(async (r, i) => {
    Dg(), cs.upsert([n]), t.then(r).catch(i).finally(() => {
      cs.remove([n.id]), Ng();
    });
  }) : t;
}
const x0 = {
  id: "logId",
  name: "logs",
  data: {},
  default: () => ({
    logId: ft(10),
    desc: "",
    type: "INFO",
    category: "window",
    showDesc: !1,
    createdAt: (/* @__PURE__ */ new Date()).toISOString()
  })
}, { entity: X1, slice: Ed, init: Z1, hooks: ex } = Rt(x0), L0 = {
  id: "word",
  name: "langs"
}, tx = () => xg.setWriteStatus("idle"), { init: nx, hooks: xg, entity: rx, slice: Td } = Rt(L0), M0 = {
  data: {
    "camera-take": {
      commands: [
        {
          payload: ["camera-take"],
          type: "actions/exec"
        }
      ]
    },
    "colors-list-back": {
      commands: [
        {
          payload: "colors-list",
          type: "slot/back"
        }
      ]
    },
    "colors-list-next": {
      commands: [
        {
          payload: "colors-list",
          type: "slot/next"
        }
      ]
    },
    "colors-list-submit": {
      commands: [
        {
          payload: "colors-list",
          type: "slot/submit"
        }
      ]
    },
    "commands.back": {
      commands: [
        {
          payload: "cmds/list",
          type: "slot/back"
        }
      ],
      label: "commands : back"
    },
    "commands.close": {
      commands: [
        {
          payload: {
            direction: "commandId",
            force: !0,
            value: null
          },
          type: "object/setValue"
        }
      ],
      label: "view : close commands"
    },
    "commands.next": {
      commands: [
        {
          payload: "cmds/list",
          type: "slot/next"
        }
      ],
      label: "commands : next"
    },
    "commands.open": {
      commands: [
        {
          payload: {
            direction: "commandId",
            force: !0,
            value: "commands"
          },
          type: "object/setValue"
        }
      ],
      label: "view : open commands"
    },
    "commands.submit": {
      commands: [
        {
          payload: "cmds/list",
          type: "slot/submit"
        }
      ],
      label: "commands : run"
    },
    "configurations.back": {
      commands: [
        {
          payload: "configurations",
          type: "slot/back"
        }
      ],
      label: "settings : back"
    },
    "configurations.next": {
      commands: [
        {
          payload: "configurations",
          type: "slot/next"
        }
      ],
      label: "settings : next"
    },
    "configurations.settings.layout.submit": {
      commands: [
        {
          payload: "settings.layout.tools",
          type: "slot/submit"
        }
      ],
      label: "settings layout : change"
    },
    "configurations.settings.layouts.next": {
      commands: [
        {
          payload: "settings.layout.tools",
          type: "slot/next"
        }
      ],
      label: "settings layout : next"
    },
    "configurations.settings.layouts.previous": {
      commands: [
        {
          payload: "settings.layout.tools",
          type: "slot/back"
        }
      ],
      label: "settings layout : previous"
    },
    "configurations.submit": {
      commands: [
        {
          payload: "configurations",
          type: "slot/submit"
        }
      ],
      label: "settings : submit"
    },
    "defaultCommand.ignore": {
      commands: [],
      private: !0
    },
    "dialog.clickOnButton": {
      commands: [
        {
          payload: "dialog-list",
          type: "slot/submit"
        }
      ],
      label: "Dialog : Click And Submit"
    },
    "dialog.escape": {
      commands: [
        {
          payload: ["dialog.cancel"],
          type: "actions/exec"
        }
      ],
      label: "Dialog : Escape"
    },
    "dialog.goToNextButton": {
      commands: [
        {
          payload: "dialog-list",
          type: "slot/next"
        }
      ],
      label: "Dialog : Next Button"
    },
    "dialog.goToPreviousButton": {
      commands: [
        {
          payload: "dialog-list",
          type: "slot/back"
        }
      ],
      label: "Dialog : Previous Button"
    },
    "header.toggle": {
      commands: [
        {
          payload: "visibility/header.boolean",
          type: "settings/toggle"
        }
      ],
      label: "view : toggle header"
    },
    "headerNotifays.toggleExpand": {
      commands: [
        {
          payload: "visibility/headerNotifays.boolean",
          type: "settings/toggle"
        }
      ],
      label: "view : toggle header notifications"
    },
    "input.addLineBellow": {
      commands: [
        {
          payload: ["input.addLineBellow"],
          type: "actions/exec"
        }
      ],
      label: "input : add line bellow"
    },
    "input.completeWord": {
      commands: [
        {
          payload: ["input.completeWord"],
          type: "actions/exec"
        }
      ],
      label: "input : complete word"
    },
    "input.selectLine": {
      commands: [
        {
          payload: ["input.selectLine"],
          type: "actions/exec"
        }
      ],
      label: "input : select line"
    },
    "input.tab": {
      commands: [
        {
          payload: ["input.tab"],
          type: "actions/exec"
        }
      ],
      label: "input : tab space"
    },
    "keyboard/update": {
      commands: [
        {
          payload: ["keyboard/update"],
          type: "actions/exec"
        }
      ]
    },
    "keyboardShortcuts.focusNextKeyPanding": {
      commands: [
        {
          payload: "keyboardShortcuts",
          type: "slot/next"
        }
      ],
      label: "keyboard shortcuts : focus next"
    },
    "keyboardShortcuts.focusPreviousKeyPanding": {
      commands: [
        {
          payload: "keyboardShortcuts",
          type: "slot/back"
        }
      ],
      label: "keyboard shortcuts : focus previous"
    },
    "keyboardShortcuts.submitCurrentKeyPanding": {
      commands: [
        {
          payload: "keyboardShortcuts",
          type: "slot/submit"
        }
      ],
      label: "keyboard shortcuts : submit current"
    },
    "menu.back": {
      commands: [
        {
          payload: "menu-list",
          type: "slot/back"
        }
      ]
    },
    "menu.escape": {
      commands: [
        {
          payload: {
            direction: "menu.id",
            force: !0,
            value: null
          },
          type: "object/setValue"
        }
      ]
    },
    "menu.next": {
      commands: [
        {
          payload: "menu-list",
          type: "slot/next"
        }
      ]
    },
    "menu.submit": {
      commands: [
        {
          payload: "menu-list",
          type: "slot/submit"
        }
      ]
    },
    "notifays.toggleExpandNotifay": {
      commands: [
        {
          payload: ["toggleExpandNotifay", null],
          type: "actions/exec"
        }
      ],
      label: "notifications : toggle expand notifications"
    },
    "notification.close": {
      commands: [
        {
          payload: [
            {
              changes: {
                value: !1
              },
              id: "visibility/notifays.boolean"
            }
          ],
          type: "settings/update"
        }
      ],
      label: "view : close notifications"
    },
    "notification.closeAndExpandLess": {
      commands: [
        "notification.close",
        {
          payload: [
            {
              changes: {
                value: !1
              },
              id: "visibility/notifays/notes.boolean"
            }
          ],
          type: "settings/update"
        }
      ],
      label: "view : close notifications and expand less"
    },
    "notification.deleteFocus": {
      commands: [
        {
          payload: ["notification.deleteFocus"],
          type: "actions/exec"
        }
      ],
      label: "notifications : delete the focused notification"
    },
    "notification.focusNext": {
      commands: [
        {
          payload: "notification",
          type: "slot/next"
        }
      ],
      label: "notifications : go next"
    },
    "notification.focusPrevious": {
      commands: [
        {
          payload: "notification",
          type: "slot/back"
        }
      ],
      label: "notifications: go back"
    },
    "notification.open": {
      commands: [
        {
          payload: [
            {
              changes: {
                value: !0
              },
              id: "visibility/notifays.boolean"
            }
          ],
          type: "settings/update"
        }
      ],
      label: "notifications : open"
    },
    "notification.openAndExpandMoreAndFocus": {
      commands: [
        "notification.open",
        {
          payload: [
            {
              changes: {
                value: !0
              },
              id: "visibility/notifays/notes.boolean"
            }
          ],
          type: "settings/update"
        },
        {
          payload: ["focus", "notifications"],
          type: "actions/exec"
        }
      ],
      label: "notifications : open and expand more and focus"
    },
    "notification.submitCurrent": {
      commands: [
        {
          payload: "notification",
          type: "slot/submit"
        }
      ],
      label: "notifications : submit current"
    },
    "notification.toggle": {
      commands: [
        {
          payload: "visibility/notifays.boolean",
          type: "settings/toggle"
        }
      ],
      label: "view : toggle notifications"
    },
    "search.history.clear": {
      commands: [
        {
          payload: ["search.history.clear"],
          type: "actions/exec"
        }
      ],
      label: "search : clear history"
    },
    "settings.colors.show": {
      commands: [
        {
          payload: [
            {
              changes: {
                focused: "colors"
              },
              id: "settings"
            }
          ],
          type: "views/update"
        }
      ]
    },
    "settings.focusNext": {
      commands: [
        {
          payload: "settings",
          type: "slot/next"
        }
      ]
    },
    "settings.focusPrevious": {
      commands: [
        {
          payload: "settings",
          type: "slot/back"
        }
      ]
    },
    "settings.icons.back": {
      commands: [
        {
          payload: "icons-list",
          type: "slot/back"
        }
      ]
    },
    "settings.icons.next": {
      commands: [
        {
          payload: "icons-list",
          type: "slot/next"
        }
      ]
    },
    "settings.icons.show": {
      commands: [
        {
          payload: [
            {
              changes: {
                focused: "icons"
              },
              id: "settings"
            }
          ],
          type: "views/update"
        }
      ]
    },
    "settings.icons.submit": {
      commands: [
        {
          payload: "icons-list",
          type: "slot/submit"
        }
      ]
    },
    "settings.keyboardShortcuts.show": {
      commands: [
        {
          payload: [
            {
              changes: {
                focused: "keyboardShortcuts"
              },
              id: "settings"
            }
          ],
          type: "views/update"
        }
      ]
    },
    "settings.tree.expandLess": {
      commands: [
        {
          payload: "setting-tree-layout",
          type: "tree/expandLess"
        }
      ]
    },
    "settings.tree.expandMore": {
      commands: [
        {
          payload: "setting-tree-layout",
          type: "tree/expandMore"
        }
      ]
    },
    "settings.tree.toggleExpand": {
      commands: [
        {
          payload: "setting-tree-layout",
          type: "tree/toggleExpand"
        }
      ]
    },
    "settings.user.show": {
      commands: [
        {
          payload: [
            {
              changes: {
                focused: "user"
              },
              id: "settings"
            }
          ],
          type: "views/update"
        }
      ]
    },
    "show.submit.setting": {
      commands: [
        {
          payload: ["showSubmitSetting", null],
          type: "actions/exec"
        }
      ]
    },
    "string.cancel": {
      commands: [
        {
          payload: ["string.cancel"],
          type: "actions/exec"
        }
      ],
      private: !0
    },
    "string.change": {
      commands: [
        {
          payload: ["string.change"],
          type: "actions/exec"
        }
      ],
      private: !0
    },
    "tools.tip.click": {
      commands: [
        {
          payload: ["tip.click"],
          type: "actions/exec"
        }
      ]
    },
    "view.leftSide.close": {
      commands: [
        {
          payload: [
            {
              changes: {
                value: !1
              },
              id: "visibility/leftSide.boolean"
            }
          ],
          type: "settings/update"
        }
      ],
      label: "leftSide : close"
    },
    "view.leftSide.open": {
      commands: [
        {
          payload: [
            {
              changes: {
                value: !0
              },
              id: "visibility/leftSide.boolean"
            }
          ],
          type: "settings/update"
        }
      ]
    },
    "view.leftSide.toggle": {
      commands: [
        {
          payload: "visibility/leftSide.boolean",
          type: "settings/toggle"
        }
      ]
    },
    "view.rightSide.close": {
      commands: [
        {
          payload: [
            {
              changes: {
                value: !1
              },
              id: "visibility/rightSide.boolean"
            }
          ],
          type: "settings/update"
        }
      ]
    },
    "view.rightSide.open": {
      commands: [
        {
          payload: [
            {
              changes: {
                value: !0
              },
              id: "visibility/rightSide.boolean"
            }
          ],
          type: "settings/update"
        }
      ]
    },
    "view.rightSide.toggle": {
      commands: [
        {
          payload: "visibility/rightSide.boolean",
          type: "settings/toggle"
        }
      ]
    },
    "view.settings.hide": {
      commands: [
        {
          payload: [
            {
              changes: {
                value: !1
              },
              id: "visibility/configurations.boolean"
            }
          ],
          type: "settings/update"
        }
      ],
      label: "view : hide settings view"
    },
    "view.settings.show": {
      commands: [
        {
          payload: [
            {
              changes: {
                value: !0
              },
              id: "visibility/configurations.boolean"
            }
          ],
          type: "settings/update"
        },
        {
          payload: [
            {
              changes: {
                value: ""
              },
              id: "findConfigurations-local"
            }
          ],
          type: "fields/update"
        },
        {
          payload: ["focus", "findConfigurations-local"],
          type: "actions/exec"
        }
      ],
      label: "view : show settings view"
    },
    "view.settings.update.hide": {
      commands: [
        {
          payload: {
            direction: "view.settings",
            force: !0,
            value: null
          },
          type: "object/setValue"
        },
        {
          payload: ["focus", "findConfigurations-local"],
          type: "actions/exec"
        }
      ],
      label: "view : hide settings update view"
    },
    "window.toggleMode": {
      commands: [
        {
          payload: "window/dark.boolean",
          type: "settings/toggle"
        }
      ],
      label: "window : toggle between (light/dark) mode"
    },
    "enum/next": {
      commands: [
        {
          type: "slot/next",
          payload: "enum-list"
        }
      ],
      label: "enum : go to next"
    },
    "enum/back": {
      commands: [
        {
          type: "slot/back",
          payload: "enum-list"
        }
      ],
      label: "enum : go to back"
    },
    "enum/submit": {
      commands: [
        {
          type: "slot/submit",
          payload: "enum-list"
        }
      ],
      label: "enum : select"
    },
    "enum/escape": {
      commands: [
        {
          payload: {
            direction: "enum.id",
            force: !0,
            value: null
          },
          type: "object/setValue"
        }
      ],
      label: "enum : escape"
    },
    "bottomSheet/escape": {
      commands: [
        {
          payload: {
            direction: "view.bottomSheet",
            force: !0,
            value: !1
          },
          type: "object/setValue"
        }
      ],
      label: "bottom sheet : escape"
    }
  }
}, { data: V0 } = M0, F0 = "commands";
function Lg(n, e = we.getState()) {
  const { [F0]: t } = e, r = [], i = t.entities[n], s = i == null ? void 0 : i.commands;
  return i != null && i.blocked ? [] : (s == null || s.forEach((o) => {
    typeof o == "string" ? r.push(...Lg(o)) : typeof o != "number" && r.push(o);
  }), r);
}
function U0(n, e = we.getState()) {
  return !!(e != null && e.commands.entities[n]);
}
async function j0(n, e = we.getState()) {
  const t = n.toString();
  Wt.inf("start invoke command : ", t), e = e || we.getState();
  const r = Lg(n, e), i = new oa();
  for (let s = 0; s < r.length; s++) {
    const o = r[s];
    typeof o == "number" ? await i.start(o) : we.dispatch(o);
  }
  Wt.succ("end invoking command : ", t);
}
const $0 = {
  id: "commandId",
  name: "commands",
  data: V0,
  default: (n, e) => {
    if (!e.commandId)
      return {};
    const [t = "", ...r] = e.commandId.split(".");
    return {
      label: `${Uc(t, "camel", "normal")} : ${r.map((s) => Uc(s, void 0, "normal")).join(" ")}`
    };
  }
}, { hooks: Mg, slice: bd, entitySelect: ix, init: sx } = Rt($0), B0 = {
  data: [
    {
      command: "dialog.goToNextButton",
      value: "arrowdown",
      when: "state.object.data.dialog.id"
    },
    {
      command: "dialog.goToNextButton",
      value: "arrowright",
      when: "state.object.data.dialog.id"
    },
    {
      command: "dialog.goToPreviousButton",
      value: "arrowleft",
      when: "state.object.data.dialog.id"
    },
    {
      command: "dialog.goToPreviousButton",
      value: "arrowup",
      when: "state.object.data.dialog.id"
    },
    {
      command: "dialog.escape",
      value: "escape",
      when: "state.object.data.dialog.id"
    },
    {
      command: "dialog.clickOnButton",
      value: "enter",
      when: "state.object.data.dialog.id"
    },
    {
      command: "dialog.clickOnButton",
      value: "space",
      when: "state.object.data.dialog.id"
    },
    {
      command: "settings.colors.show",
      value: "control+shift+c",
      when: "state.views.entities.settings.focused == 'colors'"
    },
    {
      command: "menu.next",
      when: "state.object.data.menu.id",
      value: "arrowdown"
    },
    {
      command: "menu.back",
      when: "state.object.data.menu.id",
      value: "arrowup"
    },
    {
      command: "menu.submit",
      when: "state.object.data.menu.id",
      value: "enter"
    },
    {
      command: "menu.escape",
      when: "state.object.data.menu.id",
      value: "escape"
    },
    {
      value: "tab",
      command: "input.completeWord",
      when: "state.object.data.input.focusedHasProposition",
      type: "up"
    },
    {
      value: "tab",
      command: "defaultCommand.ignore",
      when: "state.object.data.input.focusedHasProposition"
    },
    {
      value: "tab",
      command: "input.tab",
      when: "state.object.data.input.supportTab"
    },
    {
      value: "control+l",
      command: "input.selectLine",
      when: "focused"
    },
    {
      value: "shift+alt+arrowdown",
      command: "input.addLineBellow",
      when: "focused"
    },
    {
      command: "string.change",
      when: "focused && state.fields.ids.includes(focused + ':input')",
      value: "enter"
    },
    {
      command: "string.cancel",
      when: "focused && state.fields.ids.includes(focused + ':input')",
      value: "escape"
    },
    {
      command: "commands.next",
      when: "focused == 'cmds/list' || focused == 'findCommand'",
      value: "arrowdown"
    },
    {
      command: "commands.back",
      when: "focused == 'cmds/list' || focused == 'findCommand'",
      value: "arrowup"
    },
    {
      command: "commands.submit",
      when: "focused == 'cmds/list' || focused == 'findCommand'",
      value: "enter"
    },
    {
      command: "commands.open",
      when: "focused != 'findCommand' || !state.object.data.commandId",
      value: "control+shift+p"
    },
    {
      repeation: !1,
      command: "notification.openAndExpandMoreAndFocus",
      when: "focused != 'notifications'",
      value: "shift+alt+n"
    },
    {
      command: "view.leftSide.toggle",
      value: "control+b"
    },
    {
      command: "view.rightSide.toggle",
      value: "control+alt+b"
    },
    {
      command: "view.settings.show",
      when: "focused != 'findConfigurations-local' || !state.settings.entities['visibility/configurations.boolean']?.value",
      value: "control+,"
    },
    {
      repeation: !1,
      command: "settings.keyboardShortcuts.show",
      when: "state.settings.entities['visibility/configurations.boolean']?.value",
      value: "control+k"
    },
    {
      repeation: !1,
      command: "settings.user.show",
      when: "state.settings.entities['visibility/configurations.boolean']?.value",
      value: "control+u"
    },
    {
      repeation: !1,
      command: "settings.icons.show",
      when: "state.settings.entities['visibility/configurations.boolean']?.value",
      value: "control+i"
    },
    {
      repeation: !1,
      command: "keyboardShortcuts.submitCurrentKeyPanding",
      value: "enter",
      when: "['findConfigurations-local','keyboardShortcuts'].includes(focused) && state.views.entities.settings.focused == 'keyboardShortcuts'"
    },
    {
      command: "keyboard/update",
      value: "f2",
      when: "['findConfigurations-local','keyboardShortcuts'].includes(focused) && state.views.entities.settings.focused == 'keyboardShortcuts'"
    },
    {
      command: "keyboardShortcuts.focusNextKeyPanding",
      value: "arrowdown",
      when: "['findConfigurations-local','keyboardShortcuts'].includes(focused) && state.views.entities.settings.focused == 'keyboardShortcuts'"
    },
    {
      command: "keyboardShortcuts.focusPreviousKeyPanding",
      value: "arrowup",
      when: "['findConfigurations-local','keyboardShortcuts'].includes(focused) && state.views.entities.settings.focused == 'keyboardShortcuts'"
    },
    {
      value: "arrowdown",
      command: "colors-list-next",
      when: "['findConfigurations-local','color-list'].includes(focused) && state.views.entities.settings.focused == 'colors'"
    },
    {
      value: "arrowup",
      command: "colors-list-back",
      when: "['findConfigurations-local','color-list'].includes(focused) && state.views.entities.settings.focused == 'colors'"
    },
    {
      value: "enter",
      command: "colors-list-submit",
      when: "['findConfigurations-local','color-list'].includes(focused) && state.views.entities.settings.focused == 'colors'"
    },
    {
      command: "configurations.next",
      value: "arrowdown",
      when: "focused == 'findConfigurations-local' && state.views.entities.settings.focused == 'user'"
    },
    {
      command: "configurations.back",
      value: "arrowup",
      when: "focused == 'findConfigurations-local' && state.views.entities.settings.focused == 'user'"
    },
    {
      repeation: !1,
      command: "configurations.submit",
      value: "enter",
      when: "focused == 'findConfigurations-local' && state.views.entities.settings.focused == 'user'"
    },
    {
      command: "notification.submitCurrent",
      when: "focused == 'notifications'",
      value: "enter"
    },
    {
      command: "notification.focusNext",
      when: "focused == 'notifications'",
      value: "arrowdown"
    },
    {
      command: "notification.focusPrevious",
      when: "focused == 'notifications'",
      value: "arrowup"
    },
    {
      command: "notification.deleteFocus",
      when: "focused == 'notifications'",
      value: "delete"
    },
    {
      command: "notifays.toggleExpandNotifay",
      when: "focused == 'notifications'",
      value: "space"
    },
    {
      command: "enum/next",
      value: "arrowdown",
      when: "state.object.data.enum.id"
    },
    {
      command: "enum/next",
      value: "arrowright",
      when: "state.object.data.enum.id"
    },
    {
      command: "enum/back",
      value: "arrowleft",
      when: "state.object.data.enum.id"
    },
    {
      command: "enum/back",
      value: "arrowup",
      when: "state.object.data.enum.id"
    },
    {
      repeation: !1,
      command: "enum/submit",
      value: "space",
      when: "!state.object.data.enumIsLoading && state.object.data.enum.id"
    },
    {
      repeation: !1,
      command: "enum/submit",
      value: "enter",
      when: "!state.object.data.enumIsLoading && state.object.data.enum.id"
    },
    {
      repeation: !1,
      command: "enum/escape",
      value: "escape",
      when: "state.object.data.enum.id"
    },
    {
      repeation: !1,
      command: "show.submit.setting",
      value: "f2",
      when: "focused == 'findConfigurations-local'"
    },
    {
      command: "commands.close",
      when: "state.object.data.commandId",
      value: "escape"
    },
    {
      command: "view.settings.update.hide",
      when: "state.object.data.view.settings",
      value: "escape"
    },
    {
      command: "view.settings.hide",
      when: "state.settings.entities['visibility/configurations.boolean']?.value",
      value: "escape"
    },
    {
      repeation: !1,
      command: "notification.closeAndExpandLess",
      when: "state.settings.entities['visibility/notifays.boolean']?.value",
      value: "escape"
    },
    {
      command: "configurations.settings.layouts.next",
      when: "focused == 'settings.layouts'",
      value: "arrowright"
    },
    {
      command: "configurations.settings.layouts.previous",
      when: "focused == 'settings.layouts'",
      value: "arrowleft"
    },
    {
      command: "configurations.settings.layout.submit",
      when: "focused == 'settings.layouts'",
      value: "enter"
    },
    {
      when: "focused == 'settings.tree.view'",
      value: "space",
      command: "settings.tree.toggleExpand"
    },
    {
      when: "focused == 'settings.tree.view'",
      value: "arrowright",
      command: "settings.tree.expandMore"
    },
    {
      when: "focused == 'settings.tree.view'",
      value: "arrowleft",
      command: "settings.tree.expandLess"
    },
    {
      command: "header.toggle",
      value: "control+h"
    },
    {
      command: "settings.icons.next",
      when: "['findConfigurations-local','icons-list'].includes(focused) && state.views.entities.settings.focused == 'icons'",
      value: "arrowdown"
    },
    {
      command: "settings.icons.back",
      when: "['findConfigurations-local','icons-list'].includes(focused) && state.views.entities.settings.focused == 'icons'",
      value: "arrowup"
    },
    {
      command: "settings.icons.submit",
      when: "['findConfigurations-local','icons-list'].includes(focused) && state.views.entities.settings.focused == 'icons'",
      value: "enter"
    },
    {
      command: "camera-take",
      value: "enter",
      when: "state.object.data?.camera?.id"
    },
    {
      command: "window.toggleMode",
      value: "control+d"
    },
    {
      command: "bottomSheet/escape",
      value: "escape",
      when: "state.object.data.view['bottomSheet']",
      repeation: !1
    }
  ]
}, { data: q0 } = B0, K0 = {
  name: "keys",
  id: "keyId",
  data: Object.entries(q0).map(([n, e]) => ({
    keyId: n,
    ...e
  })),
  default: () => ({
    repeation: !0,
    type: "down",
    only: !0,
    preventDefault: !0,
    keyId: `key_${ft()}`
  })
}, { init: z0, hooks: Ta, slice: Id } = Rt(K0), co = "_" + ft().replaceAll(/[^0-9A-Za-z$_]+/gi, "_");
function H0(n) {
  return Function(`
    return ({ state , focused })=> {
      ${co}_window = window;
      window = null;
      let ${co} = ${n};
      window = ${co}_window;
      return ${co}
    }
  `)();
}
function ox() {
  z0();
  const n = Ta.getAll(), e = Ea("commands.isBlocked"), t = re.useMemo(() => e ? [] : n.filter(({ value: r, command: i }) => r && i).map((r) => {
    const { value: i = "", when: s, repeation: o = !0, type: c = "down", only: u = !0, preventDefault: l = !0 } = r, f = new Jv(i);
    return {
      fn: async (y) => {
        if (!o && y.repeat || !f.test(y))
          return;
        const T = we.getState();
        if (s) {
          const S = Xv(), C = H0(s);
          try {
            if (!C({ state: T, focused: S }))
              return;
          } catch {
            return;
          }
        }
        u && y.stopImmediatePropagation(), l && y.preventDefault(), Wt.inf(`KEYID       = ${r.keyId}`), Wt.inf(`RUN         = ${r.command || "no command run"}`), Wt.inf(`COMB        = (${r.value})`), Wt.inf(`WHEN        = ${r.when || "no provide"}`), r.command && U0(r.command, T) ? Wt.succ("EXISTS") : Wt.warn("COMMAND NOT FOUND"), j0(r.command, T);
      },
      type: c
    };
  }), [n, e]);
  KN(
    () => (t.forEach(({ fn: r, type: i }) => {
      document.addEventListener(`key${i}`, r);
    }), () => {
      t.forEach(({ fn: r, type: i }) => {
        document.removeEventListener(`key${i}`, r);
      });
    }),
    [t],
    1e3
  );
}
const Vg = "keyboard", G0 = {
  Shift: !1,
  Alt: !1,
  Control: !1,
  SymbolLock: !1,
  AltGraph: !1,
  CapsLock: !1,
  Fn: !1,
  FnLock: !1,
  Hyper: !1,
  Meta: !1,
  NumLock: !1,
  Super: !1,
  ScrollLock: !1,
  Symbol: !1,
  Key: void 0
}, W0 = (n) => n[Vg], yu = wa({
  name: Vg,
  initialState: G0,
  reducers: {
    // actions
    setModifier(n, { payload: e }) {
      try {
        n[e.modifierName] = e.value;
      } catch {
      }
    }
  }
});
function ax(n) {
  return Fe(W0, (t, r) => Yn(t[n], r[n]))[n];
}
function cx(n, e) {
  we.dispatch(yu.actions.setModifier({ modifierName: n, value: e }));
}
const Q0 = {
  data: {
    appPassword: {},
    colorDarkValue: {},
    colorDefaultValue: {},
    colorLightValue: {},
    colorName: {},
    findCommand: {},
    "findConfigurations-local": {},
    number: {},
    "password/def": {},
    "setting/number": {},
    updateConfigSetting: {},
    "window/password": {}
  }
}, { data: Y0 } = Q0, J0 = {
  name: "fields",
  id: "fieldId",
  default: () => ({
    selection: {
      direction: "forward",
      end: 0,
      start: 0
    },
    value: ""
  }),
  data: Y0
}, { entity: ux, slice: Sd, hooks: Bt, entitySelect: lx, init: hx } = Rt(J0), X0 = {
  data: {
    autoCompleteInput: {
      default: "#888A"
    },
    "bg.selection": {
      dark: "#fff",
      light: "#000"
    },
    "bottom-sheeet.background": {},
    "black.opacity": {
      dark: "#0006",
      light: "#0003"
    },
    borders: {
      dark: "#333",
      light: "#bebebe"
    },
    "checkbox.background": {
      default: "#8884"
    },
    "checkbox.false": {
      default: "#F33"
    },
    "checkbox.true": {
      default: "#393"
    },
    error: {
      default: "#F33"
    },
    "error.border": {
      default: "#733"
    },
    "error.content": {
      default: "white"
    },
    "error.text": {
      default: "#F33"
    },
    "field.background": {
      default: "rgba(160 160 160 / 0.2)"
    },
    "focus.text": {
      default: "#F33"
    },
    "gray.opacity": {
      default: "#8884"
    },
    "gray.opacity.2": {
      default: "#8887"
    },
    "gray.opacity.toLight": {
      default: "#eee4"
    },
    htmlContentHover: {
      default: "#27F5"
    },
    "info.text": {
      default: "#37F"
    },
    locationIconSetup: {
      default: "yellow"
    },
    "log.error.color": {
      default: "#F33"
    },
    "log.info.color": {
      default: "#27F"
    },
    "log.secuess.color": {
      default: "#393"
    },
    "log.warning.color": {
      default: "rgb(227 138 32)"
    },
    "notifay.error": {
      default: "#e61a1a"
    },
    "notifay.error.text": {
      default: "#fff"
    },
    "notifay.info": {
      default: "#2e7aec"
    },
    "notifay.info.text": {
      default: "#fff"
    },
    "notifay.success": {
      default: "#2b8817"
    },
    "notifay.success.text": {
      default: "#fff"
    },
    "notifay.warning": {
      default: "#e7a428"
    },
    "notifay.warning.text": {
      default: "#fff"
    },
    primary: {
      dark: "#0078d4",
      light: "#46A"
    },
    "primary.background": {
      dark: "#111",
      light: "#ececec"
    },
    "primary.content": {
      dark: "#fff",
      light: "#fff"
    },
    "primary.hover.background": {
      dark: "#222",
      light: "#e1e1e1"
    },
    secondary: {
      dark: "#043853",
      light: "#0d8c9c"
    },
    "secondary.background": {
      dark: "#171717",
      light: "#e1e1e1"
    },
    "secondary.content": {
      default: "#fff"
    },
    selectedTextBackgroundBlured: {
      default: "#8885"
    },
    selectedTextBackgroundFocused: {
      default: "#26F6"
    },
    selectedTextColorBlur: {
      default: "#222"
    },
    selectedTextColorFocused: {
      default: "#fff"
    },
    "shadow.background.from": {
      default: "transparent"
    },
    "shadow.background.to": {
      dark: "#000",
      light: "#999"
    },
    "shadow.color": {
      dark: "#0008",
      light: "#4444"
    },
    "starts.color": {
      dark: "#FA0",
      light: "#E90"
    },
    "status.content": {
      default: "white"
    },
    "submit.background": {
      default: "#9994"
    },
    "submit.color": {},
    "success.text": {
      default: "#14B85B"
    },
    "text.color": {
      dark: "#ccc",
      light: "#333"
    },
    "text.selection": {
      dark: "#000",
      light: "#fff"
    },
    "toast.background": {
      dark: "#333",
      light: "#eee"
    },
    transparent: {
      default: "transparent"
    },
    "warning.text": {
      default: "rgb(227 138 32)"
    },
    opacity: {
      dark: "#fff2",
      light: "#0002"
    }
  }
}, { data: Z0 } = X0, eS = {
  id: "colorId",
  name: "color",
  data: Z0
}, { hooks: ml, slice: Ad, init: fx, select: dx, entity: px, entitySelect: mx } = Rt(eS), tS = {
  data: {}
}, { data: nS } = tS, rS = {
  id: "linkId",
  name: "cahser",
  data: nS,
  default() {
    return {
      status: "idle"
    };
  }
}, { init: gx, hooks: yx, slice: Rd } = Rt(rS), To = {
  name: "actions",
  id: "actionId",
  data: {},
  default() {
    return {
      status: "ready",
      args: null
    };
  },
  actions: {
    exec(n, { payload: e }) {
      const [t, r] = e, i = n.entities[t];
      i && (i.args = r, i.status = "idle");
    }
  }
}, { entity: _x, slice: Cd, hooks: Zt, entitySelect: vx } = Rt(To);
function iS(n) {
  const e = Zt.getOne(n);
  re.useEffect(() => {
    e || Zt.upsert([
      {
        actionId: n,
        status: "ready",
        args: null
      }
    ]);
  }, [e]);
}
function wx(n, e, t = []) {
  re.useEffect(() => () => {
    Zt.remove([n]);
  }, []), iS(n);
  const r = Zt.getOne(n);
  return di(async () => {
    if (!r)
      return;
    const { status: i } = r;
    if (i == "idle") {
      const { args: s } = r;
      Zt.setOneFeild(n, "status", "loading");
      try {
        let o = null, c = null;
        o = e(s), o instanceof Promise ? c = await o : c = o, Zt.setOneFeild(n, "output", c), Zt.setOneFeild(n, "status", "success");
      } catch (o) {
        Wt.err(o), Zt.setOneFeild(n, "output", null), Zt.setOneFeild(n, "status", "error");
      }
      Zt.setOneFeild(n, "args", null);
    }
  }, [r, ...t]), r;
}
function Ex(n, e) {
  return new Promise((t, r) => {
    we.dispatch({ type: "actions/exec", payload: [n, e] });
    const i = Ku(`${To.name}.entities.` + n + ".status", "success", (o) => {
      s(), t({
        output: o[To.name].entities[n].output,
        state: o
      });
    }), s = Ku(`${To.name}.entities.` + n + ".status", "error", (o) => {
      i(), r(o);
    });
  });
}
const we = bI({
  reducer: {
    // normal reducers
    [yu.name]: yu.reducer,
    [Er.name]: Er.reducer,
    [ii.name]: ii.reducer,
    // system space
    [bd.name]: bd.reducer,
    [Id.name]: Id.reducer,
    [wd.name]: wd.reducer,
    [dd.name]: dd.reducer,
    [vd.name]: vd.reducer,
    [yd.name]: yd.reducer,
    [_d.name]: _d.reducer,
    [Sd.name]: Sd.reducer,
    [Cd.name]: Cd.reducer,
    [Ad.name]: Ad.reducer,
    [md.name]: md.reducer,
    [Ed.name]: Ed.reducer,
    [Td.name]: Td.reducer,
    [Rd.name]: Rd.reducer,
    [gd.name]: gd.reducer
    /* main database */
  }
}), Hr = class Hr {
  constructor(e, t = null) {
    if (this.name = e, this.parent = t, this.name.includes(".") || Hr.allTemps[this.name])
      throw `temp name ${this.name} exists before`;
    Hr.allTemps[this.name] = this;
  }
  getTemp(e) {
    return Ea([this.name, e].join("."));
  }
  getTempFromStore(e, t) {
    return pl([this.name, e].join("."), t);
  }
  setTemp(e, t) {
    Ft([this.name, e].join("."), t);
  }
  useTemp(e) {
    return k0([this.name, e].join("."));
  }
  get childsTemps() {
    return Object.values(Hr.allTemps).filter(({ parent: e }) => e == this);
  }
};
gn(Hr, "allTemps", {});
let Ze = Hr;
const Tx = new Ze("path"), bx = new Ze("window"), Jn = new Ze("view"), Ix = new Ze("toast"), Pd = new Ze("dialog"), Sx = new Ze("loading"), kd = new Ze("progress"), Ax = new Ze("password"), $r = new Ze("menu"), Rx = new Ze("news"), Cx = new Ze("visibility"), Px = new Ze("ipinfo"), kx = new Ze("submited"), ar = new Ze("camera"), sS = new Ze("recaptcha"), $o = new Ze("iframe"), Ox = new Ze("enum");
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Fg = function(n) {
  const e = [];
  let t = 0;
  for (let r = 0; r < n.length; r++) {
    let i = n.charCodeAt(r);
    i < 128 ? e[t++] = i : i < 2048 ? (e[t++] = i >> 6 | 192, e[t++] = i & 63 | 128) : (i & 64512) === 55296 && r + 1 < n.length && (n.charCodeAt(r + 1) & 64512) === 56320 ? (i = 65536 + ((i & 1023) << 10) + (n.charCodeAt(++r) & 1023), e[t++] = i >> 18 | 240, e[t++] = i >> 12 & 63 | 128, e[t++] = i >> 6 & 63 | 128, e[t++] = i & 63 | 128) : (e[t++] = i >> 12 | 224, e[t++] = i >> 6 & 63 | 128, e[t++] = i & 63 | 128);
  }
  return e;
}, oS = function(n) {
  const e = [];
  let t = 0, r = 0;
  for (; t < n.length; ) {
    const i = n[t++];
    if (i < 128)
      e[r++] = String.fromCharCode(i);
    else if (i > 191 && i < 224) {
      const s = n[t++];
      e[r++] = String.fromCharCode((i & 31) << 6 | s & 63);
    } else if (i > 239 && i < 365) {
      const s = n[t++], o = n[t++], c = n[t++], u = ((i & 7) << 18 | (s & 63) << 12 | (o & 63) << 6 | c & 63) - 65536;
      e[r++] = String.fromCharCode(55296 + (u >> 10)), e[r++] = String.fromCharCode(56320 + (u & 1023));
    } else {
      const s = n[t++], o = n[t++];
      e[r++] = String.fromCharCode((i & 15) << 12 | (s & 63) << 6 | o & 63);
    }
  }
  return e.join("");
}, Ug = {
  /**
   * Maps bytes to characters.
   */
  byteToCharMap_: null,
  /**
   * Maps characters to bytes.
   */
  charToByteMap_: null,
  /**
   * Maps bytes to websafe characters.
   * @private
   */
  byteToCharMapWebSafe_: null,
  /**
   * Maps websafe characters to bytes.
   * @private
   */
  charToByteMapWebSafe_: null,
  /**
   * Our default alphabet, shared between
   * ENCODED_VALS and ENCODED_VALS_WEBSAFE
   */
  ENCODED_VALS_BASE: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
  /**
   * Our default alphabet. Value 64 (=) is special; it means "nothing."
   */
  get ENCODED_VALS() {
    return this.ENCODED_VALS_BASE + "+/=";
  },
  /**
   * Our websafe alphabet.
   */
  get ENCODED_VALS_WEBSAFE() {
    return this.ENCODED_VALS_BASE + "-_.";
  },
  /**
   * Whether this browser supports the atob and btoa functions. This extension
   * started at Mozilla but is now implemented by many browsers. We use the
   * ASSUME_* variables to avoid pulling in the full useragent detection library
   * but still allowing the standard per-browser compilations.
   *
   */
  HAS_NATIVE_SUPPORT: typeof atob == "function",
  /**
   * Base64-encode an array of bytes.
   *
   * @param input An array of bytes (numbers with
   *     value in [0, 255]) to encode.
   * @param webSafe Boolean indicating we should use the
   *     alternative alphabet.
   * @return The base64 encoded string.
   */
  encodeByteArray(n, e) {
    if (!Array.isArray(n))
      throw Error("encodeByteArray takes an array as a parameter");
    this.init_();
    const t = e ? this.byteToCharMapWebSafe_ : this.byteToCharMap_, r = [];
    for (let i = 0; i < n.length; i += 3) {
      const s = n[i], o = i + 1 < n.length, c = o ? n[i + 1] : 0, u = i + 2 < n.length, l = u ? n[i + 2] : 0, f = s >> 2, h = (s & 3) << 4 | c >> 4;
      let y = (c & 15) << 2 | l >> 6, T = l & 63;
      u || (T = 64, o || (y = 64)), r.push(t[f], t[h], t[y], t[T]);
    }
    return r.join("");
  },
  /**
   * Base64-encode a string.
   *
   * @param input A string to encode.
   * @param webSafe If true, we should use the
   *     alternative alphabet.
   * @return The base64 encoded string.
   */
  encodeString(n, e) {
    return this.HAS_NATIVE_SUPPORT && !e ? btoa(n) : this.encodeByteArray(Fg(n), e);
  },
  /**
   * Base64-decode a string.
   *
   * @param input to decode.
   * @param webSafe True if we should use the
   *     alternative alphabet.
   * @return string representing the decoded value.
   */
  decodeString(n, e) {
    return this.HAS_NATIVE_SUPPORT && !e ? atob(n) : oS(this.decodeStringToByteArray(n, e));
  },
  /**
   * Base64-decode a string.
   *
   * In base-64 decoding, groups of four characters are converted into three
   * bytes.  If the encoder did not apply padding, the input length may not
   * be a multiple of 4.
   *
   * In this case, the last group will have fewer than 4 characters, and
   * padding will be inferred.  If the group has one or two characters, it decodes
   * to one byte.  If the group has three characters, it decodes to two bytes.
   *
   * @param input Input to decode.
   * @param webSafe True if we should use the web-safe alphabet.
   * @return bytes representing the decoded value.
   */
  decodeStringToByteArray(n, e) {
    this.init_();
    const t = e ? this.charToByteMapWebSafe_ : this.charToByteMap_, r = [];
    for (let i = 0; i < n.length; ) {
      const s = t[n.charAt(i++)], c = i < n.length ? t[n.charAt(i)] : 0;
      ++i;
      const l = i < n.length ? t[n.charAt(i)] : 64;
      ++i;
      const h = i < n.length ? t[n.charAt(i)] : 64;
      if (++i, s == null || c == null || l == null || h == null)
        throw new aS();
      const y = s << 2 | c >> 4;
      if (r.push(y), l !== 64) {
        const T = c << 4 & 240 | l >> 2;
        if (r.push(T), h !== 64) {
          const S = l << 6 & 192 | h;
          r.push(S);
        }
      }
    }
    return r;
  },
  /**
   * Lazy static initialization function. Called before
   * accessing any of the static map variables.
   * @private
   */
  init_() {
    if (!this.byteToCharMap_) {
      this.byteToCharMap_ = {}, this.charToByteMap_ = {}, this.byteToCharMapWebSafe_ = {}, this.charToByteMapWebSafe_ = {};
      for (let n = 0; n < this.ENCODED_VALS.length; n++)
        this.byteToCharMap_[n] = this.ENCODED_VALS.charAt(n), this.charToByteMap_[this.byteToCharMap_[n]] = n, this.byteToCharMapWebSafe_[n] = this.ENCODED_VALS_WEBSAFE.charAt(n), this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[n]] = n, n >= this.ENCODED_VALS_BASE.length && (this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(n)] = n, this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(n)] = n);
    }
  }
};
class aS extends Error {
  constructor() {
    super(...arguments), this.name = "DecodeBase64StringError";
  }
}
const cS = function(n) {
  const e = Fg(n);
  return Ug.encodeByteArray(e, !0);
}, Bo = function(n) {
  return cS(n).replace(/\./g, "");
}, jg = function(n) {
  try {
    return Ug.decodeString(n, !0);
  } catch (e) {
    console.error("base64Decode failed: ", e);
  }
  return null;
};
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function uS() {
  if (typeof self < "u")
    return self;
  if (typeof window < "u")
    return window;
  if (typeof globalThis < "u")
    return globalThis;
  throw new Error("Unable to locate global object.");
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const lS = () => uS().__FIREBASE_DEFAULTS__, hS = () => {
  if (typeof process > "u" || typeof process.env > "u")
    return;
  const n = process.env.__FIREBASE_DEFAULTS__;
  if (n)
    return JSON.parse(n);
}, fS = () => {
  if (typeof document > "u")
    return;
  let n;
  try {
    n = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);
  } catch {
    return;
  }
  const e = n && jg(n[1]);
  return e && JSON.parse(e);
}, ba = () => {
  try {
    return lS() || hS() || fS();
  } catch (n) {
    console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${n}`);
    return;
  }
}, $g = (n) => {
  var e, t;
  return (t = (e = ba()) === null || e === void 0 ? void 0 : e.emulatorHosts) === null || t === void 0 ? void 0 : t[n];
}, Bg = (n) => {
  const e = $g(n);
  if (!e)
    return;
  const t = e.lastIndexOf(":");
  if (t <= 0 || t + 1 === e.length)
    throw new Error(`Invalid host ${e} with no separate hostname and port!`);
  const r = parseInt(e.substring(t + 1), 10);
  return e[0] === "[" ? [e.substring(1, t - 1), r] : [e.substring(0, t), r];
}, qg = () => {
  var n;
  return (n = ba()) === null || n === void 0 ? void 0 : n.config;
}, Kg = (n) => {
  var e;
  return (e = ba()) === null || e === void 0 ? void 0 : e[`_${n}`];
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class dS {
  constructor() {
    this.reject = () => {
    }, this.resolve = () => {
    }, this.promise = new Promise((e, t) => {
      this.resolve = e, this.reject = t;
    });
  }
  /**
   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
   * and returns a node-style callback which will resolve or reject the Deferred's promise.
   */
  wrapCallback(e) {
    return (t, r) => {
      t ? this.reject(t) : this.resolve(r), typeof e == "function" && (this.promise.catch(() => {
      }), e.length === 1 ? e(t) : e(t, r));
    };
  }
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function zg(n, e) {
  if (n.uid)
    throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');
  const t = {
    alg: "none",
    type: "JWT"
  }, r = e || "demo-project", i = n.iat || 0, s = n.sub || n.user_id;
  if (!s)
    throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");
  const o = Object.assign({
    // Set all required fields to decent defaults
    iss: `https://securetoken.google.com/${r}`,
    aud: r,
    iat: i,
    exp: i + 3600,
    auth_time: i,
    sub: s,
    user_id: s,
    firebase: {
      sign_in_provider: "custom",
      identities: {}
    }
  }, n);
  return [
    Bo(JSON.stringify(t)),
    Bo(JSON.stringify(o)),
    ""
  ].join(".");
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function lt() {
  return typeof navigator < "u" && typeof navigator.userAgent == "string" ? navigator.userAgent : "";
}
function pS() {
  return typeof window < "u" && // @ts-ignore Setting up an broadly applicable index signature for Window
  // just to deal with this case would probably be a bad idea.
  !!(window.cordova || window.phonegap || window.PhoneGap) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(lt());
}
function mS() {
  var n;
  const e = (n = ba()) === null || n === void 0 ? void 0 : n.forceEnvironment;
  if (e === "node")
    return !0;
  if (e === "browser")
    return !1;
  try {
    return Object.prototype.toString.call(globalThis.process) === "[object process]";
  } catch {
    return !1;
  }
}
function gS() {
  const n = typeof chrome == "object" ? chrome.runtime : typeof browser == "object" ? browser.runtime : void 0;
  return typeof n == "object" && n.id !== void 0;
}
function yS() {
  return typeof navigator == "object" && navigator.product === "ReactNative";
}
function _S() {
  const n = lt();
  return n.indexOf("MSIE ") >= 0 || n.indexOf("Trident/") >= 0;
}
function vS() {
  return !mS() && !!navigator.userAgent && navigator.userAgent.includes("Safari") && !navigator.userAgent.includes("Chrome");
}
function wS() {
  try {
    return typeof indexedDB == "object";
  } catch {
    return !1;
  }
}
function ES() {
  return new Promise((n, e) => {
    try {
      let t = !0;
      const r = "validate-browser-context-for-indexeddb-analytics-module", i = self.indexedDB.open(r);
      i.onsuccess = () => {
        i.result.close(), t || self.indexedDB.deleteDatabase(r), n(!0);
      }, i.onupgradeneeded = () => {
        t = !1;
      }, i.onerror = () => {
        var s;
        e(((s = i.error) === null || s === void 0 ? void 0 : s.message) || "");
      };
    } catch (t) {
      e(t);
    }
  });
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const TS = "FirebaseError";
class ln extends Error {
  constructor(e, t, r) {
    super(t), this.code = e, this.customData = r, this.name = TS, Object.setPrototypeOf(this, ln.prototype), Error.captureStackTrace && Error.captureStackTrace(this, Is.prototype.create);
  }
}
class Is {
  constructor(e, t, r) {
    this.service = e, this.serviceName = t, this.errors = r;
  }
  create(e, ...t) {
    const r = t[0] || {}, i = `${this.service}/${e}`, s = this.errors[e], o = s ? bS(s, r) : "Error", c = `${this.serviceName}: ${o} (${i}).`;
    return new ln(i, c, r);
  }
}
function bS(n, e) {
  return n.replace(IS, (t, r) => {
    const i = e[r];
    return i != null ? String(i) : `<${r}?>`;
  });
}
const IS = /\{\$([^}]+)}/g;
function SS(n) {
  for (const e in n)
    if (Object.prototype.hasOwnProperty.call(n, e))
      return !1;
  return !0;
}
function qo(n, e) {
  if (n === e)
    return !0;
  const t = Object.keys(n), r = Object.keys(e);
  for (const i of t) {
    if (!r.includes(i))
      return !1;
    const s = n[i], o = e[i];
    if (Od(s) && Od(o)) {
      if (!qo(s, o))
        return !1;
    } else if (s !== o)
      return !1;
  }
  for (const i of r)
    if (!t.includes(i))
      return !1;
  return !0;
}
function Od(n) {
  return n !== null && typeof n == "object";
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function mi(n) {
  const e = [];
  for (const [t, r] of Object.entries(n))
    Array.isArray(r) ? r.forEach((i) => {
      e.push(encodeURIComponent(t) + "=" + encodeURIComponent(i));
    }) : e.push(encodeURIComponent(t) + "=" + encodeURIComponent(r));
  return e.length ? "&" + e.join("&") : "";
}
function Ki(n) {
  const e = {};
  return n.replace(/^\?/, "").split("&").forEach((r) => {
    if (r) {
      const [i, s] = r.split("=");
      e[decodeURIComponent(i)] = decodeURIComponent(s);
    }
  }), e;
}
function zi(n) {
  const e = n.indexOf("?");
  if (!e)
    return "";
  const t = n.indexOf("#", e);
  return n.substring(e, t > 0 ? t : void 0);
}
function AS(n, e) {
  const t = new RS(n, e);
  return t.subscribe.bind(t);
}
class RS {
  /**
   * @param executor Function which can make calls to a single Observer
   *     as a proxy.
   * @param onNoObservers Callback when count of Observers goes to zero.
   */
  constructor(e, t) {
    this.observers = [], this.unsubscribes = [], this.observerCount = 0, this.task = Promise.resolve(), this.finalized = !1, this.onNoObservers = t, this.task.then(() => {
      e(this);
    }).catch((r) => {
      this.error(r);
    });
  }
  next(e) {
    this.forEachObserver((t) => {
      t.next(e);
    });
  }
  error(e) {
    this.forEachObserver((t) => {
      t.error(e);
    }), this.close(e);
  }
  complete() {
    this.forEachObserver((e) => {
      e.complete();
    }), this.close();
  }
  /**
   * Subscribe function that can be used to add an Observer to the fan-out list.
   *
   * - We require that no event is sent to a subscriber sychronously to their
   *   call to subscribe().
   */
  subscribe(e, t, r) {
    let i;
    if (e === void 0 && t === void 0 && r === void 0)
      throw new Error("Missing Observer.");
    CS(e, [
      "next",
      "error",
      "complete"
    ]) ? i = e : i = {
      next: e,
      error: t,
      complete: r
    }, i.next === void 0 && (i.next = Sc), i.error === void 0 && (i.error = Sc), i.complete === void 0 && (i.complete = Sc);
    const s = this.unsubscribeOne.bind(this, this.observers.length);
    return this.finalized && this.task.then(() => {
      try {
        this.finalError ? i.error(this.finalError) : i.complete();
      } catch {
      }
    }), this.observers.push(i), s;
  }
  // Unsubscribe is synchronous - we guarantee that no events are sent to
  // any unsubscribed Observer.
  unsubscribeOne(e) {
    this.observers === void 0 || this.observers[e] === void 0 || (delete this.observers[e], this.observerCount -= 1, this.observerCount === 0 && this.onNoObservers !== void 0 && this.onNoObservers(this));
  }
  forEachObserver(e) {
    if (!this.finalized)
      for (let t = 0; t < this.observers.length; t++)
        this.sendOne(t, e);
  }
  // Call the Observer via one of it's callback function. We are careful to
  // confirm that the observe has not been unsubscribed since this asynchronous
  // function had been queued.
  sendOne(e, t) {
    this.task.then(() => {
      if (this.observers !== void 0 && this.observers[e] !== void 0)
        try {
          t(this.observers[e]);
        } catch (r) {
          typeof console < "u" && console.error && console.error(r);
        }
    });
  }
  close(e) {
    this.finalized || (this.finalized = !0, e !== void 0 && (this.finalError = e), this.task.then(() => {
      this.observers = void 0, this.onNoObservers = void 0;
    }));
  }
}
function CS(n, e) {
  if (typeof n != "object" || n === null)
    return !1;
  for (const t of e)
    if (t in n && typeof n[t] == "function")
      return !0;
  return !1;
}
function Sc() {
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Qe(n) {
  return n && n._delegate ? n._delegate : n;
}
class zn {
  /**
   *
   * @param name The public service name, e.g. app, auth, firestore, database
   * @param instanceFactory Service factory responsible for creating the public interface
   * @param type whether the service provided by the component is public or private
   */
  constructor(e, t, r) {
    this.name = e, this.instanceFactory = t, this.type = r, this.multipleInstances = !1, this.serviceProps = {}, this.instantiationMode = "LAZY", this.onInstanceCreated = null;
  }
  setInstantiationMode(e) {
    return this.instantiationMode = e, this;
  }
  setMultipleInstances(e) {
    return this.multipleInstances = e, this;
  }
  setServiceProps(e) {
    return this.serviceProps = e, this;
  }
  setInstanceCreatedCallback(e) {
    return this.onInstanceCreated = e, this;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const sr = "[DEFAULT]";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class PS {
  constructor(e, t) {
    this.name = e, this.container = t, this.component = null, this.instances = /* @__PURE__ */ new Map(), this.instancesDeferred = /* @__PURE__ */ new Map(), this.instancesOptions = /* @__PURE__ */ new Map(), this.onInitCallbacks = /* @__PURE__ */ new Map();
  }
  /**
   * @param identifier A provider can provide mulitple instances of a service
   * if this.component.multipleInstances is true.
   */
  get(e) {
    const t = this.normalizeInstanceIdentifier(e);
    if (!this.instancesDeferred.has(t)) {
      const r = new dS();
      if (this.instancesDeferred.set(t, r), this.isInitialized(t) || this.shouldAutoInitialize())
        try {
          const i = this.getOrInitializeService({
            instanceIdentifier: t
          });
          i && r.resolve(i);
        } catch {
        }
    }
    return this.instancesDeferred.get(t).promise;
  }
  getImmediate(e) {
    var t;
    const r = this.normalizeInstanceIdentifier(e == null ? void 0 : e.identifier), i = (t = e == null ? void 0 : e.optional) !== null && t !== void 0 ? t : !1;
    if (this.isInitialized(r) || this.shouldAutoInitialize())
      try {
        return this.getOrInitializeService({
          instanceIdentifier: r
        });
      } catch (s) {
        if (i)
          return null;
        throw s;
      }
    else {
      if (i)
        return null;
      throw Error(`Service ${this.name} is not available`);
    }
  }
  getComponent() {
    return this.component;
  }
  setComponent(e) {
    if (e.name !== this.name)
      throw Error(`Mismatching Component ${e.name} for Provider ${this.name}.`);
    if (this.component)
      throw Error(`Component for ${this.name} has already been provided`);
    if (this.component = e, !!this.shouldAutoInitialize()) {
      if (OS(e))
        try {
          this.getOrInitializeService({ instanceIdentifier: sr });
        } catch {
        }
      for (const [t, r] of this.instancesDeferred.entries()) {
        const i = this.normalizeInstanceIdentifier(t);
        try {
          const s = this.getOrInitializeService({
            instanceIdentifier: i
          });
          r.resolve(s);
        } catch {
        }
      }
    }
  }
  clearInstance(e = sr) {
    this.instancesDeferred.delete(e), this.instancesOptions.delete(e), this.instances.delete(e);
  }
  // app.delete() will call this method on every provider to delete the services
  // TODO: should we mark the provider as deleted?
  async delete() {
    const e = Array.from(this.instances.values());
    await Promise.all([
      ...e.filter((t) => "INTERNAL" in t).map((t) => t.INTERNAL.delete()),
      ...e.filter((t) => "_delete" in t).map((t) => t._delete())
    ]);
  }
  isComponentSet() {
    return this.component != null;
  }
  isInitialized(e = sr) {
    return this.instances.has(e);
  }
  getOptions(e = sr) {
    return this.instancesOptions.get(e) || {};
  }
  initialize(e = {}) {
    const { options: t = {} } = e, r = this.normalizeInstanceIdentifier(e.instanceIdentifier);
    if (this.isInitialized(r))
      throw Error(`${this.name}(${r}) has already been initialized`);
    if (!this.isComponentSet())
      throw Error(`Component ${this.name} has not been registered yet`);
    const i = this.getOrInitializeService({
      instanceIdentifier: r,
      options: t
    });
    for (const [s, o] of this.instancesDeferred.entries()) {
      const c = this.normalizeInstanceIdentifier(s);
      r === c && o.resolve(i);
    }
    return i;
  }
  /**
   *
   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().
   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.
   *
   * @param identifier An optional instance identifier
   * @returns a function to unregister the callback
   */
  onInit(e, t) {
    var r;
    const i = this.normalizeInstanceIdentifier(t), s = (r = this.onInitCallbacks.get(i)) !== null && r !== void 0 ? r : /* @__PURE__ */ new Set();
    s.add(e), this.onInitCallbacks.set(i, s);
    const o = this.instances.get(i);
    return o && e(o, i), () => {
      s.delete(e);
    };
  }
  /**
   * Invoke onInit callbacks synchronously
   * @param instance the service instance`
   */
  invokeOnInitCallbacks(e, t) {
    const r = this.onInitCallbacks.get(t);
    if (r)
      for (const i of r)
        try {
          i(e, t);
        } catch {
        }
  }
  getOrInitializeService({ instanceIdentifier: e, options: t = {} }) {
    let r = this.instances.get(e);
    if (!r && this.component && (r = this.component.instanceFactory(this.container, {
      instanceIdentifier: kS(e),
      options: t
    }), this.instances.set(e, r), this.instancesOptions.set(e, t), this.invokeOnInitCallbacks(r, e), this.component.onInstanceCreated))
      try {
        this.component.onInstanceCreated(this.container, e, r);
      } catch {
      }
    return r || null;
  }
  normalizeInstanceIdentifier(e = sr) {
    return this.component ? this.component.multipleInstances ? e : sr : e;
  }
  shouldAutoInitialize() {
    return !!this.component && this.component.instantiationMode !== "EXPLICIT";
  }
}
function kS(n) {
  return n === sr ? void 0 : n;
}
function OS(n) {
  return n.instantiationMode === "EAGER";
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class DS {
  constructor(e) {
    this.name = e, this.providers = /* @__PURE__ */ new Map();
  }
  /**
   *
   * @param component Component being added
   * @param overwrite When a component with the same name has already been registered,
   * if overwrite is true: overwrite the existing component with the new component and create a new
   * provider with the new component. It can be useful in tests where you want to use different mocks
   * for different tests.
   * if overwrite is false: throw an exception
   */
  addComponent(e) {
    const t = this.getProvider(e.name);
    if (t.isComponentSet())
      throw new Error(`Component ${e.name} has already been registered with ${this.name}`);
    t.setComponent(e);
  }
  addOrOverwriteComponent(e) {
    this.getProvider(e.name).isComponentSet() && this.providers.delete(e.name), this.addComponent(e);
  }
  /**
   * getProvider provides a type safe interface where it can only be called with a field name
   * present in NameServiceMapping interface.
   *
   * Firebase SDKs providing services should extend NameServiceMapping interface to register
   * themselves.
   */
  getProvider(e) {
    if (this.providers.has(e))
      return this.providers.get(e);
    const t = new PS(e, this);
    return this.providers.set(e, t), t;
  }
  getProviders() {
    return Array.from(this.providers.values());
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _e;
(function(n) {
  n[n.DEBUG = 0] = "DEBUG", n[n.VERBOSE = 1] = "VERBOSE", n[n.INFO = 2] = "INFO", n[n.WARN = 3] = "WARN", n[n.ERROR = 4] = "ERROR", n[n.SILENT = 5] = "SILENT";
})(_e || (_e = {}));
const NS = {
  debug: _e.DEBUG,
  verbose: _e.VERBOSE,
  info: _e.INFO,
  warn: _e.WARN,
  error: _e.ERROR,
  silent: _e.SILENT
}, xS = _e.INFO, LS = {
  [_e.DEBUG]: "log",
  [_e.VERBOSE]: "log",
  [_e.INFO]: "info",
  [_e.WARN]: "warn",
  [_e.ERROR]: "error"
}, MS = (n, e, ...t) => {
  if (e < n.logLevel)
    return;
  const r = (/* @__PURE__ */ new Date()).toISOString(), i = LS[e];
  if (i)
    console[i](`[${r}]  ${n.name}:`, ...t);
  else
    throw new Error(`Attempted to log a message with an invalid logType (value: ${e})`);
};
class gl {
  /**
   * Gives you an instance of a Logger to capture messages according to
   * Firebase's logging scheme.
   *
   * @param name The name that the logs will be associated with
   */
  constructor(e) {
    this.name = e, this._logLevel = xS, this._logHandler = MS, this._userLogHandler = null;
  }
  get logLevel() {
    return this._logLevel;
  }
  set logLevel(e) {
    if (!(e in _e))
      throw new TypeError(`Invalid value "${e}" assigned to \`logLevel\``);
    this._logLevel = e;
  }
  // Workaround for setter/getter having to be the same type.
  setLogLevel(e) {
    this._logLevel = typeof e == "string" ? NS[e] : e;
  }
  get logHandler() {
    return this._logHandler;
  }
  set logHandler(e) {
    if (typeof e != "function")
      throw new TypeError("Value assigned to `logHandler` must be a function");
    this._logHandler = e;
  }
  get userLogHandler() {
    return this._userLogHandler;
  }
  set userLogHandler(e) {
    this._userLogHandler = e;
  }
  /**
   * The functions below are all based on the `console` interface
   */
  debug(...e) {
    this._userLogHandler && this._userLogHandler(this, _e.DEBUG, ...e), this._logHandler(this, _e.DEBUG, ...e);
  }
  log(...e) {
    this._userLogHandler && this._userLogHandler(this, _e.VERBOSE, ...e), this._logHandler(this, _e.VERBOSE, ...e);
  }
  info(...e) {
    this._userLogHandler && this._userLogHandler(this, _e.INFO, ...e), this._logHandler(this, _e.INFO, ...e);
  }
  warn(...e) {
    this._userLogHandler && this._userLogHandler(this, _e.WARN, ...e), this._logHandler(this, _e.WARN, ...e);
  }
  error(...e) {
    this._userLogHandler && this._userLogHandler(this, _e.ERROR, ...e), this._logHandler(this, _e.ERROR, ...e);
  }
}
const VS = (n, e) => e.some((t) => n instanceof t);
let Dd, Nd;
function FS() {
  return Dd || (Dd = [
    IDBDatabase,
    IDBObjectStore,
    IDBIndex,
    IDBCursor,
    IDBTransaction
  ]);
}
function US() {
  return Nd || (Nd = [
    IDBCursor.prototype.advance,
    IDBCursor.prototype.continue,
    IDBCursor.prototype.continuePrimaryKey
  ]);
}
const Hg = /* @__PURE__ */ new WeakMap(), _u = /* @__PURE__ */ new WeakMap(), Gg = /* @__PURE__ */ new WeakMap(), Ac = /* @__PURE__ */ new WeakMap(), yl = /* @__PURE__ */ new WeakMap();
function jS(n) {
  const e = new Promise((t, r) => {
    const i = () => {
      n.removeEventListener("success", s), n.removeEventListener("error", o);
    }, s = () => {
      t(jn(n.result)), i();
    }, o = () => {
      r(n.error), i();
    };
    n.addEventListener("success", s), n.addEventListener("error", o);
  });
  return e.then((t) => {
    t instanceof IDBCursor && Hg.set(t, n);
  }).catch(() => {
  }), yl.set(e, n), e;
}
function $S(n) {
  if (_u.has(n))
    return;
  const e = new Promise((t, r) => {
    const i = () => {
      n.removeEventListener("complete", s), n.removeEventListener("error", o), n.removeEventListener("abort", o);
    }, s = () => {
      t(), i();
    }, o = () => {
      r(n.error || new DOMException("AbortError", "AbortError")), i();
    };
    n.addEventListener("complete", s), n.addEventListener("error", o), n.addEventListener("abort", o);
  });
  _u.set(n, e);
}
let vu = {
  get(n, e, t) {
    if (n instanceof IDBTransaction) {
      if (e === "done")
        return _u.get(n);
      if (e === "objectStoreNames")
        return n.objectStoreNames || Gg.get(n);
      if (e === "store")
        return t.objectStoreNames[1] ? void 0 : t.objectStore(t.objectStoreNames[0]);
    }
    return jn(n[e]);
  },
  set(n, e, t) {
    return n[e] = t, !0;
  },
  has(n, e) {
    return n instanceof IDBTransaction && (e === "done" || e === "store") ? !0 : e in n;
  }
};
function BS(n) {
  vu = n(vu);
}
function qS(n) {
  return n === IDBDatabase.prototype.transaction && !("objectStoreNames" in IDBTransaction.prototype) ? function(e, ...t) {
    const r = n.call(Rc(this), e, ...t);
    return Gg.set(r, e.sort ? e.sort() : [e]), jn(r);
  } : US().includes(n) ? function(...e) {
    return n.apply(Rc(this), e), jn(Hg.get(this));
  } : function(...e) {
    return jn(n.apply(Rc(this), e));
  };
}
function KS(n) {
  return typeof n == "function" ? qS(n) : (n instanceof IDBTransaction && $S(n), VS(n, FS()) ? new Proxy(n, vu) : n);
}
function jn(n) {
  if (n instanceof IDBRequest)
    return jS(n);
  if (Ac.has(n))
    return Ac.get(n);
  const e = KS(n);
  return e !== n && (Ac.set(n, e), yl.set(e, n)), e;
}
const Rc = (n) => yl.get(n);
function zS(n, e, { blocked: t, upgrade: r, blocking: i, terminated: s } = {}) {
  const o = indexedDB.open(n, e), c = jn(o);
  return r && o.addEventListener("upgradeneeded", (u) => {
    r(jn(o.result), u.oldVersion, u.newVersion, jn(o.transaction), u);
  }), t && o.addEventListener("blocked", (u) => t(
    // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
    u.oldVersion,
    u.newVersion,
    u
  )), c.then((u) => {
    s && u.addEventListener("close", () => s()), i && u.addEventListener("versionchange", (l) => i(l.oldVersion, l.newVersion, l));
  }).catch(() => {
  }), c;
}
const HS = ["get", "getKey", "getAll", "getAllKeys", "count"], GS = ["put", "add", "delete", "clear"], Cc = /* @__PURE__ */ new Map();
function xd(n, e) {
  if (!(n instanceof IDBDatabase && !(e in n) && typeof e == "string"))
    return;
  if (Cc.get(e))
    return Cc.get(e);
  const t = e.replace(/FromIndex$/, ""), r = e !== t, i = GS.includes(t);
  if (
    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
    !(t in (r ? IDBIndex : IDBObjectStore).prototype) || !(i || HS.includes(t))
  )
    return;
  const s = async function(o, ...c) {
    const u = this.transaction(o, i ? "readwrite" : "readonly");
    let l = u.store;
    return r && (l = l.index(c.shift())), (await Promise.all([
      l[t](...c),
      i && u.done
    ]))[0];
  };
  return Cc.set(e, s), s;
}
BS((n) => ({
  ...n,
  get: (e, t, r) => xd(e, t) || n.get(e, t, r),
  has: (e, t) => !!xd(e, t) || n.has(e, t)
}));
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class WS {
  constructor(e) {
    this.container = e;
  }
  // In initial implementation, this will be called by installations on
  // auth token refresh, and installations will send this string.
  getPlatformInfoString() {
    return this.container.getProviders().map((t) => {
      if (QS(t)) {
        const r = t.getImmediate();
        return `${r.library}/${r.version}`;
      } else
        return null;
    }).filter((t) => t).join(" ");
  }
}
function QS(n) {
  const e = n.getComponent();
  return (e == null ? void 0 : e.type) === "VERSION";
}
const wu = "@firebase/app", Ld = "0.10.8";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Tr = new gl("@firebase/app"), YS = "@firebase/app-compat", JS = "@firebase/analytics-compat", XS = "@firebase/analytics", ZS = "@firebase/app-check-compat", eA = "@firebase/app-check", tA = "@firebase/auth", nA = "@firebase/auth-compat", rA = "@firebase/database", iA = "@firebase/database-compat", sA = "@firebase/functions", oA = "@firebase/functions-compat", aA = "@firebase/installations", cA = "@firebase/installations-compat", uA = "@firebase/messaging", lA = "@firebase/messaging-compat", hA = "@firebase/performance", fA = "@firebase/performance-compat", dA = "@firebase/remote-config", pA = "@firebase/remote-config-compat", mA = "@firebase/storage", gA = "@firebase/storage-compat", yA = "@firebase/firestore", _A = "@firebase/vertexai-preview", vA = "@firebase/firestore-compat", wA = "firebase", EA = "10.12.5";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Eu = "[DEFAULT]", TA = {
  [wu]: "fire-core",
  [YS]: "fire-core-compat",
  [XS]: "fire-analytics",
  [JS]: "fire-analytics-compat",
  [eA]: "fire-app-check",
  [ZS]: "fire-app-check-compat",
  [tA]: "fire-auth",
  [nA]: "fire-auth-compat",
  [rA]: "fire-rtdb",
  [iA]: "fire-rtdb-compat",
  [sA]: "fire-fn",
  [oA]: "fire-fn-compat",
  [aA]: "fire-iid",
  [cA]: "fire-iid-compat",
  [uA]: "fire-fcm",
  [lA]: "fire-fcm-compat",
  [hA]: "fire-perf",
  [fA]: "fire-perf-compat",
  [dA]: "fire-rc",
  [pA]: "fire-rc-compat",
  [mA]: "fire-gcs",
  [gA]: "fire-gcs-compat",
  [yA]: "fire-fst",
  [vA]: "fire-fst-compat",
  [_A]: "fire-vertex",
  "fire-js": "fire-js",
  [wA]: "fire-js-all"
};
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Ko = /* @__PURE__ */ new Map(), bA = /* @__PURE__ */ new Map(), Tu = /* @__PURE__ */ new Map();
function Md(n, e) {
  try {
    n.container.addComponent(e);
  } catch (t) {
    Tr.debug(`Component ${e.name} failed to register with FirebaseApp ${n.name}`, t);
  }
}
function br(n) {
  const e = n.name;
  if (Tu.has(e))
    return Tr.debug(`There were multiple attempts to register component ${e}.`), !1;
  Tu.set(e, n);
  for (const t of Ko.values())
    Md(t, n);
  for (const t of bA.values())
    Md(t, n);
  return !0;
}
function Ia(n, e) {
  const t = n.container.getProvider("heartbeat").getImmediate({ optional: !0 });
  return t && t.triggerHeartbeat(), n.container.getProvider(e);
}
function Ut(n) {
  return n.settings !== void 0;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const IA = {
  "no-app": "No Firebase App '{$appName}' has been created - call initializeApp() first",
  "bad-app-name": "Illegal App name: '{$appName}'",
  "duplicate-app": "Firebase App named '{$appName}' already exists with different options or config",
  "app-deleted": "Firebase App named '{$appName}' already deleted",
  "server-app-deleted": "Firebase Server App has been deleted",
  "no-options": "Need to provide options, when not being deployed to hosting via source.",
  "invalid-app-argument": "firebase.{$appName}() takes either no argument or a Firebase App instance.",
  "invalid-log-argument": "First argument to `onLog` must be null or a function.",
  "idb-open": "Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.",
  "idb-get": "Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.",
  "idb-set": "Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.",
  "idb-delete": "Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.",
  "finalization-registry-not-supported": "FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.",
  "invalid-server-app-environment": "FirebaseServerApp is not for use in browser environments."
}, $n = new Is("app", "Firebase", IA);
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class SA {
  constructor(e, t, r) {
    this._isDeleted = !1, this._options = Object.assign({}, e), this._config = Object.assign({}, t), this._name = t.name, this._automaticDataCollectionEnabled = t.automaticDataCollectionEnabled, this._container = r, this.container.addComponent(new zn(
      "app",
      () => this,
      "PUBLIC"
      /* ComponentType.PUBLIC */
    ));
  }
  get automaticDataCollectionEnabled() {
    return this.checkDestroyed(), this._automaticDataCollectionEnabled;
  }
  set automaticDataCollectionEnabled(e) {
    this.checkDestroyed(), this._automaticDataCollectionEnabled = e;
  }
  get name() {
    return this.checkDestroyed(), this._name;
  }
  get options() {
    return this.checkDestroyed(), this._options;
  }
  get config() {
    return this.checkDestroyed(), this._config;
  }
  get container() {
    return this._container;
  }
  get isDeleted() {
    return this._isDeleted;
  }
  set isDeleted(e) {
    this._isDeleted = e;
  }
  /**
   * This function will throw an Error if the App has already been deleted -
   * use before performing API actions on the App.
   */
  checkDestroyed() {
    if (this.isDeleted)
      throw $n.create("app-deleted", { appName: this._name });
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Dr = EA;
function Wg(n, e = {}) {
  let t = n;
  typeof e != "object" && (e = { name: e });
  const r = Object.assign({ name: Eu, automaticDataCollectionEnabled: !1 }, e), i = r.name;
  if (typeof i != "string" || !i)
    throw $n.create("bad-app-name", {
      appName: String(i)
    });
  if (t || (t = qg()), !t)
    throw $n.create(
      "no-options"
      /* AppError.NO_OPTIONS */
    );
  const s = Ko.get(i);
  if (s) {
    if (qo(t, s.options) && qo(r, s.config))
      return s;
    throw $n.create("duplicate-app", { appName: i });
  }
  const o = new DS(i);
  for (const u of Tu.values())
    o.addComponent(u);
  const c = new SA(t, r, o);
  return Ko.set(i, c), c;
}
function _l(n = Eu) {
  const e = Ko.get(n);
  if (!e && n === Eu && qg())
    return Wg();
  if (!e)
    throw $n.create("no-app", { appName: n });
  return e;
}
function nn(n, e, t) {
  var r;
  let i = (r = TA[n]) !== null && r !== void 0 ? r : n;
  t && (i += `-${t}`);
  const s = i.match(/\s|\//), o = e.match(/\s|\//);
  if (s || o) {
    const c = [
      `Unable to register library "${i}" with version "${e}":`
    ];
    s && c.push(`library name "${i}" contains illegal characters (whitespace or "/")`), s && o && c.push("and"), o && c.push(`version name "${e}" contains illegal characters (whitespace or "/")`), Tr.warn(c.join(" "));
    return;
  }
  br(new zn(
    `${i}-version`,
    () => ({ library: i, version: e }),
    "VERSION"
    /* ComponentType.VERSION */
  ));
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const AA = "firebase-heartbeat-database", RA = 1, us = "firebase-heartbeat-store";
let Pc = null;
function Qg() {
  return Pc || (Pc = zS(AA, RA, {
    upgrade: (n, e) => {
      switch (e) {
        case 0:
          try {
            n.createObjectStore(us);
          } catch (t) {
            console.warn(t);
          }
      }
    }
  }).catch((n) => {
    throw $n.create("idb-open", {
      originalErrorMessage: n.message
    });
  })), Pc;
}
async function CA(n) {
  try {
    const t = (await Qg()).transaction(us), r = await t.objectStore(us).get(Yg(n));
    return await t.done, r;
  } catch (e) {
    if (e instanceof ln)
      Tr.warn(e.message);
    else {
      const t = $n.create("idb-get", {
        originalErrorMessage: e == null ? void 0 : e.message
      });
      Tr.warn(t.message);
    }
  }
}
async function Vd(n, e) {
  try {
    const r = (await Qg()).transaction(us, "readwrite");
    await r.objectStore(us).put(e, Yg(n)), await r.done;
  } catch (t) {
    if (t instanceof ln)
      Tr.warn(t.message);
    else {
      const r = $n.create("idb-set", {
        originalErrorMessage: t == null ? void 0 : t.message
      });
      Tr.warn(r.message);
    }
  }
}
function Yg(n) {
  return `${n.name}!${n.options.appId}`;
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const PA = 1024, kA = 30 * 24 * 60 * 60 * 1e3;
class OA {
  constructor(e) {
    this.container = e, this._heartbeatsCache = null;
    const t = this.container.getProvider("app").getImmediate();
    this._storage = new NA(t), this._heartbeatsCachePromise = this._storage.read().then((r) => (this._heartbeatsCache = r, r));
  }
  /**
   * Called to report a heartbeat. The function will generate
   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it
   * to IndexedDB.
   * Note that we only store one heartbeat per day. So if a heartbeat for today is
   * already logged, subsequent calls to this function in the same day will be ignored.
   */
  async triggerHeartbeat() {
    var e, t;
    const i = this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(), s = Fd();
    if (!(((e = this._heartbeatsCache) === null || e === void 0 ? void 0 : e.heartbeats) == null && (this._heartbeatsCache = await this._heartbeatsCachePromise, ((t = this._heartbeatsCache) === null || t === void 0 ? void 0 : t.heartbeats) == null)) && !(this._heartbeatsCache.lastSentHeartbeatDate === s || this._heartbeatsCache.heartbeats.some((o) => o.date === s)))
      return this._heartbeatsCache.heartbeats.push({ date: s, agent: i }), this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter((o) => {
        const c = new Date(o.date).valueOf();
        return Date.now() - c <= kA;
      }), this._storage.overwrite(this._heartbeatsCache);
  }
  /**
   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.
   * It also clears all heartbeats from memory as well as in IndexedDB.
   *
   * NOTE: Consuming product SDKs should not send the header if this method
   * returns an empty string.
   */
  async getHeartbeatsHeader() {
    var e;
    if (this._heartbeatsCache === null && await this._heartbeatsCachePromise, ((e = this._heartbeatsCache) === null || e === void 0 ? void 0 : e.heartbeats) == null || this._heartbeatsCache.heartbeats.length === 0)
      return "";
    const t = Fd(), { heartbeatsToSend: r, unsentEntries: i } = DA(this._heartbeatsCache.heartbeats), s = Bo(JSON.stringify({ version: 2, heartbeats: r }));
    return this._heartbeatsCache.lastSentHeartbeatDate = t, i.length > 0 ? (this._heartbeatsCache.heartbeats = i, await this._storage.overwrite(this._heartbeatsCache)) : (this._heartbeatsCache.heartbeats = [], this._storage.overwrite(this._heartbeatsCache)), s;
  }
}
function Fd() {
  return (/* @__PURE__ */ new Date()).toISOString().substring(0, 10);
}
function DA(n, e = PA) {
  const t = [];
  let r = n.slice();
  for (const i of n) {
    const s = t.find((o) => o.agent === i.agent);
    if (s) {
      if (s.dates.push(i.date), Ud(t) > e) {
        s.dates.pop();
        break;
      }
    } else if (t.push({
      agent: i.agent,
      dates: [i.date]
    }), Ud(t) > e) {
      t.pop();
      break;
    }
    r = r.slice(1);
  }
  return {
    heartbeatsToSend: t,
    unsentEntries: r
  };
}
class NA {
  constructor(e) {
    this.app = e, this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();
  }
  async runIndexedDBEnvironmentCheck() {
    return wS() ? ES().then(() => !0).catch(() => !1) : !1;
  }
  /**
   * Read all heartbeats.
   */
  async read() {
    if (await this._canUseIndexedDBPromise) {
      const t = await CA(this.app);
      return t != null && t.heartbeats ? t : { heartbeats: [] };
    } else
      return { heartbeats: [] };
  }
  // overwrite the storage with the provided heartbeats
  async overwrite(e) {
    var t;
    if (await this._canUseIndexedDBPromise) {
      const i = await this.read();
      return Vd(this.app, {
        lastSentHeartbeatDate: (t = e.lastSentHeartbeatDate) !== null && t !== void 0 ? t : i.lastSentHeartbeatDate,
        heartbeats: e.heartbeats
      });
    } else
      return;
  }
  // add heartbeats
  async add(e) {
    var t;
    if (await this._canUseIndexedDBPromise) {
      const i = await this.read();
      return Vd(this.app, {
        lastSentHeartbeatDate: (t = e.lastSentHeartbeatDate) !== null && t !== void 0 ? t : i.lastSentHeartbeatDate,
        heartbeats: [
          ...i.heartbeats,
          ...e.heartbeats
        ]
      });
    } else
      return;
  }
}
function Ud(n) {
  return Bo(
    // heartbeatsCache wrapper properties
    JSON.stringify({ version: 2, heartbeats: n })
  ).length;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function xA(n) {
  br(new zn(
    "platform-logger",
    (e) => new WS(e),
    "PRIVATE"
    /* ComponentType.PRIVATE */
  )), br(new zn(
    "heartbeat",
    (e) => new OA(e),
    "PRIVATE"
    /* ComponentType.PRIVATE */
  )), nn(wu, Ld, n), nn(wu, Ld, "esm2017"), nn("fire-js", "");
}
xA("");
var LA = "firebase", MA = "10.12.5";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
nn(LA, MA, "app");
function vl(n, e) {
  var t = {};
  for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && e.indexOf(r) < 0 && (t[r] = n[r]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var i = 0, r = Object.getOwnPropertySymbols(n); i < r.length; i++)
      e.indexOf(r[i]) < 0 && Object.prototype.propertyIsEnumerable.call(n, r[i]) && (t[r[i]] = n[r[i]]);
  return t;
}
function Jg() {
  return {
    "dependent-sdk-initialized-before-auth": "Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."
  };
}
const VA = Jg, Xg = new Is("auth", "Firebase", Jg());
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const zo = new gl("@firebase/auth");
function FA(n, ...e) {
  zo.logLevel <= _e.WARN && zo.warn(`Auth (${Dr}): ${n}`, ...e);
}
function bo(n, ...e) {
  zo.logLevel <= _e.ERROR && zo.error(`Auth (${Dr}): ${n}`, ...e);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function qt(n, ...e) {
  throw El(n, ...e);
}
function kt(n, ...e) {
  return El(n, ...e);
}
function wl(n, e, t) {
  const r = Object.assign(Object.assign({}, VA()), { [e]: t });
  return new Is("auth", "Firebase", r).create(e, {
    appName: n.name
  });
}
function rn(n) {
  return wl(n, "operation-not-supported-in-this-environment", "Operations that alter the current user are not supported in conjunction with FirebaseServerApp");
}
function UA(n, e, t) {
  const r = t;
  if (!(e instanceof r))
    throw r.name !== e.constructor.name && qt(
      n,
      "argument-error"
      /* AuthErrorCode.ARGUMENT_ERROR */
    ), wl(n, "argument-error", `Type of ${e.constructor.name} does not match expected instance.Did you pass a reference from a different Auth SDK?`);
}
function El(n, ...e) {
  if (typeof n != "string") {
    const t = e[0], r = [...e.slice(1)];
    return r[0] && (r[0].appName = n.name), n._errorFactory.create(t, ...r);
  }
  return Xg.create(n, ...e);
}
function ne(n, e, ...t) {
  if (!n)
    throw El(e, ...t);
}
function _n(n) {
  const e = "INTERNAL ASSERTION FAILED: " + n;
  throw bo(e), new Error(e);
}
function In(n, e) {
  n || _n(e);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function bu() {
  var n;
  return typeof self < "u" && ((n = self.location) === null || n === void 0 ? void 0 : n.href) || "";
}
function Zg() {
  return jd() === "http:" || jd() === "https:";
}
function jd() {
  var n;
  return typeof self < "u" && ((n = self.location) === null || n === void 0 ? void 0 : n.protocol) || null;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function jA() {
  return typeof navigator < "u" && navigator && "onLine" in navigator && typeof navigator.onLine == "boolean" && // Apply only for traditional web apps and Chrome extensions.
  // This is especially true for Cordova apps which have unreliable
  // navigator.onLine behavior unless cordova-plugin-network-information is
  // installed which overwrites the native navigator.onLine value and
  // defines navigator.connection.
  (Zg() || gS() || "connection" in navigator) ? navigator.onLine : !0;
}
function $A() {
  if (typeof navigator > "u")
    return null;
  const n = navigator;
  return (
    // Most reliable, but only supported in Chrome/Firefox.
    n.languages && n.languages[0] || // Supported in most browsers, but returns the language of the browser
    // UI, not the language set in browser settings.
    n.language || // Couldn't determine language.
    null
  );
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Ss {
  constructor(e, t) {
    this.shortDelay = e, this.longDelay = t, In(t > e, "Short delay should be less than long delay!"), this.isMobile = pS() || yS();
  }
  get() {
    return jA() ? this.isMobile ? this.longDelay : this.shortDelay : Math.min(5e3, this.shortDelay);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Tl(n, e) {
  In(n.emulator, "Emulator should always be set here");
  const { url: t } = n.emulator;
  return e ? `${t}${e.startsWith("/") ? e.slice(1) : e}` : t;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ey {
  static initialize(e, t, r) {
    this.fetchImpl = e, t && (this.headersImpl = t), r && (this.responseImpl = r);
  }
  static fetch() {
    if (this.fetchImpl)
      return this.fetchImpl;
    if (typeof self < "u" && "fetch" in self)
      return self.fetch;
    if (typeof globalThis < "u" && globalThis.fetch)
      return globalThis.fetch;
    if (typeof fetch < "u")
      return fetch;
    _n("Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
  }
  static headers() {
    if (this.headersImpl)
      return this.headersImpl;
    if (typeof self < "u" && "Headers" in self)
      return self.Headers;
    if (typeof globalThis < "u" && globalThis.Headers)
      return globalThis.Headers;
    if (typeof Headers < "u")
      return Headers;
    _n("Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
  }
  static response() {
    if (this.responseImpl)
      return this.responseImpl;
    if (typeof self < "u" && "Response" in self)
      return self.Response;
    if (typeof globalThis < "u" && globalThis.Response)
      return globalThis.Response;
    if (typeof Response < "u")
      return Response;
    _n("Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const BA = {
  // Custom token errors.
  CREDENTIAL_MISMATCH: "custom-token-mismatch",
  // This can only happen if the SDK sends a bad request.
  MISSING_CUSTOM_TOKEN: "internal-error",
  // Create Auth URI errors.
  INVALID_IDENTIFIER: "invalid-email",
  // This can only happen if the SDK sends a bad request.
  MISSING_CONTINUE_URI: "internal-error",
  // Sign in with email and password errors (some apply to sign up too).
  INVALID_PASSWORD: "wrong-password",
  // This can only happen if the SDK sends a bad request.
  MISSING_PASSWORD: "missing-password",
  // Thrown if Email Enumeration Protection is enabled in the project and the email or password is
  // invalid.
  INVALID_LOGIN_CREDENTIALS: "invalid-credential",
  // Sign up with email and password errors.
  EMAIL_EXISTS: "email-already-in-use",
  PASSWORD_LOGIN_DISABLED: "operation-not-allowed",
  // Verify assertion for sign in with credential errors:
  INVALID_IDP_RESPONSE: "invalid-credential",
  INVALID_PENDING_TOKEN: "invalid-credential",
  FEDERATED_USER_ID_ALREADY_LINKED: "credential-already-in-use",
  // This can only happen if the SDK sends a bad request.
  MISSING_REQ_TYPE: "internal-error",
  // Send Password reset email errors:
  EMAIL_NOT_FOUND: "user-not-found",
  RESET_PASSWORD_EXCEED_LIMIT: "too-many-requests",
  EXPIRED_OOB_CODE: "expired-action-code",
  INVALID_OOB_CODE: "invalid-action-code",
  // This can only happen if the SDK sends a bad request.
  MISSING_OOB_CODE: "internal-error",
  // Operations that require ID token in request:
  CREDENTIAL_TOO_OLD_LOGIN_AGAIN: "requires-recent-login",
  INVALID_ID_TOKEN: "invalid-user-token",
  TOKEN_EXPIRED: "user-token-expired",
  USER_NOT_FOUND: "user-token-expired",
  // Other errors.
  TOO_MANY_ATTEMPTS_TRY_LATER: "too-many-requests",
  PASSWORD_DOES_NOT_MEET_REQUIREMENTS: "password-does-not-meet-requirements",
  // Phone Auth related errors.
  INVALID_CODE: "invalid-verification-code",
  INVALID_SESSION_INFO: "invalid-verification-id",
  INVALID_TEMPORARY_PROOF: "invalid-credential",
  MISSING_SESSION_INFO: "missing-verification-id",
  SESSION_EXPIRED: "code-expired",
  // Other action code errors when additional settings passed.
  // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.
  // This is OK as this error will be caught by client side validation.
  MISSING_ANDROID_PACKAGE_NAME: "missing-android-pkg-name",
  UNAUTHORIZED_DOMAIN: "unauthorized-continue-uri",
  // getProjectConfig errors when clientId is passed.
  INVALID_OAUTH_CLIENT_ID: "invalid-oauth-client-id",
  // User actions (sign-up or deletion) disabled errors.
  ADMIN_ONLY_OPERATION: "admin-restricted-operation",
  // Multi factor related errors.
  INVALID_MFA_PENDING_CREDENTIAL: "invalid-multi-factor-session",
  MFA_ENROLLMENT_NOT_FOUND: "multi-factor-info-not-found",
  MISSING_MFA_ENROLLMENT_ID: "missing-multi-factor-info",
  MISSING_MFA_PENDING_CREDENTIAL: "missing-multi-factor-session",
  SECOND_FACTOR_EXISTS: "second-factor-already-in-use",
  SECOND_FACTOR_LIMIT_EXCEEDED: "maximum-second-factor-count-exceeded",
  // Blocking functions related errors.
  BLOCKING_FUNCTION_ERROR_RESPONSE: "internal-error",
  // Recaptcha related errors.
  RECAPTCHA_NOT_ENABLED: "recaptcha-not-enabled",
  MISSING_RECAPTCHA_TOKEN: "missing-recaptcha-token",
  INVALID_RECAPTCHA_TOKEN: "invalid-recaptcha-token",
  INVALID_RECAPTCHA_ACTION: "invalid-recaptcha-action",
  MISSING_CLIENT_TYPE: "missing-client-type",
  MISSING_RECAPTCHA_VERSION: "missing-recaptcha-version",
  INVALID_RECAPTCHA_VERSION: "invalid-recaptcha-version",
  INVALID_REQ_TYPE: "invalid-req-type"
  /* AuthErrorCode.INVALID_REQ_TYPE */
};
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const qA = new Ss(3e4, 6e4);
function Rn(n, e) {
  return n.tenantId && !e.tenantId ? Object.assign(Object.assign({}, e), { tenantId: n.tenantId }) : e;
}
async function hn(n, e, t, r, i = {}) {
  return ty(n, i, async () => {
    let s = {}, o = {};
    r && (e === "GET" ? o = r : s = {
      body: JSON.stringify(r)
    });
    const c = mi(Object.assign({ key: n.config.apiKey }, o)).slice(1), u = await n._getAdditionalHeaders();
    return u[
      "Content-Type"
      /* HttpHeader.CONTENT_TYPE */
    ] = "application/json", n.languageCode && (u[
      "X-Firebase-Locale"
      /* HttpHeader.X_FIREBASE_LOCALE */
    ] = n.languageCode), ey.fetch()(ny(n, n.config.apiHost, t, c), Object.assign({
      method: e,
      headers: u,
      referrerPolicy: "no-referrer"
    }, s));
  });
}
async function ty(n, e, t) {
  n._canInitEmulator = !1;
  const r = Object.assign(Object.assign({}, BA), e);
  try {
    const i = new zA(n), s = await Promise.race([
      t(),
      i.promise
    ]);
    i.clearNetworkTimeout();
    const o = await s.json();
    if ("needConfirmation" in o)
      throw uo(n, "account-exists-with-different-credential", o);
    if (s.ok && !("errorMessage" in o))
      return o;
    {
      const c = s.ok ? o.errorMessage : o.error.message, [u, l] = c.split(" : ");
      if (u === "FEDERATED_USER_ID_ALREADY_LINKED")
        throw uo(n, "credential-already-in-use", o);
      if (u === "EMAIL_EXISTS")
        throw uo(n, "email-already-in-use", o);
      if (u === "USER_DISABLED")
        throw uo(n, "user-disabled", o);
      const f = r[u] || u.toLowerCase().replace(/[_\s]+/g, "-");
      if (l)
        throw wl(n, f, l);
      qt(n, f);
    }
  } catch (i) {
    if (i instanceof ln)
      throw i;
    qt(n, "network-request-failed", { message: String(i) });
  }
}
async function gi(n, e, t, r, i = {}) {
  const s = await hn(n, e, t, r, i);
  return "mfaPendingCredential" in s && qt(n, "multi-factor-auth-required", {
    _serverResponse: s
  }), s;
}
function ny(n, e, t, r) {
  const i = `${e}${t}?${r}`;
  return n.config.emulator ? Tl(n.config, i) : `${n.config.apiScheme}://${i}`;
}
function KA(n) {
  switch (n) {
    case "ENFORCE":
      return "ENFORCE";
    case "AUDIT":
      return "AUDIT";
    case "OFF":
      return "OFF";
    default:
      return "ENFORCEMENT_STATE_UNSPECIFIED";
  }
}
class zA {
  constructor(e) {
    this.auth = e, this.timer = null, this.promise = new Promise((t, r) => {
      this.timer = setTimeout(() => r(kt(
        this.auth,
        "network-request-failed"
        /* AuthErrorCode.NETWORK_REQUEST_FAILED */
      )), qA.get());
    });
  }
  clearNetworkTimeout() {
    clearTimeout(this.timer);
  }
}
function uo(n, e, t) {
  const r = {
    appName: n.name
  };
  t.email && (r.email = t.email), t.phoneNumber && (r.phoneNumber = t.phoneNumber);
  const i = kt(n, e, r);
  return i.customData._tokenResponse = t, i;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function $d(n) {
  return n !== void 0 && n.getResponse !== void 0;
}
function Bd(n) {
  return n !== void 0 && n.enterprise !== void 0;
}
class HA {
  constructor(e) {
    if (this.siteKey = "", this.recaptchaEnforcementState = [], e.recaptchaKey === void 0)
      throw new Error("recaptchaKey undefined");
    this.siteKey = e.recaptchaKey.split("/")[3], this.recaptchaEnforcementState = e.recaptchaEnforcementState;
  }
  /**
   * Returns the reCAPTCHA Enterprise enforcement state for the given provider.
   *
   * @param providerStr - The provider whose enforcement state is to be returned.
   * @returns The reCAPTCHA Enterprise enforcement state for the given provider.
   */
  getProviderEnforcementState(e) {
    if (!this.recaptchaEnforcementState || this.recaptchaEnforcementState.length === 0)
      return null;
    for (const t of this.recaptchaEnforcementState)
      if (t.provider && t.provider === e)
        return KA(t.enforcementState);
    return null;
  }
  /**
   * Returns true if the reCAPTCHA Enterprise enforcement state for the provider is set to ENFORCE or AUDIT.
   *
   * @param providerStr - The provider whose enablement state is to be returned.
   * @returns Whether or not reCAPTCHA Enterprise protection is enabled for the given provider.
   */
  isProviderEnabled(e) {
    return this.getProviderEnforcementState(e) === "ENFORCE" || this.getProviderEnforcementState(e) === "AUDIT";
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function GA(n) {
  return (await hn(
    n,
    "GET",
    "/v1/recaptchaParams"
    /* Endpoint.GET_RECAPTCHA_PARAM */
  )).recaptchaSiteKey || "";
}
async function WA(n, e) {
  return hn(n, "GET", "/v2/recaptchaConfig", Rn(n, e));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function QA(n, e) {
  return hn(n, "POST", "/v1/accounts:delete", e);
}
async function ry(n, e) {
  return hn(n, "POST", "/v1/accounts:lookup", e);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Ji(n) {
  if (n)
    try {
      const e = new Date(Number(n));
      if (!isNaN(e.getTime()))
        return e.toUTCString();
    } catch {
    }
}
async function YA(n, e = !1) {
  const t = Qe(n), r = await t.getIdToken(e), i = bl(r);
  ne(
    i && i.exp && i.auth_time && i.iat,
    t.auth,
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  );
  const s = typeof i.firebase == "object" ? i.firebase : void 0, o = s == null ? void 0 : s.sign_in_provider;
  return {
    claims: i,
    token: r,
    authTime: Ji(kc(i.auth_time)),
    issuedAtTime: Ji(kc(i.iat)),
    expirationTime: Ji(kc(i.exp)),
    signInProvider: o || null,
    signInSecondFactor: (s == null ? void 0 : s.sign_in_second_factor) || null
  };
}
function kc(n) {
  return Number(n) * 1e3;
}
function bl(n) {
  const [e, t, r] = n.split(".");
  if (e === void 0 || t === void 0 || r === void 0)
    return bo("JWT malformed, contained fewer than 3 sections"), null;
  try {
    const i = jg(t);
    return i ? JSON.parse(i) : (bo("Failed to decode base64 JWT payload"), null);
  } catch (i) {
    return bo("Caught error parsing JWT payload as JSON", i == null ? void 0 : i.toString()), null;
  }
}
function qd(n) {
  const e = bl(n);
  return ne(
    e,
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  ), ne(
    typeof e.exp < "u",
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  ), ne(
    typeof e.iat < "u",
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  ), Number(e.exp) - Number(e.iat);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function si(n, e, t = !1) {
  if (t)
    return e;
  try {
    return await e;
  } catch (r) {
    throw r instanceof ln && JA(r) && n.auth.currentUser === n && await n.auth.signOut(), r;
  }
}
function JA({ code: n }) {
  return n === "auth/user-disabled" || n === "auth/user-token-expired";
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class XA {
  constructor(e) {
    this.user = e, this.isRunning = !1, this.timerId = null, this.errorBackoff = 3e4;
  }
  _start() {
    this.isRunning || (this.isRunning = !0, this.schedule());
  }
  _stop() {
    this.isRunning && (this.isRunning = !1, this.timerId !== null && clearTimeout(this.timerId));
  }
  getInterval(e) {
    var t;
    if (e) {
      const r = this.errorBackoff;
      return this.errorBackoff = Math.min(
        this.errorBackoff * 2,
        96e4
        /* Duration.RETRY_BACKOFF_MAX */
      ), r;
    } else {
      this.errorBackoff = 3e4;
      const i = ((t = this.user.stsTokenManager.expirationTime) !== null && t !== void 0 ? t : 0) - Date.now() - 3e5;
      return Math.max(0, i);
    }
  }
  schedule(e = !1) {
    if (!this.isRunning)
      return;
    const t = this.getInterval(e);
    this.timerId = setTimeout(async () => {
      await this.iteration();
    }, t);
  }
  async iteration() {
    try {
      await this.user.getIdToken(!0);
    } catch (e) {
      (e == null ? void 0 : e.code) === "auth/network-request-failed" && this.schedule(
        /* wasError */
        !0
      );
      return;
    }
    this.schedule();
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Iu {
  constructor(e, t) {
    this.createdAt = e, this.lastLoginAt = t, this._initializeTime();
  }
  _initializeTime() {
    this.lastSignInTime = Ji(this.lastLoginAt), this.creationTime = Ji(this.createdAt);
  }
  _copy(e) {
    this.createdAt = e.createdAt, this.lastLoginAt = e.lastLoginAt, this._initializeTime();
  }
  toJSON() {
    return {
      createdAt: this.createdAt,
      lastLoginAt: this.lastLoginAt
    };
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function Ho(n) {
  var e;
  const t = n.auth, r = await n.getIdToken(), i = await si(n, ry(t, { idToken: r }));
  ne(
    i == null ? void 0 : i.users.length,
    t,
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  );
  const s = i.users[0];
  n._notifyReloadListener(s);
  const o = !((e = s.providerUserInfo) === null || e === void 0) && e.length ? iy(s.providerUserInfo) : [], c = eR(n.providerData, o), u = n.isAnonymous, l = !(n.email && s.passwordHash) && !(c != null && c.length), f = u ? l : !1, h = {
    uid: s.localId,
    displayName: s.displayName || null,
    photoURL: s.photoUrl || null,
    email: s.email || null,
    emailVerified: s.emailVerified || !1,
    phoneNumber: s.phoneNumber || null,
    tenantId: s.tenantId || null,
    providerData: c,
    metadata: new Iu(s.createdAt, s.lastLoginAt),
    isAnonymous: f
  };
  Object.assign(n, h);
}
async function ZA(n) {
  const e = Qe(n);
  await Ho(e), await e.auth._persistUserIfCurrent(e), e.auth._notifyListenersIfCurrent(e);
}
function eR(n, e) {
  return [...n.filter((r) => !e.some((i) => i.providerId === r.providerId)), ...e];
}
function iy(n) {
  return n.map((e) => {
    var { providerId: t } = e, r = vl(e, ["providerId"]);
    return {
      providerId: t,
      uid: r.rawId || "",
      displayName: r.displayName || null,
      email: r.email || null,
      phoneNumber: r.phoneNumber || null,
      photoURL: r.photoUrl || null
    };
  });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function tR(n, e) {
  const t = await ty(n, {}, async () => {
    const r = mi({
      grant_type: "refresh_token",
      refresh_token: e
    }).slice(1), { tokenApiHost: i, apiKey: s } = n.config, o = ny(n, i, "/v1/token", `key=${s}`), c = await n._getAdditionalHeaders();
    return c[
      "Content-Type"
      /* HttpHeader.CONTENT_TYPE */
    ] = "application/x-www-form-urlencoded", ey.fetch()(o, {
      method: "POST",
      headers: c,
      body: r
    });
  });
  return {
    accessToken: t.access_token,
    expiresIn: t.expires_in,
    refreshToken: t.refresh_token
  };
}
async function nR(n, e) {
  return hn(n, "POST", "/v2/accounts:revokeToken", Rn(n, e));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Yr {
  constructor() {
    this.refreshToken = null, this.accessToken = null, this.expirationTime = null;
  }
  get isExpired() {
    return !this.expirationTime || Date.now() > this.expirationTime - 3e4;
  }
  updateFromServerResponse(e) {
    ne(
      e.idToken,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), ne(
      typeof e.idToken < "u",
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), ne(
      typeof e.refreshToken < "u",
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    );
    const t = "expiresIn" in e && typeof e.expiresIn < "u" ? Number(e.expiresIn) : qd(e.idToken);
    this.updateTokensAndExpiration(e.idToken, e.refreshToken, t);
  }
  updateFromIdToken(e) {
    ne(
      e.length !== 0,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    );
    const t = qd(e);
    this.updateTokensAndExpiration(e, null, t);
  }
  async getToken(e, t = !1) {
    return !t && this.accessToken && !this.isExpired ? this.accessToken : (ne(
      this.refreshToken,
      e,
      "user-token-expired"
      /* AuthErrorCode.TOKEN_EXPIRED */
    ), this.refreshToken ? (await this.refresh(e, this.refreshToken), this.accessToken) : null);
  }
  clearRefreshToken() {
    this.refreshToken = null;
  }
  async refresh(e, t) {
    const { accessToken: r, refreshToken: i, expiresIn: s } = await tR(e, t);
    this.updateTokensAndExpiration(r, i, Number(s));
  }
  updateTokensAndExpiration(e, t, r) {
    this.refreshToken = t || null, this.accessToken = e || null, this.expirationTime = Date.now() + r * 1e3;
  }
  static fromJSON(e, t) {
    const { refreshToken: r, accessToken: i, expirationTime: s } = t, o = new Yr();
    return r && (ne(typeof r == "string", "internal-error", {
      appName: e
    }), o.refreshToken = r), i && (ne(typeof i == "string", "internal-error", {
      appName: e
    }), o.accessToken = i), s && (ne(typeof s == "number", "internal-error", {
      appName: e
    }), o.expirationTime = s), o;
  }
  toJSON() {
    return {
      refreshToken: this.refreshToken,
      accessToken: this.accessToken,
      expirationTime: this.expirationTime
    };
  }
  _assign(e) {
    this.accessToken = e.accessToken, this.refreshToken = e.refreshToken, this.expirationTime = e.expirationTime;
  }
  _clone() {
    return Object.assign(new Yr(), this.toJSON());
  }
  _performRefresh() {
    return _n("not implemented");
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Dn(n, e) {
  ne(typeof n == "string" || typeof n > "u", "internal-error", { appName: e });
}
class vn {
  constructor(e) {
    var { uid: t, auth: r, stsTokenManager: i } = e, s = vl(e, ["uid", "auth", "stsTokenManager"]);
    this.providerId = "firebase", this.proactiveRefresh = new XA(this), this.reloadUserInfo = null, this.reloadListener = null, this.uid = t, this.auth = r, this.stsTokenManager = i, this.accessToken = i.accessToken, this.displayName = s.displayName || null, this.email = s.email || null, this.emailVerified = s.emailVerified || !1, this.phoneNumber = s.phoneNumber || null, this.photoURL = s.photoURL || null, this.isAnonymous = s.isAnonymous || !1, this.tenantId = s.tenantId || null, this.providerData = s.providerData ? [...s.providerData] : [], this.metadata = new Iu(s.createdAt || void 0, s.lastLoginAt || void 0);
  }
  async getIdToken(e) {
    const t = await si(this, this.stsTokenManager.getToken(this.auth, e));
    return ne(
      t,
      this.auth,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), this.accessToken !== t && (this.accessToken = t, await this.auth._persistUserIfCurrent(this), this.auth._notifyListenersIfCurrent(this)), t;
  }
  getIdTokenResult(e) {
    return YA(this, e);
  }
  reload() {
    return ZA(this);
  }
  _assign(e) {
    this !== e && (ne(
      this.uid === e.uid,
      this.auth,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), this.displayName = e.displayName, this.photoURL = e.photoURL, this.email = e.email, this.emailVerified = e.emailVerified, this.phoneNumber = e.phoneNumber, this.isAnonymous = e.isAnonymous, this.tenantId = e.tenantId, this.providerData = e.providerData.map((t) => Object.assign({}, t)), this.metadata._copy(e.metadata), this.stsTokenManager._assign(e.stsTokenManager));
  }
  _clone(e) {
    const t = new vn(Object.assign(Object.assign({}, this), { auth: e, stsTokenManager: this.stsTokenManager._clone() }));
    return t.metadata._copy(this.metadata), t;
  }
  _onReload(e) {
    ne(
      !this.reloadListener,
      this.auth,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), this.reloadListener = e, this.reloadUserInfo && (this._notifyReloadListener(this.reloadUserInfo), this.reloadUserInfo = null);
  }
  _notifyReloadListener(e) {
    this.reloadListener ? this.reloadListener(e) : this.reloadUserInfo = e;
  }
  _startProactiveRefresh() {
    this.proactiveRefresh._start();
  }
  _stopProactiveRefresh() {
    this.proactiveRefresh._stop();
  }
  async _updateTokensIfNecessary(e, t = !1) {
    let r = !1;
    e.idToken && e.idToken !== this.stsTokenManager.accessToken && (this.stsTokenManager.updateFromServerResponse(e), r = !0), t && await Ho(this), await this.auth._persistUserIfCurrent(this), r && this.auth._notifyListenersIfCurrent(this);
  }
  async delete() {
    if (Ut(this.auth.app))
      return Promise.reject(rn(this.auth));
    const e = await this.getIdToken();
    return await si(this, QA(this.auth, { idToken: e })), this.stsTokenManager.clearRefreshToken(), this.auth.signOut();
  }
  toJSON() {
    return Object.assign(Object.assign({
      uid: this.uid,
      email: this.email || void 0,
      emailVerified: this.emailVerified,
      displayName: this.displayName || void 0,
      isAnonymous: this.isAnonymous,
      photoURL: this.photoURL || void 0,
      phoneNumber: this.phoneNumber || void 0,
      tenantId: this.tenantId || void 0,
      providerData: this.providerData.map((e) => Object.assign({}, e)),
      stsTokenManager: this.stsTokenManager.toJSON(),
      // Redirect event ID must be maintained in case there is a pending
      // redirect event.
      _redirectEventId: this._redirectEventId
    }, this.metadata.toJSON()), {
      // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):
      apiKey: this.auth.config.apiKey,
      appName: this.auth.name
    });
  }
  get refreshToken() {
    return this.stsTokenManager.refreshToken || "";
  }
  static _fromJSON(e, t) {
    var r, i, s, o, c, u, l, f;
    const h = (r = t.displayName) !== null && r !== void 0 ? r : void 0, y = (i = t.email) !== null && i !== void 0 ? i : void 0, T = (s = t.phoneNumber) !== null && s !== void 0 ? s : void 0, S = (o = t.photoURL) !== null && o !== void 0 ? o : void 0, C = (c = t.tenantId) !== null && c !== void 0 ? c : void 0, w = (u = t._redirectEventId) !== null && u !== void 0 ? u : void 0, E = (l = t.createdAt) !== null && l !== void 0 ? l : void 0, g = (f = t.lastLoginAt) !== null && f !== void 0 ? f : void 0, { uid: d, emailVerified: m, isAnonymous: v, providerData: I, stsTokenManager: R } = t;
    ne(
      d && R,
      e,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    );
    const b = Yr.fromJSON(this.name, R);
    ne(
      typeof d == "string",
      e,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), Dn(h, e.name), Dn(y, e.name), ne(
      typeof m == "boolean",
      e,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), ne(
      typeof v == "boolean",
      e,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), Dn(T, e.name), Dn(S, e.name), Dn(C, e.name), Dn(w, e.name), Dn(E, e.name), Dn(g, e.name);
    const A = new vn({
      uid: d,
      auth: e,
      email: y,
      emailVerified: m,
      displayName: h,
      isAnonymous: v,
      photoURL: S,
      phoneNumber: T,
      tenantId: C,
      stsTokenManager: b,
      createdAt: E,
      lastLoginAt: g
    });
    return I && Array.isArray(I) && (A.providerData = I.map((O) => Object.assign({}, O))), w && (A._redirectEventId = w), A;
  }
  /**
   * Initialize a User from an idToken server response
   * @param auth
   * @param idTokenResponse
   */
  static async _fromIdTokenResponse(e, t, r = !1) {
    const i = new Yr();
    i.updateFromServerResponse(t);
    const s = new vn({
      uid: t.localId,
      auth: e,
      stsTokenManager: i,
      isAnonymous: r
    });
    return await Ho(s), s;
  }
  /**
   * Initialize a User from an idToken server response
   * @param auth
   * @param idTokenResponse
   */
  static async _fromGetAccountInfoResponse(e, t, r) {
    const i = t.users[0];
    ne(
      i.localId !== void 0,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    );
    const s = i.providerUserInfo !== void 0 ? iy(i.providerUserInfo) : [], o = !(i.email && i.passwordHash) && !(s != null && s.length), c = new Yr();
    c.updateFromIdToken(r);
    const u = new vn({
      uid: i.localId,
      auth: e,
      stsTokenManager: c,
      isAnonymous: o
    }), l = {
      uid: i.localId,
      displayName: i.displayName || null,
      photoURL: i.photoUrl || null,
      email: i.email || null,
      emailVerified: i.emailVerified || !1,
      phoneNumber: i.phoneNumber || null,
      tenantId: i.tenantId || null,
      providerData: s,
      metadata: new Iu(i.createdAt, i.lastLoginAt),
      isAnonymous: !(i.email && i.passwordHash) && !(s != null && s.length)
    };
    return Object.assign(u, l), u;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Kd = /* @__PURE__ */ new Map();
function wn(n) {
  In(n instanceof Function, "Expected a class definition");
  let e = Kd.get(n);
  return e ? (In(e instanceof n, "Instance stored in cache mismatched with class"), e) : (e = new n(), Kd.set(n, e), e);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class sy {
  constructor() {
    this.type = "NONE", this.storage = {};
  }
  async _isAvailable() {
    return !0;
  }
  async _set(e, t) {
    this.storage[e] = t;
  }
  async _get(e) {
    const t = this.storage[e];
    return t === void 0 ? null : t;
  }
  async _remove(e) {
    delete this.storage[e];
  }
  _addListener(e, t) {
  }
  _removeListener(e, t) {
  }
}
sy.type = "NONE";
const zd = sy;
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Io(n, e, t) {
  return `firebase:${n}:${e}:${t}`;
}
class Jr {
  constructor(e, t, r) {
    this.persistence = e, this.auth = t, this.userKey = r;
    const { config: i, name: s } = this.auth;
    this.fullUserKey = Io(this.userKey, i.apiKey, s), this.fullPersistenceKey = Io("persistence", i.apiKey, s), this.boundEventHandler = t._onStorageEvent.bind(t), this.persistence._addListener(this.fullUserKey, this.boundEventHandler);
  }
  setCurrentUser(e) {
    return this.persistence._set(this.fullUserKey, e.toJSON());
  }
  async getCurrentUser() {
    const e = await this.persistence._get(this.fullUserKey);
    return e ? vn._fromJSON(this.auth, e) : null;
  }
  removeCurrentUser() {
    return this.persistence._remove(this.fullUserKey);
  }
  savePersistenceForRedirect() {
    return this.persistence._set(this.fullPersistenceKey, this.persistence.type);
  }
  async setPersistence(e) {
    if (this.persistence === e)
      return;
    const t = await this.getCurrentUser();
    if (await this.removeCurrentUser(), this.persistence = e, t)
      return this.setCurrentUser(t);
  }
  delete() {
    this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);
  }
  static async create(e, t, r = "authUser") {
    if (!t.length)
      return new Jr(wn(zd), e, r);
    const i = (await Promise.all(t.map(async (l) => {
      if (await l._isAvailable())
        return l;
    }))).filter((l) => l);
    let s = i[0] || wn(zd);
    const o = Io(r, e.config.apiKey, e.name);
    let c = null;
    for (const l of t)
      try {
        const f = await l._get(o);
        if (f) {
          const h = vn._fromJSON(e, f);
          l !== s && (c = h), s = l;
          break;
        }
      } catch {
      }
    const u = i.filter((l) => l._shouldAllowMigration);
    return !s._shouldAllowMigration || !u.length ? new Jr(s, e, r) : (s = u[0], c && await s._set(o, c.toJSON()), await Promise.all(t.map(async (l) => {
      if (l !== s)
        try {
          await l._remove(o);
        } catch {
        }
    })), new Jr(s, e, r));
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Hd(n) {
  const e = n.toLowerCase();
  if (e.includes("opera/") || e.includes("opr/") || e.includes("opios/"))
    return "Opera";
  if (cy(e))
    return "IEMobile";
  if (e.includes("msie") || e.includes("trident/"))
    return "IE";
  if (e.includes("edge/"))
    return "Edge";
  if (oy(e))
    return "Firefox";
  if (e.includes("silk/"))
    return "Silk";
  if (ly(e))
    return "Blackberry";
  if (hy(e))
    return "Webos";
  if (Il(e))
    return "Safari";
  if ((e.includes("chrome/") || ay(e)) && !e.includes("edge/"))
    return "Chrome";
  if (uy(e))
    return "Android";
  {
    const t = /([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/, r = n.match(t);
    if ((r == null ? void 0 : r.length) === 2)
      return r[1];
  }
  return "Other";
}
function oy(n = lt()) {
  return /firefox\//i.test(n);
}
function Il(n = lt()) {
  const e = n.toLowerCase();
  return e.includes("safari/") && !e.includes("chrome/") && !e.includes("crios/") && !e.includes("android");
}
function ay(n = lt()) {
  return /crios\//i.test(n);
}
function cy(n = lt()) {
  return /iemobile/i.test(n);
}
function uy(n = lt()) {
  return /android/i.test(n);
}
function ly(n = lt()) {
  return /blackberry/i.test(n);
}
function hy(n = lt()) {
  return /webos/i.test(n);
}
function Sa(n = lt()) {
  return /iphone|ipad|ipod/i.test(n) || /macintosh/i.test(n) && /mobile/i.test(n);
}
function rR(n = lt()) {
  var e;
  return Sa(n) && !!(!((e = window.navigator) === null || e === void 0) && e.standalone);
}
function iR() {
  return _S() && document.documentMode === 10;
}
function fy(n = lt()) {
  return Sa(n) || uy(n) || hy(n) || ly(n) || /windows phone/i.test(n) || cy(n);
}
function sR() {
  try {
    return !!(window && window !== window.top);
  } catch {
    return !1;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function dy(n, e = []) {
  let t;
  switch (n) {
    case "Browser":
      t = Hd(lt());
      break;
    case "Worker":
      t = `${Hd(lt())}-${n}`;
      break;
    default:
      t = n;
  }
  const r = e.length ? e.join(",") : "FirebaseCore-web";
  return `${t}/JsCore/${Dr}/${r}`;
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class oR {
  constructor(e) {
    this.auth = e, this.queue = [];
  }
  pushCallback(e, t) {
    const r = (s) => new Promise((o, c) => {
      try {
        const u = e(s);
        o(u);
      } catch (u) {
        c(u);
      }
    });
    r.onAbort = t, this.queue.push(r);
    const i = this.queue.length - 1;
    return () => {
      this.queue[i] = () => Promise.resolve();
    };
  }
  async runMiddleware(e) {
    if (this.auth.currentUser === e)
      return;
    const t = [];
    try {
      for (const r of this.queue)
        await r(e), r.onAbort && t.push(r.onAbort);
    } catch (r) {
      t.reverse();
      for (const i of t)
        try {
          i();
        } catch {
        }
      throw this.auth._errorFactory.create("login-blocked", {
        originalMessage: r == null ? void 0 : r.message
      });
    }
  }
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function aR(n, e = {}) {
  return hn(n, "GET", "/v2/passwordPolicy", Rn(n, e));
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const cR = 6;
class uR {
  constructor(e) {
    var t, r, i, s;
    const o = e.customStrengthOptions;
    this.customStrengthOptions = {}, this.customStrengthOptions.minPasswordLength = (t = o.minPasswordLength) !== null && t !== void 0 ? t : cR, o.maxPasswordLength && (this.customStrengthOptions.maxPasswordLength = o.maxPasswordLength), o.containsLowercaseCharacter !== void 0 && (this.customStrengthOptions.containsLowercaseLetter = o.containsLowercaseCharacter), o.containsUppercaseCharacter !== void 0 && (this.customStrengthOptions.containsUppercaseLetter = o.containsUppercaseCharacter), o.containsNumericCharacter !== void 0 && (this.customStrengthOptions.containsNumericCharacter = o.containsNumericCharacter), o.containsNonAlphanumericCharacter !== void 0 && (this.customStrengthOptions.containsNonAlphanumericCharacter = o.containsNonAlphanumericCharacter), this.enforcementState = e.enforcementState, this.enforcementState === "ENFORCEMENT_STATE_UNSPECIFIED" && (this.enforcementState = "OFF"), this.allowedNonAlphanumericCharacters = (i = (r = e.allowedNonAlphanumericCharacters) === null || r === void 0 ? void 0 : r.join("")) !== null && i !== void 0 ? i : "", this.forceUpgradeOnSignin = (s = e.forceUpgradeOnSignin) !== null && s !== void 0 ? s : !1, this.schemaVersion = e.schemaVersion;
  }
  validatePassword(e) {
    var t, r, i, s, o, c;
    const u = {
      isValid: !0,
      passwordPolicy: this
    };
    return this.validatePasswordLengthOptions(e, u), this.validatePasswordCharacterOptions(e, u), u.isValid && (u.isValid = (t = u.meetsMinPasswordLength) !== null && t !== void 0 ? t : !0), u.isValid && (u.isValid = (r = u.meetsMaxPasswordLength) !== null && r !== void 0 ? r : !0), u.isValid && (u.isValid = (i = u.containsLowercaseLetter) !== null && i !== void 0 ? i : !0), u.isValid && (u.isValid = (s = u.containsUppercaseLetter) !== null && s !== void 0 ? s : !0), u.isValid && (u.isValid = (o = u.containsNumericCharacter) !== null && o !== void 0 ? o : !0), u.isValid && (u.isValid = (c = u.containsNonAlphanumericCharacter) !== null && c !== void 0 ? c : !0), u;
  }
  /**
   * Validates that the password meets the length options for the policy.
   *
   * @param password Password to validate.
   * @param status Validation status.
   */
  validatePasswordLengthOptions(e, t) {
    const r = this.customStrengthOptions.minPasswordLength, i = this.customStrengthOptions.maxPasswordLength;
    r && (t.meetsMinPasswordLength = e.length >= r), i && (t.meetsMaxPasswordLength = e.length <= i);
  }
  /**
   * Validates that the password meets the character options for the policy.
   *
   * @param password Password to validate.
   * @param status Validation status.
   */
  validatePasswordCharacterOptions(e, t) {
    this.updatePasswordCharacterOptionsStatuses(
      t,
      /* containsLowercaseCharacter= */
      !1,
      /* containsUppercaseCharacter= */
      !1,
      /* containsNumericCharacter= */
      !1,
      /* containsNonAlphanumericCharacter= */
      !1
    );
    let r;
    for (let i = 0; i < e.length; i++)
      r = e.charAt(i), this.updatePasswordCharacterOptionsStatuses(
        t,
        /* containsLowercaseCharacter= */
        r >= "a" && r <= "z",
        /* containsUppercaseCharacter= */
        r >= "A" && r <= "Z",
        /* containsNumericCharacter= */
        r >= "0" && r <= "9",
        /* containsNonAlphanumericCharacter= */
        this.allowedNonAlphanumericCharacters.includes(r)
      );
  }
  /**
   * Updates the running validation status with the statuses for the character options.
   * Expected to be called each time a character is processed to update each option status
   * based on the current character.
   *
   * @param status Validation status.
   * @param containsLowercaseCharacter Whether the character is a lowercase letter.
   * @param containsUppercaseCharacter Whether the character is an uppercase letter.
   * @param containsNumericCharacter Whether the character is a numeric character.
   * @param containsNonAlphanumericCharacter Whether the character is a non-alphanumeric character.
   */
  updatePasswordCharacterOptionsStatuses(e, t, r, i, s) {
    this.customStrengthOptions.containsLowercaseLetter && (e.containsLowercaseLetter || (e.containsLowercaseLetter = t)), this.customStrengthOptions.containsUppercaseLetter && (e.containsUppercaseLetter || (e.containsUppercaseLetter = r)), this.customStrengthOptions.containsNumericCharacter && (e.containsNumericCharacter || (e.containsNumericCharacter = i)), this.customStrengthOptions.containsNonAlphanumericCharacter && (e.containsNonAlphanumericCharacter || (e.containsNonAlphanumericCharacter = s));
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class lR {
  constructor(e, t, r, i) {
    this.app = e, this.heartbeatServiceProvider = t, this.appCheckServiceProvider = r, this.config = i, this.currentUser = null, this.emulatorConfig = null, this.operations = Promise.resolve(), this.authStateSubscription = new Gd(this), this.idTokenSubscription = new Gd(this), this.beforeStateQueue = new oR(this), this.redirectUser = null, this.isProactiveRefreshEnabled = !1, this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION = 1, this._canInitEmulator = !0, this._isInitialized = !1, this._deleted = !1, this._initializationPromise = null, this._popupRedirectResolver = null, this._errorFactory = Xg, this._agentRecaptchaConfig = null, this._tenantRecaptchaConfigs = {}, this._projectPasswordPolicy = null, this._tenantPasswordPolicies = {}, this.lastNotifiedUid = void 0, this.languageCode = null, this.tenantId = null, this.settings = { appVerificationDisabledForTesting: !1 }, this.frameworks = [], this.name = e.name, this.clientVersion = i.sdkClientVersion;
  }
  _initializeWithPersistence(e, t) {
    return t && (this._popupRedirectResolver = wn(t)), this._initializationPromise = this.queue(async () => {
      var r, i;
      if (!this._deleted && (this.persistenceManager = await Jr.create(this, e), !this._deleted)) {
        if (!((r = this._popupRedirectResolver) === null || r === void 0) && r._shouldInitProactively)
          try {
            await this._popupRedirectResolver._initialize(this);
          } catch {
          }
        await this.initializeCurrentUser(t), this.lastNotifiedUid = ((i = this.currentUser) === null || i === void 0 ? void 0 : i.uid) || null, !this._deleted && (this._isInitialized = !0);
      }
    }), this._initializationPromise;
  }
  /**
   * If the persistence is changed in another window, the user manager will let us know
   */
  async _onStorageEvent() {
    if (this._deleted)
      return;
    const e = await this.assertedPersistence.getCurrentUser();
    if (!(!this.currentUser && !e)) {
      if (this.currentUser && e && this.currentUser.uid === e.uid) {
        this._currentUser._assign(e), await this.currentUser.getIdToken();
        return;
      }
      await this._updateCurrentUser(
        e,
        /* skipBeforeStateCallbacks */
        !0
      );
    }
  }
  async initializeCurrentUserFromIdToken(e) {
    try {
      const t = await ry(this, { idToken: e }), r = await vn._fromGetAccountInfoResponse(this, t, e);
      await this.directlySetCurrentUser(r);
    } catch (t) {
      console.warn("FirebaseServerApp could not login user with provided authIdToken: ", t), await this.directlySetCurrentUser(null);
    }
  }
  async initializeCurrentUser(e) {
    var t;
    if (Ut(this.app)) {
      const o = this.app.settings.authIdToken;
      return o ? new Promise((c) => {
        setTimeout(() => this.initializeCurrentUserFromIdToken(o).then(c, c));
      }) : this.directlySetCurrentUser(null);
    }
    const r = await this.assertedPersistence.getCurrentUser();
    let i = r, s = !1;
    if (e && this.config.authDomain) {
      await this.getOrInitRedirectPersistenceManager();
      const o = (t = this.redirectUser) === null || t === void 0 ? void 0 : t._redirectEventId, c = i == null ? void 0 : i._redirectEventId, u = await this.tryRedirectSignIn(e);
      (!o || o === c) && (u != null && u.user) && (i = u.user, s = !0);
    }
    if (!i)
      return this.directlySetCurrentUser(null);
    if (!i._redirectEventId) {
      if (s)
        try {
          await this.beforeStateQueue.runMiddleware(i);
        } catch (o) {
          i = r, this._popupRedirectResolver._overrideRedirectResult(this, () => Promise.reject(o));
        }
      return i ? this.reloadAndSetCurrentUserOrClear(i) : this.directlySetCurrentUser(null);
    }
    return ne(
      this._popupRedirectResolver,
      this,
      "argument-error"
      /* AuthErrorCode.ARGUMENT_ERROR */
    ), await this.getOrInitRedirectPersistenceManager(), this.redirectUser && this.redirectUser._redirectEventId === i._redirectEventId ? this.directlySetCurrentUser(i) : this.reloadAndSetCurrentUserOrClear(i);
  }
  async tryRedirectSignIn(e) {
    let t = null;
    try {
      t = await this._popupRedirectResolver._completeRedirectFn(this, e, !0);
    } catch {
      await this._setRedirectUser(null);
    }
    return t;
  }
  async reloadAndSetCurrentUserOrClear(e) {
    try {
      await Ho(e);
    } catch (t) {
      if ((t == null ? void 0 : t.code) !== "auth/network-request-failed")
        return this.directlySetCurrentUser(null);
    }
    return this.directlySetCurrentUser(e);
  }
  useDeviceLanguage() {
    this.languageCode = $A();
  }
  async _delete() {
    this._deleted = !0;
  }
  async updateCurrentUser(e) {
    if (Ut(this.app))
      return Promise.reject(rn(this));
    const t = e ? Qe(e) : null;
    return t && ne(
      t.auth.config.apiKey === this.config.apiKey,
      this,
      "invalid-user-token"
      /* AuthErrorCode.INVALID_AUTH */
    ), this._updateCurrentUser(t && t._clone(this));
  }
  async _updateCurrentUser(e, t = !1) {
    if (!this._deleted)
      return e && ne(
        this.tenantId === e.tenantId,
        this,
        "tenant-id-mismatch"
        /* AuthErrorCode.TENANT_ID_MISMATCH */
      ), t || await this.beforeStateQueue.runMiddleware(e), this.queue(async () => {
        await this.directlySetCurrentUser(e), this.notifyAuthListeners();
      });
  }
  async signOut() {
    return Ut(this.app) ? Promise.reject(rn(this)) : (await this.beforeStateQueue.runMiddleware(null), (this.redirectPersistenceManager || this._popupRedirectResolver) && await this._setRedirectUser(null), this._updateCurrentUser(
      null,
      /* skipBeforeStateCallbacks */
      !0
    ));
  }
  setPersistence(e) {
    return Ut(this.app) ? Promise.reject(rn(this)) : this.queue(async () => {
      await this.assertedPersistence.setPersistence(wn(e));
    });
  }
  _getRecaptchaConfig() {
    return this.tenantId == null ? this._agentRecaptchaConfig : this._tenantRecaptchaConfigs[this.tenantId];
  }
  async validatePassword(e) {
    this._getPasswordPolicyInternal() || await this._updatePasswordPolicy();
    const t = this._getPasswordPolicyInternal();
    return t.schemaVersion !== this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION ? Promise.reject(this._errorFactory.create("unsupported-password-policy-schema-version", {})) : t.validatePassword(e);
  }
  _getPasswordPolicyInternal() {
    return this.tenantId === null ? this._projectPasswordPolicy : this._tenantPasswordPolicies[this.tenantId];
  }
  async _updatePasswordPolicy() {
    const e = await aR(this), t = new uR(e);
    this.tenantId === null ? this._projectPasswordPolicy = t : this._tenantPasswordPolicies[this.tenantId] = t;
  }
  _getPersistence() {
    return this.assertedPersistence.persistence.type;
  }
  _updateErrorMap(e) {
    this._errorFactory = new Is("auth", "Firebase", e());
  }
  onAuthStateChanged(e, t, r) {
    return this.registerStateListener(this.authStateSubscription, e, t, r);
  }
  beforeAuthStateChanged(e, t) {
    return this.beforeStateQueue.pushCallback(e, t);
  }
  onIdTokenChanged(e, t, r) {
    return this.registerStateListener(this.idTokenSubscription, e, t, r);
  }
  authStateReady() {
    return new Promise((e, t) => {
      if (this.currentUser)
        e();
      else {
        const r = this.onAuthStateChanged(() => {
          r(), e();
        }, t);
      }
    });
  }
  /**
   * Revokes the given access token. Currently only supports Apple OAuth access tokens.
   */
  async revokeAccessToken(e) {
    if (this.currentUser) {
      const t = await this.currentUser.getIdToken(), r = {
        providerId: "apple.com",
        tokenType: "ACCESS_TOKEN",
        token: e,
        idToken: t
      };
      this.tenantId != null && (r.tenantId = this.tenantId), await nR(this, r);
    }
  }
  toJSON() {
    var e;
    return {
      apiKey: this.config.apiKey,
      authDomain: this.config.authDomain,
      appName: this.name,
      currentUser: (e = this._currentUser) === null || e === void 0 ? void 0 : e.toJSON()
    };
  }
  async _setRedirectUser(e, t) {
    const r = await this.getOrInitRedirectPersistenceManager(t);
    return e === null ? r.removeCurrentUser() : r.setCurrentUser(e);
  }
  async getOrInitRedirectPersistenceManager(e) {
    if (!this.redirectPersistenceManager) {
      const t = e && wn(e) || this._popupRedirectResolver;
      ne(
        t,
        this,
        "argument-error"
        /* AuthErrorCode.ARGUMENT_ERROR */
      ), this.redirectPersistenceManager = await Jr.create(
        this,
        [wn(t._redirectPersistence)],
        "redirectUser"
        /* KeyName.REDIRECT_USER */
      ), this.redirectUser = await this.redirectPersistenceManager.getCurrentUser();
    }
    return this.redirectPersistenceManager;
  }
  async _redirectUserForId(e) {
    var t, r;
    return this._isInitialized && await this.queue(async () => {
    }), ((t = this._currentUser) === null || t === void 0 ? void 0 : t._redirectEventId) === e ? this._currentUser : ((r = this.redirectUser) === null || r === void 0 ? void 0 : r._redirectEventId) === e ? this.redirectUser : null;
  }
  async _persistUserIfCurrent(e) {
    if (e === this.currentUser)
      return this.queue(async () => this.directlySetCurrentUser(e));
  }
  /** Notifies listeners only if the user is current */
  _notifyListenersIfCurrent(e) {
    e === this.currentUser && this.notifyAuthListeners();
  }
  _key() {
    return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;
  }
  _startProactiveRefresh() {
    this.isProactiveRefreshEnabled = !0, this.currentUser && this._currentUser._startProactiveRefresh();
  }
  _stopProactiveRefresh() {
    this.isProactiveRefreshEnabled = !1, this.currentUser && this._currentUser._stopProactiveRefresh();
  }
  /** Returns the current user cast as the internal type */
  get _currentUser() {
    return this.currentUser;
  }
  notifyAuthListeners() {
    var e, t;
    if (!this._isInitialized)
      return;
    this.idTokenSubscription.next(this.currentUser);
    const r = (t = (e = this.currentUser) === null || e === void 0 ? void 0 : e.uid) !== null && t !== void 0 ? t : null;
    this.lastNotifiedUid !== r && (this.lastNotifiedUid = r, this.authStateSubscription.next(this.currentUser));
  }
  registerStateListener(e, t, r, i) {
    if (this._deleted)
      return () => {
      };
    const s = typeof t == "function" ? t : t.next.bind(t);
    let o = !1;
    const c = this._isInitialized ? Promise.resolve() : this._initializationPromise;
    if (ne(
      c,
      this,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), c.then(() => {
      o || s(this.currentUser);
    }), typeof t == "function") {
      const u = e.addObserver(t, r, i);
      return () => {
        o = !0, u();
      };
    } else {
      const u = e.addObserver(t);
      return () => {
        o = !0, u();
      };
    }
  }
  /**
   * Unprotected (from race conditions) method to set the current user. This
   * should only be called from within a queued callback. This is necessary
   * because the queue shouldn't rely on another queued callback.
   */
  async directlySetCurrentUser(e) {
    this.currentUser && this.currentUser !== e && this._currentUser._stopProactiveRefresh(), e && this.isProactiveRefreshEnabled && e._startProactiveRefresh(), this.currentUser = e, e ? await this.assertedPersistence.setCurrentUser(e) : await this.assertedPersistence.removeCurrentUser();
  }
  queue(e) {
    return this.operations = this.operations.then(e, e), this.operations;
  }
  get assertedPersistence() {
    return ne(
      this.persistenceManager,
      this,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), this.persistenceManager;
  }
  _logFramework(e) {
    !e || this.frameworks.includes(e) || (this.frameworks.push(e), this.frameworks.sort(), this.clientVersion = dy(this.config.clientPlatform, this._getFrameworks()));
  }
  _getFrameworks() {
    return this.frameworks;
  }
  async _getAdditionalHeaders() {
    var e;
    const t = {
      "X-Client-Version": this.clientVersion
    };
    this.app.options.appId && (t[
      "X-Firebase-gmpid"
      /* HttpHeader.X_FIREBASE_GMPID */
    ] = this.app.options.appId);
    const r = await ((e = this.heartbeatServiceProvider.getImmediate({
      optional: !0
    })) === null || e === void 0 ? void 0 : e.getHeartbeatsHeader());
    r && (t[
      "X-Firebase-Client"
      /* HttpHeader.X_FIREBASE_CLIENT */
    ] = r);
    const i = await this._getAppCheckToken();
    return i && (t[
      "X-Firebase-AppCheck"
      /* HttpHeader.X_FIREBASE_APP_CHECK */
    ] = i), t;
  }
  async _getAppCheckToken() {
    var e;
    const t = await ((e = this.appCheckServiceProvider.getImmediate({ optional: !0 })) === null || e === void 0 ? void 0 : e.getToken());
    return t != null && t.error && FA(`Error while retrieving App Check token: ${t.error}`), t == null ? void 0 : t.token;
  }
}
function fn(n) {
  return Qe(n);
}
class Gd {
  constructor(e) {
    this.auth = e, this.observer = null, this.addObserver = AS((t) => this.observer = t);
  }
  get next() {
    return ne(
      this.observer,
      this.auth,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), this.observer.next.bind(this.observer);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
let As = {
  async loadJS() {
    throw new Error("Unable to load external scripts");
  },
  recaptchaV2Script: "",
  recaptchaEnterpriseScript: "",
  gapiScript: ""
};
function hR(n) {
  As = n;
}
function Sl(n) {
  return As.loadJS(n);
}
function fR() {
  return As.recaptchaV2Script;
}
function dR() {
  return As.recaptchaEnterpriseScript;
}
function pR() {
  return As.gapiScript;
}
function py(n) {
  return `__${n}${Math.floor(Math.random() * 1e6)}`;
}
const mR = "recaptcha-enterprise", gR = "NO_RECAPTCHA";
class yR {
  /**
   *
   * @param authExtern - The corresponding Firebase {@link Auth} instance.
   *
   */
  constructor(e) {
    this.type = mR, this.auth = fn(e);
  }
  /**
   * Executes the verification process.
   *
   * @returns A Promise for a token that can be used to assert the validity of a request.
   */
  async verify(e = "verify", t = !1) {
    async function r(s) {
      if (!t) {
        if (s.tenantId == null && s._agentRecaptchaConfig != null)
          return s._agentRecaptchaConfig.siteKey;
        if (s.tenantId != null && s._tenantRecaptchaConfigs[s.tenantId] !== void 0)
          return s._tenantRecaptchaConfigs[s.tenantId].siteKey;
      }
      return new Promise(async (o, c) => {
        WA(s, {
          clientType: "CLIENT_TYPE_WEB",
          version: "RECAPTCHA_ENTERPRISE"
          /* RecaptchaVersion.ENTERPRISE */
        }).then((u) => {
          if (u.recaptchaKey === void 0)
            c(new Error("recaptcha Enterprise site key undefined"));
          else {
            const l = new HA(u);
            return s.tenantId == null ? s._agentRecaptchaConfig = l : s._tenantRecaptchaConfigs[s.tenantId] = l, o(l.siteKey);
          }
        }).catch((u) => {
          c(u);
        });
      });
    }
    function i(s, o, c) {
      const u = window.grecaptcha;
      Bd(u) ? u.enterprise.ready(() => {
        u.enterprise.execute(s, { action: e }).then((l) => {
          o(l);
        }).catch(() => {
          o(gR);
        });
      }) : c(Error("No reCAPTCHA enterprise script loaded."));
    }
    return new Promise((s, o) => {
      r(this.auth).then((c) => {
        if (!t && Bd(window.grecaptcha))
          i(c, s, o);
        else {
          if (typeof window > "u") {
            o(new Error("RecaptchaVerifier is only supported in browser"));
            return;
          }
          let u = dR();
          u.length !== 0 && (u += c), Sl(u).then(() => {
            i(c, s, o);
          }).catch((l) => {
            o(l);
          });
        }
      }).catch((c) => {
        o(c);
      });
    });
  }
}
async function Wd(n, e, t, r = !1) {
  const i = new yR(n);
  let s;
  try {
    s = await i.verify(t);
  } catch {
    s = await i.verify(t, !0);
  }
  const o = Object.assign({}, e);
  return r ? Object.assign(o, { captchaResp: s }) : Object.assign(o, { captchaResponse: s }), Object.assign(o, {
    clientType: "CLIENT_TYPE_WEB"
    /* RecaptchaClientType.WEB */
  }), Object.assign(o, {
    recaptchaVersion: "RECAPTCHA_ENTERPRISE"
    /* RecaptchaVersion.ENTERPRISE */
  }), o;
}
async function Su(n, e, t, r) {
  var i;
  if (!((i = n._getRecaptchaConfig()) === null || i === void 0) && i.isProviderEnabled(
    "EMAIL_PASSWORD_PROVIDER"
    /* RecaptchaProvider.EMAIL_PASSWORD_PROVIDER */
  )) {
    const s = await Wd(
      n,
      e,
      t,
      t === "getOobCode"
      /* RecaptchaActionName.GET_OOB_CODE */
    );
    return r(n, s);
  } else
    return r(n, e).catch(async (s) => {
      if (s.code === "auth/missing-recaptcha-token") {
        console.log(`${t} is protected by reCAPTCHA Enterprise for this project. Automatically triggering the reCAPTCHA flow and restarting the flow.`);
        const o = await Wd(
          n,
          e,
          t,
          t === "getOobCode"
          /* RecaptchaActionName.GET_OOB_CODE */
        );
        return r(n, o);
      } else
        return Promise.reject(s);
    });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _R(n, e) {
  const t = Ia(n, "auth");
  if (t.isInitialized()) {
    const i = t.getImmediate(), s = t.getOptions();
    if (qo(s, e ?? {}))
      return i;
    qt(
      i,
      "already-initialized"
      /* AuthErrorCode.ALREADY_INITIALIZED */
    );
  }
  return t.initialize({ options: e });
}
function vR(n, e) {
  const t = (e == null ? void 0 : e.persistence) || [], r = (Array.isArray(t) ? t : [t]).map(wn);
  e != null && e.errorMap && n._updateErrorMap(e.errorMap), n._initializeWithPersistence(r, e == null ? void 0 : e.popupRedirectResolver);
}
function wR(n, e, t) {
  const r = fn(n);
  ne(
    r._canInitEmulator,
    r,
    "emulator-config-failed"
    /* AuthErrorCode.EMULATOR_CONFIG_FAILED */
  ), ne(
    /^https?:\/\//.test(e),
    r,
    "invalid-emulator-scheme"
    /* AuthErrorCode.INVALID_EMULATOR_SCHEME */
  );
  const i = !1, s = my(e), { host: o, port: c } = ER(e), u = c === null ? "" : `:${c}`;
  r.config.emulator = { url: `${s}//${o}${u}/` }, r.settings.appVerificationDisabledForTesting = !0, r.emulatorConfig = Object.freeze({
    host: o,
    port: c,
    protocol: s.replace(":", ""),
    options: Object.freeze({ disableWarnings: i })
  }), TR();
}
function my(n) {
  const e = n.indexOf(":");
  return e < 0 ? "" : n.substr(0, e + 1);
}
function ER(n) {
  const e = my(n), t = /(\/\/)?([^?#/]+)/.exec(n.substr(e.length));
  if (!t)
    return { host: "", port: null };
  const r = t[2].split("@").pop() || "", i = /^(\[[^\]]+\])(:|$)/.exec(r);
  if (i) {
    const s = i[1];
    return { host: s, port: Qd(r.substr(s.length + 1)) };
  } else {
    const [s, o] = r.split(":");
    return { host: s, port: Qd(o) };
  }
}
function Qd(n) {
  if (!n)
    return null;
  const e = Number(n);
  return isNaN(e) ? null : e;
}
function TR() {
  function n() {
    const e = document.createElement("p"), t = e.style;
    e.innerText = "Running in emulator mode. Do not use with production credentials.", t.position = "fixed", t.width = "100%", t.backgroundColor = "#ffffff", t.border = ".1em solid #000000", t.color = "#b50000", t.bottom = "0px", t.left = "0px", t.margin = "0px", t.zIndex = "10000", t.textAlign = "center", e.classList.add("firebase-emulator-warning"), document.body.appendChild(e);
  }
  typeof console < "u" && typeof console.info == "function" && console.info("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials."), typeof window < "u" && typeof document < "u" && (document.readyState === "loading" ? window.addEventListener("DOMContentLoaded", n) : n());
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Al {
  /** @internal */
  constructor(e, t) {
    this.providerId = e, this.signInMethod = t;
  }
  /**
   * Returns a JSON-serializable representation of this object.
   *
   * @returns a JSON-serializable representation of this object.
   */
  toJSON() {
    return _n("not implemented");
  }
  /** @internal */
  _getIdTokenResponse(e) {
    return _n("not implemented");
  }
  /** @internal */
  _linkToIdToken(e, t) {
    return _n("not implemented");
  }
  /** @internal */
  _getReauthenticationResolver(e) {
    return _n("not implemented");
  }
}
async function bR(n, e) {
  return hn(n, "POST", "/v1/accounts:signUp", e);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function IR(n, e) {
  return gi(n, "POST", "/v1/accounts:signInWithPassword", Rn(n, e));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function SR(n, e) {
  return gi(n, "POST", "/v1/accounts:signInWithEmailLink", Rn(n, e));
}
async function AR(n, e) {
  return gi(n, "POST", "/v1/accounts:signInWithEmailLink", Rn(n, e));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ls extends Al {
  /** @internal */
  constructor(e, t, r, i = null) {
    super("password", r), this._email = e, this._password = t, this._tenantId = i;
  }
  /** @internal */
  static _fromEmailAndPassword(e, t) {
    return new ls(
      e,
      t,
      "password"
      /* SignInMethod.EMAIL_PASSWORD */
    );
  }
  /** @internal */
  static _fromEmailAndCode(e, t, r = null) {
    return new ls(e, t, "emailLink", r);
  }
  /** {@inheritdoc AuthCredential.toJSON} */
  toJSON() {
    return {
      email: this._email,
      password: this._password,
      signInMethod: this.signInMethod,
      tenantId: this._tenantId
    };
  }
  /**
   * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.
   *
   * @param json - Either `object` or the stringified representation of the object. When string is
   * provided, `JSON.parse` would be called first.
   *
   * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.
   */
  static fromJSON(e) {
    const t = typeof e == "string" ? JSON.parse(e) : e;
    if (t != null && t.email && (t != null && t.password)) {
      if (t.signInMethod === "password")
        return this._fromEmailAndPassword(t.email, t.password);
      if (t.signInMethod === "emailLink")
        return this._fromEmailAndCode(t.email, t.password, t.tenantId);
    }
    return null;
  }
  /** @internal */
  async _getIdTokenResponse(e) {
    switch (this.signInMethod) {
      case "password":
        const t = {
          returnSecureToken: !0,
          email: this._email,
          password: this._password,
          clientType: "CLIENT_TYPE_WEB"
          /* RecaptchaClientType.WEB */
        };
        return Su(e, t, "signInWithPassword", IR);
      case "emailLink":
        return SR(e, {
          email: this._email,
          oobCode: this._password
        });
      default:
        qt(
          e,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
    }
  }
  /** @internal */
  async _linkToIdToken(e, t) {
    switch (this.signInMethod) {
      case "password":
        const r = {
          idToken: t,
          returnSecureToken: !0,
          email: this._email,
          password: this._password,
          clientType: "CLIENT_TYPE_WEB"
          /* RecaptchaClientType.WEB */
        };
        return Su(e, r, "signUpPassword", bR);
      case "emailLink":
        return AR(e, {
          idToken: t,
          email: this._email,
          oobCode: this._password
        });
      default:
        qt(
          e,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
    }
  }
  /** @internal */
  _getReauthenticationResolver(e) {
    return this._getIdTokenResponse(e);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function Xr(n, e) {
  return gi(n, "POST", "/v1/accounts:signInWithIdp", Rn(n, e));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const RR = "http://localhost";
class Ir extends Al {
  constructor() {
    super(...arguments), this.pendingToken = null;
  }
  /** @internal */
  static _fromParams(e) {
    const t = new Ir(e.providerId, e.signInMethod);
    return e.idToken || e.accessToken ? (e.idToken && (t.idToken = e.idToken), e.accessToken && (t.accessToken = e.accessToken), e.nonce && !e.pendingToken && (t.nonce = e.nonce), e.pendingToken && (t.pendingToken = e.pendingToken)) : e.oauthToken && e.oauthTokenSecret ? (t.accessToken = e.oauthToken, t.secret = e.oauthTokenSecret) : qt(
      "argument-error"
      /* AuthErrorCode.ARGUMENT_ERROR */
    ), t;
  }
  /** {@inheritdoc AuthCredential.toJSON}  */
  toJSON() {
    return {
      idToken: this.idToken,
      accessToken: this.accessToken,
      secret: this.secret,
      nonce: this.nonce,
      pendingToken: this.pendingToken,
      providerId: this.providerId,
      signInMethod: this.signInMethod
    };
  }
  /**
   * Static method to deserialize a JSON representation of an object into an
   * {@link  AuthCredential}.
   *
   * @param json - Input can be either Object or the stringified representation of the object.
   * When string is provided, JSON.parse would be called first.
   *
   * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.
   */
  static fromJSON(e) {
    const t = typeof e == "string" ? JSON.parse(e) : e, { providerId: r, signInMethod: i } = t, s = vl(t, ["providerId", "signInMethod"]);
    if (!r || !i)
      return null;
    const o = new Ir(r, i);
    return o.idToken = s.idToken || void 0, o.accessToken = s.accessToken || void 0, o.secret = s.secret, o.nonce = s.nonce, o.pendingToken = s.pendingToken || null, o;
  }
  /** @internal */
  _getIdTokenResponse(e) {
    const t = this.buildRequest();
    return Xr(e, t);
  }
  /** @internal */
  _linkToIdToken(e, t) {
    const r = this.buildRequest();
    return r.idToken = t, Xr(e, r);
  }
  /** @internal */
  _getReauthenticationResolver(e) {
    const t = this.buildRequest();
    return t.autoCreate = !1, Xr(e, t);
  }
  buildRequest() {
    const e = {
      requestUri: RR,
      returnSecureToken: !0
    };
    if (this.pendingToken)
      e.pendingToken = this.pendingToken;
    else {
      const t = {};
      this.idToken && (t.id_token = this.idToken), this.accessToken && (t.access_token = this.accessToken), this.secret && (t.oauth_token_secret = this.secret), t.providerId = this.providerId, this.nonce && !this.pendingToken && (t.nonce = this.nonce), e.postBody = mi(t);
    }
    return e;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function CR(n) {
  switch (n) {
    case "recoverEmail":
      return "RECOVER_EMAIL";
    case "resetPassword":
      return "PASSWORD_RESET";
    case "signIn":
      return "EMAIL_SIGNIN";
    case "verifyEmail":
      return "VERIFY_EMAIL";
    case "verifyAndChangeEmail":
      return "VERIFY_AND_CHANGE_EMAIL";
    case "revertSecondFactorAddition":
      return "REVERT_SECOND_FACTOR_ADDITION";
    default:
      return null;
  }
}
function PR(n) {
  const e = Ki(zi(n)).link, t = e ? Ki(zi(e)).deep_link_id : null, r = Ki(zi(n)).deep_link_id;
  return (r ? Ki(zi(r)).link : null) || r || t || e || n;
}
class Rl {
  /**
   * @param actionLink - The link from which to extract the URL.
   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.
   *
   * @internal
   */
  constructor(e) {
    var t, r, i, s, o, c;
    const u = Ki(zi(e)), l = (t = u.apiKey) !== null && t !== void 0 ? t : null, f = (r = u.oobCode) !== null && r !== void 0 ? r : null, h = CR((i = u.mode) !== null && i !== void 0 ? i : null);
    ne(
      l && f && h,
      "argument-error"
      /* AuthErrorCode.ARGUMENT_ERROR */
    ), this.apiKey = l, this.operation = h, this.code = f, this.continueUrl = (s = u.continueUrl) !== null && s !== void 0 ? s : null, this.languageCode = (o = u.languageCode) !== null && o !== void 0 ? o : null, this.tenantId = (c = u.tenantId) !== null && c !== void 0 ? c : null;
  }
  /**
   * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,
   * otherwise returns null.
   *
   * @param link  - The email action link string.
   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.
   *
   * @public
   */
  static parseLink(e) {
    const t = PR(e);
    try {
      return new Rl(t);
    } catch {
      return null;
    }
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class yi {
  constructor() {
    this.providerId = yi.PROVIDER_ID;
  }
  /**
   * Initialize an {@link AuthCredential} using an email and password.
   *
   * @example
   * ```javascript
   * const authCredential = EmailAuthProvider.credential(email, password);
   * const userCredential = await signInWithCredential(auth, authCredential);
   * ```
   *
   * @example
   * ```javascript
   * const userCredential = await signInWithEmailAndPassword(auth, email, password);
   * ```
   *
   * @param email - Email address.
   * @param password - User account password.
   * @returns The auth provider credential.
   */
  static credential(e, t) {
    return ls._fromEmailAndPassword(e, t);
  }
  /**
   * Initialize an {@link AuthCredential} using an email and an email link after a sign in with
   * email link operation.
   *
   * @example
   * ```javascript
   * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);
   * const userCredential = await signInWithCredential(auth, authCredential);
   * ```
   *
   * @example
   * ```javascript
   * await sendSignInLinkToEmail(auth, email);
   * // Obtain emailLink from user.
   * const userCredential = await signInWithEmailLink(auth, email, emailLink);
   * ```
   *
   * @param auth - The {@link Auth} instance used to verify the link.
   * @param email - Email address.
   * @param emailLink - Sign-in email link.
   * @returns - The auth provider credential.
   */
  static credentialWithLink(e, t) {
    const r = Rl.parseLink(t);
    return ne(
      r,
      "argument-error"
      /* AuthErrorCode.ARGUMENT_ERROR */
    ), ls._fromEmailAndCode(e, r.code, r.tenantId);
  }
}
yi.PROVIDER_ID = "password";
yi.EMAIL_PASSWORD_SIGN_IN_METHOD = "password";
yi.EMAIL_LINK_SIGN_IN_METHOD = "emailLink";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Cl {
  /**
   * Constructor for generic OAuth providers.
   *
   * @param providerId - Provider for which credentials should be generated.
   */
  constructor(e) {
    this.providerId = e, this.defaultLanguageCode = null, this.customParameters = {};
  }
  /**
   * Set the language gode.
   *
   * @param languageCode - language code
   */
  setDefaultLanguage(e) {
    this.defaultLanguageCode = e;
  }
  /**
   * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in
   * operations.
   *
   * @remarks
   * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,
   * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.
   *
   * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.
   */
  setCustomParameters(e) {
    return this.customParameters = e, this;
  }
  /**
   * Retrieve the current list of {@link CustomParameters}.
   */
  getCustomParameters() {
    return this.customParameters;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Rs extends Cl {
  constructor() {
    super(...arguments), this.scopes = [];
  }
  /**
   * Add an OAuth scope to the credential.
   *
   * @param scope - Provider OAuth scope to add.
   */
  addScope(e) {
    return this.scopes.includes(e) || this.scopes.push(e), this;
  }
  /**
   * Retrieve the current list of OAuth scopes.
   */
  getScopes() {
    return [...this.scopes];
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Ln extends Rs {
  constructor() {
    super(
      "facebook.com"
      /* ProviderId.FACEBOOK */
    );
  }
  /**
   * Creates a credential for Facebook.
   *
   * @example
   * ```javascript
   * // `event` from the Facebook auth.authResponseChange callback.
   * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);
   * const result = await signInWithCredential(credential);
   * ```
   *
   * @param accessToken - Facebook access token.
   */
  static credential(e) {
    return Ir._fromParams({
      providerId: Ln.PROVIDER_ID,
      signInMethod: Ln.FACEBOOK_SIGN_IN_METHOD,
      accessToken: e
    });
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromResult(e) {
    return Ln.credentialFromTaggedObject(e);
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
   * thrown during a sign-in, link, or reauthenticate operation.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromError(e) {
    return Ln.credentialFromTaggedObject(e.customData || {});
  }
  static credentialFromTaggedObject({ _tokenResponse: e }) {
    if (!e || !("oauthAccessToken" in e) || !e.oauthAccessToken)
      return null;
    try {
      return Ln.credential(e.oauthAccessToken);
    } catch {
      return null;
    }
  }
}
Ln.FACEBOOK_SIGN_IN_METHOD = "facebook.com";
Ln.PROVIDER_ID = "facebook.com";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Mn extends Rs {
  constructor() {
    super(
      "google.com"
      /* ProviderId.GOOGLE */
    ), this.addScope("profile");
  }
  /**
   * Creates a credential for Google. At least one of ID token and access token is required.
   *
   * @example
   * ```javascript
   * // \`googleUser\` from the onsuccess Google Sign In callback.
   * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);
   * const result = await signInWithCredential(credential);
   * ```
   *
   * @param idToken - Google ID token.
   * @param accessToken - Google access token.
   */
  static credential(e, t) {
    return Ir._fromParams({
      providerId: Mn.PROVIDER_ID,
      signInMethod: Mn.GOOGLE_SIGN_IN_METHOD,
      idToken: e,
      accessToken: t
    });
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromResult(e) {
    return Mn.credentialFromTaggedObject(e);
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
   * thrown during a sign-in, link, or reauthenticate operation.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromError(e) {
    return Mn.credentialFromTaggedObject(e.customData || {});
  }
  static credentialFromTaggedObject({ _tokenResponse: e }) {
    if (!e)
      return null;
    const { oauthIdToken: t, oauthAccessToken: r } = e;
    if (!t && !r)
      return null;
    try {
      return Mn.credential(t, r);
    } catch {
      return null;
    }
  }
}
Mn.GOOGLE_SIGN_IN_METHOD = "google.com";
Mn.PROVIDER_ID = "google.com";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Vn extends Rs {
  constructor() {
    super(
      "github.com"
      /* ProviderId.GITHUB */
    );
  }
  /**
   * Creates a credential for GitHub.
   *
   * @param accessToken - GitHub access token.
   */
  static credential(e) {
    return Ir._fromParams({
      providerId: Vn.PROVIDER_ID,
      signInMethod: Vn.GITHUB_SIGN_IN_METHOD,
      accessToken: e
    });
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromResult(e) {
    return Vn.credentialFromTaggedObject(e);
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
   * thrown during a sign-in, link, or reauthenticate operation.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromError(e) {
    return Vn.credentialFromTaggedObject(e.customData || {});
  }
  static credentialFromTaggedObject({ _tokenResponse: e }) {
    if (!e || !("oauthAccessToken" in e) || !e.oauthAccessToken)
      return null;
    try {
      return Vn.credential(e.oauthAccessToken);
    } catch {
      return null;
    }
  }
}
Vn.GITHUB_SIGN_IN_METHOD = "github.com";
Vn.PROVIDER_ID = "github.com";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Fn extends Rs {
  constructor() {
    super(
      "twitter.com"
      /* ProviderId.TWITTER */
    );
  }
  /**
   * Creates a credential for Twitter.
   *
   * @param token - Twitter access token.
   * @param secret - Twitter secret.
   */
  static credential(e, t) {
    return Ir._fromParams({
      providerId: Fn.PROVIDER_ID,
      signInMethod: Fn.TWITTER_SIGN_IN_METHOD,
      oauthToken: e,
      oauthTokenSecret: t
    });
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromResult(e) {
    return Fn.credentialFromTaggedObject(e);
  }
  /**
   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
   * thrown during a sign-in, link, or reauthenticate operation.
   *
   * @param userCredential - The user credential.
   */
  static credentialFromError(e) {
    return Fn.credentialFromTaggedObject(e.customData || {});
  }
  static credentialFromTaggedObject({ _tokenResponse: e }) {
    if (!e)
      return null;
    const { oauthAccessToken: t, oauthTokenSecret: r } = e;
    if (!t || !r)
      return null;
    try {
      return Fn.credential(t, r);
    } catch {
      return null;
    }
  }
}
Fn.TWITTER_SIGN_IN_METHOD = "twitter.com";
Fn.PROVIDER_ID = "twitter.com";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function kR(n, e) {
  return gi(n, "POST", "/v1/accounts:signUp", Rn(n, e));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Hn {
  constructor(e) {
    this.user = e.user, this.providerId = e.providerId, this._tokenResponse = e._tokenResponse, this.operationType = e.operationType;
  }
  static async _fromIdTokenResponse(e, t, r, i = !1) {
    const s = await vn._fromIdTokenResponse(e, r, i), o = Yd(r);
    return new Hn({
      user: s,
      providerId: o,
      _tokenResponse: r,
      operationType: t
    });
  }
  static async _forOperation(e, t, r) {
    await e._updateTokensIfNecessary(
      r,
      /* reload */
      !0
    );
    const i = Yd(r);
    return new Hn({
      user: e,
      providerId: i,
      _tokenResponse: r,
      operationType: t
    });
  }
}
function Yd(n) {
  return n.providerId ? n.providerId : "phoneNumber" in n ? "phone" : null;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Go extends ln {
  constructor(e, t, r, i) {
    var s;
    super(t.code, t.message), this.operationType = r, this.user = i, Object.setPrototypeOf(this, Go.prototype), this.customData = {
      appName: e.name,
      tenantId: (s = e.tenantId) !== null && s !== void 0 ? s : void 0,
      _serverResponse: t.customData._serverResponse,
      operationType: r
    };
  }
  static _fromErrorAndOperation(e, t, r, i) {
    return new Go(e, t, r, i);
  }
}
function gy(n, e, t, r) {
  return (e === "reauthenticate" ? t._getReauthenticationResolver(n) : t._getIdTokenResponse(n)).catch((s) => {
    throw s.code === "auth/multi-factor-auth-required" ? Go._fromErrorAndOperation(n, s, e, r) : s;
  });
}
async function OR(n, e, t = !1) {
  const r = await si(n, e._linkToIdToken(n.auth, await n.getIdToken()), t);
  return Hn._forOperation(n, "link", r);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function DR(n, e, t = !1) {
  const { auth: r } = n;
  if (Ut(r.app))
    return Promise.reject(rn(r));
  const i = "reauthenticate";
  try {
    const s = await si(n, gy(r, i, e, n), t);
    ne(
      s.idToken,
      r,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    );
    const o = bl(s.idToken);
    ne(
      o,
      r,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    );
    const { sub: c } = o;
    return ne(
      n.uid === c,
      r,
      "user-mismatch"
      /* AuthErrorCode.USER_MISMATCH */
    ), Hn._forOperation(n, i, s);
  } catch (s) {
    throw (s == null ? void 0 : s.code) === "auth/user-not-found" && qt(
      r,
      "user-mismatch"
      /* AuthErrorCode.USER_MISMATCH */
    ), s;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function yy(n, e, t = !1) {
  if (Ut(n.app))
    return Promise.reject(rn(n));
  const r = "signIn", i = await gy(n, r, e), s = await Hn._fromIdTokenResponse(n, r, i);
  return t || await n._updateCurrentUser(s.user), s;
}
async function NR(n, e) {
  return yy(fn(n), e);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function xR(n, e) {
  return gi(n, "POST", "/v1/accounts:signInWithCustomToken", Rn(n, e));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function Dx(n, e) {
  if (Ut(n.app))
    return Promise.reject(rn(n));
  const t = fn(n), r = await xR(t, {
    token: e,
    returnSecureToken: !0
  }), i = await Hn._fromIdTokenResponse(t, "signIn", r);
  return await t._updateCurrentUser(i.user), i;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function _y(n) {
  const e = fn(n);
  e._getPasswordPolicyInternal() && await e._updatePasswordPolicy();
}
async function Nx(n, e, t) {
  if (Ut(n.app))
    return Promise.reject(rn(n));
  const r = fn(n), o = await Su(r, {
    returnSecureToken: !0,
    email: e,
    password: t,
    clientType: "CLIENT_TYPE_WEB"
    /* RecaptchaClientType.WEB */
  }, "signUpPassword", kR).catch((u) => {
    throw u.code === "auth/password-does-not-meet-requirements" && _y(n), u;
  }), c = await Hn._fromIdTokenResponse(r, "signIn", o);
  return await r._updateCurrentUser(c.user), c;
}
function xx(n, e, t) {
  return Ut(n.app) ? Promise.reject(rn(n)) : NR(Qe(n), yi.credential(e, t)).catch(async (r) => {
    throw r.code === "auth/password-does-not-meet-requirements" && _y(n), r;
  });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function LR(n, e) {
  return hn(n, "POST", "/v1/accounts:update", e);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function MR(n, { displayName: e, photoURL: t }) {
  if (e === void 0 && t === void 0)
    return;
  const r = Qe(n), s = {
    idToken: await r.getIdToken(),
    displayName: e,
    photoUrl: t,
    returnSecureToken: !0
  }, o = await si(r, LR(r.auth, s));
  r.displayName = o.displayName || null, r.photoURL = o.photoUrl || null;
  const c = r.providerData.find(
    ({ providerId: u }) => u === "password"
    /* ProviderId.PASSWORD */
  );
  c && (c.displayName = r.displayName, c.photoURL = r.photoURL), await r._updateTokensIfNecessary(o);
}
function VR(n, e, t, r) {
  return Qe(n).onIdTokenChanged(e, t, r);
}
function FR(n, e, t) {
  return Qe(n).beforeAuthStateChanged(e, t);
}
function UR(n, e, t, r) {
  return Qe(n).onAuthStateChanged(e, t, r);
}
function Lx(n) {
  return Qe(n).signOut();
}
const Wo = "__sak";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class vy {
  constructor(e, t) {
    this.storageRetriever = e, this.type = t;
  }
  _isAvailable() {
    try {
      return this.storage ? (this.storage.setItem(Wo, "1"), this.storage.removeItem(Wo), Promise.resolve(!0)) : Promise.resolve(!1);
    } catch {
      return Promise.resolve(!1);
    }
  }
  _set(e, t) {
    return this.storage.setItem(e, JSON.stringify(t)), Promise.resolve();
  }
  _get(e) {
    const t = this.storage.getItem(e);
    return Promise.resolve(t ? JSON.parse(t) : null);
  }
  _remove(e) {
    return this.storage.removeItem(e), Promise.resolve();
  }
  get storage() {
    return this.storageRetriever();
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function jR() {
  const n = lt();
  return Il(n) || Sa(n);
}
const $R = 1e3, BR = 10;
class wy extends vy {
  constructor() {
    super(
      () => window.localStorage,
      "LOCAL"
      /* PersistenceType.LOCAL */
    ), this.boundEventHandler = (e, t) => this.onStorageEvent(e, t), this.listeners = {}, this.localCache = {}, this.pollTimer = null, this.safariLocalStorageNotSynced = jR() && sR(), this.fallbackToPolling = fy(), this._shouldAllowMigration = !0;
  }
  forAllChangedKeys(e) {
    for (const t of Object.keys(this.listeners)) {
      const r = this.storage.getItem(t), i = this.localCache[t];
      r !== i && e(t, i, r);
    }
  }
  onStorageEvent(e, t = !1) {
    if (!e.key) {
      this.forAllChangedKeys((o, c, u) => {
        this.notifyListeners(o, u);
      });
      return;
    }
    const r = e.key;
    if (t ? this.detachListener() : this.stopPolling(), this.safariLocalStorageNotSynced) {
      const o = this.storage.getItem(r);
      if (e.newValue !== o)
        e.newValue !== null ? this.storage.setItem(r, e.newValue) : this.storage.removeItem(r);
      else if (this.localCache[r] === e.newValue && !t)
        return;
    }
    const i = () => {
      const o = this.storage.getItem(r);
      !t && this.localCache[r] === o || this.notifyListeners(r, o);
    }, s = this.storage.getItem(r);
    iR() && s !== e.newValue && e.newValue !== e.oldValue ? setTimeout(i, BR) : i();
  }
  notifyListeners(e, t) {
    this.localCache[e] = t;
    const r = this.listeners[e];
    if (r)
      for (const i of Array.from(r))
        i(t && JSON.parse(t));
  }
  startPolling() {
    this.stopPolling(), this.pollTimer = setInterval(() => {
      this.forAllChangedKeys((e, t, r) => {
        this.onStorageEvent(
          new StorageEvent("storage", {
            key: e,
            oldValue: t,
            newValue: r
          }),
          /* poll */
          !0
        );
      });
    }, $R);
  }
  stopPolling() {
    this.pollTimer && (clearInterval(this.pollTimer), this.pollTimer = null);
  }
  attachListener() {
    window.addEventListener("storage", this.boundEventHandler);
  }
  detachListener() {
    window.removeEventListener("storage", this.boundEventHandler);
  }
  _addListener(e, t) {
    Object.keys(this.listeners).length === 0 && (this.fallbackToPolling ? this.startPolling() : this.attachListener()), this.listeners[e] || (this.listeners[e] = /* @__PURE__ */ new Set(), this.localCache[e] = this.storage.getItem(e)), this.listeners[e].add(t);
  }
  _removeListener(e, t) {
    this.listeners[e] && (this.listeners[e].delete(t), this.listeners[e].size === 0 && delete this.listeners[e]), Object.keys(this.listeners).length === 0 && (this.detachListener(), this.stopPolling());
  }
  // Update local cache on base operations:
  async _set(e, t) {
    await super._set(e, t), this.localCache[e] = JSON.stringify(t);
  }
  async _get(e) {
    const t = await super._get(e);
    return this.localCache[e] = JSON.stringify(t), t;
  }
  async _remove(e) {
    await super._remove(e), delete this.localCache[e];
  }
}
wy.type = "LOCAL";
const qR = wy;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Ey extends vy {
  constructor() {
    super(
      () => window.sessionStorage,
      "SESSION"
      /* PersistenceType.SESSION */
    );
  }
  _addListener(e, t) {
  }
  _removeListener(e, t) {
  }
}
Ey.type = "SESSION";
const Ty = Ey;
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function KR(n) {
  return Promise.all(n.map(async (e) => {
    try {
      return {
        fulfilled: !0,
        value: await e
      };
    } catch (t) {
      return {
        fulfilled: !1,
        reason: t
      };
    }
  }));
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Aa {
  constructor(e) {
    this.eventTarget = e, this.handlersMap = {}, this.boundEventHandler = this.handleEvent.bind(this);
  }
  /**
   * Obtain an instance of a Receiver for a given event target, if none exists it will be created.
   *
   * @param eventTarget - An event target (such as window or self) through which the underlying
   * messages will be received.
   */
  static _getInstance(e) {
    const t = this.receivers.find((i) => i.isListeningto(e));
    if (t)
      return t;
    const r = new Aa(e);
    return this.receivers.push(r), r;
  }
  isListeningto(e) {
    return this.eventTarget === e;
  }
  /**
   * Fans out a MessageEvent to the appropriate listeners.
   *
   * @remarks
   * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have
   * finished processing.
   *
   * @param event - The MessageEvent.
   *
   */
  async handleEvent(e) {
    const t = e, { eventId: r, eventType: i, data: s } = t.data, o = this.handlersMap[i];
    if (!(o != null && o.size))
      return;
    t.ports[0].postMessage({
      status: "ack",
      eventId: r,
      eventType: i
    });
    const c = Array.from(o).map(async (l) => l(t.origin, s)), u = await KR(c);
    t.ports[0].postMessage({
      status: "done",
      eventId: r,
      eventType: i,
      response: u
    });
  }
  /**
   * Subscribe an event handler for a particular event.
   *
   * @param eventType - Event name to subscribe to.
   * @param eventHandler - The event handler which should receive the events.
   *
   */
  _subscribe(e, t) {
    Object.keys(this.handlersMap).length === 0 && this.eventTarget.addEventListener("message", this.boundEventHandler), this.handlersMap[e] || (this.handlersMap[e] = /* @__PURE__ */ new Set()), this.handlersMap[e].add(t);
  }
  /**
   * Unsubscribe an event handler from a particular event.
   *
   * @param eventType - Event name to unsubscribe from.
   * @param eventHandler - Optional event handler, if none provided, unsubscribe all handlers on this event.
   *
   */
  _unsubscribe(e, t) {
    this.handlersMap[e] && t && this.handlersMap[e].delete(t), (!t || this.handlersMap[e].size === 0) && delete this.handlersMap[e], Object.keys(this.handlersMap).length === 0 && this.eventTarget.removeEventListener("message", this.boundEventHandler);
  }
}
Aa.receivers = [];
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Pl(n = "", e = 10) {
  let t = "";
  for (let r = 0; r < e; r++)
    t += Math.floor(Math.random() * 10);
  return n + t;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class zR {
  constructor(e) {
    this.target = e, this.handlers = /* @__PURE__ */ new Set();
  }
  /**
   * Unsubscribe the handler and remove it from our tracking Set.
   *
   * @param handler - The handler to unsubscribe.
   */
  removeMessageHandler(e) {
    e.messageChannel && (e.messageChannel.port1.removeEventListener("message", e.onMessage), e.messageChannel.port1.close()), this.handlers.delete(e);
  }
  /**
   * Send a message to the Receiver located at {@link target}.
   *
   * @remarks
   * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the
   * receiver has had a chance to fully process the event.
   *
   * @param eventType - Type of event to send.
   * @param data - The payload of the event.
   * @param timeout - Timeout for waiting on an ACK from the receiver.
   *
   * @returns An array of settled promises from all the handlers that were listening on the receiver.
   */
  async _send(e, t, r = 50) {
    const i = typeof MessageChannel < "u" ? new MessageChannel() : null;
    if (!i)
      throw new Error(
        "connection_unavailable"
        /* _MessageError.CONNECTION_UNAVAILABLE */
      );
    let s, o;
    return new Promise((c, u) => {
      const l = Pl("", 20);
      i.port1.start();
      const f = setTimeout(() => {
        u(new Error(
          "unsupported_event"
          /* _MessageError.UNSUPPORTED_EVENT */
        ));
      }, r);
      o = {
        messageChannel: i,
        onMessage(h) {
          const y = h;
          if (y.data.eventId === l)
            switch (y.data.status) {
              case "ack":
                clearTimeout(f), s = setTimeout(
                  () => {
                    u(new Error(
                      "timeout"
                      /* _MessageError.TIMEOUT */
                    ));
                  },
                  3e3
                  /* _TimeoutDuration.COMPLETION */
                );
                break;
              case "done":
                clearTimeout(s), c(y.data.response);
                break;
              default:
                clearTimeout(f), clearTimeout(s), u(new Error(
                  "invalid_response"
                  /* _MessageError.INVALID_RESPONSE */
                ));
                break;
            }
        }
      }, this.handlers.add(o), i.port1.addEventListener("message", o.onMessage), this.target.postMessage({
        eventType: e,
        eventId: l,
        data: t
      }, [i.port2]);
    }).finally(() => {
      o && this.removeMessageHandler(o);
    });
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function He() {
  return window;
}
function HR(n) {
  He().location.href = n;
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function kl() {
  return typeof He().WorkerGlobalScope < "u" && typeof He().importScripts == "function";
}
async function GR() {
  if (!(navigator != null && navigator.serviceWorker))
    return null;
  try {
    return (await navigator.serviceWorker.ready).active;
  } catch {
    return null;
  }
}
function WR() {
  var n;
  return ((n = navigator == null ? void 0 : navigator.serviceWorker) === null || n === void 0 ? void 0 : n.controller) || null;
}
function QR() {
  return kl() ? self : null;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const by = "firebaseLocalStorageDb", YR = 1, Qo = "firebaseLocalStorage", Iy = "fbase_key";
class Cs {
  constructor(e) {
    this.request = e;
  }
  toPromise() {
    return new Promise((e, t) => {
      this.request.addEventListener("success", () => {
        e(this.request.result);
      }), this.request.addEventListener("error", () => {
        t(this.request.error);
      });
    });
  }
}
function Ra(n, e) {
  return n.transaction([Qo], e ? "readwrite" : "readonly").objectStore(Qo);
}
function JR() {
  const n = indexedDB.deleteDatabase(by);
  return new Cs(n).toPromise();
}
function Au() {
  const n = indexedDB.open(by, YR);
  return new Promise((e, t) => {
    n.addEventListener("error", () => {
      t(n.error);
    }), n.addEventListener("upgradeneeded", () => {
      const r = n.result;
      try {
        r.createObjectStore(Qo, { keyPath: Iy });
      } catch (i) {
        t(i);
      }
    }), n.addEventListener("success", async () => {
      const r = n.result;
      r.objectStoreNames.contains(Qo) ? e(r) : (r.close(), await JR(), e(await Au()));
    });
  });
}
async function Jd(n, e, t) {
  const r = Ra(n, !0).put({
    [Iy]: e,
    value: t
  });
  return new Cs(r).toPromise();
}
async function XR(n, e) {
  const t = Ra(n, !1).get(e), r = await new Cs(t).toPromise();
  return r === void 0 ? null : r.value;
}
function Xd(n, e) {
  const t = Ra(n, !0).delete(e);
  return new Cs(t).toPromise();
}
const ZR = 800, eC = 3;
class Sy {
  constructor() {
    this.type = "LOCAL", this._shouldAllowMigration = !0, this.listeners = {}, this.localCache = {}, this.pollTimer = null, this.pendingWrites = 0, this.receiver = null, this.sender = null, this.serviceWorkerReceiverAvailable = !1, this.activeServiceWorker = null, this._workerInitializationPromise = this.initializeServiceWorkerMessaging().then(() => {
    }, () => {
    });
  }
  async _openDb() {
    return this.db ? this.db : (this.db = await Au(), this.db);
  }
  async _withRetries(e) {
    let t = 0;
    for (; ; )
      try {
        const r = await this._openDb();
        return await e(r);
      } catch (r) {
        if (t++ > eC)
          throw r;
        this.db && (this.db.close(), this.db = void 0);
      }
  }
  /**
   * IndexedDB events do not propagate from the main window to the worker context.  We rely on a
   * postMessage interface to send these events to the worker ourselves.
   */
  async initializeServiceWorkerMessaging() {
    return kl() ? this.initializeReceiver() : this.initializeSender();
  }
  /**
   * As the worker we should listen to events from the main window.
   */
  async initializeReceiver() {
    this.receiver = Aa._getInstance(QR()), this.receiver._subscribe("keyChanged", async (e, t) => ({
      keyProcessed: (await this._poll()).includes(t.key)
    })), this.receiver._subscribe("ping", async (e, t) => [
      "keyChanged"
      /* _EventType.KEY_CHANGED */
    ]);
  }
  /**
   * As the main window, we should let the worker know when keys change (set and remove).
   *
   * @remarks
   * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}
   * may not resolve.
   */
  async initializeSender() {
    var e, t;
    if (this.activeServiceWorker = await GR(), !this.activeServiceWorker)
      return;
    this.sender = new zR(this.activeServiceWorker);
    const r = await this.sender._send(
      "ping",
      {},
      800
      /* _TimeoutDuration.LONG_ACK */
    );
    r && !((e = r[0]) === null || e === void 0) && e.fulfilled && !((t = r[0]) === null || t === void 0) && t.value.includes(
      "keyChanged"
      /* _EventType.KEY_CHANGED */
    ) && (this.serviceWorkerReceiverAvailable = !0);
  }
  /**
   * Let the worker know about a changed key, the exact key doesn't technically matter since the
   * worker will just trigger a full sync anyway.
   *
   * @remarks
   * For now, we only support one service worker per page.
   *
   * @param key - Storage key which changed.
   */
  async notifyServiceWorker(e) {
    if (!(!this.sender || !this.activeServiceWorker || WR() !== this.activeServiceWorker))
      try {
        await this.sender._send(
          "keyChanged",
          { key: e },
          // Use long timeout if receiver has previously responded to a ping from us.
          this.serviceWorkerReceiverAvailable ? 800 : 50
          /* _TimeoutDuration.ACK */
        );
      } catch {
      }
  }
  async _isAvailable() {
    try {
      if (!indexedDB)
        return !1;
      const e = await Au();
      return await Jd(e, Wo, "1"), await Xd(e, Wo), !0;
    } catch {
    }
    return !1;
  }
  async _withPendingWrite(e) {
    this.pendingWrites++;
    try {
      await e();
    } finally {
      this.pendingWrites--;
    }
  }
  async _set(e, t) {
    return this._withPendingWrite(async () => (await this._withRetries((r) => Jd(r, e, t)), this.localCache[e] = t, this.notifyServiceWorker(e)));
  }
  async _get(e) {
    const t = await this._withRetries((r) => XR(r, e));
    return this.localCache[e] = t, t;
  }
  async _remove(e) {
    return this._withPendingWrite(async () => (await this._withRetries((t) => Xd(t, e)), delete this.localCache[e], this.notifyServiceWorker(e)));
  }
  async _poll() {
    const e = await this._withRetries((i) => {
      const s = Ra(i, !1).getAll();
      return new Cs(s).toPromise();
    });
    if (!e)
      return [];
    if (this.pendingWrites !== 0)
      return [];
    const t = [], r = /* @__PURE__ */ new Set();
    if (e.length !== 0)
      for (const { fbase_key: i, value: s } of e)
        r.add(i), JSON.stringify(this.localCache[i]) !== JSON.stringify(s) && (this.notifyListeners(i, s), t.push(i));
    for (const i of Object.keys(this.localCache))
      this.localCache[i] && !r.has(i) && (this.notifyListeners(i, null), t.push(i));
    return t;
  }
  notifyListeners(e, t) {
    this.localCache[e] = t;
    const r = this.listeners[e];
    if (r)
      for (const i of Array.from(r))
        i(t);
  }
  startPolling() {
    this.stopPolling(), this.pollTimer = setInterval(async () => this._poll(), ZR);
  }
  stopPolling() {
    this.pollTimer && (clearInterval(this.pollTimer), this.pollTimer = null);
  }
  _addListener(e, t) {
    Object.keys(this.listeners).length === 0 && this.startPolling(), this.listeners[e] || (this.listeners[e] = /* @__PURE__ */ new Set(), this._get(e)), this.listeners[e].add(t);
  }
  _removeListener(e, t) {
    this.listeners[e] && (this.listeners[e].delete(t), this.listeners[e].size === 0 && delete this.listeners[e]), Object.keys(this.listeners).length === 0 && this.stopPolling();
  }
}
Sy.type = "LOCAL";
const tC = Sy;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const nC = 500, rC = 6e4, lo = 1e12;
class iC {
  constructor(e) {
    this.auth = e, this.counter = lo, this._widgets = /* @__PURE__ */ new Map();
  }
  render(e, t) {
    const r = this.counter;
    return this._widgets.set(r, new sC(e, this.auth.name, t || {})), this.counter++, r;
  }
  reset(e) {
    var t;
    const r = e || lo;
    (t = this._widgets.get(r)) === null || t === void 0 || t.delete(), this._widgets.delete(r);
  }
  getResponse(e) {
    var t;
    const r = e || lo;
    return ((t = this._widgets.get(r)) === null || t === void 0 ? void 0 : t.getResponse()) || "";
  }
  async execute(e) {
    var t;
    const r = e || lo;
    return (t = this._widgets.get(r)) === null || t === void 0 || t.execute(), "";
  }
}
class sC {
  constructor(e, t, r) {
    this.params = r, this.timerId = null, this.deleted = !1, this.responseToken = null, this.clickHandler = () => {
      this.execute();
    };
    const i = typeof e == "string" ? document.getElementById(e) : e;
    ne(i, "argument-error", { appName: t }), this.container = i, this.isVisible = this.params.size !== "invisible", this.isVisible ? this.execute() : this.container.addEventListener("click", this.clickHandler);
  }
  getResponse() {
    return this.checkIfDeleted(), this.responseToken;
  }
  delete() {
    this.checkIfDeleted(), this.deleted = !0, this.timerId && (clearTimeout(this.timerId), this.timerId = null), this.container.removeEventListener("click", this.clickHandler);
  }
  execute() {
    this.checkIfDeleted(), !this.timerId && (this.timerId = window.setTimeout(() => {
      this.responseToken = oC(50);
      const { callback: e, "expired-callback": t } = this.params;
      if (e)
        try {
          e(this.responseToken);
        } catch {
        }
      this.timerId = window.setTimeout(() => {
        if (this.timerId = null, this.responseToken = null, t)
          try {
            t();
          } catch {
          }
        this.isVisible && this.execute();
      }, rC);
    }, nC));
  }
  checkIfDeleted() {
    if (this.deleted)
      throw new Error("reCAPTCHA mock was already deleted!");
  }
}
function oC(n) {
  const e = [], t = "1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
  for (let r = 0; r < n; r++)
    e.push(t.charAt(Math.floor(Math.random() * t.length)));
  return e.join("");
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Oc = py("rcb"), aC = new Ss(3e4, 6e4);
class cC {
  constructor() {
    var e;
    this.hostLanguage = "", this.counter = 0, this.librarySeparatelyLoaded = !!(!((e = He().grecaptcha) === null || e === void 0) && e.render);
  }
  load(e, t = "") {
    return ne(
      uC(t),
      e,
      "argument-error"
      /* AuthErrorCode.ARGUMENT_ERROR */
    ), this.shouldResolveImmediately(t) && $d(He().grecaptcha) ? Promise.resolve(He().grecaptcha) : new Promise((r, i) => {
      const s = He().setTimeout(() => {
        i(kt(
          e,
          "network-request-failed"
          /* AuthErrorCode.NETWORK_REQUEST_FAILED */
        ));
      }, aC.get());
      He()[Oc] = () => {
        He().clearTimeout(s), delete He()[Oc];
        const c = He().grecaptcha;
        if (!c || !$d(c)) {
          i(kt(
            e,
            "internal-error"
            /* AuthErrorCode.INTERNAL_ERROR */
          ));
          return;
        }
        const u = c.render;
        c.render = (l, f) => {
          const h = u(l, f);
          return this.counter++, h;
        }, this.hostLanguage = t, r(c);
      };
      const o = `${fR()}?${mi({
        onload: Oc,
        render: "explicit",
        hl: t
      })}`;
      Sl(o).catch(() => {
        clearTimeout(s), i(kt(
          e,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        ));
      });
    });
  }
  clearedOneInstance() {
    this.counter--;
  }
  shouldResolveImmediately(e) {
    var t;
    return !!(!((t = He().grecaptcha) === null || t === void 0) && t.render) && (e === this.hostLanguage || this.counter > 0 || this.librarySeparatelyLoaded);
  }
}
function uC(n) {
  return n.length <= 6 && /^\s*[a-zA-Z0-9\-]*\s*$/.test(n);
}
class lC {
  async load(e) {
    return new iC(e);
  }
  clearedOneInstance() {
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const hC = "recaptcha", fC = {
  theme: "light",
  type: "image"
};
class dC {
  /**
   * @param authExtern - The corresponding Firebase {@link Auth} instance.
   *
   * @param containerOrId - The reCAPTCHA container parameter.
   *
   * @remarks
   * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a
   * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to
   * an element ID. The corresponding element must also must be in the DOM at the time of
   * initialization.
   *
   * @param parameters - The optional reCAPTCHA parameters.
   *
   * @remarks
   * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for
   * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will
   * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value
   * 'invisible'.
   */
  constructor(e, t, r = Object.assign({}, fC)) {
    this.parameters = r, this.type = hC, this.destroyed = !1, this.widgetId = null, this.tokenChangeListeners = /* @__PURE__ */ new Set(), this.renderPromise = null, this.recaptcha = null, this.auth = fn(e), this.isInvisible = this.parameters.size === "invisible", ne(
      typeof document < "u",
      this.auth,
      "operation-not-supported-in-this-environment"
      /* AuthErrorCode.OPERATION_NOT_SUPPORTED */
    );
    const i = typeof t == "string" ? document.getElementById(t) : t;
    ne(
      i,
      this.auth,
      "argument-error"
      /* AuthErrorCode.ARGUMENT_ERROR */
    ), this.container = i, this.parameters.callback = this.makeTokenCallback(this.parameters.callback), this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting ? new lC() : new cC(), this.validateStartingState();
  }
  /**
   * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.
   *
   * @returns A Promise for the reCAPTCHA token.
   */
  async verify() {
    this.assertNotDestroyed();
    const e = await this.render(), t = this.getAssertedRecaptcha(), r = t.getResponse(e);
    return r || new Promise((i) => {
      const s = (o) => {
        o && (this.tokenChangeListeners.delete(s), i(o));
      };
      this.tokenChangeListeners.add(s), this.isInvisible && t.execute(e);
    });
  }
  /**
   * Renders the reCAPTCHA widget on the page.
   *
   * @returns A Promise that resolves with the reCAPTCHA widget ID.
   */
  render() {
    try {
      this.assertNotDestroyed();
    } catch (e) {
      return Promise.reject(e);
    }
    return this.renderPromise ? this.renderPromise : (this.renderPromise = this.makeRenderPromise().catch((e) => {
      throw this.renderPromise = null, e;
    }), this.renderPromise);
  }
  /** @internal */
  _reset() {
    this.assertNotDestroyed(), this.widgetId !== null && this.getAssertedRecaptcha().reset(this.widgetId);
  }
  /**
   * Clears the reCAPTCHA widget from the page and destroys the instance.
   */
  clear() {
    this.assertNotDestroyed(), this.destroyed = !0, this._recaptchaLoader.clearedOneInstance(), this.isInvisible || this.container.childNodes.forEach((e) => {
      this.container.removeChild(e);
    });
  }
  validateStartingState() {
    ne(
      !this.parameters.sitekey,
      this.auth,
      "argument-error"
      /* AuthErrorCode.ARGUMENT_ERROR */
    ), ne(
      this.isInvisible || !this.container.hasChildNodes(),
      this.auth,
      "argument-error"
      /* AuthErrorCode.ARGUMENT_ERROR */
    ), ne(
      typeof document < "u",
      this.auth,
      "operation-not-supported-in-this-environment"
      /* AuthErrorCode.OPERATION_NOT_SUPPORTED */
    );
  }
  makeTokenCallback(e) {
    return (t) => {
      if (this.tokenChangeListeners.forEach((r) => r(t)), typeof e == "function")
        e(t);
      else if (typeof e == "string") {
        const r = He()[e];
        typeof r == "function" && r(t);
      }
    };
  }
  assertNotDestroyed() {
    ne(
      !this.destroyed,
      this.auth,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    );
  }
  async makeRenderPromise() {
    if (await this.init(), !this.widgetId) {
      let e = this.container;
      if (!this.isInvisible) {
        const t = document.createElement("div");
        e.appendChild(t), e = t;
      }
      this.widgetId = this.getAssertedRecaptcha().render(e, this.parameters);
    }
    return this.widgetId;
  }
  async init() {
    ne(
      Zg() && !kl(),
      this.auth,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), await pC(), this.recaptcha = await this._recaptchaLoader.load(this.auth, this.auth.languageCode || void 0);
    const e = await GA(this.auth);
    ne(
      e,
      this.auth,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), this.parameters.sitekey = e;
  }
  getAssertedRecaptcha() {
    return ne(
      this.recaptcha,
      this.auth,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), this.recaptcha;
  }
}
function pC() {
  let n = null;
  return new Promise((e) => {
    if (document.readyState === "complete") {
      e();
      return;
    }
    n = () => e(), window.addEventListener("load", n);
  }).catch((e) => {
    throw n && window.removeEventListener("load", n), e;
  });
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Ay(n, e) {
  return e ? wn(e) : (ne(
    n._popupRedirectResolver,
    n,
    "argument-error"
    /* AuthErrorCode.ARGUMENT_ERROR */
  ), n._popupRedirectResolver);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Ol extends Al {
  constructor(e) {
    super(
      "custom",
      "custom"
      /* ProviderId.CUSTOM */
    ), this.params = e;
  }
  _getIdTokenResponse(e) {
    return Xr(e, this._buildIdpRequest());
  }
  _linkToIdToken(e, t) {
    return Xr(e, this._buildIdpRequest(t));
  }
  _getReauthenticationResolver(e) {
    return Xr(e, this._buildIdpRequest());
  }
  _buildIdpRequest(e) {
    const t = {
      requestUri: this.params.requestUri,
      sessionId: this.params.sessionId,
      postBody: this.params.postBody,
      tenantId: this.params.tenantId,
      pendingToken: this.params.pendingToken,
      returnSecureToken: !0,
      returnIdpCredential: !0
    };
    return e && (t.idToken = e), t;
  }
}
function mC(n) {
  return yy(n.auth, new Ol(n), n.bypassAuthState);
}
function gC(n) {
  const { auth: e, user: t } = n;
  return ne(
    t,
    e,
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  ), DR(t, new Ol(n), n.bypassAuthState);
}
async function yC(n) {
  const { auth: e, user: t } = n;
  return ne(
    t,
    e,
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  ), OR(t, new Ol(n), n.bypassAuthState);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Ry {
  constructor(e, t, r, i, s = !1) {
    this.auth = e, this.resolver = r, this.user = i, this.bypassAuthState = s, this.pendingPromise = null, this.eventManager = null, this.filter = Array.isArray(t) ? t : [t];
  }
  execute() {
    return new Promise(async (e, t) => {
      this.pendingPromise = { resolve: e, reject: t };
      try {
        this.eventManager = await this.resolver._initialize(this.auth), await this.onExecution(), this.eventManager.registerConsumer(this);
      } catch (r) {
        this.reject(r);
      }
    });
  }
  async onAuthEvent(e) {
    const { urlResponse: t, sessionId: r, postBody: i, tenantId: s, error: o, type: c } = e;
    if (o) {
      this.reject(o);
      return;
    }
    const u = {
      auth: this.auth,
      requestUri: t,
      sessionId: r,
      tenantId: s || void 0,
      postBody: i || void 0,
      user: this.user,
      bypassAuthState: this.bypassAuthState
    };
    try {
      this.resolve(await this.getIdpTask(c)(u));
    } catch (l) {
      this.reject(l);
    }
  }
  onError(e) {
    this.reject(e);
  }
  getIdpTask(e) {
    switch (e) {
      case "signInViaPopup":
      case "signInViaRedirect":
        return mC;
      case "linkViaPopup":
      case "linkViaRedirect":
        return yC;
      case "reauthViaPopup":
      case "reauthViaRedirect":
        return gC;
      default:
        qt(
          this.auth,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
    }
  }
  resolve(e) {
    In(this.pendingPromise, "Pending promise was never set"), this.pendingPromise.resolve(e), this.unregisterAndCleanUp();
  }
  reject(e) {
    In(this.pendingPromise, "Pending promise was never set"), this.pendingPromise.reject(e), this.unregisterAndCleanUp();
  }
  unregisterAndCleanUp() {
    this.eventManager && this.eventManager.unregisterConsumer(this), this.pendingPromise = null, this.cleanUp();
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const _C = new Ss(2e3, 1e4);
async function Mx(n, e, t) {
  if (Ut(n.app))
    return Promise.reject(kt(
      n,
      "operation-not-supported-in-this-environment"
      /* AuthErrorCode.OPERATION_NOT_SUPPORTED */
    ));
  const r = fn(n);
  UA(n, e, Cl);
  const i = Ay(r, t);
  return new lr(r, "signInViaPopup", e, i).executeNotNull();
}
class lr extends Ry {
  constructor(e, t, r, i, s) {
    super(e, t, i, s), this.provider = r, this.authWindow = null, this.pollId = null, lr.currentPopupAction && lr.currentPopupAction.cancel(), lr.currentPopupAction = this;
  }
  async executeNotNull() {
    const e = await this.execute();
    return ne(
      e,
      this.auth,
      "internal-error"
      /* AuthErrorCode.INTERNAL_ERROR */
    ), e;
  }
  async onExecution() {
    In(this.filter.length === 1, "Popup operations only handle one event");
    const e = Pl();
    this.authWindow = await this.resolver._openPopup(
      this.auth,
      this.provider,
      this.filter[0],
      // There's always one, see constructor
      e
    ), this.authWindow.associatedEvent = e, this.resolver._originValidation(this.auth).catch((t) => {
      this.reject(t);
    }), this.resolver._isIframeWebStorageSupported(this.auth, (t) => {
      t || this.reject(kt(
        this.auth,
        "web-storage-unsupported"
        /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */
      ));
    }), this.pollUserCancellation();
  }
  get eventId() {
    var e;
    return ((e = this.authWindow) === null || e === void 0 ? void 0 : e.associatedEvent) || null;
  }
  cancel() {
    this.reject(kt(
      this.auth,
      "cancelled-popup-request"
      /* AuthErrorCode.EXPIRED_POPUP_REQUEST */
    ));
  }
  cleanUp() {
    this.authWindow && this.authWindow.close(), this.pollId && window.clearTimeout(this.pollId), this.authWindow = null, this.pollId = null, lr.currentPopupAction = null;
  }
  pollUserCancellation() {
    const e = () => {
      var t, r;
      if (!((r = (t = this.authWindow) === null || t === void 0 ? void 0 : t.window) === null || r === void 0) && r.closed) {
        this.pollId = window.setTimeout(
          () => {
            this.pollId = null, this.reject(kt(
              this.auth,
              "popup-closed-by-user"
              /* AuthErrorCode.POPUP_CLOSED_BY_USER */
            ));
          },
          8e3
          /* _Timeout.AUTH_EVENT */
        );
        return;
      }
      this.pollId = window.setTimeout(e, _C.get());
    };
    e();
  }
}
lr.currentPopupAction = null;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const vC = "pendingRedirect", So = /* @__PURE__ */ new Map();
class wC extends Ry {
  constructor(e, t, r = !1) {
    super(e, [
      "signInViaRedirect",
      "linkViaRedirect",
      "reauthViaRedirect",
      "unknown"
      /* AuthEventType.UNKNOWN */
    ], t, void 0, r), this.eventId = null;
  }
  /**
   * Override the execute function; if we already have a redirect result, then
   * just return it.
   */
  async execute() {
    let e = So.get(this.auth._key());
    if (!e) {
      try {
        const r = await EC(this.resolver, this.auth) ? await super.execute() : null;
        e = () => Promise.resolve(r);
      } catch (t) {
        e = () => Promise.reject(t);
      }
      So.set(this.auth._key(), e);
    }
    return this.bypassAuthState || So.set(this.auth._key(), () => Promise.resolve(null)), e();
  }
  async onAuthEvent(e) {
    if (e.type === "signInViaRedirect")
      return super.onAuthEvent(e);
    if (e.type === "unknown") {
      this.resolve(null);
      return;
    }
    if (e.eventId) {
      const t = await this.auth._redirectUserForId(e.eventId);
      if (t)
        return this.user = t, super.onAuthEvent(e);
      this.resolve(null);
    }
  }
  async onExecution() {
  }
  cleanUp() {
  }
}
async function EC(n, e) {
  const t = IC(e), r = bC(n);
  if (!await r._isAvailable())
    return !1;
  const i = await r._get(t) === "true";
  return await r._remove(t), i;
}
function TC(n, e) {
  So.set(n._key(), e);
}
function bC(n) {
  return wn(n._redirectPersistence);
}
function IC(n) {
  return Io(vC, n.config.apiKey, n.name);
}
async function SC(n, e, t = !1) {
  if (Ut(n.app))
    return Promise.reject(rn(n));
  const r = fn(n), i = Ay(r, e), o = await new wC(r, i, t).execute();
  return o && !t && (delete o.user._redirectEventId, await r._persistUserIfCurrent(o.user), await r._setRedirectUser(null, e)), o;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const AC = 10 * 60 * 1e3;
class RC {
  constructor(e) {
    this.auth = e, this.cachedEventUids = /* @__PURE__ */ new Set(), this.consumers = /* @__PURE__ */ new Set(), this.queuedRedirectEvent = null, this.hasHandledPotentialRedirect = !1, this.lastProcessedEventTime = Date.now();
  }
  registerConsumer(e) {
    this.consumers.add(e), this.queuedRedirectEvent && this.isEventForConsumer(this.queuedRedirectEvent, e) && (this.sendToConsumer(this.queuedRedirectEvent, e), this.saveEventToCache(this.queuedRedirectEvent), this.queuedRedirectEvent = null);
  }
  unregisterConsumer(e) {
    this.consumers.delete(e);
  }
  onEvent(e) {
    if (this.hasEventBeenHandled(e))
      return !1;
    let t = !1;
    return this.consumers.forEach((r) => {
      this.isEventForConsumer(e, r) && (t = !0, this.sendToConsumer(e, r), this.saveEventToCache(e));
    }), this.hasHandledPotentialRedirect || !CC(e) || (this.hasHandledPotentialRedirect = !0, t || (this.queuedRedirectEvent = e, t = !0)), t;
  }
  sendToConsumer(e, t) {
    var r;
    if (e.error && !Cy(e)) {
      const i = ((r = e.error.code) === null || r === void 0 ? void 0 : r.split("auth/")[1]) || "internal-error";
      t.onError(kt(this.auth, i));
    } else
      t.onAuthEvent(e);
  }
  isEventForConsumer(e, t) {
    const r = t.eventId === null || !!e.eventId && e.eventId === t.eventId;
    return t.filter.includes(e.type) && r;
  }
  hasEventBeenHandled(e) {
    return Date.now() - this.lastProcessedEventTime >= AC && this.cachedEventUids.clear(), this.cachedEventUids.has(Zd(e));
  }
  saveEventToCache(e) {
    this.cachedEventUids.add(Zd(e)), this.lastProcessedEventTime = Date.now();
  }
}
function Zd(n) {
  return [n.type, n.eventId, n.sessionId, n.tenantId].filter((e) => e).join("-");
}
function Cy({ type: n, error: e }) {
  return n === "unknown" && (e == null ? void 0 : e.code) === "auth/no-auth-event";
}
function CC(n) {
  switch (n.type) {
    case "signInViaRedirect":
    case "linkViaRedirect":
    case "reauthViaRedirect":
      return !0;
    case "unknown":
      return Cy(n);
    default:
      return !1;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function PC(n, e = {}) {
  return hn(n, "GET", "/v1/projects", e);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const kC = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/, OC = /^https?/;
async function DC(n) {
  if (n.config.emulator)
    return;
  const { authorizedDomains: e } = await PC(n);
  for (const t of e)
    try {
      if (NC(t))
        return;
    } catch {
    }
  qt(
    n,
    "unauthorized-domain"
    /* AuthErrorCode.INVALID_ORIGIN */
  );
}
function NC(n) {
  const e = bu(), { protocol: t, hostname: r } = new URL(e);
  if (n.startsWith("chrome-extension://")) {
    const o = new URL(n);
    return o.hostname === "" && r === "" ? t === "chrome-extension:" && n.replace("chrome-extension://", "") === e.replace("chrome-extension://", "") : t === "chrome-extension:" && o.hostname === r;
  }
  if (!OC.test(t))
    return !1;
  if (kC.test(n))
    return r === n;
  const i = n.replace(/\./g, "\\.");
  return new RegExp("^(.+\\." + i + "|" + i + ")$", "i").test(r);
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const xC = new Ss(3e4, 6e4);
function ep() {
  const n = He().___jsl;
  if (n != null && n.H) {
    for (const e of Object.keys(n.H))
      if (n.H[e].r = n.H[e].r || [], n.H[e].L = n.H[e].L || [], n.H[e].r = [...n.H[e].L], n.CP)
        for (let t = 0; t < n.CP.length; t++)
          n.CP[t] = null;
  }
}
function LC(n) {
  return new Promise((e, t) => {
    var r, i, s;
    function o() {
      ep(), gapi.load("gapi.iframes", {
        callback: () => {
          e(gapi.iframes.getContext());
        },
        ontimeout: () => {
          ep(), t(kt(
            n,
            "network-request-failed"
            /* AuthErrorCode.NETWORK_REQUEST_FAILED */
          ));
        },
        timeout: xC.get()
      });
    }
    if (!((i = (r = He().gapi) === null || r === void 0 ? void 0 : r.iframes) === null || i === void 0) && i.Iframe)
      e(gapi.iframes.getContext());
    else if (!((s = He().gapi) === null || s === void 0) && s.load)
      o();
    else {
      const c = py("iframefcb");
      return He()[c] = () => {
        gapi.load ? o() : t(kt(
          n,
          "network-request-failed"
          /* AuthErrorCode.NETWORK_REQUEST_FAILED */
        ));
      }, Sl(`${pR()}?onload=${c}`).catch((u) => t(u));
    }
  }).catch((e) => {
    throw Ao = null, e;
  });
}
let Ao = null;
function MC(n) {
  return Ao = Ao || LC(n), Ao;
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const VC = new Ss(5e3, 15e3), FC = "__/auth/iframe", UC = "emulator/auth/iframe", jC = {
  style: {
    position: "absolute",
    top: "-100px",
    width: "1px",
    height: "1px"
  },
  "aria-hidden": "true",
  tabindex: "-1"
}, $C = /* @__PURE__ */ new Map([
  ["identitytoolkit.googleapis.com", "p"],
  ["staging-identitytoolkit.sandbox.googleapis.com", "s"],
  ["test-identitytoolkit.sandbox.googleapis.com", "t"]
  // test
]);
function BC(n) {
  const e = n.config;
  ne(
    e.authDomain,
    n,
    "auth-domain-config-required"
    /* AuthErrorCode.MISSING_AUTH_DOMAIN */
  );
  const t = e.emulator ? Tl(e, UC) : `https://${n.config.authDomain}/${FC}`, r = {
    apiKey: e.apiKey,
    appName: n.name,
    v: Dr
  }, i = $C.get(n.config.apiHost);
  i && (r.eid = i);
  const s = n._getFrameworks();
  return s.length && (r.fw = s.join(",")), `${t}?${mi(r).slice(1)}`;
}
async function qC(n) {
  const e = await MC(n), t = He().gapi;
  return ne(
    t,
    n,
    "internal-error"
    /* AuthErrorCode.INTERNAL_ERROR */
  ), e.open({
    where: document.body,
    url: BC(n),
    messageHandlersFilter: t.iframes.CROSS_ORIGIN_IFRAMES_FILTER,
    attributes: jC,
    dontclear: !0
  }, (r) => new Promise(async (i, s) => {
    await r.restyle({
      // Prevent iframe from closing on mouse out.
      setHideOnLeave: !1
    });
    const o = kt(
      n,
      "network-request-failed"
      /* AuthErrorCode.NETWORK_REQUEST_FAILED */
    ), c = He().setTimeout(() => {
      s(o);
    }, VC.get());
    function u() {
      He().clearTimeout(c), i(r);
    }
    r.ping(u).then(u, () => {
      s(o);
    });
  }));
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const KC = {
  location: "yes",
  resizable: "yes",
  statusbar: "yes",
  toolbar: "no"
}, zC = 500, HC = 600, GC = "_blank", WC = "http://localhost";
class tp {
  constructor(e) {
    this.window = e, this.associatedEvent = null;
  }
  close() {
    if (this.window)
      try {
        this.window.close();
      } catch {
      }
  }
}
function QC(n, e, t, r = zC, i = HC) {
  const s = Math.max((window.screen.availHeight - i) / 2, 0).toString(), o = Math.max((window.screen.availWidth - r) / 2, 0).toString();
  let c = "";
  const u = Object.assign(Object.assign({}, KC), {
    width: r.toString(),
    height: i.toString(),
    top: s,
    left: o
  }), l = lt().toLowerCase();
  t && (c = ay(l) ? GC : t), oy(l) && (e = e || WC, u.scrollbars = "yes");
  const f = Object.entries(u).reduce((y, [T, S]) => `${y}${T}=${S},`, "");
  if (rR(l) && c !== "_self")
    return YC(e || "", c), new tp(null);
  const h = window.open(e || "", c, f);
  ne(
    h,
    n,
    "popup-blocked"
    /* AuthErrorCode.POPUP_BLOCKED */
  );
  try {
    h.focus();
  } catch {
  }
  return new tp(h);
}
function YC(n, e) {
  const t = document.createElement("a");
  t.href = n, t.target = e;
  const r = document.createEvent("MouseEvent");
  r.initMouseEvent("click", !0, !0, window, 1, 0, 0, 0, 0, !1, !1, !1, !1, 1, null), t.dispatchEvent(r);
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const JC = "__/auth/handler", XC = "emulator/auth/handler", ZC = encodeURIComponent("fac");
async function np(n, e, t, r, i, s) {
  ne(
    n.config.authDomain,
    n,
    "auth-domain-config-required"
    /* AuthErrorCode.MISSING_AUTH_DOMAIN */
  ), ne(
    n.config.apiKey,
    n,
    "invalid-api-key"
    /* AuthErrorCode.INVALID_API_KEY */
  );
  const o = {
    apiKey: n.config.apiKey,
    appName: n.name,
    authType: t,
    redirectUrl: r,
    v: Dr,
    eventId: i
  };
  if (e instanceof Cl) {
    e.setDefaultLanguage(n.languageCode), o.providerId = e.providerId || "", SS(e.getCustomParameters()) || (o.customParameters = JSON.stringify(e.getCustomParameters()));
    for (const [f, h] of Object.entries({}))
      o[f] = h;
  }
  if (e instanceof Rs) {
    const f = e.getScopes().filter((h) => h !== "");
    f.length > 0 && (o.scopes = f.join(","));
  }
  n.tenantId && (o.tid = n.tenantId);
  const c = o;
  for (const f of Object.keys(c))
    c[f] === void 0 && delete c[f];
  const u = await n._getAppCheckToken(), l = u ? `#${ZC}=${encodeURIComponent(u)}` : "";
  return `${eP(n)}?${mi(c).slice(1)}${l}`;
}
function eP({ config: n }) {
  return n.emulator ? Tl(n, XC) : `https://${n.authDomain}/${JC}`;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Dc = "webStorageSupport";
class tP {
  constructor() {
    this.eventManagers = {}, this.iframes = {}, this.originValidationPromises = {}, this._redirectPersistence = Ty, this._completeRedirectFn = SC, this._overrideRedirectResult = TC;
  }
  // Wrapping in async even though we don't await anywhere in order
  // to make sure errors are raised as promise rejections
  async _openPopup(e, t, r, i) {
    var s;
    In((s = this.eventManagers[e._key()]) === null || s === void 0 ? void 0 : s.manager, "_initialize() not called before _openPopup()");
    const o = await np(e, t, r, bu(), i);
    return QC(e, o, Pl());
  }
  async _openRedirect(e, t, r, i) {
    await this._originValidation(e);
    const s = await np(e, t, r, bu(), i);
    return HR(s), new Promise(() => {
    });
  }
  _initialize(e) {
    const t = e._key();
    if (this.eventManagers[t]) {
      const { manager: i, promise: s } = this.eventManagers[t];
      return i ? Promise.resolve(i) : (In(s, "If manager is not set, promise should be"), s);
    }
    const r = this.initAndGetManager(e);
    return this.eventManagers[t] = { promise: r }, r.catch(() => {
      delete this.eventManagers[t];
    }), r;
  }
  async initAndGetManager(e) {
    const t = await qC(e), r = new RC(e);
    return t.register("authEvent", (i) => (ne(
      i == null ? void 0 : i.authEvent,
      e,
      "invalid-auth-event"
      /* AuthErrorCode.INVALID_AUTH_EVENT */
    ), {
      status: r.onEvent(i.authEvent) ? "ACK" : "ERROR"
      /* GapiOutcome.ERROR */
    }), gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER), this.eventManagers[e._key()] = { manager: r }, this.iframes[e._key()] = t, r;
  }
  _isIframeWebStorageSupported(e, t) {
    this.iframes[e._key()].send(Dc, { type: Dc }, (i) => {
      var s;
      const o = (s = i == null ? void 0 : i[0]) === null || s === void 0 ? void 0 : s[Dc];
      o !== void 0 && t(!!o), qt(
        e,
        "internal-error"
        /* AuthErrorCode.INTERNAL_ERROR */
      );
    }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
  }
  _originValidation(e) {
    const t = e._key();
    return this.originValidationPromises[t] || (this.originValidationPromises[t] = DC(e)), this.originValidationPromises[t];
  }
  get _shouldInitProactively() {
    return fy() || Il() || Sa();
  }
}
const nP = tP;
var rp = "@firebase/auth", ip = "1.7.6";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class rP {
  constructor(e) {
    this.auth = e, this.internalListeners = /* @__PURE__ */ new Map();
  }
  getUid() {
    var e;
    return this.assertAuthConfigured(), ((e = this.auth.currentUser) === null || e === void 0 ? void 0 : e.uid) || null;
  }
  async getToken(e) {
    return this.assertAuthConfigured(), await this.auth._initializationPromise, this.auth.currentUser ? { accessToken: await this.auth.currentUser.getIdToken(e) } : null;
  }
  addAuthTokenListener(e) {
    if (this.assertAuthConfigured(), this.internalListeners.has(e))
      return;
    const t = this.auth.onIdTokenChanged((r) => {
      e((r == null ? void 0 : r.stsTokenManager.accessToken) || null);
    });
    this.internalListeners.set(e, t), this.updateProactiveRefresh();
  }
  removeAuthTokenListener(e) {
    this.assertAuthConfigured();
    const t = this.internalListeners.get(e);
    t && (this.internalListeners.delete(e), t(), this.updateProactiveRefresh());
  }
  assertAuthConfigured() {
    ne(
      this.auth._initializationPromise,
      "dependent-sdk-initialized-before-auth"
      /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */
    );
  }
  updateProactiveRefresh() {
    this.internalListeners.size > 0 ? this.auth._startProactiveRefresh() : this.auth._stopProactiveRefresh();
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function iP(n) {
  switch (n) {
    case "Node":
      return "node";
    case "ReactNative":
      return "rn";
    case "Worker":
      return "webworker";
    case "Cordova":
      return "cordova";
    case "WebExtension":
      return "web-extension";
    default:
      return;
  }
}
function sP(n) {
  br(new zn(
    "auth",
    (e, { options: t }) => {
      const r = e.getProvider("app").getImmediate(), i = e.getProvider("heartbeat"), s = e.getProvider("app-check-internal"), { apiKey: o, authDomain: c } = r.options;
      ne(o && !o.includes(":"), "invalid-api-key", { appName: r.name });
      const u = {
        apiKey: o,
        authDomain: c,
        clientPlatform: n,
        apiHost: "identitytoolkit.googleapis.com",
        tokenApiHost: "securetoken.googleapis.com",
        apiScheme: "https",
        sdkClientVersion: dy(n)
      }, l = new lR(r, i, s, u);
      return vR(l, t), l;
    },
    "PUBLIC"
    /* ComponentType.PUBLIC */
  ).setInstantiationMode(
    "EXPLICIT"
    /* InstantiationMode.EXPLICIT */
  ).setInstanceCreatedCallback((e, t, r) => {
    e.getProvider(
      "auth-internal"
      /* _ComponentName.AUTH_INTERNAL */
    ).initialize();
  })), br(new zn(
    "auth-internal",
    (e) => {
      const t = fn(e.getProvider(
        "auth"
        /* _ComponentName.AUTH */
      ).getImmediate());
      return ((r) => new rP(r))(t);
    },
    "PRIVATE"
    /* ComponentType.PRIVATE */
  ).setInstantiationMode(
    "EXPLICIT"
    /* InstantiationMode.EXPLICIT */
  )), nn(rp, ip, iP(n)), nn(rp, ip, "esm2017");
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const oP = 5 * 60, aP = Kg("authIdTokenMaxAge") || oP;
let sp = null;
const cP = (n) => async (e) => {
  const t = e && await e.getIdTokenResult(), r = t && ((/* @__PURE__ */ new Date()).getTime() - Date.parse(t.issuedAtTime)) / 1e3;
  if (r && r > aP)
    return;
  const i = t == null ? void 0 : t.token;
  sp !== i && (sp = i, await fetch(n, {
    method: i ? "POST" : "DELETE",
    headers: i ? {
      Authorization: `Bearer ${i}`
    } : {}
  }));
};
function uP(n = _l()) {
  const e = Ia(n, "auth");
  if (e.isInitialized())
    return e.getImmediate();
  const t = _R(n, {
    popupRedirectResolver: nP,
    persistence: [
      tC,
      qR,
      Ty
    ]
  }), r = Kg("authTokenSyncURL");
  if (r && typeof isSecureContext == "boolean" && isSecureContext) {
    const s = new URL(r, location.origin);
    if (location.origin === s.origin) {
      const o = cP(s.toString());
      FR(t, o, () => o(t.currentUser)), VR(t, (c) => o(c));
    }
  }
  const i = $g("auth");
  return i && wR(t, `http://${i}`), t;
}
function lP() {
  var n, e;
  return (e = (n = document.getElementsByTagName("head")) === null || n === void 0 ? void 0 : n[0]) !== null && e !== void 0 ? e : document;
}
hR({
  loadJS(n) {
    return new Promise((e, t) => {
      const r = document.createElement("script");
      r.setAttribute("src", n), r.onload = e, r.onerror = (i) => {
        const s = kt(
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        s.customData = i, t(s);
      }, r.type = "text/javascript", r.charset = "UTF-8", lP().appendChild(r);
    });
  },
  gapiScript: "https://apis.google.com/js/api.js",
  recaptchaV2Script: "https://www.google.com/recaptcha/api.js",
  recaptchaEnterpriseScript: "https://www.google.com/recaptcha/enterprise.js?render="
});
sP(
  "Browser"
  /* ClientPlatform.BROWSER */
);
var op = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof globalThis < "u" ? globalThis : typeof self < "u" ? self : {};
/** @license
Copyright The Closure Library Authors.
SPDX-License-Identifier: Apache-2.0
*/
var mr, Py;
(function() {
  var n;
  /** @license
  
   Copyright The Closure Library Authors.
   SPDX-License-Identifier: Apache-2.0
  */
  function e(R, b) {
    function A() {
    }
    A.prototype = b.prototype, R.D = b.prototype, R.prototype = new A(), R.prototype.constructor = R, R.C = function(O, D, N) {
      for (var k = Array(arguments.length - 2), Y = 2; Y < arguments.length; Y++) k[Y - 2] = arguments[Y];
      return b.prototype[D].apply(O, k);
    };
  }
  function t() {
    this.blockSize = -1;
  }
  function r() {
    this.blockSize = -1, this.blockSize = 64, this.g = Array(4), this.B = Array(this.blockSize), this.o = this.h = 0, this.s();
  }
  e(r, t), r.prototype.s = function() {
    this.g[0] = 1732584193, this.g[1] = 4023233417, this.g[2] = 2562383102, this.g[3] = 271733878, this.o = this.h = 0;
  };
  function i(R, b, A) {
    A || (A = 0);
    var O = Array(16);
    if (typeof b == "string") for (var D = 0; 16 > D; ++D) O[D] = b.charCodeAt(A++) | b.charCodeAt(A++) << 8 | b.charCodeAt(A++) << 16 | b.charCodeAt(A++) << 24;
    else for (D = 0; 16 > D; ++D) O[D] = b[A++] | b[A++] << 8 | b[A++] << 16 | b[A++] << 24;
    b = R.g[0], A = R.g[1], D = R.g[2];
    var N = R.g[3], k = b + (N ^ A & (D ^ N)) + O[0] + 3614090360 & 4294967295;
    b = A + (k << 7 & 4294967295 | k >>> 25), k = N + (D ^ b & (A ^ D)) + O[1] + 3905402710 & 4294967295, N = b + (k << 12 & 4294967295 | k >>> 20), k = D + (A ^ N & (b ^ A)) + O[2] + 606105819 & 4294967295, D = N + (k << 17 & 4294967295 | k >>> 15), k = A + (b ^ D & (N ^ b)) + O[3] + 3250441966 & 4294967295, A = D + (k << 22 & 4294967295 | k >>> 10), k = b + (N ^ A & (D ^ N)) + O[4] + 4118548399 & 4294967295, b = A + (k << 7 & 4294967295 | k >>> 25), k = N + (D ^ b & (A ^ D)) + O[5] + 1200080426 & 4294967295, N = b + (k << 12 & 4294967295 | k >>> 20), k = D + (A ^ N & (b ^ A)) + O[6] + 2821735955 & 4294967295, D = N + (k << 17 & 4294967295 | k >>> 15), k = A + (b ^ D & (N ^ b)) + O[7] + 4249261313 & 4294967295, A = D + (k << 22 & 4294967295 | k >>> 10), k = b + (N ^ A & (D ^ N)) + O[8] + 1770035416 & 4294967295, b = A + (k << 7 & 4294967295 | k >>> 25), k = N + (D ^ b & (A ^ D)) + O[9] + 2336552879 & 4294967295, N = b + (k << 12 & 4294967295 | k >>> 20), k = D + (A ^ N & (b ^ A)) + O[10] + 4294925233 & 4294967295, D = N + (k << 17 & 4294967295 | k >>> 15), k = A + (b ^ D & (N ^ b)) + O[11] + 2304563134 & 4294967295, A = D + (k << 22 & 4294967295 | k >>> 10), k = b + (N ^ A & (D ^ N)) + O[12] + 1804603682 & 4294967295, b = A + (k << 7 & 4294967295 | k >>> 25), k = N + (D ^ b & (A ^ D)) + O[13] + 4254626195 & 4294967295, N = b + (k << 12 & 4294967295 | k >>> 20), k = D + (A ^ N & (b ^ A)) + O[14] + 2792965006 & 4294967295, D = N + (k << 17 & 4294967295 | k >>> 15), k = A + (b ^ D & (N ^ b)) + O[15] + 1236535329 & 4294967295, A = D + (k << 22 & 4294967295 | k >>> 10), k = b + (D ^ N & (A ^ D)) + O[1] + 4129170786 & 4294967295, b = A + (k << 5 & 4294967295 | k >>> 27), k = N + (A ^ D & (b ^ A)) + O[6] + 3225465664 & 4294967295, N = b + (k << 9 & 4294967295 | k >>> 23), k = D + (b ^ A & (N ^ b)) + O[11] + 643717713 & 4294967295, D = N + (k << 14 & 4294967295 | k >>> 18), k = A + (N ^ b & (D ^ N)) + O[0] + 3921069994 & 4294967295, A = D + (k << 20 & 4294967295 | k >>> 12), k = b + (D ^ N & (A ^ D)) + O[5] + 3593408605 & 4294967295, b = A + (k << 5 & 4294967295 | k >>> 27), k = N + (A ^ D & (b ^ A)) + O[10] + 38016083 & 4294967295, N = b + (k << 9 & 4294967295 | k >>> 23), k = D + (b ^ A & (N ^ b)) + O[15] + 3634488961 & 4294967295, D = N + (k << 14 & 4294967295 | k >>> 18), k = A + (N ^ b & (D ^ N)) + O[4] + 3889429448 & 4294967295, A = D + (k << 20 & 4294967295 | k >>> 12), k = b + (D ^ N & (A ^ D)) + O[9] + 568446438 & 4294967295, b = A + (k << 5 & 4294967295 | k >>> 27), k = N + (A ^ D & (b ^ A)) + O[14] + 3275163606 & 4294967295, N = b + (k << 9 & 4294967295 | k >>> 23), k = D + (b ^ A & (N ^ b)) + O[3] + 4107603335 & 4294967295, D = N + (k << 14 & 4294967295 | k >>> 18), k = A + (N ^ b & (D ^ N)) + O[8] + 1163531501 & 4294967295, A = D + (k << 20 & 4294967295 | k >>> 12), k = b + (D ^ N & (A ^ D)) + O[13] + 2850285829 & 4294967295, b = A + (k << 5 & 4294967295 | k >>> 27), k = N + (A ^ D & (b ^ A)) + O[2] + 4243563512 & 4294967295, N = b + (k << 9 & 4294967295 | k >>> 23), k = D + (b ^ A & (N ^ b)) + O[7] + 1735328473 & 4294967295, D = N + (k << 14 & 4294967295 | k >>> 18), k = A + (N ^ b & (D ^ N)) + O[12] + 2368359562 & 4294967295, A = D + (k << 20 & 4294967295 | k >>> 12), k = b + (A ^ D ^ N) + O[5] + 4294588738 & 4294967295, b = A + (k << 4 & 4294967295 | k >>> 28), k = N + (b ^ A ^ D) + O[8] + 2272392833 & 4294967295, N = b + (k << 11 & 4294967295 | k >>> 21), k = D + (N ^ b ^ A) + O[11] + 1839030562 & 4294967295, D = N + (k << 16 & 4294967295 | k >>> 16), k = A + (D ^ N ^ b) + O[14] + 4259657740 & 4294967295, A = D + (k << 23 & 4294967295 | k >>> 9), k = b + (A ^ D ^ N) + O[1] + 2763975236 & 4294967295, b = A + (k << 4 & 4294967295 | k >>> 28), k = N + (b ^ A ^ D) + O[4] + 1272893353 & 4294967295, N = b + (k << 11 & 4294967295 | k >>> 21), k = D + (N ^ b ^ A) + O[7] + 4139469664 & 4294967295, D = N + (k << 16 & 4294967295 | k >>> 16), k = A + (D ^ N ^ b) + O[10] + 3200236656 & 4294967295, A = D + (k << 23 & 4294967295 | k >>> 9), k = b + (A ^ D ^ N) + O[13] + 681279174 & 4294967295, b = A + (k << 4 & 4294967295 | k >>> 28), k = N + (b ^ A ^ D) + O[0] + 3936430074 & 4294967295, N = b + (k << 11 & 4294967295 | k >>> 21), k = D + (N ^ b ^ A) + O[3] + 3572445317 & 4294967295, D = N + (k << 16 & 4294967295 | k >>> 16), k = A + (D ^ N ^ b) + O[6] + 76029189 & 4294967295, A = D + (k << 23 & 4294967295 | k >>> 9), k = b + (A ^ D ^ N) + O[9] + 3654602809 & 4294967295, b = A + (k << 4 & 4294967295 | k >>> 28), k = N + (b ^ A ^ D) + O[12] + 3873151461 & 4294967295, N = b + (k << 11 & 4294967295 | k >>> 21), k = D + (N ^ b ^ A) + O[15] + 530742520 & 4294967295, D = N + (k << 16 & 4294967295 | k >>> 16), k = A + (D ^ N ^ b) + O[2] + 3299628645 & 4294967295, A = D + (k << 23 & 4294967295 | k >>> 9), k = b + (D ^ (A | ~N)) + O[0] + 4096336452 & 4294967295, b = A + (k << 6 & 4294967295 | k >>> 26), k = N + (A ^ (b | ~D)) + O[7] + 1126891415 & 4294967295, N = b + (k << 10 & 4294967295 | k >>> 22), k = D + (b ^ (N | ~A)) + O[14] + 2878612391 & 4294967295, D = N + (k << 15 & 4294967295 | k >>> 17), k = A + (N ^ (D | ~b)) + O[5] + 4237533241 & 4294967295, A = D + (k << 21 & 4294967295 | k >>> 11), k = b + (D ^ (A | ~N)) + O[12] + 1700485571 & 4294967295, b = A + (k << 6 & 4294967295 | k >>> 26), k = N + (A ^ (b | ~D)) + O[3] + 2399980690 & 4294967295, N = b + (k << 10 & 4294967295 | k >>> 22), k = D + (b ^ (N | ~A)) + O[10] + 4293915773 & 4294967295, D = N + (k << 15 & 4294967295 | k >>> 17), k = A + (N ^ (D | ~b)) + O[1] + 2240044497 & 4294967295, A = D + (k << 21 & 4294967295 | k >>> 11), k = b + (D ^ (A | ~N)) + O[8] + 1873313359 & 4294967295, b = A + (k << 6 & 4294967295 | k >>> 26), k = N + (A ^ (b | ~D)) + O[15] + 4264355552 & 4294967295, N = b + (k << 10 & 4294967295 | k >>> 22), k = D + (b ^ (N | ~A)) + O[6] + 2734768916 & 4294967295, D = N + (k << 15 & 4294967295 | k >>> 17), k = A + (N ^ (D | ~b)) + O[13] + 1309151649 & 4294967295, A = D + (k << 21 & 4294967295 | k >>> 11), k = b + (D ^ (A | ~N)) + O[4] + 4149444226 & 4294967295, b = A + (k << 6 & 4294967295 | k >>> 26), k = N + (A ^ (b | ~D)) + O[11] + 3174756917 & 4294967295, N = b + (k << 10 & 4294967295 | k >>> 22), k = D + (b ^ (N | ~A)) + O[2] + 718787259 & 4294967295, D = N + (k << 15 & 4294967295 | k >>> 17), k = A + (N ^ (D | ~b)) + O[9] + 3951481745 & 4294967295, R.g[0] = R.g[0] + b & 4294967295, R.g[1] = R.g[1] + (D + (k << 21 & 4294967295 | k >>> 11)) & 4294967295, R.g[2] = R.g[2] + D & 4294967295, R.g[3] = R.g[3] + N & 4294967295;
  }
  r.prototype.u = function(R, b) {
    b === void 0 && (b = R.length);
    for (var A = b - this.blockSize, O = this.B, D = this.h, N = 0; N < b; ) {
      if (D == 0) for (; N <= A; ) i(this, R, N), N += this.blockSize;
      if (typeof R == "string") {
        for (; N < b; )
          if (O[D++] = R.charCodeAt(N++), D == this.blockSize) {
            i(this, O), D = 0;
            break;
          }
      } else for (; N < b; ) if (O[D++] = R[N++], D == this.blockSize) {
        i(this, O), D = 0;
        break;
      }
    }
    this.h = D, this.o += b;
  }, r.prototype.v = function() {
    var R = Array((56 > this.h ? this.blockSize : 2 * this.blockSize) - this.h);
    R[0] = 128;
    for (var b = 1; b < R.length - 8; ++b) R[b] = 0;
    var A = 8 * this.o;
    for (b = R.length - 8; b < R.length; ++b) R[b] = A & 255, A /= 256;
    for (this.u(R), R = Array(16), b = A = 0; 4 > b; ++b) for (var O = 0; 32 > O; O += 8) R[A++] = this.g[b] >>> O & 255;
    return R;
  };
  function s(R, b) {
    var A = c;
    return Object.prototype.hasOwnProperty.call(A, R) ? A[R] : A[R] = b(R);
  }
  function o(R, b) {
    this.h = b;
    for (var A = [], O = !0, D = R.length - 1; 0 <= D; D--) {
      var N = R[D] | 0;
      O && N == b || (A[D] = N, O = !1);
    }
    this.g = A;
  }
  var c = {};
  function u(R) {
    return -128 <= R && 128 > R ? s(R, function(b) {
      return new o([b | 0], 0 > b ? -1 : 0);
    }) : new o([R | 0], 0 > R ? -1 : 0);
  }
  function l(R) {
    if (isNaN(R) || !isFinite(R)) return h;
    if (0 > R) return w(l(-R));
    for (var b = [], A = 1, O = 0; R >= A; O++) b[O] = R / A | 0, A *= 4294967296;
    return new o(b, 0);
  }
  function f(R, b) {
    if (R.length == 0) throw Error("number format error: empty string");
    if (b = b || 10, 2 > b || 36 < b) throw Error("radix out of range: " + b);
    if (R.charAt(0) == "-") return w(f(R.substring(1), b));
    if (0 <= R.indexOf("-")) throw Error('number format error: interior "-" character');
    for (var A = l(Math.pow(b, 8)), O = h, D = 0; D < R.length; D += 8) {
      var N = Math.min(8, R.length - D), k = parseInt(R.substring(D, D + N), b);
      8 > N ? (N = l(Math.pow(b, N)), O = O.j(N).add(l(k))) : (O = O.j(A), O = O.add(l(k)));
    }
    return O;
  }
  var h = u(0), y = u(1), T = u(16777216);
  n = o.prototype, n.m = function() {
    if (C(this)) return -w(this).m();
    for (var R = 0, b = 1, A = 0; A < this.g.length; A++) {
      var O = this.i(A);
      R += (0 <= O ? O : 4294967296 + O) * b, b *= 4294967296;
    }
    return R;
  }, n.toString = function(R) {
    if (R = R || 10, 2 > R || 36 < R) throw Error("radix out of range: " + R);
    if (S(this)) return "0";
    if (C(this)) return "-" + w(this).toString(R);
    for (var b = l(Math.pow(R, 6)), A = this, O = ""; ; ) {
      var D = m(A, b).g;
      A = E(A, D.j(b));
      var N = ((0 < A.g.length ? A.g[0] : A.h) >>> 0).toString(R);
      if (A = D, S(A)) return N + O;
      for (; 6 > N.length; ) N = "0" + N;
      O = N + O;
    }
  }, n.i = function(R) {
    return 0 > R ? 0 : R < this.g.length ? this.g[R] : this.h;
  };
  function S(R) {
    if (R.h != 0) return !1;
    for (var b = 0; b < R.g.length; b++) if (R.g[b] != 0) return !1;
    return !0;
  }
  function C(R) {
    return R.h == -1;
  }
  n.l = function(R) {
    return R = E(this, R), C(R) ? -1 : S(R) ? 0 : 1;
  };
  function w(R) {
    for (var b = R.g.length, A = [], O = 0; O < b; O++) A[O] = ~R.g[O];
    return new o(A, ~R.h).add(y);
  }
  n.abs = function() {
    return C(this) ? w(this) : this;
  }, n.add = function(R) {
    for (var b = Math.max(this.g.length, R.g.length), A = [], O = 0, D = 0; D <= b; D++) {
      var N = O + (this.i(D) & 65535) + (R.i(D) & 65535), k = (N >>> 16) + (this.i(D) >>> 16) + (R.i(D) >>> 16);
      O = k >>> 16, N &= 65535, k &= 65535, A[D] = k << 16 | N;
    }
    return new o(A, A[A.length - 1] & -2147483648 ? -1 : 0);
  };
  function E(R, b) {
    return R.add(w(b));
  }
  n.j = function(R) {
    if (S(this) || S(R)) return h;
    if (C(this)) return C(R) ? w(this).j(w(R)) : w(w(this).j(R));
    if (C(R)) return w(this.j(w(R)));
    if (0 > this.l(T) && 0 > R.l(T)) return l(this.m() * R.m());
    for (var b = this.g.length + R.g.length, A = [], O = 0; O < 2 * b; O++) A[O] = 0;
    for (O = 0; O < this.g.length; O++) for (var D = 0; D < R.g.length; D++) {
      var N = this.i(O) >>> 16, k = this.i(O) & 65535, Y = R.i(D) >>> 16, oe = R.i(D) & 65535;
      A[2 * O + 2 * D] += k * oe, g(A, 2 * O + 2 * D), A[2 * O + 2 * D + 1] += N * oe, g(A, 2 * O + 2 * D + 1), A[2 * O + 2 * D + 1] += k * Y, g(A, 2 * O + 2 * D + 1), A[2 * O + 2 * D + 2] += N * Y, g(A, 2 * O + 2 * D + 2);
    }
    for (O = 0; O < b; O++) A[O] = A[2 * O + 1] << 16 | A[2 * O];
    for (O = b; O < 2 * b; O++) A[O] = 0;
    return new o(A, 0);
  };
  function g(R, b) {
    for (; (R[b] & 65535) != R[b]; ) R[b + 1] += R[b] >>> 16, R[b] &= 65535, b++;
  }
  function d(R, b) {
    this.g = R, this.h = b;
  }
  function m(R, b) {
    if (S(b)) throw Error("division by zero");
    if (S(R)) return new d(h, h);
    if (C(R)) return b = m(w(R), b), new d(w(b.g), w(b.h));
    if (C(b)) return b = m(R, w(b)), new d(w(b.g), b.h);
    if (30 < R.g.length) {
      if (C(R) || C(b)) throw Error("slowDivide_ only works with positive integers.");
      for (var A = y, O = b; 0 >= O.l(R); ) A = v(A), O = v(O);
      var D = I(A, 1), N = I(O, 1);
      for (O = I(O, 2), A = I(A, 2); !S(O); ) {
        var k = N.add(O);
        0 >= k.l(R) && (D = D.add(A), N = k), O = I(O, 1), A = I(A, 1);
      }
      return b = E(R, D.j(b)), new d(D, b);
    }
    for (D = h; 0 <= R.l(b); ) {
      for (A = Math.max(1, Math.floor(R.m() / b.m())), O = Math.ceil(Math.log(A) / Math.LN2), O = 48 >= O ? 1 : Math.pow(2, O - 48), N = l(A), k = N.j(b); C(k) || 0 < k.l(R); ) A -= O, N = l(A), k = N.j(b);
      S(N) && (N = y), D = D.add(N), R = E(R, k);
    }
    return new d(D, R);
  }
  n.A = function(R) {
    return m(this, R).h;
  }, n.and = function(R) {
    for (var b = Math.max(this.g.length, R.g.length), A = [], O = 0; O < b; O++) A[O] = this.i(O) & R.i(O);
    return new o(A, this.h & R.h);
  }, n.or = function(R) {
    for (var b = Math.max(this.g.length, R.g.length), A = [], O = 0; O < b; O++) A[O] = this.i(O) | R.i(O);
    return new o(A, this.h | R.h);
  }, n.xor = function(R) {
    for (var b = Math.max(this.g.length, R.g.length), A = [], O = 0; O < b; O++) A[O] = this.i(O) ^ R.i(O);
    return new o(A, this.h ^ R.h);
  };
  function v(R) {
    for (var b = R.g.length + 1, A = [], O = 0; O < b; O++) A[O] = R.i(O) << 1 | R.i(O - 1) >>> 31;
    return new o(A, R.h);
  }
  function I(R, b) {
    var A = b >> 5;
    b %= 32;
    for (var O = R.g.length - A, D = [], N = 0; N < O; N++) D[N] = 0 < b ? R.i(N + A) >>> b | R.i(N + A + 1) << 32 - b : R.i(N + A);
    return new o(D, R.h);
  }
  r.prototype.digest = r.prototype.v, r.prototype.reset = r.prototype.s, r.prototype.update = r.prototype.u, Py = r, o.prototype.add = o.prototype.add, o.prototype.multiply = o.prototype.j, o.prototype.modulo = o.prototype.A, o.prototype.compare = o.prototype.l, o.prototype.toNumber = o.prototype.m, o.prototype.toString = o.prototype.toString, o.prototype.getBits = o.prototype.i, o.fromNumber = l, o.fromString = f, mr = o;
}).apply(typeof op < "u" ? op : typeof self < "u" ? self : typeof window < "u" ? window : {});
var ho = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof globalThis < "u" ? globalThis : typeof self < "u" ? self : {};
/** @license
Copyright The Closure Library Authors.
SPDX-License-Identifier: Apache-2.0
*/
var ky, Oy, Hi, Dy, Ro, Ru, Ny, xy, Ly;
(function() {
  var n, e = typeof Object.defineProperties == "function" ? Object.defineProperty : function(a, p, _) {
    return a == Array.prototype || a == Object.prototype || (a[p] = _.value), a;
  };
  function t(a) {
    a = [typeof globalThis == "object" && globalThis, a, typeof window == "object" && window, typeof self == "object" && self, typeof ho == "object" && ho];
    for (var p = 0; p < a.length; ++p) {
      var _ = a[p];
      if (_ && _.Math == Math) return _;
    }
    throw Error("Cannot find global object");
  }
  var r = t(this);
  function i(a, p) {
    if (p) e: {
      var _ = r;
      a = a.split(".");
      for (var P = 0; P < a.length - 1; P++) {
        var M = a[P];
        if (!(M in _)) break e;
        _ = _[M];
      }
      a = a[a.length - 1], P = _[a], p = p(P), p != P && p != null && e(_, a, { configurable: !0, writable: !0, value: p });
    }
  }
  function s(a, p) {
    a instanceof String && (a += "");
    var _ = 0, P = !1, M = { next: function() {
      if (!P && _ < a.length) {
        var F = _++;
        return { value: p(F, a[F]), done: !1 };
      }
      return P = !0, { done: !0, value: void 0 };
    } };
    return M[Symbol.iterator] = function() {
      return M;
    }, M;
  }
  i("Array.prototype.values", function(a) {
    return a || function() {
      return s(this, function(p, _) {
        return _;
      });
    };
  });
  /** @license
  
   Copyright The Closure Library Authors.
   SPDX-License-Identifier: Apache-2.0
  */
  var o = o || {}, c = this || self;
  function u(a) {
    var p = typeof a;
    return p = p != "object" ? p : a ? Array.isArray(a) ? "array" : p : "null", p == "array" || p == "object" && typeof a.length == "number";
  }
  function l(a) {
    var p = typeof a;
    return p == "object" && a != null || p == "function";
  }
  function f(a, p, _) {
    return a.call.apply(a.bind, arguments);
  }
  function h(a, p, _) {
    if (!a) throw Error();
    if (2 < arguments.length) {
      var P = Array.prototype.slice.call(arguments, 2);
      return function() {
        var M = Array.prototype.slice.call(arguments);
        return Array.prototype.unshift.apply(M, P), a.apply(p, M);
      };
    }
    return function() {
      return a.apply(p, arguments);
    };
  }
  function y(a, p, _) {
    return y = Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1 ? f : h, y.apply(null, arguments);
  }
  function T(a, p) {
    var _ = Array.prototype.slice.call(arguments, 1);
    return function() {
      var P = _.slice();
      return P.push.apply(P, arguments), a.apply(this, P);
    };
  }
  function S(a, p) {
    function _() {
    }
    _.prototype = p.prototype, a.aa = p.prototype, a.prototype = new _(), a.prototype.constructor = a, a.Qb = function(P, M, F) {
      for (var W = Array(arguments.length - 2), Oe = 2; Oe < arguments.length; Oe++) W[Oe - 2] = arguments[Oe];
      return p.prototype[M].apply(P, W);
    };
  }
  function C(a) {
    const p = a.length;
    if (0 < p) {
      const _ = Array(p);
      for (let P = 0; P < p; P++) _[P] = a[P];
      return _;
    }
    return [];
  }
  function w(a, p) {
    for (let _ = 1; _ < arguments.length; _++) {
      const P = arguments[_];
      if (u(P)) {
        const M = a.length || 0, F = P.length || 0;
        a.length = M + F;
        for (let W = 0; W < F; W++) a[M + W] = P[W];
      } else a.push(P);
    }
  }
  class E {
    constructor(p, _) {
      this.i = p, this.j = _, this.h = 0, this.g = null;
    }
    get() {
      let p;
      return 0 < this.h ? (this.h--, p = this.g, this.g = p.next, p.next = null) : p = this.i(), p;
    }
  }
  function g(a) {
    return /^[\s\xa0]*$/.test(a);
  }
  function d() {
    var a = c.navigator;
    return a && (a = a.userAgent) ? a : "";
  }
  function m(a) {
    return m[" "](a), a;
  }
  m[" "] = function() {
  };
  var v = d().indexOf("Gecko") != -1 && !(d().toLowerCase().indexOf("webkit") != -1 && d().indexOf("Edge") == -1) && !(d().indexOf("Trident") != -1 || d().indexOf("MSIE") != -1) && d().indexOf("Edge") == -1;
  function I(a, p, _) {
    for (const P in a) p.call(_, a[P], P, a);
  }
  function R(a, p) {
    for (const _ in a) p.call(void 0, a[_], _, a);
  }
  function b(a) {
    const p = {};
    for (const _ in a) p[_] = a[_];
    return p;
  }
  const A = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
  function O(a, p) {
    let _, P;
    for (let M = 1; M < arguments.length; M++) {
      P = arguments[M];
      for (_ in P) a[_] = P[_];
      for (let F = 0; F < A.length; F++) _ = A[F], Object.prototype.hasOwnProperty.call(P, _) && (a[_] = P[_]);
    }
  }
  function D(a) {
    var p = 1;
    a = a.split(":");
    const _ = [];
    for (; 0 < p && a.length; ) _.push(a.shift()), p--;
    return a.length && _.push(a.join(":")), _;
  }
  function N(a) {
    c.setTimeout(() => {
      throw a;
    }, 0);
  }
  function k() {
    var a = L;
    let p = null;
    return a.g && (p = a.g, a.g = a.g.next, a.g || (a.h = null), p.next = null), p;
  }
  class Y {
    constructor() {
      this.h = this.g = null;
    }
    add(p, _) {
      const P = oe.get();
      P.set(p, _), this.h ? this.h.next = P : this.g = P, this.h = P;
    }
  }
  var oe = new E(() => new ue(), (a) => a.reset());
  class ue {
    constructor() {
      this.next = this.g = this.h = null;
    }
    set(p, _) {
      this.h = p, this.g = _, this.next = null;
    }
    reset() {
      this.next = this.g = this.h = null;
    }
  }
  let ae, x = !1, L = new Y(), $ = () => {
    const a = c.Promise.resolve(void 0);
    ae = () => {
      a.then(U);
    };
  };
  var U = () => {
    for (var a; a = k(); ) {
      try {
        a.h.call(a.g);
      } catch (_) {
        N(_);
      }
      var p = oe;
      p.j(a), 100 > p.h && (p.h++, a.next = p.g, p.g = a);
    }
    x = !1;
  };
  function q() {
    this.s = this.s, this.C = this.C;
  }
  q.prototype.s = !1, q.prototype.ma = function() {
    this.s || (this.s = !0, this.N());
  }, q.prototype.N = function() {
    if (this.C) for (; this.C.length; ) this.C.shift()();
  };
  function H(a, p) {
    this.type = a, this.g = this.target = p, this.defaultPrevented = !1;
  }
  H.prototype.h = function() {
    this.defaultPrevented = !0;
  };
  var ie = function() {
    if (!c.addEventListener || !Object.defineProperty) return !1;
    var a = !1, p = Object.defineProperty({}, "passive", { get: function() {
      a = !0;
    } });
    try {
      const _ = () => {
      };
      c.addEventListener("test", _, p), c.removeEventListener("test", _, p);
    } catch {
    }
    return a;
  }();
  function z(a, p) {
    if (H.call(this, a ? a.type : ""), this.relatedTarget = this.g = this.target = null, this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0, this.key = "", this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1, this.state = null, this.pointerId = 0, this.pointerType = "", this.i = null, a) {
      var _ = this.type = a.type, P = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
      if (this.target = a.target || a.srcElement, this.g = p, p = a.relatedTarget) {
        if (v) {
          e: {
            try {
              m(p.nodeName);
              var M = !0;
              break e;
            } catch {
            }
            M = !1;
          }
          M || (p = null);
        }
      } else _ == "mouseover" ? p = a.fromElement : _ == "mouseout" && (p = a.toElement);
      this.relatedTarget = p, P ? (this.clientX = P.clientX !== void 0 ? P.clientX : P.pageX, this.clientY = P.clientY !== void 0 ? P.clientY : P.pageY, this.screenX = P.screenX || 0, this.screenY = P.screenY || 0) : (this.clientX = a.clientX !== void 0 ? a.clientX : a.pageX, this.clientY = a.clientY !== void 0 ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0), this.button = a.button, this.key = a.key || "", this.ctrlKey = a.ctrlKey, this.altKey = a.altKey, this.shiftKey = a.shiftKey, this.metaKey = a.metaKey, this.pointerId = a.pointerId || 0, this.pointerType = typeof a.pointerType == "string" ? a.pointerType : V[a.pointerType] || "", this.state = a.state, this.i = a, a.defaultPrevented && z.aa.h.call(this);
    }
  }
  S(z, H);
  var V = { 2: "touch", 3: "pen", 4: "mouse" };
  z.prototype.h = function() {
    z.aa.h.call(this);
    var a = this.i;
    a.preventDefault ? a.preventDefault() : a.returnValue = !1;
  };
  var j = "closure_listenable_" + (1e6 * Math.random() | 0), Q = 0;
  function Z(a, p, _, P, M) {
    this.listener = a, this.proxy = null, this.src = p, this.type = _, this.capture = !!P, this.ha = M, this.key = ++Q, this.da = this.fa = !1;
  }
  function te(a) {
    a.da = !0, a.listener = null, a.proxy = null, a.src = null, a.ha = null;
  }
  function me(a) {
    this.src = a, this.g = {}, this.h = 0;
  }
  me.prototype.add = function(a, p, _, P, M) {
    var F = a.toString();
    a = this.g[F], a || (a = this.g[F] = [], this.h++);
    var W = be(a, p, P, M);
    return -1 < W ? (p = a[W], _ || (p.fa = !1)) : (p = new Z(p, this.src, F, !!P, M), p.fa = _, a.push(p)), p;
  };
  function G(a, p) {
    var _ = p.type;
    if (_ in a.g) {
      var P = a.g[_], M = Array.prototype.indexOf.call(P, p, void 0), F;
      (F = 0 <= M) && Array.prototype.splice.call(P, M, 1), F && (te(p), a.g[_].length == 0 && (delete a.g[_], a.h--));
    }
  }
  function be(a, p, _, P) {
    for (var M = 0; M < a.length; ++M) {
      var F = a[M];
      if (!F.da && F.listener == p && F.capture == !!_ && F.ha == P) return M;
    }
    return -1;
  }
  var J = "closure_lm_" + (1e6 * Math.random() | 0), Ue = {};
  function pe(a, p, _, P, M) {
    if (Array.isArray(p)) {
      for (var F = 0; F < p.length; F++) pe(a, p[F], _, P, M);
      return null;
    }
    return _ = fh(_), a && a[j] ? a.K(p, _, l(P) ? !!P.capture : !!P, M) : ge(a, p, _, !1, P, M);
  }
  function ge(a, p, _, P, M, F) {
    if (!p) throw Error("Invalid event type");
    var W = l(M) ? !!M.capture : !!M, Oe = dn(a);
    if (Oe || (a[J] = Oe = new me(a)), _ = Oe.add(p, _, P, W, F), _.proxy) return _;
    if (P = Ie(), _.proxy = P, P.src = a, P.listener = _, a.addEventListener) ie || (M = W), M === void 0 && (M = !1), a.addEventListener(p.toString(), P, M);
    else if (a.attachEvent) a.attachEvent(je(p.toString()), P);
    else if (a.addListener && a.removeListener) a.addListener(P);
    else throw Error("addEventListener and attachEvent are unavailable.");
    return _;
  }
  function Ie() {
    function a(_) {
      return p.call(a.src, a.listener, _);
    }
    const p = bi;
    return a;
  }
  function Ct(a, p, _, P, M) {
    if (Array.isArray(p)) for (var F = 0; F < p.length; F++) Ct(a, p[F], _, P, M);
    else P = l(P) ? !!P.capture : !!P, _ = fh(_), a && a[j] ? (a = a.i, p = String(p).toString(), p in a.g && (F = a.g[p], _ = be(F, _, P, M), -1 < _ && (te(F[_]), Array.prototype.splice.call(F, _, 1), F.length == 0 && (delete a.g[p], a.h--)))) : a && (a = dn(a)) && (p = a.g[p.toString()], a = -1, p && (a = be(p, _, P, M)), (_ = -1 < a ? p[a] : null) && dt(_));
  }
  function dt(a) {
    if (typeof a != "number" && a && !a.da) {
      var p = a.src;
      if (p && p[j]) G(p.i, a);
      else {
        var _ = a.type, P = a.proxy;
        p.removeEventListener ? p.removeEventListener(_, P, a.capture) : p.detachEvent ? p.detachEvent(je(_), P) : p.addListener && p.removeListener && p.removeListener(P), (_ = dn(p)) ? (G(_, a), _.h == 0 && (_.src = null, p[J] = null)) : te(a);
      }
    }
  }
  function je(a) {
    return a in Ue ? Ue[a] : Ue[a] = "on" + a;
  }
  function bi(a, p) {
    if (a.da) a = !0;
    else {
      p = new z(p, this);
      var _ = a.listener, P = a.ha || a.src;
      a.fa && dt(a), a = _.call(P, p);
    }
    return a;
  }
  function dn(a) {
    return a = a[J], a instanceof me ? a : null;
  }
  var $a = "__closure_events_fn_" + (1e9 * Math.random() >>> 0);
  function fh(a) {
    return typeof a == "function" ? a : (a[$a] || (a[$a] = function(p) {
      return a.handleEvent(p);
    }), a[$a]);
  }
  function pt() {
    q.call(this), this.i = new me(this), this.M = this, this.F = null;
  }
  S(pt, q), pt.prototype[j] = !0, pt.prototype.removeEventListener = function(a, p, _, P) {
    Ct(this, a, p, _, P);
  };
  function Tt(a, p) {
    var _, P = a.F;
    if (P) for (_ = []; P; P = P.F) _.push(P);
    if (a = a.M, P = p.type || p, typeof p == "string") p = new H(p, a);
    else if (p instanceof H) p.target = p.target || a;
    else {
      var M = p;
      p = new H(P, a), O(p, M);
    }
    if (M = !0, _) for (var F = _.length - 1; 0 <= F; F--) {
      var W = p.g = _[F];
      M = Fs(W, P, !0, p) && M;
    }
    if (W = p.g = a, M = Fs(W, P, !0, p) && M, M = Fs(W, P, !1, p) && M, _) for (F = 0; F < _.length; F++) W = p.g = _[F], M = Fs(W, P, !1, p) && M;
  }
  pt.prototype.N = function() {
    if (pt.aa.N.call(this), this.i) {
      var a = this.i, p;
      for (p in a.g) {
        for (var _ = a.g[p], P = 0; P < _.length; P++) te(_[P]);
        delete a.g[p], a.h--;
      }
    }
    this.F = null;
  }, pt.prototype.K = function(a, p, _, P) {
    return this.i.add(String(a), p, !1, _, P);
  }, pt.prototype.L = function(a, p, _, P) {
    return this.i.add(String(a), p, !0, _, P);
  };
  function Fs(a, p, _, P) {
    if (p = a.i.g[String(p)], !p) return !0;
    p = p.concat();
    for (var M = !0, F = 0; F < p.length; ++F) {
      var W = p[F];
      if (W && !W.da && W.capture == _) {
        var Oe = W.listener, rt = W.ha || W.src;
        W.fa && G(a.i, W), M = Oe.call(rt, P) !== !1 && M;
      }
    }
    return M && !P.defaultPrevented;
  }
  function dh(a, p, _) {
    if (typeof a == "function") _ && (a = y(a, _));
    else if (a && typeof a.handleEvent == "function") a = y(a.handleEvent, a);
    else throw Error("Invalid listener argument");
    return 2147483647 < Number(p) ? -1 : c.setTimeout(a, p || 0);
  }
  function ph(a) {
    a.g = dh(() => {
      a.g = null, a.i && (a.i = !1, ph(a));
    }, a.l);
    const p = a.h;
    a.h = null, a.m.apply(null, p);
  }
  class _v extends q {
    constructor(p, _) {
      super(), this.m = p, this.l = _, this.h = null, this.i = !1, this.g = null;
    }
    j(p) {
      this.h = arguments, this.g ? this.i = !0 : ph(this);
    }
    N() {
      super.N(), this.g && (c.clearTimeout(this.g), this.g = null, this.i = !1, this.h = null);
    }
  }
  function Ii(a) {
    q.call(this), this.h = a, this.g = {};
  }
  S(Ii, q);
  var mh = [];
  function gh(a) {
    I(a.g, function(p, _) {
      this.g.hasOwnProperty(_) && dt(p);
    }, a), a.g = {};
  }
  Ii.prototype.N = function() {
    Ii.aa.N.call(this), gh(this);
  }, Ii.prototype.handleEvent = function() {
    throw Error("EventHandler.handleEvent not implemented");
  };
  var Ba = c.JSON.stringify, vv = c.JSON.parse, wv = class {
    stringify(a) {
      return c.JSON.stringify(a, void 0);
    }
    parse(a) {
      return c.JSON.parse(a, void 0);
    }
  };
  function qa() {
  }
  qa.prototype.h = null;
  function yh(a) {
    return a.h || (a.h = a.i());
  }
  function _h() {
  }
  var Si = { OPEN: "a", kb: "b", Ja: "c", wb: "d" };
  function Ka() {
    H.call(this, "d");
  }
  S(Ka, H);
  function za() {
    H.call(this, "c");
  }
  S(za, H);
  var Xn = {}, vh = null;
  function Us() {
    return vh = vh || new pt();
  }
  Xn.La = "serverreachability";
  function wh(a) {
    H.call(this, Xn.La, a);
  }
  S(wh, H);
  function Ai(a) {
    const p = Us();
    Tt(p, new wh(p));
  }
  Xn.STAT_EVENT = "statevent";
  function Eh(a, p) {
    H.call(this, Xn.STAT_EVENT, a), this.stat = p;
  }
  S(Eh, H);
  function bt(a) {
    const p = Us();
    Tt(p, new Eh(p, a));
  }
  Xn.Ma = "timingevent";
  function Th(a, p) {
    H.call(this, Xn.Ma, a), this.size = p;
  }
  S(Th, H);
  function Ri(a, p) {
    if (typeof a != "function") throw Error("Fn must not be null and must be a function");
    return c.setTimeout(function() {
      a();
    }, p);
  }
  function Ci() {
    this.g = !0;
  }
  Ci.prototype.xa = function() {
    this.g = !1;
  };
  function Ev(a, p, _, P, M, F) {
    a.info(function() {
      if (a.g) if (F)
        for (var W = "", Oe = F.split("&"), rt = 0; rt < Oe.length; rt++) {
          var Ee = Oe[rt].split("=");
          if (1 < Ee.length) {
            var mt = Ee[0];
            Ee = Ee[1];
            var gt = mt.split("_");
            W = 2 <= gt.length && gt[1] == "type" ? W + (mt + "=" + Ee + "&") : W + (mt + "=redacted&");
          }
        }
      else W = null;
      else W = F;
      return "XMLHTTP REQ (" + P + ") [attempt " + M + "]: " + p + `
` + _ + `
` + W;
    });
  }
  function Tv(a, p, _, P, M, F, W) {
    a.info(function() {
      return "XMLHTTP RESP (" + P + ") [ attempt " + M + "]: " + p + `
` + _ + `
` + F + " " + W;
    });
  }
  function Lr(a, p, _, P) {
    a.info(function() {
      return "XMLHTTP TEXT (" + p + "): " + Iv(a, _) + (P ? " " + P : "");
    });
  }
  function bv(a, p) {
    a.info(function() {
      return "TIMEOUT: " + p;
    });
  }
  Ci.prototype.info = function() {
  };
  function Iv(a, p) {
    if (!a.g) return p;
    if (!p) return null;
    try {
      var _ = JSON.parse(p);
      if (_) {
        for (a = 0; a < _.length; a++) if (Array.isArray(_[a])) {
          var P = _[a];
          if (!(2 > P.length)) {
            var M = P[1];
            if (Array.isArray(M) && !(1 > M.length)) {
              var F = M[0];
              if (F != "noop" && F != "stop" && F != "close") for (var W = 1; W < M.length; W++) M[W] = "";
            }
          }
        }
      }
      return Ba(_);
    } catch {
      return p;
    }
  }
  var js = { NO_ERROR: 0, gb: 1, tb: 2, sb: 3, nb: 4, rb: 5, ub: 6, Ia: 7, TIMEOUT: 8, xb: 9 }, bh = { lb: "complete", Hb: "success", Ja: "error", Ia: "abort", zb: "ready", Ab: "readystatechange", TIMEOUT: "timeout", vb: "incrementaldata", yb: "progress", ob: "downloadprogress", Pb: "uploadprogress" }, Ha;
  function $s() {
  }
  S($s, qa), $s.prototype.g = function() {
    return new XMLHttpRequest();
  }, $s.prototype.i = function() {
    return {};
  }, Ha = new $s();
  function Cn(a, p, _, P) {
    this.j = a, this.i = p, this.l = _, this.R = P || 1, this.U = new Ii(this), this.I = 45e3, this.H = null, this.o = !1, this.m = this.A = this.v = this.L = this.F = this.S = this.B = null, this.D = [], this.g = null, this.C = 0, this.s = this.u = null, this.X = -1, this.J = !1, this.O = 0, this.M = null, this.W = this.K = this.T = this.P = !1, this.h = new Ih();
  }
  function Ih() {
    this.i = null, this.g = "", this.h = !1;
  }
  var Sh = {}, Ga = {};
  function Wa(a, p, _) {
    a.L = 1, a.v = zs(pn(p)), a.m = _, a.P = !0, Ah(a, null);
  }
  function Ah(a, p) {
    a.F = Date.now(), Bs(a), a.A = pn(a.v);
    var _ = a.A, P = a.R;
    Array.isArray(P) || (P = [String(P)]), jh(_.i, "t", P), a.C = 0, _ = a.j.J, a.h = new Ih(), a.g = sf(a.j, _ ? p : null, !a.m), 0 < a.O && (a.M = new _v(y(a.Y, a, a.g), a.O)), p = a.U, _ = a.g, P = a.ca;
    var M = "readystatechange";
    Array.isArray(M) || (M && (mh[0] = M.toString()), M = mh);
    for (var F = 0; F < M.length; F++) {
      var W = pe(_, M[F], P || p.handleEvent, !1, p.h || p);
      if (!W) break;
      p.g[W.key] = W;
    }
    p = a.H ? b(a.H) : {}, a.m ? (a.u || (a.u = "POST"), p["Content-Type"] = "application/x-www-form-urlencoded", a.g.ea(
      a.A,
      a.u,
      a.m,
      p
    )) : (a.u = "GET", a.g.ea(a.A, a.u, null, p)), Ai(), Ev(a.i, a.u, a.A, a.l, a.R, a.m);
  }
  Cn.prototype.ca = function(a) {
    a = a.target;
    const p = this.M;
    p && mn(a) == 3 ? p.j() : this.Y(a);
  }, Cn.prototype.Y = function(a) {
    try {
      if (a == this.g) e: {
        const gt = mn(this.g);
        var p = this.g.Ba();
        const Fr = this.g.Z();
        if (!(3 > gt) && (gt != 3 || this.g && (this.h.h || this.g.oa() || Gh(this.g)))) {
          this.J || gt != 4 || p == 7 || (p == 8 || 0 >= Fr ? Ai(3) : Ai(2)), Qa(this);
          var _ = this.g.Z();
          this.X = _;
          t: if (Rh(this)) {
            var P = Gh(this.g);
            a = "";
            var M = P.length, F = mn(this.g) == 4;
            if (!this.h.i) {
              if (typeof TextDecoder > "u") {
                Zn(this), Pi(this);
                var W = "";
                break t;
              }
              this.h.i = new c.TextDecoder();
            }
            for (p = 0; p < M; p++) this.h.h = !0, a += this.h.i.decode(P[p], { stream: !(F && p == M - 1) });
            P.length = 0, this.h.g += a, this.C = 0, W = this.h.g;
          } else W = this.g.oa();
          if (this.o = _ == 200, Tv(this.i, this.u, this.A, this.l, this.R, gt, _), this.o) {
            if (this.T && !this.K) {
              t: {
                if (this.g) {
                  var Oe, rt = this.g;
                  if ((Oe = rt.g ? rt.g.getResponseHeader("X-HTTP-Initial-Response") : null) && !g(Oe)) {
                    var Ee = Oe;
                    break t;
                  }
                }
                Ee = null;
              }
              if (_ = Ee) Lr(this.i, this.l, _, "Initial handshake response via X-HTTP-Initial-Response"), this.K = !0, Ya(this, _);
              else {
                this.o = !1, this.s = 3, bt(12), Zn(this), Pi(this);
                break e;
              }
            }
            if (this.P) {
              _ = !0;
              let Kt;
              for (; !this.J && this.C < W.length; ) if (Kt = Sv(this, W), Kt == Ga) {
                gt == 4 && (this.s = 4, bt(14), _ = !1), Lr(this.i, this.l, null, "[Incomplete Response]");
                break;
              } else if (Kt == Sh) {
                this.s = 4, bt(15), Lr(this.i, this.l, W, "[Invalid Chunk]"), _ = !1;
                break;
              } else Lr(this.i, this.l, Kt, null), Ya(this, Kt);
              if (Rh(this) && this.C != 0 && (this.h.g = this.h.g.slice(this.C), this.C = 0), gt != 4 || W.length != 0 || this.h.h || (this.s = 1, bt(16), _ = !1), this.o = this.o && _, !_) Lr(this.i, this.l, W, "[Invalid Chunked Response]"), Zn(this), Pi(this);
              else if (0 < W.length && !this.W) {
                this.W = !0;
                var mt = this.j;
                mt.g == this && mt.ba && !mt.M && (mt.j.info("Great, no buffering proxy detected. Bytes received: " + W.length), nc(mt), mt.M = !0, bt(11));
              }
            } else Lr(this.i, this.l, W, null), Ya(this, W);
            gt == 4 && Zn(this), this.o && !this.J && (gt == 4 ? ef(this.j, this) : (this.o = !1, Bs(this)));
          } else Bv(this.g), _ == 400 && 0 < W.indexOf("Unknown SID") ? (this.s = 3, bt(12)) : (this.s = 0, bt(13)), Zn(this), Pi(this);
        }
      }
    } catch {
    } finally {
    }
  };
  function Rh(a) {
    return a.g ? a.u == "GET" && a.L != 2 && a.j.Ca : !1;
  }
  function Sv(a, p) {
    var _ = a.C, P = p.indexOf(`
`, _);
    return P == -1 ? Ga : (_ = Number(p.substring(_, P)), isNaN(_) ? Sh : (P += 1, P + _ > p.length ? Ga : (p = p.slice(P, P + _), a.C = P + _, p)));
  }
  Cn.prototype.cancel = function() {
    this.J = !0, Zn(this);
  };
  function Bs(a) {
    a.S = Date.now() + a.I, Ch(a, a.I);
  }
  function Ch(a, p) {
    if (a.B != null) throw Error("WatchDog timer not null");
    a.B = Ri(y(a.ba, a), p);
  }
  function Qa(a) {
    a.B && (c.clearTimeout(a.B), a.B = null);
  }
  Cn.prototype.ba = function() {
    this.B = null;
    const a = Date.now();
    0 <= a - this.S ? (bv(this.i, this.A), this.L != 2 && (Ai(), bt(17)), Zn(this), this.s = 2, Pi(this)) : Ch(this, this.S - a);
  };
  function Pi(a) {
    a.j.G == 0 || a.J || ef(a.j, a);
  }
  function Zn(a) {
    Qa(a);
    var p = a.M;
    p && typeof p.ma == "function" && p.ma(), a.M = null, gh(a.U), a.g && (p = a.g, a.g = null, p.abort(), p.ma());
  }
  function Ya(a, p) {
    try {
      var _ = a.j;
      if (_.G != 0 && (_.g == a || Ja(_.h, a))) {
        if (!a.K && Ja(_.h, a) && _.G == 3) {
          try {
            var P = _.Da.g.parse(p);
          } catch {
            P = null;
          }
          if (Array.isArray(P) && P.length == 3) {
            var M = P;
            if (M[0] == 0) {
              e:
                if (!_.u) {
                  if (_.g) if (_.g.F + 3e3 < a.F) Ys(_), Ws(_);
                  else break e;
                  tc(_), bt(18);
                }
            } else _.za = M[1], 0 < _.za - _.T && 37500 > M[2] && _.F && _.v == 0 && !_.C && (_.C = Ri(y(_.Za, _), 6e3));
            if (1 >= Oh(_.h) && _.ca) {
              try {
                _.ca();
              } catch {
              }
              _.ca = void 0;
            }
          } else tr(_, 11);
        } else if ((a.K || _.g == a) && Ys(_), !g(p)) for (M = _.Da.g.parse(p), p = 0; p < M.length; p++) {
          let Ee = M[p];
          if (_.T = Ee[0], Ee = Ee[1], _.G == 2) if (Ee[0] == "c") {
            _.K = Ee[1], _.ia = Ee[2];
            const mt = Ee[3];
            mt != null && (_.la = mt, _.j.info("VER=" + _.la));
            const gt = Ee[4];
            gt != null && (_.Aa = gt, _.j.info("SVER=" + _.Aa));
            const Fr = Ee[5];
            Fr != null && typeof Fr == "number" && 0 < Fr && (P = 1.5 * Fr, _.L = P, _.j.info("backChannelRequestTimeoutMs_=" + P)), P = _;
            const Kt = a.g;
            if (Kt) {
              const Xs = Kt.g ? Kt.g.getResponseHeader("X-Client-Wire-Protocol") : null;
              if (Xs) {
                var F = P.h;
                F.g || Xs.indexOf("spdy") == -1 && Xs.indexOf("quic") == -1 && Xs.indexOf("h2") == -1 || (F.j = F.l, F.g = /* @__PURE__ */ new Set(), F.h && (Xa(F, F.h), F.h = null));
              }
              if (P.D) {
                const rc = Kt.g ? Kt.g.getResponseHeader("X-HTTP-Session-Id") : null;
                rc && (P.ya = rc, Ne(P.I, P.D, rc));
              }
            }
            _.G = 3, _.l && _.l.ua(), _.ba && (_.R = Date.now() - a.F, _.j.info("Handshake RTT: " + _.R + "ms")), P = _;
            var W = a;
            if (P.qa = rf(P, P.J ? P.ia : null, P.W), W.K) {
              Dh(P.h, W);
              var Oe = W, rt = P.L;
              rt && (Oe.I = rt), Oe.B && (Qa(Oe), Bs(Oe)), P.g = W;
            } else Xh(P);
            0 < _.i.length && Qs(_);
          } else Ee[0] != "stop" && Ee[0] != "close" || tr(_, 7);
          else _.G == 3 && (Ee[0] == "stop" || Ee[0] == "close" ? Ee[0] == "stop" ? tr(_, 7) : ec(_) : Ee[0] != "noop" && _.l && _.l.ta(Ee), _.v = 0);
        }
      }
      Ai(4);
    } catch {
    }
  }
  var Av = class {
    constructor(a, p) {
      this.g = a, this.map = p;
    }
  };
  function Ph(a) {
    this.l = a || 10, c.PerformanceNavigationTiming ? (a = c.performance.getEntriesByType("navigation"), a = 0 < a.length && (a[0].nextHopProtocol == "hq" || a[0].nextHopProtocol == "h2")) : a = !!(c.chrome && c.chrome.loadTimes && c.chrome.loadTimes() && c.chrome.loadTimes().wasFetchedViaSpdy), this.j = a ? this.l : 1, this.g = null, 1 < this.j && (this.g = /* @__PURE__ */ new Set()), this.h = null, this.i = [];
  }
  function kh(a) {
    return a.h ? !0 : a.g ? a.g.size >= a.j : !1;
  }
  function Oh(a) {
    return a.h ? 1 : a.g ? a.g.size : 0;
  }
  function Ja(a, p) {
    return a.h ? a.h == p : a.g ? a.g.has(p) : !1;
  }
  function Xa(a, p) {
    a.g ? a.g.add(p) : a.h = p;
  }
  function Dh(a, p) {
    a.h && a.h == p ? a.h = null : a.g && a.g.has(p) && a.g.delete(p);
  }
  Ph.prototype.cancel = function() {
    if (this.i = Nh(this), this.h) this.h.cancel(), this.h = null;
    else if (this.g && this.g.size !== 0) {
      for (const a of this.g.values()) a.cancel();
      this.g.clear();
    }
  };
  function Nh(a) {
    if (a.h != null) return a.i.concat(a.h.D);
    if (a.g != null && a.g.size !== 0) {
      let p = a.i;
      for (const _ of a.g.values()) p = p.concat(_.D);
      return p;
    }
    return C(a.i);
  }
  function Rv(a) {
    if (a.V && typeof a.V == "function") return a.V();
    if (typeof Map < "u" && a instanceof Map || typeof Set < "u" && a instanceof Set) return Array.from(a.values());
    if (typeof a == "string") return a.split("");
    if (u(a)) {
      for (var p = [], _ = a.length, P = 0; P < _; P++) p.push(a[P]);
      return p;
    }
    p = [], _ = 0;
    for (P in a) p[_++] = a[P];
    return p;
  }
  function Cv(a) {
    if (a.na && typeof a.na == "function") return a.na();
    if (!a.V || typeof a.V != "function") {
      if (typeof Map < "u" && a instanceof Map) return Array.from(a.keys());
      if (!(typeof Set < "u" && a instanceof Set)) {
        if (u(a) || typeof a == "string") {
          var p = [];
          a = a.length;
          for (var _ = 0; _ < a; _++) p.push(_);
          return p;
        }
        p = [], _ = 0;
        for (const P in a) p[_++] = P;
        return p;
      }
    }
  }
  function xh(a, p) {
    if (a.forEach && typeof a.forEach == "function") a.forEach(p, void 0);
    else if (u(a) || typeof a == "string") Array.prototype.forEach.call(a, p, void 0);
    else for (var _ = Cv(a), P = Rv(a), M = P.length, F = 0; F < M; F++) p.call(void 0, P[F], _ && _[F], a);
  }
  var Lh = RegExp("^(?:([^:/?#.]+):)?(?://(?:([^\\\\/?#]*)@)?([^\\\\/?#]*?)(?::([0-9]+))?(?=[\\\\/?#]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#([\\s\\S]*))?$");
  function Pv(a, p) {
    if (a) {
      a = a.split("&");
      for (var _ = 0; _ < a.length; _++) {
        var P = a[_].indexOf("="), M = null;
        if (0 <= P) {
          var F = a[_].substring(0, P);
          M = a[_].substring(P + 1);
        } else F = a[_];
        p(F, M ? decodeURIComponent(M.replace(/\+/g, " ")) : "");
      }
    }
  }
  function er(a) {
    if (this.g = this.o = this.j = "", this.s = null, this.m = this.l = "", this.h = !1, a instanceof er) {
      this.h = a.h, qs(this, a.j), this.o = a.o, this.g = a.g, Ks(this, a.s), this.l = a.l;
      var p = a.i, _ = new Di();
      _.i = p.i, p.g && (_.g = new Map(p.g), _.h = p.h), Mh(this, _), this.m = a.m;
    } else a && (p = String(a).match(Lh)) ? (this.h = !1, qs(this, p[1] || "", !0), this.o = ki(p[2] || ""), this.g = ki(p[3] || "", !0), Ks(this, p[4]), this.l = ki(p[5] || "", !0), Mh(this, p[6] || "", !0), this.m = ki(p[7] || "")) : (this.h = !1, this.i = new Di(null, this.h));
  }
  er.prototype.toString = function() {
    var a = [], p = this.j;
    p && a.push(Oi(p, Vh, !0), ":");
    var _ = this.g;
    return (_ || p == "file") && (a.push("//"), (p = this.o) && a.push(Oi(p, Vh, !0), "@"), a.push(encodeURIComponent(String(_)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), _ = this.s, _ != null && a.push(":", String(_))), (_ = this.l) && (this.g && _.charAt(0) != "/" && a.push("/"), a.push(Oi(_, _.charAt(0) == "/" ? Dv : Ov, !0))), (_ = this.i.toString()) && a.push("?", _), (_ = this.m) && a.push("#", Oi(_, xv)), a.join("");
  };
  function pn(a) {
    return new er(a);
  }
  function qs(a, p, _) {
    a.j = _ ? ki(p, !0) : p, a.j && (a.j = a.j.replace(/:$/, ""));
  }
  function Ks(a, p) {
    if (p) {
      if (p = Number(p), isNaN(p) || 0 > p) throw Error("Bad port number " + p);
      a.s = p;
    } else a.s = null;
  }
  function Mh(a, p, _) {
    p instanceof Di ? (a.i = p, Lv(a.i, a.h)) : (_ || (p = Oi(p, Nv)), a.i = new Di(p, a.h));
  }
  function Ne(a, p, _) {
    a.i.set(p, _);
  }
  function zs(a) {
    return Ne(a, "zx", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ Date.now()).toString(36)), a;
  }
  function ki(a, p) {
    return a ? p ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
  }
  function Oi(a, p, _) {
    return typeof a == "string" ? (a = encodeURI(a).replace(p, kv), _ && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
  }
  function kv(a) {
    return a = a.charCodeAt(0), "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
  }
  var Vh = /[#\/\?@]/g, Ov = /[#\?:]/g, Dv = /[#\?]/g, Nv = /[#\?@]/g, xv = /#/g;
  function Di(a, p) {
    this.h = this.g = null, this.i = a || null, this.j = !!p;
  }
  function Pn(a) {
    a.g || (a.g = /* @__PURE__ */ new Map(), a.h = 0, a.i && Pv(a.i, function(p, _) {
      a.add(decodeURIComponent(p.replace(/\+/g, " ")), _);
    }));
  }
  n = Di.prototype, n.add = function(a, p) {
    Pn(this), this.i = null, a = Mr(this, a);
    var _ = this.g.get(a);
    return _ || this.g.set(a, _ = []), _.push(p), this.h += 1, this;
  };
  function Fh(a, p) {
    Pn(a), p = Mr(a, p), a.g.has(p) && (a.i = null, a.h -= a.g.get(p).length, a.g.delete(p));
  }
  function Uh(a, p) {
    return Pn(a), p = Mr(a, p), a.g.has(p);
  }
  n.forEach = function(a, p) {
    Pn(this), this.g.forEach(function(_, P) {
      _.forEach(function(M) {
        a.call(p, M, P, this);
      }, this);
    }, this);
  }, n.na = function() {
    Pn(this);
    const a = Array.from(this.g.values()), p = Array.from(this.g.keys()), _ = [];
    for (let P = 0; P < p.length; P++) {
      const M = a[P];
      for (let F = 0; F < M.length; F++) _.push(p[P]);
    }
    return _;
  }, n.V = function(a) {
    Pn(this);
    let p = [];
    if (typeof a == "string") Uh(this, a) && (p = p.concat(this.g.get(Mr(this, a))));
    else {
      a = Array.from(this.g.values());
      for (let _ = 0; _ < a.length; _++) p = p.concat(a[_]);
    }
    return p;
  }, n.set = function(a, p) {
    return Pn(this), this.i = null, a = Mr(this, a), Uh(this, a) && (this.h -= this.g.get(a).length), this.g.set(a, [p]), this.h += 1, this;
  }, n.get = function(a, p) {
    return a ? (a = this.V(a), 0 < a.length ? String(a[0]) : p) : p;
  };
  function jh(a, p, _) {
    Fh(a, p), 0 < _.length && (a.i = null, a.g.set(Mr(a, p), C(_)), a.h += _.length);
  }
  n.toString = function() {
    if (this.i) return this.i;
    if (!this.g) return "";
    const a = [], p = Array.from(this.g.keys());
    for (var _ = 0; _ < p.length; _++) {
      var P = p[_];
      const F = encodeURIComponent(String(P)), W = this.V(P);
      for (P = 0; P < W.length; P++) {
        var M = F;
        W[P] !== "" && (M += "=" + encodeURIComponent(String(W[P]))), a.push(M);
      }
    }
    return this.i = a.join("&");
  };
  function Mr(a, p) {
    return p = String(p), a.j && (p = p.toLowerCase()), p;
  }
  function Lv(a, p) {
    p && !a.j && (Pn(a), a.i = null, a.g.forEach(function(_, P) {
      var M = P.toLowerCase();
      P != M && (Fh(this, P), jh(this, M, _));
    }, a)), a.j = p;
  }
  function Mv(a, p) {
    const _ = new Ci();
    if (c.Image) {
      const P = new Image();
      P.onload = T(kn, _, "TestLoadImage: loaded", !0, p, P), P.onerror = T(kn, _, "TestLoadImage: error", !1, p, P), P.onabort = T(kn, _, "TestLoadImage: abort", !1, p, P), P.ontimeout = T(kn, _, "TestLoadImage: timeout", !1, p, P), c.setTimeout(function() {
        P.ontimeout && P.ontimeout();
      }, 1e4), P.src = a;
    } else p(!1);
  }
  function Vv(a, p) {
    const _ = new Ci(), P = new AbortController(), M = setTimeout(() => {
      P.abort(), kn(_, "TestPingServer: timeout", !1, p);
    }, 1e4);
    fetch(a, { signal: P.signal }).then((F) => {
      clearTimeout(M), F.ok ? kn(_, "TestPingServer: ok", !0, p) : kn(_, "TestPingServer: server error", !1, p);
    }).catch(() => {
      clearTimeout(M), kn(_, "TestPingServer: error", !1, p);
    });
  }
  function kn(a, p, _, P, M) {
    try {
      M && (M.onload = null, M.onerror = null, M.onabort = null, M.ontimeout = null), P(_);
    } catch {
    }
  }
  function Fv() {
    this.g = new wv();
  }
  function Uv(a, p, _) {
    const P = _ || "";
    try {
      xh(a, function(M, F) {
        let W = M;
        l(M) && (W = Ba(M)), p.push(P + F + "=" + encodeURIComponent(W));
      });
    } catch (M) {
      throw p.push(P + "type=" + encodeURIComponent("_badmap")), M;
    }
  }
  function Ni(a) {
    this.l = a.Ub || null, this.j = a.eb || !1;
  }
  S(Ni, qa), Ni.prototype.g = function() {
    return new Hs(this.l, this.j);
  }, Ni.prototype.i = /* @__PURE__ */ function(a) {
    return function() {
      return a;
    };
  }({});
  function Hs(a, p) {
    pt.call(this), this.D = a, this.o = p, this.m = void 0, this.status = this.readyState = 0, this.responseType = this.responseText = this.response = this.statusText = "", this.onreadystatechange = null, this.u = new Headers(), this.h = null, this.B = "GET", this.A = "", this.g = !1, this.v = this.j = this.l = null;
  }
  S(Hs, pt), n = Hs.prototype, n.open = function(a, p) {
    if (this.readyState != 0) throw this.abort(), Error("Error reopening a connection");
    this.B = a, this.A = p, this.readyState = 1, Li(this);
  }, n.send = function(a) {
    if (this.readyState != 1) throw this.abort(), Error("need to call open() first. ");
    this.g = !0;
    const p = { headers: this.u, method: this.B, credentials: this.m, cache: void 0 };
    a && (p.body = a), (this.D || c).fetch(new Request(this.A, p)).then(this.Sa.bind(this), this.ga.bind(this));
  }, n.abort = function() {
    this.response = this.responseText = "", this.u = new Headers(), this.status = 0, this.j && this.j.cancel("Request was aborted.").catch(() => {
    }), 1 <= this.readyState && this.g && this.readyState != 4 && (this.g = !1, xi(this)), this.readyState = 0;
  }, n.Sa = function(a) {
    if (this.g && (this.l = a, this.h || (this.status = this.l.status, this.statusText = this.l.statusText, this.h = a.headers, this.readyState = 2, Li(this)), this.g && (this.readyState = 3, Li(this), this.g))) if (this.responseType === "arraybuffer") a.arrayBuffer().then(this.Qa.bind(this), this.ga.bind(this));
    else if (typeof c.ReadableStream < "u" && "body" in a) {
      if (this.j = a.body.getReader(), this.o) {
        if (this.responseType) throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');
        this.response = [];
      } else this.response = this.responseText = "", this.v = new TextDecoder();
      $h(this);
    } else a.text().then(this.Ra.bind(this), this.ga.bind(this));
  };
  function $h(a) {
    a.j.read().then(a.Pa.bind(a)).catch(a.ga.bind(a));
  }
  n.Pa = function(a) {
    if (this.g) {
      if (this.o && a.value) this.response.push(a.value);
      else if (!this.o) {
        var p = a.value ? a.value : new Uint8Array(0);
        (p = this.v.decode(p, { stream: !a.done })) && (this.response = this.responseText += p);
      }
      a.done ? xi(this) : Li(this), this.readyState == 3 && $h(this);
    }
  }, n.Ra = function(a) {
    this.g && (this.response = this.responseText = a, xi(this));
  }, n.Qa = function(a) {
    this.g && (this.response = a, xi(this));
  }, n.ga = function() {
    this.g && xi(this);
  };
  function xi(a) {
    a.readyState = 4, a.l = null, a.j = null, a.v = null, Li(a);
  }
  n.setRequestHeader = function(a, p) {
    this.u.append(a, p);
  }, n.getResponseHeader = function(a) {
    return this.h && this.h.get(a.toLowerCase()) || "";
  }, n.getAllResponseHeaders = function() {
    if (!this.h) return "";
    const a = [], p = this.h.entries();
    for (var _ = p.next(); !_.done; ) _ = _.value, a.push(_[0] + ": " + _[1]), _ = p.next();
    return a.join(`\r
`);
  };
  function Li(a) {
    a.onreadystatechange && a.onreadystatechange.call(a);
  }
  Object.defineProperty(Hs.prototype, "withCredentials", { get: function() {
    return this.m === "include";
  }, set: function(a) {
    this.m = a ? "include" : "same-origin";
  } });
  function Bh(a) {
    let p = "";
    return I(a, function(_, P) {
      p += P, p += ":", p += _, p += `\r
`;
    }), p;
  }
  function Za(a, p, _) {
    e: {
      for (P in _) {
        var P = !1;
        break e;
      }
      P = !0;
    }
    P || (_ = Bh(_), typeof a == "string" ? _ != null && encodeURIComponent(String(_)) : Ne(a, p, _));
  }
  function Ve(a) {
    pt.call(this), this.headers = /* @__PURE__ */ new Map(), this.o = a || null, this.h = !1, this.v = this.g = null, this.D = "", this.m = 0, this.l = "", this.j = this.B = this.u = this.A = !1, this.I = null, this.H = "", this.J = !1;
  }
  S(Ve, pt);
  var jv = /^https?$/i, $v = ["POST", "PUT"];
  n = Ve.prototype, n.Ha = function(a) {
    this.J = a;
  }, n.ea = function(a, p, _, P) {
    if (this.g) throw Error("[goog.net.XhrIo] Object is active with another request=" + this.D + "; newUri=" + a);
    p = p ? p.toUpperCase() : "GET", this.D = a, this.l = "", this.m = 0, this.A = !1, this.h = !0, this.g = this.o ? this.o.g() : Ha.g(), this.v = this.o ? yh(this.o) : yh(Ha), this.g.onreadystatechange = y(this.Ea, this);
    try {
      this.B = !0, this.g.open(p, String(a), !0), this.B = !1;
    } catch (F) {
      qh(this, F);
      return;
    }
    if (a = _ || "", _ = new Map(this.headers), P) if (Object.getPrototypeOf(P) === Object.prototype) for (var M in P) _.set(M, P[M]);
    else if (typeof P.keys == "function" && typeof P.get == "function") for (const F of P.keys()) _.set(F, P.get(F));
    else throw Error("Unknown input type for opt_headers: " + String(P));
    P = Array.from(_.keys()).find((F) => F.toLowerCase() == "content-type"), M = c.FormData && a instanceof c.FormData, !(0 <= Array.prototype.indexOf.call($v, p, void 0)) || P || M || _.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
    for (const [F, W] of _) this.g.setRequestHeader(F, W);
    this.H && (this.g.responseType = this.H), "withCredentials" in this.g && this.g.withCredentials !== this.J && (this.g.withCredentials = this.J);
    try {
      Hh(this), this.u = !0, this.g.send(a), this.u = !1;
    } catch (F) {
      qh(this, F);
    }
  };
  function qh(a, p) {
    a.h = !1, a.g && (a.j = !0, a.g.abort(), a.j = !1), a.l = p, a.m = 5, Kh(a), Gs(a);
  }
  function Kh(a) {
    a.A || (a.A = !0, Tt(a, "complete"), Tt(a, "error"));
  }
  n.abort = function(a) {
    this.g && this.h && (this.h = !1, this.j = !0, this.g.abort(), this.j = !1, this.m = a || 7, Tt(this, "complete"), Tt(this, "abort"), Gs(this));
  }, n.N = function() {
    this.g && (this.h && (this.h = !1, this.j = !0, this.g.abort(), this.j = !1), Gs(this, !0)), Ve.aa.N.call(this);
  }, n.Ea = function() {
    this.s || (this.B || this.u || this.j ? zh(this) : this.bb());
  }, n.bb = function() {
    zh(this);
  };
  function zh(a) {
    if (a.h && typeof o < "u" && (!a.v[1] || mn(a) != 4 || a.Z() != 2)) {
      if (a.u && mn(a) == 4) dh(a.Ea, 0, a);
      else if (Tt(a, "readystatechange"), mn(a) == 4) {
        a.h = !1;
        try {
          const W = a.Z();
          e: switch (W) {
            case 200:
            case 201:
            case 202:
            case 204:
            case 206:
            case 304:
            case 1223:
              var p = !0;
              break e;
            default:
              p = !1;
          }
          var _;
          if (!(_ = p)) {
            var P;
            if (P = W === 0) {
              var M = String(a.D).match(Lh)[1] || null;
              !M && c.self && c.self.location && (M = c.self.location.protocol.slice(0, -1)), P = !jv.test(M ? M.toLowerCase() : "");
            }
            _ = P;
          }
          if (_) Tt(a, "complete"), Tt(a, "success");
          else {
            a.m = 6;
            try {
              var F = 2 < mn(a) ? a.g.statusText : "";
            } catch {
              F = "";
            }
            a.l = F + " [" + a.Z() + "]", Kh(a);
          }
        } finally {
          Gs(a);
        }
      }
    }
  }
  function Gs(a, p) {
    if (a.g) {
      Hh(a);
      const _ = a.g, P = a.v[0] ? () => {
      } : null;
      a.g = null, a.v = null, p || Tt(a, "ready");
      try {
        _.onreadystatechange = P;
      } catch {
      }
    }
  }
  function Hh(a) {
    a.I && (c.clearTimeout(a.I), a.I = null);
  }
  n.isActive = function() {
    return !!this.g;
  };
  function mn(a) {
    return a.g ? a.g.readyState : 0;
  }
  n.Z = function() {
    try {
      return 2 < mn(this) ? this.g.status : -1;
    } catch {
      return -1;
    }
  }, n.oa = function() {
    try {
      return this.g ? this.g.responseText : "";
    } catch {
      return "";
    }
  }, n.Oa = function(a) {
    if (this.g) {
      var p = this.g.responseText;
      return a && p.indexOf(a) == 0 && (p = p.substring(a.length)), vv(p);
    }
  };
  function Gh(a) {
    try {
      if (!a.g) return null;
      if ("response" in a.g) return a.g.response;
      switch (a.H) {
        case "":
        case "text":
          return a.g.responseText;
        case "arraybuffer":
          if ("mozResponseArrayBuffer" in a.g) return a.g.mozResponseArrayBuffer;
      }
      return null;
    } catch {
      return null;
    }
  }
  function Bv(a) {
    const p = {};
    a = (a.g && 2 <= mn(a) && a.g.getAllResponseHeaders() || "").split(`\r
`);
    for (let P = 0; P < a.length; P++) {
      if (g(a[P])) continue;
      var _ = D(a[P]);
      const M = _[0];
      if (_ = _[1], typeof _ != "string") continue;
      _ = _.trim();
      const F = p[M] || [];
      p[M] = F, F.push(_);
    }
    R(p, function(P) {
      return P.join(", ");
    });
  }
  n.Ba = function() {
    return this.m;
  }, n.Ka = function() {
    return typeof this.l == "string" ? this.l : String(this.l);
  };
  function Mi(a, p, _) {
    return _ && _.internalChannelParams && _.internalChannelParams[a] || p;
  }
  function Wh(a) {
    this.Aa = 0, this.i = [], this.j = new Ci(), this.ia = this.qa = this.I = this.W = this.g = this.ya = this.D = this.H = this.m = this.S = this.o = null, this.Ya = this.U = 0, this.Va = Mi("failFast", !1, a), this.F = this.C = this.u = this.s = this.l = null, this.X = !0, this.za = this.T = -1, this.Y = this.v = this.B = 0, this.Ta = Mi("baseRetryDelayMs", 5e3, a), this.cb = Mi("retryDelaySeedMs", 1e4, a), this.Wa = Mi("forwardChannelMaxRetries", 2, a), this.wa = Mi("forwardChannelRequestTimeoutMs", 2e4, a), this.pa = a && a.xmlHttpFactory || void 0, this.Xa = a && a.Tb || void 0, this.Ca = a && a.useFetchStreams || !1, this.L = void 0, this.J = a && a.supportsCrossDomainXhr || !1, this.K = "", this.h = new Ph(a && a.concurrentRequestLimit), this.Da = new Fv(), this.P = a && a.fastHandshake || !1, this.O = a && a.encodeInitMessageHeaders || !1, this.P && this.O && (this.O = !1), this.Ua = a && a.Rb || !1, a && a.xa && this.j.xa(), a && a.forceLongPolling && (this.X = !1), this.ba = !this.P && this.X && a && a.detectBufferingProxy || !1, this.ja = void 0, a && a.longPollingTimeout && 0 < a.longPollingTimeout && (this.ja = a.longPollingTimeout), this.ca = void 0, this.R = 0, this.M = !1, this.ka = this.A = null;
  }
  n = Wh.prototype, n.la = 8, n.G = 1, n.connect = function(a, p, _, P) {
    bt(0), this.W = a, this.H = p || {}, _ && P !== void 0 && (this.H.OSID = _, this.H.OAID = P), this.F = this.X, this.I = rf(this, null, this.W), Qs(this);
  };
  function ec(a) {
    if (Qh(a), a.G == 3) {
      var p = a.U++, _ = pn(a.I);
      if (Ne(_, "SID", a.K), Ne(_, "RID", p), Ne(_, "TYPE", "terminate"), Vi(a, _), p = new Cn(a, a.j, p), p.L = 2, p.v = zs(pn(_)), _ = !1, c.navigator && c.navigator.sendBeacon) try {
        _ = c.navigator.sendBeacon(p.v.toString(), "");
      } catch {
      }
      !_ && c.Image && (new Image().src = p.v, _ = !0), _ || (p.g = sf(p.j, null), p.g.ea(p.v)), p.F = Date.now(), Bs(p);
    }
    nf(a);
  }
  function Ws(a) {
    a.g && (nc(a), a.g.cancel(), a.g = null);
  }
  function Qh(a) {
    Ws(a), a.u && (c.clearTimeout(a.u), a.u = null), Ys(a), a.h.cancel(), a.s && (typeof a.s == "number" && c.clearTimeout(a.s), a.s = null);
  }
  function Qs(a) {
    if (!kh(a.h) && !a.s) {
      a.s = !0;
      var p = a.Ga;
      ae || $(), x || (ae(), x = !0), L.add(p, a), a.B = 0;
    }
  }
  function qv(a, p) {
    return Oh(a.h) >= a.h.j - (a.s ? 1 : 0) ? !1 : a.s ? (a.i = p.D.concat(a.i), !0) : a.G == 1 || a.G == 2 || a.B >= (a.Va ? 0 : a.Wa) ? !1 : (a.s = Ri(y(a.Ga, a, p), tf(a, a.B)), a.B++, !0);
  }
  n.Ga = function(a) {
    if (this.s) if (this.s = null, this.G == 1) {
      if (!a) {
        this.U = Math.floor(1e5 * Math.random()), a = this.U++;
        const M = new Cn(this, this.j, a);
        let F = this.o;
        if (this.S && (F ? (F = b(F), O(F, this.S)) : F = this.S), this.m !== null || this.O || (M.H = F, F = null), this.P) e: {
          for (var p = 0, _ = 0; _ < this.i.length; _++) {
            t: {
              var P = this.i[_];
              if ("__data__" in P.map && (P = P.map.__data__, typeof P == "string")) {
                P = P.length;
                break t;
              }
              P = void 0;
            }
            if (P === void 0) break;
            if (p += P, 4096 < p) {
              p = _;
              break e;
            }
            if (p === 4096 || _ === this.i.length - 1) {
              p = _ + 1;
              break e;
            }
          }
          p = 1e3;
        }
        else p = 1e3;
        p = Jh(this, M, p), _ = pn(this.I), Ne(_, "RID", a), Ne(_, "CVER", 22), this.D && Ne(_, "X-HTTP-Session-Id", this.D), Vi(this, _), F && (this.O ? p = "headers=" + encodeURIComponent(String(Bh(F))) + "&" + p : this.m && Za(_, this.m, F)), Xa(this.h, M), this.Ua && Ne(_, "TYPE", "init"), this.P ? (Ne(_, "$req", p), Ne(_, "SID", "null"), M.T = !0, Wa(M, _, null)) : Wa(M, _, p), this.G = 2;
      }
    } else this.G == 3 && (a ? Yh(this, a) : this.i.length == 0 || kh(this.h) || Yh(this));
  };
  function Yh(a, p) {
    var _;
    p ? _ = p.l : _ = a.U++;
    const P = pn(a.I);
    Ne(P, "SID", a.K), Ne(P, "RID", _), Ne(P, "AID", a.T), Vi(a, P), a.m && a.o && Za(P, a.m, a.o), _ = new Cn(a, a.j, _, a.B + 1), a.m === null && (_.H = a.o), p && (a.i = p.D.concat(a.i)), p = Jh(a, _, 1e3), _.I = Math.round(0.5 * a.wa) + Math.round(0.5 * a.wa * Math.random()), Xa(a.h, _), Wa(_, P, p);
  }
  function Vi(a, p) {
    a.H && I(a.H, function(_, P) {
      Ne(p, P, _);
    }), a.l && xh({}, function(_, P) {
      Ne(p, P, _);
    });
  }
  function Jh(a, p, _) {
    _ = Math.min(a.i.length, _);
    var P = a.l ? y(a.l.Na, a.l, a) : null;
    e: {
      var M = a.i;
      let F = -1;
      for (; ; ) {
        const W = ["count=" + _];
        F == -1 ? 0 < _ ? (F = M[0].g, W.push("ofs=" + F)) : F = 0 : W.push("ofs=" + F);
        let Oe = !0;
        for (let rt = 0; rt < _; rt++) {
          let Ee = M[rt].g;
          const mt = M[rt].map;
          if (Ee -= F, 0 > Ee) F = Math.max(0, M[rt].g - 100), Oe = !1;
          else try {
            Uv(mt, W, "req" + Ee + "_");
          } catch {
            P && P(mt);
          }
        }
        if (Oe) {
          P = W.join("&");
          break e;
        }
      }
    }
    return a = a.i.splice(0, _), p.D = a, P;
  }
  function Xh(a) {
    if (!a.g && !a.u) {
      a.Y = 1;
      var p = a.Fa;
      ae || $(), x || (ae(), x = !0), L.add(p, a), a.v = 0;
    }
  }
  function tc(a) {
    return a.g || a.u || 3 <= a.v ? !1 : (a.Y++, a.u = Ri(y(a.Fa, a), tf(a, a.v)), a.v++, !0);
  }
  n.Fa = function() {
    if (this.u = null, Zh(this), this.ba && !(this.M || this.g == null || 0 >= this.R)) {
      var a = 2 * this.R;
      this.j.info("BP detection timer enabled: " + a), this.A = Ri(y(this.ab, this), a);
    }
  }, n.ab = function() {
    this.A && (this.A = null, this.j.info("BP detection timeout reached."), this.j.info("Buffering proxy detected and switch to long-polling!"), this.F = !1, this.M = !0, bt(10), Ws(this), Zh(this));
  };
  function nc(a) {
    a.A != null && (c.clearTimeout(a.A), a.A = null);
  }
  function Zh(a) {
    a.g = new Cn(a, a.j, "rpc", a.Y), a.m === null && (a.g.H = a.o), a.g.O = 0;
    var p = pn(a.qa);
    Ne(p, "RID", "rpc"), Ne(p, "SID", a.K), Ne(p, "AID", a.T), Ne(p, "CI", a.F ? "0" : "1"), !a.F && a.ja && Ne(p, "TO", a.ja), Ne(p, "TYPE", "xmlhttp"), Vi(a, p), a.m && a.o && Za(p, a.m, a.o), a.L && (a.g.I = a.L);
    var _ = a.g;
    a = a.ia, _.L = 1, _.v = zs(pn(p)), _.m = null, _.P = !0, Ah(_, a);
  }
  n.Za = function() {
    this.C != null && (this.C = null, Ws(this), tc(this), bt(19));
  };
  function Ys(a) {
    a.C != null && (c.clearTimeout(a.C), a.C = null);
  }
  function ef(a, p) {
    var _ = null;
    if (a.g == p) {
      Ys(a), nc(a), a.g = null;
      var P = 2;
    } else if (Ja(a.h, p)) _ = p.D, Dh(a.h, p), P = 1;
    else return;
    if (a.G != 0) {
      if (p.o) if (P == 1) {
        _ = p.m ? p.m.length : 0, p = Date.now() - p.F;
        var M = a.B;
        P = Us(), Tt(P, new Th(P, _)), Qs(a);
      } else Xh(a);
      else if (M = p.s, M == 3 || M == 0 && 0 < p.X || !(P == 1 && qv(a, p) || P == 2 && tc(a))) switch (_ && 0 < _.length && (p = a.h, p.i = p.i.concat(_)), M) {
        case 1:
          tr(a, 5);
          break;
        case 4:
          tr(a, 10);
          break;
        case 3:
          tr(a, 6);
          break;
        default:
          tr(a, 2);
      }
    }
  }
  function tf(a, p) {
    let _ = a.Ta + Math.floor(Math.random() * a.cb);
    return a.isActive() || (_ *= 2), _ * p;
  }
  function tr(a, p) {
    if (a.j.info("Error code " + p), p == 2) {
      var _ = y(a.fb, a), P = a.Xa;
      const M = !P;
      P = new er(P || "//www.google.com/images/cleardot.gif"), c.location && c.location.protocol == "http" || qs(P, "https"), zs(P), M ? Mv(P.toString(), _) : Vv(P.toString(), _);
    } else bt(2);
    a.G = 0, a.l && a.l.sa(p), nf(a), Qh(a);
  }
  n.fb = function(a) {
    a ? (this.j.info("Successfully pinged google.com"), bt(2)) : (this.j.info("Failed to ping google.com"), bt(1));
  };
  function nf(a) {
    if (a.G = 0, a.ka = [], a.l) {
      const p = Nh(a.h);
      (p.length != 0 || a.i.length != 0) && (w(a.ka, p), w(a.ka, a.i), a.h.i.length = 0, C(a.i), a.i.length = 0), a.l.ra();
    }
  }
  function rf(a, p, _) {
    var P = _ instanceof er ? pn(_) : new er(_);
    if (P.g != "") p && (P.g = p + "." + P.g), Ks(P, P.s);
    else {
      var M = c.location;
      P = M.protocol, p = p ? p + "." + M.hostname : M.hostname, M = +M.port;
      var F = new er(null);
      P && qs(F, P), p && (F.g = p), M && Ks(F, M), _ && (F.l = _), P = F;
    }
    return _ = a.D, p = a.ya, _ && p && Ne(P, _, p), Ne(P, "VER", a.la), Vi(a, P), P;
  }
  function sf(a, p, _) {
    if (p && !a.J) throw Error("Can't create secondary domain capable XhrIo object.");
    return p = a.Ca && !a.pa ? new Ve(new Ni({ eb: _ })) : new Ve(a.pa), p.Ha(a.J), p;
  }
  n.isActive = function() {
    return !!this.l && this.l.isActive(this);
  };
  function of() {
  }
  n = of.prototype, n.ua = function() {
  }, n.ta = function() {
  }, n.sa = function() {
  }, n.ra = function() {
  }, n.isActive = function() {
    return !0;
  }, n.Na = function() {
  };
  function Js() {
  }
  Js.prototype.g = function(a, p) {
    return new Ot(a, p);
  };
  function Ot(a, p) {
    pt.call(this), this.g = new Wh(p), this.l = a, this.h = p && p.messageUrlParams || null, a = p && p.messageHeaders || null, p && p.clientProtocolHeaderRequired && (a ? a["X-Client-Protocol"] = "webchannel" : a = { "X-Client-Protocol": "webchannel" }), this.g.o = a, a = p && p.initMessageHeaders || null, p && p.messageContentType && (a ? a["X-WebChannel-Content-Type"] = p.messageContentType : a = { "X-WebChannel-Content-Type": p.messageContentType }), p && p.va && (a ? a["X-WebChannel-Client-Profile"] = p.va : a = { "X-WebChannel-Client-Profile": p.va }), this.g.S = a, (a = p && p.Sb) && !g(a) && (this.g.m = a), this.v = p && p.supportsCrossDomainXhr || !1, this.u = p && p.sendRawJson || !1, (p = p && p.httpSessionIdParam) && !g(p) && (this.g.D = p, a = this.h, a !== null && p in a && (a = this.h, p in a && delete a[p])), this.j = new Vr(this);
  }
  S(Ot, pt), Ot.prototype.m = function() {
    this.g.l = this.j, this.v && (this.g.J = !0), this.g.connect(this.l, this.h || void 0);
  }, Ot.prototype.close = function() {
    ec(this.g);
  }, Ot.prototype.o = function(a) {
    var p = this.g;
    if (typeof a == "string") {
      var _ = {};
      _.__data__ = a, a = _;
    } else this.u && (_ = {}, _.__data__ = Ba(a), a = _);
    p.i.push(new Av(p.Ya++, a)), p.G == 3 && Qs(p);
  }, Ot.prototype.N = function() {
    this.g.l = null, delete this.j, ec(this.g), delete this.g, Ot.aa.N.call(this);
  };
  function af(a) {
    Ka.call(this), a.__headers__ && (this.headers = a.__headers__, this.statusCode = a.__status__, delete a.__headers__, delete a.__status__);
    var p = a.__sm__;
    if (p) {
      e: {
        for (const _ in p) {
          a = _;
          break e;
        }
        a = void 0;
      }
      (this.i = a) && (a = this.i, p = p !== null && a in p ? p[a] : void 0), this.data = p;
    } else this.data = a;
  }
  S(af, Ka);
  function cf() {
    za.call(this), this.status = 1;
  }
  S(cf, za);
  function Vr(a) {
    this.g = a;
  }
  S(Vr, of), Vr.prototype.ua = function() {
    Tt(this.g, "a");
  }, Vr.prototype.ta = function(a) {
    Tt(this.g, new af(a));
  }, Vr.prototype.sa = function(a) {
    Tt(this.g, new cf());
  }, Vr.prototype.ra = function() {
    Tt(this.g, "b");
  }, Js.prototype.createWebChannel = Js.prototype.g, Ot.prototype.send = Ot.prototype.o, Ot.prototype.open = Ot.prototype.m, Ot.prototype.close = Ot.prototype.close, Ly = function() {
    return new Js();
  }, xy = function() {
    return Us();
  }, Ny = Xn, Ru = { mb: 0, pb: 1, qb: 2, Jb: 3, Ob: 4, Lb: 5, Mb: 6, Kb: 7, Ib: 8, Nb: 9, PROXY: 10, NOPROXY: 11, Gb: 12, Cb: 13, Db: 14, Bb: 15, Eb: 16, Fb: 17, ib: 18, hb: 19, jb: 20 }, js.NO_ERROR = 0, js.TIMEOUT = 8, js.HTTP_ERROR = 6, Ro = js, bh.COMPLETE = "complete", Dy = bh, _h.EventType = Si, Si.OPEN = "a", Si.CLOSE = "b", Si.ERROR = "c", Si.MESSAGE = "d", pt.prototype.listen = pt.prototype.K, Hi = _h, Oy = Ni, Ve.prototype.listenOnce = Ve.prototype.L, Ve.prototype.getLastError = Ve.prototype.Ka, Ve.prototype.getLastErrorCode = Ve.prototype.Ba, Ve.prototype.getStatus = Ve.prototype.Z, Ve.prototype.getResponseJson = Ve.prototype.Oa, Ve.prototype.getResponseText = Ve.prototype.oa, Ve.prototype.send = Ve.prototype.ea, Ve.prototype.setWithCredentials = Ve.prototype.Ha, ky = Ve;
}).apply(typeof ho < "u" ? ho : typeof self < "u" ? self : typeof window < "u" ? window : {});
const ap = "@firebase/firestore";
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class _t {
  constructor(e) {
    this.uid = e;
  }
  isAuthenticated() {
    return this.uid != null;
  }
  /**
   * Returns a key representing this user, suitable for inclusion in a
   * dictionary.
   */
  toKey() {
    return this.isAuthenticated() ? "uid:" + this.uid : "anonymous-user";
  }
  isEqual(e) {
    return e.uid === this.uid;
  }
}
_t.UNAUTHENTICATED = new _t(null), // TODO(mikelehen): Look into getting a proper uid-equivalent for
// non-FirebaseAuth providers.
_t.GOOGLE_CREDENTIALS = new _t("google-credentials-uid"), _t.FIRST_PARTY = new _t("first-party-uid"), _t.MOCK_USER = new _t("mock-user");
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
let _i = "10.12.5";
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Sr = new gl("@firebase/firestore");
function Ui() {
  return Sr.logLevel;
}
function ee(n, ...e) {
  if (Sr.logLevel <= _e.DEBUG) {
    const t = e.map(Dl);
    Sr.debug(`Firestore (${_i}): ${n}`, ...t);
  }
}
function Sn(n, ...e) {
  if (Sr.logLevel <= _e.ERROR) {
    const t = e.map(Dl);
    Sr.error(`Firestore (${_i}): ${n}`, ...t);
  }
}
function oi(n, ...e) {
  if (Sr.logLevel <= _e.WARN) {
    const t = e.map(Dl);
    Sr.warn(`Firestore (${_i}): ${n}`, ...t);
  }
}
function Dl(n) {
  if (typeof n == "string") return n;
  try {
    /**
    * @license
    * Copyright 2020 Google LLC
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    return function(t) {
      return JSON.stringify(t);
    }(n);
  } catch {
    return n;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function ce(n = "Unexpected state") {
  const e = `FIRESTORE (${_i}) INTERNAL ASSERTION FAILED: ` + n;
  throw Sn(e), new Error(e);
}
function De(n, e) {
  n || ce();
}
function fe(n, e) {
  return n;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const B = {
  // Causes are copied from:
  // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
  /** Not an error; returned on success. */
  OK: "ok",
  /** The operation was cancelled (typically by the caller). */
  CANCELLED: "cancelled",
  /** Unknown error or an error from a different error domain. */
  UNKNOWN: "unknown",
  /**
   * Client specified an invalid argument. Note that this differs from
   * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
   * problematic regardless of the state of the system (e.g., a malformed file
   * name).
   */
  INVALID_ARGUMENT: "invalid-argument",
  /**
   * Deadline expired before operation could complete. For operations that
   * change the state of the system, this error may be returned even if the
   * operation has completed successfully. For example, a successful response
   * from a server could have been delayed long enough for the deadline to
   * expire.
   */
  DEADLINE_EXCEEDED: "deadline-exceeded",
  /** Some requested entity (e.g., file or directory) was not found. */
  NOT_FOUND: "not-found",
  /**
   * Some entity that we attempted to create (e.g., file or directory) already
   * exists.
   */
  ALREADY_EXISTS: "already-exists",
  /**
   * The caller does not have permission to execute the specified operation.
   * PERMISSION_DENIED must not be used for rejections caused by exhausting
   * some resource (use RESOURCE_EXHAUSTED instead for those errors).
   * PERMISSION_DENIED must not be used if the caller cannot be identified
   * (use UNAUTHENTICATED instead for those errors).
   */
  PERMISSION_DENIED: "permission-denied",
  /**
   * The request does not have valid authentication credentials for the
   * operation.
   */
  UNAUTHENTICATED: "unauthenticated",
  /**
   * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
   * entire file system is out of space.
   */
  RESOURCE_EXHAUSTED: "resource-exhausted",
  /**
   * Operation was rejected because the system is not in a state required for
   * the operation's execution. For example, directory to be deleted may be
   * non-empty, an rmdir operation is applied to a non-directory, etc.
   *
   * A litmus test that may help a service implementor in deciding
   * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
   *  (a) Use UNAVAILABLE if the client can retry just the failing call.
   *  (b) Use ABORTED if the client should retry at a higher-level
   *      (e.g., restarting a read-modify-write sequence).
   *  (c) Use FAILED_PRECONDITION if the client should not retry until
   *      the system state has been explicitly fixed. E.g., if an "rmdir"
   *      fails because the directory is non-empty, FAILED_PRECONDITION
   *      should be returned since the client should not retry unless
   *      they have first fixed up the directory by deleting files from it.
   *  (d) Use FAILED_PRECONDITION if the client performs conditional
   *      REST Get/Update/Delete on a resource and the resource on the
   *      server does not match the condition. E.g., conflicting
   *      read-modify-write on the same resource.
   */
  FAILED_PRECONDITION: "failed-precondition",
  /**
   * The operation was aborted, typically due to a concurrency issue like
   * sequencer check failures, transaction aborts, etc.
   *
   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
   * and UNAVAILABLE.
   */
  ABORTED: "aborted",
  /**
   * Operation was attempted past the valid range. E.g., seeking or reading
   * past end of file.
   *
   * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
   * if the system state changes. For example, a 32-bit file system will
   * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
   * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
   * an offset past the current file size.
   *
   * There is a fair bit of overlap between FAILED_PRECONDITION and
   * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
   * when it applies so that callers who are iterating through a space can
   * easily look for an OUT_OF_RANGE error to detect when they are done.
   */
  OUT_OF_RANGE: "out-of-range",
  /** Operation is not implemented or not supported/enabled in this service. */
  UNIMPLEMENTED: "unimplemented",
  /**
   * Internal errors. Means some invariants expected by underlying System has
   * been broken. If you see one of these errors, Something is very broken.
   */
  INTERNAL: "internal",
  /**
   * The service is currently unavailable. This is a most likely a transient
   * condition and may be corrected by retrying with a backoff.
   *
   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
   * and UNAVAILABLE.
   */
  UNAVAILABLE: "unavailable",
  /** Unrecoverable data loss or corruption. */
  DATA_LOSS: "data-loss"
};
class X extends ln {
  /** @hideconstructor */
  constructor(e, t) {
    super(e, t), this.code = e, this.message = t, // HACK: We write a toString property directly because Error is not a real
    // class and so inheritance does not work correctly. We could alternatively
    // do the same "back-door inheritance" trick that FirebaseError does.
    this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Bn {
  constructor() {
    this.promise = new Promise((e, t) => {
      this.resolve = e, this.reject = t;
    });
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class My {
  constructor(e, t) {
    this.user = t, this.type = "OAuth", this.headers = /* @__PURE__ */ new Map(), this.headers.set("Authorization", `Bearer ${e}`);
  }
}
class hP {
  getToken() {
    return Promise.resolve(null);
  }
  invalidateToken() {
  }
  start(e, t) {
    e.enqueueRetryable(() => t(_t.UNAUTHENTICATED));
  }
  shutdown() {
  }
}
class fP {
  constructor(e) {
    this.token = e, /**
    * Stores the listener registered with setChangeListener()
    * This isn't actually necessary since the UID never changes, but we use this
    * to verify the listen contract is adhered to in tests.
    */
    this.changeListener = null;
  }
  getToken() {
    return Promise.resolve(this.token);
  }
  invalidateToken() {
  }
  start(e, t) {
    this.changeListener = t, // Fire with initial user.
    e.enqueueRetryable(() => t(this.token.user));
  }
  shutdown() {
    this.changeListener = null;
  }
}
class dP {
  constructor(e) {
    this.t = e, /** Tracks the current User. */
    this.currentUser = _t.UNAUTHENTICATED, /**
    * Counter used to detect if the token changed while a getToken request was
    * outstanding.
    */
    this.i = 0, this.forceRefresh = !1, this.auth = null;
  }
  start(e, t) {
    let r = this.i;
    const i = (u) => this.i !== r ? (r = this.i, t(u)) : Promise.resolve();
    let s = new Bn();
    this.o = () => {
      this.i++, this.currentUser = this.u(), s.resolve(), s = new Bn(), e.enqueueRetryable(() => i(this.currentUser));
    };
    const o = () => {
      const u = s;
      e.enqueueRetryable(async () => {
        await u.promise, await i(this.currentUser);
      });
    }, c = (u) => {
      ee("FirebaseAuthCredentialsProvider", "Auth detected"), this.auth = u, this.auth.addAuthTokenListener(this.o), o();
    };
    this.t.onInit((u) => c(u)), // Our users can initialize Auth right after Firestore, so we give it
    // a chance to register itself with the component framework before we
    // determine whether to start up in unauthenticated mode.
    setTimeout(() => {
      if (!this.auth) {
        const u = this.t.getImmediate({
          optional: !0
        });
        u ? c(u) : (
          // If auth is still not available, proceed with `null` user
          (ee("FirebaseAuthCredentialsProvider", "Auth not yet detected"), s.resolve(), s = new Bn())
        );
      }
    }, 0), o();
  }
  getToken() {
    const e = this.i, t = this.forceRefresh;
    return this.forceRefresh = !1, this.auth ? this.auth.getToken(t).then((r) => (
      // Cancel the request since the token changed while the request was
      // outstanding so the response is potentially for a previous user (which
      // user, we can't be sure).
      this.i !== e ? (ee("FirebaseAuthCredentialsProvider", "getToken aborted due to token change."), this.getToken()) : r ? (De(typeof r.accessToken == "string"), new My(r.accessToken, this.currentUser)) : null
    )) : Promise.resolve(null);
  }
  invalidateToken() {
    this.forceRefresh = !0;
  }
  shutdown() {
    this.auth && this.auth.removeAuthTokenListener(this.o);
  }
  // Auth.getUid() can return null even with a user logged in. It is because
  // getUid() is synchronous, but the auth code populating Uid is asynchronous.
  // This method should only be called in the AuthTokenListener callback
  // to guarantee to get the actual user.
  u() {
    const e = this.auth && this.auth.getUid();
    return De(e === null || typeof e == "string"), new _t(e);
  }
}
class pP {
  constructor(e, t, r) {
    this.l = e, this.h = t, this.P = r, this.type = "FirstParty", this.user = _t.FIRST_PARTY, this.I = /* @__PURE__ */ new Map();
  }
  /**
   * Gets an authorization token, using a provided factory function, or return
   * null.
   */
  T() {
    return this.P ? this.P() : null;
  }
  get headers() {
    this.I.set("X-Goog-AuthUser", this.l);
    const e = this.T();
    return e && this.I.set("Authorization", e), this.h && this.I.set("X-Goog-Iam-Authorization-Token", this.h), this.I;
  }
}
class mP {
  constructor(e, t, r) {
    this.l = e, this.h = t, this.P = r;
  }
  getToken() {
    return Promise.resolve(new pP(this.l, this.h, this.P));
  }
  start(e, t) {
    e.enqueueRetryable(() => t(_t.FIRST_PARTY));
  }
  shutdown() {
  }
  invalidateToken() {
  }
}
class gP {
  constructor(e) {
    this.value = e, this.type = "AppCheck", this.headers = /* @__PURE__ */ new Map(), e && e.length > 0 && this.headers.set("x-firebase-appcheck", this.value);
  }
}
class yP {
  constructor(e) {
    this.A = e, this.forceRefresh = !1, this.appCheck = null, this.R = null;
  }
  start(e, t) {
    const r = (s) => {
      s.error != null && ee("FirebaseAppCheckTokenProvider", `Error getting App Check token; using placeholder token instead. Error: ${s.error.message}`);
      const o = s.token !== this.R;
      return this.R = s.token, ee("FirebaseAppCheckTokenProvider", `Received ${o ? "new" : "existing"} token.`), o ? t(s.token) : Promise.resolve();
    };
    this.o = (s) => {
      e.enqueueRetryable(() => r(s));
    };
    const i = (s) => {
      ee("FirebaseAppCheckTokenProvider", "AppCheck detected"), this.appCheck = s, this.appCheck.addTokenListener(this.o);
    };
    this.A.onInit((s) => i(s)), // Our users can initialize AppCheck after Firestore, so we give it
    // a chance to register itself with the component framework.
    setTimeout(() => {
      if (!this.appCheck) {
        const s = this.A.getImmediate({
          optional: !0
        });
        s ? i(s) : (
          // If AppCheck is still not available, proceed without it.
          ee("FirebaseAppCheckTokenProvider", "AppCheck not yet detected")
        );
      }
    }, 0);
  }
  getToken() {
    const e = this.forceRefresh;
    return this.forceRefresh = !1, this.appCheck ? this.appCheck.getToken(e).then((t) => t ? (De(typeof t.token == "string"), this.R = t.token, new gP(t.token)) : null) : Promise.resolve(null);
  }
  invalidateToken() {
    this.forceRefresh = !0;
  }
  shutdown() {
    this.appCheck && this.appCheck.removeTokenListener(this.o);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _P(n) {
  const e = (
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    typeof self < "u" && (self.crypto || self.msCrypto)
  ), t = new Uint8Array(n);
  if (e && typeof e.getRandomValues == "function") e.getRandomValues(t);
  else
    for (let r = 0; r < n; r++) t[r] = Math.floor(256 * Math.random());
  return t;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Vy {
  static newId() {
    const e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", t = Math.floor(256 / e.length) * e.length;
    let r = "";
    for (; r.length < 20; ) {
      const i = _P(40);
      for (let s = 0; s < i.length; ++s)
        r.length < 20 && i[s] < t && (r += e.charAt(i[s] % e.length));
    }
    return r;
  }
}
function Te(n, e) {
  return n < e ? -1 : n > e ? 1 : 0;
}
function ai(n, e, t) {
  return n.length === e.length && n.every((r, i) => t(r, e[i]));
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Xe {
  /**
   * Creates a new timestamp.
   *
   * @param seconds - The number of seconds of UTC time since Unix epoch
   *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
   *     9999-12-31T23:59:59Z inclusive.
   * @param nanoseconds - The non-negative fractions of a second at nanosecond
   *     resolution. Negative second values with fractions must still have
   *     non-negative nanoseconds values that count forward in time. Must be
   *     from 0 to 999,999,999 inclusive.
   */
  constructor(e, t) {
    if (this.seconds = e, this.nanoseconds = t, t < 0) throw new X(B.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + t);
    if (t >= 1e9) throw new X(B.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + t);
    if (e < -62135596800) throw new X(B.INVALID_ARGUMENT, "Timestamp seconds out of range: " + e);
    if (e >= 253402300800) throw new X(B.INVALID_ARGUMENT, "Timestamp seconds out of range: " + e);
  }
  /**
   * Creates a new timestamp with the current date, with millisecond precision.
   *
   * @returns a new timestamp representing the current date.
   */
  static now() {
    return Xe.fromMillis(Date.now());
  }
  /**
   * Creates a new timestamp from the given date.
   *
   * @param date - The date to initialize the `Timestamp` from.
   * @returns A new `Timestamp` representing the same point in time as the given
   *     date.
   */
  static fromDate(e) {
    return Xe.fromMillis(e.getTime());
  }
  /**
   * Creates a new timestamp from the given number of milliseconds.
   *
   * @param milliseconds - Number of milliseconds since Unix epoch
   *     1970-01-01T00:00:00Z.
   * @returns A new `Timestamp` representing the same point in time as the given
   *     number of milliseconds.
   */
  static fromMillis(e) {
    const t = Math.floor(e / 1e3), r = Math.floor(1e6 * (e - 1e3 * t));
    return new Xe(t, r);
  }
  /**
   * Converts a `Timestamp` to a JavaScript `Date` object. This conversion
   * causes a loss of precision since `Date` objects only support millisecond
   * precision.
   *
   * @returns JavaScript `Date` object representing the same point in time as
   *     this `Timestamp`, with millisecond precision.
   */
  toDate() {
    return new Date(this.toMillis());
  }
  /**
   * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
   * epoch). This operation causes a loss of precision.
   *
   * @returns The point in time corresponding to this timestamp, represented as
   *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
   */
  toMillis() {
    return 1e3 * this.seconds + this.nanoseconds / 1e6;
  }
  _compareTo(e) {
    return this.seconds === e.seconds ? Te(this.nanoseconds, e.nanoseconds) : Te(this.seconds, e.seconds);
  }
  /**
   * Returns true if this `Timestamp` is equal to the provided one.
   *
   * @param other - The `Timestamp` to compare against.
   * @returns true if this `Timestamp` is equal to the provided one.
   */
  isEqual(e) {
    return e.seconds === this.seconds && e.nanoseconds === this.nanoseconds;
  }
  /** Returns a textual representation of this `Timestamp`. */
  toString() {
    return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
  }
  /** Returns a JSON-serializable representation of this `Timestamp`. */
  toJSON() {
    return {
      seconds: this.seconds,
      nanoseconds: this.nanoseconds
    };
  }
  /**
   * Converts this object to a primitive string, which allows `Timestamp` objects
   * to be compared using the `>`, `<=`, `>=` and `>` operators.
   */
  valueOf() {
    const e = this.seconds - -62135596800;
    return String(e).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class he {
  constructor(e) {
    this.timestamp = e;
  }
  static fromTimestamp(e) {
    return new he(e);
  }
  static min() {
    return new he(new Xe(0, 0));
  }
  static max() {
    return new he(new Xe(253402300799, 999999999));
  }
  compareTo(e) {
    return this.timestamp._compareTo(e.timestamp);
  }
  isEqual(e) {
    return this.timestamp.isEqual(e.timestamp);
  }
  /** Returns a number representation of the version for use in spec tests. */
  toMicroseconds() {
    return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
  }
  toString() {
    return "SnapshotVersion(" + this.timestamp.toString() + ")";
  }
  toTimestamp() {
    return this.timestamp;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class hs {
  constructor(e, t, r) {
    t === void 0 ? t = 0 : t > e.length && ce(), r === void 0 ? r = e.length - t : r > e.length - t && ce(), this.segments = e, this.offset = t, this.len = r;
  }
  get length() {
    return this.len;
  }
  isEqual(e) {
    return hs.comparator(this, e) === 0;
  }
  child(e) {
    const t = this.segments.slice(this.offset, this.limit());
    return e instanceof hs ? e.forEach((r) => {
      t.push(r);
    }) : t.push(e), this.construct(t);
  }
  /** The index of one past the last segment of the path. */
  limit() {
    return this.offset + this.length;
  }
  popFirst(e) {
    return e = e === void 0 ? 1 : e, this.construct(this.segments, this.offset + e, this.length - e);
  }
  popLast() {
    return this.construct(this.segments, this.offset, this.length - 1);
  }
  firstSegment() {
    return this.segments[this.offset];
  }
  lastSegment() {
    return this.get(this.length - 1);
  }
  get(e) {
    return this.segments[this.offset + e];
  }
  isEmpty() {
    return this.length === 0;
  }
  isPrefixOf(e) {
    if (e.length < this.length) return !1;
    for (let t = 0; t < this.length; t++) if (this.get(t) !== e.get(t)) return !1;
    return !0;
  }
  isImmediateParentOf(e) {
    if (this.length + 1 !== e.length) return !1;
    for (let t = 0; t < this.length; t++) if (this.get(t) !== e.get(t)) return !1;
    return !0;
  }
  forEach(e) {
    for (let t = this.offset, r = this.limit(); t < r; t++) e(this.segments[t]);
  }
  toArray() {
    return this.segments.slice(this.offset, this.limit());
  }
  static comparator(e, t) {
    const r = Math.min(e.length, t.length);
    for (let i = 0; i < r; i++) {
      const s = e.get(i), o = t.get(i);
      if (s < o) return -1;
      if (s > o) return 1;
    }
    return e.length < t.length ? -1 : e.length > t.length ? 1 : 0;
  }
}
class xe extends hs {
  construct(e, t, r) {
    return new xe(e, t, r);
  }
  canonicalString() {
    return this.toArray().join("/");
  }
  toString() {
    return this.canonicalString();
  }
  /**
   * Returns a string representation of this path
   * where each path segment has been encoded with
   * `encodeURIComponent`.
   */
  toUriEncodedString() {
    return this.toArray().map(encodeURIComponent).join("/");
  }
  /**
   * Creates a resource path from the given slash-delimited string. If multiple
   * arguments are provided, all components are combined. Leading and trailing
   * slashes from all components are ignored.
   */
  static fromString(...e) {
    const t = [];
    for (const r of e) {
      if (r.indexOf("//") >= 0) throw new X(B.INVALID_ARGUMENT, `Invalid segment (${r}). Paths must not contain // in them.`);
      t.push(...r.split("/").filter((i) => i.length > 0));
    }
    return new xe(t);
  }
  static emptyPath() {
    return new xe([]);
  }
}
const vP = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
class ct extends hs {
  construct(e, t, r) {
    return new ct(e, t, r);
  }
  /**
   * Returns true if the string could be used as a segment in a field path
   * without escaping.
   */
  static isValidIdentifier(e) {
    return vP.test(e);
  }
  canonicalString() {
    return this.toArray().map((e) => (e = e.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), ct.isValidIdentifier(e) || (e = "`" + e + "`"), e)).join(".");
  }
  toString() {
    return this.canonicalString();
  }
  /**
   * Returns true if this field references the key of a document.
   */
  isKeyField() {
    return this.length === 1 && this.get(0) === "__name__";
  }
  /**
   * The field designating the key of a document.
   */
  static keyField() {
    return new ct(["__name__"]);
  }
  /**
   * Parses a field string from the given server-formatted string.
   *
   * - Splitting the empty string is not allowed (for now at least).
   * - Empty segments within the string (e.g. if there are two consecutive
   *   separators) are not allowed.
   *
   * TODO(b/37244157): we should make this more strict. Right now, it allows
   * non-identifier path components, even if they aren't escaped.
   */
  static fromServerFormat(e) {
    const t = [];
    let r = "", i = 0;
    const s = () => {
      if (r.length === 0) throw new X(B.INVALID_ARGUMENT, `Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);
      t.push(r), r = "";
    };
    let o = !1;
    for (; i < e.length; ) {
      const c = e[i];
      if (c === "\\") {
        if (i + 1 === e.length) throw new X(B.INVALID_ARGUMENT, "Path has trailing escape character: " + e);
        const u = e[i + 1];
        if (u !== "\\" && u !== "." && u !== "`") throw new X(B.INVALID_ARGUMENT, "Path has invalid escape sequence: " + e);
        r += u, i += 2;
      } else c === "`" ? (o = !o, i++) : c !== "." || o ? (r += c, i++) : (s(), i++);
    }
    if (s(), o) throw new X(B.INVALID_ARGUMENT, "Unterminated ` in path: " + e);
    return new ct(t);
  }
  static emptyPath() {
    return new ct([]);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class se {
  constructor(e) {
    this.path = e;
  }
  static fromPath(e) {
    return new se(xe.fromString(e));
  }
  static fromName(e) {
    return new se(xe.fromString(e).popFirst(5));
  }
  static empty() {
    return new se(xe.emptyPath());
  }
  get collectionGroup() {
    return this.path.popLast().lastSegment();
  }
  /** Returns true if the document is in the specified collectionId. */
  hasCollectionId(e) {
    return this.path.length >= 2 && this.path.get(this.path.length - 2) === e;
  }
  /** Returns the collection group (i.e. the name of the parent collection) for this key. */
  getCollectionGroup() {
    return this.path.get(this.path.length - 2);
  }
  /** Returns the fully qualified path to the parent collection. */
  getCollectionPath() {
    return this.path.popLast();
  }
  isEqual(e) {
    return e !== null && xe.comparator(this.path, e.path) === 0;
  }
  toString() {
    return this.path.toString();
  }
  static comparator(e, t) {
    return xe.comparator(e.path, t.path);
  }
  static isDocumentKey(e) {
    return e.length % 2 == 0;
  }
  /**
   * Creates and returns a new document key with the given segments.
   *
   * @param segments - The segments of the path to the document
   * @returns A new instance of DocumentKey
   */
  static fromSegments(e) {
    return new se(new xe(e.slice()));
  }
}
function wP(n, e) {
  const t = n.toTimestamp().seconds, r = n.toTimestamp().nanoseconds + 1, i = he.fromTimestamp(r === 1e9 ? new Xe(t + 1, 0) : new Xe(t, r));
  return new Gn(i, se.empty(), e);
}
function EP(n) {
  return new Gn(n.readTime, n.key, -1);
}
class Gn {
  constructor(e, t, r) {
    this.readTime = e, this.documentKey = t, this.largestBatchId = r;
  }
  /** Returns an offset that sorts before all regular offsets. */
  static min() {
    return new Gn(he.min(), se.empty(), -1);
  }
  /** Returns an offset that sorts after all regular offsets. */
  static max() {
    return new Gn(he.max(), se.empty(), -1);
  }
}
function TP(n, e) {
  let t = n.readTime.compareTo(e.readTime);
  return t !== 0 ? t : (t = se.comparator(n.documentKey, e.documentKey), t !== 0 ? t : Te(n.largestBatchId, e.largestBatchId));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const bP = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";
class IP {
  constructor() {
    this.onCommittedListeners = [];
  }
  addOnCommittedListener(e) {
    this.onCommittedListeners.push(e);
  }
  raiseOnCommittedEvent() {
    this.onCommittedListeners.forEach((e) => e());
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function Ps(n) {
  if (n.code !== B.FAILED_PRECONDITION || n.message !== bP) throw n;
  ee("LocalStore", "Unexpectedly lost primary lease");
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class K {
  constructor(e) {
    this.nextCallback = null, this.catchCallback = null, // When the operation resolves, we'll set result or error and mark isDone.
    this.result = void 0, this.error = void 0, this.isDone = !1, // Set to true when .then() or .catch() are called and prevents additional
    // chaining.
    this.callbackAttached = !1, e((t) => {
      this.isDone = !0, this.result = t, this.nextCallback && // value should be defined unless T is Void, but we can't express
      // that in the type system.
      this.nextCallback(t);
    }, (t) => {
      this.isDone = !0, this.error = t, this.catchCallback && this.catchCallback(t);
    });
  }
  catch(e) {
    return this.next(void 0, e);
  }
  next(e, t) {
    return this.callbackAttached && ce(), this.callbackAttached = !0, this.isDone ? this.error ? this.wrapFailure(t, this.error) : this.wrapSuccess(e, this.result) : new K((r, i) => {
      this.nextCallback = (s) => {
        this.wrapSuccess(e, s).next(r, i);
      }, this.catchCallback = (s) => {
        this.wrapFailure(t, s).next(r, i);
      };
    });
  }
  toPromise() {
    return new Promise((e, t) => {
      this.next(e, t);
    });
  }
  wrapUserFunction(e) {
    try {
      const t = e();
      return t instanceof K ? t : K.resolve(t);
    } catch (t) {
      return K.reject(t);
    }
  }
  wrapSuccess(e, t) {
    return e ? this.wrapUserFunction(() => e(t)) : K.resolve(t);
  }
  wrapFailure(e, t) {
    return e ? this.wrapUserFunction(() => e(t)) : K.reject(t);
  }
  static resolve(e) {
    return new K((t, r) => {
      t(e);
    });
  }
  static reject(e) {
    return new K((t, r) => {
      r(e);
    });
  }
  static waitFor(e) {
    return new K((t, r) => {
      let i = 0, s = 0, o = !1;
      e.forEach((c) => {
        ++i, c.next(() => {
          ++s, o && s === i && t();
        }, (u) => r(u));
      }), o = !0, s === i && t();
    });
  }
  /**
   * Given an array of predicate functions that asynchronously evaluate to a
   * boolean, implements a short-circuiting `or` between the results. Predicates
   * will be evaluated until one of them returns `true`, then stop. The final
   * result will be whether any of them returned `true`.
   */
  static or(e) {
    let t = K.resolve(!1);
    for (const r of e) t = t.next((i) => i ? K.resolve(i) : r());
    return t;
  }
  static forEach(e, t) {
    const r = [];
    return e.forEach((i, s) => {
      r.push(t.call(this, i, s));
    }), this.waitFor(r);
  }
  /**
   * Concurrently map all array elements through asynchronous function.
   */
  static mapArray(e, t) {
    return new K((r, i) => {
      const s = e.length, o = new Array(s);
      let c = 0;
      for (let u = 0; u < s; u++) {
        const l = u;
        t(e[l]).next((f) => {
          o[l] = f, ++c, c === s && r(o);
        }, (f) => i(f));
      }
    });
  }
  /**
   * An alternative to recursive PersistencePromise calls, that avoids
   * potential memory problems from unbounded chains of promises.
   *
   * The `action` will be called repeatedly while `condition` is true.
   */
  static doWhile(e, t) {
    return new K((r, i) => {
      const s = () => {
        e() === !0 ? t().next(() => {
          s();
        }, i) : r();
      };
      s();
    });
  }
}
function SP(n) {
  const e = n.match(/Android ([\d.]+)/i), t = e ? e[1].split(".").slice(0, 2).join(".") : "-1";
  return Number(t);
}
function ks(n) {
  return n.name === "IndexedDbTransactionError";
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Nl {
  constructor(e, t) {
    this.previousValue = e, t && (t.sequenceNumberHandler = (r) => this.ie(r), this.se = (r) => t.writeSequenceNumber(r));
  }
  ie(e) {
    return this.previousValue = Math.max(e, this.previousValue), this.previousValue;
  }
  next() {
    const e = ++this.previousValue;
    return this.se && this.se(e), e;
  }
}
Nl.oe = -1;
function Ca(n) {
  return n == null;
}
function Yo(n) {
  return n === 0 && 1 / n == -1 / 0;
}
function AP(n) {
  return typeof n == "number" && Number.isInteger(n) && !Yo(n) && n <= Number.MAX_SAFE_INTEGER && n >= Number.MIN_SAFE_INTEGER;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function cp(n) {
  let e = 0;
  for (const t in n) Object.prototype.hasOwnProperty.call(n, t) && e++;
  return e;
}
function vi(n, e) {
  for (const t in n) Object.prototype.hasOwnProperty.call(n, t) && e(t, n[t]);
}
function Fy(n) {
  for (const e in n) if (Object.prototype.hasOwnProperty.call(n, e)) return !1;
  return !0;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Me {
  constructor(e, t) {
    this.comparator = e, this.root = t || at.EMPTY;
  }
  // Returns a copy of the map, with the specified key/value added or replaced.
  insert(e, t) {
    return new Me(this.comparator, this.root.insert(e, t, this.comparator).copy(null, null, at.BLACK, null, null));
  }
  // Returns a copy of the map, with the specified key removed.
  remove(e) {
    return new Me(this.comparator, this.root.remove(e, this.comparator).copy(null, null, at.BLACK, null, null));
  }
  // Returns the value of the node with the given key, or null.
  get(e) {
    let t = this.root;
    for (; !t.isEmpty(); ) {
      const r = this.comparator(e, t.key);
      if (r === 0) return t.value;
      r < 0 ? t = t.left : r > 0 && (t = t.right);
    }
    return null;
  }
  // Returns the index of the element in this sorted map, or -1 if it doesn't
  // exist.
  indexOf(e) {
    let t = 0, r = this.root;
    for (; !r.isEmpty(); ) {
      const i = this.comparator(e, r.key);
      if (i === 0) return t + r.left.size;
      i < 0 ? r = r.left : (
        // Count all nodes left of the node plus the node itself
        (t += r.left.size + 1, r = r.right)
      );
    }
    return -1;
  }
  isEmpty() {
    return this.root.isEmpty();
  }
  // Returns the total number of nodes in the map.
  get size() {
    return this.root.size;
  }
  // Returns the minimum key in the map.
  minKey() {
    return this.root.minKey();
  }
  // Returns the maximum key in the map.
  maxKey() {
    return this.root.maxKey();
  }
  // Traverses the map in key order and calls the specified action function
  // for each key/value pair. If action returns true, traversal is aborted.
  // Returns the first truthy value returned by action, or the last falsey
  // value returned by action.
  inorderTraversal(e) {
    return this.root.inorderTraversal(e);
  }
  forEach(e) {
    this.inorderTraversal((t, r) => (e(t, r), !1));
  }
  toString() {
    const e = [];
    return this.inorderTraversal((t, r) => (e.push(`${t}:${r}`), !1)), `{${e.join(", ")}}`;
  }
  // Traverses the map in reverse key order and calls the specified action
  // function for each key/value pair. If action returns true, traversal is
  // aborted.
  // Returns the first truthy value returned by action, or the last falsey
  // value returned by action.
  reverseTraversal(e) {
    return this.root.reverseTraversal(e);
  }
  // Returns an iterator over the SortedMap.
  getIterator() {
    return new fo(this.root, null, this.comparator, !1);
  }
  getIteratorFrom(e) {
    return new fo(this.root, e, this.comparator, !1);
  }
  getReverseIterator() {
    return new fo(this.root, null, this.comparator, !0);
  }
  getReverseIteratorFrom(e) {
    return new fo(this.root, e, this.comparator, !0);
  }
}
class fo {
  constructor(e, t, r, i) {
    this.isReverse = i, this.nodeStack = [];
    let s = 1;
    for (; !e.isEmpty(); ) if (s = t ? r(e.key, t) : 1, // flip the comparison if we're going in reverse
    t && i && (s *= -1), s < 0)
      e = this.isReverse ? e.left : e.right;
    else {
      if (s === 0) {
        this.nodeStack.push(e);
        break;
      }
      this.nodeStack.push(e), e = this.isReverse ? e.right : e.left;
    }
  }
  getNext() {
    let e = this.nodeStack.pop();
    const t = {
      key: e.key,
      value: e.value
    };
    if (this.isReverse) for (e = e.left; !e.isEmpty(); ) this.nodeStack.push(e), e = e.right;
    else for (e = e.right; !e.isEmpty(); ) this.nodeStack.push(e), e = e.left;
    return t;
  }
  hasNext() {
    return this.nodeStack.length > 0;
  }
  peek() {
    if (this.nodeStack.length === 0) return null;
    const e = this.nodeStack[this.nodeStack.length - 1];
    return {
      key: e.key,
      value: e.value
    };
  }
}
class at {
  constructor(e, t, r, i, s) {
    this.key = e, this.value = t, this.color = r ?? at.RED, this.left = i ?? at.EMPTY, this.right = s ?? at.EMPTY, this.size = this.left.size + 1 + this.right.size;
  }
  // Returns a copy of the current node, optionally replacing pieces of it.
  copy(e, t, r, i, s) {
    return new at(e ?? this.key, t ?? this.value, r ?? this.color, i ?? this.left, s ?? this.right);
  }
  isEmpty() {
    return !1;
  }
  // Traverses the tree in key order and calls the specified action function
  // for each node. If action returns true, traversal is aborted.
  // Returns the first truthy value returned by action, or the last falsey
  // value returned by action.
  inorderTraversal(e) {
    return this.left.inorderTraversal(e) || e(this.key, this.value) || this.right.inorderTraversal(e);
  }
  // Traverses the tree in reverse key order and calls the specified action
  // function for each node. If action returns true, traversal is aborted.
  // Returns the first truthy value returned by action, or the last falsey
  // value returned by action.
  reverseTraversal(e) {
    return this.right.reverseTraversal(e) || e(this.key, this.value) || this.left.reverseTraversal(e);
  }
  // Returns the minimum node in the tree.
  min() {
    return this.left.isEmpty() ? this : this.left.min();
  }
  // Returns the maximum key in the tree.
  minKey() {
    return this.min().key;
  }
  // Returns the maximum key in the tree.
  maxKey() {
    return this.right.isEmpty() ? this.key : this.right.maxKey();
  }
  // Returns new tree, with the key/value added.
  insert(e, t, r) {
    let i = this;
    const s = r(e, i.key);
    return i = s < 0 ? i.copy(null, null, null, i.left.insert(e, t, r), null) : s === 0 ? i.copy(null, t, null, null, null) : i.copy(null, null, null, null, i.right.insert(e, t, r)), i.fixUp();
  }
  removeMin() {
    if (this.left.isEmpty()) return at.EMPTY;
    let e = this;
    return e.left.isRed() || e.left.left.isRed() || (e = e.moveRedLeft()), e = e.copy(null, null, null, e.left.removeMin(), null), e.fixUp();
  }
  // Returns new tree, with the specified item removed.
  remove(e, t) {
    let r, i = this;
    if (t(e, i.key) < 0) i.left.isEmpty() || i.left.isRed() || i.left.left.isRed() || (i = i.moveRedLeft()), i = i.copy(null, null, null, i.left.remove(e, t), null);
    else {
      if (i.left.isRed() && (i = i.rotateRight()), i.right.isEmpty() || i.right.isRed() || i.right.left.isRed() || (i = i.moveRedRight()), t(e, i.key) === 0) {
        if (i.right.isEmpty()) return at.EMPTY;
        r = i.right.min(), i = i.copy(r.key, r.value, null, null, i.right.removeMin());
      }
      i = i.copy(null, null, null, null, i.right.remove(e, t));
    }
    return i.fixUp();
  }
  isRed() {
    return this.color;
  }
  // Returns new tree after performing any needed rotations.
  fixUp() {
    let e = this;
    return e.right.isRed() && !e.left.isRed() && (e = e.rotateLeft()), e.left.isRed() && e.left.left.isRed() && (e = e.rotateRight()), e.left.isRed() && e.right.isRed() && (e = e.colorFlip()), e;
  }
  moveRedLeft() {
    let e = this.colorFlip();
    return e.right.left.isRed() && (e = e.copy(null, null, null, null, e.right.rotateRight()), e = e.rotateLeft(), e = e.colorFlip()), e;
  }
  moveRedRight() {
    let e = this.colorFlip();
    return e.left.left.isRed() && (e = e.rotateRight(), e = e.colorFlip()), e;
  }
  rotateLeft() {
    const e = this.copy(null, null, at.RED, null, this.right.left);
    return this.right.copy(null, null, this.color, e, null);
  }
  rotateRight() {
    const e = this.copy(null, null, at.RED, this.left.right, null);
    return this.left.copy(null, null, this.color, null, e);
  }
  colorFlip() {
    const e = this.left.copy(null, null, !this.left.color, null, null), t = this.right.copy(null, null, !this.right.color, null, null);
    return this.copy(null, null, !this.color, e, t);
  }
  // For testing.
  checkMaxDepth() {
    const e = this.check();
    return Math.pow(2, e) <= this.size + 1;
  }
  // In a balanced RB tree, the black-depth (number of black nodes) from root to
  // leaves is equal on both sides.  This function verifies that or asserts.
  check() {
    if (this.isRed() && this.left.isRed() || this.right.isRed()) throw ce();
    const e = this.left.check();
    if (e !== this.right.check()) throw ce();
    return e + (this.isRed() ? 0 : 1);
  }
}
at.EMPTY = null, at.RED = !0, at.BLACK = !1;
at.EMPTY = new // Represents an empty node (a leaf node in the Red-Black Tree).
class {
  constructor() {
    this.size = 0;
  }
  get key() {
    throw ce();
  }
  get value() {
    throw ce();
  }
  get color() {
    throw ce();
  }
  get left() {
    throw ce();
  }
  get right() {
    throw ce();
  }
  // Returns a copy of the current node.
  copy(e, t, r, i, s) {
    return this;
  }
  // Returns a copy of the tree, with the specified key/value added.
  insert(e, t, r) {
    return new at(e, t);
  }
  // Returns a copy of the tree, with the specified key removed.
  remove(e, t) {
    return this;
  }
  isEmpty() {
    return !0;
  }
  inorderTraversal(e) {
    return !1;
  }
  reverseTraversal(e) {
    return !1;
  }
  minKey() {
    return null;
  }
  maxKey() {
    return null;
  }
  isRed() {
    return !1;
  }
  // For testing.
  checkMaxDepth() {
    return !0;
  }
  check() {
    return 0;
  }
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ut {
  constructor(e) {
    this.comparator = e, this.data = new Me(this.comparator);
  }
  has(e) {
    return this.data.get(e) !== null;
  }
  first() {
    return this.data.minKey();
  }
  last() {
    return this.data.maxKey();
  }
  get size() {
    return this.data.size;
  }
  indexOf(e) {
    return this.data.indexOf(e);
  }
  /** Iterates elements in order defined by "comparator" */
  forEach(e) {
    this.data.inorderTraversal((t, r) => (e(t), !1));
  }
  /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */
  forEachInRange(e, t) {
    const r = this.data.getIteratorFrom(e[0]);
    for (; r.hasNext(); ) {
      const i = r.getNext();
      if (this.comparator(i.key, e[1]) >= 0) return;
      t(i.key);
    }
  }
  /**
   * Iterates over `elem`s such that: start &lt;= elem until false is returned.
   */
  forEachWhile(e, t) {
    let r;
    for (r = t !== void 0 ? this.data.getIteratorFrom(t) : this.data.getIterator(); r.hasNext(); )
      if (!e(r.getNext().key)) return;
  }
  /** Finds the least element greater than or equal to `elem`. */
  firstAfterOrEqual(e) {
    const t = this.data.getIteratorFrom(e);
    return t.hasNext() ? t.getNext().key : null;
  }
  getIterator() {
    return new up(this.data.getIterator());
  }
  getIteratorFrom(e) {
    return new up(this.data.getIteratorFrom(e));
  }
  /** Inserts or updates an element */
  add(e) {
    return this.copy(this.data.remove(e).insert(e, !0));
  }
  /** Deletes an element */
  delete(e) {
    return this.has(e) ? this.copy(this.data.remove(e)) : this;
  }
  isEmpty() {
    return this.data.isEmpty();
  }
  unionWith(e) {
    let t = this;
    return t.size < e.size && (t = e, e = this), e.forEach((r) => {
      t = t.add(r);
    }), t;
  }
  isEqual(e) {
    if (!(e instanceof ut) || this.size !== e.size) return !1;
    const t = this.data.getIterator(), r = e.data.getIterator();
    for (; t.hasNext(); ) {
      const i = t.getNext().key, s = r.getNext().key;
      if (this.comparator(i, s) !== 0) return !1;
    }
    return !0;
  }
  toArray() {
    const e = [];
    return this.forEach((t) => {
      e.push(t);
    }), e;
  }
  toString() {
    const e = [];
    return this.forEach((t) => e.push(t)), "SortedSet(" + e.toString() + ")";
  }
  copy(e) {
    const t = new ut(this.comparator);
    return t.data = e, t;
  }
}
class up {
  constructor(e) {
    this.iter = e;
  }
  getNext() {
    return this.iter.getNext().key;
  }
  hasNext() {
    return this.iter.hasNext();
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Qt {
  constructor(e) {
    this.fields = e, // TODO(dimond): validation of FieldMask
    // Sort the field mask to support `FieldMask.isEqual()` and assert below.
    e.sort(ct.comparator);
  }
  static empty() {
    return new Qt([]);
  }
  /**
   * Returns a new FieldMask object that is the result of adding all the given
   * fields paths to this field mask.
   */
  unionWith(e) {
    let t = new ut(ct.comparator);
    for (const r of this.fields) t = t.add(r);
    for (const r of e) t = t.add(r);
    return new Qt(t.toArray());
  }
  /**
   * Verifies that `fieldPath` is included by at least one field in this field
   * mask.
   *
   * This is an O(n) operation, where `n` is the size of the field mask.
   */
  covers(e) {
    for (const t of this.fields) if (t.isPrefixOf(e)) return !0;
    return !1;
  }
  isEqual(e) {
    return ai(this.fields, e.fields, (t, r) => t.isEqual(r));
  }
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Uy extends Error {
  constructor() {
    super(...arguments), this.name = "Base64DecodeError";
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ht {
  constructor(e) {
    this.binaryString = e;
  }
  static fromBase64String(e) {
    const t = function(i) {
      try {
        return atob(i);
      } catch (s) {
        throw typeof DOMException < "u" && s instanceof DOMException ? new Uy("Invalid base64 string: " + s) : s;
      }
    }(e);
    return new ht(t);
  }
  static fromUint8Array(e) {
    const t = (
      /**
      * Helper function to convert an Uint8array to a binary string.
      */
      function(i) {
        let s = "";
        for (let o = 0; o < i.length; ++o) s += String.fromCharCode(i[o]);
        return s;
      }(e)
    );
    return new ht(t);
  }
  [Symbol.iterator]() {
    let e = 0;
    return {
      next: () => e < this.binaryString.length ? {
        value: this.binaryString.charCodeAt(e++),
        done: !1
      } : {
        value: void 0,
        done: !0
      }
    };
  }
  toBase64() {
    return function(t) {
      return btoa(t);
    }(this.binaryString);
  }
  toUint8Array() {
    return function(t) {
      const r = new Uint8Array(t.length);
      for (let i = 0; i < t.length; i++) r[i] = t.charCodeAt(i);
      return r;
    }(this.binaryString);
  }
  approximateByteSize() {
    return 2 * this.binaryString.length;
  }
  compareTo(e) {
    return Te(this.binaryString, e.binaryString);
  }
  isEqual(e) {
    return this.binaryString === e.binaryString;
  }
}
ht.EMPTY_BYTE_STRING = new ht("");
const RP = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);
function Wn(n) {
  if (De(!!n), typeof n == "string") {
    let e = 0;
    const t = RP.exec(n);
    if (De(!!t), t[1]) {
      let i = t[1];
      i = (i + "000000000").substr(0, 9), e = Number(i);
    }
    const r = new Date(n);
    return {
      seconds: Math.floor(r.getTime() / 1e3),
      nanos: e
    };
  }
  return {
    seconds: Ge(n.seconds),
    nanos: Ge(n.nanos)
  };
}
function Ge(n) {
  return typeof n == "number" ? n : typeof n == "string" ? Number(n) : 0;
}
function Ar(n) {
  return typeof n == "string" ? ht.fromBase64String(n) : ht.fromUint8Array(n);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function xl(n) {
  var e, t;
  return ((t = (((e = n == null ? void 0 : n.mapValue) === null || e === void 0 ? void 0 : e.fields) || {}).__type__) === null || t === void 0 ? void 0 : t.stringValue) === "server_timestamp";
}
function Ll(n) {
  const e = n.mapValue.fields.__previous_value__;
  return xl(e) ? Ll(e) : e;
}
function fs(n) {
  const e = Wn(n.mapValue.fields.__local_write_time__.timestampValue);
  return new Xe(e.seconds, e.nanos);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class CP {
  /**
   * Constructs a DatabaseInfo using the provided host, databaseId and
   * persistenceKey.
   *
   * @param databaseId - The database to use.
   * @param appId - The Firebase App Id.
   * @param persistenceKey - A unique identifier for this Firestore's local
   * storage (used in conjunction with the databaseId).
   * @param host - The Firestore backend host to connect to.
   * @param ssl - Whether to use SSL when connecting.
   * @param forceLongPolling - Whether to use the forceLongPolling option
   * when using WebChannel as the network transport.
   * @param autoDetectLongPolling - Whether to use the detectBufferingProxy
   * option when using WebChannel as the network transport.
   * @param longPollingOptions Options that configure long-polling.
   * @param useFetchStreams Whether to use the Fetch API instead of
   * XMLHTTPRequest
   */
  constructor(e, t, r, i, s, o, c, u, l) {
    this.databaseId = e, this.appId = t, this.persistenceKey = r, this.host = i, this.ssl = s, this.forceLongPolling = o, this.autoDetectLongPolling = c, this.longPollingOptions = u, this.useFetchStreams = l;
  }
}
class ds {
  constructor(e, t) {
    this.projectId = e, this.database = t || "(default)";
  }
  static empty() {
    return new ds("", "");
  }
  get isDefaultDatabase() {
    return this.database === "(default)";
  }
  isEqual(e) {
    return e instanceof ds && e.projectId === this.projectId && e.database === this.database;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const po = {
  mapValue: {
    fields: {
      __type__: {
        stringValue: "__max__"
      }
    }
  }
};
function Rr(n) {
  return "nullValue" in n ? 0 : "booleanValue" in n ? 1 : "integerValue" in n || "doubleValue" in n ? 2 : "timestampValue" in n ? 3 : "stringValue" in n ? 5 : "bytesValue" in n ? 6 : "referenceValue" in n ? 7 : "geoPointValue" in n ? 8 : "arrayValue" in n ? 9 : "mapValue" in n ? xl(n) ? 4 : PP(n) ? 9007199254740991 : 10 : ce();
}
function un(n, e) {
  if (n === e) return !0;
  const t = Rr(n);
  if (t !== Rr(e)) return !1;
  switch (t) {
    case 0:
    case 9007199254740991:
      return !0;
    case 1:
      return n.booleanValue === e.booleanValue;
    case 4:
      return fs(n).isEqual(fs(e));
    case 3:
      return function(i, s) {
        if (typeof i.timestampValue == "string" && typeof s.timestampValue == "string" && i.timestampValue.length === s.timestampValue.length)
          return i.timestampValue === s.timestampValue;
        const o = Wn(i.timestampValue), c = Wn(s.timestampValue);
        return o.seconds === c.seconds && o.nanos === c.nanos;
      }(n, e);
    case 5:
      return n.stringValue === e.stringValue;
    case 6:
      return function(i, s) {
        return Ar(i.bytesValue).isEqual(Ar(s.bytesValue));
      }(n, e);
    case 7:
      return n.referenceValue === e.referenceValue;
    case 8:
      return function(i, s) {
        return Ge(i.geoPointValue.latitude) === Ge(s.geoPointValue.latitude) && Ge(i.geoPointValue.longitude) === Ge(s.geoPointValue.longitude);
      }(n, e);
    case 2:
      return function(i, s) {
        if ("integerValue" in i && "integerValue" in s) return Ge(i.integerValue) === Ge(s.integerValue);
        if ("doubleValue" in i && "doubleValue" in s) {
          const o = Ge(i.doubleValue), c = Ge(s.doubleValue);
          return o === c ? Yo(o) === Yo(c) : isNaN(o) && isNaN(c);
        }
        return !1;
      }(n, e);
    case 9:
      return ai(n.arrayValue.values || [], e.arrayValue.values || [], un);
    case 10:
      return function(i, s) {
        const o = i.mapValue.fields || {}, c = s.mapValue.fields || {};
        if (cp(o) !== cp(c)) return !1;
        for (const u in o) if (o.hasOwnProperty(u) && (c[u] === void 0 || !un(o[u], c[u]))) return !1;
        return !0;
      }(n, e);
    default:
      return ce();
  }
}
function ps(n, e) {
  return (n.values || []).find((t) => un(t, e)) !== void 0;
}
function ci(n, e) {
  if (n === e) return 0;
  const t = Rr(n), r = Rr(e);
  if (t !== r) return Te(t, r);
  switch (t) {
    case 0:
    case 9007199254740991:
      return 0;
    case 1:
      return Te(n.booleanValue, e.booleanValue);
    case 2:
      return function(s, o) {
        const c = Ge(s.integerValue || s.doubleValue), u = Ge(o.integerValue || o.doubleValue);
        return c < u ? -1 : c > u ? 1 : c === u ? 0 : (
          // one or both are NaN.
          isNaN(c) ? isNaN(u) ? 0 : -1 : 1
        );
      }(n, e);
    case 3:
      return lp(n.timestampValue, e.timestampValue);
    case 4:
      return lp(fs(n), fs(e));
    case 5:
      return Te(n.stringValue, e.stringValue);
    case 6:
      return function(s, o) {
        const c = Ar(s), u = Ar(o);
        return c.compareTo(u);
      }(n.bytesValue, e.bytesValue);
    case 7:
      return function(s, o) {
        const c = s.split("/"), u = o.split("/");
        for (let l = 0; l < c.length && l < u.length; l++) {
          const f = Te(c[l], u[l]);
          if (f !== 0) return f;
        }
        return Te(c.length, u.length);
      }(n.referenceValue, e.referenceValue);
    case 8:
      return function(s, o) {
        const c = Te(Ge(s.latitude), Ge(o.latitude));
        return c !== 0 ? c : Te(Ge(s.longitude), Ge(o.longitude));
      }(n.geoPointValue, e.geoPointValue);
    case 9:
      return function(s, o) {
        const c = s.values || [], u = o.values || [];
        for (let l = 0; l < c.length && l < u.length; ++l) {
          const f = ci(c[l], u[l]);
          if (f) return f;
        }
        return Te(c.length, u.length);
      }(n.arrayValue, e.arrayValue);
    case 10:
      return function(s, o) {
        if (s === po.mapValue && o === po.mapValue) return 0;
        if (s === po.mapValue) return 1;
        if (o === po.mapValue) return -1;
        const c = s.fields || {}, u = Object.keys(c), l = o.fields || {}, f = Object.keys(l);
        u.sort(), f.sort();
        for (let h = 0; h < u.length && h < f.length; ++h) {
          const y = Te(u[h], f[h]);
          if (y !== 0) return y;
          const T = ci(c[u[h]], l[f[h]]);
          if (T !== 0) return T;
        }
        return Te(u.length, f.length);
      }(n.mapValue, e.mapValue);
    default:
      throw ce();
  }
}
function lp(n, e) {
  if (typeof n == "string" && typeof e == "string" && n.length === e.length) return Te(n, e);
  const t = Wn(n), r = Wn(e), i = Te(t.seconds, r.seconds);
  return i !== 0 ? i : Te(t.nanos, r.nanos);
}
function ui(n) {
  return Cu(n);
}
function Cu(n) {
  return "nullValue" in n ? "null" : "booleanValue" in n ? "" + n.booleanValue : "integerValue" in n ? "" + n.integerValue : "doubleValue" in n ? "" + n.doubleValue : "timestampValue" in n ? function(t) {
    const r = Wn(t);
    return `time(${r.seconds},${r.nanos})`;
  }(n.timestampValue) : "stringValue" in n ? n.stringValue : "bytesValue" in n ? function(t) {
    return Ar(t).toBase64();
  }(n.bytesValue) : "referenceValue" in n ? function(t) {
    return se.fromName(t).toString();
  }(n.referenceValue) : "geoPointValue" in n ? function(t) {
    return `geo(${t.latitude},${t.longitude})`;
  }(n.geoPointValue) : "arrayValue" in n ? function(t) {
    let r = "[", i = !0;
    for (const s of t.values || []) i ? i = !1 : r += ",", r += Cu(s);
    return r + "]";
  }(n.arrayValue) : "mapValue" in n ? function(t) {
    const r = Object.keys(t.fields || {}).sort();
    let i = "{", s = !0;
    for (const o of r) s ? s = !1 : i += ",", i += `${o}:${Cu(t.fields[o])}`;
    return i + "}";
  }(n.mapValue) : ce();
}
function hp(n, e) {
  return {
    referenceValue: `projects/${n.projectId}/databases/${n.database}/documents/${e.path.canonicalString()}`
  };
}
function Pu(n) {
  return !!n && "integerValue" in n;
}
function Ml(n) {
  return !!n && "arrayValue" in n;
}
function fp(n) {
  return !!n && "nullValue" in n;
}
function dp(n) {
  return !!n && "doubleValue" in n && isNaN(Number(n.doubleValue));
}
function Co(n) {
  return !!n && "mapValue" in n;
}
function Xi(n) {
  if (n.geoPointValue) return {
    geoPointValue: Object.assign({}, n.geoPointValue)
  };
  if (n.timestampValue && typeof n.timestampValue == "object") return {
    timestampValue: Object.assign({}, n.timestampValue)
  };
  if (n.mapValue) {
    const e = {
      mapValue: {
        fields: {}
      }
    };
    return vi(n.mapValue.fields, (t, r) => e.mapValue.fields[t] = Xi(r)), e;
  }
  if (n.arrayValue) {
    const e = {
      arrayValue: {
        values: []
      }
    };
    for (let t = 0; t < (n.arrayValue.values || []).length; ++t) e.arrayValue.values[t] = Xi(n.arrayValue.values[t]);
    return e;
  }
  return Object.assign({}, n);
}
function PP(n) {
  return (((n.mapValue || {}).fields || {}).__type__ || {}).stringValue === "__max__";
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Vt {
  constructor(e) {
    this.value = e;
  }
  static empty() {
    return new Vt({
      mapValue: {}
    });
  }
  /**
   * Returns the value at the given path or null.
   *
   * @param path - the path to search
   * @returns The value at the path or null if the path is not set.
   */
  field(e) {
    if (e.isEmpty()) return this.value;
    {
      let t = this.value;
      for (let r = 0; r < e.length - 1; ++r) if (t = (t.mapValue.fields || {})[e.get(r)], !Co(t)) return null;
      return t = (t.mapValue.fields || {})[e.lastSegment()], t || null;
    }
  }
  /**
   * Sets the field to the provided value.
   *
   * @param path - The field path to set.
   * @param value - The value to set.
   */
  set(e, t) {
    this.getFieldsMap(e.popLast())[e.lastSegment()] = Xi(t);
  }
  /**
   * Sets the provided fields to the provided values.
   *
   * @param data - A map of fields to values (or null for deletes).
   */
  setAll(e) {
    let t = ct.emptyPath(), r = {}, i = [];
    e.forEach((o, c) => {
      if (!t.isImmediateParentOf(c)) {
        const u = this.getFieldsMap(t);
        this.applyChanges(u, r, i), r = {}, i = [], t = c.popLast();
      }
      o ? r[c.lastSegment()] = Xi(o) : i.push(c.lastSegment());
    });
    const s = this.getFieldsMap(t);
    this.applyChanges(s, r, i);
  }
  /**
   * Removes the field at the specified path. If there is no field at the
   * specified path, nothing is changed.
   *
   * @param path - The field path to remove.
   */
  delete(e) {
    const t = this.field(e.popLast());
    Co(t) && t.mapValue.fields && delete t.mapValue.fields[e.lastSegment()];
  }
  isEqual(e) {
    return un(this.value, e.value);
  }
  /**
   * Returns the map that contains the leaf element of `path`. If the parent
   * entry does not yet exist, or if it is not a map, a new map will be created.
   */
  getFieldsMap(e) {
    let t = this.value;
    t.mapValue.fields || (t.mapValue = {
      fields: {}
    });
    for (let r = 0; r < e.length; ++r) {
      let i = t.mapValue.fields[e.get(r)];
      Co(i) && i.mapValue.fields || (i = {
        mapValue: {
          fields: {}
        }
      }, t.mapValue.fields[e.get(r)] = i), t = i;
    }
    return t.mapValue.fields;
  }
  /**
   * Modifies `fieldsMap` by adding, replacing or deleting the specified
   * entries.
   */
  applyChanges(e, t, r) {
    vi(t, (i, s) => e[i] = s);
    for (const i of r) delete e[i];
  }
  clone() {
    return new Vt(Xi(this.value));
  }
}
function jy(n) {
  const e = [];
  return vi(n.fields, (t, r) => {
    const i = new ct([t]);
    if (Co(r)) {
      const s = jy(r.mapValue).fields;
      if (s.length === 0)
        e.push(i);
      else
        for (const o of s) e.push(i.child(o));
    } else
      e.push(i);
  }), new Qt(e);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class vt {
  constructor(e, t, r, i, s, o, c) {
    this.key = e, this.documentType = t, this.version = r, this.readTime = i, this.createTime = s, this.data = o, this.documentState = c;
  }
  /**
   * Creates a document with no known version or data, but which can serve as
   * base document for mutations.
   */
  static newInvalidDocument(e) {
    return new vt(
      e,
      0,
      /* version */
      he.min(),
      /* readTime */
      he.min(),
      /* createTime */
      he.min(),
      Vt.empty(),
      0
      /* DocumentState.SYNCED */
    );
  }
  /**
   * Creates a new document that is known to exist with the given data at the
   * given version.
   */
  static newFoundDocument(e, t, r, i) {
    return new vt(
      e,
      1,
      /* version */
      t,
      /* readTime */
      he.min(),
      /* createTime */
      r,
      i,
      0
      /* DocumentState.SYNCED */
    );
  }
  /** Creates a new document that is known to not exist at the given version. */
  static newNoDocument(e, t) {
    return new vt(
      e,
      2,
      /* version */
      t,
      /* readTime */
      he.min(),
      /* createTime */
      he.min(),
      Vt.empty(),
      0
      /* DocumentState.SYNCED */
    );
  }
  /**
   * Creates a new document that is known to exist at the given version but
   * whose data is not known (e.g. a document that was updated without a known
   * base document).
   */
  static newUnknownDocument(e, t) {
    return new vt(
      e,
      3,
      /* version */
      t,
      /* readTime */
      he.min(),
      /* createTime */
      he.min(),
      Vt.empty(),
      2
      /* DocumentState.HAS_COMMITTED_MUTATIONS */
    );
  }
  /**
   * Changes the document type to indicate that it exists and that its version
   * and data are known.
   */
  convertToFoundDocument(e, t) {
    return !this.createTime.isEqual(he.min()) || this.documentType !== 2 && this.documentType !== 0 || (this.createTime = e), this.version = e, this.documentType = 1, this.data = t, this.documentState = 0, this;
  }
  /**
   * Changes the document type to indicate that it doesn't exist at the given
   * version.
   */
  convertToNoDocument(e) {
    return this.version = e, this.documentType = 2, this.data = Vt.empty(), this.documentState = 0, this;
  }
  /**
   * Changes the document type to indicate that it exists at a given version but
   * that its data is not known (e.g. a document that was updated without a known
   * base document).
   */
  convertToUnknownDocument(e) {
    return this.version = e, this.documentType = 3, this.data = Vt.empty(), this.documentState = 2, this;
  }
  setHasCommittedMutations() {
    return this.documentState = 2, this;
  }
  setHasLocalMutations() {
    return this.documentState = 1, this.version = he.min(), this;
  }
  setReadTime(e) {
    return this.readTime = e, this;
  }
  get hasLocalMutations() {
    return this.documentState === 1;
  }
  get hasCommittedMutations() {
    return this.documentState === 2;
  }
  get hasPendingWrites() {
    return this.hasLocalMutations || this.hasCommittedMutations;
  }
  isValidDocument() {
    return this.documentType !== 0;
  }
  isFoundDocument() {
    return this.documentType === 1;
  }
  isNoDocument() {
    return this.documentType === 2;
  }
  isUnknownDocument() {
    return this.documentType === 3;
  }
  isEqual(e) {
    return e instanceof vt && this.key.isEqual(e.key) && this.version.isEqual(e.version) && this.documentType === e.documentType && this.documentState === e.documentState && this.data.isEqual(e.data);
  }
  mutableCopy() {
    return new vt(this.key, this.documentType, this.version, this.readTime, this.createTime, this.data.clone(), this.documentState);
  }
  toString() {
    return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {createTime: ${this.createTime}}), {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`;
  }
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Jo {
  constructor(e, t) {
    this.position = e, this.inclusive = t;
  }
}
function pp(n, e, t) {
  let r = 0;
  for (let i = 0; i < n.position.length; i++) {
    const s = e[i], o = n.position[i];
    if (s.field.isKeyField() ? r = se.comparator(se.fromName(o.referenceValue), t.key) : r = ci(o, t.data.field(s.field)), s.dir === "desc" && (r *= -1), r !== 0) break;
  }
  return r;
}
function mp(n, e) {
  if (n === null) return e === null;
  if (e === null || n.inclusive !== e.inclusive || n.position.length !== e.position.length) return !1;
  for (let t = 0; t < n.position.length; t++)
    if (!un(n.position[t], e.position[t])) return !1;
  return !0;
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Xo {
  constructor(e, t = "asc") {
    this.field = e, this.dir = t;
  }
}
function kP(n, e) {
  return n.dir === e.dir && n.field.isEqual(e.field);
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class $y {
}
class We extends $y {
  constructor(e, t, r) {
    super(), this.field = e, this.op = t, this.value = r;
  }
  /**
   * Creates a filter based on the provided arguments.
   */
  static create(e, t, r) {
    return e.isKeyField() ? t === "in" || t === "not-in" ? this.createKeyFieldInFilter(e, t, r) : new DP(e, t, r) : t === "array-contains" ? new LP(e, r) : t === "in" ? new MP(e, r) : t === "not-in" ? new VP(e, r) : t === "array-contains-any" ? new FP(e, r) : new We(e, t, r);
  }
  static createKeyFieldInFilter(e, t, r) {
    return t === "in" ? new NP(e, r) : new xP(e, r);
  }
  matches(e) {
    const t = e.data.field(this.field);
    return this.op === "!=" ? t !== null && this.matchesComparison(ci(t, this.value)) : t !== null && Rr(this.value) === Rr(t) && this.matchesComparison(ci(t, this.value));
  }
  matchesComparison(e) {
    switch (this.op) {
      case "<":
        return e < 0;
      case "<=":
        return e <= 0;
      case "==":
        return e === 0;
      case "!=":
        return e !== 0;
      case ">":
        return e > 0;
      case ">=":
        return e >= 0;
      default:
        return ce();
    }
  }
  isInequality() {
    return [
      "<",
      "<=",
      ">",
      ">=",
      "!=",
      "not-in"
      /* Operator.NOT_IN */
    ].indexOf(this.op) >= 0;
  }
  getFlattenedFilters() {
    return [this];
  }
  getFilters() {
    return [this];
  }
}
class Jt extends $y {
  constructor(e, t) {
    super(), this.filters = e, this.op = t, this.ae = null;
  }
  /**
   * Creates a filter based on the provided arguments.
   */
  static create(e, t) {
    return new Jt(e, t);
  }
  matches(e) {
    return By(this) ? this.filters.find((t) => !t.matches(e)) === void 0 : this.filters.find((t) => t.matches(e)) !== void 0;
  }
  getFlattenedFilters() {
    return this.ae !== null || (this.ae = this.filters.reduce((e, t) => e.concat(t.getFlattenedFilters()), [])), this.ae;
  }
  // Returns a mutable copy of `this.filters`
  getFilters() {
    return Object.assign([], this.filters);
  }
}
function By(n) {
  return n.op === "and";
}
function qy(n) {
  return OP(n) && By(n);
}
function OP(n) {
  for (const e of n.filters) if (e instanceof Jt) return !1;
  return !0;
}
function ku(n) {
  if (n instanceof We)
    return n.field.canonicalString() + n.op.toString() + ui(n.value);
  if (qy(n))
    return n.filters.map((e) => ku(e)).join(",");
  {
    const e = n.filters.map((t) => ku(t)).join(",");
    return `${n.op}(${e})`;
  }
}
function Ky(n, e) {
  return n instanceof We ? function(r, i) {
    return i instanceof We && r.op === i.op && r.field.isEqual(i.field) && un(r.value, i.value);
  }(n, e) : n instanceof Jt ? function(r, i) {
    return i instanceof Jt && r.op === i.op && r.filters.length === i.filters.length ? r.filters.reduce((s, o, c) => s && Ky(o, i.filters[c]), !0) : !1;
  }(n, e) : void ce();
}
function zy(n) {
  return n instanceof We ? function(t) {
    return `${t.field.canonicalString()} ${t.op} ${ui(t.value)}`;
  }(n) : n instanceof Jt ? function(t) {
    return t.op.toString() + " {" + t.getFilters().map(zy).join(" ,") + "}";
  }(n) : "Filter";
}
class DP extends We {
  constructor(e, t, r) {
    super(e, t, r), this.key = se.fromName(r.referenceValue);
  }
  matches(e) {
    const t = se.comparator(e.key, this.key);
    return this.matchesComparison(t);
  }
}
class NP extends We {
  constructor(e, t) {
    super(e, "in", t), this.keys = Hy("in", t);
  }
  matches(e) {
    return this.keys.some((t) => t.isEqual(e.key));
  }
}
class xP extends We {
  constructor(e, t) {
    super(e, "not-in", t), this.keys = Hy("not-in", t);
  }
  matches(e) {
    return !this.keys.some((t) => t.isEqual(e.key));
  }
}
function Hy(n, e) {
  var t;
  return (((t = e.arrayValue) === null || t === void 0 ? void 0 : t.values) || []).map((r) => se.fromName(r.referenceValue));
}
class LP extends We {
  constructor(e, t) {
    super(e, "array-contains", t);
  }
  matches(e) {
    const t = e.data.field(this.field);
    return Ml(t) && ps(t.arrayValue, this.value);
  }
}
class MP extends We {
  constructor(e, t) {
    super(e, "in", t);
  }
  matches(e) {
    const t = e.data.field(this.field);
    return t !== null && ps(this.value.arrayValue, t);
  }
}
class VP extends We {
  constructor(e, t) {
    super(e, "not-in", t);
  }
  matches(e) {
    if (ps(this.value.arrayValue, {
      nullValue: "NULL_VALUE"
    })) return !1;
    const t = e.data.field(this.field);
    return t !== null && !ps(this.value.arrayValue, t);
  }
}
class FP extends We {
  constructor(e, t) {
    super(e, "array-contains-any", t);
  }
  matches(e) {
    const t = e.data.field(this.field);
    return !(!Ml(t) || !t.arrayValue.values) && t.arrayValue.values.some((r) => ps(this.value.arrayValue, r));
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class UP {
  constructor(e, t = null, r = [], i = [], s = null, o = null, c = null) {
    this.path = e, this.collectionGroup = t, this.orderBy = r, this.filters = i, this.limit = s, this.startAt = o, this.endAt = c, this.ue = null;
  }
}
function gp(n, e = null, t = [], r = [], i = null, s = null, o = null) {
  return new UP(n, e, t, r, i, s, o);
}
function Vl(n) {
  const e = fe(n);
  if (e.ue === null) {
    let t = e.path.canonicalString();
    e.collectionGroup !== null && (t += "|cg:" + e.collectionGroup), t += "|f:", t += e.filters.map((r) => ku(r)).join(","), t += "|ob:", t += e.orderBy.map((r) => function(s) {
      return s.field.canonicalString() + s.dir;
    }(r)).join(","), Ca(e.limit) || (t += "|l:", t += e.limit), e.startAt && (t += "|lb:", t += e.startAt.inclusive ? "b:" : "a:", t += e.startAt.position.map((r) => ui(r)).join(",")), e.endAt && (t += "|ub:", t += e.endAt.inclusive ? "a:" : "b:", t += e.endAt.position.map((r) => ui(r)).join(",")), e.ue = t;
  }
  return e.ue;
}
function Fl(n, e) {
  if (n.limit !== e.limit || n.orderBy.length !== e.orderBy.length) return !1;
  for (let t = 0; t < n.orderBy.length; t++) if (!kP(n.orderBy[t], e.orderBy[t])) return !1;
  if (n.filters.length !== e.filters.length) return !1;
  for (let t = 0; t < n.filters.length; t++) if (!Ky(n.filters[t], e.filters[t])) return !1;
  return n.collectionGroup === e.collectionGroup && !!n.path.isEqual(e.path) && !!mp(n.startAt, e.startAt) && mp(n.endAt, e.endAt);
}
function Ou(n) {
  return se.isDocumentKey(n.path) && n.collectionGroup === null && n.filters.length === 0;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Os {
  /**
   * Initializes a Query with a path and optional additional query constraints.
   * Path must currently be empty if this is a collection group query.
   */
  constructor(e, t = null, r = [], i = [], s = null, o = "F", c = null, u = null) {
    this.path = e, this.collectionGroup = t, this.explicitOrderBy = r, this.filters = i, this.limit = s, this.limitType = o, this.startAt = c, this.endAt = u, this.ce = null, // The corresponding `Target` of this `Query` instance, for use with
    // non-aggregate queries.
    this.le = null, // The corresponding `Target` of this `Query` instance, for use with
    // aggregate queries. Unlike targets for non-aggregate queries,
    // aggregate query targets do not contain normalized order-bys, they only
    // contain explicit order-bys.
    this.he = null, this.startAt, this.endAt;
  }
}
function jP(n, e, t, r, i, s, o, c) {
  return new Os(n, e, t, r, i, s, o, c);
}
function Pa(n) {
  return new Os(n);
}
function yp(n) {
  return n.filters.length === 0 && n.limit === null && n.startAt == null && n.endAt == null && (n.explicitOrderBy.length === 0 || n.explicitOrderBy.length === 1 && n.explicitOrderBy[0].field.isKeyField());
}
function Gy(n) {
  return n.collectionGroup !== null;
}
function Zi(n) {
  const e = fe(n);
  if (e.ce === null) {
    e.ce = [];
    const t = /* @__PURE__ */ new Set();
    for (const s of e.explicitOrderBy) e.ce.push(s), t.add(s.field.canonicalString());
    const r = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : "asc";
    (function(o) {
      let c = new ut(ct.comparator);
      return o.filters.forEach((u) => {
        u.getFlattenedFilters().forEach((l) => {
          l.isInequality() && (c = c.add(l.field));
        });
      }), c;
    })(e).forEach((s) => {
      t.has(s.canonicalString()) || s.isKeyField() || e.ce.push(new Xo(s, r));
    }), // Add the document key field to the last if it is not explicitly ordered.
    t.has(ct.keyField().canonicalString()) || e.ce.push(new Xo(ct.keyField(), r));
  }
  return e.ce;
}
function sn(n) {
  const e = fe(n);
  return e.le || (e.le = $P(e, Zi(n))), e.le;
}
function $P(n, e) {
  if (n.limitType === "F") return gp(n.path, n.collectionGroup, e, n.filters, n.limit, n.startAt, n.endAt);
  {
    e = e.map((i) => {
      const s = i.dir === "desc" ? "asc" : "desc";
      return new Xo(i.field, s);
    });
    const t = n.endAt ? new Jo(n.endAt.position, n.endAt.inclusive) : null, r = n.startAt ? new Jo(n.startAt.position, n.startAt.inclusive) : null;
    return gp(n.path, n.collectionGroup, e, n.filters, n.limit, t, r);
  }
}
function Du(n, e) {
  const t = n.filters.concat([e]);
  return new Os(n.path, n.collectionGroup, n.explicitOrderBy.slice(), t, n.limit, n.limitType, n.startAt, n.endAt);
}
function Nu(n, e, t) {
  return new Os(n.path, n.collectionGroup, n.explicitOrderBy.slice(), n.filters.slice(), e, t, n.startAt, n.endAt);
}
function ka(n, e) {
  return Fl(sn(n), sn(e)) && n.limitType === e.limitType;
}
function Wy(n) {
  return `${Vl(sn(n))}|lt:${n.limitType}`;
}
function Br(n) {
  return `Query(target=${function(t) {
    let r = t.path.canonicalString();
    return t.collectionGroup !== null && (r += " collectionGroup=" + t.collectionGroup), t.filters.length > 0 && (r += `, filters: [${t.filters.map((i) => zy(i)).join(", ")}]`), Ca(t.limit) || (r += ", limit: " + t.limit), t.orderBy.length > 0 && (r += `, orderBy: [${t.orderBy.map((i) => function(o) {
      return `${o.field.canonicalString()} (${o.dir})`;
    }(i)).join(", ")}]`), t.startAt && (r += ", startAt: ", r += t.startAt.inclusive ? "b:" : "a:", r += t.startAt.position.map((i) => ui(i)).join(",")), t.endAt && (r += ", endAt: ", r += t.endAt.inclusive ? "a:" : "b:", r += t.endAt.position.map((i) => ui(i)).join(",")), `Target(${r})`;
  }(sn(n))}; limitType=${n.limitType})`;
}
function Oa(n, e) {
  return e.isFoundDocument() && function(r, i) {
    const s = i.key.path;
    return r.collectionGroup !== null ? i.key.hasCollectionId(r.collectionGroup) && r.path.isPrefixOf(s) : se.isDocumentKey(r.path) ? r.path.isEqual(s) : r.path.isImmediateParentOf(s);
  }(n, e) && function(r, i) {
    for (const s of Zi(r))
      if (!s.field.isKeyField() && i.data.field(s.field) === null) return !1;
    return !0;
  }(n, e) && function(r, i) {
    for (const s of r.filters) if (!s.matches(i)) return !1;
    return !0;
  }(n, e) && function(r, i) {
    return !(r.startAt && !/**
    * Returns true if a document sorts before a bound using the provided sort
    * order.
    */
    function(o, c, u) {
      const l = pp(o, c, u);
      return o.inclusive ? l <= 0 : l < 0;
    }(r.startAt, Zi(r), i) || r.endAt && !function(o, c, u) {
      const l = pp(o, c, u);
      return o.inclusive ? l >= 0 : l > 0;
    }(r.endAt, Zi(r), i));
  }(n, e);
}
function BP(n) {
  return n.collectionGroup || (n.path.length % 2 == 1 ? n.path.lastSegment() : n.path.get(n.path.length - 2));
}
function Qy(n) {
  return (e, t) => {
    let r = !1;
    for (const i of Zi(n)) {
      const s = qP(i, e, t);
      if (s !== 0) return s;
      r = r || i.field.isKeyField();
    }
    return 0;
  };
}
function qP(n, e, t) {
  const r = n.field.isKeyField() ? se.comparator(e.key, t.key) : function(s, o, c) {
    const u = o.data.field(s), l = c.data.field(s);
    return u !== null && l !== null ? ci(u, l) : ce();
  }(n.field, e, t);
  switch (n.dir) {
    case "asc":
      return r;
    case "desc":
      return -1 * r;
    default:
      return ce();
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class wi {
  constructor(e, t) {
    this.mapKeyFn = e, this.equalsFn = t, /**
    * The inner map for a key/value pair. Due to the possibility of collisions we
    * keep a list of entries that we do a linear search through to find an actual
    * match. Note that collisions should be rare, so we still expect near
    * constant time lookups in practice.
    */
    this.inner = {}, /** The number of entries stored in the map */
    this.innerSize = 0;
  }
  /** Get a value for this key, or undefined if it does not exist. */
  get(e) {
    const t = this.mapKeyFn(e), r = this.inner[t];
    if (r !== void 0) {
      for (const [i, s] of r) if (this.equalsFn(i, e)) return s;
    }
  }
  has(e) {
    return this.get(e) !== void 0;
  }
  /** Put this key and value in the map. */
  set(e, t) {
    const r = this.mapKeyFn(e), i = this.inner[r];
    if (i === void 0) return this.inner[r] = [[e, t]], void this.innerSize++;
    for (let s = 0; s < i.length; s++) if (this.equalsFn(i[s][0], e))
      return void (i[s] = [e, t]);
    i.push([e, t]), this.innerSize++;
  }
  /**
   * Remove this key from the map. Returns a boolean if anything was deleted.
   */
  delete(e) {
    const t = this.mapKeyFn(e), r = this.inner[t];
    if (r === void 0) return !1;
    for (let i = 0; i < r.length; i++) if (this.equalsFn(r[i][0], e)) return r.length === 1 ? delete this.inner[t] : r.splice(i, 1), this.innerSize--, !0;
    return !1;
  }
  forEach(e) {
    vi(this.inner, (t, r) => {
      for (const [i, s] of r) e(i, s);
    });
  }
  isEmpty() {
    return Fy(this.inner);
  }
  size() {
    return this.innerSize;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const KP = new Me(se.comparator);
function An() {
  return KP;
}
const Yy = new Me(se.comparator);
function Gi(...n) {
  let e = Yy;
  for (const t of n) e = e.insert(t.key, t);
  return e;
}
function Jy(n) {
  let e = Yy;
  return n.forEach((t, r) => e = e.insert(t, r.overlayedDocument)), e;
}
function hr() {
  return es();
}
function Xy() {
  return es();
}
function es() {
  return new wi((n) => n.toString(), (n, e) => n.isEqual(e));
}
const zP = new Me(se.comparator), HP = new ut(se.comparator);
function ye(...n) {
  let e = HP;
  for (const t of n) e = e.add(t);
  return e;
}
const GP = new ut(Te);
function WP() {
  return GP;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Zy(n, e) {
  if (n.useProto3Json) {
    if (isNaN(e)) return {
      doubleValue: "NaN"
    };
    if (e === 1 / 0) return {
      doubleValue: "Infinity"
    };
    if (e === -1 / 0) return {
      doubleValue: "-Infinity"
    };
  }
  return {
    doubleValue: Yo(e) ? "-0" : e
  };
}
function e_(n) {
  return {
    integerValue: "" + n
  };
}
function QP(n, e) {
  return AP(e) ? e_(e) : Zy(n, e);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Da {
  constructor() {
    this._ = void 0;
  }
}
function YP(n, e, t) {
  return n instanceof Zo ? function(i, s) {
    const o = {
      fields: {
        __type__: {
          stringValue: "server_timestamp"
        },
        __local_write_time__: {
          timestampValue: {
            seconds: i.seconds,
            nanos: i.nanoseconds
          }
        }
      }
    };
    return s && xl(s) && (s = Ll(s)), s && (o.fields.__previous_value__ = s), {
      mapValue: o
    };
  }(t, e) : n instanceof ms ? n_(n, e) : n instanceof gs ? r_(n, e) : function(i, s) {
    const o = t_(i, s), c = _p(o) + _p(i.Pe);
    return Pu(o) && Pu(i.Pe) ? e_(c) : Zy(i.serializer, c);
  }(n, e);
}
function JP(n, e, t) {
  return n instanceof ms ? n_(n, e) : n instanceof gs ? r_(n, e) : t;
}
function t_(n, e) {
  return n instanceof ea ? (
    /** Returns true if `value` is either an IntegerValue or a DoubleValue. */
    function(r) {
      return Pu(r) || function(s) {
        return !!s && "doubleValue" in s;
      }(r);
    }(e) ? e : {
      integerValue: 0
    }
  ) : null;
}
class Zo extends Da {
}
class ms extends Da {
  constructor(e) {
    super(), this.elements = e;
  }
}
function n_(n, e) {
  const t = i_(e);
  for (const r of n.elements) t.some((i) => un(i, r)) || t.push(r);
  return {
    arrayValue: {
      values: t
    }
  };
}
class gs extends Da {
  constructor(e) {
    super(), this.elements = e;
  }
}
function r_(n, e) {
  let t = i_(e);
  for (const r of n.elements) t = t.filter((i) => !un(i, r));
  return {
    arrayValue: {
      values: t
    }
  };
}
class ea extends Da {
  constructor(e, t) {
    super(), this.serializer = e, this.Pe = t;
  }
}
function _p(n) {
  return Ge(n.integerValue || n.doubleValue);
}
function i_(n) {
  return Ml(n) && n.arrayValue.values ? n.arrayValue.values.slice() : [];
}
function XP(n, e) {
  return n.field.isEqual(e.field) && function(r, i) {
    return r instanceof ms && i instanceof ms || r instanceof gs && i instanceof gs ? ai(r.elements, i.elements, un) : r instanceof ea && i instanceof ea ? un(r.Pe, i.Pe) : r instanceof Zo && i instanceof Zo;
  }(n.transform, e.transform);
}
class ZP {
  constructor(e, t) {
    this.version = e, this.transformResults = t;
  }
}
class En {
  constructor(e, t) {
    this.updateTime = e, this.exists = t;
  }
  /** Creates a new empty Precondition. */
  static none() {
    return new En();
  }
  /** Creates a new Precondition with an exists flag. */
  static exists(e) {
    return new En(void 0, e);
  }
  /** Creates a new Precondition based on a version a document exists at. */
  static updateTime(e) {
    return new En(e);
  }
  /** Returns whether this Precondition is empty. */
  get isNone() {
    return this.updateTime === void 0 && this.exists === void 0;
  }
  isEqual(e) {
    return this.exists === e.exists && (this.updateTime ? !!e.updateTime && this.updateTime.isEqual(e.updateTime) : !e.updateTime);
  }
}
function Po(n, e) {
  return n.updateTime !== void 0 ? e.isFoundDocument() && e.version.isEqual(n.updateTime) : n.exists === void 0 || n.exists === e.isFoundDocument();
}
class Na {
}
function s_(n, e) {
  if (!n.hasLocalMutations || e && e.fields.length === 0) return null;
  if (e === null) return n.isNoDocument() ? new a_(n.key, En.none()) : new Ds(n.key, n.data, En.none());
  {
    const t = n.data, r = Vt.empty();
    let i = new ut(ct.comparator);
    for (let s of e.fields) if (!i.has(s)) {
      let o = t.field(s);
      o === null && s.length > 1 && (s = s.popLast(), o = t.field(s)), o === null ? r.delete(s) : r.set(s, o), i = i.add(s);
    }
    return new Nr(n.key, r, new Qt(i.toArray()), En.none());
  }
}
function ek(n, e, t) {
  n instanceof Ds ? function(i, s, o) {
    const c = i.value.clone(), u = wp(i.fieldTransforms, s, o.transformResults);
    c.setAll(u), s.convertToFoundDocument(o.version, c).setHasCommittedMutations();
  }(n, e, t) : n instanceof Nr ? function(i, s, o) {
    if (!Po(i.precondition, s))
      return void s.convertToUnknownDocument(o.version);
    const c = wp(i.fieldTransforms, s, o.transformResults), u = s.data;
    u.setAll(o_(i)), u.setAll(c), s.convertToFoundDocument(o.version, u).setHasCommittedMutations();
  }(n, e, t) : function(i, s, o) {
    s.convertToNoDocument(o.version).setHasCommittedMutations();
  }(0, e, t);
}
function ts(n, e, t, r) {
  return n instanceof Ds ? function(s, o, c, u) {
    if (!Po(s.precondition, o))
      return c;
    const l = s.value.clone(), f = Ep(s.fieldTransforms, u, o);
    return l.setAll(f), o.convertToFoundDocument(o.version, l).setHasLocalMutations(), null;
  }(n, e, t, r) : n instanceof Nr ? function(s, o, c, u) {
    if (!Po(s.precondition, o)) return c;
    const l = Ep(s.fieldTransforms, u, o), f = o.data;
    return f.setAll(o_(s)), f.setAll(l), o.convertToFoundDocument(o.version, f).setHasLocalMutations(), c === null ? null : c.unionWith(s.fieldMask.fields).unionWith(s.fieldTransforms.map((h) => h.field));
  }(n, e, t, r) : function(s, o, c) {
    return Po(s.precondition, o) ? (o.convertToNoDocument(o.version).setHasLocalMutations(), null) : c;
  }(n, e, t);
}
function tk(n, e) {
  let t = null;
  for (const r of n.fieldTransforms) {
    const i = e.data.field(r.field), s = t_(r.transform, i || null);
    s != null && (t === null && (t = Vt.empty()), t.set(r.field, s));
  }
  return t || null;
}
function vp(n, e) {
  return n.type === e.type && !!n.key.isEqual(e.key) && !!n.precondition.isEqual(e.precondition) && !!function(r, i) {
    return r === void 0 && i === void 0 || !(!r || !i) && ai(r, i, (s, o) => XP(s, o));
  }(n.fieldTransforms, e.fieldTransforms) && (n.type === 0 ? n.value.isEqual(e.value) : n.type !== 1 || n.data.isEqual(e.data) && n.fieldMask.isEqual(e.fieldMask));
}
class Ds extends Na {
  constructor(e, t, r, i = []) {
    super(), this.key = e, this.value = t, this.precondition = r, this.fieldTransforms = i, this.type = 0;
  }
  getFieldMask() {
    return null;
  }
}
class Nr extends Na {
  constructor(e, t, r, i, s = []) {
    super(), this.key = e, this.data = t, this.fieldMask = r, this.precondition = i, this.fieldTransforms = s, this.type = 1;
  }
  getFieldMask() {
    return this.fieldMask;
  }
}
function o_(n) {
  const e = /* @__PURE__ */ new Map();
  return n.fieldMask.fields.forEach((t) => {
    if (!t.isEmpty()) {
      const r = n.data.field(t);
      e.set(t, r);
    }
  }), e;
}
function wp(n, e, t) {
  const r = /* @__PURE__ */ new Map();
  De(n.length === t.length);
  for (let i = 0; i < t.length; i++) {
    const s = n[i], o = s.transform, c = e.data.field(s.field);
    r.set(s.field, JP(o, c, t[i]));
  }
  return r;
}
function Ep(n, e, t) {
  const r = /* @__PURE__ */ new Map();
  for (const i of n) {
    const s = i.transform, o = t.data.field(i.field);
    r.set(i.field, YP(s, o, e));
  }
  return r;
}
class a_ extends Na {
  constructor(e, t) {
    super(), this.key = e, this.precondition = t, this.type = 2, this.fieldTransforms = [];
  }
  getFieldMask() {
    return null;
  }
}
class nk extends Na {
  constructor(e, t) {
    super(), this.key = e, this.precondition = t, this.type = 3, this.fieldTransforms = [];
  }
  getFieldMask() {
    return null;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class rk {
  /**
   * @param batchId - The unique ID of this mutation batch.
   * @param localWriteTime - The original write time of this mutation.
   * @param baseMutations - Mutations that are used to populate the base
   * values when this mutation is applied locally. This can be used to locally
   * overwrite values that are persisted in the remote document cache. Base
   * mutations are never sent to the backend.
   * @param mutations - The user-provided mutations in this mutation batch.
   * User-provided mutations are applied both locally and remotely on the
   * backend.
   */
  constructor(e, t, r, i) {
    this.batchId = e, this.localWriteTime = t, this.baseMutations = r, this.mutations = i;
  }
  /**
   * Applies all the mutations in this MutationBatch to the specified document
   * to compute the state of the remote document
   *
   * @param document - The document to apply mutations to.
   * @param batchResult - The result of applying the MutationBatch to the
   * backend.
   */
  applyToRemoteDocument(e, t) {
    const r = t.mutationResults;
    for (let i = 0; i < this.mutations.length; i++) {
      const s = this.mutations[i];
      s.key.isEqual(e.key) && ek(s, e, r[i]);
    }
  }
  /**
   * Computes the local view of a document given all the mutations in this
   * batch.
   *
   * @param document - The document to apply mutations to.
   * @param mutatedFields - Fields that have been updated before applying this mutation batch.
   * @returns A `FieldMask` representing all the fields that are mutated.
   */
  applyToLocalView(e, t) {
    for (const r of this.baseMutations) r.key.isEqual(e.key) && (t = ts(r, e, t, this.localWriteTime));
    for (const r of this.mutations) r.key.isEqual(e.key) && (t = ts(r, e, t, this.localWriteTime));
    return t;
  }
  /**
   * Computes the local view for all provided documents given the mutations in
   * this batch. Returns a `DocumentKey` to `Mutation` map which can be used to
   * replace all the mutation applications.
   */
  applyToLocalDocumentSet(e, t) {
    const r = Xy();
    return this.mutations.forEach((i) => {
      const s = e.get(i.key), o = s.overlayedDocument;
      let c = this.applyToLocalView(o, s.mutatedFields);
      c = t.has(i.key) ? null : c;
      const u = s_(o, c);
      u !== null && r.set(i.key, u), o.isValidDocument() || o.convertToNoDocument(he.min());
    }), r;
  }
  keys() {
    return this.mutations.reduce((e, t) => e.add(t.key), ye());
  }
  isEqual(e) {
    return this.batchId === e.batchId && ai(this.mutations, e.mutations, (t, r) => vp(t, r)) && ai(this.baseMutations, e.baseMutations, (t, r) => vp(t, r));
  }
}
class Ul {
  constructor(e, t, r, i) {
    this.batch = e, this.commitVersion = t, this.mutationResults = r, this.docVersions = i;
  }
  /**
   * Creates a new MutationBatchResult for the given batch and results. There
   * must be one result for each mutation in the batch. This static factory
   * caches a document=&gt;version mapping (docVersions).
   */
  static from(e, t, r) {
    De(e.mutations.length === r.length);
    let i = /* @__PURE__ */ function() {
      return zP;
    }();
    const s = e.mutations;
    for (let o = 0; o < s.length; o++) i = i.insert(s[o].key, r[o].version);
    return new Ul(e, t, r, i);
  }
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ik {
  constructor(e, t) {
    this.largestBatchId = e, this.mutation = t;
  }
  getKey() {
    return this.mutation.key;
  }
  isEqual(e) {
    return e !== null && this.mutation === e.mutation;
  }
  toString() {
    return `Overlay{
      largestBatchId: ${this.largestBatchId},
      mutation: ${this.mutation.toString()}
    }`;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class sk {
  constructor(e, t) {
    this.count = e, this.unchangedNames = t;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Ke, ve;
function ok(n) {
  switch (n) {
    default:
      return ce();
    case B.CANCELLED:
    case B.UNKNOWN:
    case B.DEADLINE_EXCEEDED:
    case B.RESOURCE_EXHAUSTED:
    case B.INTERNAL:
    case B.UNAVAILABLE:
    case B.UNAUTHENTICATED:
      return !1;
    case B.INVALID_ARGUMENT:
    case B.NOT_FOUND:
    case B.ALREADY_EXISTS:
    case B.PERMISSION_DENIED:
    case B.FAILED_PRECONDITION:
    case B.ABORTED:
    case B.OUT_OF_RANGE:
    case B.UNIMPLEMENTED:
    case B.DATA_LOSS:
      return !0;
  }
}
function c_(n) {
  if (n === void 0)
    return Sn("GRPC error has no .code"), B.UNKNOWN;
  switch (n) {
    case Ke.OK:
      return B.OK;
    case Ke.CANCELLED:
      return B.CANCELLED;
    case Ke.UNKNOWN:
      return B.UNKNOWN;
    case Ke.DEADLINE_EXCEEDED:
      return B.DEADLINE_EXCEEDED;
    case Ke.RESOURCE_EXHAUSTED:
      return B.RESOURCE_EXHAUSTED;
    case Ke.INTERNAL:
      return B.INTERNAL;
    case Ke.UNAVAILABLE:
      return B.UNAVAILABLE;
    case Ke.UNAUTHENTICATED:
      return B.UNAUTHENTICATED;
    case Ke.INVALID_ARGUMENT:
      return B.INVALID_ARGUMENT;
    case Ke.NOT_FOUND:
      return B.NOT_FOUND;
    case Ke.ALREADY_EXISTS:
      return B.ALREADY_EXISTS;
    case Ke.PERMISSION_DENIED:
      return B.PERMISSION_DENIED;
    case Ke.FAILED_PRECONDITION:
      return B.FAILED_PRECONDITION;
    case Ke.ABORTED:
      return B.ABORTED;
    case Ke.OUT_OF_RANGE:
      return B.OUT_OF_RANGE;
    case Ke.UNIMPLEMENTED:
      return B.UNIMPLEMENTED;
    case Ke.DATA_LOSS:
      return B.DATA_LOSS;
    default:
      return ce();
  }
}
(ve = Ke || (Ke = {}))[ve.OK = 0] = "OK", ve[ve.CANCELLED = 1] = "CANCELLED", ve[ve.UNKNOWN = 2] = "UNKNOWN", ve[ve.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", ve[ve.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", ve[ve.NOT_FOUND = 5] = "NOT_FOUND", ve[ve.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", ve[ve.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", ve[ve.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", ve[ve.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", ve[ve.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", ve[ve.ABORTED = 10] = "ABORTED", ve[ve.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", ve[ve.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", ve[ve.INTERNAL = 13] = "INTERNAL", ve[ve.UNAVAILABLE = 14] = "UNAVAILABLE", ve[ve.DATA_LOSS = 15] = "DATA_LOSS";
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function ak() {
  return new TextEncoder();
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const ck = new mr([4294967295, 4294967295], 0);
function Tp(n) {
  const e = ak().encode(n), t = new Py();
  return t.update(e), new Uint8Array(t.digest());
}
function bp(n) {
  const e = new DataView(n.buffer), t = e.getUint32(
    0,
    /* littleEndian= */
    !0
  ), r = e.getUint32(
    4,
    /* littleEndian= */
    !0
  ), i = e.getUint32(
    8,
    /* littleEndian= */
    !0
  ), s = e.getUint32(
    12,
    /* littleEndian= */
    !0
  );
  return [new mr([t, r], 0), new mr([i, s], 0)];
}
class jl {
  constructor(e, t, r) {
    if (this.bitmap = e, this.padding = t, this.hashCount = r, t < 0 || t >= 8) throw new Wi(`Invalid padding: ${t}`);
    if (r < 0) throw new Wi(`Invalid hash count: ${r}`);
    if (e.length > 0 && this.hashCount === 0)
      throw new Wi(`Invalid hash count: ${r}`);
    if (e.length === 0 && t !== 0)
      throw new Wi(`Invalid padding when bitmap length is 0: ${t}`);
    this.Ie = 8 * e.length - t, // Set the bit count in Integer to avoid repetition in mightContain().
    this.Te = mr.fromNumber(this.Ie);
  }
  // Calculate the ith hash value based on the hashed 64bit integers,
  // and calculate its corresponding bit index in the bitmap to be checked.
  Ee(e, t, r) {
    let i = e.add(t.multiply(mr.fromNumber(r)));
    return i.compare(ck) === 1 && (i = new mr([i.getBits(0), i.getBits(1)], 0)), i.modulo(this.Te).toNumber();
  }
  // Return whether the bit on the given index in the bitmap is set to 1.
  de(e) {
    return (this.bitmap[Math.floor(e / 8)] & 1 << e % 8) != 0;
  }
  mightContain(e) {
    if (this.Ie === 0) return !1;
    const t = Tp(e), [r, i] = bp(t);
    for (let s = 0; s < this.hashCount; s++) {
      const o = this.Ee(r, i, s);
      if (!this.de(o)) return !1;
    }
    return !0;
  }
  /** Create bloom filter for testing purposes only. */
  static create(e, t, r) {
    const i = e % 8 == 0 ? 0 : 8 - e % 8, s = new Uint8Array(Math.ceil(e / 8)), o = new jl(s, i, t);
    return r.forEach((c) => o.insert(c)), o;
  }
  insert(e) {
    if (this.Ie === 0) return;
    const t = Tp(e), [r, i] = bp(t);
    for (let s = 0; s < this.hashCount; s++) {
      const o = this.Ee(r, i, s);
      this.Ae(o);
    }
  }
  Ae(e) {
    const t = Math.floor(e / 8), r = e % 8;
    this.bitmap[t] |= 1 << r;
  }
}
class Wi extends Error {
  constructor() {
    super(...arguments), this.name = "BloomFilterError";
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class xa {
  constructor(e, t, r, i, s) {
    this.snapshotVersion = e, this.targetChanges = t, this.targetMismatches = r, this.documentUpdates = i, this.resolvedLimboDocuments = s;
  }
  /**
   * HACK: Views require RemoteEvents in order to determine whether the view is
   * CURRENT, but secondary tabs don't receive remote events. So this method is
   * used to create a synthesized RemoteEvent that can be used to apply a
   * CURRENT status change to a View, for queries executed in a different tab.
   */
  // PORTING NOTE: Multi-tab only
  static createSynthesizedRemoteEventForCurrentChange(e, t, r) {
    const i = /* @__PURE__ */ new Map();
    return i.set(e, Ns.createSynthesizedTargetChangeForCurrentChange(e, t, r)), new xa(he.min(), i, new Me(Te), An(), ye());
  }
}
class Ns {
  constructor(e, t, r, i, s) {
    this.resumeToken = e, this.current = t, this.addedDocuments = r, this.modifiedDocuments = i, this.removedDocuments = s;
  }
  /**
   * This method is used to create a synthesized TargetChanges that can be used to
   * apply a CURRENT status change to a View (for queries executed in a different
   * tab) or for new queries (to raise snapshots with correct CURRENT status).
   */
  static createSynthesizedTargetChangeForCurrentChange(e, t, r) {
    return new Ns(r, t, ye(), ye(), ye());
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ko {
  constructor(e, t, r, i) {
    this.Re = e, this.removedTargetIds = t, this.key = r, this.Ve = i;
  }
}
class u_ {
  constructor(e, t) {
    this.targetId = e, this.me = t;
  }
}
class l_ {
  constructor(e, t, r = ht.EMPTY_BYTE_STRING, i = null) {
    this.state = e, this.targetIds = t, this.resumeToken = r, this.cause = i;
  }
}
class Ip {
  constructor() {
    this.fe = 0, /**
    * Keeps track of the document changes since the last raised snapshot.
    *
    * These changes are continuously updated as we receive document updates and
    * always reflect the current set of changes against the last issued snapshot.
    */
    this.ge = Ap(), /** See public getters for explanations of these fields. */
    this.pe = ht.EMPTY_BYTE_STRING, this.ye = !1, /**
    * Whether this target state should be included in the next snapshot. We
    * initialize to true so that newly-added targets are included in the next
    * RemoteEvent.
    */
    this.we = !0;
  }
  /**
   * Whether this target has been marked 'current'.
   *
   * 'Current' has special meaning in the RPC protocol: It implies that the
   * Watch backend has sent us all changes up to the point at which the target
   * was added and that the target is consistent with the rest of the watch
   * stream.
   */
  get current() {
    return this.ye;
  }
  /** The last resume token sent to us for this target. */
  get resumeToken() {
    return this.pe;
  }
  /** Whether this target has pending target adds or target removes. */
  get Se() {
    return this.fe !== 0;
  }
  /** Whether we have modified any state that should trigger a snapshot. */
  get be() {
    return this.we;
  }
  /**
   * Applies the resume token to the TargetChange, but only when it has a new
   * value. Empty resumeTokens are discarded.
   */
  De(e) {
    e.approximateByteSize() > 0 && (this.we = !0, this.pe = e);
  }
  /**
   * Creates a target change from the current set of changes.
   *
   * To reset the document changes after raising this snapshot, call
   * `clearPendingChanges()`.
   */
  Ce() {
    let e = ye(), t = ye(), r = ye();
    return this.ge.forEach((i, s) => {
      switch (s) {
        case 0:
          e = e.add(i);
          break;
        case 2:
          t = t.add(i);
          break;
        case 1:
          r = r.add(i);
          break;
        default:
          ce();
      }
    }), new Ns(this.pe, this.ye, e, t, r);
  }
  /**
   * Resets the document changes and sets `hasPendingChanges` to false.
   */
  ve() {
    this.we = !1, this.ge = Ap();
  }
  Fe(e, t) {
    this.we = !0, this.ge = this.ge.insert(e, t);
  }
  Me(e) {
    this.we = !0, this.ge = this.ge.remove(e);
  }
  xe() {
    this.fe += 1;
  }
  Oe() {
    this.fe -= 1, De(this.fe >= 0);
  }
  Ne() {
    this.we = !0, this.ye = !0;
  }
}
class uk {
  constructor(e) {
    this.Le = e, /** The internal state of all tracked targets. */
    this.Be = /* @__PURE__ */ new Map(), /** Keeps track of the documents to update since the last raised snapshot. */
    this.ke = An(), /** A mapping of document keys to their set of target IDs. */
    this.qe = Sp(), /**
    * A map of targets with existence filter mismatches. These targets are
    * known to be inconsistent and their listens needs to be re-established by
    * RemoteStore.
    */
    this.Qe = new Me(Te);
  }
  /**
   * Processes and adds the DocumentWatchChange to the current set of changes.
   */
  Ke(e) {
    for (const t of e.Re) e.Ve && e.Ve.isFoundDocument() ? this.$e(t, e.Ve) : this.Ue(t, e.key, e.Ve);
    for (const t of e.removedTargetIds) this.Ue(t, e.key, e.Ve);
  }
  /** Processes and adds the WatchTargetChange to the current set of changes. */
  We(e) {
    this.forEachTarget(e, (t) => {
      const r = this.Ge(t);
      switch (e.state) {
        case 0:
          this.ze(t) && r.De(e.resumeToken);
          break;
        case 1:
          r.Oe(), r.Se || // We have a freshly added target, so we need to reset any state
          // that we had previously. This can happen e.g. when remove and add
          // back a target for existence filter mismatches.
          r.ve(), r.De(e.resumeToken);
          break;
        case 2:
          r.Oe(), r.Se || this.removeTarget(t);
          break;
        case 3:
          this.ze(t) && (r.Ne(), r.De(e.resumeToken));
          break;
        case 4:
          this.ze(t) && // Reset the target and synthesizes removes for all existing
          // documents. The backend will re-add any documents that still
          // match the target before it sends the next global snapshot.
          (this.je(t), r.De(e.resumeToken));
          break;
        default:
          ce();
      }
    });
  }
  /**
   * Iterates over all targetIds that the watch change applies to: either the
   * targetIds explicitly listed in the change or the targetIds of all currently
   * active targets.
   */
  forEachTarget(e, t) {
    e.targetIds.length > 0 ? e.targetIds.forEach(t) : this.Be.forEach((r, i) => {
      this.ze(i) && t(i);
    });
  }
  /**
   * Handles existence filters and synthesizes deletes for filter mismatches.
   * Targets that are invalidated by filter mismatches are added to
   * `pendingTargetResets`.
   */
  He(e) {
    const t = e.targetId, r = e.me.count, i = this.Je(t);
    if (i) {
      const s = i.target;
      if (Ou(s)) if (r === 0) {
        const o = new se(s.path);
        this.Ue(t, o, vt.newNoDocument(o, he.min()));
      } else De(r === 1);
      else {
        const o = this.Ye(t);
        if (o !== r) {
          const c = this.Ze(e), u = c ? this.Xe(c, e, o) : 1;
          if (u !== 0) {
            this.je(t);
            const l = u === 2 ? "TargetPurposeExistenceFilterMismatchBloom" : "TargetPurposeExistenceFilterMismatch";
            this.Qe = this.Qe.insert(t, l);
          }
        }
      }
    }
  }
  /**
   * Parse the bloom filter from the "unchanged_names" field of an existence
   * filter.
   */
  Ze(e) {
    const t = e.me.unchangedNames;
    if (!t || !t.bits) return null;
    const { bits: { bitmap: r = "", padding: i = 0 }, hashCount: s = 0 } = t;
    let o, c;
    try {
      o = Ar(r).toUint8Array();
    } catch (u) {
      if (u instanceof Uy) return oi("Decoding the base64 bloom filter in existence filter failed (" + u.message + "); ignoring the bloom filter and falling back to full re-query."), null;
      throw u;
    }
    try {
      c = new jl(o, i, s);
    } catch (u) {
      return oi(u instanceof Wi ? "BloomFilter error: " : "Applying bloom filter failed: ", u), null;
    }
    return c.Ie === 0 ? null : c;
  }
  /**
   * Apply bloom filter to remove the deleted documents, and return the
   * application status.
   */
  Xe(e, t, r) {
    return t.me.count === r - this.nt(e, t.targetId) ? 0 : 2;
  }
  /**
   * Filter out removed documents based on bloom filter membership result and
   * return number of documents removed.
   */
  nt(e, t) {
    const r = this.Le.getRemoteKeysForTarget(t);
    let i = 0;
    return r.forEach((s) => {
      const o = this.Le.tt(), c = `projects/${o.projectId}/databases/${o.database}/documents/${s.path.canonicalString()}`;
      e.mightContain(c) || (this.Ue(
        t,
        s,
        /*updatedDocument=*/
        null
      ), i++);
    }), i;
  }
  /**
   * Converts the currently accumulated state into a remote event at the
   * provided snapshot version. Resets the accumulated changes before returning.
   */
  rt(e) {
    const t = /* @__PURE__ */ new Map();
    this.Be.forEach((s, o) => {
      const c = this.Je(o);
      if (c) {
        if (s.current && Ou(c.target)) {
          const u = new se(c.target.path);
          this.ke.get(u) !== null || this.it(o, u) || this.Ue(o, u, vt.newNoDocument(u, e));
        }
        s.be && (t.set(o, s.Ce()), s.ve());
      }
    });
    let r = ye();
    this.qe.forEach((s, o) => {
      let c = !0;
      o.forEachWhile((u) => {
        const l = this.Je(u);
        return !l || l.purpose === "TargetPurposeLimboResolution" || (c = !1, !1);
      }), c && (r = r.add(s));
    }), this.ke.forEach((s, o) => o.setReadTime(e));
    const i = new xa(e, t, this.Qe, this.ke, r);
    return this.ke = An(), this.qe = Sp(), this.Qe = new Me(Te), i;
  }
  /**
   * Adds the provided document to the internal list of document updates and
   * its document key to the given target's mapping.
   */
  // Visible for testing.
  $e(e, t) {
    if (!this.ze(e)) return;
    const r = this.it(e, t.key) ? 2 : 0;
    this.Ge(e).Fe(t.key, r), this.ke = this.ke.insert(t.key, t), this.qe = this.qe.insert(t.key, this.st(t.key).add(e));
  }
  /**
   * Removes the provided document from the target mapping. If the
   * document no longer matches the target, but the document's state is still
   * known (e.g. we know that the document was deleted or we received the change
   * that caused the filter mismatch), the new document can be provided
   * to update the remote document cache.
   */
  // Visible for testing.
  Ue(e, t, r) {
    if (!this.ze(e)) return;
    const i = this.Ge(e);
    this.it(e, t) ? i.Fe(
      t,
      1
      /* ChangeType.Removed */
    ) : (
      // The document may have entered and left the target before we raised a
      // snapshot, so we can just ignore the change.
      i.Me(t)
    ), this.qe = this.qe.insert(t, this.st(t).delete(e)), r && (this.ke = this.ke.insert(t, r));
  }
  removeTarget(e) {
    this.Be.delete(e);
  }
  /**
   * Returns the current count of documents in the target. This includes both
   * the number of documents that the LocalStore considers to be part of the
   * target as well as any accumulated changes.
   */
  Ye(e) {
    const t = this.Ge(e).Ce();
    return this.Le.getRemoteKeysForTarget(e).size + t.addedDocuments.size - t.removedDocuments.size;
  }
  /**
   * Increment the number of acks needed from watch before we can consider the
   * server to be 'in-sync' with the client's active targets.
   */
  xe(e) {
    this.Ge(e).xe();
  }
  Ge(e) {
    let t = this.Be.get(e);
    return t || (t = new Ip(), this.Be.set(e, t)), t;
  }
  st(e) {
    let t = this.qe.get(e);
    return t || (t = new ut(Te), this.qe = this.qe.insert(e, t)), t;
  }
  /**
   * Verifies that the user is still interested in this target (by calling
   * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs
   * from watch.
   */
  ze(e) {
    const t = this.Je(e) !== null;
    return t || ee("WatchChangeAggregator", "Detected inactive target", e), t;
  }
  /**
   * Returns the TargetData for an active target (i.e. a target that the user
   * is still interested in that has no outstanding target change requests).
   */
  Je(e) {
    const t = this.Be.get(e);
    return t && t.Se ? null : this.Le.ot(e);
  }
  /**
   * Resets the state of a Watch target to its initial state (e.g. sets
   * 'current' to false, clears the resume token and removes its target mapping
   * from all documents).
   */
  je(e) {
    this.Be.set(e, new Ip()), this.Le.getRemoteKeysForTarget(e).forEach((t) => {
      this.Ue(
        e,
        t,
        /*updatedDocument=*/
        null
      );
    });
  }
  /**
   * Returns whether the LocalStore considers the document to be part of the
   * specified target.
   */
  it(e, t) {
    return this.Le.getRemoteKeysForTarget(e).has(t);
  }
}
function Sp() {
  return new Me(se.comparator);
}
function Ap() {
  return new Me(se.comparator);
}
const lk = {
  asc: "ASCENDING",
  desc: "DESCENDING"
}, hk = {
  "<": "LESS_THAN",
  "<=": "LESS_THAN_OR_EQUAL",
  ">": "GREATER_THAN",
  ">=": "GREATER_THAN_OR_EQUAL",
  "==": "EQUAL",
  "!=": "NOT_EQUAL",
  "array-contains": "ARRAY_CONTAINS",
  in: "IN",
  "not-in": "NOT_IN",
  "array-contains-any": "ARRAY_CONTAINS_ANY"
}, fk = {
  and: "AND",
  or: "OR"
};
class dk {
  constructor(e, t) {
    this.databaseId = e, this.useProto3Json = t;
  }
}
function xu(n, e) {
  return n.useProto3Json || Ca(e) ? e : {
    value: e
  };
}
function ta(n, e) {
  return n.useProto3Json ? `${new Date(1e3 * e.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "")}.${("000000000" + e.nanoseconds).slice(-9)}Z` : {
    seconds: "" + e.seconds,
    nanos: e.nanoseconds
  };
}
function h_(n, e) {
  return n.useProto3Json ? e.toBase64() : e.toUint8Array();
}
function pk(n, e) {
  return ta(n, e.toTimestamp());
}
function on(n) {
  return De(!!n), he.fromTimestamp(function(t) {
    const r = Wn(t);
    return new Xe(r.seconds, r.nanos);
  }(n));
}
function $l(n, e) {
  return Lu(n, e).canonicalString();
}
function Lu(n, e) {
  const t = function(i) {
    return new xe(["projects", i.projectId, "databases", i.database]);
  }(n).child("documents");
  return e === void 0 ? t : t.child(e);
}
function f_(n) {
  const e = xe.fromString(n);
  return De(y_(e)), e;
}
function Mu(n, e) {
  return $l(n.databaseId, e.path);
}
function Nc(n, e) {
  const t = f_(e);
  if (t.get(1) !== n.databaseId.projectId) throw new X(B.INVALID_ARGUMENT, "Tried to deserialize key from different project: " + t.get(1) + " vs " + n.databaseId.projectId);
  if (t.get(3) !== n.databaseId.database) throw new X(B.INVALID_ARGUMENT, "Tried to deserialize key from different database: " + t.get(3) + " vs " + n.databaseId.database);
  return new se(p_(t));
}
function d_(n, e) {
  return $l(n.databaseId, e);
}
function mk(n) {
  const e = f_(n);
  return e.length === 4 ? xe.emptyPath() : p_(e);
}
function Vu(n) {
  return new xe(["projects", n.databaseId.projectId, "databases", n.databaseId.database]).canonicalString();
}
function p_(n) {
  return De(n.length > 4 && n.get(4) === "documents"), n.popFirst(5);
}
function Rp(n, e, t) {
  return {
    name: Mu(n, e),
    fields: t.value.mapValue.fields
  };
}
function gk(n, e) {
  let t;
  if ("targetChange" in e) {
    e.targetChange;
    const r = function(l) {
      return l === "NO_CHANGE" ? 0 : l === "ADD" ? 1 : l === "REMOVE" ? 2 : l === "CURRENT" ? 3 : l === "RESET" ? 4 : ce();
    }(e.targetChange.targetChangeType || "NO_CHANGE"), i = e.targetChange.targetIds || [], s = function(l, f) {
      return l.useProto3Json ? (De(f === void 0 || typeof f == "string"), ht.fromBase64String(f || "")) : (De(f === void 0 || // Check if the value is an instance of both Buffer and Uint8Array,
      // despite the fact that Buffer extends Uint8Array. In some
      // environments, such as jsdom, the prototype chain of Buffer
      // does not indicate that it extends Uint8Array.
      f instanceof Buffer || f instanceof Uint8Array), ht.fromUint8Array(f || new Uint8Array()));
    }(n, e.targetChange.resumeToken), o = e.targetChange.cause, c = o && function(l) {
      const f = l.code === void 0 ? B.UNKNOWN : c_(l.code);
      return new X(f, l.message || "");
    }(o);
    t = new l_(r, i, s, c || null);
  } else if ("documentChange" in e) {
    e.documentChange;
    const r = e.documentChange;
    r.document, r.document.name, r.document.updateTime;
    const i = Nc(n, r.document.name), s = on(r.document.updateTime), o = r.document.createTime ? on(r.document.createTime) : he.min(), c = new Vt({
      mapValue: {
        fields: r.document.fields
      }
    }), u = vt.newFoundDocument(i, s, o, c), l = r.targetIds || [], f = r.removedTargetIds || [];
    t = new ko(l, f, u.key, u);
  } else if ("documentDelete" in e) {
    e.documentDelete;
    const r = e.documentDelete;
    r.document;
    const i = Nc(n, r.document), s = r.readTime ? on(r.readTime) : he.min(), o = vt.newNoDocument(i, s), c = r.removedTargetIds || [];
    t = new ko([], c, o.key, o);
  } else if ("documentRemove" in e) {
    e.documentRemove;
    const r = e.documentRemove;
    r.document;
    const i = Nc(n, r.document), s = r.removedTargetIds || [];
    t = new ko([], s, i, null);
  } else {
    if (!("filter" in e)) return ce();
    {
      e.filter;
      const r = e.filter;
      r.targetId;
      const { count: i = 0, unchangedNames: s } = r, o = new sk(i, s), c = r.targetId;
      t = new u_(c, o);
    }
  }
  return t;
}
function yk(n, e) {
  let t;
  if (e instanceof Ds) t = {
    update: Rp(n, e.key, e.value)
  };
  else if (e instanceof a_) t = {
    delete: Mu(n, e.key)
  };
  else if (e instanceof Nr) t = {
    update: Rp(n, e.key, e.data),
    updateMask: Ak(e.fieldMask)
  };
  else {
    if (!(e instanceof nk)) return ce();
    t = {
      verify: Mu(n, e.key)
    };
  }
  return e.fieldTransforms.length > 0 && (t.updateTransforms = e.fieldTransforms.map((r) => function(s, o) {
    const c = o.transform;
    if (c instanceof Zo) return {
      fieldPath: o.field.canonicalString(),
      setToServerValue: "REQUEST_TIME"
    };
    if (c instanceof ms) return {
      fieldPath: o.field.canonicalString(),
      appendMissingElements: {
        values: c.elements
      }
    };
    if (c instanceof gs) return {
      fieldPath: o.field.canonicalString(),
      removeAllFromArray: {
        values: c.elements
      }
    };
    if (c instanceof ea) return {
      fieldPath: o.field.canonicalString(),
      increment: c.Pe
    };
    throw ce();
  }(0, r))), e.precondition.isNone || (t.currentDocument = function(i, s) {
    return s.updateTime !== void 0 ? {
      updateTime: pk(i, s.updateTime)
    } : s.exists !== void 0 ? {
      exists: s.exists
    } : ce();
  }(n, e.precondition)), t;
}
function _k(n, e) {
  return n && n.length > 0 ? (De(e !== void 0), n.map((t) => function(i, s) {
    let o = i.updateTime ? on(i.updateTime) : on(s);
    return o.isEqual(he.min()) && // The Firestore Emulator currently returns an update time of 0 for
    // deletes of non-existing documents (rather than null). This breaks the
    // test "get deleted doc while offline with source=cache" as NoDocuments
    // with version 0 are filtered by IndexedDb's RemoteDocumentCache.
    // TODO(#2149): Remove this when Emulator is fixed
    (o = on(s)), new ZP(o, i.transformResults || []);
  }(t, e))) : [];
}
function vk(n, e) {
  return {
    documents: [d_(n, e.path)]
  };
}
function wk(n, e) {
  const t = {
    structuredQuery: {}
  }, r = e.path;
  let i;
  e.collectionGroup !== null ? (i = r, t.structuredQuery.from = [{
    collectionId: e.collectionGroup,
    allDescendants: !0
  }]) : (i = r.popLast(), t.structuredQuery.from = [{
    collectionId: r.lastSegment()
  }]), t.parent = d_(n, i);
  const s = function(l) {
    if (l.length !== 0)
      return g_(Jt.create(
        l,
        "and"
        /* CompositeOperator.AND */
      ));
  }(e.filters);
  s && (t.structuredQuery.where = s);
  const o = function(l) {
    if (l.length !== 0)
      return l.map((f) => (
        // visible for testing
        function(y) {
          return {
            field: qr(y.field),
            direction: bk(y.dir)
          };
        }(f)
      ));
  }(e.orderBy);
  o && (t.structuredQuery.orderBy = o);
  const c = xu(n, e.limit);
  return c !== null && (t.structuredQuery.limit = c), e.startAt && (t.structuredQuery.startAt = function(l) {
    return {
      before: l.inclusive,
      values: l.position
    };
  }(e.startAt)), e.endAt && (t.structuredQuery.endAt = function(l) {
    return {
      before: !l.inclusive,
      values: l.position
    };
  }(e.endAt)), {
    _t: t,
    parent: i
  };
}
function Ek(n) {
  let e = mk(n.parent);
  const t = n.structuredQuery, r = t.from ? t.from.length : 0;
  let i = null;
  if (r > 0) {
    De(r === 1);
    const f = t.from[0];
    f.allDescendants ? i = f.collectionId : e = e.child(f.collectionId);
  }
  let s = [];
  t.where && (s = function(h) {
    const y = m_(h);
    return y instanceof Jt && qy(y) ? y.getFilters() : [y];
  }(t.where));
  let o = [];
  t.orderBy && (o = function(h) {
    return h.map((y) => function(S) {
      return new Xo(
        Kr(S.field),
        // visible for testing
        function(w) {
          switch (w) {
            case "ASCENDING":
              return "asc";
            case "DESCENDING":
              return "desc";
            default:
              return;
          }
        }(S.direction)
      );
    }(y));
  }(t.orderBy));
  let c = null;
  t.limit && (c = function(h) {
    let y;
    return y = typeof h == "object" ? h.value : h, Ca(y) ? null : y;
  }(t.limit));
  let u = null;
  t.startAt && (u = function(h) {
    const y = !!h.before, T = h.values || [];
    return new Jo(T, y);
  }(t.startAt));
  let l = null;
  return t.endAt && (l = function(h) {
    const y = !h.before, T = h.values || [];
    return new Jo(T, y);
  }(t.endAt)), jP(e, i, o, s, c, "F", u, l);
}
function Tk(n, e) {
  const t = function(i) {
    switch (i) {
      case "TargetPurposeListen":
        return null;
      case "TargetPurposeExistenceFilterMismatch":
        return "existence-filter-mismatch";
      case "TargetPurposeExistenceFilterMismatchBloom":
        return "existence-filter-mismatch-bloom";
      case "TargetPurposeLimboResolution":
        return "limbo-document";
      default:
        return ce();
    }
  }(e.purpose);
  return t == null ? null : {
    "goog-listen-tags": t
  };
}
function m_(n) {
  return n.unaryFilter !== void 0 ? function(t) {
    switch (t.unaryFilter.op) {
      case "IS_NAN":
        const r = Kr(t.unaryFilter.field);
        return We.create(r, "==", {
          doubleValue: NaN
        });
      case "IS_NULL":
        const i = Kr(t.unaryFilter.field);
        return We.create(i, "==", {
          nullValue: "NULL_VALUE"
        });
      case "IS_NOT_NAN":
        const s = Kr(t.unaryFilter.field);
        return We.create(s, "!=", {
          doubleValue: NaN
        });
      case "IS_NOT_NULL":
        const o = Kr(t.unaryFilter.field);
        return We.create(o, "!=", {
          nullValue: "NULL_VALUE"
        });
      default:
        return ce();
    }
  }(n) : n.fieldFilter !== void 0 ? function(t) {
    return We.create(Kr(t.fieldFilter.field), function(i) {
      switch (i) {
        case "EQUAL":
          return "==";
        case "NOT_EQUAL":
          return "!=";
        case "GREATER_THAN":
          return ">";
        case "GREATER_THAN_OR_EQUAL":
          return ">=";
        case "LESS_THAN":
          return "<";
        case "LESS_THAN_OR_EQUAL":
          return "<=";
        case "ARRAY_CONTAINS":
          return "array-contains";
        case "IN":
          return "in";
        case "NOT_IN":
          return "not-in";
        case "ARRAY_CONTAINS_ANY":
          return "array-contains-any";
        default:
          return ce();
      }
    }(t.fieldFilter.op), t.fieldFilter.value);
  }(n) : n.compositeFilter !== void 0 ? function(t) {
    return Jt.create(t.compositeFilter.filters.map((r) => m_(r)), function(i) {
      switch (i) {
        case "AND":
          return "and";
        case "OR":
          return "or";
        default:
          return ce();
      }
    }(t.compositeFilter.op));
  }(n) : ce();
}
function bk(n) {
  return lk[n];
}
function Ik(n) {
  return hk[n];
}
function Sk(n) {
  return fk[n];
}
function qr(n) {
  return {
    fieldPath: n.canonicalString()
  };
}
function Kr(n) {
  return ct.fromServerFormat(n.fieldPath);
}
function g_(n) {
  return n instanceof We ? function(t) {
    if (t.op === "==") {
      if (dp(t.value)) return {
        unaryFilter: {
          field: qr(t.field),
          op: "IS_NAN"
        }
      };
      if (fp(t.value)) return {
        unaryFilter: {
          field: qr(t.field),
          op: "IS_NULL"
        }
      };
    } else if (t.op === "!=") {
      if (dp(t.value)) return {
        unaryFilter: {
          field: qr(t.field),
          op: "IS_NOT_NAN"
        }
      };
      if (fp(t.value)) return {
        unaryFilter: {
          field: qr(t.field),
          op: "IS_NOT_NULL"
        }
      };
    }
    return {
      fieldFilter: {
        field: qr(t.field),
        op: Ik(t.op),
        value: t.value
      }
    };
  }(n) : n instanceof Jt ? function(t) {
    const r = t.getFilters().map((i) => g_(i));
    return r.length === 1 ? r[0] : {
      compositeFilter: {
        op: Sk(t.op),
        filters: r
      }
    };
  }(n) : ce();
}
function Ak(n) {
  const e = [];
  return n.fields.forEach((t) => e.push(t.canonicalString())), {
    fieldPaths: e
  };
}
function y_(n) {
  return n.length >= 4 && n.get(0) === "projects" && n.get(2) === "databases";
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Un {
  constructor(e, t, r, i, s = he.min(), o = he.min(), c = ht.EMPTY_BYTE_STRING, u = null) {
    this.target = e, this.targetId = t, this.purpose = r, this.sequenceNumber = i, this.snapshotVersion = s, this.lastLimboFreeSnapshotVersion = o, this.resumeToken = c, this.expectedCount = u;
  }
  /** Creates a new target data instance with an updated sequence number. */
  withSequenceNumber(e) {
    return new Un(this.target, this.targetId, this.purpose, e, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken, this.expectedCount);
  }
  /**
   * Creates a new target data instance with an updated resume token and
   * snapshot version.
   */
  withResumeToken(e, t) {
    return new Un(
      this.target,
      this.targetId,
      this.purpose,
      this.sequenceNumber,
      t,
      this.lastLimboFreeSnapshotVersion,
      e,
      /* expectedCount= */
      null
    );
  }
  /**
   * Creates a new target data instance with an updated expected count.
   */
  withExpectedCount(e) {
    return new Un(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken, e);
  }
  /**
   * Creates a new target data instance with an updated last limbo free
   * snapshot version number.
   */
  withLastLimboFreeSnapshotVersion(e) {
    return new Un(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, e, this.resumeToken, this.expectedCount);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Rk {
  constructor(e) {
    this.ct = e;
  }
}
function Ck(n) {
  const e = Ek({
    parent: n.parent,
    structuredQuery: n.structuredQuery
  });
  return n.limitType === "LAST" ? Nu(
    e,
    e.limit,
    "L"
    /* LimitType.Last */
  ) : e;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Pk {
  constructor() {
    this.an = new kk();
  }
  addToCollectionParentIndex(e, t) {
    return this.an.add(t), K.resolve();
  }
  getCollectionParents(e, t) {
    return K.resolve(this.an.getEntries(t));
  }
  addFieldIndex(e, t) {
    return K.resolve();
  }
  deleteFieldIndex(e, t) {
    return K.resolve();
  }
  deleteAllFieldIndexes(e) {
    return K.resolve();
  }
  createTargetIndexes(e, t) {
    return K.resolve();
  }
  getDocumentsMatchingTarget(e, t) {
    return K.resolve(null);
  }
  getIndexType(e, t) {
    return K.resolve(
      0
      /* IndexType.NONE */
    );
  }
  getFieldIndexes(e, t) {
    return K.resolve([]);
  }
  getNextCollectionGroupToUpdate(e) {
    return K.resolve(null);
  }
  getMinOffset(e, t) {
    return K.resolve(Gn.min());
  }
  getMinOffsetFromCollectionGroup(e, t) {
    return K.resolve(Gn.min());
  }
  updateCollectionGroup(e, t, r) {
    return K.resolve();
  }
  updateIndexEntries(e, t) {
    return K.resolve();
  }
}
class kk {
  constructor() {
    this.index = {};
  }
  // Returns false if the entry already existed.
  add(e) {
    const t = e.lastSegment(), r = e.popLast(), i = this.index[t] || new ut(xe.comparator), s = !i.has(r);
    return this.index[t] = i.add(r), s;
  }
  has(e) {
    const t = e.lastSegment(), r = e.popLast(), i = this.index[t];
    return i && i.has(r);
  }
  getEntries(e) {
    return (this.index[e] || new ut(xe.comparator)).toArray();
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class li {
  constructor(e) {
    this.Nn = e;
  }
  next() {
    return this.Nn += 2, this.Nn;
  }
  static Ln() {
    return new li(0);
  }
  static Bn() {
    return new li(-1);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Ok {
  constructor() {
    this.changes = new wi((e) => e.toString(), (e, t) => e.isEqual(t)), this.changesApplied = !1;
  }
  /**
   * Buffers a `RemoteDocumentCache.addEntry()` call.
   *
   * You can only modify documents that have already been retrieved via
   * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
   */
  addEntry(e) {
    this.assertNotApplied(), this.changes.set(e.key, e);
  }
  /**
   * Buffers a `RemoteDocumentCache.removeEntry()` call.
   *
   * You can only remove documents that have already been retrieved via
   * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
   */
  removeEntry(e, t) {
    this.assertNotApplied(), this.changes.set(e, vt.newInvalidDocument(e).setReadTime(t));
  }
  /**
   * Looks up an entry in the cache. The buffered changes will first be checked,
   * and if no buffered change applies, this will forward to
   * `RemoteDocumentCache.getEntry()`.
   *
   * @param transaction - The transaction in which to perform any persistence
   *     operations.
   * @param documentKey - The key of the entry to look up.
   * @returns The cached document or an invalid document if we have nothing
   * cached.
   */
  getEntry(e, t) {
    this.assertNotApplied();
    const r = this.changes.get(t);
    return r !== void 0 ? K.resolve(r) : this.getFromCache(e, t);
  }
  /**
   * Looks up several entries in the cache, forwarding to
   * `RemoteDocumentCache.getEntry()`.
   *
   * @param transaction - The transaction in which to perform any persistence
   *     operations.
   * @param documentKeys - The keys of the entries to look up.
   * @returns A map of cached documents, indexed by key. If an entry cannot be
   *     found, the corresponding key will be mapped to an invalid document.
   */
  getEntries(e, t) {
    return this.getAllFromCache(e, t);
  }
  /**
   * Applies buffered changes to the underlying RemoteDocumentCache, using
   * the provided transaction.
   */
  apply(e) {
    return this.assertNotApplied(), this.changesApplied = !0, this.applyChanges(e);
  }
  /** Helper to assert this.changes is not null  */
  assertNotApplied() {
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Dk {
  constructor(e, t) {
    this.overlayedDocument = e, this.mutatedFields = t;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Nk {
  constructor(e, t, r, i) {
    this.remoteDocumentCache = e, this.mutationQueue = t, this.documentOverlayCache = r, this.indexManager = i;
  }
  /**
   * Get the local view of the document identified by `key`.
   *
   * @returns Local view of the document or null if we don't have any cached
   * state for it.
   */
  getDocument(e, t) {
    let r = null;
    return this.documentOverlayCache.getOverlay(e, t).next((i) => (r = i, this.remoteDocumentCache.getEntry(e, t))).next((i) => (r !== null && ts(r.mutation, i, Qt.empty(), Xe.now()), i));
  }
  /**
   * Gets the local view of the documents identified by `keys`.
   *
   * If we don't have cached state for a document in `keys`, a NoDocument will
   * be stored for that key in the resulting set.
   */
  getDocuments(e, t) {
    return this.remoteDocumentCache.getEntries(e, t).next((r) => this.getLocalViewOfDocuments(e, r, ye()).next(() => r));
  }
  /**
   * Similar to `getDocuments`, but creates the local view from the given
   * `baseDocs` without retrieving documents from the local store.
   *
   * @param transaction - The transaction this operation is scoped to.
   * @param docs - The documents to apply local mutations to get the local views.
   * @param existenceStateChanged - The set of document keys whose existence state
   *   is changed. This is useful to determine if some documents overlay needs
   *   to be recalculated.
   */
  getLocalViewOfDocuments(e, t, r = ye()) {
    const i = hr();
    return this.populateOverlays(e, i, t).next(() => this.computeViews(e, t, i, r).next((s) => {
      let o = Gi();
      return s.forEach((c, u) => {
        o = o.insert(c, u.overlayedDocument);
      }), o;
    }));
  }
  /**
   * Gets the overlayed documents for the given document map, which will include
   * the local view of those documents and a `FieldMask` indicating which fields
   * are mutated locally, `null` if overlay is a Set or Delete mutation.
   */
  getOverlayedDocuments(e, t) {
    const r = hr();
    return this.populateOverlays(e, r, t).next(() => this.computeViews(e, t, r, ye()));
  }
  /**
   * Fetches the overlays for {@code docs} and adds them to provided overlay map
   * if the map does not already contain an entry for the given document key.
   */
  populateOverlays(e, t, r) {
    const i = [];
    return r.forEach((s) => {
      t.has(s) || i.push(s);
    }), this.documentOverlayCache.getOverlays(e, i).next((s) => {
      s.forEach((o, c) => {
        t.set(o, c);
      });
    });
  }
  /**
   * Computes the local view for the given documents.
   *
   * @param docs - The documents to compute views for. It also has the base
   *   version of the documents.
   * @param overlays - The overlays that need to be applied to the given base
   *   version of the documents.
   * @param existenceStateChanged - A set of documents whose existence states
   *   might have changed. This is used to determine if we need to re-calculate
   *   overlays from mutation queues.
   * @return A map represents the local documents view.
   */
  computeViews(e, t, r, i) {
    let s = An();
    const o = es(), c = function() {
      return es();
    }();
    return t.forEach((u, l) => {
      const f = r.get(l.key);
      i.has(l.key) && (f === void 0 || f.mutation instanceof Nr) ? s = s.insert(l.key, l) : f !== void 0 ? (o.set(l.key, f.mutation.getFieldMask()), ts(f.mutation, l, f.mutation.getFieldMask(), Xe.now())) : (
        // no overlay exists
        // Using EMPTY to indicate there is no overlay for the document.
        o.set(l.key, Qt.empty())
      );
    }), this.recalculateAndSaveOverlays(e, s).next((u) => (u.forEach((l, f) => o.set(l, f)), t.forEach((l, f) => {
      var h;
      return c.set(l, new Dk(f, (h = o.get(l)) !== null && h !== void 0 ? h : null));
    }), c));
  }
  recalculateAndSaveOverlays(e, t) {
    const r = es();
    let i = new Me((o, c) => o - c), s = ye();
    return this.mutationQueue.getAllMutationBatchesAffectingDocumentKeys(e, t).next((o) => {
      for (const c of o) c.keys().forEach((u) => {
        const l = t.get(u);
        if (l === null) return;
        let f = r.get(u) || Qt.empty();
        f = c.applyToLocalView(l, f), r.set(u, f);
        const h = (i.get(c.batchId) || ye()).add(u);
        i = i.insert(c.batchId, h);
      });
    }).next(() => {
      const o = [], c = i.getReverseIterator();
      for (; c.hasNext(); ) {
        const u = c.getNext(), l = u.key, f = u.value, h = Xy();
        f.forEach((y) => {
          if (!s.has(y)) {
            const T = s_(t.get(y), r.get(y));
            T !== null && h.set(y, T), s = s.add(y);
          }
        }), o.push(this.documentOverlayCache.saveOverlays(e, l, h));
      }
      return K.waitFor(o);
    }).next(() => r);
  }
  /**
   * Recalculates overlays by reading the documents from remote document cache
   * first, and saves them after they are calculated.
   */
  recalculateAndSaveOverlaysForDocumentKeys(e, t) {
    return this.remoteDocumentCache.getEntries(e, t).next((r) => this.recalculateAndSaveOverlays(e, r));
  }
  /**
   * Performs a query against the local view of all documents.
   *
   * @param transaction - The persistence transaction.
   * @param query - The query to match documents against.
   * @param offset - Read time and key to start scanning by (exclusive).
   * @param context - A optional tracker to keep a record of important details
   *   during database local query execution.
   */
  getDocumentsMatchingQuery(e, t, r, i) {
    return function(o) {
      return se.isDocumentKey(o.path) && o.collectionGroup === null && o.filters.length === 0;
    }(t) ? this.getDocumentsMatchingDocumentQuery(e, t.path) : Gy(t) ? this.getDocumentsMatchingCollectionGroupQuery(e, t, r, i) : this.getDocumentsMatchingCollectionQuery(e, t, r, i);
  }
  /**
   * Given a collection group, returns the next documents that follow the provided offset, along
   * with an updated batch ID.
   *
   * <p>The documents returned by this method are ordered by remote version from the provided
   * offset. If there are no more remote documents after the provided offset, documents with
   * mutations in order of batch id from the offset are returned. Since all documents in a batch are
   * returned together, the total number of documents returned can exceed {@code count}.
   *
   * @param transaction
   * @param collectionGroup The collection group for the documents.
   * @param offset The offset to index into.
   * @param count The number of documents to return
   * @return A LocalWriteResult with the documents that follow the provided offset and the last processed batch id.
   */
  getNextDocuments(e, t, r, i) {
    return this.remoteDocumentCache.getAllFromCollectionGroup(e, t, r, i).next((s) => {
      const o = i - s.size > 0 ? this.documentOverlayCache.getOverlaysForCollectionGroup(e, t, r.largestBatchId, i - s.size) : K.resolve(hr());
      let c = -1, u = s;
      return o.next((l) => K.forEach(l, (f, h) => (c < h.largestBatchId && (c = h.largestBatchId), s.get(f) ? K.resolve() : this.remoteDocumentCache.getEntry(e, f).next((y) => {
        u = u.insert(f, y);
      }))).next(() => this.populateOverlays(e, l, s)).next(() => this.computeViews(e, u, l, ye())).next((f) => ({
        batchId: c,
        changes: Jy(f)
      })));
    });
  }
  getDocumentsMatchingDocumentQuery(e, t) {
    return this.getDocument(e, new se(t)).next((r) => {
      let i = Gi();
      return r.isFoundDocument() && (i = i.insert(r.key, r)), i;
    });
  }
  getDocumentsMatchingCollectionGroupQuery(e, t, r, i) {
    const s = t.collectionGroup;
    let o = Gi();
    return this.indexManager.getCollectionParents(e, s).next((c) => K.forEach(c, (u) => {
      const l = function(h, y) {
        return new Os(
          y,
          /*collectionGroup=*/
          null,
          h.explicitOrderBy.slice(),
          h.filters.slice(),
          h.limit,
          h.limitType,
          h.startAt,
          h.endAt
        );
      }(t, u.child(s));
      return this.getDocumentsMatchingCollectionQuery(e, l, r, i).next((f) => {
        f.forEach((h, y) => {
          o = o.insert(h, y);
        });
      });
    }).next(() => o));
  }
  getDocumentsMatchingCollectionQuery(e, t, r, i) {
    let s;
    return this.documentOverlayCache.getOverlaysForCollection(e, t.path, r.largestBatchId).next((o) => (s = o, this.remoteDocumentCache.getDocumentsMatchingQuery(e, t, r, s, i))).next((o) => {
      s.forEach((u, l) => {
        const f = l.getKey();
        o.get(f) === null && (o = o.insert(f, vt.newInvalidDocument(f)));
      });
      let c = Gi();
      return o.forEach((u, l) => {
        const f = s.get(u);
        f !== void 0 && ts(f.mutation, l, Qt.empty(), Xe.now()), // Finally, insert the documents that still match the query
        Oa(t, l) && (c = c.insert(u, l));
      }), c;
    });
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class xk {
  constructor(e) {
    this.serializer = e, this.lr = /* @__PURE__ */ new Map(), this.hr = /* @__PURE__ */ new Map();
  }
  getBundleMetadata(e, t) {
    return K.resolve(this.lr.get(t));
  }
  saveBundleMetadata(e, t) {
    return this.lr.set(
      t.id,
      /** Decodes a BundleMetadata proto into a BundleMetadata object. */
      function(i) {
        return {
          id: i.id,
          version: i.version,
          createTime: on(i.createTime)
        };
      }(t)
    ), K.resolve();
  }
  getNamedQuery(e, t) {
    return K.resolve(this.hr.get(t));
  }
  saveNamedQuery(e, t) {
    return this.hr.set(t.name, function(i) {
      return {
        name: i.name,
        query: Ck(i.bundledQuery),
        readTime: on(i.readTime)
      };
    }(t)), K.resolve();
  }
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Lk {
  constructor() {
    this.overlays = new Me(se.comparator), this.Pr = /* @__PURE__ */ new Map();
  }
  getOverlay(e, t) {
    return K.resolve(this.overlays.get(t));
  }
  getOverlays(e, t) {
    const r = hr();
    return K.forEach(t, (i) => this.getOverlay(e, i).next((s) => {
      s !== null && r.set(i, s);
    })).next(() => r);
  }
  saveOverlays(e, t, r) {
    return r.forEach((i, s) => {
      this.ht(e, t, s);
    }), K.resolve();
  }
  removeOverlaysForBatchId(e, t, r) {
    const i = this.Pr.get(r);
    return i !== void 0 && (i.forEach((s) => this.overlays = this.overlays.remove(s)), this.Pr.delete(r)), K.resolve();
  }
  getOverlaysForCollection(e, t, r) {
    const i = hr(), s = t.length + 1, o = new se(t.child("")), c = this.overlays.getIteratorFrom(o);
    for (; c.hasNext(); ) {
      const u = c.getNext().value, l = u.getKey();
      if (!t.isPrefixOf(l.path)) break;
      l.path.length === s && u.largestBatchId > r && i.set(u.getKey(), u);
    }
    return K.resolve(i);
  }
  getOverlaysForCollectionGroup(e, t, r, i) {
    let s = new Me((l, f) => l - f);
    const o = this.overlays.getIterator();
    for (; o.hasNext(); ) {
      const l = o.getNext().value;
      if (l.getKey().getCollectionGroup() === t && l.largestBatchId > r) {
        let f = s.get(l.largestBatchId);
        f === null && (f = hr(), s = s.insert(l.largestBatchId, f)), f.set(l.getKey(), l);
      }
    }
    const c = hr(), u = s.getIterator();
    for (; u.hasNext() && (u.getNext().value.forEach((l, f) => c.set(l, f)), !(c.size() >= i)); )
      ;
    return K.resolve(c);
  }
  ht(e, t, r) {
    const i = this.overlays.get(r.key);
    if (i !== null) {
      const o = this.Pr.get(i.largestBatchId).delete(r.key);
      this.Pr.set(i.largestBatchId, o);
    }
    this.overlays = this.overlays.insert(r.key, new ik(t, r));
    let s = this.Pr.get(t);
    s === void 0 && (s = ye(), this.Pr.set(t, s)), this.Pr.set(t, s.add(r.key));
  }
}
/**
 * @license
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Mk {
  constructor() {
    this.sessionToken = ht.EMPTY_BYTE_STRING;
  }
  getSessionToken(e) {
    return K.resolve(this.sessionToken);
  }
  setSessionToken(e, t) {
    return this.sessionToken = t, K.resolve();
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Bl {
  constructor() {
    this.Ir = new ut(et.Tr), // A set of outstanding references to a document sorted by target id.
    this.Er = new ut(et.dr);
  }
  /** Returns true if the reference set contains no references. */
  isEmpty() {
    return this.Ir.isEmpty();
  }
  /** Adds a reference to the given document key for the given ID. */
  addReference(e, t) {
    const r = new et(e, t);
    this.Ir = this.Ir.add(r), this.Er = this.Er.add(r);
  }
  /** Add references to the given document keys for the given ID. */
  Ar(e, t) {
    e.forEach((r) => this.addReference(r, t));
  }
  /**
   * Removes a reference to the given document key for the given
   * ID.
   */
  removeReference(e, t) {
    this.Rr(new et(e, t));
  }
  Vr(e, t) {
    e.forEach((r) => this.removeReference(r, t));
  }
  /**
   * Clears all references with a given ID. Calls removeRef() for each key
   * removed.
   */
  mr(e) {
    const t = new se(new xe([])), r = new et(t, e), i = new et(t, e + 1), s = [];
    return this.Er.forEachInRange([r, i], (o) => {
      this.Rr(o), s.push(o.key);
    }), s;
  }
  gr() {
    this.Ir.forEach((e) => this.Rr(e));
  }
  Rr(e) {
    this.Ir = this.Ir.delete(e), this.Er = this.Er.delete(e);
  }
  pr(e) {
    const t = new se(new xe([])), r = new et(t, e), i = new et(t, e + 1);
    let s = ye();
    return this.Er.forEachInRange([r, i], (o) => {
      s = s.add(o.key);
    }), s;
  }
  containsKey(e) {
    const t = new et(e, 0), r = this.Ir.firstAfterOrEqual(t);
    return r !== null && e.isEqual(r.key);
  }
}
class et {
  constructor(e, t) {
    this.key = e, this.yr = t;
  }
  /** Compare by key then by ID */
  static Tr(e, t) {
    return se.comparator(e.key, t.key) || Te(e.yr, t.yr);
  }
  /** Compare by ID then by key */
  static dr(e, t) {
    return Te(e.yr, t.yr) || se.comparator(e.key, t.key);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Vk {
  constructor(e, t) {
    this.indexManager = e, this.referenceDelegate = t, /**
    * The set of all mutations that have been sent but not yet been applied to
    * the backend.
    */
    this.mutationQueue = [], /** Next value to use when assigning sequential IDs to each mutation batch. */
    this.wr = 1, /** An ordered mapping between documents and the mutations batch IDs. */
    this.Sr = new ut(et.Tr);
  }
  checkEmpty(e) {
    return K.resolve(this.mutationQueue.length === 0);
  }
  addMutationBatch(e, t, r, i) {
    const s = this.wr;
    this.wr++, this.mutationQueue.length > 0 && this.mutationQueue[this.mutationQueue.length - 1];
    const o = new rk(s, t, r, i);
    this.mutationQueue.push(o);
    for (const c of i) this.Sr = this.Sr.add(new et(c.key, s)), this.indexManager.addToCollectionParentIndex(e, c.key.path.popLast());
    return K.resolve(o);
  }
  lookupMutationBatch(e, t) {
    return K.resolve(this.br(t));
  }
  getNextMutationBatchAfterBatchId(e, t) {
    const r = t + 1, i = this.Dr(r), s = i < 0 ? 0 : i;
    return K.resolve(this.mutationQueue.length > s ? this.mutationQueue[s] : null);
  }
  getHighestUnacknowledgedBatchId() {
    return K.resolve(this.mutationQueue.length === 0 ? -1 : this.wr - 1);
  }
  getAllMutationBatches(e) {
    return K.resolve(this.mutationQueue.slice());
  }
  getAllMutationBatchesAffectingDocumentKey(e, t) {
    const r = new et(t, 0), i = new et(t, Number.POSITIVE_INFINITY), s = [];
    return this.Sr.forEachInRange([r, i], (o) => {
      const c = this.br(o.yr);
      s.push(c);
    }), K.resolve(s);
  }
  getAllMutationBatchesAffectingDocumentKeys(e, t) {
    let r = new ut(Te);
    return t.forEach((i) => {
      const s = new et(i, 0), o = new et(i, Number.POSITIVE_INFINITY);
      this.Sr.forEachInRange([s, o], (c) => {
        r = r.add(c.yr);
      });
    }), K.resolve(this.Cr(r));
  }
  getAllMutationBatchesAffectingQuery(e, t) {
    const r = t.path, i = r.length + 1;
    let s = r;
    se.isDocumentKey(s) || (s = s.child(""));
    const o = new et(new se(s), 0);
    let c = new ut(Te);
    return this.Sr.forEachWhile((u) => {
      const l = u.key.path;
      return !!r.isPrefixOf(l) && // Rows with document keys more than one segment longer than the query
      // path can't be matches. For example, a query on 'rooms' can't match
      // the document /rooms/abc/messages/xyx.
      // TODO(mcg): we'll need a different scanner when we implement
      // ancestor queries.
      (l.length === i && (c = c.add(u.yr)), !0);
    }, o), K.resolve(this.Cr(c));
  }
  Cr(e) {
    const t = [];
    return e.forEach((r) => {
      const i = this.br(r);
      i !== null && t.push(i);
    }), t;
  }
  removeMutationBatch(e, t) {
    De(this.vr(t.batchId, "removed") === 0), this.mutationQueue.shift();
    let r = this.Sr;
    return K.forEach(t.mutations, (i) => {
      const s = new et(i.key, t.batchId);
      return r = r.delete(s), this.referenceDelegate.markPotentiallyOrphaned(e, i.key);
    }).next(() => {
      this.Sr = r;
    });
  }
  xn(e) {
  }
  containsKey(e, t) {
    const r = new et(t, 0), i = this.Sr.firstAfterOrEqual(r);
    return K.resolve(t.isEqual(i && i.key));
  }
  performConsistencyCheck(e) {
    return this.mutationQueue.length, K.resolve();
  }
  /**
   * Finds the index of the given batchId in the mutation queue and asserts that
   * the resulting index is within the bounds of the queue.
   *
   * @param batchId - The batchId to search for
   * @param action - A description of what the caller is doing, phrased in passive
   * form (e.g. "acknowledged" in a routine that acknowledges batches).
   */
  vr(e, t) {
    return this.Dr(e);
  }
  /**
   * Finds the index of the given batchId in the mutation queue. This operation
   * is O(1).
   *
   * @returns The computed index of the batch with the given batchId, based on
   * the state of the queue. Note this index can be negative if the requested
   * batchId has already been removed from the queue or past the end of the
   * queue if the batchId is larger than the last added batch.
   */
  Dr(e) {
    return this.mutationQueue.length === 0 ? 0 : e - this.mutationQueue[0].batchId;
  }
  /**
   * A version of lookupMutationBatch that doesn't return a promise, this makes
   * other functions that uses this code easier to read and more efficient.
   */
  br(e) {
    const t = this.Dr(e);
    return t < 0 || t >= this.mutationQueue.length ? null : this.mutationQueue[t];
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Fk {
  /**
   * @param sizer - Used to assess the size of a document. For eager GC, this is
   * expected to just return 0 to avoid unnecessarily doing the work of
   * calculating the size.
   */
  constructor(e) {
    this.Fr = e, /** Underlying cache of documents and their read times. */
    this.docs = function() {
      return new Me(se.comparator);
    }(), /** Size of all cached documents. */
    this.size = 0;
  }
  setIndexManager(e) {
    this.indexManager = e;
  }
  /**
   * Adds the supplied entry to the cache and updates the cache size as appropriate.
   *
   * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer
   * returned by `newChangeBuffer()`.
   */
  addEntry(e, t) {
    const r = t.key, i = this.docs.get(r), s = i ? i.size : 0, o = this.Fr(t);
    return this.docs = this.docs.insert(r, {
      document: t.mutableCopy(),
      size: o
    }), this.size += o - s, this.indexManager.addToCollectionParentIndex(e, r.path.popLast());
  }
  /**
   * Removes the specified entry from the cache and updates the cache size as appropriate.
   *
   * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer
   * returned by `newChangeBuffer()`.
   */
  removeEntry(e) {
    const t = this.docs.get(e);
    t && (this.docs = this.docs.remove(e), this.size -= t.size);
  }
  getEntry(e, t) {
    const r = this.docs.get(t);
    return K.resolve(r ? r.document.mutableCopy() : vt.newInvalidDocument(t));
  }
  getEntries(e, t) {
    let r = An();
    return t.forEach((i) => {
      const s = this.docs.get(i);
      r = r.insert(i, s ? s.document.mutableCopy() : vt.newInvalidDocument(i));
    }), K.resolve(r);
  }
  getDocumentsMatchingQuery(e, t, r, i) {
    let s = An();
    const o = t.path, c = new se(o.child("")), u = this.docs.getIteratorFrom(c);
    for (; u.hasNext(); ) {
      const { key: l, value: { document: f } } = u.getNext();
      if (!o.isPrefixOf(l.path)) break;
      l.path.length > o.length + 1 || TP(EP(f), r) <= 0 || (i.has(f.key) || Oa(t, f)) && (s = s.insert(f.key, f.mutableCopy()));
    }
    return K.resolve(s);
  }
  getAllFromCollectionGroup(e, t, r, i) {
    ce();
  }
  Mr(e, t) {
    return K.forEach(this.docs, (r) => t(r));
  }
  newChangeBuffer(e) {
    return new Uk(this);
  }
  getSize(e) {
    return K.resolve(this.size);
  }
}
class Uk extends Ok {
  constructor(e) {
    super(), this.ur = e;
  }
  applyChanges(e) {
    const t = [];
    return this.changes.forEach((r, i) => {
      i.isValidDocument() ? t.push(this.ur.addEntry(e, i)) : this.ur.removeEntry(r);
    }), K.waitFor(t);
  }
  getFromCache(e, t) {
    return this.ur.getEntry(e, t);
  }
  getAllFromCache(e, t) {
    return this.ur.getEntries(e, t);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class jk {
  constructor(e) {
    this.persistence = e, /**
    * Maps a target to the data about that target
    */
    this.Or = new wi((t) => Vl(t), Fl), /** The last received snapshot version. */
    this.lastRemoteSnapshotVersion = he.min(), /** The highest numbered target ID encountered. */
    this.highestTargetId = 0, /** The highest sequence number encountered. */
    this.Nr = 0, /**
    * A ordered bidirectional mapping between documents and the remote target
    * IDs.
    */
    this.Lr = new Bl(), this.targetCount = 0, this.Br = li.Ln();
  }
  forEachTarget(e, t) {
    return this.Or.forEach((r, i) => t(i)), K.resolve();
  }
  getLastRemoteSnapshotVersion(e) {
    return K.resolve(this.lastRemoteSnapshotVersion);
  }
  getHighestSequenceNumber(e) {
    return K.resolve(this.Nr);
  }
  allocateTargetId(e) {
    return this.highestTargetId = this.Br.next(), K.resolve(this.highestTargetId);
  }
  setTargetsMetadata(e, t, r) {
    return r && (this.lastRemoteSnapshotVersion = r), t > this.Nr && (this.Nr = t), K.resolve();
  }
  Qn(e) {
    this.Or.set(e.target, e);
    const t = e.targetId;
    t > this.highestTargetId && (this.Br = new li(t), this.highestTargetId = t), e.sequenceNumber > this.Nr && (this.Nr = e.sequenceNumber);
  }
  addTargetData(e, t) {
    return this.Qn(t), this.targetCount += 1, K.resolve();
  }
  updateTargetData(e, t) {
    return this.Qn(t), K.resolve();
  }
  removeTargetData(e, t) {
    return this.Or.delete(t.target), this.Lr.mr(t.targetId), this.targetCount -= 1, K.resolve();
  }
  removeTargets(e, t, r) {
    let i = 0;
    const s = [];
    return this.Or.forEach((o, c) => {
      c.sequenceNumber <= t && r.get(c.targetId) === null && (this.Or.delete(o), s.push(this.removeMatchingKeysForTargetId(e, c.targetId)), i++);
    }), K.waitFor(s).next(() => i);
  }
  getTargetCount(e) {
    return K.resolve(this.targetCount);
  }
  getTargetData(e, t) {
    const r = this.Or.get(t) || null;
    return K.resolve(r);
  }
  addMatchingKeys(e, t, r) {
    return this.Lr.Ar(t, r), K.resolve();
  }
  removeMatchingKeys(e, t, r) {
    this.Lr.Vr(t, r);
    const i = this.persistence.referenceDelegate, s = [];
    return i && t.forEach((o) => {
      s.push(i.markPotentiallyOrphaned(e, o));
    }), K.waitFor(s);
  }
  removeMatchingKeysForTargetId(e, t) {
    return this.Lr.mr(t), K.resolve();
  }
  getMatchingKeysForTargetId(e, t) {
    const r = this.Lr.pr(t);
    return K.resolve(r);
  }
  containsKey(e, t) {
    return K.resolve(this.Lr.containsKey(t));
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class $k {
  /**
   * The constructor accepts a factory for creating a reference delegate. This
   * allows both the delegate and this instance to have strong references to
   * each other without having nullable fields that would then need to be
   * checked or asserted on every access.
   */
  constructor(e, t) {
    this.kr = {}, this.overlays = {}, this.qr = new Nl(0), this.Qr = !1, this.Qr = !0, this.Kr = new Mk(), this.referenceDelegate = e(this), this.$r = new jk(this), this.indexManager = new Pk(), this.remoteDocumentCache = function(i) {
      return new Fk(i);
    }((r) => this.referenceDelegate.Ur(r)), this.serializer = new Rk(t), this.Wr = new xk(this.serializer);
  }
  start() {
    return Promise.resolve();
  }
  shutdown() {
    return this.Qr = !1, Promise.resolve();
  }
  get started() {
    return this.Qr;
  }
  setDatabaseDeletedListener() {
  }
  setNetworkEnabled() {
  }
  getIndexManager(e) {
    return this.indexManager;
  }
  getDocumentOverlayCache(e) {
    let t = this.overlays[e.toKey()];
    return t || (t = new Lk(), this.overlays[e.toKey()] = t), t;
  }
  getMutationQueue(e, t) {
    let r = this.kr[e.toKey()];
    return r || (r = new Vk(t, this.referenceDelegate), this.kr[e.toKey()] = r), r;
  }
  getGlobalsCache() {
    return this.Kr;
  }
  getTargetCache() {
    return this.$r;
  }
  getRemoteDocumentCache() {
    return this.remoteDocumentCache;
  }
  getBundleCache() {
    return this.Wr;
  }
  runTransaction(e, t, r) {
    ee("MemoryPersistence", "Starting transaction:", e);
    const i = new Bk(this.qr.next());
    return this.referenceDelegate.Gr(), r(i).next((s) => this.referenceDelegate.zr(i).next(() => s)).toPromise().then((s) => (i.raiseOnCommittedEvent(), s));
  }
  jr(e, t) {
    return K.or(Object.values(this.kr).map((r) => () => r.containsKey(e, t)));
  }
}
class Bk extends IP {
  constructor(e) {
    super(), this.currentSequenceNumber = e;
  }
}
class ql {
  constructor(e) {
    this.persistence = e, /** Tracks all documents that are active in Query views. */
    this.Hr = new Bl(), /** The list of documents that are potentially GCed after each transaction. */
    this.Jr = null;
  }
  static Yr(e) {
    return new ql(e);
  }
  get Zr() {
    if (this.Jr) return this.Jr;
    throw ce();
  }
  addReference(e, t, r) {
    return this.Hr.addReference(r, t), this.Zr.delete(r.toString()), K.resolve();
  }
  removeReference(e, t, r) {
    return this.Hr.removeReference(r, t), this.Zr.add(r.toString()), K.resolve();
  }
  markPotentiallyOrphaned(e, t) {
    return this.Zr.add(t.toString()), K.resolve();
  }
  removeTarget(e, t) {
    this.Hr.mr(t.targetId).forEach((i) => this.Zr.add(i.toString()));
    const r = this.persistence.getTargetCache();
    return r.getMatchingKeysForTargetId(e, t.targetId).next((i) => {
      i.forEach((s) => this.Zr.add(s.toString()));
    }).next(() => r.removeTargetData(e, t));
  }
  Gr() {
    this.Jr = /* @__PURE__ */ new Set();
  }
  zr(e) {
    const t = this.persistence.getRemoteDocumentCache().newChangeBuffer();
    return K.forEach(this.Zr, (r) => {
      const i = se.fromPath(r);
      return this.Xr(e, i).next((s) => {
        s || t.removeEntry(i, he.min());
      });
    }).next(() => (this.Jr = null, t.apply(e)));
  }
  updateLimboDocument(e, t) {
    return this.Xr(e, t).next((r) => {
      r ? this.Zr.delete(t.toString()) : this.Zr.add(t.toString());
    });
  }
  Ur(e) {
    return 0;
  }
  Xr(e, t) {
    return K.or([() => K.resolve(this.Hr.containsKey(t)), () => this.persistence.getTargetCache().containsKey(e, t), () => this.persistence.jr(e, t)]);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Kl {
  constructor(e, t, r, i) {
    this.targetId = e, this.fromCache = t, this.Ki = r, this.$i = i;
  }
  static Ui(e, t) {
    let r = ye(), i = ye();
    for (const s of t.docChanges) switch (s.type) {
      case 0:
        r = r.add(s.doc.key);
        break;
      case 1:
        i = i.add(s.doc.key);
    }
    return new Kl(e, t.fromCache, r, i);
  }
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class qk {
  constructor() {
    this._documentReadCount = 0;
  }
  get documentReadCount() {
    return this._documentReadCount;
  }
  incrementDocumentReadCount(e) {
    this._documentReadCount += e;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Kk {
  constructor() {
    this.Wi = !1, this.Gi = !1, /**
    * SDK only decides whether it should create index when collection size is
    * larger than this.
    */
    this.zi = 100, this.ji = /**
    * This cost represents the evaluation result of
    * (([index, docKey] + [docKey, docContent]) per document in the result set)
    * / ([docKey, docContent] per documents in full collection scan) coming from
    * experiment [enter PR experiment URL here].
    */
    function() {
      return vS() ? 8 : SP(lt()) > 0 ? 6 : 4;
    }();
  }
  /** Sets the document view to query against. */
  initialize(e, t) {
    this.Hi = e, this.indexManager = t, this.Wi = !0;
  }
  /** Returns all local documents matching the specified query. */
  getDocumentsMatchingQuery(e, t, r, i) {
    const s = {
      result: null
    };
    return this.Ji(e, t).next((o) => {
      s.result = o;
    }).next(() => {
      if (!s.result) return this.Yi(e, t, i, r).next((o) => {
        s.result = o;
      });
    }).next(() => {
      if (s.result) return;
      const o = new qk();
      return this.Zi(e, t, o).next((c) => {
        if (s.result = c, this.Gi) return this.Xi(e, t, o, c.size);
      });
    }).next(() => s.result);
  }
  Xi(e, t, r, i) {
    return r.documentReadCount < this.zi ? (Ui() <= _e.DEBUG && ee("QueryEngine", "SDK will not create cache indexes for query:", Br(t), "since it only creates cache indexes for collection contains", "more than or equal to", this.zi, "documents"), K.resolve()) : (Ui() <= _e.DEBUG && ee("QueryEngine", "Query:", Br(t), "scans", r.documentReadCount, "local documents and returns", i, "documents as results."), r.documentReadCount > this.ji * i ? (Ui() <= _e.DEBUG && ee("QueryEngine", "The SDK decides to create cache indexes for query:", Br(t), "as using cache indexes may help improve performance."), this.indexManager.createTargetIndexes(e, sn(t))) : K.resolve());
  }
  /**
   * Performs an indexed query that evaluates the query based on a collection's
   * persisted index values. Returns `null` if an index is not available.
   */
  Ji(e, t) {
    if (yp(t))
      return K.resolve(null);
    let r = sn(t);
    return this.indexManager.getIndexType(e, r).next((i) => i === 0 ? null : (t.limit !== null && i === 1 && // We cannot apply a limit for targets that are served using a partial
    // index. If a partial index will be used to serve the target, the
    // query may return a superset of documents that match the target
    // (e.g. if the index doesn't include all the target's filters), or
    // may return the correct set of documents in the wrong order (e.g. if
    // the index doesn't include a segment for one of the orderBys).
    // Therefore, a limit should not be applied in such cases.
    (t = Nu(
      t,
      null,
      "F"
      /* LimitType.First */
    ), r = sn(t)), this.indexManager.getDocumentsMatchingTarget(e, r).next((s) => {
      const o = ye(...s);
      return this.Hi.getDocuments(e, o).next((c) => this.indexManager.getMinOffset(e, r).next((u) => {
        const l = this.es(t, c);
        return this.ts(t, l, o, u.readTime) ? this.Ji(e, Nu(
          t,
          null,
          "F"
          /* LimitType.First */
        )) : this.ns(e, l, t, u);
      }));
    })));
  }
  /**
   * Performs a query based on the target's persisted query mapping. Returns
   * `null` if the mapping is not available or cannot be used.
   */
  Yi(e, t, r, i) {
    return yp(t) || i.isEqual(he.min()) ? K.resolve(null) : this.Hi.getDocuments(e, r).next((s) => {
      const o = this.es(t, s);
      return this.ts(t, o, r, i) ? K.resolve(null) : (Ui() <= _e.DEBUG && ee("QueryEngine", "Re-using previous result from %s to execute query: %s", i.toString(), Br(t)), this.ns(e, o, t, wP(i, -1)).next((c) => c));
    });
  }
  /** Applies the query filter and sorting to the provided documents.  */
  es(e, t) {
    let r = new ut(Qy(e));
    return t.forEach((i, s) => {
      Oa(e, s) && (r = r.add(s));
    }), r;
  }
  /**
   * Determines if a limit query needs to be refilled from cache, making it
   * ineligible for index-free execution.
   *
   * @param query - The query.
   * @param sortedPreviousResults - The documents that matched the query when it
   * was last synchronized, sorted by the query's comparator.
   * @param remoteKeys - The document keys that matched the query at the last
   * snapshot.
   * @param limboFreeSnapshotVersion - The version of the snapshot when the
   * query was last synchronized.
   */
  ts(e, t, r, i) {
    if (e.limit === null)
      return !1;
    if (r.size !== t.size)
      return !0;
    const s = e.limitType === "F" ? t.last() : t.first();
    return !!s && (s.hasPendingWrites || s.version.compareTo(i) > 0);
  }
  Zi(e, t, r) {
    return Ui() <= _e.DEBUG && ee("QueryEngine", "Using full collection scan to execute query:", Br(t)), this.Hi.getDocumentsMatchingQuery(e, t, Gn.min(), r);
  }
  /**
   * Combines the results from an indexed execution with the remaining documents
   * that have not yet been indexed.
   */
  ns(e, t, r, i) {
    return this.Hi.getDocumentsMatchingQuery(e, r, i).next((s) => (
      // Merge with existing results
      (t.forEach((o) => {
        s = s.insert(o.key, o);
      }), s)
    ));
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class zk {
  constructor(e, t, r, i) {
    this.persistence = e, this.rs = t, this.serializer = i, /**
    * Maps a targetID to data about its target.
    *
    * PORTING NOTE: We are using an immutable data structure on Web to make re-runs
    * of `applyRemoteEvent()` idempotent.
    */
    this.ss = new Me(Te), /** Maps a target to its targetID. */
    // TODO(wuandy): Evaluate if TargetId can be part of Target.
    this.os = new wi((s) => Vl(s), Fl), /**
    * A per collection group index of the last read time processed by
    * `getNewDocumentChanges()`.
    *
    * PORTING NOTE: This is only used for multi-tab synchronization.
    */
    this._s = /* @__PURE__ */ new Map(), this.us = e.getRemoteDocumentCache(), this.$r = e.getTargetCache(), this.Wr = e.getBundleCache(), this.cs(r);
  }
  cs(e) {
    this.documentOverlayCache = this.persistence.getDocumentOverlayCache(e), this.indexManager = this.persistence.getIndexManager(e), this.mutationQueue = this.persistence.getMutationQueue(e, this.indexManager), this.localDocuments = new Nk(this.us, this.mutationQueue, this.documentOverlayCache, this.indexManager), this.us.setIndexManager(this.indexManager), this.rs.initialize(this.localDocuments, this.indexManager);
  }
  collectGarbage(e) {
    return this.persistence.runTransaction("Collect garbage", "readwrite-primary", (t) => e.collect(t, this.ss));
  }
}
function Hk(n, e, t, r) {
  return new zk(n, e, t, r);
}
async function __(n, e) {
  const t = fe(n);
  return await t.persistence.runTransaction("Handle user change", "readonly", (r) => {
    let i;
    return t.mutationQueue.getAllMutationBatches(r).next((s) => (i = s, t.cs(e), t.mutationQueue.getAllMutationBatches(r))).next((s) => {
      const o = [], c = [];
      let u = ye();
      for (const l of i) {
        o.push(l.batchId);
        for (const f of l.mutations) u = u.add(f.key);
      }
      for (const l of s) {
        c.push(l.batchId);
        for (const f of l.mutations) u = u.add(f.key);
      }
      return t.localDocuments.getDocuments(r, u).next((l) => ({
        ls: l,
        removedBatchIds: o,
        addedBatchIds: c
      }));
    });
  });
}
function Gk(n, e) {
  const t = fe(n);
  return t.persistence.runTransaction("Acknowledge batch", "readwrite-primary", (r) => {
    const i = e.batch.keys(), s = t.us.newChangeBuffer({
      trackRemovals: !0
    });
    return function(c, u, l, f) {
      const h = l.batch, y = h.keys();
      let T = K.resolve();
      return y.forEach((S) => {
        T = T.next(() => f.getEntry(u, S)).next((C) => {
          const w = l.docVersions.get(S);
          De(w !== null), C.version.compareTo(w) < 0 && (h.applyToRemoteDocument(C, l), C.isValidDocument() && // We use the commitVersion as the readTime rather than the
          // document's updateTime since the updateTime is not advanced
          // for updates that do not modify the underlying document.
          (C.setReadTime(l.commitVersion), f.addEntry(C)));
        });
      }), T.next(() => c.mutationQueue.removeMutationBatch(u, h));
    }(t, r, e, s).next(() => s.apply(r)).next(() => t.mutationQueue.performConsistencyCheck(r)).next(() => t.documentOverlayCache.removeOverlaysForBatchId(r, i, e.batch.batchId)).next(() => t.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(r, function(c) {
      let u = ye();
      for (let l = 0; l < c.mutationResults.length; ++l)
        c.mutationResults[l].transformResults.length > 0 && (u = u.add(c.batch.mutations[l].key));
      return u;
    }(e))).next(() => t.localDocuments.getDocuments(r, i));
  });
}
function v_(n) {
  const e = fe(n);
  return e.persistence.runTransaction("Get last remote snapshot version", "readonly", (t) => e.$r.getLastRemoteSnapshotVersion(t));
}
function Wk(n, e) {
  const t = fe(n), r = e.snapshotVersion;
  let i = t.ss;
  return t.persistence.runTransaction("Apply remote event", "readwrite-primary", (s) => {
    const o = t.us.newChangeBuffer({
      trackRemovals: !0
    });
    i = t.ss;
    const c = [];
    e.targetChanges.forEach((f, h) => {
      const y = i.get(h);
      if (!y) return;
      c.push(t.$r.removeMatchingKeys(s, f.removedDocuments, h).next(() => t.$r.addMatchingKeys(s, f.addedDocuments, h)));
      let T = y.withSequenceNumber(s.currentSequenceNumber);
      e.targetMismatches.get(h) !== null ? T = T.withResumeToken(ht.EMPTY_BYTE_STRING, he.min()).withLastLimboFreeSnapshotVersion(he.min()) : f.resumeToken.approximateByteSize() > 0 && (T = T.withResumeToken(f.resumeToken, r)), i = i.insert(h, T), // Update the target data if there are target changes (or if
      // sufficient time has passed since the last update).
      /**
      * Returns true if the newTargetData should be persisted during an update of
      * an active target. TargetData should always be persisted when a target is
      * being released and should not call this function.
      *
      * While the target is active, TargetData updates can be omitted when nothing
      * about the target has changed except metadata like the resume token or
      * snapshot version. Occasionally it's worth the extra write to prevent these
      * values from getting too stale after a crash, but this doesn't have to be
      * too frequent.
      */
      function(C, w, E) {
        return C.resumeToken.approximateByteSize() === 0 || w.snapshotVersion.toMicroseconds() - C.snapshotVersion.toMicroseconds() >= 3e8 ? !0 : E.addedDocuments.size + E.modifiedDocuments.size + E.removedDocuments.size > 0;
      }(y, T, f) && c.push(t.$r.updateTargetData(s, T));
    });
    let u = An(), l = ye();
    if (e.documentUpdates.forEach((f) => {
      e.resolvedLimboDocuments.has(f) && c.push(t.persistence.referenceDelegate.updateLimboDocument(s, f));
    }), // Each loop iteration only affects its "own" doc, so it's safe to get all
    // the remote documents in advance in a single call.
    c.push(Qk(s, o, e.documentUpdates).next((f) => {
      u = f.hs, l = f.Ps;
    })), !r.isEqual(he.min())) {
      const f = t.$r.getLastRemoteSnapshotVersion(s).next((h) => t.$r.setTargetsMetadata(s, s.currentSequenceNumber, r));
      c.push(f);
    }
    return K.waitFor(c).next(() => o.apply(s)).next(() => t.localDocuments.getLocalViewOfDocuments(s, u, l)).next(() => u);
  }).then((s) => (t.ss = i, s));
}
function Qk(n, e, t) {
  let r = ye(), i = ye();
  return t.forEach((s) => r = r.add(s)), e.getEntries(n, r).next((s) => {
    let o = An();
    return t.forEach((c, u) => {
      const l = s.get(c);
      u.isFoundDocument() !== l.isFoundDocument() && (i = i.add(c)), // Note: The order of the steps below is important, since we want
      // to ensure that rejected limbo resolutions (which fabricate
      // NoDocuments with SnapshotVersion.min()) never add documents to
      // cache.
      u.isNoDocument() && u.version.isEqual(he.min()) ? (
        // NoDocuments with SnapshotVersion.min() are used in manufactured
        // events. We remove these documents from cache since we lost
        // access.
        (e.removeEntry(c, u.readTime), o = o.insert(c, u))
      ) : !l.isValidDocument() || u.version.compareTo(l.version) > 0 || u.version.compareTo(l.version) === 0 && l.hasPendingWrites ? (e.addEntry(u), o = o.insert(c, u)) : ee("LocalStore", "Ignoring outdated watch update for ", c, ". Current version:", l.version, " Watch version:", u.version);
    }), {
      hs: o,
      Ps: i
    };
  });
}
function Yk(n, e) {
  const t = fe(n);
  return t.persistence.runTransaction("Get next mutation batch", "readonly", (r) => (e === void 0 && (e = -1), t.mutationQueue.getNextMutationBatchAfterBatchId(r, e)));
}
function Jk(n, e) {
  const t = fe(n);
  return t.persistence.runTransaction("Allocate target", "readwrite", (r) => {
    let i;
    return t.$r.getTargetData(r, e).next((s) => s ? (
      // This target has been listened to previously, so reuse the
      // previous targetID.
      // TODO(mcg): freshen last accessed date?
      (i = s, K.resolve(i))
    ) : t.$r.allocateTargetId(r).next((o) => (i = new Un(e, o, "TargetPurposeListen", r.currentSequenceNumber), t.$r.addTargetData(r, i).next(() => i))));
  }).then((r) => {
    const i = t.ss.get(r.targetId);
    return (i === null || r.snapshotVersion.compareTo(i.snapshotVersion) > 0) && (t.ss = t.ss.insert(r.targetId, r), t.os.set(e, r.targetId)), r;
  });
}
async function Fu(n, e, t) {
  const r = fe(n), i = r.ss.get(e), s = t ? "readwrite" : "readwrite-primary";
  try {
    t || await r.persistence.runTransaction("Release target", s, (o) => r.persistence.referenceDelegate.removeTarget(o, i));
  } catch (o) {
    if (!ks(o)) throw o;
    ee("LocalStore", `Failed to update sequence numbers for target ${e}: ${o}`);
  }
  r.ss = r.ss.remove(e), r.os.delete(i.target);
}
function Cp(n, e, t) {
  const r = fe(n);
  let i = he.min(), s = ye();
  return r.persistence.runTransaction(
    "Execute query",
    "readwrite",
    // Use readwrite instead of readonly so indexes can be created
    // Use readwrite instead of readonly so indexes can be created
    (o) => function(u, l, f) {
      const h = fe(u), y = h.os.get(f);
      return y !== void 0 ? K.resolve(h.ss.get(y)) : h.$r.getTargetData(l, f);
    }(r, o, sn(e)).next((c) => {
      if (c) return i = c.lastLimboFreeSnapshotVersion, r.$r.getMatchingKeysForTargetId(o, c.targetId).next((u) => {
        s = u;
      });
    }).next(() => r.rs.getDocumentsMatchingQuery(o, e, t ? i : he.min(), t ? s : ye())).next((c) => (Xk(r, BP(e), c), {
      documents: c,
      Is: s
    }))
  );
}
function Xk(n, e, t) {
  let r = n._s.get(e) || he.min();
  t.forEach((i, s) => {
    s.readTime.compareTo(r) > 0 && (r = s.readTime);
  }), n._s.set(e, r);
}
class Pp {
  constructor() {
    this.activeTargetIds = WP();
  }
  Vs(e) {
    this.activeTargetIds = this.activeTargetIds.add(e);
  }
  fs(e) {
    this.activeTargetIds = this.activeTargetIds.delete(e);
  }
  /**
   * Converts this entry into a JSON-encoded format we can use for WebStorage.
   * Does not encode `clientId` as it is part of the key in WebStorage.
   */
  Rs() {
    const e = {
      activeTargetIds: this.activeTargetIds.toArray(),
      updateTimeMs: Date.now()
    };
    return JSON.stringify(e);
  }
}
class Zk {
  constructor() {
    this.io = new Pp(), this.so = {}, this.onlineStateHandler = null, this.sequenceNumberHandler = null;
  }
  addPendingMutation(e) {
  }
  updateMutationState(e, t, r) {
  }
  addLocalQueryTarget(e) {
    return this.io.Vs(e), this.so[e] || "not-current";
  }
  updateQueryState(e, t, r) {
    this.so[e] = t;
  }
  removeLocalQueryTarget(e) {
    this.io.fs(e);
  }
  isLocalQueryTarget(e) {
    return this.io.activeTargetIds.has(e);
  }
  clearQueryState(e) {
    delete this.so[e];
  }
  getAllActiveQueryTargets() {
    return this.io.activeTargetIds;
  }
  isActiveQueryTarget(e) {
    return this.io.activeTargetIds.has(e);
  }
  start() {
    return this.io = new Pp(), Promise.resolve();
  }
  handleUserChange(e, t, r) {
  }
  setOnlineState(e) {
  }
  shutdown() {
  }
  writeSequenceNumber(e) {
  }
  notifyBundleLoaded(e) {
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class eO {
  oo(e) {
  }
  shutdown() {
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class kp {
  constructor() {
    this._o = () => this.ao(), this.uo = () => this.co(), this.lo = [], this.ho();
  }
  oo(e) {
    this.lo.push(e);
  }
  shutdown() {
    window.removeEventListener("online", this._o), window.removeEventListener("offline", this.uo);
  }
  ho() {
    window.addEventListener("online", this._o), window.addEventListener("offline", this.uo);
  }
  ao() {
    ee("ConnectivityMonitor", "Network connectivity changed: AVAILABLE");
    for (const e of this.lo) e(
      0
      /* NetworkStatus.AVAILABLE */
    );
  }
  co() {
    ee("ConnectivityMonitor", "Network connectivity changed: UNAVAILABLE");
    for (const e of this.lo) e(
      1
      /* NetworkStatus.UNAVAILABLE */
    );
  }
  // TODO(chenbrian): Consider passing in window either into this component or
  // here for testing via FakeWindow.
  /** Checks that all used attributes of window are available. */
  static D() {
    return typeof window < "u" && window.addEventListener !== void 0 && window.removeEventListener !== void 0;
  }
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
let mo = null;
function xc() {
  return mo === null ? mo = function() {
    return 268435456 + Math.round(2147483648 * Math.random());
  }() : mo++, "0x" + mo.toString(16);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const tO = {
  BatchGetDocuments: "batchGet",
  Commit: "commit",
  RunQuery: "runQuery",
  RunAggregationQuery: "runAggregationQuery"
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class nO {
  constructor(e) {
    this.Po = e.Po, this.Io = e.Io;
  }
  To(e) {
    this.Eo = e;
  }
  Ao(e) {
    this.Ro = e;
  }
  Vo(e) {
    this.mo = e;
  }
  onMessage(e) {
    this.fo = e;
  }
  close() {
    this.Io();
  }
  send(e) {
    this.Po(e);
  }
  po() {
    this.Eo();
  }
  yo() {
    this.Ro();
  }
  wo(e) {
    this.mo(e);
  }
  So(e) {
    this.fo(e);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const yt = "WebChannelConnection";
class rO extends /**
* Base class for all Rest-based connections to the backend (WebChannel and
* HTTP).
*/
class {
  constructor(t) {
    this.databaseInfo = t, this.databaseId = t.databaseId;
    const r = t.ssl ? "https" : "http", i = encodeURIComponent(this.databaseId.projectId), s = encodeURIComponent(this.databaseId.database);
    this.bo = r + "://" + t.host, this.Do = `projects/${i}/databases/${s}`, this.Co = this.databaseId.database === "(default)" ? `project_id=${i}` : `project_id=${i}&database_id=${s}`;
  }
  get vo() {
    return !1;
  }
  Fo(t, r, i, s, o) {
    const c = xc(), u = this.Mo(t, r.toUriEncodedString());
    ee("RestConnection", `Sending RPC '${t}' ${c}:`, u, i);
    const l = {
      "google-cloud-resource-prefix": this.Do,
      "x-goog-request-params": this.Co
    };
    return this.xo(l, s, o), this.Oo(t, u, l, i).then((f) => (ee("RestConnection", `Received RPC '${t}' ${c}: `, f), f), (f) => {
      throw oi("RestConnection", `RPC '${t}' ${c} failed with error: `, f, "url: ", u, "request:", i), f;
    });
  }
  No(t, r, i, s, o, c) {
    return this.Fo(t, r, i, s, o);
  }
  /**
   * Modifies the headers for a request, adding any authorization token if
   * present and any additional headers for the request.
   */
  xo(t, r, i) {
    t["X-Goog-Api-Client"] = // SDK_VERSION is updated to different value at runtime depending on the entry point,
    // so we need to get its value when we need it in a function.
    function() {
      return "gl-js/ fire/" + _i;
    }(), // Content-Type: text/plain will avoid preflight requests which might
    // mess with CORS and redirects by proxies. If we add custom headers
    // we will need to change this code to potentially use the $httpOverwrite
    // parameter supported by ESF to avoid triggering preflight requests.
    t["Content-Type"] = "text/plain", this.databaseInfo.appId && (t["X-Firebase-GMPID"] = this.databaseInfo.appId), r && r.headers.forEach((s, o) => t[o] = s), i && i.headers.forEach((s, o) => t[o] = s);
  }
  Mo(t, r) {
    const i = tO[t];
    return `${this.bo}/v1/${r}:${i}`;
  }
  /**
   * Closes and cleans up any resources associated with the connection. This
   * implementation is a no-op because there are no resources associated
   * with the RestConnection that need to be cleaned up.
   */
  terminate() {
  }
} {
  constructor(e) {
    super(e), this.forceLongPolling = e.forceLongPolling, this.autoDetectLongPolling = e.autoDetectLongPolling, this.useFetchStreams = e.useFetchStreams, this.longPollingOptions = e.longPollingOptions;
  }
  Oo(e, t, r, i) {
    const s = xc();
    return new Promise((o, c) => {
      const u = new ky();
      u.setWithCredentials(!0), u.listenOnce(Dy.COMPLETE, () => {
        try {
          switch (u.getLastErrorCode()) {
            case Ro.NO_ERROR:
              const f = u.getResponseJson();
              ee(yt, `XHR for RPC '${e}' ${s} received:`, JSON.stringify(f)), o(f);
              break;
            case Ro.TIMEOUT:
              ee(yt, `RPC '${e}' ${s} timed out`), c(new X(B.DEADLINE_EXCEEDED, "Request time out"));
              break;
            case Ro.HTTP_ERROR:
              const h = u.getStatus();
              if (ee(yt, `RPC '${e}' ${s} failed with status:`, h, "response text:", u.getResponseText()), h > 0) {
                let y = u.getResponseJson();
                Array.isArray(y) && (y = y[0]);
                const T = y == null ? void 0 : y.error;
                if (T && T.status && T.message) {
                  const S = function(w) {
                    const E = w.toLowerCase().replace(/_/g, "-");
                    return Object.values(B).indexOf(E) >= 0 ? E : B.UNKNOWN;
                  }(T.status);
                  c(new X(S, T.message));
                } else c(new X(B.UNKNOWN, "Server responded with status " + u.getStatus()));
              } else
                c(new X(B.UNAVAILABLE, "Connection failed."));
              break;
            default:
              ce();
          }
        } finally {
          ee(yt, `RPC '${e}' ${s} completed.`);
        }
      });
      const l = JSON.stringify(i);
      ee(yt, `RPC '${e}' ${s} sending request:`, i), u.send(t, "POST", l, r, 15);
    });
  }
  Lo(e, t, r) {
    const i = xc(), s = [this.bo, "/", "google.firestore.v1.Firestore", "/", e, "/channel"], o = Ly(), c = xy(), u = {
      // Required for backend stickiness, routing behavior is based on this
      // parameter.
      httpSessionIdParam: "gsessionid",
      initMessageHeaders: {},
      messageUrlParams: {
        // This param is used to improve routing and project isolation by the
        // backend and must be included in every request.
        database: `projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`
      },
      sendRawJson: !0,
      supportsCrossDomainXhr: !0,
      internalChannelParams: {
        // Override the default timeout (randomized between 10-20 seconds) since
        // a large write batch on a slow internet connection may take a long
        // time to send to the backend. Rather than have WebChannel impose a
        // tight timeout which could lead to infinite timeouts and retries, we
        // set it very large (5-10 minutes) and rely on the browser's builtin
        // timeouts to kick in if the request isn't working.
        forwardChannelRequestTimeoutMs: 6e5
      },
      forceLongPolling: this.forceLongPolling,
      detectBufferingProxy: this.autoDetectLongPolling
    }, l = this.longPollingOptions.timeoutSeconds;
    l !== void 0 && (u.longPollingTimeout = Math.round(1e3 * l)), this.useFetchStreams && (u.xmlHttpFactory = new Oy({})), this.xo(u.initMessageHeaders, t, r), // Sending the custom headers we just added to request.initMessageHeaders
    // (Authorization, etc.) will trigger the browser to make a CORS preflight
    // request because the XHR will no longer meet the criteria for a "simple"
    // CORS request:
    // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
    // Therefore to avoid the CORS preflight request (an extra network
    // roundtrip), we use the encodeInitMessageHeaders option to specify that
    // the headers should instead be encoded in the request's POST payload,
    // which is recognized by the webchannel backend.
    u.encodeInitMessageHeaders = !0;
    const f = s.join("");
    ee(yt, `Creating RPC '${e}' stream ${i}: ${f}`, u);
    const h = o.createWebChannel(f, u);
    let y = !1, T = !1;
    const S = new nO({
      Po: (w) => {
        T ? ee(yt, `Not sending because RPC '${e}' stream ${i} is closed:`, w) : (y || (ee(yt, `Opening RPC '${e}' stream ${i} transport.`), h.open(), y = !0), ee(yt, `RPC '${e}' stream ${i} sending:`, w), h.send(w));
      },
      Io: () => h.close()
    }), C = (w, E, g) => {
      w.listen(E, (d) => {
        try {
          g(d);
        } catch (m) {
          setTimeout(() => {
            throw m;
          }, 0);
        }
      });
    };
    return C(h, Hi.EventType.OPEN, () => {
      T || (ee(yt, `RPC '${e}' stream ${i} transport opened.`), S.po());
    }), C(h, Hi.EventType.CLOSE, () => {
      T || (T = !0, ee(yt, `RPC '${e}' stream ${i} transport closed`), S.wo());
    }), C(h, Hi.EventType.ERROR, (w) => {
      T || (T = !0, oi(yt, `RPC '${e}' stream ${i} transport errored:`, w), S.wo(new X(B.UNAVAILABLE, "The operation could not be completed")));
    }), C(h, Hi.EventType.MESSAGE, (w) => {
      var E;
      if (!T) {
        const g = w.data[0];
        De(!!g);
        const d = g, m = d.error || ((E = d[0]) === null || E === void 0 ? void 0 : E.error);
        if (m) {
          ee(yt, `RPC '${e}' stream ${i} received error:`, m);
          const v = m.status;
          let I = (
            /**
            * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.
            *
            * @returns The Code equivalent to the given status string or undefined if
            *     there is no match.
            */
            function(A) {
              const O = Ke[A];
              if (O !== void 0) return c_(O);
            }(v)
          ), R = m.message;
          I === void 0 && (I = B.INTERNAL, R = "Unknown error status: " + v + " with message " + m.message), // Mark closed so no further events are propagated
          T = !0, S.wo(new X(I, R)), h.close();
        } else ee(yt, `RPC '${e}' stream ${i} received:`, g), S.So(g);
      }
    }), C(c, Ny.STAT_EVENT, (w) => {
      w.stat === Ru.PROXY ? ee(yt, `RPC '${e}' stream ${i} detected buffering proxy`) : w.stat === Ru.NOPROXY && ee(yt, `RPC '${e}' stream ${i} detected no buffering proxy`);
    }), setTimeout(() => {
      S.yo();
    }, 0), S;
  }
}
function Lc() {
  return typeof document < "u" ? document : null;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function La(n) {
  return new dk(
    n,
    /* useProto3Json= */
    !0
  );
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class w_ {
  constructor(e, t, r = 1e3, i = 1.5, s = 6e4) {
    this.ai = e, this.timerId = t, this.Bo = r, this.ko = i, this.qo = s, this.Qo = 0, this.Ko = null, /** The last backoff attempt, as epoch milliseconds. */
    this.$o = Date.now(), this.reset();
  }
  /**
   * Resets the backoff delay.
   *
   * The very next backoffAndWait() will have no delay. If it is called again
   * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
   * subsequent ones will increase according to the backoffFactor.
   */
  reset() {
    this.Qo = 0;
  }
  /**
   * Resets the backoff delay to the maximum delay (e.g. for use after a
   * RESOURCE_EXHAUSTED error).
   */
  Uo() {
    this.Qo = this.qo;
  }
  /**
   * Returns a promise that resolves after currentDelayMs, and increases the
   * delay for any subsequent attempts. If there was a pending backoff operation
   * already, it will be canceled.
   */
  Wo(e) {
    this.cancel();
    const t = Math.floor(this.Qo + this.Go()), r = Math.max(0, Date.now() - this.$o), i = Math.max(0, t - r);
    i > 0 && ee("ExponentialBackoff", `Backing off for ${i} ms (base delay: ${this.Qo} ms, delay with jitter: ${t} ms, last attempt: ${r} ms ago)`), this.Ko = this.ai.enqueueAfterDelay(this.timerId, i, () => (this.$o = Date.now(), e())), // Apply backoff factor to determine next delay and ensure it is within
    // bounds.
    this.Qo *= this.ko, this.Qo < this.Bo && (this.Qo = this.Bo), this.Qo > this.qo && (this.Qo = this.qo);
  }
  zo() {
    this.Ko !== null && (this.Ko.skipDelay(), this.Ko = null);
  }
  cancel() {
    this.Ko !== null && (this.Ko.cancel(), this.Ko = null);
  }
  /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */
  Go() {
    return (Math.random() - 0.5) * this.Qo;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class E_ {
  constructor(e, t, r, i, s, o, c, u) {
    this.ai = e, this.jo = r, this.Ho = i, this.connection = s, this.authCredentialsProvider = o, this.appCheckCredentialsProvider = c, this.listener = u, this.state = 0, /**
    * A close count that's incremented every time the stream is closed; used by
    * getCloseGuardedDispatcher() to invalidate callbacks that happen after
    * close.
    */
    this.Jo = 0, this.Yo = null, this.Zo = null, this.stream = null, /**
    * Count of response messages received.
    */
    this.Xo = 0, this.e_ = new w_(e, t);
  }
  /**
   * Returns true if start() has been called and no error has occurred. True
   * indicates the stream is open or in the process of opening (which
   * encompasses respecting backoff, getting auth tokens, and starting the
   * actual RPC). Use isOpen() to determine if the stream is open and ready for
   * outbound requests.
   */
  t_() {
    return this.state === 1 || this.state === 5 || this.n_();
  }
  /**
   * Returns true if the underlying RPC is open (the onOpen() listener has been
   * called) and the stream is ready for outbound requests.
   */
  n_() {
    return this.state === 2 || this.state === 3;
  }
  /**
   * Starts the RPC. Only allowed if isStarted() returns false. The stream is
   * not immediately ready for use: onOpen() will be invoked when the RPC is
   * ready for outbound requests, at which point isOpen() will return true.
   *
   * When start returns, isStarted() will return true.
   */
  start() {
    this.Xo = 0, this.state !== 4 ? this.auth() : this.r_();
  }
  /**
   * Stops the RPC. This call is idempotent and allowed regardless of the
   * current isStarted() state.
   *
   * When stop returns, isStarted() and isOpen() will both return false.
   */
  async stop() {
    this.t_() && await this.close(
      0
      /* PersistentStreamState.Initial */
    );
  }
  /**
   * After an error the stream will usually back off on the next attempt to
   * start it. If the error warrants an immediate restart of the stream, the
   * sender can use this to indicate that the receiver should not back off.
   *
   * Each error will call the onClose() listener. That function can decide to
   * inhibit backoff if required.
   */
  i_() {
    this.state = 0, this.e_.reset();
  }
  /**
   * Marks this stream as idle. If no further actions are performed on the
   * stream for one minute, the stream will automatically close itself and
   * notify the stream's onClose() handler with Status.OK. The stream will then
   * be in a !isStarted() state, requiring the caller to start the stream again
   * before further use.
   *
   * Only streams that are in state 'Open' can be marked idle, as all other
   * states imply pending network operations.
   */
  s_() {
    this.n_() && this.Yo === null && (this.Yo = this.ai.enqueueAfterDelay(this.jo, 6e4, () => this.o_()));
  }
  /** Sends a message to the underlying stream. */
  __(e) {
    this.a_(), this.stream.send(e);
  }
  /** Called by the idle timer when the stream should close due to inactivity. */
  async o_() {
    if (this.n_())
      return this.close(
        0
        /* PersistentStreamState.Initial */
      );
  }
  /** Marks the stream as active again. */
  a_() {
    this.Yo && (this.Yo.cancel(), this.Yo = null);
  }
  /** Cancels the health check delayed operation. */
  u_() {
    this.Zo && (this.Zo.cancel(), this.Zo = null);
  }
  /**
   * Closes the stream and cleans up as necessary:
   *
   * * closes the underlying GRPC stream;
   * * calls the onClose handler with the given 'error';
   * * sets internal stream state to 'finalState';
   * * adjusts the backoff timer based on the error
   *
   * A new stream can be opened by calling start().
   *
   * @param finalState - the intended state of the stream after closing.
   * @param error - the error the connection was closed with.
   */
  async close(e, t) {
    this.a_(), this.u_(), this.e_.cancel(), // Invalidates any stream-related callbacks (e.g. from auth or the
    // underlying stream), guaranteeing they won't execute.
    this.Jo++, e !== 4 ? (
      // If this is an intentional close ensure we don't delay our next connection attempt.
      this.e_.reset()
    ) : t && t.code === B.RESOURCE_EXHAUSTED ? (
      // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
      (Sn(t.toString()), Sn("Using maximum backoff delay to prevent overloading the backend."), this.e_.Uo())
    ) : t && t.code === B.UNAUTHENTICATED && this.state !== 3 && // "unauthenticated" error means the token was rejected. This should rarely
    // happen since both Auth and AppCheck ensure a sufficient TTL when we
    // request a token. If a user manually resets their system clock this can
    // fail, however. In this case, we should get a Code.UNAUTHENTICATED error
    // before we received the first message and we need to invalidate the token
    // to ensure that we fetch a new token.
    (this.authCredentialsProvider.invalidateToken(), this.appCheckCredentialsProvider.invalidateToken()), // Clean up the underlying stream because we are no longer interested in events.
    this.stream !== null && (this.c_(), this.stream.close(), this.stream = null), // This state must be assigned before calling onClose() to allow the callback to
    // inhibit backoff or otherwise manipulate the state in its non-started state.
    this.state = e, // Notify the listener that the stream closed.
    await this.listener.Vo(t);
  }
  /**
   * Can be overridden to perform additional cleanup before the stream is closed.
   * Calling super.tearDown() is not required.
   */
  c_() {
  }
  auth() {
    this.state = 1;
    const e = this.l_(this.Jo), t = this.Jo;
    Promise.all([this.authCredentialsProvider.getToken(), this.appCheckCredentialsProvider.getToken()]).then(([r, i]) => {
      this.Jo === t && // Normally we'd have to schedule the callback on the AsyncQueue.
      // However, the following calls are safe to be called outside the
      // AsyncQueue since they don't chain asynchronous calls
      this.h_(r, i);
    }, (r) => {
      e(() => {
        const i = new X(B.UNKNOWN, "Fetching auth token failed: " + r.message);
        return this.P_(i);
      });
    });
  }
  h_(e, t) {
    const r = this.l_(this.Jo);
    this.stream = this.I_(e, t), this.stream.To(() => {
      r(() => this.listener.To());
    }), this.stream.Ao(() => {
      r(() => (this.state = 2, this.Zo = this.ai.enqueueAfterDelay(this.Ho, 1e4, () => (this.n_() && (this.state = 3), Promise.resolve())), this.listener.Ao()));
    }), this.stream.Vo((i) => {
      r(() => this.P_(i));
    }), this.stream.onMessage((i) => {
      r(() => ++this.Xo == 1 ? this.T_(i) : this.onNext(i));
    });
  }
  r_() {
    this.state = 5, this.e_.Wo(async () => {
      this.state = 0, this.start();
    });
  }
  // Visible for tests
  P_(e) {
    return ee("PersistentStream", `close with error: ${e}`), this.stream = null, this.close(4, e);
  }
  /**
   * Returns a "dispatcher" function that dispatches operations onto the
   * AsyncQueue but only runs them if closeCount remains unchanged. This allows
   * us to turn auth / stream callbacks into no-ops if the stream is closed /
   * re-opened, etc.
   */
  l_(e) {
    return (t) => {
      this.ai.enqueueAndForget(() => this.Jo === e ? t() : (ee("PersistentStream", "stream callback skipped by getCloseGuardedDispatcher."), Promise.resolve()));
    };
  }
}
class iO extends E_ {
  constructor(e, t, r, i, s, o) {
    super(e, "listen_stream_connection_backoff", "listen_stream_idle", "health_check_timeout", t, r, i, o), this.serializer = s;
  }
  I_(e, t) {
    return this.connection.Lo("Listen", e, t);
  }
  T_(e) {
    return this.onNext(e);
  }
  onNext(e) {
    this.e_.reset();
    const t = gk(this.serializer, e), r = function(s) {
      if (!("targetChange" in s)) return he.min();
      const o = s.targetChange;
      return o.targetIds && o.targetIds.length ? he.min() : o.readTime ? on(o.readTime) : he.min();
    }(e);
    return this.listener.E_(t, r);
  }
  /**
   * Registers interest in the results of the given target. If the target
   * includes a resumeToken it will be included in the request. Results that
   * affect the target will be streamed back as WatchChange messages that
   * reference the targetId.
   */
  d_(e) {
    const t = {};
    t.database = Vu(this.serializer), t.addTarget = function(s, o) {
      let c;
      const u = o.target;
      if (c = Ou(u) ? {
        documents: vk(s, u)
      } : {
        query: wk(s, u)._t
      }, c.targetId = o.targetId, o.resumeToken.approximateByteSize() > 0) {
        c.resumeToken = h_(s, o.resumeToken);
        const l = xu(s, o.expectedCount);
        l !== null && (c.expectedCount = l);
      } else if (o.snapshotVersion.compareTo(he.min()) > 0) {
        c.readTime = ta(s, o.snapshotVersion.toTimestamp());
        const l = xu(s, o.expectedCount);
        l !== null && (c.expectedCount = l);
      }
      return c;
    }(this.serializer, e);
    const r = Tk(this.serializer, e);
    r && (t.labels = r), this.__(t);
  }
  /**
   * Unregisters interest in the results of the target associated with the
   * given targetId.
   */
  A_(e) {
    const t = {};
    t.database = Vu(this.serializer), t.removeTarget = e, this.__(t);
  }
}
class sO extends E_ {
  constructor(e, t, r, i, s, o) {
    super(e, "write_stream_connection_backoff", "write_stream_idle", "health_check_timeout", t, r, i, o), this.serializer = s;
  }
  /**
   * Tracks whether or not a handshake has been successfully exchanged and
   * the stream is ready to accept mutations.
   */
  get R_() {
    return this.Xo > 0;
  }
  // Override of PersistentStream.start
  start() {
    this.lastStreamToken = void 0, super.start();
  }
  c_() {
    this.R_ && this.V_([]);
  }
  I_(e, t) {
    return this.connection.Lo("Write", e, t);
  }
  T_(e) {
    return De(!!e.streamToken), this.lastStreamToken = e.streamToken, // The first response is always the handshake response
    De(!e.writeResults || e.writeResults.length === 0), this.listener.m_();
  }
  onNext(e) {
    De(!!e.streamToken), this.lastStreamToken = e.streamToken, // A successful first write response means the stream is healthy,
    // Note, that we could consider a successful handshake healthy, however,
    // the write itself might be causing an error we want to back off from.
    this.e_.reset();
    const t = _k(e.writeResults, e.commitTime), r = on(e.commitTime);
    return this.listener.f_(r, t);
  }
  /**
   * Sends an initial streamToken to the server, performing the handshake
   * required to make the StreamingWrite RPC work. Subsequent
   * calls should wait until onHandshakeComplete was called.
   */
  g_() {
    const e = {};
    e.database = Vu(this.serializer), this.__(e);
  }
  /** Sends a group of mutations to the Firestore backend to apply. */
  V_(e) {
    const t = {
      streamToken: this.lastStreamToken,
      writes: e.map((r) => yk(this.serializer, r))
    };
    this.__(t);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class oO extends class {
} {
  constructor(e, t, r, i) {
    super(), this.authCredentials = e, this.appCheckCredentials = t, this.connection = r, this.serializer = i, this.p_ = !1;
  }
  y_() {
    if (this.p_) throw new X(B.FAILED_PRECONDITION, "The client has already been terminated.");
  }
  /** Invokes the provided RPC with auth and AppCheck tokens. */
  Fo(e, t, r, i) {
    return this.y_(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(([s, o]) => this.connection.Fo(e, Lu(t, r), i, s, o)).catch((s) => {
      throw s.name === "FirebaseError" ? (s.code === B.UNAUTHENTICATED && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), s) : new X(B.UNKNOWN, s.toString());
    });
  }
  /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */
  No(e, t, r, i, s) {
    return this.y_(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(([o, c]) => this.connection.No(e, Lu(t, r), i, o, c, s)).catch((o) => {
      throw o.name === "FirebaseError" ? (o.code === B.UNAUTHENTICATED && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), o) : new X(B.UNKNOWN, o.toString());
    });
  }
  terminate() {
    this.p_ = !0, this.connection.terminate();
  }
}
class aO {
  constructor(e, t) {
    this.asyncQueue = e, this.onlineStateHandler = t, /** The current OnlineState. */
    this.state = "Unknown", /**
    * A count of consecutive failures to open the stream. If it reaches the
    * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
    * Offline.
    */
    this.w_ = 0, /**
    * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
    * transition from OnlineState.Unknown to OnlineState.Offline without waiting
    * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
    */
    this.S_ = null, /**
    * Whether the client should log a warning message if it fails to connect to
    * the backend (initially true, cleared after a successful stream, or if we've
    * logged the message already).
    */
    this.b_ = !0;
  }
  /**
   * Called by RemoteStore when a watch stream is started (including on each
   * backoff attempt).
   *
   * If this is the first attempt, it sets the OnlineState to Unknown and starts
   * the onlineStateTimer.
   */
  D_() {
    this.w_ === 0 && (this.C_(
      "Unknown"
      /* OnlineState.Unknown */
    ), this.S_ = this.asyncQueue.enqueueAfterDelay("online_state_timeout", 1e4, () => (this.S_ = null, this.v_("Backend didn't respond within 10 seconds."), this.C_(
      "Offline"
      /* OnlineState.Offline */
    ), Promise.resolve())));
  }
  /**
   * Updates our OnlineState as appropriate after the watch stream reports a
   * failure. The first failure moves us to the 'Unknown' state. We then may
   * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
   * actually transition to the 'Offline' state.
   */
  F_(e) {
    this.state === "Online" ? this.C_(
      "Unknown"
      /* OnlineState.Unknown */
    ) : (this.w_++, this.w_ >= 1 && (this.M_(), this.v_(`Connection failed 1 times. Most recent error: ${e.toString()}`), this.C_(
      "Offline"
      /* OnlineState.Offline */
    )));
  }
  /**
   * Explicitly sets the OnlineState to the specified state.
   *
   * Note that this resets our timers / failure counters, etc. used by our
   * Offline heuristics, so must not be used in place of
   * handleWatchStreamStart() and handleWatchStreamFailure().
   */
  set(e) {
    this.M_(), this.w_ = 0, e === "Online" && // We've connected to watch at least once. Don't warn the developer
    // about being offline going forward.
    (this.b_ = !1), this.C_(e);
  }
  C_(e) {
    e !== this.state && (this.state = e, this.onlineStateHandler(e));
  }
  v_(e) {
    const t = `Could not reach Cloud Firestore backend. ${e}
This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;
    this.b_ ? (Sn(t), this.b_ = !1) : ee("OnlineStateTracker", t);
  }
  M_() {
    this.S_ !== null && (this.S_.cancel(), this.S_ = null);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class cO {
  constructor(e, t, r, i, s) {
    this.localStore = e, this.datastore = t, this.asyncQueue = r, this.remoteSyncer = {}, /**
    * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
    * LocalStore via fillWritePipeline() and have or will send to the write
    * stream.
    *
    * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
    * restart the write stream. When the stream is established the writes in the
    * pipeline will be sent in order.
    *
    * Writes remain in writePipeline until they are acknowledged by the backend
    * and thus will automatically be re-sent if the stream is interrupted /
    * restarted before they're acknowledged.
    *
    * Write responses from the backend are linked to their originating request
    * purely based on order, and so we can just shift() writes from the front of
    * the writePipeline as we receive responses.
    */
    this.x_ = [], /**
    * A mapping of watched targets that the client cares about tracking and the
    * user has explicitly called a 'listen' for this target.
    *
    * These targets may or may not have been sent to or acknowledged by the
    * server. On re-establishing the listen stream, these targets should be sent
    * to the server. The targets removed with unlistens are removed eagerly
    * without waiting for confirmation from the listen stream.
    */
    this.O_ = /* @__PURE__ */ new Map(), /**
    * A set of reasons for why the RemoteStore may be offline. If empty, the
    * RemoteStore may start its network connections.
    */
    this.N_ = /* @__PURE__ */ new Set(), /**
    * Event handlers that get called when the network is disabled or enabled.
    *
    * PORTING NOTE: These functions are used on the Web client to create the
    * underlying streams (to support tree-shakeable streams). On Android and iOS,
    * the streams are created during construction of RemoteStore.
    */
    this.L_ = [], this.B_ = s, this.B_.oo((o) => {
      r.enqueueAndForget(async () => {
        xr(this) && (ee("RemoteStore", "Restarting streams for network reachability change."), await async function(u) {
          const l = fe(u);
          l.N_.add(
            4
            /* OfflineCause.ConnectivityChange */
          ), await xs(l), l.k_.set(
            "Unknown"
            /* OnlineState.Unknown */
          ), l.N_.delete(
            4
            /* OfflineCause.ConnectivityChange */
          ), await Ma(l);
        }(this));
      });
    }), this.k_ = new aO(r, i);
  }
}
async function Ma(n) {
  if (xr(n)) for (const e of n.L_) await e(
    /* enabled= */
    !0
  );
}
async function xs(n) {
  for (const e of n.L_) await e(
    /* enabled= */
    !1
  );
}
function T_(n, e) {
  const t = fe(n);
  t.O_.has(e.targetId) || // Mark this as something the client is currently listening for.
  (t.O_.set(e.targetId, e), Wl(t) ? (
    // The listen will be sent in onWatchStreamOpen
    Gl(t)
  ) : Ei(t).n_() && Hl(t, e));
}
function zl(n, e) {
  const t = fe(n), r = Ei(t);
  t.O_.delete(e), r.n_() && b_(t, e), t.O_.size === 0 && (r.n_() ? r.s_() : xr(t) && // Revert to OnlineState.Unknown if the watch stream is not open and we
  // have no listeners, since without any listens to send we cannot
  // confirm if the stream is healthy and upgrade to OnlineState.Online.
  t.k_.set(
    "Unknown"
    /* OnlineState.Unknown */
  ));
}
function Hl(n, e) {
  if (n.q_.xe(e.targetId), e.resumeToken.approximateByteSize() > 0 || e.snapshotVersion.compareTo(he.min()) > 0) {
    const t = n.remoteSyncer.getRemoteKeysForTarget(e.targetId).size;
    e = e.withExpectedCount(t);
  }
  Ei(n).d_(e);
}
function b_(n, e) {
  n.q_.xe(e), Ei(n).A_(e);
}
function Gl(n) {
  n.q_ = new uk({
    getRemoteKeysForTarget: (e) => n.remoteSyncer.getRemoteKeysForTarget(e),
    ot: (e) => n.O_.get(e) || null,
    tt: () => n.datastore.serializer.databaseId
  }), Ei(n).start(), n.k_.D_();
}
function Wl(n) {
  return xr(n) && !Ei(n).t_() && n.O_.size > 0;
}
function xr(n) {
  return fe(n).N_.size === 0;
}
function I_(n) {
  n.q_ = void 0;
}
async function uO(n) {
  n.k_.set(
    "Online"
    /* OnlineState.Online */
  );
}
async function lO(n) {
  n.O_.forEach((e, t) => {
    Hl(n, e);
  });
}
async function hO(n, e) {
  I_(n), // If we still need the watch stream, retry the connection.
  Wl(n) ? (n.k_.F_(e), Gl(n)) : (
    // No need to restart watch stream because there are no active targets.
    // The online state is set to unknown because there is no active attempt
    // at establishing a connection
    n.k_.set(
      "Unknown"
      /* OnlineState.Unknown */
    )
  );
}
async function fO(n, e, t) {
  if (
    // Mark the client as online since we got a message from the server
    n.k_.set(
      "Online"
      /* OnlineState.Online */
    ), e instanceof l_ && e.state === 2 && e.cause
  )
    try {
      await /** Handles an error on a target */
      async function(i, s) {
        const o = s.cause;
        for (const c of s.targetIds)
          i.O_.has(c) && (await i.remoteSyncer.rejectListen(c, o), i.O_.delete(c), i.q_.removeTarget(c));
      }(n, e);
    } catch (r) {
      ee("RemoteStore", "Failed to remove targets %s: %s ", e.targetIds.join(","), r), await na(n, r);
    }
  else if (e instanceof ko ? n.q_.Ke(e) : e instanceof u_ ? n.q_.He(e) : n.q_.We(e), !t.isEqual(he.min())) try {
    const r = await v_(n.localStore);
    t.compareTo(r) >= 0 && // We have received a target change with a global snapshot if the snapshot
    // version is not equal to SnapshotVersion.min().
    await /**
    * Takes a batch of changes from the Datastore, repackages them as a
    * RemoteEvent, and passes that on to the listener, which is typically the
    * SyncEngine.
    */
    function(s, o) {
      const c = s.q_.rt(o);
      return c.targetChanges.forEach((u, l) => {
        if (u.resumeToken.approximateByteSize() > 0) {
          const f = s.O_.get(l);
          f && s.O_.set(l, f.withResumeToken(u.resumeToken, o));
        }
      }), // Re-establish listens for the targets that have been invalidated by
      // existence filter mismatches.
      c.targetMismatches.forEach((u, l) => {
        const f = s.O_.get(u);
        if (!f)
          return;
        s.O_.set(u, f.withResumeToken(ht.EMPTY_BYTE_STRING, f.snapshotVersion)), // Cause a hard reset by unwatching and rewatching immediately, but
        // deliberately don't send a resume token so that we get a full update.
        b_(s, u);
        const h = new Un(f.target, u, l, f.sequenceNumber);
        Hl(s, h);
      }), s.remoteSyncer.applyRemoteEvent(c);
    }(n, t);
  } catch (r) {
    ee("RemoteStore", "Failed to raise snapshot:", r), await na(n, r);
  }
}
async function na(n, e, t) {
  if (!ks(e)) throw e;
  n.N_.add(
    1
    /* OfflineCause.IndexedDbFailed */
  ), // Disable network and raise offline snapshots
  await xs(n), n.k_.set(
    "Offline"
    /* OnlineState.Offline */
  ), t || // Use a simple read operation to determine if IndexedDB recovered.
  // Ideally, we would expose a health check directly on SimpleDb, but
  // RemoteStore only has access to persistence through LocalStore.
  (t = () => v_(n.localStore)), // Probe IndexedDB periodically and re-enable network
  n.asyncQueue.enqueueRetryable(async () => {
    ee("RemoteStore", "Retrying IndexedDB access"), await t(), n.N_.delete(
      1
      /* OfflineCause.IndexedDbFailed */
    ), await Ma(n);
  });
}
function S_(n, e) {
  return e().catch((t) => na(n, t, e));
}
async function Va(n) {
  const e = fe(n), t = Qn(e);
  let r = e.x_.length > 0 ? e.x_[e.x_.length - 1].batchId : -1;
  for (; dO(e); ) try {
    const i = await Yk(e.localStore, r);
    if (i === null) {
      e.x_.length === 0 && t.s_();
      break;
    }
    r = i.batchId, pO(e, i);
  } catch (i) {
    await na(e, i);
  }
  A_(e) && R_(e);
}
function dO(n) {
  return xr(n) && n.x_.length < 10;
}
function pO(n, e) {
  n.x_.push(e);
  const t = Qn(n);
  t.n_() && t.R_ && t.V_(e.mutations);
}
function A_(n) {
  return xr(n) && !Qn(n).t_() && n.x_.length > 0;
}
function R_(n) {
  Qn(n).start();
}
async function mO(n) {
  Qn(n).g_();
}
async function gO(n) {
  const e = Qn(n);
  for (const t of n.x_) e.V_(t.mutations);
}
async function yO(n, e, t) {
  const r = n.x_.shift(), i = Ul.from(r, e, t);
  await S_(n, () => n.remoteSyncer.applySuccessfulWrite(i)), // It's possible that with the completion of this mutation another
  // slot has freed up.
  await Va(n);
}
async function _O(n, e) {
  e && Qn(n).R_ && // This error affects the actual write.
  await async function(r, i) {
    if (function(o) {
      return ok(o) && o !== B.ABORTED;
    }(i.code)) {
      const s = r.x_.shift();
      Qn(r).i_(), await S_(r, () => r.remoteSyncer.rejectFailedWrite(s.batchId, i)), // It's possible that with the completion of this mutation
      // another slot has freed up.
      await Va(r);
    }
  }(n, e), // The write stream might have been started by refilling the write
  // pipeline for failed writes
  A_(n) && R_(n);
}
async function Op(n, e) {
  const t = fe(n);
  t.asyncQueue.verifyOperationInProgress(), ee("RemoteStore", "RemoteStore received new credentials");
  const r = xr(t);
  t.N_.add(
    3
    /* OfflineCause.CredentialChange */
  ), await xs(t), r && // Don't set the network status to Unknown if we are offline.
  t.k_.set(
    "Unknown"
    /* OnlineState.Unknown */
  ), await t.remoteSyncer.handleCredentialChange(e), t.N_.delete(
    3
    /* OfflineCause.CredentialChange */
  ), await Ma(t);
}
async function vO(n, e) {
  const t = fe(n);
  e ? (t.N_.delete(
    2
    /* OfflineCause.IsSecondary */
  ), await Ma(t)) : e || (t.N_.add(
    2
    /* OfflineCause.IsSecondary */
  ), await xs(t), t.k_.set(
    "Unknown"
    /* OnlineState.Unknown */
  ));
}
function Ei(n) {
  return n.Q_ || // Create stream (but note that it is not started yet).
  (n.Q_ = function(t, r, i) {
    const s = fe(t);
    return s.y_(), new iO(r, s.connection, s.authCredentials, s.appCheckCredentials, s.serializer, i);
  }(n.datastore, n.asyncQueue, {
    To: uO.bind(null, n),
    Ao: lO.bind(null, n),
    Vo: hO.bind(null, n),
    E_: fO.bind(null, n)
  }), n.L_.push(async (e) => {
    e ? (n.Q_.i_(), Wl(n) ? Gl(n) : n.k_.set(
      "Unknown"
      /* OnlineState.Unknown */
    )) : (await n.Q_.stop(), I_(n));
  })), n.Q_;
}
function Qn(n) {
  return n.K_ || // Create stream (but note that it is not started yet).
  (n.K_ = function(t, r, i) {
    const s = fe(t);
    return s.y_(), new sO(r, s.connection, s.authCredentials, s.appCheckCredentials, s.serializer, i);
  }(n.datastore, n.asyncQueue, {
    To: () => Promise.resolve(),
    Ao: mO.bind(null, n),
    Vo: _O.bind(null, n),
    m_: gO.bind(null, n),
    f_: yO.bind(null, n)
  }), n.L_.push(async (e) => {
    e ? (n.K_.i_(), // This will start the write stream if necessary.
    await Va(n)) : (await n.K_.stop(), n.x_.length > 0 && (ee("RemoteStore", `Stopping write stream with ${n.x_.length} pending writes`), n.x_ = []));
  })), n.K_;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Ql {
  constructor(e, t, r, i, s) {
    this.asyncQueue = e, this.timerId = t, this.targetTimeMs = r, this.op = i, this.removalCallback = s, this.deferred = new Bn(), this.then = this.deferred.promise.then.bind(this.deferred.promise), // It's normal for the deferred promise to be canceled (due to cancellation)
    // and so we attach a dummy catch callback to avoid
    // 'UnhandledPromiseRejectionWarning' log spam.
    this.deferred.promise.catch((o) => {
    });
  }
  get promise() {
    return this.deferred.promise;
  }
  /**
   * Creates and returns a DelayedOperation that has been scheduled to be
   * executed on the provided asyncQueue after the provided delayMs.
   *
   * @param asyncQueue - The queue to schedule the operation on.
   * @param id - A Timer ID identifying the type of operation this is.
   * @param delayMs - The delay (ms) before the operation should be scheduled.
   * @param op - The operation to run.
   * @param removalCallback - A callback to be called synchronously once the
   *   operation is executed or canceled, notifying the AsyncQueue to remove it
   *   from its delayedOperations list.
   *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
   *   the DelayedOperation class public.
   */
  static createAndSchedule(e, t, r, i, s) {
    const o = Date.now() + r, c = new Ql(e, t, o, i, s);
    return c.start(r), c;
  }
  /**
   * Starts the timer. This is called immediately after construction by
   * createAndSchedule().
   */
  start(e) {
    this.timerHandle = setTimeout(() => this.handleDelayElapsed(), e);
  }
  /**
   * Queues the operation to run immediately (if it hasn't already been run or
   * canceled).
   */
  skipDelay() {
    return this.handleDelayElapsed();
  }
  /**
   * Cancels the operation if it hasn't already been executed or canceled. The
   * promise will be rejected.
   *
   * As long as the operation has not yet been run, calling cancel() provides a
   * guarantee that the operation will not be run.
   */
  cancel(e) {
    this.timerHandle !== null && (this.clearTimeout(), this.deferred.reject(new X(B.CANCELLED, "Operation cancelled" + (e ? ": " + e : ""))));
  }
  handleDelayElapsed() {
    this.asyncQueue.enqueueAndForget(() => this.timerHandle !== null ? (this.clearTimeout(), this.op().then((e) => this.deferred.resolve(e))) : Promise.resolve());
  }
  clearTimeout() {
    this.timerHandle !== null && (this.removalCallback(this), clearTimeout(this.timerHandle), this.timerHandle = null);
  }
}
function Yl(n, e) {
  if (Sn("AsyncQueue", `${e}: ${n}`), ks(n)) return new X(B.UNAVAILABLE, `${e}: ${n}`);
  throw n;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Zr {
  /** The default ordering is by key if the comparator is omitted */
  constructor(e) {
    this.comparator = e ? (t, r) => e(t, r) || se.comparator(t.key, r.key) : (t, r) => se.comparator(t.key, r.key), this.keyedMap = Gi(), this.sortedSet = new Me(this.comparator);
  }
  /**
   * Returns an empty copy of the existing DocumentSet, using the same
   * comparator.
   */
  static emptySet(e) {
    return new Zr(e.comparator);
  }
  has(e) {
    return this.keyedMap.get(e) != null;
  }
  get(e) {
    return this.keyedMap.get(e);
  }
  first() {
    return this.sortedSet.minKey();
  }
  last() {
    return this.sortedSet.maxKey();
  }
  isEmpty() {
    return this.sortedSet.isEmpty();
  }
  /**
   * Returns the index of the provided key in the document set, or -1 if the
   * document key is not present in the set;
   */
  indexOf(e) {
    const t = this.keyedMap.get(e);
    return t ? this.sortedSet.indexOf(t) : -1;
  }
  get size() {
    return this.sortedSet.size;
  }
  /** Iterates documents in order defined by "comparator" */
  forEach(e) {
    this.sortedSet.inorderTraversal((t, r) => (e(t), !1));
  }
  /** Inserts or updates a document with the same key */
  add(e) {
    const t = this.delete(e.key);
    return t.copy(t.keyedMap.insert(e.key, e), t.sortedSet.insert(e, null));
  }
  /** Deletes a document with a given key */
  delete(e) {
    const t = this.get(e);
    return t ? this.copy(this.keyedMap.remove(e), this.sortedSet.remove(t)) : this;
  }
  isEqual(e) {
    if (!(e instanceof Zr) || this.size !== e.size) return !1;
    const t = this.sortedSet.getIterator(), r = e.sortedSet.getIterator();
    for (; t.hasNext(); ) {
      const i = t.getNext().key, s = r.getNext().key;
      if (!i.isEqual(s)) return !1;
    }
    return !0;
  }
  toString() {
    const e = [];
    return this.forEach((t) => {
      e.push(t.toString());
    }), e.length === 0 ? "DocumentSet ()" : `DocumentSet (
  ` + e.join(`  
`) + `
)`;
  }
  copy(e, t) {
    const r = new Zr();
    return r.comparator = this.comparator, r.keyedMap = e, r.sortedSet = t, r;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Dp {
  constructor() {
    this.U_ = new Me(se.comparator);
  }
  track(e) {
    const t = e.doc.key, r = this.U_.get(t);
    r ? (
      // Merge the new change with the existing change.
      e.type !== 0 && r.type === 3 ? this.U_ = this.U_.insert(t, e) : e.type === 3 && r.type !== 1 ? this.U_ = this.U_.insert(t, {
        type: r.type,
        doc: e.doc
      }) : e.type === 2 && r.type === 2 ? this.U_ = this.U_.insert(t, {
        type: 2,
        doc: e.doc
      }) : e.type === 2 && r.type === 0 ? this.U_ = this.U_.insert(t, {
        type: 0,
        doc: e.doc
      }) : e.type === 1 && r.type === 0 ? this.U_ = this.U_.remove(t) : e.type === 1 && r.type === 2 ? this.U_ = this.U_.insert(t, {
        type: 1,
        doc: r.doc
      }) : e.type === 0 && r.type === 1 ? this.U_ = this.U_.insert(t, {
        type: 2,
        doc: e.doc
      }) : (
        // This includes these cases, which don't make sense:
        // Added->Added
        // Removed->Removed
        // Modified->Added
        // Removed->Modified
        // Metadata->Added
        // Removed->Metadata
        ce()
      )
    ) : this.U_ = this.U_.insert(t, e);
  }
  W_() {
    const e = [];
    return this.U_.inorderTraversal((t, r) => {
      e.push(r);
    }), e;
  }
}
class hi {
  constructor(e, t, r, i, s, o, c, u, l) {
    this.query = e, this.docs = t, this.oldDocs = r, this.docChanges = i, this.mutatedKeys = s, this.fromCache = o, this.syncStateChanged = c, this.excludesMetadataChanges = u, this.hasCachedResults = l;
  }
  /** Returns a view snapshot as if all documents in the snapshot were added. */
  static fromInitialDocuments(e, t, r, i, s) {
    const o = [];
    return t.forEach((c) => {
      o.push({
        type: 0,
        doc: c
      });
    }), new hi(
      e,
      t,
      Zr.emptySet(t),
      o,
      r,
      i,
      /* syncStateChanged= */
      !0,
      /* excludesMetadataChanges= */
      !1,
      s
    );
  }
  get hasPendingWrites() {
    return !this.mutatedKeys.isEmpty();
  }
  isEqual(e) {
    if (!(this.fromCache === e.fromCache && this.hasCachedResults === e.hasCachedResults && this.syncStateChanged === e.syncStateChanged && this.mutatedKeys.isEqual(e.mutatedKeys) && ka(this.query, e.query) && this.docs.isEqual(e.docs) && this.oldDocs.isEqual(e.oldDocs))) return !1;
    const t = this.docChanges, r = e.docChanges;
    if (t.length !== r.length) return !1;
    for (let i = 0; i < t.length; i++) if (t[i].type !== r[i].type || !t[i].doc.isEqual(r[i].doc)) return !1;
    return !0;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class wO {
  constructor() {
    this.G_ = void 0, this.z_ = [];
  }
  // Helper methods that checks if the query has listeners that listening to remote store
  j_() {
    return this.z_.some((e) => e.H_());
  }
}
class EO {
  constructor() {
    this.queries = Np(), this.onlineState = "Unknown", this.J_ = /* @__PURE__ */ new Set();
  }
  terminate() {
    (function(t, r) {
      const i = fe(t), s = i.queries;
      i.queries = Np(), s.forEach((o, c) => {
        for (const u of c.z_) u.onError(r);
      });
    })(this, new X(B.ABORTED, "Firestore shutting down"));
  }
}
function Np() {
  return new wi((n) => Wy(n), ka);
}
async function C_(n, e) {
  const t = fe(n);
  let r = 3;
  const i = e.query;
  let s = t.queries.get(i);
  s ? !s.j_() && e.H_() && // Query has been listening to local cache, and tries to add a new listener sourced from watch.
  (r = 2) : (s = new wO(), r = e.H_() ? 0 : 1);
  try {
    switch (r) {
      case 0:
        s.G_ = await t.onListen(
          i,
          /** enableRemoteListen= */
          !0
        );
        break;
      case 1:
        s.G_ = await t.onListen(
          i,
          /** enableRemoteListen= */
          !1
        );
        break;
      case 2:
        await t.onFirstRemoteStoreListen(i);
    }
  } catch (o) {
    const c = Yl(o, `Initialization of query '${Br(e.query)}' failed`);
    return void e.onError(c);
  }
  t.queries.set(i, s), s.z_.push(e), // Run global snapshot listeners if a consistent snapshot has been emitted.
  e.Y_(t.onlineState), s.G_ && e.Z_(s.G_) && Jl(t);
}
async function P_(n, e) {
  const t = fe(n), r = e.query;
  let i = 3;
  const s = t.queries.get(r);
  if (s) {
    const o = s.z_.indexOf(e);
    o >= 0 && (s.z_.splice(o, 1), s.z_.length === 0 ? i = e.H_() ? 0 : 1 : !s.j_() && e.H_() && // The removed listener is the last one that sourced from watch.
    (i = 2));
  }
  switch (i) {
    case 0:
      return t.queries.delete(r), t.onUnlisten(
        r,
        /** disableRemoteListen= */
        !0
      );
    case 1:
      return t.queries.delete(r), t.onUnlisten(
        r,
        /** disableRemoteListen= */
        !1
      );
    case 2:
      return t.onLastRemoteStoreUnlisten(r);
    default:
      return;
  }
}
function TO(n, e) {
  const t = fe(n);
  let r = !1;
  for (const i of e) {
    const s = i.query, o = t.queries.get(s);
    if (o) {
      for (const c of o.z_) c.Z_(i) && (r = !0);
      o.G_ = i;
    }
  }
  r && Jl(t);
}
function bO(n, e, t) {
  const r = fe(n), i = r.queries.get(e);
  if (i) for (const s of i.z_) s.onError(t);
  r.queries.delete(e);
}
function Jl(n) {
  n.J_.forEach((e) => {
    e.next();
  });
}
var Uu, xp;
(xp = Uu || (Uu = {})).X_ = "default", /** Listen to changes in cache only */
xp.Cache = "cache";
class k_ {
  constructor(e, t, r) {
    this.query = e, this.ea = t, /**
    * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
    * observer. This flag is set to true once we've actually raised an event.
    */
    this.ta = !1, this.na = null, this.onlineState = "Unknown", this.options = r || {};
  }
  /**
   * Applies the new ViewSnapshot to this listener, raising a user-facing event
   * if applicable (depending on what changed, whether the user has opted into
   * metadata-only changes, etc.). Returns true if a user-facing event was
   * indeed raised.
   */
  Z_(e) {
    if (!this.options.includeMetadataChanges) {
      const r = [];
      for (const i of e.docChanges) i.type !== 3 && r.push(i);
      e = new hi(
        e.query,
        e.docs,
        e.oldDocs,
        r,
        e.mutatedKeys,
        e.fromCache,
        e.syncStateChanged,
        /* excludesMetadataChanges= */
        !0,
        e.hasCachedResults
      );
    }
    let t = !1;
    return this.ta ? this.ra(e) && (this.ea.next(e), t = !0) : this.ia(e, this.onlineState) && (this.sa(e), t = !0), this.na = e, t;
  }
  onError(e) {
    this.ea.error(e);
  }
  /** Returns whether a snapshot was raised. */
  Y_(e) {
    this.onlineState = e;
    let t = !1;
    return this.na && !this.ta && this.ia(this.na, e) && (this.sa(this.na), t = !0), t;
  }
  ia(e, t) {
    if (!e.fromCache || !this.H_()) return !0;
    const r = t !== "Offline";
    return (!this.options.oa || !r) && (!e.docs.isEmpty() || e.hasCachedResults || t === "Offline");
  }
  ra(e) {
    if (e.docChanges.length > 0) return !0;
    const t = this.na && this.na.hasPendingWrites !== e.hasPendingWrites;
    return !(!e.syncStateChanged && !t) && this.options.includeMetadataChanges === !0;
  }
  sa(e) {
    e = hi.fromInitialDocuments(e.query, e.docs, e.mutatedKeys, e.fromCache, e.hasCachedResults), this.ta = !0, this.ea.next(e);
  }
  H_() {
    return this.options.source !== Uu.Cache;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class O_ {
  constructor(e) {
    this.key = e;
  }
}
class D_ {
  constructor(e) {
    this.key = e;
  }
}
class IO {
  constructor(e, t) {
    this.query = e, this.Ia = t, this.Ta = null, this.hasCachedResults = !1, /**
    * A flag whether the view is current with the backend. A view is considered
    * current after it has seen the current flag from the backend and did not
    * lose consistency within the watch stream (e.g. because of an existence
    * filter mismatch).
    */
    this.current = !1, /** Documents in the view but not in the remote target */
    this.Ea = ye(), /** Document Keys that have local changes */
    this.mutatedKeys = ye(), this.da = Qy(e), this.Aa = new Zr(this.da);
  }
  /**
   * The set of remote documents that the server has told us belongs to the target associated with
   * this view.
   */
  get Ra() {
    return this.Ia;
  }
  /**
   * Iterates over a set of doc changes, applies the query limit, and computes
   * what the new results should be, what the changes were, and whether we may
   * need to go back to the local cache for more results. Does not make any
   * changes to the view.
   * @param docChanges - The doc changes to apply to this view.
   * @param previousChanges - If this is being called with a refill, then start
   *        with this set of docs and changes instead of the current view.
   * @returns a new set of docs, changes, and refill flag.
   */
  Va(e, t) {
    const r = t ? t.ma : new Dp(), i = t ? t.Aa : this.Aa;
    let s = t ? t.mutatedKeys : this.mutatedKeys, o = i, c = !1;
    const u = this.query.limitType === "F" && i.size === this.query.limit ? i.last() : null, l = this.query.limitType === "L" && i.size === this.query.limit ? i.first() : null;
    if (e.inorderTraversal((f, h) => {
      const y = i.get(f), T = Oa(this.query, h) ? h : null, S = !!y && this.mutatedKeys.has(y.key), C = !!T && (T.hasLocalMutations || // We only consider committed mutations for documents that were
      // mutated during the lifetime of the view.
      this.mutatedKeys.has(T.key) && T.hasCommittedMutations);
      let w = !1;
      y && T ? y.data.isEqual(T.data) ? S !== C && (r.track({
        type: 3,
        doc: T
      }), w = !0) : this.fa(y, T) || (r.track({
        type: 2,
        doc: T
      }), w = !0, (u && this.da(T, u) > 0 || l && this.da(T, l) < 0) && // This doc moved from inside the limit to outside the limit.
      // That means there may be some other doc in the local cache
      // that should be included instead.
      (c = !0)) : !y && T ? (r.track({
        type: 0,
        doc: T
      }), w = !0) : y && !T && (r.track({
        type: 1,
        doc: y
      }), w = !0, (u || l) && // A doc was removed from a full limit query. We'll need to
      // requery from the local cache to see if we know about some other
      // doc that should be in the results.
      (c = !0)), w && (T ? (o = o.add(T), s = C ? s.add(f) : s.delete(f)) : (o = o.delete(f), s = s.delete(f)));
    }), this.query.limit !== null) for (; o.size > this.query.limit; ) {
      const f = this.query.limitType === "F" ? o.last() : o.first();
      o = o.delete(f.key), s = s.delete(f.key), r.track({
        type: 1,
        doc: f
      });
    }
    return {
      Aa: o,
      ma: r,
      ts: c,
      mutatedKeys: s
    };
  }
  fa(e, t) {
    return e.hasLocalMutations && t.hasCommittedMutations && !t.hasLocalMutations;
  }
  /**
   * Updates the view with the given ViewDocumentChanges and optionally updates
   * limbo docs and sync state from the provided target change.
   * @param docChanges - The set of changes to make to the view's docs.
   * @param limboResolutionEnabled - Whether to update limbo documents based on
   *        this change.
   * @param targetChange - A target change to apply for computing limbo docs and
   *        sync state.
   * @param targetIsPendingReset - Whether the target is pending to reset due to
   *        existence filter mismatch. If not explicitly specified, it is treated
   *        equivalently to `false`.
   * @returns A new ViewChange with the given docs, changes, and sync state.
   */
  // PORTING NOTE: The iOS/Android clients always compute limbo document changes.
  applyChanges(e, t, r, i) {
    const s = this.Aa;
    this.Aa = e.Aa, this.mutatedKeys = e.mutatedKeys;
    const o = e.ma.W_();
    o.sort((f, h) => function(T, S) {
      const C = (w) => {
        switch (w) {
          case 0:
            return 1;
          case 2:
          case 3:
            return 2;
          case 1:
            return 0;
          default:
            return ce();
        }
      };
      return C(T) - C(S);
    }(f.type, h.type) || this.da(f.doc, h.doc)), this.ga(r), i = i != null && i;
    const c = t && !i ? this.pa() : [], u = this.Ea.size === 0 && this.current && !i ? 1 : 0, l = u !== this.Ta;
    return this.Ta = u, o.length !== 0 || l ? {
      snapshot: new hi(
        this.query,
        e.Aa,
        s,
        o,
        e.mutatedKeys,
        u === 0,
        l,
        /* excludesMetadataChanges= */
        !1,
        !!r && r.resumeToken.approximateByteSize() > 0
      ),
      ya: c
    } : {
      ya: c
    };
  }
  /**
   * Applies an OnlineState change to the view, potentially generating a
   * ViewChange if the view's syncState changes as a result.
   */
  Y_(e) {
    return this.current && e === "Offline" ? (
      // If we're offline, set `current` to false and then call applyChanges()
      // to refresh our syncState and generate a ViewChange as appropriate. We
      // are guaranteed to get a new TargetChange that sets `current` back to
      // true once the client is back online.
      (this.current = !1, this.applyChanges(
        {
          Aa: this.Aa,
          ma: new Dp(),
          mutatedKeys: this.mutatedKeys,
          ts: !1
        },
        /* limboResolutionEnabled= */
        !1
      ))
    ) : {
      ya: []
    };
  }
  /**
   * Returns whether the doc for the given key should be in limbo.
   */
  wa(e) {
    return !this.Ia.has(e) && // The local store doesn't think it's a result, so it shouldn't be in limbo.
    !!this.Aa.has(e) && !this.Aa.get(e).hasLocalMutations;
  }
  /**
   * Updates syncedDocuments, current, and limbo docs based on the given change.
   * Returns the list of changes to which docs are in limbo.
   */
  ga(e) {
    e && (e.addedDocuments.forEach((t) => this.Ia = this.Ia.add(t)), e.modifiedDocuments.forEach((t) => {
    }), e.removedDocuments.forEach((t) => this.Ia = this.Ia.delete(t)), this.current = e.current);
  }
  pa() {
    if (!this.current) return [];
    const e = this.Ea;
    this.Ea = ye(), this.Aa.forEach((r) => {
      this.wa(r.key) && (this.Ea = this.Ea.add(r.key));
    });
    const t = [];
    return e.forEach((r) => {
      this.Ea.has(r) || t.push(new D_(r));
    }), this.Ea.forEach((r) => {
      e.has(r) || t.push(new O_(r));
    }), t;
  }
  /**
   * Update the in-memory state of the current view with the state read from
   * persistence.
   *
   * We update the query view whenever a client's primary status changes:
   * - When a client transitions from primary to secondary, it can miss
   *   LocalStorage updates and its query views may temporarily not be
   *   synchronized with the state on disk.
   * - For secondary to primary transitions, the client needs to update the list
   *   of `syncedDocuments` since secondary clients update their query views
   *   based purely on synthesized RemoteEvents.
   *
   * @param queryResult.documents - The documents that match the query according
   * to the LocalStore.
   * @param queryResult.remoteKeys - The keys of the documents that match the
   * query according to the backend.
   *
   * @returns The ViewChange that resulted from this synchronization.
   */
  // PORTING NOTE: Multi-tab only.
  Sa(e) {
    this.Ia = e.Is, this.Ea = ye();
    const t = this.Va(e.documents);
    return this.applyChanges(
      t,
      /* limboResolutionEnabled= */
      !0
    );
  }
  /**
   * Returns a view snapshot as if this query was just listened to. Contains
   * a document add for every existing document and the `fromCache` and
   * `hasPendingWrites` status of the already established view.
   */
  // PORTING NOTE: Multi-tab only.
  ba() {
    return hi.fromInitialDocuments(this.query, this.Aa, this.mutatedKeys, this.Ta === 0, this.hasCachedResults);
  }
}
class SO {
  constructor(e, t, r) {
    this.query = e, this.targetId = t, this.view = r;
  }
}
class AO {
  constructor(e) {
    this.key = e, /**
    * Set to true once we've received a document. This is used in
    * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to
    * decide whether it needs to manufacture a delete event for the target once
    * the target is CURRENT.
    */
    this.Da = !1;
  }
}
class RO {
  constructor(e, t, r, i, s, o) {
    this.localStore = e, this.remoteStore = t, this.eventManager = r, this.sharedClientState = i, this.currentUser = s, this.maxConcurrentLimboResolutions = o, this.Ca = {}, this.va = new wi((c) => Wy(c), ka), this.Fa = /* @__PURE__ */ new Map(), /**
    * The keys of documents that are in limbo for which we haven't yet started a
    * limbo resolution query. The strings in this set are the result of calling
    * `key.path.canonicalString()` where `key` is a `DocumentKey` object.
    *
    * The `Set` type was chosen because it provides efficient lookup and removal
    * of arbitrary elements and it also maintains insertion order, providing the
    * desired queue-like FIFO semantics.
    */
    this.Ma = /* @__PURE__ */ new Set(), /**
    * Keeps track of the target ID for each document that is in limbo with an
    * active target.
    */
    this.xa = new Me(se.comparator), /**
    * Keeps track of the information about an active limbo resolution for each
    * active target ID that was started for the purpose of limbo resolution.
    */
    this.Oa = /* @__PURE__ */ new Map(), this.Na = new Bl(), /** Stores user completion handlers, indexed by User and BatchId. */
    this.La = {}, /** Stores user callbacks waiting for all pending writes to be acknowledged. */
    this.Ba = /* @__PURE__ */ new Map(), this.ka = li.Bn(), this.onlineState = "Unknown", // The primary state is set to `true` or `false` immediately after Firestore
    // startup. In the interim, a client should only be considered primary if
    // `isPrimary` is true.
    this.qa = void 0;
  }
  get isPrimaryClient() {
    return this.qa === !0;
  }
}
async function CO(n, e, t = !0) {
  const r = F_(n);
  let i;
  const s = r.va.get(e);
  return s ? (
    // PORTING NOTE: With Multi-Tab Web, it is possible that a query view
    // already exists when EventManager calls us for the first time. This
    // happens when the primary tab is already listening to this query on
    // behalf of another tab and the user of the primary also starts listening
    // to the query. EventManager will not have an assigned target ID in this
    // case and calls `listen` to obtain this ID.
    (r.sharedClientState.addLocalQueryTarget(s.targetId), i = s.view.ba())
  ) : i = await N_(
    r,
    e,
    t,
    /** shouldInitializeView= */
    !0
  ), i;
}
async function PO(n, e) {
  const t = F_(n);
  await N_(
    t,
    e,
    /** shouldListenToRemote= */
    !0,
    /** shouldInitializeView= */
    !1
  );
}
async function N_(n, e, t, r) {
  const i = await Jk(n.localStore, sn(e)), s = i.targetId, o = t ? n.sharedClientState.addLocalQueryTarget(s) : "not-current";
  let c;
  return r && (c = await kO(n, e, s, o === "current", i.resumeToken)), n.isPrimaryClient && t && T_(n.remoteStore, i), c;
}
async function kO(n, e, t, r, i) {
  n.Qa = (h, y, T) => async function(C, w, E, g) {
    let d = w.view.Va(E);
    d.ts && // The query has a limit and some docs were removed, so we need
    // to re-run the query against the local store to make sure we
    // didn't lose any good docs that had been past the limit.
    (d = await Cp(
      C.localStore,
      w.query,
      /* usePreviousResults= */
      !1
    ).then(({ documents: R }) => w.view.Va(R, d)));
    const m = g && g.targetChanges.get(w.targetId), v = g && g.targetMismatches.get(w.targetId) != null, I = w.view.applyChanges(
      d,
      /* limboResolutionEnabled= */
      C.isPrimaryClient,
      m,
      v
    );
    return Mp(C, w.targetId, I.ya), I.snapshot;
  }(n, h, y, T);
  const s = await Cp(
    n.localStore,
    e,
    /* usePreviousResults= */
    !0
  ), o = new IO(e, s.Is), c = o.Va(s.documents), u = Ns.createSynthesizedTargetChangeForCurrentChange(t, r && n.onlineState !== "Offline", i), l = o.applyChanges(
    c,
    /* limboResolutionEnabled= */
    n.isPrimaryClient,
    u
  );
  Mp(n, t, l.ya);
  const f = new SO(e, t, o);
  return n.va.set(e, f), n.Fa.has(t) ? n.Fa.get(t).push(e) : n.Fa.set(t, [e]), l.snapshot;
}
async function OO(n, e, t) {
  const r = fe(n), i = r.va.get(e), s = r.Fa.get(i.targetId);
  if (s.length > 1) return r.Fa.set(i.targetId, s.filter((o) => !ka(o, e))), void r.va.delete(e);
  r.isPrimaryClient ? (r.sharedClientState.removeLocalQueryTarget(i.targetId), r.sharedClientState.isActiveQueryTarget(i.targetId) || await Fu(
    r.localStore,
    i.targetId,
    /*keepPersistedTargetData=*/
    !1
  ).then(() => {
    r.sharedClientState.clearQueryState(i.targetId), t && zl(r.remoteStore, i.targetId), ju(r, i.targetId);
  }).catch(Ps)) : (ju(r, i.targetId), await Fu(
    r.localStore,
    i.targetId,
    /*keepPersistedTargetData=*/
    !0
  ));
}
async function DO(n, e) {
  const t = fe(n), r = t.va.get(e), i = t.Fa.get(r.targetId);
  t.isPrimaryClient && i.length === 1 && // PORTING NOTE: Unregister the target ID with local Firestore client as
  // watch target.
  (t.sharedClientState.removeLocalQueryTarget(r.targetId), zl(t.remoteStore, r.targetId));
}
async function NO(n, e, t) {
  const r = jO(n);
  try {
    const i = await function(o, c) {
      const u = fe(o), l = Xe.now(), f = c.reduce((T, S) => T.add(S.key), ye());
      let h, y;
      return u.persistence.runTransaction("Locally write mutations", "readwrite", (T) => {
        let S = An(), C = ye();
        return u.us.getEntries(T, f).next((w) => {
          S = w, S.forEach((E, g) => {
            g.isValidDocument() || (C = C.add(E));
          });
        }).next(() => u.localDocuments.getOverlayedDocuments(T, S)).next((w) => {
          h = w;
          const E = [];
          for (const g of c) {
            const d = tk(g, h.get(g.key).overlayedDocument);
            d != null && // NOTE: The base state should only be applied if there's some
            // existing document to override, so use a Precondition of
            // exists=true
            E.push(new Nr(g.key, d, jy(d.value.mapValue), En.exists(!0)));
          }
          return u.mutationQueue.addMutationBatch(T, l, E, c);
        }).next((w) => {
          y = w;
          const E = w.applyToLocalDocumentSet(h, C);
          return u.documentOverlayCache.saveOverlays(T, w.batchId, E);
        });
      }).then(() => ({
        batchId: y.batchId,
        changes: Jy(h)
      }));
    }(r.localStore, e);
    r.sharedClientState.addPendingMutation(i.batchId), function(o, c, u) {
      let l = o.La[o.currentUser.toKey()];
      l || (l = new Me(Te)), l = l.insert(c, u), o.La[o.currentUser.toKey()] = l;
    }(r, i.batchId, t), await Ls(r, i.changes), await Va(r.remoteStore);
  } catch (i) {
    const s = Yl(i, "Failed to persist write");
    t.reject(s);
  }
}
async function x_(n, e) {
  const t = fe(n);
  try {
    const r = await Wk(t.localStore, e);
    e.targetChanges.forEach((i, s) => {
      const o = t.Oa.get(s);
      o && // Since this is a limbo resolution lookup, it's for a single document
      // and it could be added, modified, or removed, but not a combination.
      (De(i.addedDocuments.size + i.modifiedDocuments.size + i.removedDocuments.size <= 1), i.addedDocuments.size > 0 ? o.Da = !0 : i.modifiedDocuments.size > 0 ? De(o.Da) : i.removedDocuments.size > 0 && (De(o.Da), o.Da = !1));
    }), await Ls(t, r, e);
  } catch (r) {
    await Ps(r);
  }
}
function Lp(n, e, t) {
  const r = fe(n);
  if (r.isPrimaryClient && t === 0 || !r.isPrimaryClient && t === 1) {
    const i = [];
    r.va.forEach((s, o) => {
      const c = o.view.Y_(e);
      c.snapshot && i.push(c.snapshot);
    }), function(o, c) {
      const u = fe(o);
      u.onlineState = c;
      let l = !1;
      u.queries.forEach((f, h) => {
        for (const y of h.z_)
          y.Y_(c) && (l = !0);
      }), l && Jl(u);
    }(r.eventManager, e), i.length && r.Ca.E_(i), r.onlineState = e, r.isPrimaryClient && r.sharedClientState.setOnlineState(e);
  }
}
async function xO(n, e, t) {
  const r = fe(n);
  r.sharedClientState.updateQueryState(e, "rejected", t);
  const i = r.Oa.get(e), s = i && i.key;
  if (s) {
    let o = new Me(se.comparator);
    o = o.insert(s, vt.newNoDocument(s, he.min()));
    const c = ye().add(s), u = new xa(
      he.min(),
      /* targetChanges= */
      /* @__PURE__ */ new Map(),
      /* targetMismatches= */
      new Me(Te),
      o,
      c
    );
    await x_(r, u), // Since this query failed, we won't want to manually unlisten to it.
    // We only remove it from bookkeeping after we successfully applied the
    // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to
    // this query when the RemoteStore restarts the Watch stream, which should
    // re-trigger the target failure.
    r.xa = r.xa.remove(s), r.Oa.delete(e), Xl(r);
  } else await Fu(
    r.localStore,
    e,
    /* keepPersistedTargetData */
    !1
  ).then(() => ju(r, e, t)).catch(Ps);
}
async function LO(n, e) {
  const t = fe(n), r = e.batch.batchId;
  try {
    const i = await Gk(t.localStore, e);
    M_(
      t,
      r,
      /*error=*/
      null
    ), L_(t, r), t.sharedClientState.updateMutationState(r, "acknowledged"), await Ls(t, i);
  } catch (i) {
    await Ps(i);
  }
}
async function MO(n, e, t) {
  const r = fe(n);
  try {
    const i = await function(o, c) {
      const u = fe(o);
      return u.persistence.runTransaction("Reject batch", "readwrite-primary", (l) => {
        let f;
        return u.mutationQueue.lookupMutationBatch(l, c).next((h) => (De(h !== null), f = h.keys(), u.mutationQueue.removeMutationBatch(l, h))).next(() => u.mutationQueue.performConsistencyCheck(l)).next(() => u.documentOverlayCache.removeOverlaysForBatchId(l, f, c)).next(() => u.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(l, f)).next(() => u.localDocuments.getDocuments(l, f));
      });
    }(r.localStore, e);
    M_(r, e, t), L_(r, e), r.sharedClientState.updateMutationState(e, "rejected", t), await Ls(r, i);
  } catch (i) {
    await Ps(i);
  }
}
function L_(n, e) {
  (n.Ba.get(e) || []).forEach((t) => {
    t.resolve();
  }), n.Ba.delete(e);
}
function M_(n, e, t) {
  const r = fe(n);
  let i = r.La[r.currentUser.toKey()];
  if (i) {
    const s = i.get(e);
    s && (t ? s.reject(t) : s.resolve(), i = i.remove(e)), r.La[r.currentUser.toKey()] = i;
  }
}
function ju(n, e, t = null) {
  n.sharedClientState.removeLocalQueryTarget(e);
  for (const r of n.Fa.get(e)) n.va.delete(r), t && n.Ca.Ka(r, t);
  n.Fa.delete(e), n.isPrimaryClient && n.Na.mr(e).forEach((r) => {
    n.Na.containsKey(r) || // We removed the last reference for this key
    V_(n, r);
  });
}
function V_(n, e) {
  n.Ma.delete(e.path.canonicalString());
  const t = n.xa.get(e);
  t !== null && (zl(n.remoteStore, t), n.xa = n.xa.remove(e), n.Oa.delete(t), Xl(n));
}
function Mp(n, e, t) {
  for (const r of t) r instanceof O_ ? (n.Na.addReference(r.key, e), VO(n, r)) : r instanceof D_ ? (ee("SyncEngine", "Document no longer in limbo: " + r.key), n.Na.removeReference(r.key, e), n.Na.containsKey(r.key) || // We removed the last reference for this key
  V_(n, r.key)) : ce();
}
function VO(n, e) {
  const t = e.key, r = t.path.canonicalString();
  n.xa.get(t) || n.Ma.has(r) || (ee("SyncEngine", "New document in limbo: " + t), n.Ma.add(r), Xl(n));
}
function Xl(n) {
  for (; n.Ma.size > 0 && n.xa.size < n.maxConcurrentLimboResolutions; ) {
    const e = n.Ma.values().next().value;
    n.Ma.delete(e);
    const t = new se(xe.fromString(e)), r = n.ka.next();
    n.Oa.set(r, new AO(t)), n.xa = n.xa.insert(t, r), T_(n.remoteStore, new Un(sn(Pa(t.path)), r, "TargetPurposeLimboResolution", Nl.oe));
  }
}
async function Ls(n, e, t) {
  const r = fe(n), i = [], s = [], o = [];
  r.va.isEmpty() || (r.va.forEach((c, u) => {
    o.push(r.Qa(u, e, t).then((l) => {
      var f;
      if ((l || t) && r.isPrimaryClient) {
        const h = l ? !l.fromCache : (f = t == null ? void 0 : t.targetChanges.get(u.targetId)) === null || f === void 0 ? void 0 : f.current;
        r.sharedClientState.updateQueryState(u.targetId, h ? "current" : "not-current");
      }
      if (l) {
        i.push(l);
        const h = Kl.Ui(u.targetId, l);
        s.push(h);
      }
    }));
  }), await Promise.all(o), r.Ca.E_(i), await async function(u, l) {
    const f = fe(u);
    try {
      await f.persistence.runTransaction("notifyLocalViewChanges", "readwrite", (h) => K.forEach(l, (y) => K.forEach(y.Ki, (T) => f.persistence.referenceDelegate.addReference(h, y.targetId, T)).next(() => K.forEach(y.$i, (T) => f.persistence.referenceDelegate.removeReference(h, y.targetId, T)))));
    } catch (h) {
      if (!ks(h)) throw h;
      ee("LocalStore", "Failed to update sequence numbers: " + h);
    }
    for (const h of l) {
      const y = h.targetId;
      if (!h.fromCache) {
        const T = f.ss.get(y), S = T.snapshotVersion, C = T.withLastLimboFreeSnapshotVersion(S);
        f.ss = f.ss.insert(y, C);
      }
    }
  }(r.localStore, s));
}
async function FO(n, e) {
  const t = fe(n);
  if (!t.currentUser.isEqual(e)) {
    ee("SyncEngine", "User change. New user:", e.toKey());
    const r = await __(t.localStore, e);
    t.currentUser = e, // Fails tasks waiting for pending writes requested by previous user.
    function(s, o) {
      s.Ba.forEach((c) => {
        c.forEach((u) => {
          u.reject(new X(B.CANCELLED, o));
        });
      }), s.Ba.clear();
    }(t, "'waitForPendingWrites' promise is rejected due to a user change."), // TODO(b/114226417): Consider calling this only in the primary tab.
    t.sharedClientState.handleUserChange(e, r.removedBatchIds, r.addedBatchIds), await Ls(t, r.ls);
  }
}
function UO(n, e) {
  const t = fe(n), r = t.Oa.get(e);
  if (r && r.Da) return ye().add(r.key);
  {
    let i = ye();
    const s = t.Fa.get(e);
    if (!s) return i;
    for (const o of s) {
      const c = t.va.get(o);
      i = i.unionWith(c.view.Ra);
    }
    return i;
  }
}
function F_(n) {
  const e = fe(n);
  return e.remoteStore.remoteSyncer.applyRemoteEvent = x_.bind(null, e), e.remoteStore.remoteSyncer.getRemoteKeysForTarget = UO.bind(null, e), e.remoteStore.remoteSyncer.rejectListen = xO.bind(null, e), e.Ca.E_ = TO.bind(null, e.eventManager), e.Ca.Ka = bO.bind(null, e.eventManager), e;
}
function jO(n) {
  const e = fe(n);
  return e.remoteStore.remoteSyncer.applySuccessfulWrite = LO.bind(null, e), e.remoteStore.remoteSyncer.rejectFailedWrite = MO.bind(null, e), e;
}
class Vp {
  constructor() {
    this.synchronizeTabs = !1;
  }
  async initialize(e) {
    this.serializer = La(e.databaseInfo.databaseId), this.sharedClientState = this.createSharedClientState(e), this.persistence = this.createPersistence(e), await this.persistence.start(), this.localStore = this.createLocalStore(e), this.gcScheduler = this.createGarbageCollectionScheduler(e, this.localStore), this.indexBackfillerScheduler = this.createIndexBackfillerScheduler(e, this.localStore);
  }
  createGarbageCollectionScheduler(e, t) {
    return null;
  }
  createIndexBackfillerScheduler(e, t) {
    return null;
  }
  createLocalStore(e) {
    return Hk(this.persistence, new Kk(), e.initialUser, this.serializer);
  }
  createPersistence(e) {
    return new $k(ql.Yr, this.serializer);
  }
  createSharedClientState(e) {
    return new Zk();
  }
  async terminate() {
    var e, t;
    (e = this.gcScheduler) === null || e === void 0 || e.stop(), (t = this.indexBackfillerScheduler) === null || t === void 0 || t.stop(), this.sharedClientState.shutdown(), await this.persistence.shutdown();
  }
}
class $O {
  async initialize(e, t) {
    this.localStore || (this.localStore = e.localStore, this.sharedClientState = e.sharedClientState, this.datastore = this.createDatastore(t), this.remoteStore = this.createRemoteStore(t), this.eventManager = this.createEventManager(t), this.syncEngine = this.createSyncEngine(
      t,
      /* startAsPrimary=*/
      !e.synchronizeTabs
    ), this.sharedClientState.onlineStateHandler = (r) => Lp(
      this.syncEngine,
      r,
      1
      /* OnlineStateSource.SharedClientState */
    ), this.remoteStore.remoteSyncer.handleCredentialChange = FO.bind(null, this.syncEngine), await vO(this.remoteStore, this.syncEngine.isPrimaryClient));
  }
  createEventManager(e) {
    return function() {
      return new EO();
    }();
  }
  createDatastore(e) {
    const t = La(e.databaseInfo.databaseId), r = function(s) {
      return new rO(s);
    }(e.databaseInfo);
    return function(s, o, c, u) {
      return new oO(s, o, c, u);
    }(e.authCredentials, e.appCheckCredentials, r, t);
  }
  createRemoteStore(e) {
    return function(r, i, s, o, c) {
      return new cO(r, i, s, o, c);
    }(this.localStore, this.datastore, e.asyncQueue, (t) => Lp(
      this.syncEngine,
      t,
      0
      /* OnlineStateSource.RemoteStore */
    ), function() {
      return kp.D() ? new kp() : new eO();
    }());
  }
  createSyncEngine(e, t) {
    return function(i, s, o, c, u, l, f) {
      const h = new RO(i, s, o, c, u, l);
      return f && (h.qa = !0), h;
    }(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, e.initialUser, e.maxConcurrentLimboResolutions, t);
  }
  async terminate() {
    var e, t;
    await async function(i) {
      const s = fe(i);
      ee("RemoteStore", "RemoteStore shutting down."), s.N_.add(
        5
        /* OfflineCause.Shutdown */
      ), await xs(s), s.B_.shutdown(), // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
      // triggering spurious listener events with cached data, etc.
      s.k_.set(
        "Unknown"
        /* OnlineState.Unknown */
      );
    }(this.remoteStore), (e = this.datastore) === null || e === void 0 || e.terminate(), (t = this.eventManager) === null || t === void 0 || t.terminate();
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class U_ {
  constructor(e) {
    this.observer = e, /**
    * When set to true, will not raise future events. Necessary to deal with
    * async detachment of listener.
    */
    this.muted = !1;
  }
  next(e) {
    this.observer.next && this.Wa(this.observer.next, e);
  }
  error(e) {
    this.observer.error ? this.Wa(this.observer.error, e) : Sn("Uncaught Error in snapshot listener:", e.toString());
  }
  Ga() {
    this.muted = !0;
  }
  Wa(e, t) {
    this.muted || setTimeout(() => {
      this.muted || e(t);
    }, 0);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class BO {
  constructor(e, t, r, i) {
    this.authCredentials = e, this.appCheckCredentials = t, this.asyncQueue = r, this.databaseInfo = i, this.user = _t.UNAUTHENTICATED, this.clientId = Vy.newId(), this.authCredentialListener = () => Promise.resolve(), this.appCheckCredentialListener = () => Promise.resolve(), this.authCredentials.start(r, async (s) => {
      ee("FirestoreClient", "Received user=", s.uid), await this.authCredentialListener(s), this.user = s;
    }), this.appCheckCredentials.start(r, (s) => (ee("FirestoreClient", "Received new app check token=", s), this.appCheckCredentialListener(s, this.user)));
  }
  get configuration() {
    return {
      asyncQueue: this.asyncQueue,
      databaseInfo: this.databaseInfo,
      clientId: this.clientId,
      authCredentials: this.authCredentials,
      appCheckCredentials: this.appCheckCredentials,
      initialUser: this.user,
      maxConcurrentLimboResolutions: 100
    };
  }
  setCredentialChangeListener(e) {
    this.authCredentialListener = e;
  }
  setAppCheckTokenChangeListener(e) {
    this.appCheckCredentialListener = e;
  }
  /**
   * Checks that the client has not been terminated. Ensures that other methods on //
   * this class cannot be called after the client is terminated. //
   */
  verifyNotTerminated() {
    if (this.asyncQueue.isShuttingDown) throw new X(B.FAILED_PRECONDITION, "The client has already been terminated.");
  }
  terminate() {
    this.asyncQueue.enterRestrictedMode();
    const e = new Bn();
    return this.asyncQueue.enqueueAndForgetEvenWhileRestricted(async () => {
      try {
        this._onlineComponents && await this._onlineComponents.terminate(), this._offlineComponents && await this._offlineComponents.terminate(), // The credentials provider must be terminated after shutting down the
        // RemoteStore as it will prevent the RemoteStore from retrieving auth
        // tokens.
        this.authCredentials.shutdown(), this.appCheckCredentials.shutdown(), e.resolve();
      } catch (t) {
        const r = Yl(t, "Failed to shutdown persistence");
        e.reject(r);
      }
    }), e.promise;
  }
}
async function Mc(n, e) {
  n.asyncQueue.verifyOperationInProgress(), ee("FirestoreClient", "Initializing OfflineComponentProvider");
  const t = n.configuration;
  await e.initialize(t);
  let r = t.initialUser;
  n.setCredentialChangeListener(async (i) => {
    r.isEqual(i) || (await __(e.localStore, i), r = i);
  }), // When a user calls clearPersistence() in one client, all other clients
  // need to be terminated to allow the delete to succeed.
  e.persistence.setDatabaseDeletedListener(() => n.terminate()), n._offlineComponents = e;
}
async function Fp(n, e) {
  n.asyncQueue.verifyOperationInProgress();
  const t = await KO(n);
  ee("FirestoreClient", "Initializing OnlineComponentProvider"), await e.initialize(t, n.configuration), // The CredentialChangeListener of the online component provider takes
  // precedence over the offline component provider.
  n.setCredentialChangeListener((r) => Op(e.remoteStore, r)), n.setAppCheckTokenChangeListener((r, i) => Op(e.remoteStore, i)), n._onlineComponents = e;
}
function qO(n) {
  return n.name === "FirebaseError" ? n.code === B.FAILED_PRECONDITION || n.code === B.UNIMPLEMENTED : !(typeof DOMException < "u" && n instanceof DOMException) || // When the browser is out of quota we could get either quota exceeded
  // or an aborted error depending on whether the error happened during
  // schema migration.
  n.code === 22 || n.code === 20 || // Firefox Private Browsing mode disables IndexedDb and returns
  // INVALID_STATE for any usage.
  n.code === 11;
}
async function KO(n) {
  if (!n._offlineComponents) if (n._uninitializedComponentsProvider) {
    ee("FirestoreClient", "Using user provided OfflineComponentProvider");
    try {
      await Mc(n, n._uninitializedComponentsProvider._offline);
    } catch (e) {
      const t = e;
      if (!qO(t)) throw t;
      oi("Error using user provided cache. Falling back to memory cache: " + t), await Mc(n, new Vp());
    }
  } else ee("FirestoreClient", "Using default OfflineComponentProvider"), await Mc(n, new Vp());
  return n._offlineComponents;
}
async function j_(n) {
  return n._onlineComponents || (n._uninitializedComponentsProvider ? (ee("FirestoreClient", "Using user provided OnlineComponentProvider"), await Fp(n, n._uninitializedComponentsProvider._online)) : (ee("FirestoreClient", "Using default OnlineComponentProvider"), await Fp(n, new $O()))), n._onlineComponents;
}
function zO(n) {
  return j_(n).then((e) => e.syncEngine);
}
async function $u(n) {
  const e = await j_(n), t = e.eventManager;
  return t.onListen = CO.bind(null, e.syncEngine), t.onUnlisten = OO.bind(null, e.syncEngine), t.onFirstRemoteStoreListen = PO.bind(null, e.syncEngine), t.onLastRemoteStoreUnlisten = DO.bind(null, e.syncEngine), t;
}
function HO(n, e, t = {}) {
  const r = new Bn();
  return n.asyncQueue.enqueueAndForget(async () => function(s, o, c, u, l) {
    const f = new U_({
      next: (y) => {
        o.enqueueAndForget(() => P_(s, h));
        const T = y.docs.has(c);
        !T && y.fromCache ? (
          // TODO(dimond): If we're online and the document doesn't
          // exist then we resolve with a doc.exists set to false. If
          // we're offline however, we reject the Promise in this
          // case. Two options: 1) Cache the negative response from
          // the server so we can deliver that even when you're
          // offline 2) Actually reject the Promise in the online case
          // if the document doesn't exist.
          l.reject(new X(B.UNAVAILABLE, "Failed to get document because the client is offline."))
        ) : T && y.fromCache && u && u.source === "server" ? l.reject(new X(B.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')) : l.resolve(y);
      },
      error: (y) => l.reject(y)
    }), h = new k_(Pa(c.path), f, {
      includeMetadataChanges: !0,
      oa: !0
    });
    return C_(s, h);
  }(await $u(n), n.asyncQueue, e, t, r)), r.promise;
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function $_(n) {
  const e = {};
  return n.timeoutSeconds !== void 0 && (e.timeoutSeconds = n.timeoutSeconds), e;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Up = /* @__PURE__ */ new Map();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function B_(n, e, t) {
  if (!t) throw new X(B.INVALID_ARGUMENT, `Function ${n}() cannot be called with an empty ${e}.`);
}
function GO(n, e, t, r) {
  if (e === !0 && r === !0) throw new X(B.INVALID_ARGUMENT, `${n} and ${t} cannot be used together.`);
}
function jp(n) {
  if (!se.isDocumentKey(n)) throw new X(B.INVALID_ARGUMENT, `Invalid document reference. Document references must have an even number of segments, but ${n} has ${n.length}.`);
}
function $p(n) {
  if (se.isDocumentKey(n)) throw new X(B.INVALID_ARGUMENT, `Invalid collection reference. Collection references must have an odd number of segments, but ${n} has ${n.length}.`);
}
function Fa(n) {
  if (n === void 0) return "undefined";
  if (n === null) return "null";
  if (typeof n == "string") return n.length > 20 && (n = `${n.substring(0, 20)}...`), JSON.stringify(n);
  if (typeof n == "number" || typeof n == "boolean") return "" + n;
  if (typeof n == "object") {
    if (n instanceof Array) return "an array";
    {
      const e = (
        /** try to get the constructor name for an object. */
        function(r) {
          return r.constructor ? r.constructor.name : null;
        }(n)
      );
      return e ? `a custom ${e} object` : "an object";
    }
  }
  return typeof n == "function" ? "a function" : ce();
}
function qn(n, e) {
  if ("_delegate" in n && // Unwrap Compat types
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  (n = n._delegate), !(n instanceof e)) {
    if (e.name === n.constructor.name) throw new X(B.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
    {
      const t = Fa(n);
      throw new X(B.INVALID_ARGUMENT, `Expected type '${e.name}', but it was: ${t}`);
    }
  }
  return n;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Bp {
  constructor(e) {
    var t, r;
    if (e.host === void 0) {
      if (e.ssl !== void 0) throw new X(B.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
      this.host = "firestore.googleapis.com", this.ssl = !0;
    } else this.host = e.host, this.ssl = (t = e.ssl) === null || t === void 0 || t;
    if (this.credentials = e.credentials, this.ignoreUndefinedProperties = !!e.ignoreUndefinedProperties, this.localCache = e.localCache, e.cacheSizeBytes === void 0) this.cacheSizeBytes = 41943040;
    else {
      if (e.cacheSizeBytes !== -1 && e.cacheSizeBytes < 1048576) throw new X(B.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
      this.cacheSizeBytes = e.cacheSizeBytes;
    }
    GO("experimentalForceLongPolling", e.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", e.experimentalAutoDetectLongPolling), this.experimentalForceLongPolling = !!e.experimentalForceLongPolling, this.experimentalForceLongPolling ? this.experimentalAutoDetectLongPolling = !1 : e.experimentalAutoDetectLongPolling === void 0 ? this.experimentalAutoDetectLongPolling = !0 : (
      // For backwards compatibility, coerce the value to boolean even though
      // the TypeScript compiler has narrowed the type to boolean already.
      // noinspection PointlessBooleanExpressionJS
      this.experimentalAutoDetectLongPolling = !!e.experimentalAutoDetectLongPolling
    ), this.experimentalLongPollingOptions = $_((r = e.experimentalLongPollingOptions) !== null && r !== void 0 ? r : {}), function(s) {
      if (s.timeoutSeconds !== void 0) {
        if (isNaN(s.timeoutSeconds)) throw new X(B.INVALID_ARGUMENT, `invalid long polling timeout: ${s.timeoutSeconds} (must not be NaN)`);
        if (s.timeoutSeconds < 5) throw new X(B.INVALID_ARGUMENT, `invalid long polling timeout: ${s.timeoutSeconds} (minimum allowed value is 5)`);
        if (s.timeoutSeconds > 30) throw new X(B.INVALID_ARGUMENT, `invalid long polling timeout: ${s.timeoutSeconds} (maximum allowed value is 30)`);
      }
    }(this.experimentalLongPollingOptions), this.useFetchStreams = !!e.useFetchStreams;
  }
  isEqual(e) {
    return this.host === e.host && this.ssl === e.ssl && this.credentials === e.credentials && this.cacheSizeBytes === e.cacheSizeBytes && this.experimentalForceLongPolling === e.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === e.experimentalAutoDetectLongPolling && function(r, i) {
      return r.timeoutSeconds === i.timeoutSeconds;
    }(this.experimentalLongPollingOptions, e.experimentalLongPollingOptions) && this.ignoreUndefinedProperties === e.ignoreUndefinedProperties && this.useFetchStreams === e.useFetchStreams;
  }
}
class Ua {
  /** @hideconstructor */
  constructor(e, t, r, i) {
    this._authCredentials = e, this._appCheckCredentials = t, this._databaseId = r, this._app = i, /**
    * Whether it's a Firestore or Firestore Lite instance.
    */
    this.type = "firestore-lite", this._persistenceKey = "(lite)", this._settings = new Bp({}), this._settingsFrozen = !1;
  }
  /**
   * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service
   * instance.
   */
  get app() {
    if (!this._app) throw new X(B.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
    return this._app;
  }
  get _initialized() {
    return this._settingsFrozen;
  }
  get _terminated() {
    return this._terminateTask !== void 0;
  }
  _setSettings(e) {
    if (this._settingsFrozen) throw new X(B.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
    this._settings = new Bp(e), e.credentials !== void 0 && (this._authCredentials = function(r) {
      if (!r) return new hP();
      switch (r.type) {
        case "firstParty":
          return new mP(r.sessionIndex || "0", r.iamToken || null, r.authTokenFactory || null);
        case "provider":
          return r.client;
        default:
          throw new X(B.INVALID_ARGUMENT, "makeAuthCredentialsProvider failed due to invalid credential type");
      }
    }(e.credentials));
  }
  _getSettings() {
    return this._settings;
  }
  _freezeSettings() {
    return this._settingsFrozen = !0, this._settings;
  }
  _delete() {
    return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;
  }
  /** Returns a JSON-serializable representation of this `Firestore` instance. */
  toJSON() {
    return {
      app: this._app,
      databaseId: this._databaseId,
      settings: this._settings
    };
  }
  /**
   * Terminates all components used by this client. Subclasses can override
   * this method to clean up their own dependencies, but must also call this
   * method.
   *
   * Only ever called once.
   */
  _terminate() {
    return function(t) {
      const r = Up.get(t);
      r && (ee("ComponentProvider", "Removing Datastore"), Up.delete(t), r.terminate());
    }(this), Promise.resolve();
  }
}
function WO(n, e, t, r = {}) {
  var i;
  const s = (n = qn(n, Ua))._getSettings(), o = `${e}:${t}`;
  if (s.host !== "firestore.googleapis.com" && s.host !== o && oi("Host has been set in both settings() and connectFirestoreEmulator(), emulator host will be used."), n._setSettings(Object.assign(Object.assign({}, s), {
    host: o,
    ssl: !1
  })), r.mockUserToken) {
    let c, u;
    if (typeof r.mockUserToken == "string") c = r.mockUserToken, u = _t.MOCK_USER;
    else {
      c = zg(r.mockUserToken, (i = n._app) === null || i === void 0 ? void 0 : i.options.projectId);
      const l = r.mockUserToken.sub || r.mockUserToken.user_id;
      if (!l) throw new X(B.INVALID_ARGUMENT, "mockUserToken must contain 'sub' or 'user_id' field!");
      u = new _t(l);
    }
    n._authCredentials = new fP(new My(c, u));
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Ti {
  // This is the lite version of the Query class in the main SDK.
  /** @hideconstructor protected */
  constructor(e, t, r) {
    this.converter = t, this._query = r, /** The type of this Firestore reference. */
    this.type = "query", this.firestore = e;
  }
  withConverter(e) {
    return new Ti(this.firestore, e, this._query);
  }
}
class At {
  /** @hideconstructor */
  constructor(e, t, r) {
    this.converter = t, this._key = r, /** The type of this Firestore reference. */
    this.type = "document", this.firestore = e;
  }
  get _path() {
    return this._key.path;
  }
  /**
   * The document's identifier within its collection.
   */
  get id() {
    return this._key.path.lastSegment();
  }
  /**
   * A string representing the path of the referenced document (relative
   * to the root of the database).
   */
  get path() {
    return this._key.path.canonicalString();
  }
  /**
   * The collection this `DocumentReference` belongs to.
   */
  get parent() {
    return new Kn(this.firestore, this.converter, this._key.path.popLast());
  }
  withConverter(e) {
    return new At(this.firestore, e, this._key);
  }
}
class Kn extends Ti {
  /** @hideconstructor */
  constructor(e, t, r) {
    super(e, t, Pa(r)), this._path = r, /** The type of this Firestore reference. */
    this.type = "collection";
  }
  /** The collection's identifier. */
  get id() {
    return this._query.path.lastSegment();
  }
  /**
   * A string representing the path of the referenced collection (relative
   * to the root of the database).
   */
  get path() {
    return this._query.path.canonicalString();
  }
  /**
   * A reference to the containing `DocumentReference` if this is a
   * subcollection. If this isn't a subcollection, the reference is null.
   */
  get parent() {
    const e = this._path.popLast();
    return e.isEmpty() ? null : new At(
      this.firestore,
      /* converter= */
      null,
      new se(e)
    );
  }
  withConverter(e) {
    return new Kn(this.firestore, e, this._path);
  }
}
function QO(n, e, ...t) {
  if (n = Qe(n), B_("collection", "path", e), n instanceof Ua) {
    const r = xe.fromString(e, ...t);
    return $p(r), new Kn(
      n,
      /* converter= */
      null,
      r
    );
  }
  {
    if (!(n instanceof At || n instanceof Kn)) throw new X(B.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
    const r = n._path.child(xe.fromString(e, ...t));
    return $p(r), new Kn(
      n.firestore,
      /* converter= */
      null,
      r
    );
  }
}
function qp(n, e, ...t) {
  if (n = Qe(n), // We allow omission of 'pathString' but explicitly prohibit passing in both
  // 'undefined' and 'null'.
  arguments.length === 1 && (e = Vy.newId()), B_("doc", "path", e), n instanceof Ua) {
    const r = xe.fromString(e, ...t);
    return jp(r), new At(
      n,
      /* converter= */
      null,
      new se(r)
    );
  }
  {
    if (!(n instanceof At || n instanceof Kn)) throw new X(B.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
    const r = n._path.child(xe.fromString(e, ...t));
    return jp(r), new At(n.firestore, n instanceof Kn ? n.converter : null, new se(r));
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class YO {
  constructor() {
    this._u = Promise.resolve(), // A list of retryable operations. Retryable operations are run in order and
    // retried with backoff.
    this.au = [], // Is this AsyncQueue being shut down? Once it is set to true, it will not
    // be changed again.
    this.uu = !1, // Operations scheduled to be queued in the future. Operations are
    // automatically removed after they are run or canceled.
    this.cu = [], // visible for testing
    this.lu = null, // Flag set while there's an outstanding AsyncQueue operation, used for
    // assertion sanity-checks.
    this.hu = !1, // Enabled during shutdown on Safari to prevent future access to IndexedDB.
    this.Pu = !1, // List of TimerIds to fast-forward delays for.
    this.Iu = [], // Backoff timer used to schedule retries for retryable operations
    this.e_ = new w_(
      this,
      "async_queue_retry"
      /* TimerId.AsyncQueueRetry */
    ), // Visibility handler that triggers an immediate retry of all retryable
    // operations. Meant to speed up recovery when we regain file system access
    // after page comes into foreground.
    this.Tu = () => {
      const t = Lc();
      t && ee("AsyncQueue", "Visibility state changed to " + t.visibilityState), this.e_.zo();
    };
    const e = Lc();
    e && typeof e.addEventListener == "function" && e.addEventListener("visibilitychange", this.Tu);
  }
  get isShuttingDown() {
    return this.uu;
  }
  /**
   * Adds a new operation to the queue without waiting for it to complete (i.e.
   * we ignore the Promise result).
   */
  enqueueAndForget(e) {
    this.enqueue(e);
  }
  enqueueAndForgetEvenWhileRestricted(e) {
    this.Eu(), // eslint-disable-next-line @typescript-eslint/no-floating-promises
    this.du(e);
  }
  enterRestrictedMode(e) {
    if (!this.uu) {
      this.uu = !0, this.Pu = e || !1;
      const t = Lc();
      t && typeof t.removeEventListener == "function" && t.removeEventListener("visibilitychange", this.Tu);
    }
  }
  enqueue(e) {
    if (this.Eu(), this.uu)
      return new Promise(() => {
      });
    const t = new Bn();
    return this.du(() => this.uu && this.Pu ? Promise.resolve() : (e().then(t.resolve, t.reject), t.promise)).then(() => t.promise);
  }
  enqueueRetryable(e) {
    this.enqueueAndForget(() => (this.au.push(e), this.Au()));
  }
  /**
   * Runs the next operation from the retryable queue. If the operation fails,
   * reschedules with backoff.
   */
  async Au() {
    if (this.au.length !== 0) {
      try {
        await this.au[0](), this.au.shift(), this.e_.reset();
      } catch (e) {
        if (!ks(e)) throw e;
        ee("AsyncQueue", "Operation failed with retryable error: " + e);
      }
      this.au.length > 0 && // If there are additional operations, we re-schedule `retryNextOp()`.
      // This is necessary to run retryable operations that failed during
      // their initial attempt since we don't know whether they are already
      // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
      // needs to  be re-run, we will run `op1`, `op1`, `op2` using the
      // already enqueued calls to `retryNextOp()`. `op3()` will then run in the
      // call scheduled here.
      // Since `backoffAndRun()` cancels an existing backoff and schedules a
      // new backoff on every call, there is only ever a single additional
      // operation in the queue.
      this.e_.Wo(() => this.Au());
    }
  }
  du(e) {
    const t = this._u.then(() => (this.hu = !0, e().catch((r) => {
      this.lu = r, this.hu = !1;
      const i = (
        /**
        * Chrome includes Error.message in Error.stack. Other browsers do not.
        * This returns expected output of message + stack when available.
        * @param error - Error or FirestoreError
        */
        function(o) {
          let c = o.message || "";
          return o.stack && (c = o.stack.includes(o.message) ? o.stack : o.message + `
` + o.stack), c;
        }(r)
      );
      throw Sn("INTERNAL UNHANDLED ERROR: ", i), r;
    }).then((r) => (this.hu = !1, r))));
    return this._u = t, t;
  }
  enqueueAfterDelay(e, t, r) {
    this.Eu(), // Fast-forward delays for timerIds that have been overridden.
    this.Iu.indexOf(e) > -1 && (t = 0);
    const i = Ql.createAndSchedule(this, e, t, r, (s) => this.Ru(s));
    return this.cu.push(i), i;
  }
  Eu() {
    this.lu && ce();
  }
  verifyOperationInProgress() {
  }
  /**
   * Waits until all currently queued tasks are finished executing. Delayed
   * operations are not run.
   */
  async Vu() {
    let e;
    do
      e = this._u, await e;
    while (e !== this._u);
  }
  /**
   * For Tests: Determine if a delayed operation with a particular TimerId
   * exists.
   */
  mu(e) {
    for (const t of this.cu) if (t.timerId === e) return !0;
    return !1;
  }
  /**
   * For Tests: Runs some or all delayed operations early.
   *
   * @param lastTimerId - Delayed operations up to and including this TimerId
   * will be drained. Pass TimerId.All to run all delayed operations.
   * @returns a Promise that resolves once all operations have been run.
   */
  fu(e) {
    return this.Vu().then(() => {
      this.cu.sort((t, r) => t.targetTimeMs - r.targetTimeMs);
      for (const t of this.cu) if (t.skipDelay(), e !== "all" && t.timerId === e) break;
      return this.Vu();
    });
  }
  /**
   * For Tests: Skip all subsequent delays for a timer id.
   */
  gu(e) {
    this.Iu.push(e);
  }
  /** Called once a DelayedOperation is run or canceled. */
  Ru(e) {
    const t = this.cu.indexOf(e);
    this.cu.splice(t, 1);
  }
}
function Kp(n) {
  return function(t, r) {
    if (typeof t != "object" || t === null) return !1;
    const i = t;
    for (const s of r) if (s in i && typeof i[s] == "function") return !0;
    return !1;
  }(n, ["next", "error", "complete"]);
}
class ys extends Ua {
  /** @hideconstructor */
  constructor(e, t, r, i) {
    super(e, t, r, i), /**
    * Whether it's a {@link Firestore} or Firestore Lite instance.
    */
    this.type = "firestore", this._queue = function() {
      return new YO();
    }(), this._persistenceKey = (i == null ? void 0 : i.name) || "[DEFAULT]";
  }
  _terminate() {
    return this._firestoreClient || // The client must be initialized to ensure that all subsequent API
    // usage throws an exception.
    q_(this), this._firestoreClient.terminate();
  }
}
function JO(n, e) {
  const t = typeof n == "object" ? n : _l(), r = typeof n == "string" ? n : "(default)", i = Ia(t, "firestore").getImmediate({
    identifier: r
  });
  if (!i._initialized) {
    const s = Bg("firestore");
    s && WO(i, ...s);
  }
  return i;
}
function Zl(n) {
  return n._firestoreClient || q_(n), n._firestoreClient.verifyNotTerminated(), n._firestoreClient;
}
function q_(n) {
  var e, t, r;
  const i = n._freezeSettings(), s = function(c, u, l, f) {
    return new CP(c, u, l, f.host, f.ssl, f.experimentalForceLongPolling, f.experimentalAutoDetectLongPolling, $_(f.experimentalLongPollingOptions), f.useFetchStreams);
  }(n._databaseId, ((e = n._app) === null || e === void 0 ? void 0 : e.options.appId) || "", n._persistenceKey, i);
  n._firestoreClient = new BO(n._authCredentials, n._appCheckCredentials, n._queue, s), !((t = i.localCache) === null || t === void 0) && t._offlineComponentProvider && (!((r = i.localCache) === null || r === void 0) && r._onlineComponentProvider) && (n._firestoreClient._uninitializedComponentsProvider = {
    _offlineKind: i.localCache.kind,
    _offline: i.localCache._offlineComponentProvider,
    _online: i.localCache._onlineComponentProvider
  });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class fi {
  /** @hideconstructor */
  constructor(e) {
    this._byteString = e;
  }
  /**
   * Creates a new `Bytes` object from the given Base64 string, converting it to
   * bytes.
   *
   * @param base64 - The Base64 string used to create the `Bytes` object.
   */
  static fromBase64String(e) {
    try {
      return new fi(ht.fromBase64String(e));
    } catch (t) {
      throw new X(B.INVALID_ARGUMENT, "Failed to construct data from Base64 string: " + t);
    }
  }
  /**
   * Creates a new `Bytes` object from the given Uint8Array.
   *
   * @param array - The Uint8Array used to create the `Bytes` object.
   */
  static fromUint8Array(e) {
    return new fi(ht.fromUint8Array(e));
  }
  /**
   * Returns the underlying bytes as a Base64-encoded string.
   *
   * @returns The Base64-encoded string created from the `Bytes` object.
   */
  toBase64() {
    return this._byteString.toBase64();
  }
  /**
   * Returns the underlying bytes in a new `Uint8Array`.
   *
   * @returns The Uint8Array created from the `Bytes` object.
   */
  toUint8Array() {
    return this._byteString.toUint8Array();
  }
  /**
   * Returns a string representation of the `Bytes` object.
   *
   * @returns A string representation of the `Bytes` object.
   */
  toString() {
    return "Bytes(base64: " + this.toBase64() + ")";
  }
  /**
   * Returns true if this `Bytes` object is equal to the provided one.
   *
   * @param other - The `Bytes` object to compare against.
   * @returns true if this `Bytes` object is equal to the provided one.
   */
  isEqual(e) {
    return this._byteString.isEqual(e._byteString);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class eh {
  /**
   * Creates a `FieldPath` from the provided field names. If more than one field
   * name is provided, the path will point to a nested field in a document.
   *
   * @param fieldNames - A list of field names.
   */
  constructor(...e) {
    for (let t = 0; t < e.length; ++t) if (e[t].length === 0) throw new X(B.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
    this._internalPath = new ct(e);
  }
  /**
   * Returns true if this `FieldPath` is equal to the provided one.
   *
   * @param other - The `FieldPath` to compare against.
   * @returns true if this `FieldPath` is equal to the provided one.
   */
  isEqual(e) {
    return this._internalPath.isEqual(e._internalPath);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class K_ {
  /**
   * @param _methodName - The public API endpoint that returns this class.
   * @hideconstructor
   */
  constructor(e) {
    this._methodName = e;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class th {
  /**
   * Creates a new immutable `GeoPoint` object with the provided latitude and
   * longitude values.
   * @param latitude - The latitude as number between -90 and 90.
   * @param longitude - The longitude as number between -180 and 180.
   */
  constructor(e, t) {
    if (!isFinite(e) || e < -90 || e > 90) throw new X(B.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + e);
    if (!isFinite(t) || t < -180 || t > 180) throw new X(B.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + t);
    this._lat = e, this._long = t;
  }
  /**
   * The latitude of this `GeoPoint` instance.
   */
  get latitude() {
    return this._lat;
  }
  /**
   * The longitude of this `GeoPoint` instance.
   */
  get longitude() {
    return this._long;
  }
  /**
   * Returns true if this `GeoPoint` is equal to the provided one.
   *
   * @param other - The `GeoPoint` to compare against.
   * @returns true if this `GeoPoint` is equal to the provided one.
   */
  isEqual(e) {
    return this._lat === e._lat && this._long === e._long;
  }
  /** Returns a JSON-serializable representation of this GeoPoint. */
  toJSON() {
    return {
      latitude: this._lat,
      longitude: this._long
    };
  }
  /**
   * Actually private to JS consumers of our API, so this function is prefixed
   * with an underscore.
   */
  _compareTo(e) {
    return Te(this._lat, e._lat) || Te(this._long, e._long);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const XO = /^__.*__$/;
class ZO {
  constructor(e, t, r) {
    this.data = e, this.fieldMask = t, this.fieldTransforms = r;
  }
  toMutation(e, t) {
    return this.fieldMask !== null ? new Nr(e, this.data, this.fieldMask, t, this.fieldTransforms) : new Ds(e, this.data, t, this.fieldTransforms);
  }
}
function z_(n) {
  switch (n) {
    case 0:
    case 2:
    case 1:
      return !0;
    case 3:
    case 4:
      return !1;
    default:
      throw ce();
  }
}
class nh {
  /**
   * Initializes a ParseContext with the given source and path.
   *
   * @param settings - The settings for the parser.
   * @param databaseId - The database ID of the Firestore instance.
   * @param serializer - The serializer to use to generate the Value proto.
   * @param ignoreUndefinedProperties - Whether to ignore undefined properties
   * rather than throw.
   * @param fieldTransforms - A mutable list of field transforms encountered
   * while parsing the data.
   * @param fieldMask - A mutable list of field paths encountered while parsing
   * the data.
   *
   * TODO(b/34871131): We don't support array paths right now, so path can be
   * null to indicate the context represents any location within an array (in
   * which case certain features will not work and errors will be somewhat
   * compromised).
   */
  constructor(e, t, r, i, s, o) {
    this.settings = e, this.databaseId = t, this.serializer = r, this.ignoreUndefinedProperties = i, // Minor hack: If fieldTransforms is undefined, we assume this is an
    // external call and we need to validate the entire path.
    s === void 0 && this.pu(), this.fieldTransforms = s || [], this.fieldMask = o || [];
  }
  get path() {
    return this.settings.path;
  }
  get yu() {
    return this.settings.yu;
  }
  /** Returns a new context with the specified settings overwritten. */
  wu(e) {
    return new nh(Object.assign(Object.assign({}, this.settings), e), this.databaseId, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);
  }
  Su(e) {
    var t;
    const r = (t = this.path) === null || t === void 0 ? void 0 : t.child(e), i = this.wu({
      path: r,
      bu: !1
    });
    return i.Du(e), i;
  }
  Cu(e) {
    var t;
    const r = (t = this.path) === null || t === void 0 ? void 0 : t.child(e), i = this.wu({
      path: r,
      bu: !1
    });
    return i.pu(), i;
  }
  vu(e) {
    return this.wu({
      path: void 0,
      bu: !0
    });
  }
  Fu(e) {
    return ra(e, this.settings.methodName, this.settings.Mu || !1, this.path, this.settings.xu);
  }
  /** Returns 'true' if 'fieldPath' was traversed when creating this context. */
  contains(e) {
    return this.fieldMask.find((t) => e.isPrefixOf(t)) !== void 0 || this.fieldTransforms.find((t) => e.isPrefixOf(t.field)) !== void 0;
  }
  pu() {
    if (this.path) for (let e = 0; e < this.path.length; e++) this.Du(this.path.get(e));
  }
  Du(e) {
    if (e.length === 0) throw this.Fu("Document fields must not be empty");
    if (z_(this.yu) && XO.test(e)) throw this.Fu('Document fields cannot begin and end with "__"');
  }
}
class eD {
  constructor(e, t, r) {
    this.databaseId = e, this.ignoreUndefinedProperties = t, this.serializer = r || La(e);
  }
  /** Creates a new top-level parse context. */
  Ou(e, t, r, i = !1) {
    return new nh({
      yu: e,
      methodName: t,
      xu: r,
      path: ct.emptyPath(),
      bu: !1,
      Mu: i
    }, this.databaseId, this.serializer, this.ignoreUndefinedProperties);
  }
}
function H_(n) {
  const e = n._freezeSettings(), t = La(n._databaseId);
  return new eD(n._databaseId, !!e.ignoreUndefinedProperties, t);
}
function tD(n, e, t, r, i, s = {}) {
  const o = n.Ou(s.merge || s.mergeFields ? 2 : 0, e, t, i);
  Q_("Data must be an object, but it was:", o, r);
  const c = G_(r, o);
  let u, l;
  if (s.merge) u = new Qt(o.fieldMask), l = o.fieldTransforms;
  else if (s.mergeFields) {
    const f = [];
    for (const h of s.mergeFields) {
      const y = rD(e, h, t);
      if (!o.contains(y)) throw new X(B.INVALID_ARGUMENT, `Field '${y}' is specified in your field mask but missing from your input data.`);
      sD(f, y) || f.push(y);
    }
    u = new Qt(f), l = o.fieldTransforms.filter((h) => u.covers(h.field));
  } else u = null, l = o.fieldTransforms;
  return new ZO(new Vt(c), u, l);
}
function nD(n, e, t, r = !1) {
  return rh(t, n.Ou(r ? 4 : 3, e));
}
function rh(n, e) {
  if (W_(
    // Unwrap the API type from the Compat SDK. This will return the API type
    // from firestore-exp.
    n = Qe(n)
  )) return Q_("Unsupported field value:", e, n), G_(n, e);
  if (n instanceof K_)
    return function(r, i) {
      if (!z_(i.yu)) throw i.Fu(`${r._methodName}() can only be used with update() and set()`);
      if (!i.path) throw i.Fu(`${r._methodName}() is not currently supported inside arrays`);
      const s = r._toFieldTransform(i);
      s && i.fieldTransforms.push(s);
    }(n, e), null;
  if (n === void 0 && e.ignoreUndefinedProperties)
    return null;
  if (
    // If context.path is null we are inside an array and we don't support
    // field mask paths more granular than the top-level array.
    e.path && e.fieldMask.push(e.path), n instanceof Array
  ) {
    if (e.settings.bu && e.yu !== 4) throw e.Fu("Nested arrays are not supported");
    return function(r, i) {
      const s = [];
      let o = 0;
      for (const c of r) {
        let u = rh(c, i.vu(o));
        u == null && // Just include nulls in the array for fields being replaced with a
        // sentinel.
        (u = {
          nullValue: "NULL_VALUE"
        }), s.push(u), o++;
      }
      return {
        arrayValue: {
          values: s
        }
      };
    }(n, e);
  }
  return function(r, i) {
    if ((r = Qe(r)) === null) return {
      nullValue: "NULL_VALUE"
    };
    if (typeof r == "number") return QP(i.serializer, r);
    if (typeof r == "boolean") return {
      booleanValue: r
    };
    if (typeof r == "string") return {
      stringValue: r
    };
    if (r instanceof Date) {
      const s = Xe.fromDate(r);
      return {
        timestampValue: ta(i.serializer, s)
      };
    }
    if (r instanceof Xe) {
      const s = new Xe(r.seconds, 1e3 * Math.floor(r.nanoseconds / 1e3));
      return {
        timestampValue: ta(i.serializer, s)
      };
    }
    if (r instanceof th) return {
      geoPointValue: {
        latitude: r.latitude,
        longitude: r.longitude
      }
    };
    if (r instanceof fi) return {
      bytesValue: h_(i.serializer, r._byteString)
    };
    if (r instanceof At) {
      const s = i.databaseId, o = r.firestore._databaseId;
      if (!o.isEqual(s)) throw i.Fu(`Document reference is for database ${o.projectId}/${o.database} but should be for database ${s.projectId}/${s.database}`);
      return {
        referenceValue: $l(r.firestore._databaseId || i.databaseId, r._key.path)
      };
    }
    throw i.Fu(`Unsupported field value: ${Fa(r)}`);
  }(n, e);
}
function G_(n, e) {
  const t = {};
  return Fy(n) ? (
    // If we encounter an empty object, we explicitly add it to the update
    // mask to ensure that the server creates a map entry.
    e.path && e.path.length > 0 && e.fieldMask.push(e.path)
  ) : vi(n, (r, i) => {
    const s = rh(i, e.Su(r));
    s != null && (t[r] = s);
  }), {
    mapValue: {
      fields: t
    }
  };
}
function W_(n) {
  return !(typeof n != "object" || n === null || n instanceof Array || n instanceof Date || n instanceof Xe || n instanceof th || n instanceof fi || n instanceof At || n instanceof K_);
}
function Q_(n, e, t) {
  if (!W_(t) || !function(i) {
    return typeof i == "object" && i !== null && (Object.getPrototypeOf(i) === Object.prototype || Object.getPrototypeOf(i) === null);
  }(t)) {
    const r = Fa(t);
    throw r === "an object" ? e.Fu(n + " a custom object") : e.Fu(n + " " + r);
  }
}
function rD(n, e, t) {
  if (
    // If required, replace the FieldPath Compat class with the firestore-exp
    // FieldPath.
    (e = Qe(e)) instanceof eh
  ) return e._internalPath;
  if (typeof e == "string") return Y_(n, e);
  throw ra(
    "Field path arguments must be of type string or ",
    n,
    /* hasConverter= */
    !1,
    /* path= */
    void 0,
    t
  );
}
const iD = new RegExp("[~\\*/\\[\\]]");
function Y_(n, e, t) {
  if (e.search(iD) >= 0) throw ra(
    `Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`,
    n,
    /* hasConverter= */
    !1,
    /* path= */
    void 0,
    t
  );
  try {
    return new eh(...e.split("."))._internalPath;
  } catch {
    throw ra(
      `Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`,
      n,
      /* hasConverter= */
      !1,
      /* path= */
      void 0,
      t
    );
  }
}
function ra(n, e, t, r, i) {
  const s = r && !r.isEmpty(), o = i !== void 0;
  let c = `Function ${e}() called with invalid data`;
  t && (c += " (via `toFirestore()`)"), c += ". ";
  let u = "";
  return (s || o) && (u += " (found", s && (u += ` in field ${r}`), o && (u += ` in document ${i}`), u += ")"), new X(B.INVALID_ARGUMENT, c + n + u);
}
function sD(n, e) {
  return n.some((t) => t.isEqual(e));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class J_ {
  // Note: This class is stripped down version of the DocumentSnapshot in
  // the legacy SDK. The changes are:
  // - No support for SnapshotMetadata.
  // - No support for SnapshotOptions.
  /** @hideconstructor protected */
  constructor(e, t, r, i, s) {
    this._firestore = e, this._userDataWriter = t, this._key = r, this._document = i, this._converter = s;
  }
  /** Property of the `DocumentSnapshot` that provides the document's ID. */
  get id() {
    return this._key.path.lastSegment();
  }
  /**
   * The `DocumentReference` for the document included in the `DocumentSnapshot`.
   */
  get ref() {
    return new At(this._firestore, this._converter, this._key);
  }
  /**
   * Signals whether or not the document at the snapshot's location exists.
   *
   * @returns true if the document exists.
   */
  exists() {
    return this._document !== null;
  }
  /**
   * Retrieves all fields in the document as an `Object`. Returns `undefined` if
   * the document doesn't exist.
   *
   * @returns An `Object` containing all fields in the document or `undefined`
   * if the document doesn't exist.
   */
  data() {
    if (this._document) {
      if (this._converter) {
        const e = new oD(
          this._firestore,
          this._userDataWriter,
          this._key,
          this._document,
          /* converter= */
          null
        );
        return this._converter.fromFirestore(e);
      }
      return this._userDataWriter.convertValue(this._document.data.value);
    }
  }
  /**
   * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
   * document or field doesn't exist.
   *
   * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
   * field.
   * @returns The data at the specified field location or undefined if no such
   * field exists in the document.
   */
  // We are using `any` here to avoid an explicit cast by our users.
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  get(e) {
    if (this._document) {
      const t = this._document.data.field(ih("DocumentSnapshot.get", e));
      if (t !== null) return this._userDataWriter.convertValue(t);
    }
  }
}
class oD extends J_ {
  /**
   * Retrieves all fields in the document as an `Object`.
   *
   * @override
   * @returns An `Object` containing all fields in the document.
   */
  data() {
    return super.data();
  }
}
function ih(n, e) {
  return typeof e == "string" ? Y_(n, e) : e instanceof eh ? e._internalPath : e._delegate._internalPath;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function aD(n) {
  if (n.limitType === "L" && n.explicitOrderBy.length === 0) throw new X(B.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
}
class sh {
}
class cD extends sh {
}
function jx(n, e, ...t) {
  let r = [];
  e instanceof sh && r.push(e), r = r.concat(t), function(s) {
    const o = s.filter((u) => u instanceof oh).length, c = s.filter((u) => u instanceof ja).length;
    if (o > 1 || o > 0 && c > 0) throw new X(B.INVALID_ARGUMENT, "InvalidQuery. When using composite filters, you cannot use more than one filter at the top level. Consider nesting the multiple filters within an `and(...)` statement. For example: change `query(query, where(...), or(...))` to `query(query, and(where(...), or(...)))`.");
  }(r);
  for (const i of r) n = i._apply(n);
  return n;
}
class ja extends cD {
  /**
   * @internal
   */
  constructor(e, t, r) {
    super(), this._field = e, this._op = t, this._value = r, /** The type of this query constraint */
    this.type = "where";
  }
  static _create(e, t, r) {
    return new ja(e, t, r);
  }
  _apply(e) {
    const t = this._parse(e);
    return X_(e._query, t), new Ti(e.firestore, e.converter, Du(e._query, t));
  }
  _parse(e) {
    const t = H_(e.firestore);
    return function(s, o, c, u, l, f, h) {
      let y;
      if (l.isKeyField()) {
        if (f === "array-contains" || f === "array-contains-any") throw new X(B.INVALID_ARGUMENT, `Invalid Query. You can't perform '${f}' queries on documentId().`);
        if (f === "in" || f === "not-in") {
          Hp(h, f);
          const T = [];
          for (const S of h) T.push(zp(u, s, S));
          y = {
            arrayValue: {
              values: T
            }
          };
        } else y = zp(u, s, h);
      } else f !== "in" && f !== "not-in" && f !== "array-contains-any" || Hp(h, f), y = nD(
        c,
        o,
        h,
        /* allowArrays= */
        f === "in" || f === "not-in"
      );
      return We.create(l, f, y);
    }(e._query, "where", t, e.firestore._databaseId, this._field, this._op, this._value);
  }
}
function $x(n, e, t) {
  const r = e, i = ih("where", n);
  return ja._create(i, r, t);
}
class oh extends sh {
  /**
   * @internal
   */
  constructor(e, t) {
    super(), this.type = e, this._queryConstraints = t;
  }
  static _create(e, t) {
    return new oh(e, t);
  }
  _parse(e) {
    const t = this._queryConstraints.map((r) => r._parse(e)).filter((r) => r.getFilters().length > 0);
    return t.length === 1 ? t[0] : Jt.create(t, this._getOperator());
  }
  _apply(e) {
    const t = this._parse(e);
    return t.getFilters().length === 0 ? e : (function(i, s) {
      let o = i;
      const c = s.getFlattenedFilters();
      for (const u of c) X_(o, u), o = Du(o, u);
    }(e._query, t), new Ti(e.firestore, e.converter, Du(e._query, t)));
  }
  _getQueryConstraints() {
    return this._queryConstraints;
  }
  _getOperator() {
    return this.type === "and" ? "and" : "or";
  }
}
function zp(n, e, t) {
  if (typeof (t = Qe(t)) == "string") {
    if (t === "") throw new X(B.INVALID_ARGUMENT, "Invalid query. When querying with documentId(), you must provide a valid document ID, but it was an empty string.");
    if (!Gy(e) && t.indexOf("/") !== -1) throw new X(B.INVALID_ARGUMENT, `Invalid query. When querying a collection by documentId(), you must provide a plain document ID, but '${t}' contains a '/' character.`);
    const r = e.path.child(xe.fromString(t));
    if (!se.isDocumentKey(r)) throw new X(B.INVALID_ARGUMENT, `Invalid query. When querying a collection group by documentId(), the value provided must result in a valid document path, but '${r}' is not because it has an odd number of segments (${r.length}).`);
    return hp(n, new se(r));
  }
  if (t instanceof At) return hp(n, t._key);
  throw new X(B.INVALID_ARGUMENT, `Invalid query. When querying with documentId(), you must provide a valid string or a DocumentReference, but it was: ${Fa(t)}.`);
}
function Hp(n, e) {
  if (!Array.isArray(n) || n.length === 0) throw new X(B.INVALID_ARGUMENT, `Invalid Query. A non-empty array is required for '${e.toString()}' filters.`);
}
function X_(n, e) {
  const t = function(i, s) {
    for (const o of i) for (const c of o.getFlattenedFilters()) if (s.indexOf(c.op) >= 0) return c.op;
    return null;
  }(n.filters, function(i) {
    switch (i) {
      case "!=":
        return [
          "!=",
          "not-in"
          /* Operator.NOT_IN */
        ];
      case "array-contains-any":
      case "in":
        return [
          "not-in"
          /* Operator.NOT_IN */
        ];
      case "not-in":
        return [
          "array-contains-any",
          "in",
          "not-in",
          "!="
          /* Operator.NOT_EQUAL */
        ];
      default:
        return [];
    }
  }(e.op));
  if (t !== null)
    throw t === e.op ? new X(B.INVALID_ARGUMENT, `Invalid query. You cannot use more than one '${e.op.toString()}' filter.`) : new X(B.INVALID_ARGUMENT, `Invalid query. You cannot use '${e.op.toString()}' filters with '${t.toString()}' filters.`);
}
class uD {
  convertValue(e, t = "none") {
    switch (Rr(e)) {
      case 0:
        return null;
      case 1:
        return e.booleanValue;
      case 2:
        return Ge(e.integerValue || e.doubleValue);
      case 3:
        return this.convertTimestamp(e.timestampValue);
      case 4:
        return this.convertServerTimestamp(e, t);
      case 5:
        return e.stringValue;
      case 6:
        return this.convertBytes(Ar(e.bytesValue));
      case 7:
        return this.convertReference(e.referenceValue);
      case 8:
        return this.convertGeoPoint(e.geoPointValue);
      case 9:
        return this.convertArray(e.arrayValue, t);
      case 10:
        return this.convertObject(e.mapValue, t);
      default:
        throw ce();
    }
  }
  convertObject(e, t) {
    return this.convertObjectMap(e.fields, t);
  }
  /**
   * @internal
   */
  convertObjectMap(e, t = "none") {
    const r = {};
    return vi(e, (i, s) => {
      r[i] = this.convertValue(s, t);
    }), r;
  }
  convertGeoPoint(e) {
    return new th(Ge(e.latitude), Ge(e.longitude));
  }
  convertArray(e, t) {
    return (e.values || []).map((r) => this.convertValue(r, t));
  }
  convertServerTimestamp(e, t) {
    switch (t) {
      case "previous":
        const r = Ll(e);
        return r == null ? null : this.convertValue(r, t);
      case "estimate":
        return this.convertTimestamp(fs(e));
      default:
        return null;
    }
  }
  convertTimestamp(e) {
    const t = Wn(e);
    return new Xe(t.seconds, t.nanos);
  }
  convertDocumentKey(e, t) {
    const r = xe.fromString(e);
    De(y_(r));
    const i = new ds(r.get(1), r.get(3)), s = new se(r.popFirst(5));
    return i.isEqual(t) || // TODO(b/64130202): Somehow support foreign references.
    Sn(`Document ${s} contains a document reference within a different database (${i.projectId}/${i.database}) which is not supported. It will be treated as a reference in the current database (${t.projectId}/${t.database}) instead.`), s;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function lD(n, e, t) {
  let r;
  return r = n ? t && (t.merge || t.mergeFields) ? n.toFirestore(e, t) : n.toFirestore(e) : e, r;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Qi {
  /** @hideconstructor */
  constructor(e, t) {
    this.hasPendingWrites = e, this.fromCache = t;
  }
  /**
   * Returns true if this `SnapshotMetadata` is equal to the provided one.
   *
   * @param other - The `SnapshotMetadata` to compare against.
   * @returns true if this `SnapshotMetadata` is equal to the provided one.
   */
  isEqual(e) {
    return this.hasPendingWrites === e.hasPendingWrites && this.fromCache === e.fromCache;
  }
}
class Z_ extends J_ {
  /** @hideconstructor protected */
  constructor(e, t, r, i, s, o) {
    super(e, t, r, i, o), this._firestore = e, this._firestoreImpl = e, this.metadata = s;
  }
  /**
   * Returns whether or not the data exists. True if the document exists.
   */
  exists() {
    return super.exists();
  }
  /**
   * Retrieves all fields in the document as an `Object`. Returns `undefined` if
   * the document doesn't exist.
   *
   * By default, `serverTimestamp()` values that have not yet been
   * set to their final value will be returned as `null`. You can override
   * this by passing an options object.
   *
   * @param options - An options object to configure how data is retrieved from
   * the snapshot (for example the desired behavior for server timestamps that
   * have not yet been set to their final value).
   * @returns An `Object` containing all fields in the document or `undefined` if
   * the document doesn't exist.
   */
  data(e = {}) {
    if (this._document) {
      if (this._converter) {
        const t = new Oo(
          this._firestore,
          this._userDataWriter,
          this._key,
          this._document,
          this.metadata,
          /* converter= */
          null
        );
        return this._converter.fromFirestore(t, e);
      }
      return this._userDataWriter.convertValue(this._document.data.value, e.serverTimestamps);
    }
  }
  /**
   * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
   * document or field doesn't exist.
   *
   * By default, a `serverTimestamp()` that has not yet been set to
   * its final value will be returned as `null`. You can override this by
   * passing an options object.
   *
   * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
   * field.
   * @param options - An options object to configure how the field is retrieved
   * from the snapshot (for example the desired behavior for server timestamps
   * that have not yet been set to their final value).
   * @returns The data at the specified field location or undefined if no such
   * field exists in the document.
   */
  // We are using `any` here to avoid an explicit cast by our users.
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  get(e, t = {}) {
    if (this._document) {
      const r = this._document.data.field(ih("DocumentSnapshot.get", e));
      if (r !== null) return this._userDataWriter.convertValue(r, t.serverTimestamps);
    }
  }
}
class Oo extends Z_ {
  /**
   * Retrieves all fields in the document as an `Object`.
   *
   * By default, `serverTimestamp()` values that have not yet been
   * set to their final value will be returned as `null`. You can override
   * this by passing an options object.
   *
   * @override
   * @param options - An options object to configure how data is retrieved from
   * the snapshot (for example the desired behavior for server timestamps that
   * have not yet been set to their final value).
   * @returns An `Object` containing all fields in the document.
   */
  data(e = {}) {
    return super.data(e);
  }
}
class hD {
  /** @hideconstructor */
  constructor(e, t, r, i) {
    this._firestore = e, this._userDataWriter = t, this._snapshot = i, this.metadata = new Qi(i.hasPendingWrites, i.fromCache), this.query = r;
  }
  /** An array of all the documents in the `QuerySnapshot`. */
  get docs() {
    const e = [];
    return this.forEach((t) => e.push(t)), e;
  }
  /** The number of documents in the `QuerySnapshot`. */
  get size() {
    return this._snapshot.docs.size;
  }
  /** True if there are no documents in the `QuerySnapshot`. */
  get empty() {
    return this.size === 0;
  }
  /**
   * Enumerates all of the documents in the `QuerySnapshot`.
   *
   * @param callback - A callback to be called with a `QueryDocumentSnapshot` for
   * each document in the snapshot.
   * @param thisArg - The `this` binding for the callback.
   */
  forEach(e, t) {
    this._snapshot.docs.forEach((r) => {
      e.call(t, new Oo(this._firestore, this._userDataWriter, r.key, r, new Qi(this._snapshot.mutatedKeys.has(r.key), this._snapshot.fromCache), this.query.converter));
    });
  }
  /**
   * Returns an array of the documents changes since the last snapshot. If this
   * is the first snapshot, all documents will be in the list as 'added'
   * changes.
   *
   * @param options - `SnapshotListenOptions` that control whether metadata-only
   * changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger
   * snapshot events.
   */
  docChanges(e = {}) {
    const t = !!e.includeMetadataChanges;
    if (t && this._snapshot.excludesMetadataChanges) throw new X(B.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
    return this._cachedChanges && this._cachedChangesIncludeMetadataChanges === t || (this._cachedChanges = /** Calculates the array of `DocumentChange`s for a given `ViewSnapshot`. */
    function(i, s) {
      if (i._snapshot.oldDocs.isEmpty()) {
        let o = 0;
        return i._snapshot.docChanges.map((c) => {
          const u = new Oo(i._firestore, i._userDataWriter, c.doc.key, c.doc, new Qi(i._snapshot.mutatedKeys.has(c.doc.key), i._snapshot.fromCache), i.query.converter);
          return c.doc, {
            type: "added",
            doc: u,
            oldIndex: -1,
            newIndex: o++
          };
        });
      }
      {
        let o = i._snapshot.oldDocs;
        return i._snapshot.docChanges.filter((c) => s || c.type !== 3).map((c) => {
          const u = new Oo(i._firestore, i._userDataWriter, c.doc.key, c.doc, new Qi(i._snapshot.mutatedKeys.has(c.doc.key), i._snapshot.fromCache), i.query.converter);
          let l = -1, f = -1;
          return c.type !== 0 && (l = o.indexOf(c.doc.key), o = o.delete(c.doc.key)), c.type !== 1 && (o = o.add(c.doc), f = o.indexOf(c.doc.key)), {
            type: fD(c.type),
            doc: u,
            oldIndex: l,
            newIndex: f
          };
        });
      }
    }(this, t), this._cachedChangesIncludeMetadataChanges = t), this._cachedChanges;
  }
}
function fD(n) {
  switch (n) {
    case 0:
      return "added";
    case 2:
    case 3:
      return "modified";
    case 1:
      return "removed";
    default:
      return ce();
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Bx(n) {
  n = qn(n, At);
  const e = qn(n.firestore, ys);
  return HO(Zl(e), n._key).then((t) => tv(e, n, t));
}
class ev extends uD {
  constructor(e) {
    super(), this.firestore = e;
  }
  convertBytes(e) {
    return new fi(e);
  }
  convertReference(e) {
    const t = this.convertDocumentKey(e, this.firestore._databaseId);
    return new At(
      this.firestore,
      /* converter= */
      null,
      t
    );
  }
}
function dD(n, e, t) {
  n = qn(n, At);
  const r = qn(n.firestore, ys), i = lD(n.converter, e, t);
  return mD(r, [tD(H_(r), "setDoc", n._key, i, n.converter !== null, t).toMutation(n._key, En.none())]);
}
function pD(n, ...e) {
  var t, r, i;
  n = Qe(n);
  let s = {
    includeMetadataChanges: !1,
    source: "default"
  }, o = 0;
  typeof e[o] != "object" || Kp(e[o]) || (s = e[o], o++);
  const c = {
    includeMetadataChanges: s.includeMetadataChanges,
    source: s.source
  };
  if (Kp(e[o])) {
    const h = e[o];
    e[o] = (t = h.next) === null || t === void 0 ? void 0 : t.bind(h), e[o + 1] = (r = h.error) === null || r === void 0 ? void 0 : r.bind(h), e[o + 2] = (i = h.complete) === null || i === void 0 ? void 0 : i.bind(h);
  }
  let u, l, f;
  if (n instanceof At) l = qn(n.firestore, ys), f = Pa(n._key.path), u = {
    next: (h) => {
      e[o] && e[o](tv(l, n, h));
    },
    error: e[o + 1],
    complete: e[o + 2]
  };
  else {
    const h = qn(n, Ti);
    l = qn(h.firestore, ys), f = h._query;
    const y = new ev(l);
    u = {
      next: (T) => {
        e[o] && e[o](new hD(l, y, h, T));
      },
      error: e[o + 1],
      complete: e[o + 2]
    }, aD(n._query);
  }
  return function(y, T, S, C) {
    const w = new U_(C), E = new k_(T, w, S);
    return y.asyncQueue.enqueueAndForget(async () => C_(await $u(y), E)), () => {
      w.Ga(), y.asyncQueue.enqueueAndForget(async () => P_(await $u(y), E));
    };
  }(Zl(l), f, c, u);
}
function mD(n, e) {
  return function(r, i) {
    const s = new Bn();
    return r.asyncQueue.enqueueAndForget(async () => NO(await zO(r), i, s)), s.promise;
  }(Zl(n), e);
}
function tv(n, e, t) {
  const r = t.docs.get(e._key), i = new ev(n);
  return new Z_(n, i, e._key, r, new Qi(t.hasPendingWrites, t.fromCache), e.converter);
}
(function(e, t = !0) {
  (function(i) {
    _i = i;
  })(Dr), br(new zn("firestore", (r, { instanceIdentifier: i, options: s }) => {
    const o = r.getProvider("app").getImmediate(), c = new ys(new dP(r.getProvider("auth-internal")), new yP(r.getProvider("app-check-internal")), function(l, f) {
      if (!Object.prototype.hasOwnProperty.apply(l.options, ["projectId"])) throw new X(B.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
      return new ds(l.options.projectId, f);
    }(o, i), o);
    return s = Object.assign({
      useFetchStreams: t
    }, s), c._setSettings(s), c;
  }, "PUBLIC").setMultipleInstances(!0)), nn(ap, "4.6.5", e), // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
  nn(ap, "4.6.5", "esm2017");
})();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const nv = "firebasestorage.googleapis.com", rv = "storageBucket", gD = 2 * 60 * 1e3, yD = 10 * 60 * 1e3;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class nt extends ln {
  /**
   * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and
   *  added to the end of the message.
   * @param message  - Error message.
   * @param status_ - Corresponding HTTP Status Code
   */
  constructor(e, t, r = 0) {
    super(Vc(e), `Firebase Storage: ${t} (${Vc(e)})`), this.status_ = r, this.customData = { serverResponse: null }, this._baseMessage = this.message, Object.setPrototypeOf(this, nt.prototype);
  }
  get status() {
    return this.status_;
  }
  set status(e) {
    this.status_ = e;
  }
  /**
   * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.
   */
  _codeEquals(e) {
    return Vc(e) === this.code;
  }
  /**
   * Optional response message that was added by the server.
   */
  get serverResponse() {
    return this.customData.serverResponse;
  }
  set serverResponse(e) {
    this.customData.serverResponse = e, this.customData.serverResponse ? this.message = `${this._baseMessage}
${this.customData.serverResponse}` : this.message = this._baseMessage;
  }
}
var tt;
(function(n) {
  n.UNKNOWN = "unknown", n.OBJECT_NOT_FOUND = "object-not-found", n.BUCKET_NOT_FOUND = "bucket-not-found", n.PROJECT_NOT_FOUND = "project-not-found", n.QUOTA_EXCEEDED = "quota-exceeded", n.UNAUTHENTICATED = "unauthenticated", n.UNAUTHORIZED = "unauthorized", n.UNAUTHORIZED_APP = "unauthorized-app", n.RETRY_LIMIT_EXCEEDED = "retry-limit-exceeded", n.INVALID_CHECKSUM = "invalid-checksum", n.CANCELED = "canceled", n.INVALID_EVENT_NAME = "invalid-event-name", n.INVALID_URL = "invalid-url", n.INVALID_DEFAULT_BUCKET = "invalid-default-bucket", n.NO_DEFAULT_BUCKET = "no-default-bucket", n.CANNOT_SLICE_BLOB = "cannot-slice-blob", n.SERVER_FILE_WRONG_SIZE = "server-file-wrong-size", n.NO_DOWNLOAD_URL = "no-download-url", n.INVALID_ARGUMENT = "invalid-argument", n.INVALID_ARGUMENT_COUNT = "invalid-argument-count", n.APP_DELETED = "app-deleted", n.INVALID_ROOT_OPERATION = "invalid-root-operation", n.INVALID_FORMAT = "invalid-format", n.INTERNAL_ERROR = "internal-error", n.UNSUPPORTED_ENVIRONMENT = "unsupported-environment";
})(tt || (tt = {}));
function Vc(n) {
  return "storage/" + n;
}
function iv() {
  const n = "An unknown error occurred, please check the error payload for server response.";
  return new nt(tt.UNKNOWN, n);
}
function _D(n) {
  return new nt(tt.OBJECT_NOT_FOUND, "Object '" + n + "' does not exist.");
}
function vD(n) {
  return new nt(tt.QUOTA_EXCEEDED, "Quota for bucket '" + n + "' exceeded, please view quota on https://firebase.google.com/pricing/.");
}
function wD() {
  const n = "User is not authenticated, please authenticate using Firebase Authentication and try again.";
  return new nt(tt.UNAUTHENTICATED, n);
}
function ED() {
  return new nt(tt.UNAUTHORIZED_APP, "This app does not have permission to access Firebase Storage on this project.");
}
function TD(n) {
  return new nt(tt.UNAUTHORIZED, "User does not have permission to access '" + n + "'.");
}
function bD() {
  return new nt(tt.RETRY_LIMIT_EXCEEDED, "Max retry time for operation exceeded, please try again.");
}
function ID() {
  return new nt(tt.CANCELED, "User canceled the upload/download.");
}
function SD(n) {
  return new nt(tt.INVALID_URL, "Invalid URL '" + n + "'.");
}
function AD(n) {
  return new nt(tt.INVALID_DEFAULT_BUCKET, "Invalid default bucket '" + n + "'.");
}
function RD() {
  return new nt(tt.NO_DEFAULT_BUCKET, "No default bucket found. Did you set the '" + rv + "' property when initializing the app?");
}
function CD() {
  return new nt(tt.NO_DOWNLOAD_URL, "The given file does not have any download URLs.");
}
function Bu(n) {
  return new nt(tt.INVALID_ARGUMENT, n);
}
function sv() {
  return new nt(tt.APP_DELETED, "The Firebase app was deleted.");
}
function PD(n) {
  return new nt(tt.INVALID_ROOT_OPERATION, "The operation '" + n + "' cannot be performed on a root reference, create a non-root reference using child, such as .child('file.png').");
}
function ji(n) {
  throw new nt(tt.INTERNAL_ERROR, "Internal error: " + n);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Dt {
  constructor(e, t) {
    this.bucket = e, this.path_ = t;
  }
  get path() {
    return this.path_;
  }
  get isRoot() {
    return this.path.length === 0;
  }
  fullServerUrl() {
    const e = encodeURIComponent;
    return "/b/" + e(this.bucket) + "/o/" + e(this.path);
  }
  bucketOnlyServerUrl() {
    return "/b/" + encodeURIComponent(this.bucket) + "/o";
  }
  static makeFromBucketSpec(e, t) {
    let r;
    try {
      r = Dt.makeFromUrl(e, t);
    } catch {
      return new Dt(e, "");
    }
    if (r.path === "")
      return r;
    throw AD(e);
  }
  static makeFromUrl(e, t) {
    let r = null;
    const i = "([A-Za-z0-9.\\-_]+)";
    function s(m) {
      m.path.charAt(m.path.length - 1) === "/" && (m.path_ = m.path_.slice(0, -1));
    }
    const o = "(/(.*))?$", c = new RegExp("^gs://" + i + o, "i"), u = { bucket: 1, path: 3 };
    function l(m) {
      m.path_ = decodeURIComponent(m.path);
    }
    const f = "v[A-Za-z0-9_]+", h = t.replace(/[.]/g, "\\."), y = "(/([^?#]*).*)?$", T = new RegExp(`^https?://${h}/${f}/b/${i}/o${y}`, "i"), S = { bucket: 1, path: 3 }, C = t === nv ? "(?:storage.googleapis.com|storage.cloud.google.com)" : t, w = "([^?#]*)", E = new RegExp(`^https?://${C}/${i}/${w}`, "i"), d = [
      { regex: c, indices: u, postModify: s },
      {
        regex: T,
        indices: S,
        postModify: l
      },
      {
        regex: E,
        indices: { bucket: 1, path: 2 },
        postModify: l
      }
    ];
    for (let m = 0; m < d.length; m++) {
      const v = d[m], I = v.regex.exec(e);
      if (I) {
        const R = I[v.indices.bucket];
        let b = I[v.indices.path];
        b || (b = ""), r = new Dt(R, b), v.postModify(r);
        break;
      }
    }
    if (r == null)
      throw SD(e);
    return r;
  }
}
class kD {
  constructor(e) {
    this.promise_ = Promise.reject(e);
  }
  /** @inheritDoc */
  getPromise() {
    return this.promise_;
  }
  /** @inheritDoc */
  cancel(e = !1) {
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function OD(n, e, t) {
  let r = 1, i = null, s = null, o = !1, c = 0;
  function u() {
    return c === 2;
  }
  let l = !1;
  function f(...w) {
    l || (l = !0, e.apply(null, w));
  }
  function h(w) {
    i = setTimeout(() => {
      i = null, n(T, u());
    }, w);
  }
  function y() {
    s && clearTimeout(s);
  }
  function T(w, ...E) {
    if (l) {
      y();
      return;
    }
    if (w) {
      y(), f.call(null, w, ...E);
      return;
    }
    if (u() || o) {
      y(), f.call(null, w, ...E);
      return;
    }
    r < 64 && (r *= 2);
    let d;
    c === 1 ? (c = 2, d = 0) : d = (r + Math.random()) * 1e3, h(d);
  }
  let S = !1;
  function C(w) {
    S || (S = !0, y(), !l && (i !== null ? (w || (c = 2), clearTimeout(i), h(0)) : w || (c = 1)));
  }
  return h(0), s = setTimeout(() => {
    o = !0, C(!0);
  }, t), C;
}
function DD(n) {
  n(!1);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function ND(n) {
  return n !== void 0;
}
function xD(n) {
  return typeof n == "object" && !Array.isArray(n);
}
function ov(n) {
  return typeof n == "string" || n instanceof String;
}
function Gp(n, e, t, r) {
  if (r < e)
    throw Bu(`Invalid value for '${n}'. Expected ${e} or greater.`);
  if (r > t)
    throw Bu(`Invalid value for '${n}'. Expected ${t} or less.`);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function av(n, e, t) {
  let r = e;
  return t == null && (r = `https://${e}`), `${t}://${r}/v0${n}`;
}
function cv(n) {
  const e = encodeURIComponent;
  let t = "?";
  for (const r in n)
    if (n.hasOwnProperty(r)) {
      const i = e(r) + "=" + e(n[r]);
      t = t + i + "&";
    }
  return t = t.slice(0, -1), t;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var gr;
(function(n) {
  n[n.NO_ERROR = 0] = "NO_ERROR", n[n.NETWORK_ERROR = 1] = "NETWORK_ERROR", n[n.ABORT = 2] = "ABORT";
})(gr || (gr = {}));
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function LD(n, e) {
  const t = n >= 500 && n < 600, i = [
    // Request Timeout: web server didn't receive full request in time.
    408,
    // Too Many Requests: you're getting rate-limited, basically.
    429
  ].indexOf(n) !== -1, s = e.indexOf(n) !== -1;
  return t || i || s;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class MD {
  constructor(e, t, r, i, s, o, c, u, l, f, h, y = !0) {
    this.url_ = e, this.method_ = t, this.headers_ = r, this.body_ = i, this.successCodes_ = s, this.additionalRetryCodes_ = o, this.callback_ = c, this.errorCallback_ = u, this.timeout_ = l, this.progressCallback_ = f, this.connectionFactory_ = h, this.retry = y, this.pendingConnection_ = null, this.backoffId_ = null, this.canceled_ = !1, this.appDelete_ = !1, this.promise_ = new Promise((T, S) => {
      this.resolve_ = T, this.reject_ = S, this.start_();
    });
  }
  /**
   * Actually starts the retry loop.
   */
  start_() {
    const e = (r, i) => {
      if (i) {
        r(!1, new go(!1, null, !0));
        return;
      }
      const s = this.connectionFactory_();
      this.pendingConnection_ = s;
      const o = (c) => {
        const u = c.loaded, l = c.lengthComputable ? c.total : -1;
        this.progressCallback_ !== null && this.progressCallback_(u, l);
      };
      this.progressCallback_ !== null && s.addUploadProgressListener(o), s.send(this.url_, this.method_, this.body_, this.headers_).then(() => {
        this.progressCallback_ !== null && s.removeUploadProgressListener(o), this.pendingConnection_ = null;
        const c = s.getErrorCode() === gr.NO_ERROR, u = s.getStatus();
        if (!c || LD(u, this.additionalRetryCodes_) && this.retry) {
          const f = s.getErrorCode() === gr.ABORT;
          r(!1, new go(!1, null, f));
          return;
        }
        const l = this.successCodes_.indexOf(u) !== -1;
        r(!0, new go(l, s));
      });
    }, t = (r, i) => {
      const s = this.resolve_, o = this.reject_, c = i.connection;
      if (i.wasSuccessCode)
        try {
          const u = this.callback_(c, c.getResponse());
          ND(u) ? s(u) : s();
        } catch (u) {
          o(u);
        }
      else if (c !== null) {
        const u = iv();
        u.serverResponse = c.getErrorText(), this.errorCallback_ ? o(this.errorCallback_(c, u)) : o(u);
      } else if (i.canceled) {
        const u = this.appDelete_ ? sv() : ID();
        o(u);
      } else {
        const u = bD();
        o(u);
      }
    };
    this.canceled_ ? t(!1, new go(!1, null, !0)) : this.backoffId_ = OD(e, t, this.timeout_);
  }
  /** @inheritDoc */
  getPromise() {
    return this.promise_;
  }
  /** @inheritDoc */
  cancel(e) {
    this.canceled_ = !0, this.appDelete_ = e || !1, this.backoffId_ !== null && DD(this.backoffId_), this.pendingConnection_ !== null && this.pendingConnection_.abort();
  }
}
class go {
  constructor(e, t, r) {
    this.wasSuccessCode = e, this.connection = t, this.canceled = !!r;
  }
}
function VD(n, e) {
  e !== null && e.length > 0 && (n.Authorization = "Firebase " + e);
}
function FD(n, e) {
  n["X-Firebase-Storage-Version"] = "webjs/" + (e ?? "AppManager");
}
function UD(n, e) {
  e && (n["X-Firebase-GMPID"] = e);
}
function jD(n, e) {
  e !== null && (n["X-Firebase-AppCheck"] = e);
}
function $D(n, e, t, r, i, s, o = !0) {
  const c = cv(n.urlParams), u = n.url + c, l = Object.assign({}, n.headers);
  return UD(l, e), VD(l, t), FD(l, s), jD(l, r), new MD(u, n.method, l, n.body, n.successCodes, n.additionalRetryCodes, n.handler, n.errorHandler, n.timeout, n.progressCallback, i, o);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function uv(n) {
  let e;
  try {
    e = JSON.parse(n);
  } catch {
    return null;
  }
  return xD(e) ? e : null;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function BD(n) {
  if (n.length === 0)
    return null;
  const e = n.lastIndexOf("/");
  return e === -1 ? "" : n.slice(0, e);
}
function qD(n, e) {
  const t = e.split("/").filter((r) => r.length > 0).join("/");
  return n.length === 0 ? t : n + "/" + t;
}
function lv(n) {
  const e = n.lastIndexOf("/", n.length - 2);
  return e === -1 ? n : n.slice(e + 1);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function KD(n, e) {
  return e;
}
class It {
  constructor(e, t, r, i) {
    this.server = e, this.local = t || e, this.writable = !!r, this.xform = i || KD;
  }
}
let yo = null;
function zD(n) {
  return !ov(n) || n.length < 2 ? n : lv(n);
}
function HD() {
  if (yo)
    return yo;
  const n = [];
  n.push(new It("bucket")), n.push(new It("generation")), n.push(new It("metageneration")), n.push(new It("name", "fullPath", !0));
  function e(s, o) {
    return zD(o);
  }
  const t = new It("name");
  t.xform = e, n.push(t);
  function r(s, o) {
    return o !== void 0 ? Number(o) : o;
  }
  const i = new It("size");
  return i.xform = r, n.push(i), n.push(new It("timeCreated")), n.push(new It("updated")), n.push(new It("md5Hash", null, !0)), n.push(new It("cacheControl", null, !0)), n.push(new It("contentDisposition", null, !0)), n.push(new It("contentEncoding", null, !0)), n.push(new It("contentLanguage", null, !0)), n.push(new It("contentType", null, !0)), n.push(new It("metadata", "customMetadata", !0)), yo = n, yo;
}
function GD(n, e) {
  function t() {
    const r = n.bucket, i = n.fullPath, s = new Dt(r, i);
    return e._makeStorageReference(s);
  }
  Object.defineProperty(n, "ref", { get: t });
}
function WD(n, e, t) {
  const r = {};
  r.type = "file";
  const i = t.length;
  for (let s = 0; s < i; s++) {
    const o = t[s];
    r[o.local] = o.xform(r, e[o.server]);
  }
  return GD(r, n), r;
}
function QD(n, e, t) {
  const r = uv(e);
  return r === null ? null : WD(n, r, t);
}
function YD(n, e, t, r) {
  const i = uv(e);
  if (i === null || !ov(i.downloadTokens))
    return null;
  const s = i.downloadTokens;
  if (s.length === 0)
    return null;
  const o = encodeURIComponent;
  return s.split(",").map((l) => {
    const f = n.bucket, h = n.fullPath, y = "/b/" + o(f) + "/o/" + o(h), T = av(y, t, r), S = cv({
      alt: "media",
      token: l
    });
    return T + S;
  })[0];
}
class JD {
  constructor(e, t, r, i) {
    this.url = e, this.method = t, this.handler = r, this.timeout = i, this.urlParams = {}, this.headers = {}, this.body = null, this.errorHandler = null, this.progressCallback = null, this.successCodes = [200], this.additionalRetryCodes = [];
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function XD(n) {
  if (!n)
    throw iv();
}
function ZD(n, e) {
  function t(r, i) {
    const s = QD(n, i, e);
    return XD(s !== null), YD(s, i, n.host, n._protocol);
  }
  return t;
}
function eN(n) {
  function e(t, r) {
    let i;
    return t.getStatus() === 401 ? /* This exact message string is the only consistent part of the */ /* server's error response that identifies it as an App Check error. */ t.getErrorText().includes("Firebase App Check token is invalid") ? i = ED() : i = wD() : t.getStatus() === 402 ? i = vD(n.bucket) : t.getStatus() === 403 ? i = TD(n.path) : i = r, i.status = t.getStatus(), i.serverResponse = r.serverResponse, i;
  }
  return e;
}
function tN(n) {
  const e = eN(n);
  function t(r, i) {
    let s = e(r, i);
    return r.getStatus() === 404 && (s = _D(n.path)), s.serverResponse = i.serverResponse, s;
  }
  return t;
}
function nN(n, e, t) {
  const r = e.fullServerUrl(), i = av(r, n.host, n._protocol), s = "GET", o = n.maxOperationRetryTime, c = new JD(i, s, ZD(n, t), o);
  return c.errorHandler = tN(e), c;
}
class rN {
  constructor() {
    this.sent_ = !1, this.xhr_ = new XMLHttpRequest(), this.initXhr(), this.errorCode_ = gr.NO_ERROR, this.sendPromise_ = new Promise((e) => {
      this.xhr_.addEventListener("abort", () => {
        this.errorCode_ = gr.ABORT, e();
      }), this.xhr_.addEventListener("error", () => {
        this.errorCode_ = gr.NETWORK_ERROR, e();
      }), this.xhr_.addEventListener("load", () => {
        e();
      });
    });
  }
  send(e, t, r, i) {
    if (this.sent_)
      throw ji("cannot .send() more than once");
    if (this.sent_ = !0, this.xhr_.open(t, e, !0), i !== void 0)
      for (const s in i)
        i.hasOwnProperty(s) && this.xhr_.setRequestHeader(s, i[s].toString());
    return r !== void 0 ? this.xhr_.send(r) : this.xhr_.send(), this.sendPromise_;
  }
  getErrorCode() {
    if (!this.sent_)
      throw ji("cannot .getErrorCode() before sending");
    return this.errorCode_;
  }
  getStatus() {
    if (!this.sent_)
      throw ji("cannot .getStatus() before sending");
    try {
      return this.xhr_.status;
    } catch {
      return -1;
    }
  }
  getResponse() {
    if (!this.sent_)
      throw ji("cannot .getResponse() before sending");
    return this.xhr_.response;
  }
  getErrorText() {
    if (!this.sent_)
      throw ji("cannot .getErrorText() before sending");
    return this.xhr_.statusText;
  }
  /** Aborts the request. */
  abort() {
    this.xhr_.abort();
  }
  getResponseHeader(e) {
    return this.xhr_.getResponseHeader(e);
  }
  addUploadProgressListener(e) {
    this.xhr_.upload != null && this.xhr_.upload.addEventListener("progress", e);
  }
  removeUploadProgressListener(e) {
    this.xhr_.upload != null && this.xhr_.upload.removeEventListener("progress", e);
  }
}
class iN extends rN {
  initXhr() {
    this.xhr_.responseType = "text";
  }
}
function sN() {
  return new iN();
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Cr {
  constructor(e, t) {
    this._service = e, t instanceof Dt ? this._location = t : this._location = Dt.makeFromUrl(t, e.host);
  }
  /**
   * Returns the URL for the bucket and path this object references,
   *     in the form gs://<bucket>/<object-path>
   * @override
   */
  toString() {
    return "gs://" + this._location.bucket + "/" + this._location.path;
  }
  _newRef(e, t) {
    return new Cr(e, t);
  }
  /**
   * A reference to the root of this object's bucket.
   */
  get root() {
    const e = new Dt(this._location.bucket, "");
    return this._newRef(this._service, e);
  }
  /**
   * The name of the bucket containing this reference's object.
   */
  get bucket() {
    return this._location.bucket;
  }
  /**
   * The full path of this object.
   */
  get fullPath() {
    return this._location.path;
  }
  /**
   * The short name of this object, which is the last component of the full path.
   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.
   */
  get name() {
    return lv(this._location.path);
  }
  /**
   * The `StorageService` instance this `StorageReference` is associated with.
   */
  get storage() {
    return this._service;
  }
  /**
   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if
   * this reference is the root.
   */
  get parent() {
    const e = BD(this._location.path);
    if (e === null)
      return null;
    const t = new Dt(this._location.bucket, e);
    return new Cr(this._service, t);
  }
  /**
   * Utility function to throw an error in methods that do not accept a root reference.
   */
  _throwIfRoot(e) {
    if (this._location.path === "")
      throw PD(e);
  }
}
function oN(n) {
  n._throwIfRoot("getDownloadURL");
  const e = nN(n.storage, n._location, HD());
  return n.storage.makeRequestWithTokens(e, sN).then((t) => {
    if (t === null)
      throw CD();
    return t;
  });
}
function aN(n, e) {
  const t = qD(n._location.path, e), r = new Dt(n._location.bucket, t);
  return new Cr(n.storage, r);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function cN(n) {
  return /^[A-Za-z]+:\/\//.test(n);
}
function uN(n, e) {
  return new Cr(n, e);
}
function hv(n, e) {
  if (n instanceof ah) {
    const t = n;
    if (t._bucket == null)
      throw RD();
    const r = new Cr(t, t._bucket);
    return e != null ? hv(r, e) : r;
  } else
    return e !== void 0 ? aN(n, e) : n;
}
function lN(n, e) {
  if (e && cN(e)) {
    if (n instanceof ah)
      return uN(n, e);
    throw Bu("To use ref(service, url), the first argument must be a Storage instance.");
  } else
    return hv(n, e);
}
function Wp(n, e) {
  const t = e == null ? void 0 : e[rv];
  return t == null ? null : Dt.makeFromBucketSpec(t, n);
}
function hN(n, e, t, r = {}) {
  n.host = `${e}:${t}`, n._protocol = "http";
  const { mockUserToken: i } = r;
  i && (n._overrideAuthToken = typeof i == "string" ? i : zg(i, n.app.options.projectId));
}
class ah {
  constructor(e, t, r, i, s) {
    this.app = e, this._authProvider = t, this._appCheckProvider = r, this._url = i, this._firebaseVersion = s, this._bucket = null, this._host = nv, this._protocol = "https", this._appId = null, this._deleted = !1, this._maxOperationRetryTime = gD, this._maxUploadRetryTime = yD, this._requests = /* @__PURE__ */ new Set(), i != null ? this._bucket = Dt.makeFromBucketSpec(i, this._host) : this._bucket = Wp(this._host, this.app.options);
  }
  /**
   * The host string for this service, in the form of `host` or
   * `host:port`.
   */
  get host() {
    return this._host;
  }
  set host(e) {
    this._host = e, this._url != null ? this._bucket = Dt.makeFromBucketSpec(this._url, e) : this._bucket = Wp(e, this.app.options);
  }
  /**
   * The maximum time to retry uploads in milliseconds.
   */
  get maxUploadRetryTime() {
    return this._maxUploadRetryTime;
  }
  set maxUploadRetryTime(e) {
    Gp(
      "time",
      /* minValue=*/
      0,
      /* maxValue= */
      Number.POSITIVE_INFINITY,
      e
    ), this._maxUploadRetryTime = e;
  }
  /**
   * The maximum time to retry operations other than uploads or downloads in
   * milliseconds.
   */
  get maxOperationRetryTime() {
    return this._maxOperationRetryTime;
  }
  set maxOperationRetryTime(e) {
    Gp(
      "time",
      /* minValue=*/
      0,
      /* maxValue= */
      Number.POSITIVE_INFINITY,
      e
    ), this._maxOperationRetryTime = e;
  }
  async _getAuthToken() {
    if (this._overrideAuthToken)
      return this._overrideAuthToken;
    const e = this._authProvider.getImmediate({ optional: !0 });
    if (e) {
      const t = await e.getToken();
      if (t !== null)
        return t.accessToken;
    }
    return null;
  }
  async _getAppCheckToken() {
    const e = this._appCheckProvider.getImmediate({ optional: !0 });
    return e ? (await e.getToken()).token : null;
  }
  /**
   * Stop running requests and prevent more from being created.
   */
  _delete() {
    return this._deleted || (this._deleted = !0, this._requests.forEach((e) => e.cancel()), this._requests.clear()), Promise.resolve();
  }
  /**
   * Returns a new firebaseStorage.Reference object referencing this StorageService
   * at the given Location.
   */
  _makeStorageReference(e) {
    return new Cr(this, e);
  }
  /**
   * @param requestInfo - HTTP RequestInfo object
   * @param authToken - Firebase auth token
   */
  _makeRequest(e, t, r, i, s = !0) {
    if (this._deleted)
      return new kD(sv());
    {
      const o = $D(e, this._appId, r, i, t, this._firebaseVersion, s);
      return this._requests.add(o), o.getPromise().then(() => this._requests.delete(o), () => this._requests.delete(o)), o;
    }
  }
  async makeRequestWithTokens(e, t) {
    const [r, i] = await Promise.all([
      this._getAuthToken(),
      this._getAppCheckToken()
    ]);
    return this._makeRequest(e, t, r, i).getPromise();
  }
}
const Qp = "@firebase/storage", Yp = "0.12.6";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const fv = "storage";
function fN(n) {
  return n = Qe(n), oN(n);
}
function dN(n, e) {
  return n = Qe(n), lN(n, e);
}
function pN(n = _l(), e) {
  n = Qe(n);
  const r = Ia(n, fv).getImmediate({
    identifier: e
  }), i = Bg("storage");
  return i && mN(r, ...i), r;
}
function mN(n, e, t, r = {}) {
  hN(n, e, t, r);
}
function gN(n, { instanceIdentifier: e }) {
  const t = n.getProvider("app").getImmediate(), r = n.getProvider("auth-internal"), i = n.getProvider("app-check-internal");
  return new ah(t, r, i, e, Dr);
}
function yN() {
  br(new zn(
    fv,
    gN,
    "PUBLIC"
    /* ComponentType.PUBLIC */
  ).setMultipleInstances(!0)), nn(Qp, Yp, ""), nn(Qp, Yp, "esm2017");
}
yN();
const _N = {
  apiKey: "AIzaSyBmcnHP80KXpBXltHrVnP1MZPsiSbVbWqQ",
  authDomain: "water-fetch.firebaseapp.com",
  projectId: "water-fetch",
  storageBucket: "water-fetch.appspot.com",
  messagingSenderId: "911813185967"
}, rs = class rs {
  constructor(e) {
    gn(this, "app");
    gn(this, "auth");
    gn(this, "db");
    gn(this, "storage");
    gn(this, "lockConfig");
    if (this.props = e, rs.server)
      throw "server already initialized";
    const { projectId: t, ...r } = e;
    this.lockConfig = {
      ..._N,
      ...r
    }, this.app = Wg(this.lockConfig), this.auth = uP(this.app), this.db = JO(this.app), this.storage = pN(this.app), rs.server = this;
  }
  get config() {
    return this.lockConfig;
  }
};
gn(rs, "server", null);
let jt = rs;
class vN {
  constructor(e) {
    gn(this, "app", {
      // for access database
      database: {
        // write options
        createDoc: async (e, t) => {
        },
        upsertDoc: async (e, t) => {
        },
        updateDoc: async (e, t) => {
        },
        deleteDoc: async (e) => {
        },
        // read options
        getDoc: async (e) => null,
        getDocs: async (e) => null
        // rest of the database methods
      },
      storage: {
        // write options
        async createFile(e, t) {
        },
        async upsertFile(e, t) {
        },
        async updateFile(e, t) {
        },
        async deleteFile(e) {
        },
        // read options
        async getFileContent(e) {
          return null;
        },
        async getFiles(e) {
          return null;
        }
        // rest of the storage methods
      },
      auth: {
        async changeUser(e) {
        },
        async signIn(e) {
        },
        async update(e, t) {
        },
        async getCurrentAuth() {
          return null;
        },
        async signOut() {
        },
        async deleteUser() {
        },
        async getUserToken() {
          return null;
        },
        async resetPassword() {
        }
      },
      functions: {
        // write options
        async getFunction(e, t) {
          return null;
        }
        // rest of the functions methods
      }
    });
    this.metaData = e;
  }
  // #defaultFunction = (a: string, b: string) => {
  //   con.warn(`${a}/${b} Not Defined`);
  // };
  define(e, t, r) {
    this.app[e][t] = r;
  }
  call(e, t) {
    return this.app[e][t];
  }
}
let wN = new vN({});
wN.call("database", "getDocs");
const EN = ["jpg", "jpeg", "png", "gif", "bmp", "svg", "webp", "tiff", "ico", "jfif"];
function TN(n) {
  const e = ft();
  return new Promise((t, r) => {
    var o;
    if (!((o = n.buttons) != null && o.length)) {
      r("Need Minimum One Button");
      return;
    }
    Pd.setTemp("id", e), Pd.setTemp("params", n);
    const i = async () => {
      var f, h, y;
      const { slot: c, object: u } = we.getState(), l = (f = c.entities["dialog-list"]) == null ? void 0 : f.submited;
      typeof l == "number" && (t({
        response: l,
        checkboxChecked: ((y = (h = u.data) == null ? void 0 : h.dialog) == null ? void 0 : y.checked) || !1
      }), s(), Ft("dialog.id", null));
    }, s = we.subscribe(i);
  });
}
async function qx() {
  const { screenX: n, screenY: e, innerWidth: t, innerHeight: r } = window;
  return {
    x: n,
    y: e,
    width: t,
    height: r
  };
}
async function Kx() {
  return await fetch("https://api.ipify.org?format=json").then((n) => n.json()).then((n) => n.ip);
}
const zx = (n) => {
  var r;
  const e = (r = n.match(/\.[a-z]+$/gi)) == null ? void 0 : r[0].slice(1).toLowerCase();
  let t = {};
  return EN.forEach((i) => {
    t[i] = i;
  }), t = {
    ...t,
    jpg: "jpeg",
    svg: "svg+xml"
  }, e ? t[e] : "png";
}, Hx = async ({ to: n, subject: e = "", body: t = "" }) => {
  const r = document.createElement("a");
  r.href = `mailto:${n}?subject=${encodeURIComponent(e)}&body=${encodeURIComponent(t)}`, r.target = "_blank", r.click();
}, Gx = ({ tel: n }) => {
  const e = document.createElement("a");
  e.href = `tel:${n}`, e.target = "_blank", e.click();
}, Wx = ({ to: n, body: e = "" }) => {
  const t = document.createElement("a");
  t.href = `sms:${n}?body=${encodeURIComponent(e)}`, t.target = "_blank", t.click();
}, qu = /* @__PURE__ */ new Map(), Qx = (n, e) => {
  const t = async () => {
    const r = e();
    r instanceof Promise && await r;
  };
  qu.set(n, t), document.addEventListener(n, t);
}, Yx = (n) => {
  const e = qu.get(n);
  e && (document.removeEventListener(n, e), qu.delete(n));
}, Jx = async ({ options: n, value: e }) => {
  kd.setTemp("main", e), kd.setTemp("main-mode", n == null ? void 0 : n.mode);
}, Xx = (n) => {
  if ($r.setTemp("position", [n.x, n.y]), typeof pl("menu.id") == "string")
    throw "menu defined before";
  const t = ft();
  $r.setTemp("id", t), $r.setTemp(
    "list",
    n.menu.map(({ click: r, ...i }) => i)
  ), Ku(
    "object.data.menu.result",
    (r) => typeof r == "number",
    (r) => {
      var s, o;
      const i = (s = r.object.data) == null ? void 0 : s.menu;
      if (typeof i == "object" && typeof i.result == "number" && i.id == t) {
        $r.setTemp("id", null), $r.setTemp("list", []), $r.setTemp("result", null);
        const c = n.menu[i.result];
        (o = c.click) == null || o.call(c);
      }
    }
  );
}, Zx = (n) => new Promise((e, t) => {
  var i;
  const r = document.createElement("input");
  r.type = "file", n.filters ? r.accept = n.filters.map(({ name: s, extensions: o }) => `${s}.{${o.join(",")}`).join(",") : r.accept = "*", r.multiple = !!((i = n.properties) != null && i.includes("multiSelections")), r.onchange = async () => {
    var s;
    if ((s = r.files) != null && s.length) {
      const o = [];
      for (let u = 0; u < r.files.length; u++) {
        const l = r.files.item(u);
        l && o.push(l);
      }
      const c = await Zv(o, async (u) => new Promise((l) => {
        const f = new FileReader();
        f.onload = () => {
          f.result && l(f.result.toString());
        }, f.readAsDataURL(u);
      }));
      e(c);
    }
  }, r.click(), r.onerror = t;
}), eL = async (n) => (await TN({
  ...n,
  buttons: ["Yes", "No"]
})).response === 0, tL = async (n) => {
  let e = ft();
  return Ft("date-layout-time.init", n.init instanceof Date ? n.init.getTime() : n.init), Ft("date-layout-time.id", e), new Promise((t) => {
    let r = lh(
      "date-layout-time.id",
      (i) => i == e,
      (i) => {
        const s = pl("date-layout-time", i);
        typeof (s == null ? void 0 : s.result) == "number" && (t({
          id: e,
          time: s.result,
          canceled: s.canceled || !1
        }), Ft("date-layout-time", null), r());
      }
    );
  });
};
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Jp;
(function(n) {
  n.HARM_CATEGORY_UNSPECIFIED = "HARM_CATEGORY_UNSPECIFIED", n.HARM_CATEGORY_HATE_SPEECH = "HARM_CATEGORY_HATE_SPEECH", n.HARM_CATEGORY_SEXUALLY_EXPLICIT = "HARM_CATEGORY_SEXUALLY_EXPLICIT", n.HARM_CATEGORY_HARASSMENT = "HARM_CATEGORY_HARASSMENT", n.HARM_CATEGORY_DANGEROUS_CONTENT = "HARM_CATEGORY_DANGEROUS_CONTENT";
})(Jp || (Jp = {}));
var Xp;
(function(n) {
  n.HARM_BLOCK_THRESHOLD_UNSPECIFIED = "HARM_BLOCK_THRESHOLD_UNSPECIFIED", n.BLOCK_LOW_AND_ABOVE = "BLOCK_LOW_AND_ABOVE", n.BLOCK_MEDIUM_AND_ABOVE = "BLOCK_MEDIUM_AND_ABOVE", n.BLOCK_ONLY_HIGH = "BLOCK_ONLY_HIGH", n.BLOCK_NONE = "BLOCK_NONE";
})(Xp || (Xp = {}));
var Zp;
(function(n) {
  n.HARM_PROBABILITY_UNSPECIFIED = "HARM_PROBABILITY_UNSPECIFIED", n.NEGLIGIBLE = "NEGLIGIBLE", n.LOW = "LOW", n.MEDIUM = "MEDIUM", n.HIGH = "HIGH";
})(Zp || (Zp = {}));
var em;
(function(n) {
  n.BLOCKED_REASON_UNSPECIFIED = "BLOCKED_REASON_UNSPECIFIED", n.SAFETY = "SAFETY", n.OTHER = "OTHER";
})(em || (em = {}));
var ia;
(function(n) {
  n.FINISH_REASON_UNSPECIFIED = "FINISH_REASON_UNSPECIFIED", n.STOP = "STOP", n.MAX_TOKENS = "MAX_TOKENS", n.SAFETY = "SAFETY", n.RECITATION = "RECITATION", n.OTHER = "OTHER";
})(ia || (ia = {}));
var tm;
(function(n) {
  n.TASK_TYPE_UNSPECIFIED = "TASK_TYPE_UNSPECIFIED", n.RETRIEVAL_QUERY = "RETRIEVAL_QUERY", n.RETRIEVAL_DOCUMENT = "RETRIEVAL_DOCUMENT", n.SEMANTIC_SIMILARITY = "SEMANTIC_SIMILARITY", n.CLASSIFICATION = "CLASSIFICATION", n.CLUSTERING = "CLUSTERING";
})(tm || (tm = {}));
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class _s extends Error {
  constructor(e) {
    super(`[GoogleGenerativeAI Error]: ${e}`);
  }
}
class nm extends _s {
  constructor(e, t) {
    super(e), this.response = t;
  }
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const bN = "https://generativelanguage.googleapis.com", IN = "v1", SN = "0.2.1", AN = "genai-js";
var Pr;
(function(n) {
  n.GENERATE_CONTENT = "generateContent", n.STREAM_GENERATE_CONTENT = "streamGenerateContent", n.COUNT_TOKENS = "countTokens", n.EMBED_CONTENT = "embedContent", n.BATCH_EMBED_CONTENTS = "batchEmbedContents";
})(Pr || (Pr = {}));
class Ms {
  constructor(e, t, r, i) {
    this.model = e, this.task = t, this.apiKey = r, this.stream = i;
  }
  toString() {
    let e = `${bN}/${IN}/${this.model}:${this.task}`;
    return this.stream && (e += "?alt=sse"), e;
  }
}
function RN() {
  return `${AN}/${SN}`;
}
async function Vs(n, e, t) {
  let r;
  try {
    if (r = await fetch(n.toString(), Object.assign(Object.assign({}, CN(t)), { method: "POST", headers: {
      "Content-Type": "application/json",
      "x-goog-api-client": RN(),
      "x-goog-api-key": n.apiKey
    }, body: e })), !r.ok) {
      let i = "";
      try {
        const s = await r.json();
        i = s.error.message, s.error.details && (i += ` ${JSON.stringify(s.error.details)}`);
      } catch {
      }
      throw new Error(`[${r.status} ${r.statusText}] ${i}`);
    }
  } catch (i) {
    const s = new _s(`Error fetching from ${n.toString()}: ${i.message}`);
    throw s.stack = i.stack, s;
  }
  return r;
}
function CN(n) {
  const e = {};
  if ((n == null ? void 0 : n.timeout) >= 0) {
    const t = new AbortController(), r = t.signal;
    setTimeout(() => t.abort(), n.timeout), e.signal = r;
  }
  return e;
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function ch(n) {
  return n.text = () => {
    if (n.candidates && n.candidates.length > 0) {
      if (n.candidates.length > 1 && console.warn(`This response had ${n.candidates.length} candidates. Returning text from the first candidate only. Access response.candidates directly to use the other candidates.`), dv(n.candidates[0]))
        throw new nm(`${sa(n)}`, n);
      return PN(n);
    } else if (n.promptFeedback)
      throw new nm(`Text not available. ${sa(n)}`, n);
    return "";
  }, n;
}
function PN(n) {
  var e, t, r, i;
  return !((i = (r = (t = (e = n.candidates) === null || e === void 0 ? void 0 : e[0].content) === null || t === void 0 ? void 0 : t.parts) === null || r === void 0 ? void 0 : r[0]) === null || i === void 0) && i.text ? n.candidates[0].content.parts[0].text : "";
}
const kN = [ia.RECITATION, ia.SAFETY];
function dv(n) {
  return !!n.finishReason && kN.includes(n.finishReason);
}
function sa(n) {
  var e, t, r;
  let i = "";
  if ((!n.candidates || n.candidates.length === 0) && n.promptFeedback)
    i += "Response was blocked", !((e = n.promptFeedback) === null || e === void 0) && e.blockReason && (i += ` due to ${n.promptFeedback.blockReason}`), !((t = n.promptFeedback) === null || t === void 0) && t.blockReasonMessage && (i += `: ${n.promptFeedback.blockReasonMessage}`);
  else if (!((r = n.candidates) === null || r === void 0) && r[0]) {
    const s = n.candidates[0];
    dv(s) && (i += `Candidate was blocked due to ${s.finishReason}`, s.finishMessage && (i += `: ${s.finishMessage}`));
  }
  return i;
}
function vs(n) {
  return this instanceof vs ? (this.v = n, this) : new vs(n);
}
function ON(n, e, t) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var r = t.apply(n, e || []), i, s = [];
  return i = {}, o("next"), o("throw"), o("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function o(y) {
    r[y] && (i[y] = function(T) {
      return new Promise(function(S, C) {
        s.push([y, T, S, C]) > 1 || c(y, T);
      });
    });
  }
  function c(y, T) {
    try {
      u(r[y](T));
    } catch (S) {
      h(s[0][3], S);
    }
  }
  function u(y) {
    y.value instanceof vs ? Promise.resolve(y.value.v).then(l, f) : h(s[0][2], y);
  }
  function l(y) {
    c("next", y);
  }
  function f(y) {
    c("throw", y);
  }
  function h(y, T) {
    y(T), s.shift(), s.length && c(s[0][0], s[0][1]);
  }
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const rm = /^data\: (.*)(?:\n\n|\r\r|\r\n\r\n)/;
function DN(n) {
  const e = n.body.pipeThrough(new TextDecoderStream("utf8", { fatal: !0 })), t = LN(e), [r, i] = t.tee();
  return {
    stream: xN(r),
    response: NN(i)
  };
}
async function NN(n) {
  const e = [], t = n.getReader();
  for (; ; ) {
    const { done: r, value: i } = await t.read();
    if (r)
      return ch(MN(e));
    e.push(i);
  }
}
function xN(n) {
  return ON(this, arguments, function* () {
    const t = n.getReader();
    for (; ; ) {
      const { value: r, done: i } = yield vs(t.read());
      if (i)
        break;
      yield yield vs(ch(r));
    }
  });
}
function LN(n) {
  const e = n.getReader();
  return new ReadableStream({
    start(r) {
      let i = "";
      return s();
      function s() {
        return e.read().then(({ value: o, done: c }) => {
          if (c) {
            if (i.trim()) {
              r.error(new _s("Failed to parse stream"));
              return;
            }
            r.close();
            return;
          }
          i += o;
          let u = i.match(rm), l;
          for (; u; ) {
            try {
              l = JSON.parse(u[1]);
            } catch {
              r.error(new _s(`Error parsing JSON response: "${u[1]}"`));
              return;
            }
            r.enqueue(l), i = i.substring(u[0].length), u = i.match(rm);
          }
          return s();
        });
      }
    }
  });
}
function MN(n) {
  const e = n[n.length - 1], t = {
    promptFeedback: e == null ? void 0 : e.promptFeedback
  };
  for (const r of n)
    if (r.candidates)
      for (const i of r.candidates) {
        const s = i.index;
        if (t.candidates || (t.candidates = []), t.candidates[s] || (t.candidates[s] = {
          index: i.index
        }), t.candidates[s].citationMetadata = i.citationMetadata, t.candidates[s].finishReason = i.finishReason, t.candidates[s].finishMessage = i.finishMessage, t.candidates[s].safetyRatings = i.safetyRatings, i.content && i.content.parts) {
          t.candidates[s].content || (t.candidates[s].content = {
            role: i.content.role || "user",
            parts: [{ text: "" }]
          });
          for (const o of i.content.parts)
            o.text && (t.candidates[s].content.parts[0].text += o.text);
        }
      }
  return t;
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function pv(n, e, t, r) {
  const i = new Ms(
    e,
    Pr.STREAM_GENERATE_CONTENT,
    n,
    /* stream */
    !0
  ), s = await Vs(i, JSON.stringify(t), r);
  return DN(s);
}
async function mv(n, e, t, r) {
  const i = new Ms(
    e,
    Pr.GENERATE_CONTENT,
    n,
    /* stream */
    !1
  ), o = await (await Vs(i, JSON.stringify(t), r)).json();
  return {
    response: ch(o)
  };
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function ns(n, e) {
  let t = [];
  if (typeof n == "string")
    t = [{ text: n }];
  else
    for (const r of n)
      typeof r == "string" ? t.push({ text: r }) : t.push(r);
  return { role: e, parts: t };
}
function Fc(n) {
  return n.contents ? n : { contents: [ns(n, "user")] };
}
function VN(n) {
  return typeof n == "string" || Array.isArray(n) ? { content: ns(n, "user") } : n;
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const im = "SILENT_ERROR";
class FN {
  constructor(e, t, r, i) {
    this.model = t, this.params = r, this.requestOptions = i, this._history = [], this._sendPromise = Promise.resolve(), this._apiKey = e, r != null && r.history && (this._history = r.history.map((s) => {
      if (!s.role)
        throw new Error("Missing role for history item: " + JSON.stringify(s));
      return ns(s.parts, s.role);
    }));
  }
  /**
   * Gets the chat history so far. Blocked prompts are not added to history.
   * Blocked candidates are not added to history, nor are the prompts that
   * generated them.
   */
  async getHistory() {
    return await this._sendPromise, this._history;
  }
  /**
   * Sends a chat message and receives a non-streaming
   * {@link GenerateContentResult}
   */
  async sendMessage(e) {
    var t, r;
    await this._sendPromise;
    const i = ns(e, "user"), s = {
      safetySettings: (t = this.params) === null || t === void 0 ? void 0 : t.safetySettings,
      generationConfig: (r = this.params) === null || r === void 0 ? void 0 : r.generationConfig,
      contents: [...this._history, i]
    };
    let o;
    return this._sendPromise = this._sendPromise.then(() => mv(this._apiKey, this.model, s, this.requestOptions)).then((c) => {
      var u;
      if (c.response.candidates && c.response.candidates.length > 0) {
        this._history.push(i);
        const l = Object.assign({
          parts: [],
          // Response seems to come back without a role set.
          role: "model"
        }, (u = c.response.candidates) === null || u === void 0 ? void 0 : u[0].content);
        this._history.push(l);
      } else {
        const l = sa(c.response);
        l && console.warn(`sendMessage() was unsuccessful. ${l}. Inspect response object for details.`);
      }
      o = c;
    }), await this._sendPromise, o;
  }
  /**
   * Sends a chat message and receives the response as a
   * {@link GenerateContentStreamResult} containing an iterable stream
   * and a response promise.
   */
  async sendMessageStream(e) {
    var t, r;
    await this._sendPromise;
    const i = ns(e, "user"), s = {
      safetySettings: (t = this.params) === null || t === void 0 ? void 0 : t.safetySettings,
      generationConfig: (r = this.params) === null || r === void 0 ? void 0 : r.generationConfig,
      contents: [...this._history, i]
    }, o = pv(this._apiKey, this.model, s, this.requestOptions);
    return this._sendPromise = this._sendPromise.then(() => o).catch((c) => {
      throw new Error(im);
    }).then((c) => c.response).then((c) => {
      if (c.candidates && c.candidates.length > 0) {
        this._history.push(i);
        const u = Object.assign({}, c.candidates[0].content);
        u.role || (u.role = "model"), this._history.push(u);
      } else {
        const u = sa(c);
        u && console.warn(`sendMessageStream() was unsuccessful. ${u}. Inspect response object for details.`);
      }
    }).catch((c) => {
      c.message !== im && console.error(c);
    }), o;
  }
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function UN(n, e, t, r) {
  const i = new Ms(e, Pr.COUNT_TOKENS, n, !1);
  return (await Vs(i, JSON.stringify(Object.assign(Object.assign({}, t), { model: e })), r)).json();
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function jN(n, e, t, r) {
  const i = new Ms(e, Pr.EMBED_CONTENT, n, !1);
  return (await Vs(i, JSON.stringify(t), r)).json();
}
async function $N(n, e, t, r) {
  const i = new Ms(e, Pr.BATCH_EMBED_CONTENTS, n, !1), s = t.requests.map((c) => Object.assign(Object.assign({}, c), { model: e }));
  return (await Vs(i, JSON.stringify({ requests: s }), r)).json();
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class BN {
  constructor(e, t, r) {
    this.apiKey = e, t.model.includes("/") ? this.model = t.model : this.model = `models/${t.model}`, this.generationConfig = t.generationConfig || {}, this.safetySettings = t.safetySettings || [], this.requestOptions = r || {};
  }
  /**
   * Makes a single non-streaming call to the model
   * and returns an object containing a single {@link GenerateContentResponse}.
   */
  async generateContent(e) {
    const t = Fc(e);
    return mv(this.apiKey, this.model, Object.assign({ generationConfig: this.generationConfig, safetySettings: this.safetySettings }, t), this.requestOptions);
  }
  /**
   * Makes a single streaming call to the model
   * and returns an object containing an iterable stream that iterates
   * over all chunks in the streaming response as well as
   * a promise that returns the final aggregated response.
   */
  async generateContentStream(e) {
    const t = Fc(e);
    return pv(this.apiKey, this.model, Object.assign({ generationConfig: this.generationConfig, safetySettings: this.safetySettings }, t), this.requestOptions);
  }
  /**
   * Gets a new {@link ChatSession} instance which can be used for
   * multi-turn chats.
   */
  startChat(e) {
    return new FN(this.apiKey, this.model, e, this.requestOptions);
  }
  /**
   * Counts the tokens in the provided request.
   */
  async countTokens(e) {
    const t = Fc(e);
    return UN(this.apiKey, this.model, t);
  }
  /**
   * Embeds the provided content.
   */
  async embedContent(e) {
    const t = VN(e);
    return jN(this.apiKey, this.model, t);
  }
  /**
   * Embeds an array of {@link EmbedContentRequest}s.
   */
  async batchEmbedContents(e) {
    return $N(this.apiKey, this.model, e, this.requestOptions);
  }
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class qN {
  constructor(e) {
    this.apiKey = e;
  }
  /**
   * Gets a {@link GenerativeModel} instance for the provided model name.
   */
  getGenerativeModel(e, t) {
    if (!e.model)
      throw new _s("Must provide a model name. Example: genai.getGenerativeModel({ model: 'my-model-name' })");
    return new BN(this.apiKey, e, t);
  }
}
const nL = ({ model: n = "gemini-pro" }) => re.useMemo(() => {
  const t = "AIzaSyAqZVEFBs0JbfAdbVKCBg5OKC85XAmDqnc";
  return new qN(t).getGenerativeModel({ model: n });
}, [n]);
de.plugin(yw);
function rL(n, e = [], t) {
  const r = wt(null);
  return re.useEffect(() => (n().then(r.set), () => {
    t == null || t(e);
  }), e), r.get;
}
function di(n, e = [], t = () => {
}) {
  const r = wt(!0);
  return re.useEffect(() => (r.set(!0), n().then().finally(() => {
    r.set(!1);
  }), () => t(e)), e), r.get;
}
function wt(n) {
  const [e, t] = re.useState(n);
  return {
    get: e,
    set: t
  };
}
function sm(n, e, t = (r) => r) {
  const r = wt(t(n)), i = re.useDeferredValue(r.get);
  return re.useEffect(() => {
    e(i);
  }, [i]), re.useEffect(() => {
    r.set(t(n));
  }, [n]), r;
}
function iL(n, e = [], t = 1e3) {
  const r = wt(null), i = wt(!1);
  return re.useEffect(() => {
    const s = new oa();
    return i.set(!0), s.start(t).then(() => {
      r.set(n()), i.set(!1);
    }), () => {
      s.clear(), i.set(!1);
    };
  }, [...e, t]), [i.get, r.get];
}
function KN(n, e = [], t = 1e3) {
  const r = wt(!1);
  return re.useEffect(() => {
    const i = new oa();
    r.set(!0);
    let s;
    return i.start(t).then(async () => {
      s = n(), s instanceof Promise && await s, r.set(!1);
    }), () => {
      i.clear(), typeof s == "function" && s(), r.set(!1);
    };
  }, [...e, t]), r.get;
}
const sL = (n, e = []) => {
  const t = wt("ready"), r = wt(null), i = wt(null);
  return di(async () => {
    if (t.get == "idle") {
      t.set("loading");
      try {
        const s = await n();
        r.set(s), i.set(null), t.set("success");
      } catch (s) {
        r.set(null), i.set(s), t.set("error");
      }
    }
  }, [t.get, ...e]), {
    status: t,
    data: r,
    error: i
  };
};
function zN(n) {
  const e = Yt.getOne(n);
  return re.useMemo(() => e || null, [e]);
}
function HN() {
  const n = Yt.getAll();
  return re.useMemo(() => n.filter(({ private: t = !1 }) => !t), [n]);
}
function oL(n) {
  const e = Yt.getOneFeild(n, "config");
  return re.useMemo(() => e || null, [e]);
}
function aL() {
  const n = HN(), e = Bt.getOneFeild("findConfigurations", "value"), t = Og.getOneFeild("settings.viewType", "focused"), r = re.useMemo(() => t == "list" ? is.orderBy(n, "name", "asc") : t ? is.orderBy(n, "settingId", "asc") : n, [t, n]), i = gv("settings/findBy.enum"), s = re.useMemo(() => Object.entries(cm(String(e))).map(([c, u]) => [c, u.join(" ")]), [e]), o = re.useMemo(() => r.filter((c) => s.every(([u, l]) => {
    var f;
    switch (u) {
      case "id":
        return xn(c.settingId, l);
      case "name":
        return typeof c.name == "string" && xn(c.name, l);
      case "changed":
        return !Yn(c.def, c.value);
      case "type": {
        const h = (f = c.settingId.match(/\.[a-z]+$/gi)) == null ? void 0 : f[0].slice(1);
        return typeof h == "string" ? xn(l, h) : !1;
      }
      case "default value":
        return i == "nice" ? xn(ew(c.name, c.desc, c.settingId).join(" "), l) : i && xn(String(c[i]), l);
    }
  })), [s, r, i]);
  return re.useEffect(() => {
    Ft("configurations.found.length", o.length);
  }, [o]), o;
}
function cL(n, e) {
  Yt.setOneFeild(n, "config", e);
}
function uL(n, e) {
  Yt.setOneFeild(n, "value", e);
}
function gv(n) {
  const e = zN(n);
  return e == null ? void 0 : e.value;
}
function lL(n) {
  const e = Ta.getAll();
  return re.useMemo(() => is.join({ commandId: n }, e, "commandId->command"), [n, e]);
}
function yv() {
  const n = Ta.getAll();
  return re.useMemo(() => n.filter(({ value: e }) => e), [n]);
}
function hL(n) {
  const e = yv();
  return re.useMemo(() => is.join({ actionName: n }, e, "actionName->action"), [e]);
}
const fL = (n) => Jn.setTemp("settings", n == null ? void 0 : n.toString());
function GN() {
  const n = Mg.getAll();
  return re.useMemo(() => n.filter((e) => !e.private), [n]);
}
function dL() {
  const n = GN(), e = Bt.getOneFeild("findConfigurations", "value"), t = yv(), r = re.useMemo(() => is.fullJoin(n, t, "commandId->command").map(({ childs: o, data: c }) => ({
    ...c,
    keys: o
  })), [n, t]), i = re.useMemo(() => {
    if (!e)
      return r;
    const s = Object.entries(cm(e)).map(([o, c]) => ({
      prop: o,
      value: c.join(" ")
    }));
    return r.filter(({ commandId: o, label: c, keys: u }) => s.every(({ prop: l, value: f }) => {
      switch (l) {
        case "key":
          return xn(u.map(({ value: h }) => h).join(" "), f);
        case "label":
          return xn(c, f);
        case "commandId":
          return o.startsWith(f);
        default:
          return xn([c, ...u.map(({ value: h }) => h)].join(" "), f);
      }
    }));
  }, [e, r]);
  return re.useEffect(() => {
    Ft("configurations.found.length", i.length);
  }, [i]), i;
}
function pL(n, e = []) {
  const t = Object.entries(n), r = t.map(([, i]) => Bt.getOneFeild(i, "value"));
  return re.useMemo(() => {
    const i = {};
    return t.forEach(([s], o) => {
      const c = r[o];
      i[s] = c;
    }), i;
  }, [...r, ...e]);
}
function mL(n) {
  n.forEach((e) => {
    Bt.setOneFeild(e, "value", "");
  });
}
function WN(n) {
  const e = Bt.getOne(n);
  re.useEffect(() => {
    e || Bt.add([
      {
        fieldId: n,
        selection: {
          direction: "forward",
          end: 0,
          start: 0
        },
        value: "",
        controls: {}
      }
    ]);
  }, [e]);
}
function QN(n, e) {
  return re.useMemo(() => {
    if (!e)
      return n || "";
    const r = Math.min(e.start, e.end);
    return (n == null ? void 0 : n.slice(0, r)) || "";
  }, [n, e]);
}
function YN(n, e) {
  return re.useMemo(() => {
    if (!e)
      return n || "";
    const r = Math.max(e.start, e.end);
    return (n == null ? void 0 : n.slice(r)) || "";
  }, [n, e]);
}
function JN(n, e) {
  return re.useMemo(() => {
    if (!e)
      return n || "";
    const r = Math.min(e.start, e.end), i = Math.max(e.start, e.end);
    return (n == null ? void 0 : n.slice(r, i)) || "";
  }, [n, e]);
}
function gL(n) {
  n.forEach(WN);
}
function yL(n) {
  const e = Bt.getOneFeild(n, "value"), t = Bt.getOneFeild(n, "selection");
  return QN(e, t);
}
function _L(n) {
  const e = Bt.getOneFeild(n, "value"), t = Bt.getOneFeild(n, "selection");
  return YN(e, t);
}
function vL(n) {
  const e = Bt.getOneFeild(n, "value"), t = Bt.getOneFeild(n, "selection");
  return JN(e, t);
}
function wL(n, e = we.getState()) {
  const t = n.map((r) => {
    const i = e.fields.entities[r], s = Object.keys((i == null ? void 0 : i.controls) || {});
    if (!i || !s.length)
      return {
        response: [],
        isValide: !0
      };
    const o = i.value, c = s.map((u) => o.match(new RegExp(u, "ig")));
    return { response: c, isValide: c.every(Boolean), fieldName: r };
  });
  return {
    controls: t,
    isValide: t.every(({ isValide: r }) => r)
  };
}
function EL(n, e = "info", t = ft(), r = 5) {
  return T0.add([
    {
      message: n,
      type: e,
      time: r,
      id: t
    }
  ]), t;
}
var XN = /* @__PURE__ */ ((n) => (n[n.short = 5] = "short", n[n.long = 10] = "long", n))(XN || {});
const TL = async () => {
  const n = ft();
  return ar.setTemp("id", n), ar.setTemp("type", "scanQr"), new Promise(async (e) => {
    const t = lh(
      "object.data.view.result",
      (r) => !!r,
      async ({ object: r }) => {
        var s;
        const i = (s = r.data) == null ? void 0 : s.camera;
        (i == null ? void 0 : i.id) == n && (t(), e(i.result));
      }
    );
  });
};
function bL(n) {
  return new Promise(async (e, t) => {
    var o, c;
    if ((c = (o = we.getState().object.data) == null ? void 0 : o.camera) == null ? void 0 : c.id) {
      t("Camera Is Work Now");
      return;
    }
    const i = ft();
    ar.setTemp("id", i), ar.setTemp("type", n), ar.setTemp("result", null), ar.setTemp("error", null);
    const s = lh(
      "object.data.camera",
      (u) => !!(u != null && u.result || u != null && u.error),
      async ({ object: u }) => {
        var f;
        const l = (f = u.data) == null ? void 0 : f.camera;
        (l == null ? void 0 : l.id) == i && (l.result ? e(l.result) : t(l.error), ["id", "type", "result"].forEach((h) => {
          ar.setTemp(h, null);
        }), s());
      }
    );
  });
}
function IL() {
  const n = ml.getEntity(), e = gv("window/dark.boolean");
  return re.useCallback(
    (...t) => {
      const r = {}, i = {};
      if (e == null)
        return i;
      t.forEach((s) => {
        if (s) {
          if (typeof s == "string") {
            r.backgroundColor = s;
            return;
          }
          Object.entries(s).forEach(([o, c]) => {
            if (typeof c == "function") {
              r[o] = c;
              return;
            }
            r[o] = c;
          });
        }
      });
      for (const s in r) {
        const o = r[s];
        if (typeof o == "function")
          i[s] = o(n, e);
        else if (typeof o == "string") {
          const c = n[o];
          c && (i[s] = uh(e, c));
        }
      }
      return i;
    },
    [e, n]
  );
}
function SL(n, ...e) {
  return (t, r) => `linear-gradient(${n} , ${e.filter((i) => t[i]).map((i) => {
    const s = t[i];
    return uh(r, s);
  }).join(" , ")})`;
}
function uh(n, e) {
  return n ? e.dark || e.default : e.light || e.default;
}
function AL(n = []) {
  return (e, t) => n.filter((r) => e[r.colorId]).map(({ colorId: r, x: i = 0, y: s = 0, blur: o = 3, size: c = 1, isInset: u = !1 }) => {
    const l = e[r];
    return `${i}px ${s}px ${o}px ${c}px ${uh(t, l)} ${u ? "inset" : ""}`;
  }).join(" , ");
}
const Ku = (n, e, t) => {
  const r = () => {
    const s = we.getState(), { value: o } = aa(s, n);
    (typeof e == "function" ? e(o) : o == e) && (i(), t(s));
  }, i = we.subscribe(r);
  return i;
}, lh = (n, e, t) => {
  const r = () => {
    const i = we.getState(), { value: s, isValide: o } = aa(i, n);
    if (!o) {
      Wt.warn("Invalid State Dir", n);
      return;
    }
    (typeof e == "function" ? e(s) : s == e) && (t == null || t(i));
  };
  return we.subscribe(r);
}, ZN = () => Ea("userInfo"), RL = () => {
  const n = e1(), e = ZN();
  di(async () => {
    if (n != null && n.uid && jt.server) {
      const t = QO(jt.server.db, "users"), r = qp(t, n.uid), i = {
        photo: n.photoURL,
        phone: n.phoneNumber,
        nickname: n.displayName,
        email: n.email
      }, s = { ...i, uid: n.uid };
      Ft("userInfo", s), await dD(r, i, { merge: !0 });
    } else
      Ft("userInfo", null);
  }, [n]), di(async () => {
    if (n && e) {
      let t = {};
      n.displayName != e.nickname && (t.displayName = e.nickname), n.photoURL != e.photo && (t.photoURL = e.photo), await MR(n, t);
    }
  }, [e, n]), re.useEffect(() => {
    const t = jt.server;
    if (n != null && n.uid && (t != null && t.db))
      return pD(qp(t.db, "users", n.uid), (r) => {
        r.exists() ? Ft("userInfo", {
          uid: r.id,
          ...r.data()
        }) : Ft("userInfo", null);
      });
  }, [n]);
}, e1 = () => {
  const n = wt(null);
  return re.useEffect(() => {
    var e;
    if ((e = jt.server) != null && e.auth)
      return n.set(jt.server.auth.currentUser), UR(jt.server.auth, n.set);
  }, []), n.get;
}, CL = async () => {
  if (!jt.server)
    throw "Server is not initialized";
  sS.setTemp("open", !0), await am(1e3);
  const n = document.getElementById("capatcha-view");
  if (!n)
    throw "capatcha view element is not exists";
  return new dC(jt.server.auth, n);
}, PL = () => {
  Jn.setTemp("profile-view", !0);
}, kL = () => {
  Jn.setTemp("profile-view", !1);
}, OL = (n) => {
  Jn.setTemp("pdf", n);
}, DL = ({ ...n }) => {
  Yt.setOneFeild("visibility/notifays.boolean", "value", !0), cs.add([
    {
      id: ft(),
      buttons: [],
      desc: " - ",
      showDesc: !1,
      removable: !0,
      status: "idle",
      title: "Untitled",
      ...n
    }
  ]);
}, NL = () => {
  const n = Yt.getAll();
  return re.useMemo(() => n.filter(({ def: e, value: t }) => !Yn(e, t)), [n]);
}, xL = (n, e = ft()) => {
  const t = "iframe-" + e;
  return $o.setTemp("id", t), $o.setTemp("src", n.toString()), t;
}, LL = () => {
  $o.setTemp("id", null), $o.setTemp("src", null);
}, ML = () => {
  Jn.setTemp("applications", !0);
}, VL = () => {
  Jn.setTemp("applications", !1);
}, hh = (n, e, t = "dark") => {
  ml.setOneFeild(n, t, e);
}, FL = (n, e) => {
  hh(n, e, "dark");
}, UL = (n, e) => {
  hh(n, e, "light");
}, jL = (n, e) => {
  hh(n, e, "default");
}, $L = (n, e) => {
  const t = Uc(n, "normal", "cabab").toLowerCase();
  xg.upsert([
    {
      word: t,
      ...e
    }
  ]);
}, t1 = async (n) => {
  if (!jt.server)
    throw "Server Need To Be Inited";
  const e = jt.server.storage, t = dN(e, ["global", "themes", n.concat(".json")].join("/"));
  return {
    url: await fN(t),
    storeRef: t
  };
}, BL = (n, e) => {
  Mg.add([n]), n1(n.commandId, e);
}, n1 = (n, e) => {
  const r = we.getState().keys.ids.length;
  Ta.add(
    e.map((i, s) => ({
      keyId: (r + s).toString(),
      command: n,
      ...i
    }))
  );
}, qL = async (n) => {
  const { storeRef: e, url: t } = await t1(n), r = await fetch(t), i = await r.json();
  return ml.upsert(i), {
    json: i,
    response: r,
    url: t,
    storeRef: e
  };
}, KL = () => {
  Jn.setTemp("bottomSheet", !0);
}, zL = () => {
  Jn.setTemp("bottomSheet", !1);
};
export {
  e1 as $,
  WN as A,
  KN as B,
  ax as C,
  k0 as D,
  dL as E,
  lL as F,
  Ta as G,
  gL as H,
  $r as I,
  M1 as J,
  cs as K,
  TN as L,
  uL as M,
  aL as N,
  NL as O,
  D1 as P,
  T0 as Q,
  Mg as R,
  ft as S,
  jt as T,
  EL as U,
  wL as V,
  Nx as W,
  xx as X,
  Mx as Y,
  Ln as Z,
  Mn as _,
  wt as a,
  de as a$,
  ZN as a0,
  Lx as a1,
  $o as a2,
  LL as a3,
  Pd as a4,
  di as a5,
  Ox as a6,
  iL as a7,
  jx as a8,
  $x as a9,
  I1 as aA,
  fx as aB,
  c1 as aC,
  F1 as aD,
  G1 as aE,
  N1 as aF,
  Z1 as aG,
  h1 as aH,
  ox as aI,
  nx as aJ,
  gx as aK,
  E1 as aL,
  cx as aM,
  RL as aN,
  xg as aO,
  BL as aP,
  I0 as aQ,
  Rt as aR,
  Dx as aS,
  h0 as aT,
  ca as aU,
  nL as aV,
  tx as aW,
  Zx as aX,
  xL as aY,
  Bx as aZ,
  qp as a_,
  QO as aa,
  pD as ab,
  VL as ac,
  rL as ad,
  d1 as ae,
  m1 as af,
  y1 as ag,
  v1 as ah,
  O1 as ai,
  R1 as aj,
  ml as ak,
  uh as al,
  lh as am,
  Y1 as an,
  bL as ao,
  pl as ap,
  p1 as aq,
  g1 as ar,
  _1 as as,
  w1 as at,
  pd as au,
  f1 as av,
  a1 as aw,
  gu as ax,
  sx as ay,
  hx as az,
  gv as b,
  x1 as b$,
  _N as b0,
  vN as b1,
  sm as b2,
  zN as b3,
  oL as b4,
  cL as b5,
  hL as b6,
  pL as b7,
  mL as b8,
  QN as b9,
  yu as bA,
  w0 as bB,
  ii as bC,
  C0 as bD,
  P0 as bE,
  Er as bF,
  U1 as bG,
  j1 as bH,
  $1 as bI,
  B1 as bJ,
  q1 as bK,
  K1 as bL,
  z1 as bM,
  H1 as bN,
  EN as bO,
  qx as bP,
  Kx as bQ,
  zx as bR,
  Hx as bS,
  Gx as bT,
  Wx as bU,
  Qx as bV,
  Yx as bW,
  Jx as bX,
  eL as bY,
  tL as bZ,
  _d as b_,
  YN as ba,
  JN as bb,
  yL as bc,
  _L as bd,
  vL as be,
  XN as bf,
  TL as bg,
  Ku as bh,
  CL as bi,
  PL as bj,
  kL as bk,
  OL as bl,
  DL as bm,
  ML as bn,
  hh as bo,
  FL as bp,
  UL as bq,
  jL as br,
  $L as bs,
  t1 as bt,
  n1 as bu,
  qL as bv,
  KL as bw,
  zL as bx,
  G0 as by,
  W0 as bz,
  sL as c,
  Tx as c0,
  bx as c1,
  Ix as c2,
  Sx as c3,
  kd as c4,
  Ax as c5,
  Rx as c6,
  Px as c7,
  kx as c8,
  sS as c9,
  ex as cA,
  L0 as cB,
  rx as cC,
  Td as cD,
  z0 as cE,
  Id as cF,
  co as cG,
  ux as cH,
  Sd as cI,
  lx as cJ,
  F0 as cK,
  Lg as cL,
  U0 as cM,
  $0 as cN,
  bd as cO,
  ix as cP,
  Ad as cQ,
  dx as cR,
  px as cS,
  mx as cT,
  To as cU,
  _x as cV,
  Cd as cW,
  vx as cX,
  iS as cY,
  dd as ca,
  u1 as cb,
  l1 as cc,
  v0 as cd,
  md as ce,
  T1 as cf,
  gd as cg,
  b1 as ch,
  yd as ci,
  b0 as cj,
  S1 as ck,
  A1 as cl,
  C1 as cm,
  P1 as cn,
  k1 as co,
  L1 as cp,
  vd as cq,
  V1 as cr,
  W1 as cs,
  wd as ct,
  Q1 as cu,
  Dg as cv,
  Ng as cw,
  J1 as cx,
  X1 as cy,
  Ed as cz,
  SL as d,
  wx as e,
  Bt as f,
  Ex as g,
  AL as h,
  ar as i,
  yv as j,
  GN as k,
  we as l,
  HN as m,
  Ea as n,
  Xx as o,
  Zt as p,
  j0 as q,
  fL as r,
  Yt as s,
  H0 as t,
  IL as u,
  Jn as v,
  Ft as w,
  Eo as x,
  Og as y,
  Cx as z
};
